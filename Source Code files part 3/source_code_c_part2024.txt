Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListJobsCompleted(this, new ListJobsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Cancel" +
            "Job", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CancelJob(string JobID) {
            object[] results = this.Invoke("CancelJob", new object[] {
                        JobID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancelJob(string JobID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelJob", new object[] {
                        JobID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCancelJob(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CancelJobAsync(string JobID) {
            this.CancelJobAsync(JobID, null);
        }
        
        /// <remarks/>
        public void CancelJobAsync(string JobID, object userState) {
            if ((this.CancelJobOperationCompleted == null)) {
                this.CancelJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelJobOperationCompleted);
            }
            this.InvokeAsync("CancelJob", new object[] {
                        JobID}, this.CancelJobOperationCompleted, userState);
        }
        
        private void OnCancelJobOperationCompleted(object arg) {
            if ((this.CancelJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelJobCompleted(this, new CancelJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
            "DataSource", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateDataSource(string DataSource, string Parent, bool Overwrite, DataSourceDefinition Definition, Property[] Properties) {
            this.Invoke("CreateDataSource", new object[] {
                        DataSource,
                        Parent,
                        Overwrite,
                        Definition,
                        Properties});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateDataSource(string DataSource, string Parent, bool Overwrite, DataSourceDefinition Definition, Property[] Properties, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateDataSource", new object[] {
                        DataSource,
                        Parent,
                        Overwrite,
                        Definition,
                        Properties}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCreateDataSource(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CreateDataSourceAsync(string DataSource, string Parent, bool Overwrite, DataSourceDefinition Definition, Property[] Properties) {
            this.CreateDataSourceAsync(DataSource, Parent, Overwrite, Definition, Properties, null);
        }
        
        /// <remarks/>
        public void CreateDataSourceAsync(string DataSource, string Parent, bool Overwrite, DataSourceDefinition Definition, Property[] Properties, object userState) {
            if ((this.CreateDataSourceOperationCompleted == null)) {
                this.CreateDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDataSourceOperationCompleted);
            }
            this.InvokeAsync("CreateDataSource", new object[] {
                        DataSource,
                        Parent,
                        Overwrite,
                        Definition,
                        Properties}, this.CreateDataSourceOperationCompleted, userState);
        }
        
        private void OnCreateDataSourceOperationCompleted(object arg) {
            if ((this.CreateDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDataSourceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetDat" +
            "aSourceContents", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Definition")]
        public DataSourceDefinition GetDataSourceContents(string DataSource) {
            object[] results = this.Invoke("GetDataSourceContents", new object[] {
                        DataSource});
            return ((DataSourceDefinition)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataSourceContents(string DataSource, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSourceContents", new object[] {
                        DataSource}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSourceDefinition EndGetDataSourceContents(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSourceDefinition)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataSourceContentsAsync(string DataSource) {
            this.GetDataSourceContentsAsync(DataSource, null);
        }
        
        /// <remarks/>
        public void GetDataSourceContentsAsync(string DataSource, object userState) {
            if ((this.GetDataSourceContentsOperationCompleted == null)) {
                this.GetDataSourceContentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSourceContentsOperationCompleted);
            }
            this.InvokeAsync("GetDataSourceContents", new object[] {
                        DataSource}, this.GetDataSourceContentsOperationCompleted, userState);
        }
        
        private void OnGetDataSourceContentsOperationCompleted(object arg) {
            if ((this.GetDataSourceContentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSourceContentsCompleted(this, new GetDataSourceContentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetDat" +
            "aSourceContents", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDataSourceContents(string DataSource, DataSourceDefinition Definition) {
            this.Invoke("SetDataSourceContents", new object[] {
                        DataSource,
                        Definition});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetDataSourceContents(string DataSource, DataSourceDefinition Definition, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetDataSourceContents", new object[] {
                        DataSource,
                        Definition}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetDataSourceContents(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetDataSourceContentsAsync(string DataSource, DataSourceDefinition Definition) {
            this.SetDataSourceContentsAsync(DataSource, Definition, null);
        }
        
        /// <remarks/>
        public void SetDataSourceContentsAsync(string DataSource, DataSourceDefinition Definition, object userState) {
            if ((this.SetDataSourceContentsOperationCompleted == null)) {
                this.SetDataSourceContentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDataSourceContentsOperationCompleted);
            }
            this.InvokeAsync("SetDataSourceContents", new object[] {
                        DataSource,
                        Definition}, this.SetDataSourceContentsOperationCompleted, userState);
        }
        
        private void OnSetDataSourceContentsOperationCompleted(object arg) {
            if ((this.SetDataSourceContentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDataSourceContentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Enable" +
            "DataSource", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnableDataSource(string DataSource) {
            this.Invoke("EnableDataSource", new object[] {
                        DataSource});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnableDataSource(string DataSource, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnableDataSource", new object[] {
                        DataSource}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEnableDataSource(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void EnableDataSourceAsync(string DataSource) {
            this.EnableDataSourceAsync(DataSource, null);
        }
        
        /// <remarks/>
        public void EnableDataSourceAsync(string DataSource, object userState) {
            if ((this.EnableDataSourceOperationCompleted == null)) {
                this.EnableDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableDataSourceOperationCompleted);
            }
            this.InvokeAsync("EnableDataSource", new object[] {
                        DataSource}, this.EnableDataSourceOperationCompleted, userState);
        }
        
        private void OnEnableDataSourceOperationCompleted(object arg) {
            if ((this.EnableDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableDataSourceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Disabl" +
            "eDataSource", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisableDataSource(string DataSource) {
            this.Invoke("DisableDataSource", new object[] {
                        DataSource});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDisableDataSource(string DataSource, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DisableDataSource", new object[] {
                        DataSource}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDisableDataSource(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DisableDataSourceAsync(string DataSource) {
            this.DisableDataSourceAsync(DataSource, null);
        }
        
        /// <remarks/>
        public void DisableDataSourceAsync(string DataSource, object userState) {
            if ((this.DisableDataSourceOperationCompleted == null)) {
                this.DisableDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableDataSourceOperationCompleted);
            }
            this.InvokeAsync("DisableDataSource", new object[] {
                        DataSource}, this.DisableDataSourceOperationCompleted, userState);
        }
        
        private void OnDisableDataSourceOperationCompleted(object arg) {
            if ((this.DisableDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableDataSourceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListRe" +
            "portsUsingDataSource", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Reports")]
        public CatalogItem[] ListReportsUsingDataSource(string DataSource) {
            object[] results = this.Invoke("ListReportsUsingDataSource", new object[] {
                        DataSource});
            return ((CatalogItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListReportsUsingDataSource(string DataSource, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListReportsUsingDataSource", new object[] {
                        DataSource}, callback, asyncState);
        }
        
        /// <remarks/>
        public CatalogItem[] EndListReportsUsingDataSource(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CatalogItem[])(results[0]));
        }
        
        /// <remarks/>
        public void ListReportsUsingDataSourceAsync(string DataSource) {
            this.ListReportsUsingDataSourceAsync(DataSource, null);
        }
        
        /// <remarks/>
        public void ListReportsUsingDataSourceAsync(string DataSource, object userState) {
            if ((this.ListReportsUsingDataSourceOperationCompleted == null)) {
                this.ListReportsUsingDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListReportsUsingDataSourceOperationCompleted);
            }
            this.InvokeAsync("ListReportsUsingDataSource", new object[] {
                        DataSource}, this.ListReportsUsingDataSourceOperationCompleted, userState);
        }
        
        private void OnListReportsUsingDataSourceOperationCompleted(object arg) {
            if ((this.ListReportsUsingDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListReportsUsingDataSourceCompleted(this, new ListReportsUsingDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
            "ortDataSources", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetReportDataSources(string Report, DataSource[] DataSources) {
            this.Invoke("SetReportDataSources", new object[] {
                        Report,
                        DataSources});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetReportDataSources(string Report, DataSource[] DataSources, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetReportDataSources", new object[] {
                        Report,
                        DataSources}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetReportDataSources(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetReportDataSourcesAsync(string Report, DataSource[] DataSources) {
            this.SetReportDataSourcesAsync(Report, DataSources, null);
        }
        
        /// <remarks/>
        public void SetReportDataSourcesAsync(string Report, DataSource[] DataSources, object userState) {
            if ((this.SetReportDataSourcesOperationCompleted == null)) {
                this.SetReportDataSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetReportDataSourcesOperationCompleted);
            }
            this.InvokeAsync("SetReportDataSources", new object[] {
                        Report,
                        DataSources}, this.SetReportDataSourcesOperationCompleted, userState);
        }
        
        private void OnSetReportDataSourcesOperationCompleted(object arg) {
            if ((this.SetReportDataSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetReportDataSourcesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
            "ortDataSources", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DataSources")]
        public DataSource[] GetReportDataSources(string Report) {
            object[] results = this.Invoke("GetReportDataSources", new object[] {
                        Report});
            return ((DataSource[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReportDataSources(string Report, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReportDataSources", new object[] {
                        Report}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSource[] EndGetReportDataSources(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSource[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReportDataSourcesAsync(string Report) {
            this.GetReportDataSourcesAsync(Report, null);
        }
        
        /// <remarks/>
        public void GetReportDataSourcesAsync(string Report, object userState) {
            if ((this.GetReportDataSourcesOperationCompleted == null)) {
                this.GetReportDataSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportDataSourcesOperationCompleted);
            }
            this.InvokeAsync("GetReportDataSources", new object[] {
                        Report}, this.GetReportDataSourcesOperationCompleted, userState);
        }
        
        private void OnGetReportDataSourcesOperationCompleted(object arg) {
            if ((this.GetReportDataSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportDataSourcesCompleted(this, new GetReportDataSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
            "ortDataSourcePrompts", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DataSourcePrompts")]
        public DataSourcePrompt[] GetReportDataSourcePrompts(string Report) {
            object[] results = this.Invoke("GetReportDataSourcePrompts", new object[] {
                        Report});
            return ((DataSourcePrompt[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReportDataSourcePrompts(string Report, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReportDataSourcePrompts", new object[] {
                        Report}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSourcePrompt[] EndGetReportDataSourcePrompts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSourcePrompt[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReportDataSourcePromptsAsync(string Report) {
            this.GetReportDataSourcePromptsAsync(Report, null);
        }
        
        /// <remarks/>
        public void GetReportDataSourcePromptsAsync(string Report, object userState) {
            if ((this.GetReportDataSourcePromptsOperationCompleted == null)) {
                this.GetReportDataSourcePromptsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportDataSourcePromptsOperationCompleted);
            }
            this.InvokeAsync("GetReportDataSourcePrompts", new object[] {
                        Report}, this.GetReportDataSourcePromptsOperationCompleted, userState);
        }
        
        private void OnGetReportDataSourcePromptsOperationCompleted(object arg) {
            if ((this.GetReportDataSourcePromptsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportDataSourcePromptsCompleted(this, new GetReportDataSourcePromptsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
            "ReportHistorySnapshot", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoryID")]
        public string CreateReportHistorySnapshot(string Report, out Warning[] Warnings) {
            object[] results = this.Invoke("CreateReportHistorySnapshot", new object[] {
                        Report});
            Warnings = ((Warning[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateReportHistorySnapshot(string Report, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateReportHistorySnapshot", new object[] {
                        Report}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCreateReportHistorySnapshot(System.IAsyncResult asyncResult, out Warning[] Warnings) {
            object[] results = this.EndInvoke(asyncResult);
            Warnings = ((Warning[])(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateReportHistorySnapshotAsync(string Report) {
            this.CreateReportHistorySnapshotAsync(Report, null);
        }
        
        /// <remarks/>
        public void CreateReportHistorySnapshotAsync(string Report, object userState) {
            if ((this.CreateReportHistorySnapshotOperationCompleted == null)) {
                this.CreateReportHistorySnapshotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateReportHistorySnapshotOperationCompleted);
            }
            this.InvokeAsync("CreateReportHistorySnapshot", new object[] {
                        Report}, this.CreateReportHistorySnapshotOperationCompleted, userState);
        }
        
        private void OnCreateReportHistorySnapshotOperationCompleted(object arg) {
            if ((this.CreateReportHistorySnapshotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateReportHistorySnapshotCompleted(this, new CreateReportHistorySnapshotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
            "ortHistoryOptions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetReportHistoryOptions(string Report, bool EnableManualSnapshotCreation, bool KeepExecutionSnapshots, [System.Xml.Serialization.XmlElementAttribute("NoSchedule", typeof(NoSchedule))] [System.Xml.Serialization.XmlElementAttribute("ScheduleDefinition", typeof(ScheduleDefinition))] [System.Xml.Serialization.XmlElementAttribute("ScheduleReference", typeof(ScheduleReference))] ScheduleDefinitionOrReference Item) {
            this.Invoke("SetReportHistoryOptions", new object[] {
                        Report,
                        EnableManualSnapshotCreation,
                        KeepExecutionSnapshots,
                        Item});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetReportHistoryOptions(string Report, bool EnableManualSnapshotCreation, bool KeepExecutionSnapshots, ScheduleDefinitionOrReference Item, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetReportHistoryOptions", new object[] {
                        Report,
                        EnableManualSnapshotCreation,
                        KeepExecutionSnapshots,
                        Item}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetReportHistoryOptions(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetReportHistoryOptionsAsync(string Report, bool EnableManualSnapshotCreation, bool KeepExecutionSnapshots, ScheduleDefinitionOrReference Item) {
            this.SetReportHistoryOptionsAsync(Report, EnableManualSnapshotCreation, KeepExecutionSnapshots, Item, null);
        }
        
        /// <remarks/>
        public void SetReportHistoryOptionsAsync(string Report, bool EnableManualSnapshotCreation, bool KeepExecutionSnapshots, ScheduleDefinitionOrReference Item, object userState) {
            if ((this.SetReportHistoryOptionsOperationCompleted == null)) {
                this.SetReportHistoryOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetReportHistoryOptionsOperationCompleted);
            }
            this.InvokeAsync("SetReportHistoryOptions", new object[] {
                        Report,
                        EnableManualSnapshotCreation,
                        KeepExecutionSnapshots,
                        Item}, this.SetReportHistoryOptionsOperationCompleted, userState);
        }
        
        private void OnSetReportHistoryOptionsOperationCompleted(object arg) {
            if ((this.SetReportHistoryOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetReportHistoryOptionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
            "ortHistoryOptions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("EnableManualSnapshotCreation")]
        public bool GetReportHistoryOptions(string Report, out bool KeepExecutionSnapshots, [System.Xml.Serialization.XmlElementAttribute("NoSchedule", typeof(NoSchedule))] [System.Xml.Serialization.XmlElementAttribute("ScheduleDefinition", typeof(ScheduleDefinition))] [System.Xml.Serialization.XmlElementAttribute("ScheduleReference", typeof(ScheduleReference))] out ScheduleDefinitionOrReference Item) {
            object[] results = this.Invoke("GetReportHistoryOptions", new object[] {
                        Report});
            KeepExecutionSnapshots = ((bool)(results[1]));
            Item = ((ScheduleDefinitionOrReference)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReportHistoryOptions(string Report, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReportHistoryOptions", new object[] {
                        Report}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetReportHistoryOptions(System.IAsyncResult asyncResult, out bool KeepExecutionSnapshots, out ScheduleDefinitionOrReference Item) {
            object[] results = this.EndInvoke(asyncResult);
            KeepExecutionSnapshots = ((bool)(results[1]));
            Item = ((ScheduleDefinitionOrReference)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportHistoryOptionsAsync(string Report) {
            this.GetReportHistoryOptionsAsync(Report, null);
        }
        
        /// <remarks/>
        public void GetReportHistoryOptionsAsync(string Report, object userState) {
            if ((this.GetReportHistoryOptionsOperationCompleted == null)) {
                this.GetReportHistoryOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportHistoryOptionsOperationCompleted);
            }
            this.InvokeAsync("GetReportHistoryOptions", new object[] {
                        Report}, this.GetReportHistoryOptionsOperationCompleted, userState);
        }
        
        private void OnGetReportHistoryOptionsOperationCompleted(object arg) {
            if ((this.GetReportHistoryOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportHistoryOptionsCompleted(this, new GetReportHistoryOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRep" +
            "ortHistoryLimit", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetReportHistoryLimit(string Report, bool UseSystem, int HistoryLimit) {
            this.Invoke("SetReportHistoryLimit", new object[] {
                        Report,
                        UseSystem,
                        HistoryLimit});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetReportHistoryLimit(string Report, bool UseSystem, int HistoryLimit, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetReportHistoryLimit", new object[] {
                        Report,
                        UseSystem,
                        HistoryLimit}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetReportHistoryLimit(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetReportHistoryLimitAsync(string Report, bool UseSystem, int HistoryLimit) {
            this.SetReportHistoryLimitAsync(Report, UseSystem, HistoryLimit, null);
        }
        
        /// <remarks/>
        public void SetReportHistoryLimitAsync(string Report, bool UseSystem, int HistoryLimit, object userState) {
            if ((this.SetReportHistoryLimitOperationCompleted == null)) {
                this.SetReportHistoryLimitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetReportHistoryLimitOperationCompleted);
            }
            this.InvokeAsync("SetReportHistoryLimit", new object[] {
                        Report,
                        UseSystem,
                        HistoryLimit}, this.SetReportHistoryLimitOperationCompleted, userState);
        }
        
        private void OnSetReportHistoryLimitOperationCompleted(object arg) {
            if ((this.SetReportHistoryLimitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetReportHistoryLimitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRep" +
            "ortHistoryLimit", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("HistoryLimit")]
        public int GetReportHistoryLimit(string Report, out bool IsSystem, out int SystemLimit) {
            object[] results = this.Invoke("GetReportHistoryLimit", new object[] {
                        Report});
            IsSystem = ((bool)(results[1]));
            SystemLimit = ((int)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReportHistoryLimit(string Report, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReportHistoryLimit", new object[] {
                        Report}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetReportHistoryLimit(System.IAsyncResult asyncResult, out bool IsSystem, out int SystemLimit) {
            object[] results = this.EndInvoke(asyncResult);
            IsSystem = ((bool)(results[1]));
            SystemLimit = ((int)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportHistoryLimitAsync(string Report) {
            this.GetReportHistoryLimitAsync(Report, null);
        }
        
        /// <remarks/>
        public void GetReportHistoryLimitAsync(string Report, object userState) {
            if ((this.GetReportHistoryLimitOperationCompleted == null)) {
                this.GetReportHistoryLimitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportHistoryLimitOperationCompleted);
            }
            this.InvokeAsync("GetReportHistoryLimit", new object[] {
                        Report}, this.GetReportHistoryLimitOperationCompleted, userState);
        }
        
        private void OnGetReportHistoryLimitOperationCompleted(object arg) {
            if ((this.GetReportHistoryLimitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportHistoryLimitCompleted(this, new GetReportHistoryLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListRe" +
            "portHistory", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("ReportHistory")]
        public ReportHistorySnapshot[] ListReportHistory(string Report) {
            object[] results = this.Invoke("ListReportHistory", new object[] {
                        Report});
            return ((ReportHistorySnapshot[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListReportHistory(string Report, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListReportHistory", new object[] {
                        Report}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReportHistorySnapshot[] EndListReportHistory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReportHistorySnapshot[])(results[0]));
        }
        
        /// <remarks/>
        public void ListReportHistoryAsync(string Report) {
            this.ListReportHistoryAsync(Report, null);
        }
        
        /// <remarks/>
        public void ListReportHistoryAsync(string Report, object userState) {
            if ((this.ListReportHistoryOperationCompleted == null)) {
                this.ListReportHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListReportHistoryOperationCompleted);
            }
            this.InvokeAsync("ListReportHistory", new object[] {
                        Report}, this.ListReportHistoryOperationCompleted, userState);
        }
        
        private void OnListReportHistoryOperationCompleted(object arg) {
            if ((this.ListReportHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListReportHistoryCompleted(this, new ListReportHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
            "ReportHistorySnapshot", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteReportHistorySnapshot(string Report, string HistoryID) {
            this.Invoke("DeleteReportHistorySnapshot", new object[] {
                        Report,
                        HistoryID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteReportHistorySnapshot(string Report, string HistoryID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteReportHistorySnapshot", new object[] {
                        Report,
                        HistoryID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteReportHistorySnapshot(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteReportHistorySnapshotAsync(string Report, string HistoryID) {
            this.DeleteReportHistorySnapshotAsync(Report, HistoryID, null);
        }
        
        /// <remarks/>
        public void DeleteReportHistorySnapshotAsync(string Report, string HistoryID, object userState) {
            if ((this.DeleteReportHistorySnapshotOperationCompleted == null)) {
                this.DeleteReportHistorySnapshotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteReportHistorySnapshotOperationCompleted);
            }
            this.InvokeAsync("DeleteReportHistorySnapshot", new object[] {
                        Report,
                        HistoryID}, this.DeleteReportHistorySnapshotOperationCompleted, userState);
        }
        
        private void OnDeleteReportHistorySnapshotOperationCompleted(object arg) {
            if ((this.DeleteReportHistorySnapshotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteReportHistorySnapshotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/FindIt" +
            "ems", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Items")]
        public CatalogItem[] FindItems(string Folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions) {
            object[] results = this.Invoke("FindItems", new object[] {
                        Folder,
                        BooleanOperator,
                        Conditions});
            return ((CatalogItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindItems(string Folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindItems", new object[] {
                        Folder,
                        BooleanOperator,
                        Conditions}, callback, asyncState);
        }
        
        /// <remarks/>
        public CatalogItem[] EndFindItems(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CatalogItem[])(results[0]));
        }
        
        /// <remarks/>
        public void FindItemsAsync(string Folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions) {
            this.FindItemsAsync(Folder, BooleanOperator, Conditions, null);
        }
        
        /// <remarks/>
        public void FindItemsAsync(string Folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions, object userState) {
            if ((this.FindItemsOperationCompleted == null)) {
                this.FindItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindItemsOperationCompleted);
            }
            this.InvokeAsync("FindItems", new object[] {
                        Folder,
                        BooleanOperator,
                        Conditions}, this.FindItemsOperationCompleted, userState);
        }
        
        private void OnFindItemsOperationCompleted(object arg) {
            if ((this.FindItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindItemsCompleted(this, new FindItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
            "Schedule", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ScheduleID")]
        public string CreateSchedule(string Name, ScheduleDefinition ScheduleDefinition) {
            object[] results = this.Invoke("CreateSchedule", new object[] {
                        Name,
                        ScheduleDefinition});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateSchedule(string Name, ScheduleDefinition ScheduleDefinition, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateSchedule", new object[] {
                        Name,
                        ScheduleDefinition}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCreateSchedule(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateScheduleAsync(string Name, ScheduleDefinition ScheduleDefinition) {
            this.CreateScheduleAsync(Name, ScheduleDefinition, null);
        }
        
        /// <remarks/>
        public void CreateScheduleAsync(string Name, ScheduleDefinition ScheduleDefinition, object userState) {
            if ((this.CreateScheduleOperationCompleted == null)) {
                this.CreateScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateScheduleOperationCompleted);
            }
            this.InvokeAsync("CreateSchedule", new object[] {
                        Name,
                        ScheduleDefinition}, this.CreateScheduleOperationCompleted, userState);
        }
        
        private void OnCreateScheduleOperationCompleted(object arg) {
            if ((this.CreateScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateScheduleCompleted(this, new CreateScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
            "Schedule", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSchedule(string ScheduleID) {
            this.Invoke("DeleteSchedule", new object[] {
                        ScheduleID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSchedule(string ScheduleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSchedule", new object[] {
                        ScheduleID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteSchedule(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteScheduleAsync(string ScheduleID) {
            this.DeleteScheduleAsync(ScheduleID, null);
        }
        
        /// <remarks/>
        public void DeleteScheduleAsync(string ScheduleID, object userState) {
            if ((this.DeleteScheduleOperationCompleted == null)) {
                this.DeleteScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteScheduleOperationCompleted);
            }
            this.InvokeAsync("DeleteSchedule", new object[] {
                        ScheduleID}, this.DeleteScheduleOperationCompleted, userState);
        }
        
        private void OnDeleteScheduleOperationCompleted(object arg) {
            if ((this.DeleteScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteScheduleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSch" +
            "eduleProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetScheduleProperties(string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition) {
            this.Invoke("SetScheduleProperties", new object[] {
                        Name,
                        ScheduleID,
                        ScheduleDefinition});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetScheduleProperties(string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetScheduleProperties", new object[] {
                        Name,
                        ScheduleID,
                        ScheduleDefinition}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetScheduleProperties(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetSchedulePropertiesAsync(string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition) {
            this.SetSchedulePropertiesAsync(Name, ScheduleID, ScheduleDefinition, null);
        }
        
        /// <remarks/>
        public void SetSchedulePropertiesAsync(string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition, object userState) {
            if ((this.SetSchedulePropertiesOperationCompleted == null)) {
                this.SetSchedulePropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSchedulePropertiesOperationCompleted);
            }
            this.InvokeAsync("SetScheduleProperties", new object[] {
                        Name,
                        ScheduleID,
                        ScheduleDefinition}, this.SetSchedulePropertiesOperationCompleted, userState);
        }
        
        private void OnSetSchedulePropertiesOperationCompleted(object arg) {
            if ((this.SetSchedulePropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSchedulePropertiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSch" +
            "eduleProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Schedule")]
        public Schedule GetScheduleProperties(string ScheduleID) {
            object[] results = this.Invoke("GetScheduleProperties", new object[] {
                        ScheduleID});
            return ((Schedule)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetScheduleProperties(string ScheduleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScheduleProperties", new object[] {
                        ScheduleID}, callback, asyncState);
        }
        
        /// <remarks/>
        public Schedule EndGetScheduleProperties(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Schedule)(results[0]));
        }
        
        /// <remarks/>
        public void GetSchedulePropertiesAsync(string ScheduleID) {
            this.GetSchedulePropertiesAsync(ScheduleID, null);
        }
        
        /// <remarks/>
        public void GetSchedulePropertiesAsync(string ScheduleID, object userState) {
            if ((this.GetSchedulePropertiesOperationCompleted == null)) {
                this.GetSchedulePropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchedulePropertiesOperationCompleted);
            }
            this.InvokeAsync("GetScheduleProperties", new object[] {
                        ScheduleID}, this.GetSchedulePropertiesOperationCompleted, userState);
        }
        
        private void OnGetSchedulePropertiesOperationCompleted(object arg) {
            if ((this.GetSchedulePropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchedulePropertiesCompleted(this, new GetSchedulePropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSc" +
            "heduledReports", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Reports")]
        public CatalogItem[] ListScheduledReports(string ScheduleID) {
            object[] results = this.Invoke("ListScheduledReports", new object[] {
                        ScheduleID});
            return ((CatalogItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListScheduledReports(string ScheduleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListScheduledReports", new object[] {
                        ScheduleID}, callback, asyncState);
        }
        
        /// <remarks/>
        public CatalogItem[] EndListScheduledReports(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CatalogItem[])(results[0]));
        }
        
        /// <remarks/>
        public void ListScheduledReportsAsync(string ScheduleID) {
            this.ListScheduledReportsAsync(ScheduleID, null);
        }
        
        /// <remarks/>
        public void ListScheduledReportsAsync(string ScheduleID, object userState) {
            if ((this.ListScheduledReportsOperationCompleted == null)) {
                this.ListScheduledReportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListScheduledReportsOperationCompleted);
            }
            this.InvokeAsync("ListScheduledReports", new object[] {
                        ScheduleID}, this.ListScheduledReportsOperationCompleted, userState);
        }
        
        private void OnListScheduledReportsOperationCompleted(object arg) {
            if ((this.ListScheduledReportsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListScheduledReportsCompleted(this, new ListScheduledReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSc" +
            "hedules", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Schedules")]
        public Schedule[] ListSchedules() {
            object[] results = this.Invoke("ListSchedules", new object[0]);
            return ((Schedule[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListSchedules(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListSchedules", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Schedule[] EndListSchedules(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Schedule[])(results[0]));
        }
        
        /// <remarks/>
        public void ListSchedulesAsync() {
            this.ListSchedulesAsync(null);
        }
        
        /// <remarks/>
        public void ListSchedulesAsync(object userState) {
            if ((this.ListSchedulesOperationCompleted == null)) {
                this.ListSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListSchedulesOperationCompleted);
            }
            this.InvokeAsync("ListSchedules", new object[0], this.ListSchedulesOperationCompleted, userState);
        }
        
        private void OnListSchedulesOperationCompleted(object arg) {
            if ((this.ListSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListSchedulesCompleted(this, new ListSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/PauseS" +
            "chedule", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PauseSchedule(string ScheduleID) {
            this.Invoke("PauseSchedule", new object[] {
                        ScheduleID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPauseSchedule(string ScheduleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PauseSchedule", new object[] {
                        ScheduleID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPauseSchedule(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PauseScheduleAsync(string ScheduleID) {
            this.PauseScheduleAsync(ScheduleID, null);
        }
        
        /// <remarks/>
        public void PauseScheduleAsync(string ScheduleID, object userState) {
            if ((this.PauseScheduleOperationCompleted == null)) {
                this.PauseScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPauseScheduleOperationCompleted);
            }
            this.InvokeAsync("PauseSchedule", new object[] {
                        ScheduleID}, this.PauseScheduleOperationCompleted, userState);
        }
        
        private void OnPauseScheduleOperationCompleted(object arg) {
            if ((this.PauseScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PauseScheduleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Resume" +
            "Schedule", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResumeSchedule(string ScheduleID) {
            this.Invoke("ResumeSchedule", new object[] {
                        ScheduleID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginResumeSchedule(string ScheduleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ResumeSchedule", new object[] {
                        ScheduleID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndResumeSchedule(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ResumeScheduleAsync(string ScheduleID) {
            this.ResumeScheduleAsync(ScheduleID, null);
        }
        
        /// <remarks/>
        public void ResumeScheduleAsync(string ScheduleID, object userState) {
            if ((this.ResumeScheduleOperationCompleted == null)) {
                this.ResumeScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResumeScheduleOperationCompleted);
            }
            this.InvokeAsync("ResumeSchedule", new object[] {
                        ScheduleID}, this.ResumeScheduleOperationCompleted, userState);
        }
        
        private void OnResumeScheduleOperationCompleted(object arg) {
            if ((this.ResumeScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResumeScheduleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
            "Subscription", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SubscriptionID")]
        public string CreateSubscription(string Report, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters) {
            object[] results = this.Invoke("CreateSubscription", new object[] {
                        Report,
                        ExtensionSettings,
                        Description,
                        EventType,
                        MatchData,
                        Parameters});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateSubscription(string Report, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateSubscription", new object[] {
                        Report,
                        ExtensionSettings,
                        Description,
                        EventType,
                        MatchData,
                        Parameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCreateSubscription(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSubscriptionAsync(string Report, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters) {
            this.CreateSubscriptionAsync(Report, ExtensionSettings, Description, EventType, MatchData, Parameters, null);
        }
        
        /// <remarks/>
        public void CreateSubscriptionAsync(string Report, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters, object userState) {
            if ((this.CreateSubscriptionOperationCompleted == null)) {
                this.CreateSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSubscriptionOperationCompleted);
            }
            this.InvokeAsync("CreateSubscription", new object[] {
                        Report,
                        ExtensionSettings,
                        Description,
                        EventType,
                        MatchData,
                        Parameters}, this.CreateSubscriptionOperationCompleted, userState);
        }
        
        private void OnCreateSubscriptionOperationCompleted(object arg) {
            if ((this.CreateSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSubscriptionCompleted(this, new CreateSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
            "DataDrivenSubscription", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SubscriptionID")]
        public string CreateDataDrivenSubscription(string Report, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters) {
            object[] results = this.Invoke("CreateDataDrivenSubscription", new object[] {
                        Report,
                        ExtensionSettings,
                        DataRetrievalPlan,
                        Description,
                        EventType,
                        MatchData,
                        Parameters});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateDataDrivenSubscription(string Report, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateDataDrivenSubscription", new object[] {
                        Report,
                        ExtensionSettings,
                        DataRetrievalPlan,
                        Description,
                        EventType,
                        MatchData,
                        Parameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCreateDataDrivenSubscription(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateDataDrivenSubscriptionAsync(string Report, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters) {
            this.CreateDataDrivenSubscriptionAsync(Report, ExtensionSettings, DataRetrievalPlan, Description, EventType, MatchData, Parameters, null);
        }
        
        /// <remarks/>
        public void CreateDataDrivenSubscriptionAsync(string Report, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters, object userState) {
            if ((this.CreateDataDrivenSubscriptionOperationCompleted == null)) {
                this.CreateDataDrivenSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDataDrivenSubscriptionOperationCompleted);
            }
            this.InvokeAsync("CreateDataDrivenSubscription", new object[] {
                        Report,
                        ExtensionSettings,
                        DataRetrievalPlan,
                        Description,
                        EventType,
                        MatchData,
                        Parameters}, this.CreateDataDrivenSubscriptionOperationCompleted, userState);
        }
        
        private void OnCreateDataDrivenSubscriptionOperationCompleted(object arg) {
            if ((this.CreateDataDrivenSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDataDrivenSubscriptionCompleted(this, new CreateDataDrivenSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSub" +
            "scriptionProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetSubscriptionProperties(string SubscriptionID, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters) {
            this.Invoke("SetSubscriptionProperties", new object[] {
                        SubscriptionID,
                        ExtensionSettings,
                        Description,
                        EventType,
                        MatchData,
                        Parameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetSubscriptionProperties(string SubscriptionID, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetSubscriptionProperties", new object[] {
                        SubscriptionID,
                        ExtensionSettings,
                        Description,
                        EventType,
                        MatchData,
                        Parameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetSubscriptionProperties(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetSubscriptionPropertiesAsync(string SubscriptionID, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters) {
            this.SetSubscriptionPropertiesAsync(SubscriptionID, ExtensionSettings, Description, EventType, MatchData, Parameters, null);
        }
        
        /// <remarks/>
        public void SetSubscriptionPropertiesAsync(string SubscriptionID, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters, object userState) {
            if ((this.SetSubscriptionPropertiesOperationCompleted == null)) {
                this.SetSubscriptionPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSubscriptionPropertiesOperationCompleted);
            }
            this.InvokeAsync("SetSubscriptionProperties", new object[] {
                        SubscriptionID,
                        ExtensionSettings,
                        Description,
                        EventType,
                        MatchData,
                        Parameters}, this.SetSubscriptionPropertiesOperationCompleted, userState);
        }
        
        private void OnSetSubscriptionPropertiesOperationCompleted(object arg) {
            if ((this.SetSubscriptionPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSubscriptionPropertiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetDat" +
            "aDrivenSubscriptionProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters) {
            this.Invoke("SetDataDrivenSubscriptionProperties", new object[] {
                        DataDrivenSubscriptionID,
                        ExtensionSettings,
                        DataRetrievalPlan,
                        Description,
                        EventType,
                        MatchData,
                        Parameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetDataDrivenSubscriptionProperties", new object[] {
                        DataDrivenSubscriptionID,
                        ExtensionSettings,
                        DataRetrievalPlan,
                        Description,
                        EventType,
                        MatchData,
                        Parameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetDataDrivenSubscriptionProperties(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetDataDrivenSubscriptionPropertiesAsync(string DataDrivenSubscriptionID, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters) {
            this.SetDataDrivenSubscriptionPropertiesAsync(DataDrivenSubscriptionID, ExtensionSettings, DataRetrievalPlan, Description, EventType, MatchData, Parameters, null);
        }
        
        /// <remarks/>
        public void SetDataDrivenSubscriptionPropertiesAsync(string DataDrivenSubscriptionID, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters, object userState) {
            if ((this.SetDataDrivenSubscriptionPropertiesOperationCompleted == null)) {
                this.SetDataDrivenSubscriptionPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDataDrivenSubscriptionPropertiesOperationCompleted);
            }
            this.InvokeAsync("SetDataDrivenSubscriptionProperties", new object[] {
                        DataDrivenSubscriptionID,
                        ExtensionSettings,
                        DataRetrievalPlan,
                        Description,
                        EventType,
                        MatchData,
                        Parameters}, this.SetDataDrivenSubscriptionPropertiesOperationCompleted, userState);
        }
        
        private void OnSetDataDrivenSubscriptionPropertiesOperationCompleted(object arg) {
            if ((this.SetDataDrivenSubscriptionPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDataDrivenSubscriptionPropertiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSub" +
            "scriptionProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Owner")]
        public string GetSubscriptionProperties(string SubscriptionID, out ExtensionSettings ExtensionSettings, out string Description, out ActiveState Active, out string Status, out string EventType, out string MatchData, out ParameterValue[] Parameters) {
            object[] results = this.Invoke("GetSubscriptionProperties", new object[] {
                        SubscriptionID});
            ExtensionSettings = ((ExtensionSettings)(results[1]));
            Description = ((string)(results[2]));
            Active = ((ActiveState)(results[3]));
            Status = ((string)(results[4]));
            EventType = ((string)(results[5]));
            MatchData = ((string)(results[6]));
            Parameters = ((ParameterValue[])(results[7]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSubscriptionProperties(string SubscriptionID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSubscriptionProperties", new object[] {
                        SubscriptionID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetSubscriptionProperties(System.IAsyncResult asyncResult, out ExtensionSettings ExtensionSettings, out string Description, out ActiveState Active, out string Status, out string EventType, out string MatchData, out ParameterValue[] Parameters) {
            object[] results = this.EndInvoke(asyncResult);
            ExtensionSettings = ((ExtensionSettings)(results[1]));
            Description = ((string)(results[2]));
            Active = ((ActiveState)(results[3]));
            Status = ((string)(results[4]));
            EventType = ((string)(results[5]));
            MatchData = ((string)(results[6]));
            Parameters = ((ParameterValue[])(results[7]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubscriptionPropertiesAsync(string SubscriptionID) {
            this.GetSubscriptionPropertiesAsync(SubscriptionID, null);
        }
        
        /// <remarks/>
        public void GetSubscriptionPropertiesAsync(string SubscriptionID, object userState) {
            if ((this.GetSubscriptionPropertiesOperationCompleted == null)) {
                this.GetSubscriptionPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscriptionPropertiesOperationCompleted);
            }
            this.InvokeAsync("GetSubscriptionProperties", new object[] {
                        SubscriptionID}, this.GetSubscriptionPropertiesOperationCompleted, userState);
        }
        
        private void OnGetSubscriptionPropertiesOperationCompleted(object arg) {
            if ((this.GetSubscriptionPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubscriptionPropertiesCompleted(this, new GetSubscriptionPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetDat" +
            "aDrivenSubscriptionProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Owner")]
        public string GetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID, out ExtensionSettings ExtensionSettings, out DataRetrievalPlan DataRetrievalPlan, out string Description, out ActiveState Active, out string Status, out string EventType, out string MatchData, out ParameterValueOrFieldReference[] Parameters) {
            object[] results = this.Invoke("GetDataDrivenSubscriptionProperties", new object[] {
                        DataDrivenSubscriptionID});
            ExtensionSettings = ((ExtensionSettings)(results[1]));
            DataRetrievalPlan = ((DataRetrievalPlan)(results[2]));
            Description = ((string)(results[3]));
            Active = ((ActiveState)(results[4]));
            Status = ((string)(results[5]));
            EventType = ((string)(results[6]));
            MatchData = ((string)(results[7]));
            Parameters = ((ParameterValueOrFieldReference[])(results[8]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataDrivenSubscriptionProperties(string DataDrivenSubscriptionID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataDrivenSubscriptionProperties", new object[] {
                        DataDrivenSubscriptionID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDataDrivenSubscriptionProperties(System.IAsyncResult asyncResult, out ExtensionSettings ExtensionSettings, out DataRetrievalPlan DataRetrievalPlan, out string Description, out ActiveState Active, out string Status, out string EventType, out string MatchData, out ParameterValueOrFieldReference[] Parameters) {
            object[] results = this.EndInvoke(asyncResult);
            ExtensionSettings = ((ExtensionSettings)(results[1]));
            DataRetrievalPlan = ((DataRetrievalPlan)(results[2]));
            Description = ((string)(results[3]));
            Active = ((ActiveState)(results[4]));
            Status = ((string)(results[5]));
            EventType = ((string)(results[6]));
            MatchData = ((string)(results[7]));
            Parameters = ((ParameterValueOrFieldReference[])(results[8]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataDrivenSubscriptionPropertiesAsync(string DataDrivenSubscriptionID) {
            this.GetDataDrivenSubscriptionPropertiesAsync(DataDrivenSubscriptionID, null);
        }
        
        /// <remarks/>
        public void GetDataDrivenSubscriptionPropertiesAsync(string DataDrivenSubscriptionID, object userState) {
            if ((this.GetDataDrivenSubscriptionPropertiesOperationCompleted == null)) {
                this.GetDataDrivenSubscriptionPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataDrivenSubscriptionPropertiesOperationCompleted);
            }
            this.InvokeAsync("GetDataDrivenSubscriptionProperties", new object[] {
                        DataDrivenSubscriptionID}, this.GetDataDrivenSubscriptionPropertiesOperationCompleted, userState);
        }
        
        private void OnGetDataDrivenSubscriptionPropertiesOperationCompleted(object arg) {
            if ((this.GetDataDrivenSubscriptionPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataDrivenSubscriptionPropertiesCompleted(this, new GetDataDrivenSubscriptionPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
            "Subscription", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSubscription(string SubscriptionID) {
            this.Invoke("DeleteSubscription", new object[] {
                        SubscriptionID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSubscription(string SubscriptionID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSubscription", new object[] {
                        SubscriptionID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteSubscription(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteSubscriptionAsync(string SubscriptionID) {
            this.DeleteSubscriptionAsync(SubscriptionID, null);
        }
        
        /// <remarks/>
        public void DeleteSubscriptionAsync(string SubscriptionID, object userState) {
            if ((this.DeleteSubscriptionOperationCompleted == null)) {
                this.DeleteSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSubscriptionOperationCompleted);
            }
            this.InvokeAsync("DeleteSubscription", new object[] {
                        SubscriptionID}, this.DeleteSubscriptionOperationCompleted, userState);
        }
        
        private void OnDeleteSubscriptionOperationCompleted(object arg) {
            if ((this.DeleteSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSubscriptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Prepar" +
            "eQuery", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DataSettings")]
        public DataSetDefinition PrepareQuery(DataSource DataSource, DataSetDefinition DataSet, out bool Changed) {
            object[] results = this.Invoke("PrepareQuery", new object[] {
                        DataSource,
                        DataSet});
            Changed = ((bool)(results[1]));
            return ((DataSetDefinition)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrepareQuery(DataSource DataSource, DataSetDefinition DataSet, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PrepareQuery", new object[] {
                        DataSource,
                        DataSet}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSetDefinition EndPrepareQuery(System.IAsyncResult asyncResult, out bool Changed) {
            object[] results = this.EndInvoke(asyncResult);
            Changed = ((bool)(results[1]));
            return ((DataSetDefinition)(results[0]));
        }
        
        /// <remarks/>
        public void PrepareQueryAsync(DataSource DataSource, DataSetDefinition DataSet) {
            this.PrepareQueryAsync(DataSource, DataSet, null);
        }
        
        /// <remarks/>
        public void PrepareQueryAsync(DataSource DataSource, DataSetDefinition DataSet, object userState) {
            if ((this.PrepareQueryOperationCompleted == null)) {
                this.PrepareQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareQueryOperationCompleted);
            }
            this.InvokeAsync("PrepareQuery", new object[] {
                        DataSource,
                        DataSet}, this.PrepareQueryOperationCompleted, userState);
        }
        
        private void OnPrepareQueryOperationCompleted(object arg) {
            if ((this.PrepareQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareQueryCompleted(this, new PrepareQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetExt" +
            "ensionSettings", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("ExtensionParameters")]
        public ExtensionParameter[] GetExtensionSettings(string Extension) {
            object[] results = this.Invoke("GetExtensionSettings", new object[] {
                        Extension});
            return ((ExtensionParameter[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExtensionSettings(string Extension, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExtensionSettings", new object[] {
                        Extension}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExtensionParameter[] EndGetExtensionSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExtensionParameter[])(results[0]));
        }
        
        /// <remarks/>
        public void GetExtensionSettingsAsync(string Extension) {
            this.GetExtensionSettingsAsync(Extension, null);
        }
        
        /// <remarks/>
        public void GetExtensionSettingsAsync(string Extension, object userState) {
            if ((this.GetExtensionSettingsOperationCompleted == null)) {
                this.GetExtensionSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExtensionSettingsOperationCompleted);
            }
            this.InvokeAsync("GetExtensionSettings", new object[] {
                        Extension}, this.GetExtensionSettingsOperationCompleted, userState);
        }
        
        private void OnGetExtensionSettingsOperationCompleted(object arg) {
            if ((this.GetExtensionSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExtensionSettingsCompleted(this, new GetExtensionSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Valida" +
            "teExtensionSettings", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("ParameterErrors")]
        public ExtensionParameter[] ValidateExtensionSettings(string Extension, ParameterValueOrFieldReference[] ParameterValues) {
            object[] results = this.Invoke("ValidateExtensionSettings", new object[] {
                        Extension,
                        ParameterValues});
            return ((ExtensionParameter[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidateExtensionSettings(string Extension, ParameterValueOrFieldReference[] ParameterValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateExtensionSettings", new object[] {
                        Extension,
                        ParameterValues}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExtensionParameter[] EndValidateExtensionSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExtensionParameter[])(results[0]));
        }
        
        /// <remarks/>
        public void ValidateExtensionSettingsAsync(string Extension, ParameterValueOrFieldReference[] ParameterValues) {
            this.ValidateExtensionSettingsAsync(Extension, ParameterValues, null);
        }
        
        /// <remarks/>
        public void ValidateExtensionSettingsAsync(string Extension, ParameterValueOrFieldReference[] ParameterValues, object userState) {
            if ((this.ValidateExtensionSettingsOperationCompleted == null)) {
                this.ValidateExtensionSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateExtensionSettingsOperationCompleted);
            }
            this.InvokeAsync("ValidateExtensionSettings", new object[] {
                        Extension,
                        ParameterValues}, this.ValidateExtensionSettingsOperationCompleted, userState);
        }
        
        private void OnValidateExtensionSettingsOperationCompleted(object arg) {
            if ((this.ValidateExtensionSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateExtensionSettingsCompleted(this, new ValidateExtensionSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSu" +
            "bscriptions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("SubscriptionItems")]
        public Subscription[] ListSubscriptions(string Report, string Owner) {
            object[] results = this.Invoke("ListSubscriptions", new object[] {
                        Report,
                        Owner});
            return ((Subscription[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListSubscriptions(string Report, string Owner, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListSubscriptions", new object[] {
                        Report,
                        Owner}, callback, asyncState);
        }
        
        /// <remarks/>
        public Subscription[] EndListSubscriptions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Subscription[])(results[0]));
        }
        
        /// <remarks/>
        public void ListSubscriptionsAsync(string Report, string Owner) {
            this.ListSubscriptionsAsync(Report, Owner, null);
        }
        
        /// <remarks/>
        public void ListSubscriptionsAsync(string Report, string Owner, object userState) {
            if ((this.ListSubscriptionsOperationCompleted == null)) {
                this.ListSubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListSubscriptionsOperationCompleted);
            }
            this.InvokeAsync("ListSubscriptions", new object[] {
                        Report,
                        Owner}, this.ListSubscriptionsOperationCompleted, userState);
        }
        
        private void OnListSubscriptionsOperationCompleted(object arg) {
            if ((this.ListSubscriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListSubscriptionsCompleted(this, new ListSubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSu" +
            "bscriptionsUsingDataSource", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("SubscriptionItems")]
        public Subscription[] ListSubscriptionsUsingDataSource(string DataSource) {
            object[] results = this.Invoke("ListSubscriptionsUsingDataSource", new object[] {
                        DataSource});
            return ((Subscription[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListSubscriptionsUsingDataSource(string DataSource, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListSubscriptionsUsingDataSource", new object[] {
                        DataSource}, callback, asyncState);
        }
        
        /// <remarks/>
        public Subscription[] EndListSubscriptionsUsingDataSource(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Subscription[])(results[0]));
        }
        
        /// <remarks/>
        public void ListSubscriptionsUsingDataSourceAsync(string DataSource) {
            this.ListSubscriptionsUsingDataSourceAsync(DataSource, null);
        }
        
        /// <remarks/>
        public void ListSubscriptionsUsingDataSourceAsync(string DataSource, object userState) {
            if ((this.ListSubscriptionsUsingDataSourceOperationCompleted == null)) {
                this.ListSubscriptionsUsingDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListSubscriptionsUsingDataSourceOperationCompleted);
            }
            this.InvokeAsync("ListSubscriptionsUsingDataSource", new object[] {
                        DataSource}, this.ListSubscriptionsUsingDataSourceOperationCompleted, userState);
        }
        
        private void OnListSubscriptionsUsingDataSourceOperationCompleted(object arg) {
            if ((this.ListSubscriptionsUsingDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListSubscriptionsUsingDataSourceCompleted(this, new ListSubscriptionsUsingDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListEx" +
            "tensions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Extensions")]
        public Extension[] ListExtensions(ExtensionTypeEnum ExtensionType) {
            object[] results = this.Invoke("ListExtensions", new object[] {
                        ExtensionType});
            return ((Extension[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListExtensions(ExtensionTypeEnum ExtensionType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListExtensions", new object[] {
                        ExtensionType}, callback, asyncState);
        }
        
        /// <remarks/>
        public Extension[] EndListExtensions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Extension[])(results[0]));
        }
        
        /// <remarks/>
        public void ListExtensionsAsync(ExtensionTypeEnum ExtensionType) {
            this.ListExtensionsAsync(ExtensionType, null);
        }
        
        /// <remarks/>
        public void ListExtensionsAsync(ExtensionTypeEnum ExtensionType, object userState) {
            if ((this.ListExtensionsOperationCompleted == null)) {
                this.ListExtensionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListExtensionsOperationCompleted);
            }
            this.InvokeAsync("ListExtensions", new object[] {
                        ExtensionType}, this.ListExtensionsOperationCompleted, userState);
        }
        
        private void OnListExtensionsOperationCompleted(object arg) {
            if ((this.ListExtensionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListExtensionsCompleted(this, new ListExtensionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListEv" +
            "ents", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Events")]
        public Event[] ListEvents() {
            object[] results = this.Invoke("ListEvents", new object[0]);
            return ((Event[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListEvents(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListEvents", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Event[] EndListEvents(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Event[])(results[0]));
        }
        
        /// <remarks/>
        public void ListEventsAsync() {
            this.ListEventsAsync(null);
        }
        
        /// <remarks/>
        public void ListEventsAsync(object userState) {
            if ((this.ListEventsOperationCompleted == null)) {
                this.ListEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListEventsOperationCompleted);
            }
            this.InvokeAsync("ListEvents", new object[0], this.ListEventsOperationCompleted, userState);
        }
        
        private void OnListEventsOperationCompleted(object arg) {
            if ((this.ListEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListEventsCompleted(this, new ListEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/FireEv" +
            "ent", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FireEvent(string EventType, string EventData) {
            this.Invoke("FireEvent", new object[] {
                        EventType,
                        EventData});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFireEvent(string EventType, string EventData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FireEvent", new object[] {
                        EventType,
                        EventData}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndFireEvent(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void FireEventAsync(string EventType, string EventData) {
            this.FireEventAsync(EventType, EventData, null);
        }
        
        /// <remarks/>
        public void FireEventAsync(string EventType, string EventData, object userState) {
            if ((this.FireEventOperationCompleted == null)) {
                this.FireEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFireEventOperationCompleted);
            }
            this.InvokeAsync("FireEvent", new object[] {
                        EventType,
                        EventData}, this.FireEventOperationCompleted, userState);
        }
        
        private void OnFireEventOperationCompleted(object arg) {
            if ((this.FireEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FireEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSy" +
            "stemTasks", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Tasks")]
        public Task[] ListSystemTasks() {
            object[] results = this.Invoke("ListSystemTasks", new object[0]);
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListSystemTasks(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListSystemTasks", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Task[] EndListSystemTasks(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public void ListSystemTasksAsync() {
            this.ListSystemTasksAsync(null);
        }
        
        /// <remarks/>
        public void ListSystemTasksAsync(object userState) {
            if ((this.ListSystemTasksOperationCompleted == null)) {
                this.ListSystemTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListSystemTasksOperationCompleted);
            }
            this.InvokeAsync("ListSystemTasks", new object[0], this.ListSystemTasksOperationCompleted, userState);
        }
        
        private void OnListSystemTasksOperationCompleted(object arg) {
            if ((this.ListSystemTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListSystemTasksCompleted(this, new ListSystemTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListTa" +
            "sks", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Tasks")]
        public Task[] ListTasks() {
            object[] results = this.Invoke("ListTasks", new object[0]);
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListTasks(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListTasks", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Task[] EndListTasks(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public void ListTasksAsync() {
            this.ListTasksAsync(null);
        }
        
        /// <remarks/>
        public void ListTasksAsync(object userState) {
            if ((this.ListTasksOperationCompleted == null)) {
                this.ListTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListTasksOperationCompleted);
            }
            this.InvokeAsync("ListTasks", new object[0], this.ListTasksOperationCompleted, userState);
        }
        
        private void OnListTasksOperationCompleted(object arg) {
            if ((this.ListTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListTasksCompleted(this, new ListTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListSy" +
            "stemRoles", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Roles")]
        public Role[] ListSystemRoles() {
            object[] results = this.Invoke("ListSystemRoles", new object[0]);
            return ((Role[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListSystemRoles(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListSystemRoles", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Role[] EndListSystemRoles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Role[])(results[0]));
        }
        
        /// <remarks/>
        public void ListSystemRolesAsync() {
            this.ListSystemRolesAsync(null);
        }
        
        /// <remarks/>
        public void ListSystemRolesAsync(object userState) {
            if ((this.ListSystemRolesOperationCompleted == null)) {
                this.ListSystemRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListSystemRolesOperationCompleted);
            }
            this.InvokeAsync("ListSystemRoles", new object[0], this.ListSystemRolesOperationCompleted, userState);
        }
        
        private void OnListSystemRolesOperationCompleted(object arg) {
            if ((this.ListSystemRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListSystemRolesCompleted(this, new ListSystemRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/ListRo" +
            "les", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Roles")]
        public Role[] ListRoles() {
            object[] results = this.Invoke("ListRoles", new object[0]);
            return ((Role[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListRoles(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListRoles", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Role[] EndListRoles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Role[])(results[0]));
        }
        
        /// <remarks/>
        public void ListRolesAsync() {
            this.ListRolesAsync(null);
        }
        
        /// <remarks/>
        public void ListRolesAsync(object userState) {
            if ((this.ListRolesOperationCompleted == null)) {
                this.ListRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListRolesOperationCompleted);
            }
            this.InvokeAsync("ListRoles", new object[0], this.ListRolesOperationCompleted, userState);
        }
        
        private void OnListRolesOperationCompleted(object arg) {
            if ((this.ListRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListRolesCompleted(this, new ListRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Create" +
            "Role", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateRole(string Name, string Description, Task[] Tasks) {
            this.Invoke("CreateRole", new object[] {
                        Name,
                        Description,
                        Tasks});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateRole(string Name, string Description, Task[] Tasks, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateRole", new object[] {
                        Name,
                        Description,
                        Tasks}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCreateRole(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CreateRoleAsync(string Name, string Description, Task[] Tasks) {
            this.CreateRoleAsync(Name, Description, Tasks, null);
        }
        
        /// <remarks/>
        public void CreateRoleAsync(string Name, string Description, Task[] Tasks, object userState) {
            if ((this.CreateRoleOperationCompleted == null)) {
                this.CreateRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateRoleOperationCompleted);
            }
            this.InvokeAsync("CreateRole", new object[] {
                        Name,
                        Description,
                        Tasks}, this.CreateRoleOperationCompleted, userState);
        }
        
        private void OnCreateRoleOperationCompleted(object arg) {
            if ((this.CreateRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Delete" +
            "Role", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteRole(string Name) {
            this.Invoke("DeleteRole", new object[] {
                        Name});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteRole(string Name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteRole", new object[] {
                        Name}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteRole(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteRoleAsync(string Name) {
            this.DeleteRoleAsync(Name, null);
        }
        
        /// <remarks/>
        public void DeleteRoleAsync(string Name, object userState) {
            if ((this.DeleteRoleOperationCompleted == null)) {
                this.DeleteRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRoleOperationCompleted);
            }
            this.InvokeAsync("DeleteRole", new object[] {
                        Name}, this.DeleteRoleOperationCompleted, userState);
        }
        
        private void OnDeleteRoleOperationCompleted(object arg) {
            if ((this.DeleteRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetRol" +
            "eProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Tasks")]
        public Task[] GetRoleProperties(string Name, out string Description) {
            object[] results = this.Invoke("GetRoleProperties", new object[] {
                        Name});
            Description = ((string)(results[1]));
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRoleProperties(string Name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRoleProperties", new object[] {
                        Name}, callback, asyncState);
        }
        
        /// <remarks/>
        public Task[] EndGetRoleProperties(System.IAsyncResult asyncResult, out string Description) {
            object[] results = this.EndInvoke(asyncResult);
            Description = ((string)(results[1]));
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRolePropertiesAsync(string Name) {
            this.GetRolePropertiesAsync(Name, null);
        }
        
        /// <remarks/>
        public void GetRolePropertiesAsync(string Name, object userState) {
            if ((this.GetRolePropertiesOperationCompleted == null)) {
                this.GetRolePropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRolePropertiesOperationCompleted);
            }
            this.InvokeAsync("GetRoleProperties", new object[] {
                        Name}, this.GetRolePropertiesOperationCompleted, userState);
        }
        
        private void OnGetRolePropertiesOperationCompleted(object arg) {
            if ((this.GetRolePropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRolePropertiesCompleted(this, new GetRolePropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetRol" +
            "eProperties", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetRoleProperties(string Name, string Description, Task[] Tasks) {
            this.Invoke("SetRoleProperties", new object[] {
                        Name,
                        Description,
                        Tasks});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetRoleProperties(string Name, string Description, Task[] Tasks, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetRoleProperties", new object[] {
                        Name,
                        Description,
                        Tasks}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetRoleProperties(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetRolePropertiesAsync(string Name, string Description, Task[] Tasks) {
            this.SetRolePropertiesAsync(Name, Description, Tasks, null);
        }
        
        /// <remarks/>
        public void SetRolePropertiesAsync(string Name, string Description, Task[] Tasks, object userState) {
            if ((this.SetRolePropertiesOperationCompleted == null)) {
                this.SetRolePropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRolePropertiesOperationCompleted);
            }
            this.InvokeAsync("SetRoleProperties", new object[] {
                        Name,
                        Description,
                        Tasks}, this.SetRolePropertiesOperationCompleted, userState);
        }
        
        private void OnSetRolePropertiesOperationCompleted(object arg) {
            if ((this.SetRolePropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRolePropertiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSys" +
            "temPolicies", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Policies")]
        public Policy[] GetSystemPolicies() {
            object[] results = this.Invoke("GetSystemPolicies", new object[0]);
            return ((Policy[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSystemPolicies(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSystemPolicies", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Policy[] EndGetSystemPolicies(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Policy[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemPoliciesAsync() {
            this.GetSystemPoliciesAsync(null);
        }
        
        /// <remarks/>
        public void GetSystemPoliciesAsync(object userState) {
            if ((this.GetSystemPoliciesOperationCompleted == null)) {
                this.GetSystemPoliciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemPoliciesOperationCompleted);
            }
            this.InvokeAsync("GetSystemPolicies", new object[0], this.GetSystemPoliciesOperationCompleted, userState);
        }
        
        private void OnGetSystemPoliciesOperationCompleted(object arg) {
            if ((this.GetSystemPoliciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemPoliciesCompleted(this, new GetSystemPoliciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetSys" +
            "temPolicies", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetSystemPolicies(Policy[] Policies) {
            this.Invoke("SetSystemPolicies", new object[] {
                        Policies});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetSystemPolicies(Policy[] Policies, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetSystemPolicies", new object[] {
                        Policies}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetSystemPolicies(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetSystemPoliciesAsync(Policy[] Policies) {
            this.SetSystemPoliciesAsync(Policies, null);
        }
        
        /// <remarks/>
        public void SetSystemPoliciesAsync(Policy[] Policies, object userState) {
            if ((this.SetSystemPoliciesOperationCompleted == null)) {
                this.SetSystemPoliciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSystemPoliciesOperationCompleted);
            }
            this.InvokeAsync("SetSystemPolicies", new object[] {
                        Policies}, this.SetSystemPoliciesOperationCompleted, userState);
        }
        
        private void OnSetSystemPoliciesOperationCompleted(object arg) {
            if ((this.SetSystemPoliciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSystemPoliciesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetPol" +
            "icies", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Policies")]
        public Policy[] GetPolicies(string Item, out bool InheritParent) {
            object[] results = this.Invoke("GetPolicies", new object[] {
                        Item});
            InheritParent = ((bool)(results[1]));
            return ((Policy[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPolicies(string Item, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPolicies", new object[] {
                        Item}, callback, asyncState);
        }
        
        /// <remarks/>
        public Policy[] EndGetPolicies(System.IAsyncResult asyncResult, out bool InheritParent) {
            object[] results = this.EndInvoke(asyncResult);
            InheritParent = ((bool)(results[1]));
            return ((Policy[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPoliciesAsync(string Item) {
            this.GetPoliciesAsync(Item, null);
        }
        
        /// <remarks/>
        public void GetPoliciesAsync(string Item, object userState) {
            if ((this.GetPoliciesOperationCompleted == null)) {
                this.GetPoliciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPoliciesOperationCompleted);
            }
            this.InvokeAsync("GetPolicies", new object[] {
                        Item}, this.GetPoliciesOperationCompleted, userState);
        }
        
        private void OnGetPoliciesOperationCompleted(object arg) {
            if ((this.GetPoliciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPoliciesCompleted(this, new GetPoliciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/SetPol" +
            "icies", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetPolicies(string Item, Policy[] Policies) {
            this.Invoke("SetPolicies", new object[] {
                        Item,
                        Policies});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetPolicies(string Item, Policy[] Policies, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetPolicies", new object[] {
                        Item,
                        Policies}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetPolicies(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetPoliciesAsync(string Item, Policy[] Policies) {
            this.SetPoliciesAsync(Item, Policies, null);
        }
        
        /// <remarks/>
        public void SetPoliciesAsync(string Item, Policy[] Policies, object userState) {
            if ((this.SetPoliciesOperationCompleted == null)) {
                this.SetPoliciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPoliciesOperationCompleted);
            }
            this.InvokeAsync("SetPolicies", new object[] {
                        Item,
                        Policies}, this.SetPoliciesOperationCompleted, userState);
        }
        
        private void OnSetPoliciesOperationCompleted(object arg) {
            if ((this.SetPoliciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPoliciesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("BatchHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Inheri" +
            "tParentSecurity", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InheritParentSecurity(string Item) {
            this.Invoke("InheritParentSecurity", new object[] {
                        Item});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInheritParentSecurity(string Item, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InheritParentSecurity", new object[] {
                        Item}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndInheritParentSecurity(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void InheritParentSecurityAsync(string Item) {
            this.InheritParentSecurityAsync(Item, null);
        }
        
        /// <remarks/>
        public void InheritParentSecurityAsync(string Item, object userState) {
            if ((this.InheritParentSecurityOperationCompleted == null)) {
                this.InheritParentSecurityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInheritParentSecurityOperationCompleted);
            }
            this.InvokeAsync("InheritParentSecurity", new object[] {
                        Item}, this.InheritParentSecurityOperationCompleted, userState);
        }
        
        private void OnInheritParentSecurityOperationCompleted(object arg) {
            if ((this.InheritParentSecurityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InheritParentSecurityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetSys" +
            "temPermissions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Permissions")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("Operation")]
        public string[] GetSystemPermissions() {
            object[] results = this.Invoke("GetSystemPermissions", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSystemPermissions(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSystemPermissions", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetSystemPermissions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemPermissionsAsync() {
            this.GetSystemPermissionsAsync(null);
        }
        
        /// <remarks/>
        public void GetSystemPermissionsAsync(object userState) {
            if ((this.GetSystemPermissionsOperationCompleted == null)) {
                this.GetSystemPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetSystemPermissions", new object[0], this.GetSystemPermissionsOperationCompleted, userState);
        }
        
        private void OnGetSystemPermissionsOperationCompleted(object arg) {
            if ((this.GetSystemPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemPermissionsCompleted(this, new GetSystemPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/GetPer" +
            "missions", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Permissions")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("Operation")]
        public string[] GetPermissions(string Item) {
            object[] results = this.Invoke("GetPermissions", new object[] {
                        Item});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPermissions(string Item, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPermissions", new object[] {
                        Item}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetPermissions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPermissionsAsync(string Item) {
            this.GetPermissionsAsync(Item, null);
        }
        
        /// <remarks/>
        public void GetPermissionsAsync(string Item, object userState) {
            if ((this.GetPermissionsOperationCompleted == null)) {
                this.GetPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetPermissions", new object[] {
                        Item}, this.GetPermissionsOperationCompleted, userState);
        }
        
        private void OnGetPermissionsOperationCompleted(object arg) {
            if ((this.GetPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPermissionsCompleted(this, new GetPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/LogonU" +
            "ser", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogonUser(string userName, string password, string authority) {
            this.Invoke("LogonUser", new object[] {
                        userName,
                        password,
                        authority});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogonUser(string userName, string password, string authority, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogonUser", new object[] {
                        userName,
                        password,
                        authority}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndLogonUser(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void LogonUserAsync(string userName, string password, string authority) {
            this.LogonUserAsync(userName, password, authority, null);
        }
        
        /// <remarks/>
        public void LogonUserAsync(string userName, string password, string authority, object userState) {
            if ((this.LogonUserOperationCompleted == null)) {
                this.LogonUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonUserOperationCompleted);
            }
            this.InvokeAsync("LogonUser", new object[] {
                        userName,
                        password,
                        authority}, this.LogonUserOperationCompleted, userState);
        }
        
        private void OnLogonUserOperationCompleted(object arg) {
            if ((this.LogonUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServerInfoHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices/Logoff" +
            "", RequestNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", ResponseNamespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Logoff() {
            this.Invoke("Logoff", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogoff(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Logoff", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndLogoff(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void LogoffAsync() {
            this.LogoffAsync(null);
        }
        
        /// <remarks/>
        public void LogoffAsync(object userState) {
            if ((this.LogoffOperationCompleted == null)) {
                this.LogoffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoffOperationCompleted);
            }
            this.InvokeAsync("Logoff", new object[0], this.LogoffOperationCompleted, userState);
        }
        
        private void OnLogoffOperationCompleted(object arg) {
            if ((this.LogoffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoffCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", IsNullable=false)]
    public partial class ServerInfoHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string reportServerVersionNumberField;
        
        private string reportServerEditionField;
        
        /// <remarks/>
        public string ReportServerVersionNumber {
            get {
                return this.reportServerVersionNumberField;
            }
            set {
                this.reportServerVersionNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ReportServerEdition {
            get {
                return this.reportServerEditionField;
            }
            set {
                this.reportServerEditionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class Policy {
        
        private string groupUserNameField;
        
        private Role[] rolesField;
        
        /// <remarks/>
        public string GroupUserName {
            get {
                return this.groupUserNameField;
            }
            set {
                this.groupUserNameField = value;
            }
        }
        
        /// <remarks/>
        public Role[] Roles {
            get {
                return this.rolesField;
            }
            set {
                this.rolesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class Role {
        
        private string nameField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class Task {
        
        private string taskIDField;
        
        private string nameField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string TaskID {
            get {
                return this.taskIDField;
            }
            set {
                this.taskIDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class Event {
        
        private string typeField;
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class Extension {
        
        private ExtensionTypeEnum extensionTypeField;
        
        private string nameField;
        
        private string localizedNameField;
        
        private bool visibleField;
        
        /// <remarks/>
        public ExtensionTypeEnum ExtensionType {
            get {
                return this.extensionTypeField;
            }
            set {
                this.extensionTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string LocalizedName {
            get {
                return this.localizedNameField;
            }
            set {
                this.localizedNameField = value;
            }
        }
        
        /// <remarks/>
        public bool Visible {
            get {
                return this.visibleField;
            }
            set {
                this.visibleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ExtensionTypeEnum {
        
        /// <remarks/>
        Delivery,
        
        /// <remarks/>
        Render,
        
        /// <remarks/>
        Data,
        
        /// <remarks/>
        All,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class Subscription {
        
        private string subscriptionIDField;
        
        private string ownerField;
        
        private string pathField;
        
        private string virtualPathField;
        
        private string reportField;
        
        private ExtensionSettings deliverySettingsField;
        
        private string descriptionField;
        
        private string statusField;
        
        private ActiveState activeField;
        
        private System.DateTime lastExecutedField;
        
        private bool lastExecutedFieldSpecified;
        
        private string modifiedByField;
        
        private System.DateTime modifiedDateField;
        
        private string eventTypeField;
        
        private bool isDataDrivenField;
        
        /// <remarks/>
        public string SubscriptionID {
            get {
                return this.subscriptionIDField;
            }
            set {
                this.subscriptionIDField = value;
            }
        }
        
        /// <remarks/>
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public string VirtualPath {
            get {
                return this.virtualPathField;
            }
            set {
                this.virtualPathField = value;
            }
        }
        
        /// <remarks/>
        public string Report {
            get {
                return this.reportField;
            }
            set {
                this.reportField = value;
            }
        }
        
        /// <remarks/>
        public ExtensionSettings DeliverySettings {
            get {
                return this.deliverySettingsField;
            }
            set {
                this.deliverySettingsField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public ActiveState Active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastExecuted {
            get {
                return this.lastExecutedField;
            }
            set {
                this.lastExecutedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastExecutedSpecified {
            get {
                return this.lastExecutedFieldSpecified;
            }
            set {
                this.lastExecutedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string ModifiedBy {
            get {
                return this.modifiedByField;
            }
            set {
                this.modifiedByField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ModifiedDate {
            get {
                return this.modifiedDateField;
            }
            set {
                this.modifiedDateField = value;
            }
        }
        
        /// <remarks/>
        public string EventType {
            get {
                return this.eventTypeField;
            }
            set {
                this.eventTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDataDriven {
            get {
                return this.isDataDrivenField;
            }
            set {
                this.isDataDrivenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ExtensionSettings {
        
        private string extensionField;
        
        private ParameterValueOrFieldReference[] parameterValuesField;
        
        /// <remarks/>
        public string Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(typeof(ParameterFieldReference))]
        [System.Xml.Serialization.XmlArrayItemAttribute(typeof(ParameterValue))]
        public ParameterValueOrFieldReference[] ParameterValues {
            get {
                return this.parameterValuesField;
            }
            set {
                this.parameterValuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ParameterFieldReference : ParameterValueOrFieldReference {
        
        private string parameterNameField;
        
        private string fieldAliasField;
        
        /// <remarks/>
        public string ParameterName {
            get {
                return this.parameterNameField;
            }
            set {
                this.parameterNameField = value;
            }
        }
        
        /// <remarks/>
        public string FieldAlias {
            get {
                return this.fieldAliasField;
            }
            set {
                this.fieldAliasField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParameterFieldReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParameterValue))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ParameterValueOrFieldReference {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ParameterValue : ParameterValueOrFieldReference {
        
        private string nameField;
        
        private string valueField;
        
        private string labelField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ActiveState {
        
        private bool deliveryExtensionRemovedField;
        
        private bool deliveryExtensionRemovedFieldSpecified;
        
        private bool sharedDataSourceRemovedField;
        
        private bool sharedDataSourceRemovedFieldSpecified;
        
        private bool missingParameterValueField;
        
        private bool missingParameterValueFieldSpecified;
        
        private bool invalidParameterValueField;
        
        private bool invalidParameterValueFieldSpecified;
        
        private bool unknownReportParameterField;
        
        private bool unknownReportParameterFieldSpecified;
        
        /// <remarks/>
        public bool DeliveryExtensionRemoved {
            get {
                return this.deliveryExtensionRemovedField;
            }
            set {
                this.deliveryExtensionRemovedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeliveryExtensionRemovedSpecified {
            get {
                return this.deliveryExtensionRemovedFieldSpecified;
            }
            set {
                this.deliveryExtensionRemovedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool SharedDataSourceRemoved {
            get {
                return this.sharedDataSourceRemovedField;
            }
            set {
                this.sharedDataSourceRemovedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SharedDataSourceRemovedSpecified {
            get {
                return this.sharedDataSourceRemovedFieldSpecified;
            }
            set {
                this.sharedDataSourceRemovedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool MissingParameterValue {
            get {
                return this.missingParameterValueField;
            }
            set {
                this.missingParameterValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MissingParameterValueSpecified {
            get {
                return this.missingParameterValueFieldSpecified;
            }
            set {
                this.missingParameterValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool InvalidParameterValue {
            get {
                return this.invalidParameterValueField;
            }
            set {
                this.invalidParameterValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvalidParameterValueSpecified {
            get {
                return this.invalidParameterValueFieldSpecified;
            }
            set {
                this.invalidParameterValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool UnknownReportParameter {
            get {
                return this.unknownReportParameterField;
            }
            set {
                this.unknownReportParameterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnknownReportParameterSpecified {
            get {
                return this.unknownReportParameterFieldSpecified;
            }
            set {
                this.unknownReportParameterFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ExtensionParameter {
        
        private string nameField;
        
        private string displayNameField;
        
        private bool requiredField;
        
        private bool requiredFieldSpecified;
        
        private bool readOnlyField;
        
        private string valueField;
        
        private string errorField;
        
        private bool encryptedField;
        
        private bool isPasswordField;
        
        private ValidValue[] validValuesField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public bool Required {
            get {
                return this.requiredField;
            }
            set {
                this.requiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequiredSpecified {
            get {
                return this.requiredFieldSpecified;
            }
            set {
                this.requiredFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool ReadOnly {
            get {
                return this.readOnlyField;
            }
            set {
                this.readOnlyField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        public bool Encrypted {
            get {
                return this.encryptedField;
            }
            set {
                this.encryptedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPassword {
            get {
                return this.isPasswordField;
            }
            set {
                this.isPasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Value")]
        public ValidValue[] ValidValues {
            get {
                return this.validValuesField;
            }
            set {
                this.validValuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ValidValue {
        
        private string labelField;
        
        private string valueField;
        
        /// <remarks/>
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class QueryDefinition {
        
        private string commandTypeField;
        
        private string commandTextField;
        
        private int timeoutField;
        
        private bool timeoutFieldSpecified;
        
        /// <remarks/>
        public string CommandType {
            get {
                return this.commandTypeField;
            }
            set {
                this.commandTypeField = value;
            }
        }
        
        /// <remarks/>
        public string CommandText {
            get {
                return this.commandTextField;
            }
            set {
                this.commandTextField = value;
            }
        }
        
        /// <remarks/>
        public int Timeout {
            get {
                return this.timeoutField;
            }
            set {
                this.timeoutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeoutSpecified {
            get {
                return this.timeoutFieldSpecified;
            }
            set {
                this.timeoutFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class Field {
        
        private string aliasField;
        
        private string nameField;
        
        /// <remarks/>
        public string Alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class DataSetDefinition {
        
        private Field[] fieldsField;
        
        private QueryDefinition queryField;
        
        private SensitivityEnum caseSensitivityField;
        
        private bool caseSensitivityFieldSpecified;
        
        private string collationField;
        
        private SensitivityEnum accentSensitivityField;
        
        private bool accentSensitivityFieldSpecified;
        
        private SensitivityEnum kanatypeSensitivityField;
        
        private bool kanatypeSensitivityFieldSpecified;
        
        private SensitivityEnum widthSensitivityField;
        
        private bool widthSensitivityFieldSpecified;
        
        private string nameField;
        
        /// <remarks/>
        public Field[] Fields {
            get {
                return this.fieldsField;
            }
            set {
                this.fieldsField = value;
            }
        }
        
        /// <remarks/>
        public QueryDefinition Query {
            get {
                return this.queryField;
            }
            set {
                this.queryField = value;
            }
        }
        
        /// <remarks/>
        public SensitivityEnum CaseSensitivity {
            get {
                return this.caseSensitivityField;
            }
            set {
                this.caseSensitivityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CaseSensitivitySpecified {
            get {
                return this.caseSensitivityFieldSpecified;
            }
            set {
                this.caseSensitivityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string Collation {
            get {
                return this.collationField;
            }
            set {
                this.collationField = value;
            }
        }
        
        /// <remarks/>
        public SensitivityEnum AccentSensitivity {
            get {
                return this.accentSensitivityField;
            }
            set {
                this.accentSensitivityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccentSensitivitySpecified {
            get {
                return this.accentSensitivityFieldSpecified;
            }
            set {
                this.accentSensitivityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public SensitivityEnum KanatypeSensitivity {
            get {
                return this.kanatypeSensitivityField;
            }
            set {
                this.kanatypeSensitivityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KanatypeSensitivitySpecified {
            get {
                return this.kanatypeSensitivityFieldSpecified;
            }
            set {
                this.kanatypeSensitivityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public SensitivityEnum WidthSensitivity {
            get {
                return this.widthSensitivityField;
            }
            set {
                this.widthSensitivityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSensitivitySpecified {
            get {
                return this.widthSensitivityFieldSpecified;
            }
            set {
                this.widthSensitivityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum SensitivityEnum {
        
        /// <remarks/>
        True,
        
        /// <remarks/>
        False,
        
        /// <remarks/>
        Auto,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class DataRetrievalPlan {
        
        private DataSourceDefinitionOrReference itemField;
        
        private DataSetDefinition dataSetField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DataSourceDefinition", typeof(DataSourceDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("DataSourceReference", typeof(DataSourceReference))]
        [System.Xml.Serialization.XmlElementAttribute("InvalidDataSourceReference", typeof(InvalidDataSourceReference))]
        public DataSourceDefinitionOrReference Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public DataSetDefinition DataSet {
            get {
                return this.dataSetField;
            }
            set {
                this.dataSetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class DataSourceDefinition : DataSourceDefinitionOrReference {
        
        private string extensionField;
        
        private string connectStringField;
        
        private CredentialRetrievalEnum credentialRetrievalField;
        
        private bool windowsCredentialsField;
        
        private bool impersonateUserField;
        
        private bool impersonateUserFieldSpecified;
        
        private string promptField;
        
        private string userNameField;
        
        private string passwordField;
        
        private bool enabledField;
        
        private bool enabledFieldSpecified;
        
        /// <remarks/>
        public string Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        /// <remarks/>
        public string ConnectString {
            get {
                return this.connectStringField;
            }
            set {
                this.connectStringField = value;
            }
        }
        
        /// <remarks/>
        public CredentialRetrievalEnum CredentialRetrieval {
            get {
                return this.credentialRetrievalField;
            }
            set {
                this.credentialRetrievalField = value;
            }
        }
        
        /// <remarks/>
        public bool WindowsCredentials {
            get {
                return this.windowsCredentialsField;
            }
            set {
                this.windowsCredentialsField = value;
            }
        }
        
        /// <remarks/>
        public bool ImpersonateUser {
            get {
                return this.impersonateUserField;
            }
            set {
                this.impersonateUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImpersonateUserSpecified {
            get {
                return this.impersonateUserFieldSpecified;
            }
            set {
                this.impersonateUserFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string Prompt {
            get {
                return this.promptField;
            }
            set {
                this.promptField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnabledSpecified {
            get {
                return this.enabledFieldSpecified;
            }
            set {
                this.enabledFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum CredentialRetrievalEnum {
        
        /// <remarks/>
        Prompt,
        
        /// <remarks/>
        Store,
        
        /// <remarks/>
        Integrated,
        
        /// <remarks/>
        None,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataSourceReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InvalidDataSourceReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataSourceDefinition))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class DataSourceDefinitionOrReference {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class DataSourceReference : DataSourceDefinitionOrReference {
        
        private string referenceField;
        
        /// <remarks/>
        public string Reference {
            get {
                return this.referenceField;
            }
            set {
                this.referenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class InvalidDataSourceReference : DataSourceDefinitionOrReference {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class Schedule {
        
        private string scheduleIDField;
        
        private string nameField;
        
        private ScheduleDefinition definitionField;
        
        private string descriptionField;
        
        private string creatorField;
        
        private System.DateTime nextRunTimeField;
        
        private bool nextRunTimeFieldSpecified;
        
        private System.DateTime lastRunTimeField;
        
        private bool lastRunTimeFieldSpecified;
        
        private bool referencesPresentField;
        
        private ScheduleStateEnum stateField;
        
        /// <remarks/>
        public string ScheduleID {
            get {
                return this.scheduleIDField;
            }
            set {
                this.scheduleIDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public ScheduleDefinition Definition {
            get {
                return this.definitionField;
            }
            set {
                this.definitionField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Creator {
            get {
                return this.creatorField;
            }
            set {
                this.creatorField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NextRunTime {
            get {
                return this.nextRunTimeField;
            }
            set {
                this.nextRunTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NextRunTimeSpecified {
            get {
                return this.nextRunTimeFieldSpecified;
            }
            set {
                this.nextRunTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastRunTime {
            get {
                return this.lastRunTimeField;
            }
            set {
                this.lastRunTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastRunTimeSpecified {
            get {
                return this.lastRunTimeFieldSpecified;
            }
            set {
                this.lastRunTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool ReferencesPresent {
            get {
                return this.referencesPresentField;
            }
            set {
                this.referencesPresentField = value;
            }
        }
        
        /// <remarks/>
        public ScheduleStateEnum State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ScheduleDefinition : ScheduleDefinitionOrReference {
        
        private System.DateTime startDateTimeField;
        
        private System.DateTime endDateField;
        
        private bool endDateFieldSpecified;
        
        private RecurrencePattern itemField;
        
        /// <remarks/>
        public System.DateTime StartDateTime {
            get {
                return this.startDateTimeField;
            }
            set {
                this.startDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndDateSpecified {
            get {
                return this.endDateFieldSpecified;
            }
            set {
                this.endDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DailyRecurrence", typeof(DailyRecurrence))]
        [System.Xml.Serialization.XmlElementAttribute("MinuteRecurrence", typeof(MinuteRecurrence))]
        [System.Xml.Serialization.XmlElementAttribute("MonthlyDOWRecurrence", typeof(MonthlyDOWRecurrence))]
        [System.Xml.Serialization.XmlElementAttribute("MonthlyRecurrence", typeof(MonthlyRecurrence))]
        [System.Xml.Serialization.XmlElementAttribute("WeeklyRecurrence", typeof(WeeklyRecurrence))]
        public RecurrencePattern Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class DailyRecurrence : RecurrencePattern {
        
        private int daysIntervalField;
        
        /// <remarks/>
        public int DaysInterval {
            get {
                return this.daysIntervalField;
            }
            set {
                this.daysIntervalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WeeklyRecurrence))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MinuteRecurrence))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DailyRecurrence))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MonthlyRecurrence))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MonthlyDOWRecurrence))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class RecurrencePattern {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class WeeklyRecurrence : RecurrencePattern {
        
        private int weeksIntervalField;
        
        private bool weeksIntervalFieldSpecified;
        
        private DaysOfWeekSelector daysOfWeekField;
        
        /// <remarks/>
        public int WeeksInterval {
            get {
                return this.weeksIntervalField;
            }
            set {
                this.weeksIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WeeksIntervalSpecified {
            get {
                return this.weeksIntervalFieldSpecified;
            }
            set {
                this.weeksIntervalFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public DaysOfWeekSelector DaysOfWeek {
            get {
                return this.daysOfWeekField;
            }
            set {
                this.daysOfWeekField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class DaysOfWeekSelector {
        
        private bool sundayField;
        
        private bool mondayField;
        
        private bool tuesdayField;
        
        private bool wednesdayField;
        
        private bool thursdayField;
        
        private bool fridayField;
        
        private bool saturdayField;
        
        /// <remarks/>
        public bool Sunday {
            get {
                return this.sundayField;
            }
            set {
                this.sundayField = value;
            }
        }
        
        /// <remarks/>
        public bool Monday {
            get {
                return this.mondayField;
            }
            set {
                this.mondayField = value;
            }
        }
        
        /// <remarks/>
        public bool Tuesday {
            get {
                return this.tuesdayField;
            }
            set {
                this.tuesdayField = value;
            }
        }
        
        /// <remarks/>
        public bool Wednesday {
            get {
                return this.wednesdayField;
            }
            set {
                this.wednesdayField = value;
            }
        }
        
        /// <remarks/>
        public bool Thursday {
            get {
                return this.thursdayField;
            }
            set {
                this.thursdayField = value;
            }
        }
        
        /// <remarks/>
        public bool Friday {
            get {
                return this.fridayField;
            }
            set {
                this.fridayField = value;
            }
        }
        
        /// <remarks/>
        public bool Saturday {
            get {
                return this.saturdayField;
            }
            set {
                this.saturdayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class MinuteRecurrence : RecurrencePattern {
        
        private int minutesIntervalField;
        
        /// <remarks/>
        public int MinutesInterval {
            get {
                return this.minutesIntervalField;
            }
            set {
                this.minutesIntervalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class MonthlyRecurrence : RecurrencePattern {
        
        private string daysField;
        
        private MonthsOfYearSelector monthsOfYearField;
        
        /// <remarks/>
        public string Days {
            get {
                return this.daysField;
            }
            set {
                this.daysField = value;
            }
        }
        
        /// <remarks/>
        public MonthsOfYearSelector MonthsOfYear {
            get {
                return this.monthsOfYearField;
            }
            set {
                this.monthsOfYearField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class MonthsOfYearSelector {
        
        private bool januaryField;
        
        private bool februaryField;
        
        private bool marchField;
        
        private bool aprilField;
        
        private bool mayField;
        
        private bool juneField;
        
        private bool julyField;
        
        private bool augustField;
        
        private bool septemberField;
        
        private bool octoberField;
        
        private bool novemberField;
        
        private bool decemberField;
        
        /// <remarks/>
        public bool January {
            get {
                return this.januaryField;
            }
            set {
                this.januaryField = value;
            }
        }
        
        /// <remarks/>
        public bool February {
            get {
                return this.februaryField;
            }
            set {
                this.februaryField = value;
            }
        }
        
        /// <remarks/>
        public bool March {
            get {
                return this.marchField;
            }
            set {
                this.marchField = value;
            }
        }
        
        /// <remarks/>
        public bool April {
            get {
                return this.aprilField;
            }
            set {
                this.aprilField = value;
            }
        }
        
        /// <remarks/>
        public bool May {
            get {
                return this.mayField;
            }
            set {
                this.mayField = value;
            }
        }
        
        /// <remarks/>
        public bool June {
            get {
                return this.juneField;
            }
            set {
                this.juneField = value;
            }
        }
        
        /// <remarks/>
        public bool July {
            get {
                return this.julyField;
            }
            set {
                this.julyField = value;
            }
        }
        
        /// <remarks/>
        public bool August {
            get {
                return this.augustField;
            }
            set {
                this.augustField = value;
            }
        }
        
        /// <remarks/>
        public bool September {
            get {
                return this.septemberField;
            }
            set {
                this.septemberField = value;
            }
        }
        
        /// <remarks/>
        public bool October {
            get {
                return this.octoberField;
            }
            set {
                this.octoberField = value;
            }
        }
        
        /// <remarks/>
        public bool November {
            get {
                return this.novemberField;
            }
            set {
                this.novemberField = value;
            }
        }
        
        /// <remarks/>
        public bool December {
            get {
                return this.decemberField;
            }
            set {
                this.decemberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class MonthlyDOWRecurrence : RecurrencePattern {
        
        private WeekNumberEnum whichWeekField;
        
        private bool whichWeekFieldSpecified;
        
        private DaysOfWeekSelector daysOfWeekField;
        
        private MonthsOfYearSelector monthsOfYearField;
        
        /// <remarks/>
        public WeekNumberEnum WhichWeek {
            get {
                return this.whichWeekField;
            }
            set {
                this.whichWeekField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WhichWeekSpecified {
            get {
                return this.whichWeekFieldSpecified;
            }
            set {
                this.whichWeekFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public DaysOfWeekSelector DaysOfWeek {
            get {
                return this.daysOfWeekField;
            }
            set {
                this.daysOfWeekField = value;
            }
        }
        
        /// <remarks/>
        public MonthsOfYearSelector MonthsOfYear {
            get {
                return this.monthsOfYearField;
            }
            set {
                this.monthsOfYearField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum WeekNumberEnum {
        
        /// <remarks/>
        FirstWeek,
        
        /// <remarks/>
        SecondWeek,
        
        /// <remarks/>
        ThirdWeek,
        
        /// <remarks/>
        FourthWeek,
        
        /// <remarks/>
        LastWeek,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NoSchedule))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ScheduleDefinitionOrReference {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ScheduleReference : ScheduleDefinitionOrReference {
        
        private string scheduleIDField;
        
        private ScheduleDefinition definitionField;
        
        /// <remarks/>
        public string ScheduleID {
            get {
                return this.scheduleIDField;
            }
            set {
                this.scheduleIDField = value;
            }
        }
        
        /// <remarks/>
        public ScheduleDefinition Definition {
            get {
                return this.definitionField;
            }
            set {
                this.definitionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class NoSchedule : ScheduleDefinitionOrReference {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ScheduleStateEnum {
        
        /// <remarks/>
        Ready,
        
        /// <remarks/>
        Running,
        
        /// <remarks/>
        Paused,
        
        /// <remarks/>
        Expired,
        
        /// <remarks/>
        Failing,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ReportHistorySnapshot {
        
        private string historyIDField;
        
        private System.DateTime creationDateField;
        
        private int sizeField;
        
        /// <remarks/>
        public string HistoryID {
            get {
                return this.historyIDField;
            }
            set {
                this.historyIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        public int Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class DataSourcePrompt {
        
        private string nameField;
        
        private string dataSourceIDField;
        
        private string promptField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string DataSourceID {
            get {
                return this.dataSourceIDField;
            }
            set {
                this.dataSourceIDField = value;
            }
        }
        
        /// <remarks/>
        public string Prompt {
            get {
                return this.promptField;
            }
            set {
                this.promptField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class DataSource {
        
        private string nameField;
        
        private DataSourceDefinitionOrReference itemField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DataSourceDefinition", typeof(DataSourceDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("DataSourceReference", typeof(DataSourceReference))]
        [System.Xml.Serialization.XmlElementAttribute("InvalidDataSourceReference", typeof(InvalidDataSourceReference))]
        public DataSourceDefinitionOrReference Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class Job {
        
        private string jobIDField;
        
        private string nameField;
        
        private string pathField;
        
        private string descriptionField;
        
        private string machineField;
        
        private string userField;
        
        private System.DateTime startDateTimeField;
        
        private JobActionEnum actionField;
        
        private JobTypeEnum typeField;
        
        private JobStatusEnum statusField;
        
        /// <remarks/>
        public string JobID {
            get {
                return this.jobIDField;
            }
            set {
                this.jobIDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Machine {
            get {
                return this.machineField;
            }
            set {
                this.machineField = value;
            }
        }
        
        /// <remarks/>
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDateTime {
            get {
                return this.startDateTimeField;
            }
            set {
                this.startDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public JobActionEnum Action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
            }
        }
        
        /// <remarks/>
        public JobTypeEnum Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public JobStatusEnum Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum JobActionEnum {
        
        /// <remarks/>
        Render,
        
        /// <remarks/>
        SnapshotCreation,
        
        /// <remarks/>
        ReportHistoryCreation,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum JobTypeEnum {
        
        /// <remarks/>
        User,
        
        /// <remarks/>
        System,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum JobStatusEnum {
        
        /// <remarks/>
        New,
        
        /// <remarks/>
        Running,
        
        /// <remarks/>
        CancelRequested,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeExpiration))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleExpiration))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ExpirationDefinition {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class TimeExpiration : ExpirationDefinition {
        
        private int minutesField;
        
        /// <remarks/>
        public int Minutes {
            get {
                return this.minutesField;
            }
            set {
                this.minutesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ScheduleExpiration : ExpirationDefinition {
        
        private ScheduleDefinitionOrReference itemField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ScheduleDefinition", typeof(ScheduleDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("ScheduleReference", typeof(ScheduleReference))]
        public ScheduleDefinitionOrReference Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class ReportParameter {
        
        private string nameField;
        
        private ParameterTypeEnum typeField;
        
        private bool typeFieldSpecified;
        
        private bool nullableField;
        
        private bool nullableFieldSpecified;
        
        private bool allowBlankField;
        
        private bool allowBlankFieldSpecified;
        
        private bool multiValueField;
        
        private bool multiValueFieldSpecified;
        
        private bool queryParameterField;
        
        private bool queryParameterFieldSpecified;
        
        private string promptField;
        
        private bool promptUserField;
        
        private bool promptUserFieldSpecified;
        
        private string[] dependenciesField;
        
        private bool validValuesQueryBasedField;
        
        private bool validValuesQueryBasedFieldSpecified;
        
        private ValidValue[] validValuesField;
        
        private bool defaultValuesQueryBasedField;
        
        private bool defaultValuesQueryBasedFieldSpecified;
        
        private string[] defaultValuesField;
        
        private ParameterStateEnum stateField;
        
        private bool stateFieldSpecified;
        
        private string errorMessageField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public ParameterTypeEnum Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                this.typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool Nullable {
            get {
                return this.nullableField;
            }
            set {
                this.nullableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NullableSpecified {
            get {
                return this.nullableFieldSpecified;
            }
            set {
                this.nullableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowBlank {
            get {
                return this.allowBlankField;
            }
            set {
                this.allowBlankField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowBlankSpecified {
            get {
                return this.allowBlankFieldSpecified;
            }
            set {
                this.allowBlankFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool MultiValue {
            get {
                return this.multiValueField;
            }
            set {
                this.multiValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MultiValueSpecified {
            get {
                return this.multiValueFieldSpecified;
            }
            set {
                this.multiValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool QueryParameter {
            get {
                return this.queryParameterField;
            }
            set {
                this.queryParameterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QueryParameterSpecified {
            get {
                return this.queryParameterFieldSpecified;
            }
            set {
                this.queryParameterFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string Prompt {
            get {
                return this.promptField;
            }
            set {
                this.promptField = value;
            }
        }
        
        /// <remarks/>
        public bool PromptUser {
            get {
                return this.promptUserField;
            }
            set {
                this.promptUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PromptUserSpecified {
            get {
                return this.promptUserFieldSpecified;
            }
            set {
                this.promptUserFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Dependency")]
        public string[] Dependencies {
            get {
                return this.dependenciesField;
            }
            set {
                this.dependenciesField = value;
            }
        }
        
        /// <remarks/>
        public bool ValidValuesQueryBased {
            get {
                return this.validValuesQueryBasedField;
            }
            set {
                this.validValuesQueryBasedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidValuesQueryBasedSpecified {
            get {
                return this.validValuesQueryBasedFieldSpecified;
            }
            set {
                this.validValuesQueryBasedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public ValidValue[] ValidValues {
            get {
                return this.validValuesField;
            }
            set {
                this.validValuesField = value;
            }
        }
        
        /// <remarks/>
        public bool DefaultValuesQueryBased {
            get {
                return this.defaultValuesQueryBasedField;
            }
            set {
                this.defaultValuesQueryBasedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultValuesQueryBasedSpecified {
            get {
                return this.defaultValuesQueryBasedFieldSpecified;
            }
            set {
                this.defaultValuesQueryBasedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Value")]
        public string[] DefaultValues {
            get {
                return this.defaultValuesField;
            }
            set {
                this.defaultValuesField = value;
            }
        }
        
        /// <remarks/>
        public ParameterStateEnum State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StateSpecified {
            get {
                return this.stateFieldSpecified;
            }
            set {
                this.stateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ParameterTypeEnum {
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        Integer,
        
        /// <remarks/>
        Float,
        
        /// <remarks/>
        String,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ParameterStateEnum {
        
        /// <remarks/>
        HasValidValue,
        
        /// <remarks/>
        MissingValidValue,
        
        /// <remarks/>
        HasOutstandingDependencies,
        
        /// <remarks/>
        DynamicValuesUnavailable,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class DataSourceCredentials {
        
        private string dataSourceNameField;
        
        private string userNameField;
        
        private string passwordField;
        
        /// <remarks/>
        public string DataSourceName {
            get {
                return this.dataSourceNameField;
            }
            set {
                this.dataSourceNameField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class Warning {
        
        private string codeField;
        
        private string severityField;
        
        private string objectNameField;
        
        private string objectTypeField;
        
        private string messageField;
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public string ObjectName {
            get {
                return this.objectNameField;
            }
            set {
                this.objectNameField = value;
            }
        }
        
        /// <remarks/>
        public string ObjectType {
            get {
                return this.objectTypeField;
            }
            set {
                this.objectTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class CatalogItem {
        
        private string idField;
        
        private string nameField;
        
        private string pathField;
        
        private string virtualPathField;
        
        private ItemTypeEnum typeField;
        
        private int sizeField;
        
        private bool sizeFieldSpecified;
        
        private string descriptionField;
        
        private bool hiddenField;
        
        private bool hiddenFieldSpecified;
        
        private System.DateTime creationDateField;
        
        private bool creationDateFieldSpecified;
        
        private System.DateTime modifiedDateField;
        
        private bool modifiedDateFieldSpecified;
        
        private string createdByField;
        
        private string modifiedByField;
        
        private string mimeTypeField;
        
        private System.DateTime executionDateField;
        
        private bool executionDateFieldSpecified;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public string VirtualPath {
            get {
                return this.virtualPathField;
            }
            set {
                this.virtualPathField = value;
            }
        }
        
        /// <remarks/>
        public ItemTypeEnum Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SizeSpecified {
            get {
                return this.sizeFieldSpecified;
            }
            set {
                this.sizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public bool Hidden {
            get {
                return this.hiddenField;
            }
            set {
                this.hiddenField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HiddenSpecified {
            get {
                return this.hiddenFieldSpecified;
            }
            set {
                this.hiddenFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreationDateSpecified {
            get {
                return this.creationDateFieldSpecified;
            }
            set {
                this.creationDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ModifiedDate {
            get {
                return this.modifiedDateField;
            }
            set {
                this.modifiedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModifiedDateSpecified {
            get {
                return this.modifiedDateFieldSpecified;
            }
            set {
                this.modifiedDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string CreatedBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        public string ModifiedBy {
            get {
                return this.modifiedByField;
            }
            set {
                this.modifiedByField = value;
            }
        }
        
        /// <remarks/>
        public string MimeType {
            get {
                return this.mimeTypeField;
            }
            set {
                this.mimeTypeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExecutionDate {
            get {
                return this.executionDateField;
            }
            set {
                this.executionDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExecutionDateSpecified {
            get {
                return this.executionDateFieldSpecified;
            }
            set {
                this.executionDateFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ItemTypeEnum {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Folder,
        
        /// <remarks/>
        Report,
        
        /// <remarks/>
        Resource,
        
        /// <remarks/>
        LinkedReport,
        
        /// <remarks/>
        DataSource,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SearchCondition))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class Property {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public partial class SearchCondition : Property {
        
        private ConditionEnum conditionField;
        
        private bool conditionFieldSpecified;
        
        /// <remarks/>
        public ConditionEnum Condition {
            get {
                return this.conditionField;
            }
            set {
                this.conditionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConditionSpecified {
            get {
                return this.conditionFieldSpecified;
            }
            set {
                this.conditionFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ConditionEnum {
        
        /// <remarks/>
        Contains,
        
        /// <remarks/>
        Equals,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", IsNullable=false)]
    public partial class SessionHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string sessionIdField;
        
        private bool isNewExecutionField;
        
        private string executionDateTimeField;
        
        private string expirationDateTimeField;
        
        /// <remarks/>
        public string SessionId {
            get {
                return this.sessionIdField;
            }
            set {
                this.sessionIdField = value;
            }
        }
        
        /// <remarks/>
        public bool IsNewExecution {
            get {
                return this.isNewExecutionField;
            }
            set {
                this.isNewExecutionField = value;
            }
        }
        
        /// <remarks/>
        public string ExecutionDateTime {
            get {
                return this.executionDateTimeField;
            }
            set {
                this.executionDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string ExpirationDateTime {
            get {
                return this.expirationDateTimeField;
            }
            set {
                this.expirationDateTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", IsNullable=false)]
    public partial class ItemNamespaceHeader : System.Web.Services.Protocols.SoapHeader {
        
        private ItemNamespaceEnum itemNamespaceField;
        
        /// <remarks/>
        public ItemNamespaceEnum ItemNamespace {
            get {
                return this.itemNamespaceField;
            }
            set {
                this.itemNamespaceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ItemNamespaceEnum {
        
        /// <remarks/>
        PathBased,
        
        /// <remarks/>
        GUIDBased,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices", IsNullable=false)]
    public partial class BatchHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string batchIDField;
        
        /// <remarks/>
        public string BatchID {
            get {
                return this.batchIDField;
            }
            set {
                this.batchIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum ExecutionSettingEnum {
        
        /// <remarks/>
        Live,
        
        /// <remarks/>
        Snapshot,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sqlserver/2003/12/reporting/reportingservices")]
    public enum BooleanOperatorEnum {
        
        /// <remarks/>
        And,
        
        /// <remarks/>
        Or,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListSecureMethodsCompletedEventHandler(object sender, ListSecureMethodsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListSecureMethodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListSecureMethodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateBatchCompletedEventHandler(object sender, CreateBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CancelBatchCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ExecuteBatchCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSystemPropertiesCompletedEventHandler(object sender, GetSystemPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Property[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Property[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetSystemPropertiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void MoveItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListChildrenCompletedEventHandler(object sender, ListChildrenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListChildrenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListChildrenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CatalogItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CatalogItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPropertiesCompletedEventHandler(object sender, GetPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Property[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Property[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetPropertiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetItemTypeCompletedEventHandler(object sender, GetItemTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ItemTypeEnum Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ItemTypeEnum)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateReportCompletedEventHandler(object sender, CreateReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Warning[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Warning[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReportDefinitionCompletedEventHandler(object sender, GetReportDefinitionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetReportDefinitionCompletedEventHandler(object sender, SetReportDefinitionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetReportDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetReportDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Warning[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Warning[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateResourceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetResourceContentsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetResourceContentsCompletedEventHandler(object sender, GetResourceContentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResourceContentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResourceContentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string MimeType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReportParametersCompletedEventHandler(object sender, GetReportParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReportParameter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReportParameter[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetReportParametersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateLinkedReportCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReportLinkCompletedEventHandler(object sender, GetReportLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetReportLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListLinkedReportsCompletedEventHandler(object sender, ListLinkedReportsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListLinkedReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListLinkedReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CatalogItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CatalogItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RenderCompletedEventHandler(object sender, RenderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Encoding {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string MimeType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public ParameterValue[] ParametersUsed {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParameterValue[])(this.results[3]));
            }
        }
        
        /// <remarks/>
        public Warning[] Warnings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Warning[])(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string[] StreamIds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RenderStreamCompletedEventHandler(object sender, RenderStreamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenderStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenderStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Encoding {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string MimeType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRenderResourceCompletedEventHandler(object sender, GetRenderResourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRenderResourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRenderResourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string MimeType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetExecutionOptionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExecutionOptionsCompletedEventHandler(object sender, GetExecutionOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExecutionOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExecutionOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExecutionSettingEnum Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExecutionSettingEnum)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ScheduleDefinitionOrReference Item {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ScheduleDefinitionOrReference)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetCacheOptionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCacheOptionsCompletedEventHandler(object sender, GetCacheOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCacheOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCacheOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ExpirationDefinition Item {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExpirationDefinition)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateReportExecutionSnapshotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FlushCacheCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListJobsCompletedEventHandler(object sender, ListJobsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListJobsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListJobsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Job[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Job[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CancelJobCompletedEventHandler(object sender, CancelJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateDataSourceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDataSourceContentsCompletedEventHandler(object sender, GetDataSourceContentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataSourceContentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSourceContentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSourceDefinition Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSourceDefinition)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetDataSourceContentsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnableDataSourceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DisableDataSourceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListReportsUsingDataSourceCompletedEventHandler(object sender, ListReportsUsingDataSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListReportsUsingDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListReportsUsingDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CatalogItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CatalogItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetReportDataSourcesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReportDataSourcesCompletedEventHandler(object sender, GetReportDataSourcesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportDataSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportDataSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSource[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSource[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReportDataSourcePromptsCompletedEventHandler(object sender, GetReportDataSourcePromptsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportDataSourcePromptsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportDataSourcePromptsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSourcePrompt[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSourcePrompt[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateReportHistorySnapshotCompletedEventHandler(object sender, CreateReportHistorySnapshotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateReportHistorySnapshotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateReportHistorySnapshotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Warning[] Warnings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Warning[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetReportHistoryOptionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReportHistoryOptionsCompletedEventHandler(object sender, GetReportHistoryOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportHistoryOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportHistoryOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool KeepExecutionSnapshots {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ScheduleDefinitionOrReference Item {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ScheduleDefinitionOrReference)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetReportHistoryLimitCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReportHistoryLimitCompletedEventHandler(object sender, GetReportHistoryLimitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportHistoryLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportHistoryLimitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool IsSystem {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int SystemLimit {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListReportHistoryCompletedEventHandler(object sender, ListReportHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListReportHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListReportHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReportHistorySnapshot[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReportHistorySnapshot[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteReportHistorySnapshotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindItemsCompletedEventHandler(object sender, FindItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CatalogItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CatalogItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateScheduleCompletedEventHandler(object sender, CreateScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteScheduleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetSchedulePropertiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSchedulePropertiesCompletedEventHandler(object sender, GetSchedulePropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchedulePropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchedulePropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Schedule Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Schedule)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListScheduledReportsCompletedEventHandler(object sender, ListScheduledReportsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListScheduledReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListScheduledReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CatalogItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CatalogItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListSchedulesCompletedEventHandler(object sender, ListSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Schedule[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Schedule[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PauseScheduleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ResumeScheduleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateSubscriptionCompletedEventHandler(object sender, CreateSubscriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSubscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateDataDrivenSubscriptionCompletedEventHandler(object sender, CreateDataDrivenSubscriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateDataDrivenSubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateDataDrivenSubscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetSubscriptionPropertiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetDataDrivenSubscriptionPropertiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSubscriptionPropertiesCompletedEventHandler(object sender, GetSubscriptionPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubscriptionPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubscriptionPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ExtensionSettings ExtensionSettings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExtensionSettings)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public ActiveState Active {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ActiveState)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string EventType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string MatchData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public ParameterValue[] Parameters {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParameterValue[])(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDataDrivenSubscriptionPropertiesCompletedEventHandler(object sender, GetDataDrivenSubscriptionPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataDrivenSubscriptionPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataDrivenSubscriptionPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ExtensionSettings ExtensionSettings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExtensionSettings)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public DataRetrievalPlan DataRetrievalPlan {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataRetrievalPlan)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public ActiveState Active {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ActiveState)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string EventType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string MatchData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public ParameterValueOrFieldReference[] Parameters {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParameterValueOrFieldReference[])(this.results[8]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteSubscriptionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PrepareQueryCompletedEventHandler(object sender, PrepareQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSetDefinition Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSetDefinition)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool Changed {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExtensionSettingsCompletedEventHandler(object sender, GetExtensionSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExtensionSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExtensionSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExtensionParameter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExtensionParameter[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ValidateExtensionSettingsCompletedEventHandler(object sender, ValidateExtensionSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateExtensionSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateExtensionSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExtensionParameter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExtensionParameter[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListSubscriptionsCompletedEventHandler(object sender, ListSubscriptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListSubscriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListSubscriptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Subscription[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Subscription[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListSubscriptionsUsingDataSourceCompletedEventHandler(object sender, ListSubscriptionsUsingDataSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListSubscriptionsUsingDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListSubscriptionsUsingDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Subscription[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Subscription[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListExtensionsCompletedEventHandler(object sender, ListExtensionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListExtensionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListExtensionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Extension[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Extension[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListEventsCompletedEventHandler(object sender, ListEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Event[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Event[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FireEventCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListSystemTasksCompletedEventHandler(object sender, ListSystemTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListSystemTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListSystemTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListTasksCompletedEventHandler(object sender, ListTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListSystemRolesCompletedEventHandler(object sender, ListSystemRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListSystemRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListSystemRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Role[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Role[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ListRolesCompletedEventHandler(object sender, ListRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Role[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Role[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRolePropertiesCompletedEventHandler(object sender, GetRolePropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRolePropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRolePropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetRolePropertiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSystemPoliciesCompletedEventHandler(object sender, GetSystemPoliciesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemPoliciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemPoliciesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Policy[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Policy[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetSystemPoliciesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPoliciesCompletedEventHandler(object sender, GetPoliciesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPoliciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPoliciesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Policy[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Policy[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool InheritParent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetPoliciesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InheritParentSecurityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSystemPermissionsCompletedEventHandler(object sender, GetSystemPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPermissionsCompletedEventHandler(object sender, GetPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void LogonUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void LogoffCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\OlapCubeGeneration.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;

using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the Olap Partition tool creation job
    /// </summary>
    public class OlapCubeGeneration : ReportingJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public OlapCubeGeneration()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public OlapCubeGeneration(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingOLAPDB.ComponentName;

            m_JobName = @"OlapCubeGeneration";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.OlapCubeGeneration;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class OlapCubeGeneration_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\ReportArchiveDB_UpdateFilegroups.cs ===
using System;
using System.Collections.Specialized;
using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the ReportingDB: Drop Archived Facts job
    /// </summary>
    public class ReportArchiveDB_UpdateFilegroups : ReportingJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public ReportArchiveDB_UpdateFilegroups()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public ReportArchiveDB_UpdateFilegroups(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_JobName = @"ReportArchiveDB: update filegroups";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.ReportArchiveDB_UpdateFilegroups;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class ReportArchiveDB_UpdateFilegroups_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\ReportArchiveDB_TransferFactData.cs ===
using System;
using System.Collections.Specialized;
using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the ReportingDB: Drop Archived Facts job
    /// </summary>
    public class ReportArchiveDB_TransferFactData : ReportingJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public ReportArchiveDB_TransferFactData()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public ReportArchiveDB_TransferFactData(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_JobName = @"ReportArchiveDB: transfer fact data";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.ReportArchiveDB_TransferFactData;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class ReportArchiveDB_TransferFactData_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\RealtimeDB_RealtimeProcessing.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;

using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the ReportRealtimeDB: Realtime Processing job
    /// </summary>
    public class RealtimeDB_RealtimeProcessing : ReportingJob
    {

        /// <summary>
        /// Default Constructor
        /// </summary>
        public RealtimeDB_RealtimeProcessing()
        {
            Initialize(null);
        }

        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public RealtimeDB_RealtimeProcessing(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.RealtimeDB.ComponentName;

            m_JobName = @"Realtime Processing";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.RealtimeDB_RealtimeProcessing;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }



        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class RealtimeDB_PurgeFactTables_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\ReportingDB_DropArchivedFacts.cs ===
using System;
using System.Collections.Specialized;
using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the ReportingDB: Drop Archived Facts job
    /// </summary>
    public class ReportingDB_DropArchivedFacts : ReportingJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public ReportingDB_DropArchivedFacts()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public ReportingDB_DropArchivedFacts(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingDB.ComponentName;
            m_JobName = @"ReportingDB: Drop Archived Facts";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.ReportingDB_DropArchivedFact;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class ReportingDB_DropArchivedFacts_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\RealtimeDB_PurgeFactTables.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;

using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the ReportRealtimeDB: Purge Fact Tables job
    /// </summary>
    public class RealtimeDB_PurgeFactTables : ReportingJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public RealtimeDB_PurgeFactTables()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public RealtimeDB_PurgeFactTables(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.RealtimeDB.ComponentName;

            m_JobName = @"ReportRealtimeDB: Purge fact tables";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.RealtimeDB_PurgeFact;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class RealtimeDB_PurgeFactTables_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\SCGExport_SSIS.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;

using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the SCGExport SSIS package job
    /// </summary>
    public class SCGExport_SSIS : ReportingJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public SCGExport_SSIS()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public SCGExport_SSIS(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingDB.ComponentName;

            m_JobName = @"SCGExport SSIS";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.SCGImportFeed_SSIS;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class SCGExport_SSIS_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\ReportingDB_PurgeFactTables.cs ===
using System;
using System.Collections.Specialized;
using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the ReportingDB:Purge Fact Tables job
    /// </summary>
    public class ReportingDB_PurgeFactTables : ReportingJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public ReportingDB_PurgeFactTables()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public ReportingDB_PurgeFactTables(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingDB.ComponentName;
            m_JobName = @"ReportingDB: Purge Fact Tables";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.ReportingDB_PurgeFact;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class ReportingDB_PurgeFactTables_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\SCGImportFeed_SSIS.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;

using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the SCGImport SSIS package job
    /// </summary>
    public class SCGImportFeed_SSIS : ReportingJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public SCGImportFeed_SSIS()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public SCGImportFeed_SSIS(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingSSISDB.ComponentName;

            m_JobName = @"SCGImportFeed SSIS";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.SCGImportFeed_SSIS;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class SCGImportFeed_SSIS_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\UODB_Accounts_SSIS.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;
using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the UODB Accounts SSIS job
    /// </summary>
    public class UODB_Accounts_SSIS : SSISJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public UODB_Accounts_SSIS()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public UODB_Accounts_SSIS(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingSSISDB.ComponentName;

            m_JobName = @"UODB Accounts SSIS";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.SSIS_Daily;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class UODB_Accounts_SSIS_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\UODB_Music_SSIS.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;

using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the UODB Music SSIS job
    /// </summary>
    public class UODB_Music_SSIS : SSISJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public UODB_Music_SSIS()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public UODB_Music_SSIS(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingSSISDB.ComponentName;

            m_JobName = @"UODB Music SSIS";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.SSIS_Music;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class UODB_Music_SSIS_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\SSISJob.cs ===
using System;
using System.Threading;
using System.Collections.Specialized;

//using Microsoft.SqlServer.Management.Common;
using Microsoft.SqlServer.Management.Smo;
using Microsoft.SqlServer.Management.Smo.Agent;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// 
    /// </summary>
    public class SSISJob : ReportingJob
    {        
/*
        /// <summary>
        /// Execute ssis job
        /// </summary>
        /// <returns>The constructed SQL script to execute the job</returns>
        public override JobExecutionStatus InvokeJob()                
        {
            StartTime = DateTime.Now;
            
            Server        ssisServer;
            //ServerConnection ssisServerConn;
            JobServer   jobSrvSSIS;
            Microsoft.SqlServer.Management.Smo.Agent.Job             jobSSIS=null;

            ssisServer = new Server(ServerName);
            jobSrvSSIS = ssisServer.JobServer;

            jobSSIS = jobSrvSSIS.Jobs[JobName];
            
            if(jobSSIS != null)
            {
                jobSSIS.Start();
                while(true)
                {
                    Thread.Sleep(1000);

                    jobSSIS.Refresh();
                    if(jobSSIS.CurrentRunStatus ==   JobExecutionStatus.Idle)
                        break;
                }
            }

            RunningTime  = DateTime.Now.Subtract(StartTime);
            Completed = true;
            
            return jobSSIS.CurrentRunStatus;
        }
*/        
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\UODB_Offers_SSIS.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;
using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the UODB Offers SSIS job
    /// </summary>
    public class UODB_Offers_SSIS : SSISJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public UODB_Offers_SSIS()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public UODB_Offers_SSIS(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingSSISDB.ComponentName;

            m_JobName = @"UODB Offers SSIS";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.SSIS_Daily;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class UODB_Offers_SSIS_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\UODB_Primary_SSIS.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;
using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the Daily UODB SSIS job
    /// </summary>
    public class UODB_Primary_SSIS : SSISJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public UODB_Primary_SSIS()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public UODB_Primary_SSIS(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingSSISDB.ComponentName;

            m_JobName = @"UODB Primary SSIS";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.SSIS_Daily;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class UODB_Primary_SSIS_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\UODB_Purchase_SSIS.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;

using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the UODB Purchase SSIS job
    /// </summary>
    public class UODB_Purchase_SSIS : SSISJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public UODB_Purchase_SSIS()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public UODB_Purchase_SSIS(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingSSISDB.ComponentName;

            m_JobName = @"UODB Purchase SSIS";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.SSIS_Purchase;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class UODB_Purchase_SSIS_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\UODB_Secondary_SSIS.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;

using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the Weekly UODB SSIS job
    /// </summary>
    public class UODB_Secondary_SSIS : SSISJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public UODB_Secondary_SSIS()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public UODB_Secondary_SSIS(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingSSISDB.ComponentName;
            m_JobType = ReportingJobType.SSIS_Secondary;
            m_JobName = @"UODB Secondary SSIS";
            m_JobSteps = new NameValueCollection(1);

            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class UODB_Secondary_SSIS_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\UODB_Realtime_SSIS.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;
using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the UODB Realtime SSIS job
    /// </summary>
    public class UODB_Realtime_SSIS : SSISJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public UODB_Realtime_SSIS()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public UODB_Realtime_SSIS(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingSSISDB.ComponentName;

            m_JobName = @"UODB Realtime SSIS";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.SSIS_Realtime;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class UODB_Realtime_SSIS_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\WMIS_Download.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the WMIS Download job
    /// </summary>
    public class WMIS_Download : ReportingJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public WMIS_Download()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public WMIS_Download(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_JobName = @"WMIS Download";
            m_JobSteps = new NameValueCollection(1);
            m_JobType = ReportingJobType.WMIS_Download;
            m_ServerName = ReportingCommon.Instance.ReportingSSISDB.ComponentName;
            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class WMIS_Download_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Jobs\UODB_Video_SSIS.cs ===
using System;
using System.Collections.Specialized;

using ServerTestFramework.Utilities;
using ServerTestFramework.STFLive;

using xonline.common.config;
using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// This is the UODB Video SSIS job
    /// </summary>
    public class UODB_Video_SSIS : SSISJob
    {        

        /// <summary>
        /// Default Constructor
        /// </summary>
        public UODB_Video_SSIS()
        {
            Initialize(null);
        }
        
        /// <summary>
        /// Reporting Constructor with Job Parameters
        /// </summary>
        public UODB_Video_SSIS(ReportingJobParameters reportingJobParams)
        {
            Initialize(reportingJobParams);
        }
        /// <summary>
        /// Initialize Job with parameters if provided
        /// </summary>
        /// <param name="reportingJobParams">Job Parameters</param>
        private void Initialize(ReportingJobParameters reportingJobParams)
        {
            m_ServerName = ReportingCommon.Instance.ReportingSSISDB.ComponentName;
            m_JobType = ReportingJobType.SSIS_Video;
            m_JobName = @"UODB Video SSIS";
            m_JobSteps = new NameValueCollection(1);

            // Set Default Values
            m_Completed = false;
            m_HResult = ReportingJobStatus.Idle;
            m_Results = @"Job not executed yet";       

            if (reportingJobParams != null)
            {
                m_Parameters = reportingJobParams;
            }
        }

       

        /// <summary>
        /// Job parameters specific to this job
        /// </summary>
        public class UODB_Video_SSIS_Params : ReportingJobParameters
        {
            // Enter any parameters here..
        }
    }
   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\AchievementSummary.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class AchievementSummary : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Title Usage Reports/Achievements Summary Report";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\ContractualPartners.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class ContractualPartners : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Title Usage Reports/Contractual Partners Report";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\FirstTitlePlayed.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class FirstTitlePlayed : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Title Usage Reports/First Title Played";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\MarketplaceDownloadSummary.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class MarketplaceDownloadSummary : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Marketplace Reports/Marketplace Download Summary";
        public override string ReportPath
        {
            get {return m_ReportPath;  }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\MarketplaceScorecard.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class MarketplaceScorecard : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Marketplace Reports/Marketplace Scorecard Report";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\LastWebActivity.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class LastWebActivity : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/XBOX Live Usage Reports/Last Web Activity by Region and Country";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\MusicRoyalty.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class MusicRoyalty : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Entertainment Reports/Music Royalty Report";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\MarketRedeemedContentTypeTier.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class MarketRedeemedContentTypeTier : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Marketplace Reports/Marketplace Redeemed Content by Type and Tier";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\MarketRedeemedContentTitleOffer.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class MarketRedeemedContentTitleOffer : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Marketplace Reports/Marketplace Redeemed Content by Title and Offer";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\RealTimeAccounts.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class RealTimeAccounts : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Real-time Reports/Real-time Accounts";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\PublisherTitleUsageMonthly.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class PublisherTitleUsageMonthly : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Publisher Reports/Publisher Title Usage Monthly";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\RealTimeTitleUsage.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class RealTimeTitleUsage : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Real-time Reports/Real-time Title Usage";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\PublisherTitleUsageDaily.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class PublisherTitleUsageDaily : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Publisher Reports/Publisher Title Usage Daily";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\TitleUsageDetails.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class TitleUsageDetails : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Title Usage Reports/Title Usage Details";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\SubscriberLife.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class SubscriberLife : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/XBOX Live Usage Reports/Subscriber Life to Date";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\TitleUsageSummary.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class TitleUsageSummary : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Title Usage Reports/Title Usage Summary";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\VideoRoyalty.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class VideoRoyalty : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Entertainment Reports/Video Royalty Report";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\XboxAccountSummary.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class XboxAccountSummary : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/XBOX Live Usage Reports/XBOX Accounts Summary Report";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\StagingTable.cs ===
using System;
using System.Data;
using System.Data.SqlClient;
using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class StagingTable : ReportingTable
    {
        protected string _szReplicationProvider;        

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\Xbox1DownloadDetails.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class Xbox1DownloadDetails : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Marketplace Reports/Xbox 1 Download Details";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\VisitorFrequency.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class VisitorFrequency : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/XBOX Live Usage Reports/Visitor Frequency (Last Logged On to Service)";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_achievements.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing T_achievements table
    /// </summary>
    public class T_achievements : ReportingTable
    {
        public static Report Log = new Report("T_achievements");

        public  T_achievements()
        {
            _szTableName = "t_achievements";
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, int i_title_id, long bi_puid, int i_achievement_id )
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow( Cmd ,  i_title_id,  bi_puid,  i_achievement_id );
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd , int i_title_id, long bi_puid, int i_achievement_id )
        {
            // Add a row
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_achievements(i_title_id,  bi_puid,  i_achievement_id, i_date_achieved, i_time_achieved) ");	
            Cmd.CommandText += string.Format("values({0}, {1}, '{2}',{3},{4})",  i_title_id, bi_puid, i_achievement_id, ReportingHelper.fn_get_i_date(DateTime.UtcNow), ReportingHelper.fn_get_i_time(DateTime.UtcNow));  
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_puid)
        {
            T_titles t_titles = new T_titles();
            int i_title_id;
            
            i_title_id = t_titles.GetOneTitle(conn, 2);

            AddOneRow(conn,  i_title_id,  bi_puid, 123);
        }

        /// <summary>
        /// UpdateOneRow
        /// This is a kind of meaningless update only to trigger update flag for replication
        /// </summary>
        public void UpdateOneRow(SqlConnection conn, long bi_puid)
        {
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            UpdateOneRow( Cmd,  bi_puid);
        }

        /// <summary>
        /// UpdateOneRow
        /// This is a kind of meaningless update only to trigger update flag for replication
        /// </summary>
        public void UpdateOneRow(SqlCommand Cmd, long bi_puid)
        {
            Cmd.CommandType = CommandType.Text;
            
            Cmd.CommandText = string.Format("select top 1 i_title_id, i_achievement_id from t_achievements where bi_puid  = {0}",  bi_puid);  
            SqlDataReader reader = null;
            reader = Cmd.ExecuteReader ();
            reader.Read();

            bool bResult = reader.HasRows;
            if(bResult == false)
                throw new Exception("no rows returned for t_achievements");

            int i_title_id = reader.GetInt32(0);
            int i_achievement_id = reader.GetInt32(1);

            reader.Close();

            // Update a row
            Cmd.CommandText   = string.Format("update  t_achievements set dt_change_datetime = '{0}' where bi_puid = {1} and i_title_id = {2} and i_achievement_id = {3}", 
                                                                    DateTime.UtcNow,  bi_puid, i_title_id, i_achievement_id);  
            Cmd.ExecuteNonQuery();
        }


        /// <summary>
        /// GetContent
        /// </summary>
        public SqlDataReader GetContent(SqlConnection Connection, long bi_puid, int i_title_id, int i_achievement_id)
        {
            SqlCommand cmd;

            cmd = new SqlCommand();
            cmd.Connection = Connection;
            cmd.CommandType = CommandType.Text;

            string query = string.Format("SELECT top 1 * FROM [t_achievements] where bi_puid = {0} and i_title_id = {1} and i_achievement_id = {2} ", bi_puid, i_title_id, i_achievement_id);
            
            cmd.CommandText = query;
            SqlDataReader reader = null;
            try
            {
                reader = cmd.ExecuteReader();
            }
            catch(System.Data.SqlClient.SqlException e)
            {
                Log.Warn(e.Message);
                Log.Warn(query);
            }

            return reader;
        }        



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_base_offers.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_base_offers : ReportingTable
    {
        public long AddOneRow(SqlConnection conn)
        {
            long biBaseOfferID;
            
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            // Get current max title id in the table
            Cmd.CommandText = string.Format("select max(bi_offer_id) from t_base_offers");	
            Object obj = Cmd.ExecuteScalar ();

            if(Object.ReferenceEquals(obj.GetType(),DBNull.Value.GetType()) )
                biBaseOfferID = -554353576378341;
            else
                biBaseOfferID = (long) obj + 1;

            // Add a row
            Cmd.CommandText   = string.Format("insert into t_base_offers(bi_offer_id, i_tier_id, dt_Change_datetime) ");	
            
            Cmd.CommandText += string.Format("values({0}, 6, '{1}')",  biBaseOfferID, DateTime.UtcNow);
            Cmd.ExecuteNonQuery();

            return biBaseOfferID;
        }

        public void AddOneRow(SqlConnection conn, long biBaseOfferID)
        {
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            // Add a row
            Cmd.CommandText   = string.Format("insert into t_base_offers(bi_offer_id, i_tier_id, dt_Change_datetime) ");	
            
            Cmd.CommandText += string.Format("values({0}, 6, '{1}')",  biBaseOfferID, DateTime.UtcNow);
            Cmd.ExecuteNonQuery();
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_acquirelicense_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{

    public class T_acquirelicense_fact : StagingTable
    {
        public DateRange dt_when;
        public string ui_media_instance_id;
        public string ui_offer_instance_id;
        public string bi_purchase_machine_puid;
        public string bi_license_request_puid;
        public string bi_user_puid;


        // Constructor
        public T_acquirelicense_fact()
        {
            _szTableName = "t_acquirelicense_fact";
            _szReplicationProvider ="";
        }

        // Constructor for replication table
        public T_acquirelicense_fact(string ReplicationProvider)
        {
            _szTableName = "t_acquirelicense_fact_" + ReplicationProvider;
            _szReplicationProvider = ReplicationProvider;
        }

        // Add a row to the table
        public string AddOneRow(DateRange dtWhen, string MediaInstanceId, string OfferInstanceId,
                     string PurchaseMachinePuid, string LicenseRequestPuid, string UserPuid)
        {
            string sqlStatement = string.Format("INSERT into {0} (dt_when, ui_media_instance_id, ui_offer_instance_id, bi_purchase_machine_puid, bi_license_request_puid, bi_user_puid) ", _szTableName);
            sqlStatement += string.Format(" VALUES ('{0}', '{1}', '{2}', {3}, {4}, {5} )", dtWhen.dateMax, MediaInstanceId, OfferInstanceId, PurchaseMachinePuid, LicenseRequestPuid, UserPuid);


            return sqlStatement;
        }



    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Reports\VideoStudio.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Reports
{
    public class VideoStudio : XBLReport
    {
        /// <summary>
        /// What server you are dealing with
        /// </summary>
        public override ReportingMachines ComponentType
        {
            get { return ReportingMachines.Rosetta; }
        }
        /// <summary>
        /// The name of the server you are dealing with
        /// </summary>
        public override string ComponentName
        {
            get { return ReportingCommon.Instance.ReportingIIS.ComponentName; }
        }

        /// <summary>
        /// Path to report in ReportingService
        /// </summary>
        private string m_ReportPath = "/XBOX Live New Portal/Entertainment Reports/Video Studio Report";
        public override string ReportPath
        {
            get { return m_ReportPath; }
        }

        /// <summary>
        /// Queries the ReportingService to get the parameters for this Report.
        /// </summary>
        /// <returns>A list of Report Parameter Names</returns>
        public override List<string> GetReportParameters()
        {
            return base.GetReportParameters();
        }

        /// <summary>
        /// Verifies that data represented within the reference object is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObject">Object whose data needs verifying</param>
        /// <returns>Description of what was verified</returns>
        public override string Verify(ReportingReferenceObject refObject)
        {
            return "";
        }


        /// <summary>
        /// Verifies that ALL data represented within the reference object container is present in this Report
        /// Throws an exception if verification fails
        /// </summary>
        /// <param name="refObjectContainer">Object whose data needs verifying</param>
        /// <returns>Description fo what was verified</returns>
        public override string Verify(ReportingReferenceObjectContainer refObjectContainer)
        {
            return "";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_elite_migration_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.Database;
using ServerTestFramework.STFLive.Database;
using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_elite_migration_fact : StagingTable
    {
        public T_elite_migration_fact(string szReplicationProvider)
        {
            _szReplicationProvider = szReplicationProvider;
            _szTableName = "t_elite_migration_fact_" + szReplicationProvider;
        }

        public void AddOneRow(SqlConnection conn, DateTime dtWhen, long bi_user_puid)
        {
            long biOldMachinePUID, biNewMachinePUID;
            
            // Add a row
            biOldMachinePUID = bi_user_puid + 0x000F000000000000;
            biNewMachinePUID = bi_user_puid + 0x000F100000000000;

            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (dt_when,bi_sgnonce,bi_user_puid,bi_old_machine_puid,bi_new_machine_puid,i_user_licenses,i_machine_licenses,i_hr) ", _szTableName);
            Cmd.CommandText += string.Format(" values( '{0}', {1}, {2}, {3}, {4}, {5}, {6}, {7} )", dtWhen, 0, bi_user_puid, biOldMachinePUID, biNewMachinePUID, 2, 1, 0);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\T_dmp_purchase_transactions.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.Database;
using ServerTestFramework.STFLive.Database;
using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing T_dmp_purchase_transactions table
    /// </summary>
    public class T_dmp_purchase_transactions : ReportingTable
    {
        public static Report Log = new Report("T_dmp_purchase_transactions");

        /// <summary>
        /// AddOneRow
        /// if i_purchase_type_id=1 then Xbox Live Offers, if 2 then MusicNet, if 3 then SyncCast
        /// </summary>
        public Guid AddOneRow(SqlConnection conn, Guid uuid, int i_purchase_type_id)
        {
            // Create a user at t_users
            T_users t_users = new T_users();
            long bi_user_puid = t_users.AddOneRow(conn);   

            // Get a hash
            int hash = UodbWS.GetHashBucket(bi_user_puid);

            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_dmp_purchase_transactions(bi_user_puid, bi_machine_puid, uid_tracking_guid, i_status_id, dt_transaction_start, si_hash_bucket,  i_purchase_type_id) ");	
            Cmd.CommandText += string.Format("values({0}, {1}, '{2}', {3}, '{4}', {5}, {6})",  
                                                                    bi_user_puid,  bi_user_puid + 0x000F000000000000, uuid.ToString(),2, DateTime.UtcNow, hash, i_purchase_type_id);  
            Cmd.ExecuteNonQuery();

            // Fill _keyTable
            //_keyTable.Add("uid_tracking_guid", uuid);
            //_keyTable.Add("i_status_id", 2);
            
            return uuid;
        }

        /// <summary>
        /// GetContent
        /// </summary>
        public virtual SqlDataReader  GetContent(SqlConnection Connection, Guid uuid)
        {
            SqlDataReader reader = GetContent( Connection,  uuid, "t_dmp_purchase_transactions");

            return reader;
        }        

        /// <summary>
        /// GetContent
        /// </summary>
        protected SqlDataReader  GetContent(SqlConnection Connection, Guid uuid, string szTable)
        {
            SqlCommand cmd;

            cmd = new SqlCommand();
            cmd.Connection = Connection;
            cmd.CommandType = CommandType.Text;

            string query = string.Format("SELECT top 1 * FROM {0} where uid_tracking_guid = '{1}'", szTable, uuid);
            
            cmd.CommandText = query;
            SqlDataReader reader = null;
            try
            {
                reader = cmd.ExecuteReader();
            }
            catch(System.Data.SqlClient.SqlException e)
            {
                Log.Warn(e.Message);
                Log.Warn(query);
            }

            return reader;
        }        


    }

    /// <summary>
    /// A class representing T_dmp_purchase_transactions_music table
    /// </summary>
    public class T_dmp_purchase_transactions_music : T_dmp_purchase_transactions
    {
        /// <summary>
        /// GetContent
        /// </summary>
        public override SqlDataReader  GetContent(SqlConnection Connection, Guid uuid)
        {
            SqlDataReader reader = GetContent( Connection,  uuid, "t_dmp_purchase_transactions_music");

            return reader;
        }        
    }    

    /// <summary>
    /// A class representing T_dmp_purchase_transactions_video table
    /// </summary>
    public class T_dmp_purchase_transactions_video : T_dmp_purchase_transactions
    {
        /// <summary>
        /// GetContent
        /// </summary>
        public override SqlDataReader  GetContent(SqlConnection Connection, Guid uuid)
        {
            SqlDataReader reader = GetContent( Connection,  uuid, "t_dmp_purchase_transactions_video");

            return reader;
        }        
    }    
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_content_package.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_content_package : ReportingTable
    {
        public void AddOneRow(SqlConnection conn, long biOfferId)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_content_package (b_content_id, vc_content_name) ");
            Cmd.CommandText += string.Format(" values ( cast({0} as binary(20)), 'contentName_{1}'  ) ", biOfferId, biOfferId);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_fdb_time.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_fdb_time : StagingTable
    {
        public T_fdb_time(string szReplicationProvider)
        {
            _szReplicationProvider = szReplicationProvider;
            _szTableName = "t_fdb_time_" + szReplicationProvider;
        }

        public void AddOneRow(SqlConnection conn, DateTime dtWhen)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (dt_change_datetime, vc_cleanser_ip, vc_filterdb_ip) ", _szTableName);
            Cmd.CommandText += string.Format(" values ( '{0}', '10.20.202.24', '10.20.206.25') ", dtWhen);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_content_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_content_fact : StagingTable
    {
        public DateRange dt_when;
        public string bi_machine_puid;
        public string bi_user_puid;
        public string bi_owner_machine_puid;
        public string i_title_id;
        public string bi_offer_id;
        public string b_content_id;

        public T_content_fact()
        {
            _szTableName = "t_content_fact";
            _szReplicationProvider ="";
        }
        
        public T_content_fact(string szReplicationProvider)
        {
            _szReplicationProvider = szReplicationProvider;
            _szTableName = "t_content_fact_" + szReplicationProvider;
        }

        public void AddOneRow(SqlConnection conn, DateTime dtWhen, long bi_user_puid, int i_title_id, long biOfferId)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (dt_when, bi_machine_puid, bi_user_puid, bi_owner_machine_puid, i_title_id, bi_offer_id, b_content_id) ", _szTableName);
            
            if(i_title_id != 0) // For Xbox1 content
                Cmd.CommandText += string.Format(" values ( '{0}', {1},  {2}, {3}, {4}, {5}, {6}) ", 
                                                                        dtWhen, bi_user_puid+ 0x000F000000000000, bi_user_puid, bi_user_puid+ 0x000F000000000000, i_title_id,  biOfferId, 0);
            else // For Xbox360 content
                Cmd.CommandText += string.Format(" values ( '{0}', {1},  {2}, {3}, {4}, {5}, cast({6} as binary(20))  ) ", 
                                                                        dtWhen, bi_user_puid+ 0x000F000000000000, bi_user_puid, bi_user_puid+ 0x000F000000000000, 0,  0, biOfferId);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_guest_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_guest_fact : StagingTable
    {   
        public DateRange dt_when;
        public string bi_user_puid;
        public string i_title_id;
        public string ti_max_guests_count;

        public T_guest_fact()
        {
            _szTableName = "t_guest_fact";
            _szReplicationProvider = "";
        }
     
        public T_guest_fact(string szReplicationProvider)
        {
            _szReplicationProvider = szReplicationProvider;
            _szTableName = "t_guest_fact_" + szReplicationProvider;
        }

        public void AddOneRow(SqlConnection conn, DateTime dtWhen, long bi_user_puid, int i_title_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (dt_when, bi_user_puid, i_title_id, ti_max_guests_count) ", _szTableName);
            Cmd.CommandText += string.Format(" values ( '{0}', {1},  {2}, {3}) ", dtWhen, bi_user_puid, i_title_id, 2);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_machines.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_machines : ReportingTable
    {
        public static Report Log = new Report("T_machines");

        /// <summary>
        /// AddOneRow
        /// </summary>
        public long AddOneRow(SqlConnection conn)
        {
            long bi_machine_puid;
            
            // Get current max machine id in the table
            try
            {
                bi_machine_puid = GetMaxMachinePUID(conn)+1;
            }
            catch(Exception e)
            {
                if(e.Message.Contains("No data at t_machines"))
                {
                    bi_machine_puid = 0x0019F00000000000;
                }
                else
                {
                    throw;
                }
                
            }

            // Add a row
            AddOneRow(conn, bi_machine_puid);
            
            return bi_machine_puid;
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_machine_puid)
        {
            // Add a row

            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            
            AddOneRow(Cmd, bi_machine_puid) ;
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd, long bi_machine_puid)
        {
            // Add a row
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_machines(bi_machine_puid) ");
            Cmd.CommandText += string.Format("values({0})", bi_machine_puid);  
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// UpdateOneRow
        /// This is a kind of meaningless update only to trigger update flag for replication
        /// </summary>
        public void UpdateOneRow(SqlConnection conn, long bi_machine_puid)
        {
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            UpdateOneRow( Cmd,  bi_machine_puid);
        }

        /// <summary>
        /// UpdateOneRow
        /// This is a kind of meaningless update only to trigger update flag for replication
        /// </summary>
        public void UpdateOneRow(SqlCommand Cmd, long bi_machine_puid)
        {
            Cmd.CommandType = CommandType.Text;

            // Get si_hash_bucket
            short si_hash_bucket;
            
            Cmd.CommandText = string.Format("select si_hash_bucket from t_machines where bi_machine_puid  = {0} ",  bi_machine_puid);  
            Object obj = Cmd.ExecuteScalar ();

            if(obj == null)
                throw new Exception("si_hash_bucket is null");
            else
                si_hash_bucket = (short) obj ;

            // Update a row
            Cmd.CommandText   = string.Format("update  t_machines set si_hash_bucket = {0} where bi_machine_puid = {1} ", si_hash_bucket+1,  bi_machine_puid);  
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// GetMaxUserID
        /// </summary>
        public long GetMaxMachinePUID(SqlConnection conn)
        {
            long bi_machine_puid;
            
            // Get current max title id in the table
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;
            Cmd.CommandText = string.Format("select max(bi_machine_puid) from t_machines");	
            Object obj = Cmd.ExecuteScalar ();

            if(Object.ReferenceEquals(obj.GetType(),DBNull.Value.GetType()) )
                throw new Exception("No data at t_machines");
            else
                bi_machine_puid = (long) obj ;
            
            return bi_machine_puid;
        }

        /// <summary>
        /// GetMaxUserID
        /// </summary>
        public long GetMinMachinePUID(SqlConnection conn)
        {
            long bi_machine_puid;
            
            // Get current max title id in the table
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;
            Cmd.CommandText = string.Format("select min(bi_machine_puid) from t_machines");	
            Object obj = Cmd.ExecuteScalar ();

            if(Object.ReferenceEquals(obj.GetType(),DBNull.Value.GetType()) )
                throw new Exception("No data at t_machines");
            else
                bi_machine_puid = (long) obj;
            
            return bi_machine_puid;
        }

        /// <summary>
        /// FindNextUserID
        /// </summary>
        public long FindNextMachineID(SqlConnection conn, long bi_machine_puid)
        {
            long bi_machine_puid_return;
            
            // Get current max title id in the table
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            
            bi_machine_puid_return = FindNextMachineID( Cmd,  bi_machine_puid);

            return (long) bi_machine_puid_return;
        }

        /// <summary>
        /// FindNextUserID
        /// </summary>
        public long FindNextMachineID(SqlCommand Cmd, long bi_machine_puid)
        {
            long bi_machine_puid_return;
            
            // Get current max title id in the table
            Cmd.CommandType = CommandType.Text;
            Cmd.CommandText = string.Format("select min(bi_machine_puid) from t_machines where bi_machine_puid > {0}", bi_machine_puid);	
            Object obj = Cmd.ExecuteScalar ();

            if(Object.ReferenceEquals(obj.GetType(),DBNull.Value.GetType()) )
                throw new Exception("No more data at t_machines");
            else
                bi_machine_puid_return = (long) obj;
            
            return (long) bi_machine_puid_return;
        }

        /// <summary>
        /// GetContent
        /// </summary>
        public virtual SqlDataReader GetContent(SqlConnection Connection, long bi_machine_puid)
        {
            SqlDataReader reader = GetContent( Connection,  bi_machine_puid, "t_machines");

            return reader;
        }        
        
        /// <summary>
        /// GetContent
        /// szTable should be "t_machines" or "t_machines_rt"
        /// </summary>
        protected virtual SqlDataReader GetContent(SqlConnection Connection, long bi_machine_puid, string szTable)
        {
            SqlCommand cmd;

            cmd = new SqlCommand();
            cmd.Connection = Connection;
            cmd.CommandType = CommandType.Text;

            string query = string.Format("SELECT top 1 * FROM {0} where bi_machine_puid = {1}", szTable, bi_machine_puid);
            
            cmd.CommandText = query;
            SqlDataReader reader = null;
            try
            {
                reader = cmd.ExecuteReader();
            }
            catch(System.Data.SqlClient.SqlException e)
            {
                Log.Warn(e.Message);
                Log.Warn(query);
            }

            return reader;
        }        
        
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_migrate_account_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_migrate_account_fact : StagingTable
    {        
        public DateRange dt_when;
        public string ti_console_type;
        public string bi_user_puid;
        public string bi_user_passport_puid;

        public T_migrate_account_fact()
        {
            _szTableName = "t_migrate_account_fact";
            _szReplicationProvider = "";
        }
        
        public T_migrate_account_fact(string szReplicationProvider)
        {
            _szReplicationProvider = szReplicationProvider;
            _szTableName = "t_migrate_account_fact_" + szReplicationProvider;
        }

        public void AddOneRow(SqlConnection conn, DateTime dtWhen, long bi_user_puid)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (dt_when, ti_console_type, bi_user_puid, bi_user_passport_puid) ", _szTableName);
            Cmd.CommandText += string.Format(" values( '{0}', 0, {1}, {2} )", dtWhen, bi_user_puid, bi_user_puid);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_percentage_viewed_video_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{

    public class t_percentage_viewed_video_fact : StagingTable
    {
        public DateRange dt_when;
        public string bi_user_puid;
        public string ui_media_instance_id;
        public string vc_ad_id;
        public string i_provider_id;
        public string i_source_id;        
        public DateRange dt_session_start;
        public string i_percentage_viewed;


        // Constructor
        public t_percentage_viewed_video_fact()
        {
            _szTableName = "t_percentage_viewed_video_fact";
            _szReplicationProvider ="";
        }

        // Constructor for replication table
        public t_percentage_viewed_video_fact(string ReplicationProvider)
        {
            _szTableName = "t_percentage_viewed_video_fact_" + ReplicationProvider;
            _szReplicationProvider = ReplicationProvider;
        }

        // Add a row to the table
        public string AddOneRow(DateRange dtWhen, string UserPuid, string MediaInstanceId,
                    string AdId, string ProviderId, string SourceId,
                    DateRange SessionStart, string PercentageViewed)
        {
            string sqlStatement = string.Format("INSERT into {0} (dt_when , bi_user_puid, ui_media_instance_id, vc_ad_id, i_provider_id, i_source_id, dt_session_Start_date, i_percentage_viewed)", _szTableName);
            sqlStatement += string.Format(" VALUES ('{0}', {1}, '{2}', '{3}', {4}, {5}, '{6}', {7} )", dtWhen.dateMax, UserPuid, MediaInstanceId, AdId,
                ProviderId, SourceId, SessionStart.dateMin, PercentageViewed);


            return sqlStatement;
        }



    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_provision_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_provision_fact : StagingTable
    {      
        public DateRange dt_when;
        public string f_active;
        public string bi_user_puid;
        public string i_from_tier_id;
        public string bi_from_offer_id;
        public string i_to_tier_id;
        public string bi_to_offer_id;

        public T_provision_fact()
        {
            _szTableName = "t_provision_fact";
            _szReplicationProvider = "";
        }

        public T_provision_fact(string szReplicationProvider)
        {
            _szReplicationProvider = szReplicationProvider;
            _szTableName = "t_provision_fact_" + szReplicationProvider;
        }

        public void AddOneRow(SqlConnection conn, DateTime dtWhen, long bi_user_puid, long bi_base_offer_id)
        {
            long biOfferFrom = 0x07D180000011;
            
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (dt_when, f_active, bi_user_puid, i_from_tier_id, bi_from_offer_id, i_to_tier_id, bi_to_offer_id, f_sps_validated )", _szTableName);
            Cmd.CommandText += string.Format(" values( '{0}', 1, {1}, 3, {2}, 6, {3}, 1 )", dtWhen, bi_user_puid, biOfferFrom, bi_base_offer_id);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_offers.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_offers : ReportingTable
    {
        public static Report Log = new Report("T_Offers");

        public long AddOneRow(SqlConnection conn, byte tiConsoleType)
        {
            long biOfferID;
            
            // Get current max title id in the table
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            biOfferID = GetMaxOfferID(Cmd);

            AddOneRow( Cmd,  tiConsoleType,  biOfferID+1);

            return biOfferID+1;
        }

        public long AddOneRow(SqlConnection conn, byte tiConsoleType, long biOfferID)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow(Cmd,  tiConsoleType,  biOfferID);

            return biOfferID;
        }

        public long AddOneRow(SqlCommand Cmd, byte tiConsoleType, long biOfferID)
        {
            long original_biOfferId = biOfferID;
            // Add a row
            Cmd.CommandType = CommandType.Text;
            
            // Check for duplicate offers
            Cmd.CommandText = "Select count(*) as ExistingOffers from t_offers where bi_offer_id = " + biOfferID;

            // If the offer ID was found, then increase it and try to insert it
            if (((int)Cmd.ExecuteScalar()) > 0)
            {
                Log.Info("Offer ID " + biOfferID + " already exists in t_offers");

            }
            else
            {
                Cmd.CommandText = string.Format("insert into t_offers(bi_offer_id, ti_console_type_id, dt_start_date, dt_end_date, i_offer_type_id, i_offer_frequency_id,");
                Cmd.CommandText += string.Format("b_cancelable, i_ESRB_id, i_bitfilter, i_install_size, i_package_size, i_policy_flags, vc_billing_svc_component_id,");
                Cmd.CommandText += string.Format("vc_friendly_name, si_global_offer_details, dt_Change_datetime) ");

                Cmd.CommandText += string.Format("values({0}, 0, '8/24/2003', '12/31/2999', 2, 0,", biOfferID);
                Cmd.CommandText += string.Format("0, 6, 1, 568, 1516989, 2, ' ',");
                Cmd.CommandText += string.Format("'Large Free Sam', 0, '{0}')", DateTime.UtcNow);
                Cmd.ExecuteNonQuery();
            }
            return biOfferID;
        }

        public long GetMaxOfferID(SqlConnection conn)
        {
            long biOfferID;
            
            // Get current max title id in the table
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            biOfferID = GetMaxOfferID(Cmd);

            return biOfferID;
        }

        public long GetMaxOfferID(SqlCommand Cmd)
        {
            long biOfferID;
            
            // Get current max title id in the table
            Cmd.CommandType = CommandType.Text;
            Cmd.CommandText = string.Format("select max(bi_offer_id) from t_offers");	
            Object obj = Cmd.ExecuteScalar ();

            if(Object.ReferenceEquals(obj.GetType(),DBNull.Value.GetType()) )
                biOfferID = 0x60341AFF00000002;
            else
                biOfferID = (long) obj;

            return biOfferID;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_new_account_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_new_account_fact : StagingTable
    {        
        public DateRange dt_when;
        public string ti_console_type;
        public string bi_machine_puid;
        public string bi_user_puid;
        public string bi_user_passport_puid;
        public string bi_owner_passport_puid;
        public string ti_country_id;
        public string i_language_id;
        public string i_culture_id;
        public string bi_offer_id;
        public string i_hresult;
        public T_new_account_fact()
        {
            _szTableName = "t_new_Account_fact";
            _szReplicationProvider = "";
        }


        public T_new_account_fact(string szReplicationProvider)
        {
            _szReplicationProvider = szReplicationProvider;
            _szTableName = "t_new_account_fact_" + szReplicationProvider;
        }

        public void AddOneRow(SqlConnection conn, DateTime dtWhen, long bi_user_puid, long bi_base_offer_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (dt_when, ti_console_type, bi_machine_puid, bi_user_puid, bi_user_passport_puid, bi_owner_passport_puid, ", _szTableName);
            Cmd.CommandText  += string.Format(" ti_country_id, i_language_id, i_culture_id, bi_offer_id, i_hresult ) ");	
            Cmd.CommandText += string.Format(" select '{0}', u.ti_account_type, u.bi_machine_puid, u.bi_user_puid, u.bi_user_puid, u.bi_user_puid, u.ti_country_id, 1, 1033, ", dtWhen);
            Cmd.CommandText += string.Format(" {0}, 0 from t_users u where u.bi_user_puid = {1}",  bi_base_offer_id, bi_user_puid);  
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_publisher_titles.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_publisher_titles : ReportingTable
    {
        public static Report Log = new Report("T_publisher_titles");

        public void AddOneRow(SqlConnection conn, int i_title_id)
        {
            // Check if exists
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow( Cmd,  i_title_id);
        }

        public void AddOneRow(SqlCommand Cmd, int i_title_id)
        {
            string szTitle = string.Concat("Title", i_title_id.ToString());

            // Check if exists
            Cmd.CommandType = CommandType.Text;
            Cmd.CommandText = string.Format("select count(*) from t_publisher_titles where i_title_id = {0}", i_title_id);	
            int iCount = (int) Cmd.ExecuteScalar ();

            try
            {
                // Add a row unless it already exists
                if(iCount > 0)
                {
                    Log.Info("i_title_id {0} already exists at t_publisher_titles", i_title_id);
                    throw new Exception("already exists");
                }

                Cmd.CommandText   = string.Format("insert into t_publisher_titles(c_publisher_code, i_title_id,  dt_change_datetime) ");	
                Cmd.CommandText += string.Format("values('MS', {0}, '{1}' )",  i_title_id, DateTime.UtcNow);  
                Cmd.ExecuteNonQuery();
            }
            catch(Exception e)
            {
                if(e.Message  != "already exists")
                    throw;
            }
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_msg_snd_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_msg_snd_fact : StagingTable
    {

        public DateRange dt_when;
        public string bi_sender_puid;
        public string i_sender_title_id;
        public string si_msg_type;
        public string vc_recipients_list;
        
        public T_msg_snd_fact()
        {
            _szTableName = "t_msg_snd_fact";
            _szReplicationProvider = "";
        }
        public T_msg_snd_fact(string szReplicationProvider)
        {
            _szReplicationProvider = szReplicationProvider;
            _szTableName = "t_msg_snd_fact_" + szReplicationProvider;
        }

        public void AddOneRow(SqlConnection conn, DateTime dtWhen, long bi_user_puid, int i_title_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (dt_when, bi_sender_puid, i_sender_title_id, si_msg_type, vc_recipients_list) ", _szTableName);
            Cmd.CommandText += string.Format(" values ( '{0}', {1},  {2}, {3}, '') ", 
                                                                    dtWhen, bi_user_puid, i_title_id, 1);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_presence_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_presence_fact : StagingTable
    {
        public DateRange dt_start;
        public string i_duration_ms;
        public string bi_machine_puid;
        public string bi_user_puid;
        public string i_title_id;
        public string bi_xbox_IP;
        public string bi_session_id;
        public string f_playing_now;
        
        public T_presence_fact()
        {
            _szTableName = "t_presence_fact";
            _szReplicationProvider = "";
        }

        public T_presence_fact(string szReplicationProvider)
        {
            _szReplicationProvider = szReplicationProvider;
            _szTableName = "t_presence_fact_" + szReplicationProvider;
        }

        public void AddOneRow(SqlConnection conn, DateTime dtWhen, long bi_user_puid, int i_title_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (dt_start, i_duration_ms, bi_machine_puid, bi_user_puid, i_title_id, bi_xbox_IP, bi_session_id, f_playing_now) ", _szTableName);
            Cmd.CommandText += string.Format(" values ( '{0}', {1},  {2}, {3}, {4}, {5}, {6}, {7}) ", 
                                                                    dtWhen, 1000000, bi_user_puid+ 0x000F000000000000, bi_user_puid, i_title_id, bi_user_puid, bi_user_puid+1000000, 0);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_acquirelicense_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{

    public class T_rdb_acquirelicense_fact : ReportingTable
    {
        public string i_date;
        public string i_time;
        public string ui_media_instance_id;
        public string ui_offer_instance_id;
        public string bi_purchase_machine_puid;
        public string bi_license_request_puid;
        public string bi_user_puid;


        // Constructor
        public T_rdb_acquirelicense_fact()
        {
            _szTableName = "t_rdb_acquirelicense_fact";
        }

   
        // Add a row to the table
        public string AddOneRow(string iDate, string iTime, string MediaInstanceId, string OfferInstanceId,
                     string PurchaseMachinePuid, string LicenseRequestPuid, string UserPuid)
        {
            string sqlStatement = string.Format("INSERT into {0} (i_Date, i_Time, ui_media_instance_id, ui_offer_instance_id, bi_purchase_machine_puid, bi_license_request_puid, bi_user_puid) ", _szTableName);
            sqlStatement += string.Format(" VALUES ({0}, {1}, '{2}', '{3}', {4}, {5}, {6} )", iDate, iTime, MediaInstanceId, OfferInstanceId, PurchaseMachinePuid, LicenseRequestPuid, UserPuid);


            return sqlStatement;
        }



    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_purchase_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_purchase_fact : StagingTable
    {
        public DateRange dt_when;
        public string bi_machine_puid;
        public string bi_user_puid;
        public string i_tier_id;
        public string ti_country_id;
        public string i_language_id;
        public string i_payment_type_id;
        public string bi_offer_id;
        public string i_price_whole;
        public string i_price_fractional;
        
        public T_purchase_fact()
        {
            _szTableName = "t_purchase_fact";
            _szReplicationProvider = "";
        }

        public T_purchase_fact(string szReplicationProvider)
        {
            _szReplicationProvider = szReplicationProvider;
            _szTableName = "t_purchase_fact_" + szReplicationProvider;
        }

        public void AddOneRow(SqlConnection conn, DateTime dtWhen, long bi_user_puid, int i_title_id, long biOfferId)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (dt_when, bi_machine_puid, bi_user_puid, i_tier_id, ti_country_id, i_language_id, ", _szTableName);
            Cmd.CommandText += string.Format(" i_payment_type_id, bi_offer_id, i_price_whole, i_price_fractional )" );
            Cmd.CommandText += string.Format(" values( '{0}', {1},  {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9} )", 
                                                                    dtWhen, bi_user_puid+ 0x000F000000000000, bi_user_puid,  6, 103, 1, 1, biOfferId, 10, 99);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_raw_dmp_media_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{

    public class T_raw_dmp_media_fact : ReportingTable
    {
        public string uid_tracking_guid;
        public string uid_offer_instance_id;
        public string bi_user_puid;
        public string bi_machine_puid;
        public string i_status_id;
        public DateRange dt_transaction_start;
        public DateRange dt_transaction_end;
        public string vc_ip_address;
        public string i_retail_price_points;
        public string dec_retail_price;
        public string vc_retail_price_currency;
        public string dec_wholesale_price;
        public string vc_wholesale_price_currency;
        public string uid_promotion_id;
        public string i_pricing_rule_id;
        public DateRange dt_change_datetime;


        // Constructor
        public T_raw_dmp_media_fact()
        {
            _szTableName = "t_raw_dmp_media_fact";
        }
   

        // Add a row to the table
        public string AddOneRow(string uidTrackingGuid, string uidOfferInstanceID, string biUserPuid, string biMachinePuid, string iStatusID, DateRange dtTransactionStart, 
           DateRange dtTransactionEnd, string vcIPAddress, string iRetailPricePoints, string decRetailPrice, string vcRetailPriceCurrency, string decWholesalePrice,
            string vcWholesalePrice, string uidPromotionID, string iPricingRuleID, DateRange dtChangeDatetime)
        {
            string sqlStatement = string.Format("INSERT into {0} (uid_tracking_guid, uid_offer_instance_id, bi_user_puid, bi_machine_puid, "
                + "i_status_id, dt_transaction_start, dt_transaction_end, vc_ip_address, i_retail_price_points, dec_retail_price, vc_retail_price_currency, " 
                + "dec_wholesale_price, vc_wholesale_price_currency, uid_promotion_id, i_pricing_rule_id, dt_change_datetime)", _szTableName);
            sqlStatement += string.Format(" VALUES ({0}, '{1}', {2}, {3}, {4}, '{5}', '{6}', '{7}', {8}, {9}, '{10}', {11}, '{12}', {13}, {14}, '{15}' )",
                uidTrackingGuid, uidOfferInstanceID, biUserPuid, biMachinePuid, iStatusID, dtTransactionStart.dateMin, dtTransactionEnd.dateMax, vcIPAddress, iRetailPricePoints,
                decRetailPrice, vcRetailPriceCurrency, decWholesalePrice, vcWholesalePrice, uidPromotionID, iPricingRuleID, dtChangeDatetime.dateMax);


            return sqlStatement;
        }



    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_content_xbox360_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_rdb_content_xbox360_fact : ReportingTable
    {
        public static Report Log = new Report("T_rdb_content_xbox360_fact");

        public T_rdb_content_xbox360_fact()
        {
            _szTableName = "t_rdb_content_xbox360_fact";
        }

        public void AddOneRow(SqlConnection conn, int i_date, int i_time, long bi_user_puid, long biOfferId)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("select i_content_id from t_content_package where b_content_id = cast({0} as binary(20)) ",  biOfferId);
            Object obj = Cmd.ExecuteScalar ();

            int i_content_id;

            if(Object.ReferenceEquals(obj.GetType(),DBNull.Value.GetType()) )
            {
                Log.Warn("No i_content_id");
                throw new Exception("No i_content_id");
            }
            else
                i_content_id = (int) obj;
            
            Cmd.CommandText   = string.Format("insert into {0} (i_date, i_time, bi_machine_puid, bi_user_puid, bi_owner_machine_puid, i_title_id, i_content_id) ", _szTableName);
            Cmd.CommandText += string.Format(" values ( {0}, {1},  {2}, {3}, {4}, {5}, {6}  ) ", 
                                                                        i_date, i_time, bi_user_puid+ 0x000F000000000000, bi_user_puid, bi_user_puid+ 0x000F000000000000, 0,  i_content_id);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_dmp_media_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{

    public class T_rdb_dmp_media_fact : ReportingTable
    {
        public string i_date;
        public string i_time;
        public string bi_user_puid;
        public string bi_machine_puid;
        public string uid_tracking_guid;
        public string bi_media_id;
        public string i_status_id;
        public DateRange dt_transaction_start;
        public DateRange dt_transaction_end;
        public string vc_ip_address;
        public string i_retail_price_points;
        public string dec_retail_price;
        public string vc_retail_price_currency;
        public string dec_wholesale_price;
        public string vc_wholesale_price_currency;
        public string uid_promotion_id;
        public string i_pricing_rule_id;
        public string ti_media_type;
        public string bi_price_combo_id;
        public string uuid_offerinstance_id;


        // Constructor
        public T_rdb_dmp_media_fact()
        {
            _szTableName = "t_rdb_dmp_media_fact";
        }


        // Add a row to the table
        public string AddOneRow(string iDate, string iTime, string biUserPuid, string biMachinePuid, string uidTrackingGuid, string biMediaID, string iStatusID, DateRange dtTransactionStart,
           DateRange dtTransactionEnd, string vcIPAddress, string iRetailPricePoints, string decRetailPrice, string vcRetailPriceCurrency, string decWholesalePrice,
            string vcWholesalePrice, string uidPromotionID, string iPricingRuleID, string tiMediaType, string biPriceComboID, string uuidOfferInstanceID)
        {
            string sqlStatement = string.Format("INSERT into {0} (i_date, i_time, bi_user_puid, bi_machine_puid, uid_tracking_guid, bi_media_id, "
                + "i_status_id, dt_transaction_start, dt_transaction_end, vc_ip_address, i_retail_price_points, dec_retail_price, vc_retail_price_currency, "
                + "dec_wholesale_price, vc_wholesale_price_currency, uid_promotion_id, i_pricing_rule_id, ti_media_type, bi_price_combo_id, uuid_offerinstance_id)", _szTableName);
            sqlStatement += string.Format(" VALUES ({0}, {1}, {2}, {3}, {4}, {5}, {6}, '{7}', '{8}', '{9}', {10}, {11}, '{12}', {13}, '{14}', {15}, {16}, {17}, {18}, '{19}' )",
                iDate, iTime, biUserPuid, biMachinePuid, uidTrackingGuid, biMediaID, iStatusID, dtTransactionStart.dateMin, dtTransactionEnd.dateMax, vcIPAddress, iRetailPricePoints,
                decRetailPrice, vcRetailPriceCurrency, decWholesalePrice, vcWholesalePrice, uidPromotionID, iPricingRuleID, tiMediaType, biPriceComboID, uuidOfferInstanceID);


            return sqlStatement;
        }



    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_migrate_account_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_rdb_migrate_account_fact : ReportingTable
    {
        public T_rdb_migrate_account_fact()
        {
            _szTableName = "t_rdb_migrate_account_fact";
        }

        public void AddOneRow(SqlConnection conn, int i_date, int i_time, long bi_user_puid)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (i_date, i_time, ti_console_type, bi_user_puid, bi_user_passport_puid) ", _szTableName);
            Cmd.CommandText += string.Format(" values( {0}, {1}, 0, {2}, {3} )", i_date, i_time, bi_user_puid, bi_user_puid);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_content_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_rdb_content_fact : ReportingTable
    {
        public T_rdb_content_fact()
        {
            _szTableName = "t_rdb_content_fact";
        }

        public void AddOneRow(SqlConnection conn, int i_date, int i_time, long bi_user_puid, int i_title_id, long biOfferId)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (i_date, i_time, bi_machine_puid, bi_user_puid, bi_owner_machine_puid, i_title_id, bi_offer_id) ", _szTableName);
            
            Cmd.CommandText += string.Format(" values ( {0}, {1},  {2}, {3}, {4}, {5}, {6}) ", 
                                                                        i_date, i_time, bi_user_puid+ 0x000F000000000000, bi_user_puid, bi_user_puid+ 0x000F000000000000, i_title_id,  biOfferId);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_guest_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_rdb_guest_fact : ReportingTable
    {
        public T_rdb_guest_fact()
        {
            _szTableName = "t_rdb_guest_fact";
        }

        public void AddOneRow(SqlConnection conn, int i_date, int i_time, long bi_user_puid, int i_title_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (i_date, i_time, bi_user_puid, i_title_id, ti_max_guests_count) ", _szTableName);
            Cmd.CommandText += string.Format(" values ( {0}, {1},  {2}, {3},{4}) ", i_date, i_time, bi_user_puid, i_title_id, 3);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_provision_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_rdb_provision_fact : ReportingTable
    {
        public T_rdb_provision_fact()
        {
            _szTableName = "t_rdb_provision_fact";
        }

        public void AddOneRow(SqlConnection conn, int i_date, int i_time, long bi_user_puid, long bi_base_offer_id)
        {
            long biOfferFrom = 0x07D180000011;
            
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (i_date, i_time, f_active, bi_user_puid, i_from_tier_id, bi_from_offer_id, i_to_tier_id, bi_to_offer_id, f_sps_validated )", _szTableName);
            Cmd.CommandText += string.Format(" values( {0}, {1}, 1, {2}, 3, {3}, 6, {4}, 1 )", i_date, i_time, bi_user_puid, biOfferFrom, bi_base_offer_id);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_percentage_viewed_video_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{

    public class t_rdb_percentage_viewed_video_fact : ReportingTable
    {
        public DateRange dt_when;
        public string i_time;
        public string bi_user_puid;        
        public string ui_media_instance_id;
        public string i_provider_id;
        public string i_source_id;
        public DateRange dt_session_start;
        public string i_percentage_viewed;


        // Constructor
        public t_rdb_percentage_viewed_video_fact()
        {
            _szTableName = "t_rdb_percentage_viewed_video_fact";
        }


        // Add a row to the table
        public string AddOneRow(DateRange dtWhen, string UserPuid, string MediaInstanceId,
                    string ProviderId, string SourceId,
                    DateRange SessionStart, string PercentageViewed)
        {
            string sqlStatement = string.Format("INSERT into {0} (i_Date, i_time, bi_user_puid, ui_media_instance_id, i_provider_id, i_source_id, dt_session_start_date, i_percentage_viewed)", _szTableName);
            sqlStatement += string.Format(" VALUES ({0}, {1}, {2}, '{3}', {4}, {5}, '{6}', {7}", ReportingHelper.fn_get_i_date(DateTime.Parse(dtWhen.dateMin)), ReportingHelper.fn_get_i_time(DateTime.Parse(dtWhen.dateMin)), UserPuid, MediaInstanceId,
                ProviderId, SourceId, SessionStart.dateMax, PercentageViewed);
            
            return sqlStatement;
        }
        

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_presence_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_rdb_presence_fact : ReportingTable
    {
        public T_rdb_presence_fact()
        {
            _szTableName = "t_rdb_presence_fact";
        }

        public void AddOneRow(SqlConnection conn, int i_date, int i_time, long bi_user_puid, int i_title_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (i_date, i_time, i_duration_ms, bi_machine_puid, bi_user_puid, i_title_id, bi_xbox_IP) ", _szTableName);
            Cmd.CommandText += string.Format(" values ( {0}, {1},  {2}, {3}, {4}, {5}, {6}) ", 
                                                                    i_date, i_time, 1000000, bi_user_puid+ 0x000F000000000000, bi_user_puid, i_title_id, bi_user_puid);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_msg_snd_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_rdb_msg_snd_fact : ReportingTable
    {
        public T_rdb_msg_snd_fact()
        {
            _szTableName = "t_rdb_msg_snd_fact";
        }

        public void AddOneRow(SqlConnection conn, int i_date, int i_time, long bi_user_puid, int i_title_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (i_date, i_time, bi_sender_puid, i_sender_title_id, si_msg_type, vc_recipients_list) ", _szTableName);
            Cmd.CommandText += string.Format(" values ( {0}, {1},  {2}, {3},{4}, '') ", 
                                                                    i_date, i_time, bi_user_puid, i_title_id, 1);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_session_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_rdb_session_fact : ReportingTable
    {
        public T_rdb_session_fact()
        {
            _szTableName = "t_rdb_session_fact";
        }

        public void AddOneRow(SqlConnection conn, int i_date, int i_time, long bi_user_puid, int i_title_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (i_date, i_time, i_duration_ms, bi_user_puid, i_title_id, bi_machine_puid) ", _szTableName);
            Cmd.CommandText += string.Format(" values ( {0}, {1},  {2}, {3}, {4},{5}) ", 
                                                                    i_date, i_time, 1000000, bi_user_puid, i_title_id, bi_user_puid+1000000);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_new_account_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_rdb_new_account_fact : ReportingTable
    {
        public T_rdb_new_account_fact()
        {
            _szTableName = "t_rdb_new_account_fact";
        }

        public void AddOneRow(SqlConnection conn, int iDate, int iTime, long bi_user_puid, long bi_base_offer_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (i_date, i_time, ti_console_type, bi_machine_puid, bi_user_puid, bi_user_passport_puid, bi_owner_passport_puid, ti_country_id, i_language_id, i_culture_id, bi_offer_id )", _szTableName);
            Cmd.CommandText += string.Format(" select {0}, {1}, u.ti_account_type, u.bi_machine_puid, u.bi_user_puid, u.bi_user_puid, u.bi_user_puid, u.ti_country_id, 1, 1033,  {2}", iDate, iTime,  bi_base_offer_id);
            Cmd.CommandText += string.Format(" from t_users u where u.bi_user_puid = {0}", bi_user_puid);  
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_purchase_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_rdb_purchase_fact : ReportingTable
    {
        public T_rdb_purchase_fact()
        {
            _szTableName = "t_rdb_purchase_fact";
        }

        public void AddOneRow(SqlConnection conn, int i_date, int i_time, long bi_user_puid, int i_title_id, long biOfferId)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (i_date, i_time, bi_machine_puid, bi_user_puid, i_tier_id, ti_country_id, i_language_id, ", _szTableName);
            Cmd.CommandText += string.Format(" i_payment_type_id, bi_offer_id, i_price_whole, i_price_fractional )" );
            Cmd.CommandText += string.Format(" values( {0}, {1},  {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10} )", 
                                                                    i_date, i_time, bi_user_puid+ 0x000F000000000000, bi_user_puid,  6, 103, 1, 1, biOfferId, 10, 99);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_usagestore_adsupported_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{

    public class t_rdb_usagestore_adsupported_fact : ReportingTable
    {
        public DateRange dt_when;
        public string bi_user_puid;
        public string i_time;
        public string ui_media_instance_id;
        public string vc_ad_id;
        public string i_provider_id;        
        public string i_attribute_value;
        public DateRange dt_date_entry;
        public string i_source_id;


        // Constructor
        public t_rdb_usagestore_adsupported_fact()
        {
            _szTableName = "t_rdb_usagestore_adsupported_fact";
        }


        // Add a row to the table
        public string AddOneRow(DateRange dtWhen, string Time, string UserPuid, string MediaInstanceId,
                    string AdId, string ProviderId, string AttributeValue,
                    DateRange DateEntry, string SourceId)
        {
            string sqlStatement = string.Format("INSERT into {0} (i_Date, i_time, bi_user_puid, ui_media_instance_id, vc_ad_id, i_provider_id, i_attribute_value, dt_date_entry, i_source_id)", _szTableName);
            sqlStatement += string.Format(" VALUES ({0}, {1}, '{2}', '{3}', {4}, {5}, {6}, '{7}', {8}", ReportingHelper.fn_get_i_date(DateTime.Parse(dtWhen.dateMin)), ReportingHelper.fn_get_i_time(DateTime.Parse(dtWhen.dateMin)), UserPuid, MediaInstanceId, AdId,
                ProviderId, AttributeValue, DateEntry.dateMax, SourceId);
            
            return sqlStatement;
        }
        

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_session_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_session_fact : StagingTable
    {
        public DateRange dt_start;
        public string i_duration_ms;
        public string bi_user_puid;
        public string i_title_id;
        public string bi_session_id;

        public T_session_fact()
        {
            _szTableName = "t_session_fact";
            _szReplicationProvider = "";
        }

        public T_session_fact(string szReplicationProvider)
        {
            _szReplicationProvider = szReplicationProvider;
            _szTableName = "t_session_fact_" + szReplicationProvider;
        }

        public void AddOneRow(SqlConnection conn, DateTime dtWhen, long bi_user_puid, int i_title_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into {0} (dt_start, i_duration_ms, bi_user_puid, i_title_id, bi_session_id) ", _szTableName);
            Cmd.CommandText += string.Format(" values ( '{0}', {1},  {2}, {3}, {4}) ", 
                                                                    dtWhen, 1000000, bi_user_puid, i_title_id, bi_user_puid+1000000);
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_subscriptions.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing T_subscriptions table
    /// </summary>
    public class T_subscriptions : ReportingTable
    {
        public static Report Log = new Report("T_subscriptions");

        public  T_subscriptions()
        {
            _szTableName = "t_subscriptions";
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long biUserPUID, long biBaseOfferID)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow( Cmd,  biUserPUID,  biBaseOfferID);
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd, long biUserPUID, long biBaseOfferID)
        {
            // Add a row
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_subscriptions(bi_primary_puid, bi_offer_id, dt_start_date, dt_end_date, i_subscription_status_id) ");	
            Cmd.CommandText += string.Format("values({0}, {1}, '1/1/2006', '12/31/9999', 1)",  biUserPUID,  biBaseOfferID, DateTime.UtcNow, DateTime.UtcNow);  
	     Cmd.CommandTimeout = 300;
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long biUserPUID, long biBaseOfferID, int i_subscription_status_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow( Cmd,  biUserPUID,  biBaseOfferID, i_subscription_status_id);
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd, long biUserPUID, long biBaseOfferID, int i_subscription_status_id)
        {
            // Add a row
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_subscriptions(bi_primary_puid, bi_offer_id, dt_start_date, dt_end_date, i_subscription_status_id) ");	
            Cmd.CommandText += string.Format("values({0}, {1}, '1/1/2006', '12/31/9999', {2})",  biUserPUID,  biBaseOfferID, i_subscription_status_id);  
	     Cmd.CommandTimeout = 300;
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_primary_puid, long bi_offer_id, int i_instances, string vc_svc_instance_id, DateTime dt_start_date)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_subscriptions(bi_primary_puid, bi_offer_id, i_instances, vc_svc_instance_id, dt_start_date, i_subscription_status_id) ");	
            Cmd.CommandText += string.Format("values({0}, {1}, {2}, '{3}', '{4}', 1)",  bi_primary_puid,  bi_offer_id,  i_instances,  vc_svc_instance_id,  dt_start_date);  
	     Cmd.CommandTimeout = 300;
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// UpdateOneRow
        /// This is a kind of meaningless update only to trigger update flag for replication
        /// </summary>
        public void UpdateOneRow(SqlConnection conn, long bi_primary_puid)
        {
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            UpdateOneRow( Cmd,  bi_primary_puid);
        }

        /// <summary>
        /// UpdateOneRow
        /// This is a kind of meaningless update only to trigger update flag for replication
        /// </summary>
        public void UpdateOneRow(SqlCommand Cmd, long bi_primary_puid)
        {
            Cmd.CommandType = CommandType.Text;

            // Get i_subscription_status_id
            int i_subscription_status_id;
            
            Cmd.CommandText = string.Format("select top 1 i_subscription_status_id from t_subscriptions where bi_primary_puid  = {0} ",  bi_primary_puid);  
            Object obj = Cmd.ExecuteScalar ();

            try
            {
                if(obj == null)
                {
                    Log.Warn("i_subscription_status_id is null for {0}.", bi_primary_puid);
                    throw new Exception("i_subscription_status_id is null");
                }
                else
                    i_subscription_status_id = (int) obj ;

                // Update a row
                Cmd.CommandText   = string.Format("update  t_subscriptions set i_subscription_status_id = {0} where bi_primary_puid = {1} and i_subscription_status_id = {2}", (i_subscription_status_id+1)%5 ,  bi_primary_puid, i_subscription_status_id);  
    	        Cmd.CommandTimeout = 300;
                Cmd.ExecuteNonQuery();
            }
            catch(Exception e)
            {
                if(e.Message.Contains("i_subscription_status_id is null"))
                {
                    ;
                }
                else
                {
                    throw;
                }
                
            }
        }




        /// <summary>
        /// GetContent
        /// </summary>
        public SqlDataReader GetContent(SqlConnection Connection, long bi_primary_puid, long bi_offer_id)
        {
            SqlCommand cmd;

            cmd = new SqlCommand();
            cmd.Connection = Connection;
            cmd.CommandType = CommandType.Text;

            string query = string.Format("SELECT top 1 * FROM [t_subscriptions] where bi_primary_puid = {0} and bi_offer_id = {1} ", bi_primary_puid, bi_offer_id);
            
            cmd.CommandText = query;
            SqlDataReader reader = null;
            try
            {
                reader = cmd.ExecuteReader();
            }
            catch(System.Data.SqlClient.SqlException e)
            {
                Log.Warn(e.Message);
                Log.Warn(query);
            }

            return reader;
        }        


        /// <summary>
        /// GetContent
        /// </summary>
        public SqlDataReader GetContent(SqlConnection Connection, long bi_primary_puid, long bi_offer_id, int i_instances, string vc_svc_instance_id, DateTime dt_start_date)
        {
            SqlCommand cmd;

            cmd = new SqlCommand();
            cmd.Connection = Connection;
            cmd.CommandType = CommandType.Text;

            string query = string.Format("SELECT top 1 * FROM [t_subscriptions] where bi_primary_puid = {0} and bi_offer_id = {1} and i_instances = {2} and vc_svc_instance_id = '{3}' and dt_start_date = '{4}'", 
                                                        bi_primary_puid, bi_offer_id, i_instances,  vc_svc_instance_id,  dt_start_date);
            
            cmd.CommandText = query;
            SqlDataReader reader = null;
            try
            {
	        cmd.CommandTimeout = 300;
                reader = cmd.ExecuteReader();
            }
            catch(System.Data.SqlClient.SqlException e)
            {
                Log.Warn(e.Message);
                Log.Warn(query);
            }

            return reader;
        }        

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_title_feature_data.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_title_feature_data : ReportingTable
    {
        public void AddOneRow(SqlConnection conn, int i_title_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            AddOneRow( Cmd,  i_title_id);
        }

        public void AddOneRow(SqlCommand Cmd, int i_title_id)
        {
            string szTitle = string.Concat("Title", i_title_id.ToString());
            
            // Add a row
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_title_feature_data(i_titleId, vc_Name, b_LiveDownloads, b_MultiplayerVersus, b_PremiumOffers, b_XboxSupport, b_Xbox2Support ) ");	
            Cmd.CommandText += string.Format("values({0}, '{1}', 0, 0, 0, 0, 0)",  i_title_id, szTitle);  
            Cmd.ExecuteNonQuery();
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_titles.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing T_titles
    /// </summary>
    public class T_titles : ReportingTable
    {
        public static Report Log = new Report("T_titles");

        /// <summary>
        /// AddOneRow
        /// </summary>
        public int FindNextTitleId(SqlCommand Cmd, byte ti_console_type_id)
        {
            int iTitleID=0;
            
            // Get current max title id in the table
            Cmd.CommandType = CommandType.Text;
            Cmd.CommandText = string.Format("select max(i_title_id) from t_titles");	
            Object obj = Cmd.ExecuteScalar ();

            try
            {
                if(Object.ReferenceEquals(obj.GetType(),DBNull.Value.GetType()) )
                {
                    if(ti_console_type_id == 0)
                       iTitleID = 1297285220;
                    else if(ti_console_type_id == 2)
                       iTitleID = 1297287125;
                    else if(ti_console_type_id == 3)
                       iTitleID = -21615;
                    else
                    {
                        iTitleID=0;
                        Log.Warn("Unkonwn ti_console_type_id");
                        throw new Exception("Stop Test");
                    }
                }
                else
                    iTitleID = (int) obj + 1;
            }
            catch(Exception e)
            {
                if(e.Message  != "Stop Test")
                    throw;
            }

            return iTitleID;
        }
                    
        /// <summary>
        /// AddOneRow
        /// </summary>
        public int FindNextTitleId(SqlConnection conn, byte ti_console_type_id)
        {
            int iTitleID=0;
            
            // Get current max title id in the table
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            
            iTitleID = FindNextTitleId(Cmd,  ti_console_type_id);
            
            return iTitleID;
        }
                    

        /// <summary>
        /// AddOneRow
        /// </summary>
        public int AddOneRow(SqlConnection conn, byte ti_console_type_id)
        {
            int iTitleID=0;
            
            // Get current max title id in the table
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            iTitleID = FindNextTitleId(Cmd,  ti_console_type_id);

            AddOneRow(Cmd,  ti_console_type_id,  iTitleID);

            return iTitleID;
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public int AddOneRow(SqlConnection conn, byte ti_console_type_id, int iTitleID)
        {
            // Get current max title id in the table
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow(Cmd,  ti_console_type_id,  iTitleID);

            return iTitleID;
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public int AddOneRow(SqlCommand Cmd, byte ti_console_type_id, int iTitleID)
        {
            // Add a row
            Cmd.CommandText   = string.Format("insert into t_titles(i_title_id, ti_console_type_id, dt_last_modified, dt_change_datetime) ");	
            Cmd.CommandText += string.Format("values({0}, {1}, '{2}', '{3}')",  iTitleID, ti_console_type_id, DateTime.UtcNow, DateTime.UtcNow);  
            Cmd.ExecuteNonQuery();

            //
            // Add t_title_culture_details
            //
            T_title_culture_details t_title_culture_details =  new T_title_culture_details();
            t_title_culture_details.AddOneRow(Cmd, iTitleID);      

            //
            // Add t_title_feature_data
            //
            T_title_feature_data t_title_feature_data =  new T_title_feature_data();
            t_title_feature_data.AddOneRow(Cmd, iTitleID);

            //
            // Add t_publisher_titles
            //
            T_publisher_titles t_publisher_titles =  new T_publisher_titles();
            t_publisher_titles.AddOneRow(Cmd, iTitleID);

            return iTitleID;
        }


        /// <summary>
        /// GetOneTitle
        /// </summary>
        public int GetOneTitle(SqlConnection conn, byte ti_console_type_id)
        {
            int iTitleID=0;
            
            // Get one title id from the table
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;
            Cmd.CommandText = string.Format("select top 1 i_title_id from t_titles where ti_console_type_id = {0}", ti_console_type_id);	
            Object obj = Cmd.ExecuteScalar ();


            if(obj == null)
            //if(Object.ReferenceEquals(obj.GetType(),DBNull.Value.GetType()) )
            {
                iTitleID = AddOneRow(conn,  ti_console_type_id);
            }
            else
                iTitleID = (int) obj;

            return iTitleID;
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_title_offers.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_title_offers : ReportingTable
    {
        public void AddOneRow(SqlConnection conn, int i_title_id, long bi_offer_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_title_offers(i_title_id, bi_offer_id, dt_Change_datetime) ");	
            Cmd.CommandText += string.Format("values({0}, {1}, '{2}')",  i_title_id, bi_offer_id, DateTime.UtcNow);  
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_title_culture_details.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_title_culture_details : ReportingTable
    {
        public void AddOneRow(SqlConnection conn, int i_title_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            AddOneRow( Cmd,  i_title_id);
}

        public void AddOneRow(SqlCommand Cmd, int i_title_id)
        {
            string szTitle = string.Concat("Title", i_title_id.ToString());
            
            // Add a row
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_title_culture_details( i_title_id, i_culture_id, vc_name, vc_sell_text, vc_publisher, vc_developer, vc_genre, dt_change_datetime ) ");	
            Cmd.CommandText += string.Format("values({0}, 1033, '{1}', '', 'Take-Two Interactive', 'Take-Two Interactive', 'Test','{2}')",  i_title_id, szTitle, DateTime.UtcNow);  
            Cmd.ExecuteNonQuery();
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_spscustomeraccount.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_spscustomeraccount : ReportingTable
    {
        public static Report Log = new Report("T_spscustomeraccount");

        public string	_AccountID;
        public string	_FirstName;
        public string	_LastName;
        public string	_BillToAddressLine1;
        public string	_BillToAddressLine2;
        public string	_BillToAddressLine3;
        public string	_BillToCity;
        public string	_BillToState;
        public string	_BillToPostalCode;
        public string	_BillToCountry;
        public string	_ShipToAddressLine1;
        public string	_ShipToAddressLine2;
        public string	_ShipToAddressLine3;
        public string	_ShipToCity;
        public string	_ShipToState;
        public string	_ShipToPostalCode;
        public string	_ShipToCountry;
        public string	_PhoneCountryCode;
        public string	_PhoneAreaCode;
        public string	_PhoneNumber;
        public string	_PhoneExtension;
        public string	_Email;
        public string	_CompanyName;
        public string	_AccountStatus;
        public byte	_TestFlag;
        public string	_SPGTrackingID;


        /// <summary>
        /// Constructors
        /// </summary>
        public  T_spscustomeraccount()
        {
            _szTableName = "t_spscustomeraccount";
        }

        public  T_spscustomeraccount(string	AccountID,
                                                                string	FirstName,
                                                                string	LastName,
                                                                string	BillToAddressLine1,
                                                                string	BillToAddressLine2,
                                                                string	BillToAddressLine3,
                                                                string	BillToCity,
                                                                string	BillToState,
                                                                string	BillToPostalCode,
                                                                string	BillToCountry,
                                                                string	ShipToAddressLine1,
                                                                string	ShipToAddressLine2,
                                                                string	ShipToAddressLine3,
                                                                string	ShipToCity,
                                                                string	ShipToState,
                                                                string	ShipToPostalCode,
                                                                string	ShipToCountry,
                                                                string	PhoneCountryCode,
                                                                string	PhoneAreaCode,
                                                                string	PhoneNumber,
                                                                string	PhoneExtension,
                                                                string	Email,
                                                                string	CompanyName,
                                                                string	AccountStatus,
                                                                byte	TestFlag,
                                                                string	SPGTrackingID
        )
        {
            _szTableName = "t_spscustomeraccount";
            
            _AccountID =	AccountID;
            _FirstName =	FirstName;
            _LastName =	LastName;
            _BillToAddressLine1 =	BillToAddressLine1;
            _BillToAddressLine2 =	BillToAddressLine2;
            _BillToAddressLine3 =	BillToAddressLine3;
            _BillToCity =	BillToCity;
            _BillToState =	BillToState;
            _BillToPostalCode =	BillToPostalCode;
            _BillToCountry =	BillToCountry;
            _ShipToAddressLine1 =	ShipToAddressLine1;
            _ShipToAddressLine2 =	ShipToAddressLine2;
            _ShipToAddressLine3 =	ShipToAddressLine3;
            _ShipToCity =	ShipToCity;
            _ShipToState =	ShipToState;
            _ShipToPostalCode =	ShipToPostalCode;
            _ShipToCountry =	ShipToCountry;
            _PhoneCountryCode =	PhoneCountryCode;
            _PhoneAreaCode =	PhoneAreaCode;
            _PhoneNumber =	PhoneNumber;
            _PhoneExtension =	PhoneExtension;
            _Email =	Email;
            _CompanyName =	CompanyName;
            _AccountStatus =	AccountStatus;
            _TestFlag =	TestFlag;
            _SPGTrackingID =	SPGTrackingID;            
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn)
        {
            // Get current max user id in the table
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow(Cmd);
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd)
        {
            // Add a row
            Cmd.CommandType = CommandType.Text;

            if(_BillToAddressLine1 == null)
            {
                Cmd.CommandText   = string.Format("insert into t_spscustomeraccount(AccountID,FirstName,LastName,BillToAddressLine2,BillToAddressLine3,BillToCity,BillToState,BillToPostalCode,BillToCountry,ShipToAddressLine1,ShipToAddressLine2,ShipToAddressLine3,ShipToCity,ShipToState,ShipToPostalCode,ShipToCountry,PhoneCountryCode,PhoneAreaCode,PhoneNumber,PhoneExtension,Email,CompanyName,AccountStatus,TestFlag,SPGTrackingID) ");
                Cmd.CommandText += string.Format(" values('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}', '{10}', '{11}', '{12}', '{13}', '{14}', '{15}', '{16}', '{17}', '{18}', '{19}','{20}', '{21}', '{22}', {23}, '{24}')", 
                                                                    _AccountID,
                                                                    _FirstName,
                                                                    _LastName,
                                                                    _BillToAddressLine2,
                                                                    _BillToAddressLine3,
                                                                    _BillToCity,
                                                                    _BillToState,
                                                                    _BillToPostalCode,
                                                                    _BillToCountry,
                                                                    _ShipToAddressLine1,
                                                                    _ShipToAddressLine2,
                                                                    _ShipToAddressLine3,
                                                                    _ShipToCity,
                                                                    _ShipToState,
                                                                    _ShipToPostalCode,
                                                                    _ShipToCountry,
                                                                    _PhoneCountryCode,
                                                                    _PhoneAreaCode,
                                                                    _PhoneNumber,
                                                                    _PhoneExtension,
                                                                    _Email,
                                                                    _CompanyName,
                                                                    _AccountStatus,
                                                                    _TestFlag,
                                                                    _SPGTrackingID
                                                                    );  
            }                                                        
            else
            {
                Cmd.CommandText   = string.Format("insert into t_spscustomeraccount ");
                Cmd.CommandText += string.Format(" values('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}', '{10}', '{11}', '{12}', '{13}', '{14}', '{15}', '{16}', '{17}', '{18}', '{19}','{20}', '{21}', '{22}', '{23}', {24}, '{25}')", 
                                                                    _AccountID,
                                                                    _FirstName,
                                                                    _LastName,
                                                                    _BillToAddressLine1,
                                                                    _BillToAddressLine2,
                                                                    _BillToAddressLine3,
                                                                    _BillToCity,
                                                                    _BillToState,
                                                                    _BillToPostalCode,
                                                                    _BillToCountry,
                                                                    _ShipToAddressLine1,
                                                                    _ShipToAddressLine2,
                                                                    _ShipToAddressLine3,
                                                                    _ShipToCity,
                                                                    _ShipToState,
                                                                    _ShipToPostalCode,
                                                                    _ShipToCountry,
                                                                    _PhoneCountryCode,
                                                                    _PhoneAreaCode,
                                                                    _PhoneNumber,
                                                                    _PhoneExtension,
                                                                    _Email,
                                                                    _CompanyName,
                                                                    _AccountStatus,
                                                                    _TestFlag,
                                                                    _SPGTrackingID
                                                                    );  
            }                                                        

	     Cmd.CommandTimeout = 300;
            Cmd.ExecuteNonQuery();
        }

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_rdb_usagestore_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{

    public class t_rdb_usagestore_fact : ReportingTable
    {
        public string i_date;
        public string i_time;
        public string bi_user_puid;
        public string ui_media_instance_id;
        public string i_attribute_id;
        public string i_attribute_value;
        public DateRange dt_date_entry;
        public string i_source_id;


        // Constructor
        public t_rdb_usagestore_fact()
        {
            _szTableName = "t_rdb_usagestore_fact";
        }
      

        // Add a row to the table
        public string AddOneRow(string iDate, string iTime, string UserPuid, string MediaInstanceId,
                    string AttributeId, string AttributeValue,DateRange DateEntry, string SourceId)
        {
            string sqlStatement = string.Format("INSERT into {0} (dt_when , bi_user_puid, ui_media_instance_id, i_attribute_id, i_attribute_value, dt_date_entry, i_source_id)", _szTableName);
            sqlStatement += string.Format(" VALUES ({0}, {1}, {2}, '{3}', {4}, {5}, '{6}', {7} )", iDate, iTime, UserPuid, MediaInstanceId, 
                    AttributeId, AttributeValue, DateEntry.dateMax, SourceId);

            return sqlStatement;
        }



    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_users.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_users : ReportingTable
    {
        public static Report Log = new Report("T_users");

        public long _bi_user_puid;
        public byte _f_partner_opt_in;
        public string _vc_gamertag;
        public DateTime _dt_birthdate;
        public string _vc_billing_account_id;


        /// <summary>
        /// Constructors
        /// </summary>
        public  T_users()
        {
            _bi_user_puid = 0;
            _szTableName = "t_users";
        }

        public  T_users(long bi_user_puid, byte f_partner_opt_in, string vc_gamertag, DateTime dt_birthdate, string vc_billing_account_id)
        {
            _szTableName = "t_users";
            _bi_user_puid = bi_user_puid;
            _f_partner_opt_in = f_partner_opt_in;
            _vc_gamertag = vc_gamertag;
            _dt_birthdate = dt_birthdate;
            _vc_billing_account_id = vc_billing_account_id;
            
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public long AddOneRow(SqlConnection conn)
        {
            // Get current max user id in the table
            if(_bi_user_puid == 0)
            {
                try
                {
                    _bi_user_puid = GetMaxUserPUID(conn)+1;
                }
                catch(Exception e)
                {
                    if(e.Message.Contains("No data at t_users"))
                    {
                        _bi_user_puid = 0x0009F00000000000;
                    }
                    else
                    {
                        throw;
                    }
                }

                // Add a row
                AddOneRow(conn, _bi_user_puid);
            }
            else
            {
                SqlCommand Cmd = new SqlCommand();
                Cmd.Connection = conn;

                AddOneRow(Cmd);
            }
            
            return _bi_user_puid;
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd)
        {
            long biMachinePUID;
            
            // Add a row
            biMachinePUID = _bi_user_puid + 0x000F000000000000;

            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_users(bi_user_puid, bi_owner_puid, bi_machine_puid, ti_country_id, ti_created_account_type, ti_account_type, i_language_id, i_culture_id, f_partner_opt_in, vc_gamertag, dt_birthdate, vc_billing_account_id) ");
            Cmd.CommandText += string.Format("values({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, '{9}', '{10}', '{11}')", 
                                                                    _bi_user_puid,  _bi_user_puid, biMachinePUID, 103, 0, 0, 1, 1033, _f_partner_opt_in, _vc_gamertag, _dt_birthdate, _vc_billing_account_id);  
	     Cmd.CommandTimeout = 300;
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_user_puid)
        {
            long biMachinePUID;
            
            // Add a row
            biMachinePUID = bi_user_puid + 0x000F000000000000;

            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow( Cmd,  bi_user_puid);
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd, long bi_user_puid)
        {
            long biMachinePUID;
            
            // Add a row
            biMachinePUID = bi_user_puid + 0x000F000000000000;

            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_users(bi_user_puid, bi_owner_puid, bi_machine_puid, ti_country_id, ti_created_account_type, ti_account_type, i_language_id, i_culture_id) ");
            Cmd.CommandText += string.Format("values({0}, {1}, {2}, 103, 0, 0, 1, 1033)", bi_user_puid,  bi_user_puid, biMachinePUID);  
	     Cmd.CommandTimeout = 300;
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_user_puid, byte ti_created_account_type)
        {
            long biMachinePUID;
            
            // Add a row
            biMachinePUID = bi_user_puid + 0x000F000000000000;

            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow( Cmd,  bi_user_puid, ti_created_account_type);
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd, long bi_user_puid, byte ti_created_account_type)
        {
            long biMachinePUID;
            
            // Add a row
            biMachinePUID = bi_user_puid + 0x000F000000000000;

            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_users(bi_user_puid, bi_owner_puid, bi_machine_puid, ti_country_id, ti_created_account_type, ti_account_type, i_language_id, i_culture_id) ");
            Cmd.CommandText += string.Format("values({0}, {1}, {2}, 103, {3}, 0, 1, 1033)", bi_user_puid,  bi_user_puid, biMachinePUID, ti_created_account_type);  
	     Cmd.CommandTimeout = 300;
            Cmd.ExecuteNonQuery();
        }


        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_user_puid, DateTime dt_birthdate, DateTime dt_created, int i_friend_list_len)
        {
            long biMachinePUID;
            
            // Add a row
            biMachinePUID = bi_user_puid + 0x000F000000000000;

            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow( Cmd,  bi_user_puid, dt_birthdate,  dt_created,  i_friend_list_len);
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd, long bi_user_puid, DateTime dt_birthdate, DateTime dt_created, int i_friend_list_len)
        {
            long biMachinePUID;
            
            // Add a row
            biMachinePUID = bi_user_puid + 0x000F000000000000;

            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_users(bi_user_puid, bi_owner_puid, bi_machine_puid, ti_country_id, ti_created_account_type, ti_account_type, i_language_id, i_culture_id, dt_birthdate,  dt_created,  i_friend_list_len) ");
            Cmd.CommandText += string.Format("values({0}, {1}, {2}, 103, 2, 0, 1, 1033, '{3}', '{4}',{5} )", bi_user_puid,  bi_user_puid, biMachinePUID,  dt_birthdate,  dt_created,  i_friend_list_len);  
	     Cmd.CommandTimeout = 300;
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// AddMultipleRowsInTrans
        /// </summary>
        public void AddMultipleRowsInTrans(SqlConnection conn, long bi_user_puid, int iNum)
        {
            long biMachinePUID;

            SqlCommand Cmd = conn.CreateCommand();
            SqlTransaction transaction;

            transaction = conn.BeginTransaction("Transaction");

            Cmd.Connection = conn;
            Cmd.Transaction = transaction;

            for(int ii=0; ii<iNum; ii++)
            {
                // Add a row
                biMachinePUID = bi_user_puid + 0x000F000000000000;

                Cmd.CommandType = CommandType.Text;
                Cmd.CommandText   = string.Format("insert into t_users(bi_user_puid, bi_owner_puid, bi_machine_puid, ti_country_id, ti_created_account_type, ti_account_type, i_language_id, i_culture_id) ");
                Cmd.CommandText += string.Format("values({0}, {1}, {2}, 103, 0, 0, 1, 1033)", bi_user_puid,  bi_user_puid, biMachinePUID);  
	        Cmd.CommandTimeout = 300;
                Cmd.ExecuteNonQuery();

                bi_user_puid++;
            }

            transaction.Commit();

        }

        /// <summary>
        /// AddMultipleRowsInTrans
        /// </summary>
        public void UpdateMultipleRowsInTrans(SqlConnection conn, long bi_user_puid, int iNum)
        {
            SqlCommand Cmd = conn.CreateCommand();
            SqlTransaction transaction;

            transaction = conn.BeginTransaction("Transaction");

            Cmd.Connection = conn;
            Cmd.Transaction = transaction;

            for(int ii=0; ii<iNum; ii++)
            {
                // Update a row
                Cmd.CommandType = CommandType.Text;
                Cmd.CommandText   = string.Format("update  t_users set i_friend_list_ver = {0} where bi_user_puid = {1} ", iNum,  bi_user_puid);  
	        Cmd.CommandTimeout = 300;
                Cmd.ExecuteNonQuery();

                bi_user_puid = FindNextUserID(conn, bi_user_puid);
            }

            transaction.Commit();

        }

        /// <summary>
        /// UpdateOneRow
        /// This is a kind of meaningless update only to trigger update flag for replication
        /// </summary>
        public void UpdateOneRow(SqlConnection conn, long bi_user_puid)
        {
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            UpdateOneRow( Cmd,  bi_user_puid);
        }

        /// <summary>
        /// UpdateOneRow
        /// This is a kind of meaningless update only to trigger update flag for replication
        /// </summary>
        public void UpdateOneRow(SqlCommand Cmd, long bi_user_puid)
        {
            Cmd.CommandType = CommandType.Text;

            // Get i_friend_list_ver
            int i_friend_list_ver;
            
            Cmd.CommandText = string.Format("select i_friend_list_ver from t_users where bi_user_puid  = {0} ",  bi_user_puid);  
            Object obj = Cmd.ExecuteScalar ();

            try
            {
                if(obj == null)
                {
                    Log.Warn("i_friend_list_ver is null for {0}.", bi_user_puid);
                    throw new Exception("i_friend_list_ver is null");
                }
                else
                    i_friend_list_ver = (int) obj ;

                // Update a row
                Cmd.CommandText   = string.Format("update  t_users set i_friend_list_ver = {0}, dt_Change_datetime = '{1}' where bi_user_puid = {2} ", i_friend_list_ver+1,  DateTime.UtcNow,  bi_user_puid);  
    	     Cmd.CommandTimeout = 300;
                Cmd.ExecuteNonQuery();
            }
            catch(Exception e)
            {
                if(e.Message.Contains("i_friend_list_ver is null"))
                {
                    ;
                }
                else
                {
                    throw;
                }
                
            }
            
        }

        /// <summary>
        /// GetContent
        /// </summary>
        public virtual SqlDataReader GetContent(SqlConnection Connection, long bi_user_puid)
        {
            SqlDataReader reader = GetContent( Connection,  bi_user_puid, "t_users");

            return reader;
        }        
        
        /// <summary>
        /// GetContent
        /// szTable should be "t_users" or "t_users_rt"
        /// </summary>
        protected virtual SqlDataReader GetContent(SqlConnection Connection, long bi_user_puid, string szTable)
        {
            SqlCommand cmd;

            cmd = new SqlCommand();
            cmd.Connection = Connection;
            cmd.CommandType = CommandType.Text;

            string query = string.Format("SELECT top 1 * FROM {0} where bi_user_puid = {1}", szTable, bi_user_puid);
            
            cmd.CommandText = query;
            SqlDataReader reader = null;
            try
            {
	        cmd.CommandTimeout = 300;
                reader = cmd.ExecuteReader();
            }
            catch(System.Data.SqlClient.SqlException e)
            {
                Log.Warn(e.Message);
                Log.Warn(query);
            }

            return reader;
        }        
        
    }

    /// <summary>
    /// A class representing individual database tables
    /// </summary>
    public class T_users_rt : T_users
    {
        /// <summary>
        /// GetContent
        /// </summary>
        public override SqlDataReader GetContent(SqlConnection Connection, long bi_user_puid)
        {
            SqlDataReader reader = GetContent( Connection,  bi_user_puid, "t_users_rt");

            return reader;
        }        
        

        /// <summary>
        /// Constructors
        /// </summary>
        public  T_users_rt()
        {
            _bi_user_puid = 0;
            _szTableName = "t_users_rt";
        }

        public  T_users_rt(long bi_user_puid, byte f_partner_opt_in, string vc_gamertag, DateTime dt_birthdate, string vc_billing_account_id)
        {
            _szTableName = "t_users_rt";
            _bi_user_puid = bi_user_puid;
            _f_partner_opt_in = f_partner_opt_in;
            _vc_gamertag = vc_gamertag;
            _dt_birthdate = dt_birthdate;
            _vc_billing_account_id = vc_billing_account_id;
            
        }

    }    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_user_per_client_type_data_weekly.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing T_user_per_client_type_data_weekly table
    /// </summary>
    public class T_user_per_client_type_data_weekly : ReportingTable
    {
        public static Report Log = new Report("T_user_per_client_type_data_weekly");

        public  T_user_per_client_type_data_weekly()
        {
            _szTableName = "t_user_per_client_type_data_weekly";
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_user_puid, byte ti_service_type, byte ti_client_type, DateTime dt_first_signin, DateTime dt_last_signin, DateTime dt_change_datetime, DateTime dt_archive_datetime)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow(Cmd,  bi_user_puid,  ti_service_type,  ti_client_type,  dt_first_signin,  dt_last_signin,    dt_change_datetime,  dt_archive_datetime);
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd, long bi_user_puid, byte ti_service_type, byte ti_client_type, DateTime dt_first_signin, DateTime dt_last_signin, DateTime dt_change_datetime, DateTime dt_archive_datetime)
        {
            // Add a row
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_user_per_client_type_data_weekly(bi_user_puid,  ti_service_type,  ti_client_type,  dt_first_signin,  dt_last_signin,   dt_change_datetime,  dt_archive_datetime) ");	
            Cmd.CommandText += string.Format("values({0}, {1}, {2}, '{3}', '{4}', '{5}', '{6}')",  bi_user_puid,  ti_service_type,  ti_client_type,  dt_first_signin,  dt_last_signin,    dt_change_datetime,  dt_archive_datetime);  
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_user_settings.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing T_user_settings table
    /// </summary>
    public class T_user_settings : ReportingTable
    {
        public static Report Log = new Report("T_user_settings");

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_user_puid, int i_title_id, int i_setting_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_user_settings(bi_user_puid, i_title_id, i_setting_id) ");	
            Cmd.CommandText += string.Format("values({0}, {1}, {2})",  bi_user_puid,  i_title_id, i_setting_id);  
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// GetContent
        /// </summary>
        public SqlDataReader GetContent(SqlConnection Connection, long bi_user_puid, int i_title_id, int i_setting_id)
        {
            SqlCommand cmd;

            cmd = new SqlCommand();
            cmd.Connection = Connection;
            cmd.CommandType = CommandType.Text;

            string query = string.Format("SELECT top 1 * FROM [t_user_settings] where bi_user_puid = {0} and i_title_id = {1} and i_setting_id = {2}", 
                                                        bi_user_puid, i_title_id, i_setting_id);
            
            cmd.CommandText = query;
            SqlDataReader reader = null;
            try
            {
                reader = cmd.ExecuteReader();
            }
            catch(System.Data.SqlClient.SqlException e)
            {
                Log.Warn(e.Message);
                Log.Warn(query);
            }

            return reader;
        }        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_user_musicnet_accounts.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing T_user_musicnet_accounts table
    /// </summary>
    public class T_user_musicnet_accounts : ReportingTable
    {
        public static Report Log = new Report("T_user_musicnet_accounts");

        public  T_user_musicnet_accounts()
        {
            _szTableName = "t_user_musicnet_accounts";
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_user_puid)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow( Cmd,  bi_user_puid);
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd, long bi_user_puid)
        {
            // Add a row
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_user_musicnet_accounts(bi_user_puid, dt_change_datetime) ");	
            Cmd.CommandText += string.Format("values({0}, '{1}')",  bi_user_puid,  DateTime.UtcNow);  
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// UpdateOneRow
        /// This is a kind of meaningless update only to trigger update flag for replication
        /// </summary>
        public void UpdateOneRow(SqlConnection conn, long bi_user_puid)
        {
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            UpdateOneRow( Cmd,  bi_user_puid);
        }

        /// <summary>
        /// UpdateOneRow
        /// This is a kind of meaningless update only to trigger update flag for replication
        /// </summary>
        public void UpdateOneRow(SqlCommand Cmd, long bi_user_puid)
        {
            Cmd.CommandType = CommandType.Text;

            // Update a row
            Cmd.CommandText   = string.Format("update  t_user_musicnet_accounts set dt_change_datetime = '{0}' where bi_user_puid = {1}", DateTime.UtcNow,  bi_user_puid);    
            Cmd.ExecuteNonQuery();
        }


        /// <summary>
        /// GetContent
        /// </summary>
        public SqlDataReader GetContent(SqlConnection Connection, long bi_user_puid)
        {
            SqlCommand cmd;

            cmd = new SqlCommand();
            cmd.Connection = Connection;
            cmd.CommandType = CommandType.Text;

            string query = string.Format("SELECT top 1 * FROM [t_user_musicnet_accounts] where bi_user_puid = {0} ", bi_user_puid);
            
            cmd.CommandText = query;
            SqlDataReader reader = null;
            try
            {
                reader = cmd.ExecuteReader();
            }
            catch(System.Data.SqlClient.SqlException e)
            {
                Log.Warn(e.Message);
                Log.Warn(query);
            }

            return reader;
        }        



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_user_per_client_type_data.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing T_user_per_client_type_data table
    /// </summary>
    public class T_user_per_client_type_data : ReportingTable
    {
        public static Report Log = new Report("T_user_per_client_type_data");

        public  T_user_per_client_type_data()
        {
            _szTableName = "T_user_per_client_type_data";
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_user_puid, byte ti_service_type, byte ti_client_type, DateTime dt_first_signin, DateTime dt_last_signin, DateTime dt_change_datetime)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow(Cmd,  bi_user_puid,  ti_service_type,  ti_client_type,  dt_first_signin,  dt_last_signin,    dt_change_datetime);
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd, long bi_user_puid, byte ti_service_type, byte ti_client_type, DateTime dt_first_signin, DateTime dt_last_signin, DateTime dt_change_datetime)
        {
            // Add a row
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into T_user_per_client_type_data(bi_user_puid,  ti_service_type,  ti_client_type,  dt_first_signin,  dt_last_signin,   dt_change_datetime) ");	
            Cmd.CommandText += string.Format("values({0}, {1}, {2}, '{3}', '{4}', '{5}')",  bi_user_puid,  ti_service_type,  ti_client_type,  dt_first_signin,  dt_last_signin,    dt_change_datetime);  
            Cmd.ExecuteNonQuery();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_usagestore_adsupported_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{

    public class t_usagestore_adsupported_fact : StagingTable
    {
        public DateRange dt_when;
        public string bi_user_puid;
        public string ui_media_instance_id;
        public string vc_ad_id;
        public string i_provider_id;
        public string i_attribute_id;
        public string i_attribute_value;
        public DateRange dt_date_entry;
        public string i_source_id;


        // Constructor
        public t_usagestore_adsupported_fact()
        {
            _szTableName = "t_usagestore_adsupported_fact";
            _szReplicationProvider ="";
        }

        // Constructor for replication table
        public t_usagestore_adsupported_fact(string ReplicationProvider)
        {
            _szTableName = "t_usagestore_adsupported_fact_" + ReplicationProvider;
            _szReplicationProvider = ReplicationProvider;
        }

        // Add a row to the table
        public string AddOneRow(DateRange dtWhen, string UserPuid, string MediaInstanceId,
                    string AdId, string ProviderId, string AttributeValue,
                    DateRange DateEntry, string SourceId)
        {
            string sqlStatement = string.Format("INSERT into {0} (dt_when , bi_user_puid, ui_media_instance_id, vc_ad_id, i_provider_id, i_attribute_value, dt_date_entry, i_source_id)", _szTableName);
            sqlStatement += string.Format(" VALUES ('{0}', {1}, '{2}', '{3}', {4}, {5}, '{6}', {7} )", dtWhen.dateMax, UserPuid, MediaInstanceId, AdId,
                ProviderId, AttributeValue, DateEntry.dateMin, SourceId);


            return sqlStatement;
        }



    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_usagestore_fact.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{

    public class t_usagestore_fact : StagingTable
    {
        public DateRange dt_when;
        public string bi_user_puid;
        public string ui_media_instance_id;
        public string i_attribute_id;
        public string i_attribute_value;
        public DateRange dt_date_entry;
        public string i_source_id;


        // Constructor
        public t_usagestore_fact()
        {
            _szTableName = "t_usagestore_fact";
            _szReplicationProvider ="";
        }

        // Constructor for replication table
        public t_usagestore_fact(string ReplicationProvider)
        {
            _szTableName = "t_usagestore_fact_" + ReplicationProvider;
            _szReplicationProvider = ReplicationProvider;
        }

        // Add a row to the table
        public string AddOneRow(DateRange dtWhen, string UserPuid, string MediaInstanceId,
                    string AttributeId, string AttributeValue,DateRange DateEntry, string SourceId)
        {
            string sqlStatement = string.Format("INSERT into {0} (dt_when , bi_user_puid, ui_media_instance_id, i_attribute_id, i_attribute_value, dt_date_entry, i_source_id)", _szTableName);
            sqlStatement += string.Format(" VALUES ('{0}', {1}, '{2}', {3}, {4}, '{5}', {6} )", dtWhen.dateMin, UserPuid, MediaInstanceId, 
                    AttributeId, AttributeValue, DateEntry.dateMax, SourceId);

            return sqlStatement;
        }



    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Verifications\Verify_OlapReportData.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.OleDb;
using System.Text;
using System.Data;
using System.Xml;

// STF
using ServerTestFramework.STFLive.Database;
using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// ReportingData object to submit queries to OlapDB for reports
    /// </summary>
    public class OlapReportData : ReportingData
    {        
        /// <summary>
        /// Data source: UODB, SSIS, ReportingDB, etc
        /// </summary>        
        private OLAPDB m_Source;
        public override ReportingDatabase Source
        {
            set { m_Source = (OLAPDB)value; }
            get { return m_Source; }
        }

        /// <summary>
        ///  Get ReportingData object type
        /// </summary>        
        public override ReportingDataType ObjectType
        {
            get { return ReportingDataType.OlapReportData; }
        }

        /// <summary>
        /// Get internal data type (Queries, Raw, Counts)
        /// </summary>
        private InternalDataType m_DataType;
        public override InternalDataType DataType
        {
            get { return m_DataType; }
            set { m_DataType = value; }
        }


        /// <summary>
        /// List of queries
        /// </summary>
        private Hashtable m_Queries;
        public override Hashtable Queries
        {
            set { m_Queries = value; }
            get { return m_Queries; }
        }

        /// <summary>
        /// Raw object data (Caller must know how to cast the data)
        /// </summary>
        private Hashtable m_RawData;
        public override object RawData
        {
            set { m_RawData = (Hashtable)value; }
            get { return m_RawData; }
        }

        /// <summary>
        /// Report that this data object maps to
        /// </summary>
        private XBLReports m_ReportType;
        public XBLReports ReportType
        {
            get { return m_ReportType; }    
        }

       
        /// <summary>
        /// Run a query in OLAPDB to obtain the raw data
        /// </summary>
        /// <returns></returns>
        public override string RunDebugQuery()
        {
            return base.RunDebugQuery();
        }


   
        /// <summary>
        /// Initialize ReportingData object.
        /// ** In the future this should be modified to generate dynamic data **
        /// </summary>
        public void InitializeDataObject(XBLReports ReportType)
        {                        
            // Flag internal data as a set of queries
            m_DataType =  ReportingData.InternalDataType.Query;
            
            // Set report type
            m_ReportType = ReportType;

            // Initialize the Data Object based on Reports
            switch (ReportType)
            {
                case XBLReports.MarketplaceDownloadSummary:
                    // Call function to load queries
                    m_Queries = GetReportDataQueries("Test_Script_MarketplaceDownloadSummary.xml");                        

                    break;
                case XBLReports.MarketplaceScorecard:
                    // Call function to load querie:
                    m_Queries = GetReportDataQueries("Test_Script_MarketplaceDownloadSummary.xml");                        
                    break;
                // ADD MORE CASES
                default:
                    throw new Exception("Error: OlapReportData object Report type not specified");                 
            }
            
        }// InitializeDataObject()


        /// <summary>
        /// Parse the Report Test Script and extract all OLAP queries with their respective
        /// report section and test case.
        /// </summary>
        /// <param name="TestScriptFileName">Report Test script file</param>
        /// <returns>Hashtable in the form of (Key)ReportQueryNumber (Value)|ReportSectionNumber|TestCaseNumber|Query|</returns>
        private Hashtable GetReportDataQueries(string TestScriptFileName)
        {
            XmlReader reader; XmlDocument doc;
            XmlNodeList genericList, testCaseList, testStepList;
            Hashtable result = null;
            string[] queryInfo;
            int queryNumber = 0;
            
            // Open the XML File and parse it
            reader = XmlReader.Create(TestScriptFileName);
            doc = new XmlDocument();
            doc.Load(reader);

            // Get Report Sections
            genericList = doc.GetElementsByTagName("ReportSection");
            if (genericList.Count <= 0)
            {
                throw new Exception("Error: No valid sections found in report test script");
            }
            
            // Initialize Hashtable based on number of report sections
            result = new Hashtable(genericList.Count);

            // Populate result with queries
            // Go through each section
            foreach (XmlNode section in genericList)
            {                
                testCaseList = section.ChildNodes;
                // Go through each test case
                foreach (XmlNode testCase in testCaseList)
                {
                    testStepList = testCase.ChildNodes;
                    queryInfo = new string[3];
                    // Go through each test step
                    foreach (XmlNode testStep in testStepList)
                    {                        
                        // Skip other test steps
                        if (testStep.Name != "OlapQuery")
                        {
                            continue;
                        }
                        // Get Section
                        queryInfo[0] = section.Attributes.GetNamedItem("id").Value;
                        // Get Test Case #
                        queryInfo[1] = testCase.Attributes.GetNamedItem("id").Value;
                        // Get Query
                        queryInfo[2] = testStep.InnerText;                        
                        result.Add(queryNumber, queryInfo);
                        queryNumber++;
                        break;
                    }
                }
            }
            // Close objects
            reader.Close();
            reader = null;
            doc = null;

            return result;
        }// GetReportDataQueries()


     
    }//class OlapReportData

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Tables\t_xmsg_user_titles.cs ===
using System;
using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting.Tables
{
    /// <summary>
    /// A class representing T_xmsg_user_titles table
    /// </summary>
    public class T_xmsg_user_titles : ReportingTable
    {
        public static Report Log = new Report("T_xmsg_user_titles");

        public  T_xmsg_user_titles()
        {
            _szTableName = "t_xmsg_user_titles";
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_user_puid, int i_title_id, int i_creds)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow( Cmd,  bi_user_puid,  i_title_id, i_creds);
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd, long bi_user_puid, int i_title_id, int i_creds)
        {
            // Add a row
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_xmsg_user_titles(bi_user_puid, i_title_id, dt_last_logon, i_creds) ");	
            Cmd.CommandText += string.Format("values({0}, {1}, '{2}', {3})",  bi_user_puid,  i_title_id, DateTime.UtcNow, i_creds);  
	     Cmd.CommandTimeout = 300;
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_user_puid, int i_title_id)
        {
            // Add a row
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            AddOneRow( Cmd,  bi_user_puid,  i_title_id);
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlCommand Cmd, long bi_user_puid, int i_title_id)
        {
            // Add a row
            Cmd.CommandType = CommandType.Text;

            Cmd.CommandText   = string.Format("insert into t_xmsg_user_titles(bi_user_puid, i_title_id, dt_last_logon) ");	
            Cmd.CommandText += string.Format("values({0}, {1}, '{2}')",  bi_user_puid,  i_title_id, DateTime.UtcNow);  
	     Cmd.CommandTimeout = 300;
            Cmd.ExecuteNonQuery();
        }

        /// <summary>
        /// AddOneRow
        /// </summary>
        public void AddOneRow(SqlConnection conn, long bi_user_puid)
        {
            T_titles t_titles = new T_titles();
            int i_title_id;
            
            i_title_id = t_titles.GetOneTitle(conn, 2);

            AddOneRow(conn,  bi_user_puid,  i_title_id);
        }

        /// <summary>
        /// UpdateOneRow
        /// This is a kind of meaningless update only to trigger update flag for replication
        /// </summary>
        public void UpdateOneRow(SqlConnection conn, long bi_user_puid)
        {
            SqlCommand Cmd = new SqlCommand();
            Cmd.Connection = conn;

            UpdateOneRow( Cmd,  bi_user_puid);
        }

        /// <summary>
        /// UpdateOneRow
        /// This is a kind of meaningless update only to trigger update flag for replication
        /// </summary>
        public void UpdateOneRow(SqlCommand Cmd, long bi_user_puid)
        {
            Cmd.CommandType = CommandType.Text;

            // Get i_subscription_status_id
            int i_achievements;
            
            try
            {
                Cmd.CommandText = string.Format("select top 1 i_achievements from t_xmsg_user_titles where bi_user_puid  = {0}",  bi_user_puid);  
                Object obj = Cmd.ExecuteScalar ();

                if(obj == null)
                {
                    Log.Warn("i_achievements is null for {0}.", bi_user_puid);
                    throw new Exception("i_achievements is null");
                }
                else
                    i_achievements = (int) obj ;

                // Update a row
                Cmd.CommandText   = string.Format("update  t_xmsg_user_titles set i_achievements = {0} where bi_user_puid = {1} and i_achievements = {2}", i_achievements+1,  bi_user_puid, i_achievements);  
    	     Cmd.CommandTimeout = 300;
                Cmd.ExecuteNonQuery();
            }
            catch(Exception e)
            {
                if(e.Message.Contains("i_achievements is null"))
                {
                    ;
                }
                else
                {
                    throw;
                }
                
            }
        }


        /// <summary>
        /// GetContent
        /// </summary>
        public SqlDataReader GetContent(SqlConnection Connection, long bi_user_puid, int i_title_id)
        {
            SqlCommand cmd;

            cmd = new SqlCommand();
            cmd.Connection = Connection;
            cmd.CommandType = CommandType.Text;

            string query = string.Format("SELECT top 1 * FROM [t_xmsg_user_titles] where bi_user_puid = {0} and i_title_id = {1} ", bi_user_puid, i_title_id);
            
            cmd.CommandText = query;
            SqlDataReader reader = null;
            try
            {
	        cmd.CommandTimeout = 300;
                reader = cmd.ExecuteReader();
            }
            catch(System.Data.SqlClient.SqlException e)
            {
                Log.Warn(e.Message);
                Log.Warn(query);
            }

            return reader;
        }        



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLCreateCertificate.cs ===
using xonline.common.service;
using xonline.common.config;

using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Database;

using xonline.common.protocol;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLCreateCertificate: XRLPayload<CreateCertificateRequest, CreateCertificateResponse>
    {
        private static ulong cachedMachine=0;

        /// <summary>
        /// Perform the create request, creating a machine if required
        /// </summary>
        /// <returns>True if the request is successful, False otherwise.</returns>
        public override bool Execute()
        {
            if (cachedMachine==0)
            {
                XmacsClient xmacs=new XmacsClient(new AuthContext(AuthContext.ClientTypes.Xenon));
                xmacs.SignInXmacs();
                cachedMachine=xmacs.GetMachinePuid();
            }

            return Execute(cachedMachine);
        }

        /// <summary>
        /// Perform the acquire request using the provided machine puid.
        /// </summary>
        /// <param name="machinePuid">The machine to perform the request as</param>
        /// <returns>True if the request is successful, False otherwise.</returns>
        public bool Execute(ulong machinePuid)
        {
            cachedMachine = machinePuid;

            return Execute(Global.XEnv.GetVirtualInterface(Interface.xsig));
        }

        /// <summary>
        /// Populate the SGInfo slot with the appropriate information from the request
        /// </summary>
        /// <param name="slot">The slot to populate</param>
        /// <remarks>
        /// The machine puid that is created or passed in is cached and is 
        /// not set into the SG object unless this method is called so if 
        /// ManualSlotSetup is true, then the values in the slot will not
        /// be overridden.
        /// </remarks>
        public override void PopulateSlot(ref CSGInfo slot)
        {
            slot.userPuid0 = Request.userPuid;
            slot.machinePuid = cachedMachine;

            slot.SetClientType(CSGInfo.ClientInfo.ToClientType(slot.machinePuid));

            base.PopulateSlot(ref slot);
        }

        /// <summary>
        /// Sets the appropriate services on the request.  For this request we only 
        /// need the Signature service.
        /// </summary>
        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(XOService.Signature_Server);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Verifications\Verify_DailyProcessing_GameUsage.cs ===
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;


using ServerTestFramework.STFLive.Database;
namespace ServerTestFramework.STFLive.Reporting
{
    /// <summary>
    /// 
    /// </summary>
    public class DailyProcessing_GameUsage_Verification : ReportingVerification
    {
        public static Report Log = new Report("DailyProcessing_GameUsage_Verification");
        
        protected ReportingDB _rdb;        
        protected DateTime _dtStart;
        protected DateTime _dtEnd;
        protected int _iStart;
        protected int _iEnd;

    /// <summary>
    /// 
    /// </summary>
        public DailyProcessing_GameUsage_Verification(ReportingDB rdb, DateTime dtStart, DateTime dtEnd) 
        {
            _rdb = rdb;
            _dtStart = dtStart;
            _dtEnd = dtEnd;
            _iStart = ReportingHelper.fn_get_i_date(_dtStart);
            _iEnd = ReportingHelper.fn_get_i_date(_dtEnd);
        }

/*
        /// <summary>
        /// 
        /// </summary>
        protected bool VerifyPresenceSingle()
        {
            bool bReturn = true;
            long biUserPuid;
            int     iResult;

            try
            {
                //string szStagingTable = string.Format("t_presence_fact_{0}", szReplicationProvider);
                
                // Find a row from staging table
                SqlCommand Cmd = new SqlCommand();
                Cmd.Connection = _rdb.Connection;
                Cmd.CommandType = CommandType.Text;

                Cmd.CommandText   = string.Format("select bi_user_puid from v_presence_fact where dt_start >= '{0}' and dt_start < '{1}'",  _dtStart, _dtEnd);
                Object obj = Cmd.ExecuteScalar ();

                if(Object.ReferenceEquals(obj.GetType(),DBNull.Value.GetType()) )
                    throw new NoReturnedRowException(string.Format("No such data in v_presence_fact"));

                biUserPuid = (long) obj;

                // Verify the same row is in final fact table
                Cmd.CommandText   = string.Format("select count(*) from t_rdb_presence_fact where i_date = {0} and bi_user_puid = {1}", _iStart, biUserPuid);
                iResult = (int) Cmd.ExecuteScalar ();

                if(iResult == 0)                
                    throw new NoReturnedRowException(string.Format("No such data in t_rdb_presence_fact"));

                bReturn = true;
            }
            catch(NoReturnedRowException)
            {
                bReturn = false;
            }
            
            return bReturn;            
        }
*/
        /// <summary>
        /// 
        /// </summary>
        protected bool VerifyFactTableSingle(string szTablePart, string szKeyMember)
        {
            bool bReturn = true;
            //long biUserPuid;
            int     iResult;

            try
            {
                // Find a row from staging table
                SqlCommand Cmd = new SqlCommand();
                Cmd.Connection = _rdb.Connection;
                Cmd.CommandType = CommandType.Text;

                if(szTablePart == "content_fact")
                    Cmd.CommandText   = string.Format("select {0} from v_{1} where dt_when >= '{2}' and dt_when < '{3}' and i_title_id <> 0",  szKeyMember, "content_fact", _dtStart, _dtEnd);
                else if(szTablePart == "content_xbox360_fact")
                    Cmd.CommandText   = string.Format("select {0} from v_{1} where dt_when >= '{2}' and dt_when < '{3}' and i_title_id = 0",  szKeyMember, "content_fact", _dtStart, _dtEnd);
                else if(szTablePart == "presence_fact" || szTablePart == "session_fact")
                    Cmd.CommandText   = string.Format("select {0} from v_{1} where dt_start >= '{2}' and dt_start < '{3}'",  szKeyMember, szTablePart, _dtStart, _dtEnd);
                else
                    Cmd.CommandText   = string.Format("select {0} from v_{1} where dt_when >= '{2}' and dt_when < '{3}'",  szKeyMember, szTablePart, _dtStart, _dtEnd);

                Object obj = Cmd.ExecuteScalar ();

                if(obj == null )
                //if(Object.ReferenceEquals(obj.GetType(),DBNull.Value.GetType()) )
                {
                    Log.Warn(string.Format("No data in v_{0} on {1}", szTablePart, _dtStart) );
                    throw new NoReturnedRowException();
                }

                //biUserPuid = (long) obj;

                // Verify the same row is in final fact table
                Cmd.CommandText   = string.Format("select count(*) from t_rdb_{0} where i_date = {1} and bi_user_puid = {2}", szTablePart, _iStart, obj);
                iResult = (int) Cmd.ExecuteScalar ();

                if(iResult == 0)                
                {
                    Log.Warn(string.Format("No data in t_rdb_{0} where i_date = {1} and bi_user_puid = {2}", szTablePart, _iStart, obj) );
                    throw new NoReturnedRowException();
                }

                Log.Info(string.Format("VerifyFactTableSingle for t_rdb_{0} passed", szTablePart) );
                bReturn = true;
            }
            catch(NoReturnedRowException)
            {
                Log.Warn(string.Format("VerifyFactTableSingle for t_rdb_{0} failed", szTablePart) );
                bReturn = false;
            }
            
            return bReturn;            
        }

        public class NoReturnedRowException : Exception
        {
            public NoReturnedRowException() : base() {}
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public class DailyProcessing_GameUsage_Verification_BVT : DailyProcessing_GameUsage_Verification
    {
        public DailyProcessing_GameUsage_Verification_BVT(ReportingDB rdb, DateTime dtStart, DateTime dtEnd) : base(rdb,  dtStart, dtEnd) {}

        public bool Verify()
        {
            bool bReturn = true, bResult;
            Hashtable basicKeyInTable = new Hashtable();

            basicKeyInTable.Add("content_fact", "bi_user_puid");
            basicKeyInTable.Add("content_xbox360_fact", "bi_user_puid");
            basicKeyInTable.Add("guest_fact", "bi_user_puid");
            basicKeyInTable.Add("migrate_account_fact", "bi_user_puid");
            basicKeyInTable.Add("new_account_fact", "bi_user_puid");
            basicKeyInTable.Add("presence_fact", "bi_user_puid");
            basicKeyInTable.Add("provision_fact", "bi_user_puid");
            basicKeyInTable.Add("purchase_fact", "bi_user_puid");
            basicKeyInTable.Add("session_fact", "bi_user_puid");
            basicKeyInTable.Add("elite_migration_fact", "bi_user_puid");

            ICollection szTables = basicKeyInTable.Keys;

            foreach(string szTable in szTables)
            {
                bResult = VerifyFactTableSingle(szTable, (string)basicKeyInTable[szTable]);
                if(bResult == false)
                    bReturn = false;
            }

            return bReturn;
        }
    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLAcknowledgeLicenses.cs ===
using xonline.common.service;
using xonline.common.config;
using xonline.common.protocol;

using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Database;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLAcknowlegeLicensesDelivery: XRLPayload<AcknowledgeLicensesDeliveryRequest, AcknowledgeLicensesDeliveryResponse>
    {
        private ulong cachedMachine = 0;

        /// <summary>
        /// Perform the request, creating a machine if required
        /// </summary>
        /// <returns>True if the request is successful, false otherwise</returns>
        public override bool Execute()
        {
            if (cachedMachine == 0)
            {
                XmacsClient xmacs = new XmacsClient(new AuthContext(AuthContext.ClientTypes.Xenon));
                xmacs.SignInXmacs();
                cachedMachine = xmacs.GetMachinePuid();
            }

            return Execute(cachedMachine);
        }

        /// <summary>
        /// Perform the request as the given machine
        /// </summary>
        /// <param name="machinePuid">The machine to perform the request as</param>
        /// <returns>True if the request is successful, false otherwise</returns>
        public bool Execute(ulong machinePuid)
        {
            this.cachedMachine = machinePuid;

            return Execute(Global.XEnv.GetVirtualInterface(Interface.xsig));
        }

        /// <summary>
        /// Populate the SGInfo slot with the appropriate information from the request
        /// </summary>
        /// <param name="slot">The slot to populate</param>
        /// <remarks>
        /// The machine puid that is created or passed in is cached and is 
        /// not set into the SG object unless this method is called so if 
        /// ManualSlotSetup is true, then the values in the slot will not
        /// be overridden.
        /// </remarks>
        public override void PopulateSlot(ref CSGInfo slot)
        {
            slot.userPuid0 = Request.userPuid;
            slot.machinePuid = cachedMachine;

            base.PopulateSlot(ref slot);
        }

        /// <summary>
        /// Sets the appropriate services on the request.  For this request we only 
        /// need the Signature service.
        /// </summary>
        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(XOService.Signature_Server);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLAcquireMediaLicenses.cs ===
using System;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.FakeSG;
using xonline.common.config;
using xonline.common.protocol;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLAcquireMediaLicenses: XRLPayload<AcquireMediaLicensesRequest, AcquireMediaLicensesResponse>
    {
        private ulong cachedMachine = 0;

        ///// <summary>
        ///// Perform the acquire request, creating a machine if required
        ///// </summary>
        ///// <returns>True if the request is successful, False otherwise.</returns>
        //public override bool Execute()
        //{
        //    if (cachedMachine == 0)
        //    {
        //        XmacsClient xmacs = new XmacsClient(new AuthContext(AuthContext.ClientTypes.Xenon));
        //        xmacs.SignInXmacs();
        //        cachedMachine = xmacs.GetMachinePuid();
        //    }

        //    return Execute(cachedMachine);
        //}

        /// <summary>
        /// Perform the acquire request using the provided machine puid.
        /// </summary>
        /// <param name="machinePuid">The machine to perform the request as</param>
        /// <returns>True if the request is successful, False otherwise.</returns>
        public bool Execute(ulong machinePuid)
        {
            this.cachedMachine = machinePuid;

            return Execute(Global.XEnv.GetVirtualInterface(Interface.xsig));
        }

        /// <summary>
        /// Populate the SGInfo slot with the appropriate information from the request
        /// </summary>
        /// <param name="slot">The slot to populate</param>
        /// <remarks>
        /// The machine puid that is created or passed in is cached and is 
        /// not set into the SG object unless this method is called so if 
        /// ManualSlotSetup is true, then the values in the slot will not
        /// be overridden.
        /// </remarks>
        public override void PopulateSlot(ref CSGInfo slot)
        {
            slot.userPuid0 = Request.userPuid;
            slot.machinePuid = cachedMachine;

            base.PopulateSlot(ref slot);
        }

        /// <summary>
        /// Sets the appropriate services on the request.  For this request we only 
        /// need the Signature service.
        /// </summary>
        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(XOService.Signature_Server);
        }

        /// <summary>
        /// Gets a set of valid client information blocks to use in the request
        /// </summary>
        /// <returns>A valid sample set of client info blocks</returns>
        public static xonline.common.protocol.XeGenericBlock[] GetValidSampleBlocks()
        {
            if (clientInfoBlockExample==null)
            {
                byte []blob=System.IO.File.ReadAllBytes("Suites\\clientinfo.bin");

                xonline.common.protocol.BlockSerializer ser=new xonline.common.protocol.BlockSerializer(blob, 1, 10);
                clientInfoBlockExample=ser.Serialize();
            }

            return clientInfoBlockExample;
        }

        private static xonline.common.protocol.XeGenericBlock[] clientInfoBlockExample = null;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLCheckRevocation.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using System.Security.Cryptography;
using xonline.common.config;
using ServerTestFramework.LiveService;
using xonline.common.service;
using xonline.common.protocol;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLCheckRevocation : XRLPayload<CheckRevocationRequest, CheckRevocationResponse>
    {
        public static RandomEx RandGen = new RandomEx();
        public static SHA1Managed SHA1 = new SHA1Managed();

        public static ContentTuple GetRandomContentTuple()
        {
            ContentTuple tuple = new ContentTuple();
            tuple.TitleId = (uint)RandGen.Next();
            tuple.TitleVersion = (uint)RandGen.Next();
            tuple.ConsolePuid = RandGen.NextPuid();
            RandGen.NextBytes(tuple.ConsoleId);
            tuple.UserPuid[0] = RandGen.NextPuid();
            tuple.Digest = RandGen.GenerateRandomBlob(20);

            return tuple;
        }

        public XRLCheckRevocation(uint numTuples)
        {
            this.Request.NumContentTuples = numTuples;
            this.Request.Tuples = new xonline.common.protocol.ContentTuple[numTuples];
            for (uint i = 0; i < numTuples; i++)
            {
                this.Request.Tuples[i] = GetRandomContentTuple();
            }
        }

        /// <summary>
        /// Overrides the XRLPayload base write stream function which uses 
        /// reflection to determine what to write to the stream. CheckRevocation
        /// is a high TPS api, so this makes the request a bit quicker.
        /// </summary>
        /// <param name="binaryWriter">The stream to write this object to</param>
        public override void WriteStream(BinaryWriter binaryWriter)
        {
            binaryWriter.Write(this.Request.NumContentTuples);
            for (int i = 0; i < this.Request.NumContentTuples; i++)
            {
                this.Request.Tuples[i].WriteStream(binaryWriter);
            }
        }

        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(XOService.Signature_Server);
        }

        public override bool Execute()
        {
            return base.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xsig));
        }
    }

    /// <summary>
    /// Provides a few extensions methods to the service classes to allow for a
    /// bit more testability.
    /// </summary>
    public static class ContentTupleExtensions
    {
        private static Type ContentTupleType;
        private static System.Reflection.FieldInfo manualArraySizeInfo;

        static ContentTupleExtensions()
        {
            ContentTupleType = typeof(ContentTuple);
            manualArraySizeInfo = ContentTupleType.GetField("manualArraySize", 
                System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic);
        }

        public static void SetManualArraySize(this ContentTuple tuple, Boolean manualArraySize)
        {
            manualArraySizeInfo.SetValue(tuple, manualArraySize);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Reporting\Verifications\Verify_OlapMeasureDimension.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.OleDb;
using System.Text;
using System.Data;
using System.Xml;

// STF
using ServerTestFramework.STFLive.Database;
//using ServerTestFramework.STFLive.Reporting;

namespace ServerTestFramework.STFLive.Reporting
{
    public class Verify_OlapMeasureDimension : ReportingVerification
    {
        public string OlapDatabase
        {
            get { return m_InitialDB; }
            set { m_InitialDB = value; }
        }

        private string m_Cube;   // Olap Cube Name
        public string Cube
        {
            get { return m_Cube; }
            set { m_Cube = value; }
        }

        private string m_Measure;   // Olap Cube Measure Name
        public string Measure
        {
            get { return m_Measure; }
            set { m_Measure = value; }
        }

        private string m_Dimension; // Olap Cube Dimension Name
        public string Dimension
        {
            get { return m_Dimension; }
            set { m_Dimension = value; }
        }

        private string m_TestOLAPValue; // Olap Cube Dimension value to use in verifications
        public string TestOLAPValue
        {
            get { return m_TestOLAPValue; }
            set { m_TestOLAPValue = value; }
        }

        private string m_TestSQLValue; // SQL table value to use in verifications - this corresponds to TestOLAPValue
        public string TestSQLValue
        {
            get { return m_TestSQLValue; }
            set { m_TestSQLValue = value; }
        }

        private DateRange m_TestDate; // Test Date to use
        public DateRange TestDate
        {
            get { return m_TestDate; }
            set { m_TestDate = value; }
        }


        // Constructor
        public Verify_OlapMeasureDimension()
        {
            m_InitialServer = "";//ReportingMachines.OLAP
            m_InitialDB = "GameUsage";
            m_Completed = false;
            m_HResult = 0;
        }
        


    }// Verify_OlapMeasureDimension

}//Reporting Namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLCreatePlayReadyCertificate.cs ===
using xonline.common.service;
using xonline.common.config;

using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Database;

using xonline.common.protocol;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLCreatePlayReadyCertificate: XRLPayload<CreatePlayReadyCertificateRequest, CreatePlayReadyCertificateResponse>
    {
        private static XmacsClient cachedMachine;
        private ulong cachedMachinePuid = 0;

        /// <summary>
        /// Perform the create request, creating a machine if required
        /// </summary>
        /// <returns>True if the request is successful, False otherwise.</returns>
        public override bool Execute()
        {
            if (cachedMachinePuid == 0)
            {
                if (cachedMachine == null)
                {
                    cachedMachine = new XmacsClient(new AuthContext(AuthContext.ClientTypes.Xenon));
                }
                cachedMachine.SignInXmacs();
                cachedMachinePuid = cachedMachine.GetMachinePuid();
            }

            return Execute(Global.XEnv.GetVirtualInterface(Interface.xsig));
        }

        /// <summary>
        /// Perform the acquire request using the provided machine puid.
        /// </summary>
        /// <param name="machinePuid">The machine to perform the request as</param>
        /// <returns>True if the request is successful, False otherwise.</returns>
        public bool Execute(ulong machinePuid)
        {
            cachedMachinePuid = machinePuid;
            return Execute();
        }

        /// <summary>
        /// Populate the SGInfo slot with the appropriate information from the request
        /// </summary>
        /// <param name="slot">The slot to populate</param>
        /// <remarks>
        /// The machine puid that is created or passed in is cached and is
        /// not set into the SG object unless this method is called so if
        /// ManualSlotSetup is true, then the values in the slot will not
        /// be overridden.
        /// </remarks>
        public override void PopulateSlot(ref CSGInfo slot)
        {
//            slot.userPuid0 = Request.userPuid;
            slot.machinePuid = cachedMachinePuid;
            try
            {
                slot.SetClientType(CSGInfo.ClientInfo.ToClientType(slot.machinePuid));
            }
            catch
            {
                // Set it to something valid
                slot.SetClientType(CSGInfo.ClientType.Xenon);
            }

            base.PopulateSlot(ref slot);
        }

        /// <summary>
        /// Sets the appropriate services on the request.  For this request we only
        /// need the Signature service.
        /// </summary>
        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(XOService.Signature_Server);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLMSTVCreateCertificateRequest.cs ===
using System;
using System.IO;
using System.Net;
using ServerTestFramework.LiveService;
using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLXmstvCreateCertificate : XRLPayload<XmstvCreateCertificateRequest, XmstvCreateCertificateResponse>
    {
        public static readonly Int32 RSAPUB_2048_SIZE = 272;
        public static readonly Int32 SHA_DIGEST_SIZE = 20;

        public XRLXmstvCreateCertificate()
        {
            this.ServiceId = XOService.Signature_Server;
        }

        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(ServiceId);
        }

        public override bool Execute()
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xsig));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLGetSigningKey.cs ===
using System;
using System.IO;
using System.Net;
using xonline.common.config;
using xonline.common.service;
using xonline.common.protocol;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLGetSigningKey : XRLPayload
    {
        [XRLPayloadFld(IsMPuid = true)]
        public ulong machinePuid = 0xFF09000000000000;
        [XRLPayloadFld(IsUPuid = true, ArraySize = 4)]
        public ulong[] userPuids = null;
        [XRLPayloadFld(IsTitleId = true)]
        public uint titleID = 0xffc0fe00;
        [XRLPayloadFld(IsTitleVersion = true)]
        public uint titleVersion = 1;

        [WireInfo(Serialize = false)]
        public Byte[] ExtraData;

        [WireInfo(Serialize = false)]
        public XSigSignature Response;

        public XRLGetSigningKey()
        {
            ServiceId = XOService.Signature_Server;
        }

        protected override string GetServiceName() { return "/xsig/getsigningkey.ashx"; }

        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(XOService.Signature_Server);
        }

        /// <summary>
        /// This is being overridden to prevent STF from overwriting the values that we've provided as defaults
        /// </summary>
        protected override void InitializeDefaults() { }

        protected IPEndPoint server = Global.XEnv.GetVirtualInterface(VirtualInterface.xsig);
        public IPEndPoint Server
        {
            get { return server; }
            set { server = value; }
        }

        public new XSigSignature Execute()
        {
            return Execute(null);
        }

        public XSigSignature Execute(byte[] blob)
        {
            ExtraData = blob;

            Response = null;
            // We don't care about the response, we just return whatever gets
            // thrown into the signature
            base.Execute(server);

            return Response;
        }

        /// <summary>
        /// This request takes no parameters, so this method is just used to 
        /// write extra data into the request stream for test purposes.
        /// </summary>
        /// <param name="binaryWriter">The stream to write the request to</param>
        public override void  WriteStream(BinaryWriter binaryWriter)
        {
            if(ExtraData != null && ExtraData.Length > 0)
            {
                binaryWriter.Write(ExtraData);
            }
        }

        /// <summary>
        /// Validates the response size and the reads it into an XSigSignature
        /// </summary>
        /// <param name="responseStream">The stream to read the response from</param>
        protected override void ReadResponse(MemoryStream responseStream)
        {
            Response = new XSigSignature();
            Response.ReadStream(responseStream);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLGetSignedHeader.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;

using xonline.common.config;
using xonline.common.protocol;
using ServerTestFramework.Utilities;
using System.Security.Cryptography;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLGetSignedHeader : XRLPayload<GetSignedHeaderRequest, GetSignedHeaderResponse>
    {
        private static SHA1Managed sha1 = new SHA1Managed();

        public override bool Execute()
        {
            int fileSize = RandomEx.GlobalRandGen.Next(1024);
            byte[] file = RandomEx.GlobalRandGen.GenerateRandomBlob(fileSize);

            return Execute(file);
        }

        public bool Execute(byte[] file)
        {
            return Execute(sha1.ComputeHash(file), (uint)file.Length, GetSignedHeaderRequest.ONLY_LEGAL_FILE_TYPE);
        }

        public bool Execute(byte[] fileHash, uint fileSize)
        {
            return Execute(fileHash, fileSize, GetSignedHeaderRequest.ONLY_LEGAL_FILE_TYPE);
        }

        public bool Execute(byte[] fileHash, uint fileSize, uint fileType)
        {
            this.Request.fileType = fileType;
            this.Request.fileHash = fileHash;
            this.Request.fileSize = fileSize;

            return base.Execute(Global.XEnv.GetVirtualInterface(Interface.xsig_int));
        }

        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(XOService.Signature_Server);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLGetAAInfo.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using xonline.common.service;
using xonline.common.config;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLGetAAInfo : XRLPayload<GetAAInfoRequest, GetAAInfoResponse>
    {
        public bool Execute(ulong passportPuid, ulong liveXuid)
        {
            Request.PassportPuid = passportPuid;
            Request.LiveXuid = liveXuid;

            return Execute();
        }

        public override bool Execute()
        {
            Request.SchemaVersion = WireData.MakeSchemaVersion(1, 1);
            Request.IpAddressInternet = null;

            return base.Execute(Global.XEnv.GetVirtualInterface(Interface.xsig_int));
        }

        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(XOService.Signature_Server);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLLicenseTransfer.cs ===
using xonline.common.service;
using xonline.common.config;

using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Database;

using xonline.common.protocol;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLUpdateLicenseTransferState: XRLPayload<UpdateLicenseTransferStateRequest>
    {
        public Puid MachinePuid { get; set; }

        public XRLUpdateLicenseTransferState()
        {
            MachinePuid = 0;
            UseHttpAuth = true;
        }

        public override bool Execute()
        {
            return Execute(Global.XEnv.GetVirtualInterface(UseHttpAuth ? Interface.xsig_int : Interface.xsig));
        }

        public override void PopulateSlot(ref CSGInfo slot)
        {
            base.PopulateSlot(ref slot);

            slot.machinePuid = MachinePuid;
            slot.userPuid0 = Request.userPuid;
        }

        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(XOService.Signature_Server);
        }
    }

    public class XRLGetLicenseTransferState: XRLPayload<GetLicenseTransferStateRequest, GetLicenseTransferStateResponse>
    {
        public Puid MachinePuid { get; set; }

        public XRLGetLicenseTransferState()
        {
            MachinePuid = 0;
            UseHttpAuth = true;
        }

        public override bool Execute()
        {
            return Execute(Global.XEnv.GetVirtualInterface(UseHttpAuth ? Interface.xsig_int : Interface.xsig));
        }

        public override void PopulateSlot(ref CSGInfo slot)
        {
            base.PopulateSlot(ref slot);

            slot.machinePuid = MachinePuid;
            slot.userPuid0 = Request.userPuid;
        }

        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(XOService.Signature_Server);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLRefreshGameLicense.cs ===
using System;
using xonline.common.service;
using xonline.common.config;
using System.Net;
using System.IO;
using System.Collections;
using System.Security.Cryptography;
using System.Globalization;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Database;

using xonline.common.protocol;

namespace ServerTestFramework.LiveService.Signature
{
    /// <summary>
    /// A XRLPayload class to perfrom a RefreshGameLicense request and read the response
    /// </summary>
    public class XRLRefreshGameLicense : XRLPayload<RefreshGameLicenseRequest, RefreshGameLicenseResponse>
    {
        /// <summary>
        /// Perform the refresh request.
        /// </summary>
        /// <returns>True if the request is successful, False otherwise.</returns>
        public override bool Execute()
        {
            return base.Execute(Global.XEnv.GetVirtualInterface(Interface.xsig));
        }

        /// <summary>
        /// Populate the SGInfo slot with the appropriate information from the request
        /// </summary>
        /// <param name="slot">The slot to populate</param>
        public override void PopulateSlot(ref CSGInfo slot)
        {
            slot.machinePuid = Request.machineId;
            slot.userPuid0 = Request.userId;

            slot.SetClientType(CSGInfo.ClientInfo.ToClientType(Request.machineId));

            base.PopulateSlot(ref slot);
        }

        /// <summary>
        /// Sets the appropriate services on the request.  For this request we only 
        /// need the Signature service.
        /// </summary>
        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(XOService.Signature_Server);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLCreateCertificate2.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using xonline.common.protocol;
using xonline.common.config;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.FakeSG;
using xonline.common.service;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLCreateCertificate2 : XRLPayload<CreateCertificate2Request, CreateCertificate2Response>
    {
        private XmacsClient client;
        /// <summary>
        /// The client which represents the machine making the request
        /// </summary>
        public XmacsClient Client
        {
            get { return client; }
            set { client = value; }
        }

        private ConsoleCertificate consoleCert;
        /// <summary>
        /// The console certificate used for the request
        /// </summary>
        public ConsoleCertificate ConsoleCert
        {
            get { return consoleCert; }
            set { consoleCert = value; }
        }

        /// <summary>
        /// The AppId used in the request
        /// </summary>
        public String AppId
        {
            get { return Request.appId; }
            set { Request.appId = value; }
        }

        /// <summary>
        /// A convenience accessor for the console id used
        /// </summary>
        public String ConsoleId
        {
            get
            {
                if (client == null)
                {
                    return String.Empty;
                }

                return client.ConsoleId;
            }
        }

        public XRLCreateCertificate2()
        {
            consoleCert = new ConsoleCertificate();
        }

        /// <summary>
        /// Initialize the request with the default client type (Xenon).
        /// This sets up the console certificate into a know state, and
        /// initalizes a client for the request
        /// </summary>
        public void Initialize()
        {
            Initialize(AuthContext.ClientTypes.Xenon);
        }

        /// <summary>
        /// Initialize the request with a given client type.  Sets up the 
        /// console certificate into a know state, and initializes a client
        /// for the request.
        /// </summary>
        /// <param name="clientType">The type of client to create</param>
        public void Initialize(AuthContext.ClientTypes clientType)
        {
            // Initialize the console certificate
            consoleCert.Initialize();

            // Then create a client, sign them in, and set the console id on 
            // the certiicate
            client = new XmacsClient(new AuthContext(clientType));
            client.SignInXmacs();

            this.ConsoleCert.SetConsoleIdFromGamertag("XE." + client.ConsoleId);
        }

        /// <summary>
        /// Initialize the CreateCertificate2 request with a client of the given type and 
        /// preform the request
        /// </summary>
        /// <param name="clientType">The client type to generate</param>
        /// <returns>True if the request was successful, false otherwise</returns>
        public bool Execute(AuthContext.ClientTypes clientType)
        {
            Initialize(clientType);

            return Execute(true);
        }

        /// <summary>
        /// Execute CreateCertificate2 and fill out the request with the available information
        /// </summary>
        /// <param name="signCertificate">If true, the certificate will be resigned before being sent</param>
        /// <returns>True if the request was successful, false otherwise</returns>
        public bool Execute(bool signCertificate)
        {
            if (signCertificate)
            {
                consoleCert.Sign();
            }

            // Get the raw cert
            Byte[] rawCert = (Byte[])this.consoleCert;
            // And chop off the signature
            Array.Resize(ref rawCert, rawCert.Length - ConsoleCertificate.CONSOLE_CERTIFICATE_SIGNATURE_SIZE);

            this.Request.ConsoleCertificate = rawCert;
            this.Request.Signature = this.consoleCert.Signature;

            this.Request.appId = "generic_ssl";

            return Execute();
        }

        /// <summary>
        /// Execute the CreateCertificate2 request.  This method should only be called
        /// if the request is already fully  created.  This does not setup any  values 
        /// on the request object before submitting it.  The SGInfo will be initalized 
        /// if AutoSGInfo is set to true.
        /// </summary>
        /// <returns>True if the request was successful, false otherwise</returns>
        public override bool Execute()
        {
            return base.Execute(Global.XEnv.GetVirtualInterface(Interface.xsig));
        }

        /// <summary>
        /// Populate the SGInfo slot with the appropriate information from the request
        /// </summary>
        /// <param name="slot">The slot to populate</param>
        public override void PopulateSlot(ref CSGInfo slot)
        {
            // If a client has been created, then populate the slot info appropriately
            if (client != null)
            {
                slot.machinePuid = client.MachinePuid;
                slot.SetClientType(CSGInfo.ClientInfo.ToClientType(slot.machinePuid));
            }

            base.PopulateSlot(ref slot);
        }

        /// <summary>
        /// Sets the appropriate services on the request.  For this request we only 
        /// need the Signature service.
        /// </summary>
        protected override void SetServices()
        {
            Slot.ClearServices();
            Slot.AddService(XOService.Signature_Server);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLSignOnBelhalf.cs ===
using System;
using System.IO;
using System.Net;
using xonline.common.config;
using xonline.common.protocol;
using System.Security.Cryptography;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLXSigSignOnBehalf : XRLPayloads<XSigSignOnBehalfRequest, XSigSignOnBehalfResponse>
    {
        public static XSigSignOnBehalfRequest CreateSignRequest(XOService serviceId, Byte[] data)
        {
            return CreateSignRequest((uint)serviceId, data);
        }

        public static XSigSignOnBehalfRequest CreateSignRequest(UInt32 serviceId, Byte[] data)
        {
            XSigSignOnBehalfRequest req = new XSigSignOnBehalfRequest();
            req._serviceId = serviceId;
            req._digest = new SHA1Managed().ComputeHash(data);

            req._authData = new XSigAuthData();
            req._authData._titleID = 0xFFC0FF00;
            req._authData._titleVersion = 1;
            req._authData._XboxID = 0xFF09000000000000;

            return req;
        }

        /// <summary>
        /// This is just a blob of random extra data that is serialized into the
        /// stream after any request objects.  This can be used to simulate a 
        /// variety of negative test cases.
        /// </summary>
        [WireInfo(Serialize = false)]
        public Byte[] ExtraData = null;

        /// <summary>
        /// Creates an empty XRLXSigSignOnBehalf request object
        /// </summary>
        public XRLXSigSignOnBehalf() { }

        /// <summary>
        /// Creates an XRLXSigSignOnBehalf request object with an array of 
        /// requests.  This does not populate the array, but basically just sets
        /// it up with an empty array that can be used.
        /// </summary>
        /// <param name="numRequests">The size of request objects array to create</param>
        public XRLXSigSignOnBehalf(Int32 numRequests) : base(numRequests) { }

        /// <summary>
        /// Creates an XRLXSigSignOnBehalf request with a single request object
        /// initialized with the provide service ID and digest
        /// </summary>
        /// <param name="serviceId">The service ID to initialize the request with</param>
        /// <param name="digest">The digest to initialize the request with</param>
        public XRLXSigSignOnBehalf(XOService serviceId, Byte[] digest) : this((uint)serviceId, digest) { }

        /// <summary>
        /// Creates an XRLXSigSignOnBehalf request with a single request object
        /// initialized with the provide service ID and digest
        /// </summary>
        /// <param name="serviceId">The service ID to initialize the request with</param>
        /// <param name="digest">The digest to initialize the request with</param>
        public XRLXSigSignOnBehalf(UInt32 serviceId, Byte[] digest)
        {
            Requests = new XSigSignOnBehalfRequest[] { CreateSignRequest(serviceId, digest) };
        }

        /// <summary>
        /// Executes an SignOnBehalf request with the provided request object
        /// </summary>
        /// <param name="signRequest">The signing request to execute</param>
        /// <returns>A SignOnBehalf response object</returns>
        public XSigSignOnBehalfResponse Execute(XSigSignOnBehalfRequest signRequest)
        {
            if (signRequest == null)
            {
                throw new ArgumentNullException("signRequest");
            }

            Requests = new XSigSignOnBehalfRequest[] { signRequest };

            if (Execute())
            {
                return Responses[0];
            }

            return null;
        }

        /// <summary>
        /// Executes an SignOnBehalf request with the provided request objects
        /// </summary>
        /// <param name="signRequest">The signing requests to execute</param>
        /// <returns>An array of SignOnBehalf response object</returns>
        public XSigSignOnBehalfResponse[] Execute(XSigSignOnBehalfRequest[] signRequests)
        {
            if (signRequests == null || signRequests.Length == 0)
            {
                throw new ArgumentNullException("signRequests");
            }

            Requests = signRequests;

            if (Execute())
            {
                return Responses;
            }

            return null;
        }

        /// <summary>
        /// Executes the SignOnBehalf request against the default XSig interface
        /// </summary>
        /// <returns>True if the request was successful, false otherwise</returns>
        public override bool Execute()
        {
            return base.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xsig_int));
        }

        /// <summary>
        /// Overrides the default write stream to allow the writing of some
        /// additional garbage data for test pruposes
        /// </summary>
        /// <param name="binaryWriter">The stream that the data is written to</param>
        public override void WriteStream(BinaryWriter binaryWriter)
        {
            base.WriteStream(binaryWriter);

            if (ExtraData != null && ExtraData.Length > 0)
            {
                binaryWriter.Write(ExtraData);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLValidateCertificate.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Security.Cryptography.X509Certificates;

using xonline.common.protocol;
using xonline.common.config;
using System.Security.Cryptography;


namespace ServerTestFramework.LiveService.Signature
{
    public class XRLValidateCertificate : XRLPayload<ValidateCertificateRequest, ValidateCertificateResponse>
    {
        public X509Certificate2 Certificate
        {
            get { return new X509Certificate2(Request.certificate); }
            set { Request.certificate = value.GetRawCertData(); }
        }

        public Byte[] RawCertificate
        {
            get { return Request.certificate; }
            set { Request.certificate = value; }
        }

        public String Xrl
        {
            get { return Request.Xrl; }
        }

        public bool Execute(X509Certificate2 certificate)
        {
            this.Certificate = certificate;

            return Execute();
        }

        public bool Execute(Byte[] rawCertificate)
        {
            this.RawCertificate = rawCertificate;

            return Execute();
        }

        public override bool Execute()
        {
            return Execute(Global.XEnv.GetVirtualInterface(Interface.xsig));
        }

        public bool ValidateResponse()
        {
            return ValidateResponse(HResult.S_OK, this.Response);
        }

        public bool ValidateResponse(uint expectedResult)
        {
            return ValidateResponse(expectedResult, this.Response);
        }

        public bool ValidateResponse(uint expectedResult, ValidateCertificateResponse response)
        {
            // Check the HResult
            if (response.hr != expectedResult)
            {
                Global.RO.Error(string.Format("Unexpeced HResult returned.  Expected 0x{0:X}, Got 0x{1:X}", expectedResult, response.hr));
                return false;
            }

            int validUntilMinutes = Config.GetIntSetting("signature_validateCertificateValidUntilMinutes");

            DateTime validUntilExpected = DateTime.UtcNow.AddMinutes(validUntilMinutes);
            TimeSpan diff = (response.validUntil - validUntilExpected).Duration();

            // Check if the expected time is different than the actual time by more than a minute
            if (diff.TotalSeconds > 60)
            {
                Global.RO.Error("Unexpected ValidUntil DateTime.  Expected: {0}, Actual: {1}", validUntilExpected, response.validUntil);
                return false;
            }

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XSigWebClient.cs ===
using System;
using System.Net;
using System.Xml.Serialization;
using ServerTestFramework.LiveService.FakeAAInfoNameSpace;
using xonline.common.protocol;
using xonline.common.service;

namespace ServerTestFramework.LiveService.Signature
{
    /// <summary>
    /// Defines a license availability that comes back from the service
    /// call to CheckLicensesAvailability
    /// </summary>
    /// <remarks>
    /// Oddly, this is defined directly in XSig, and not in the common protocol code
    /// which means that we would require a reference to XSig to allow the tests to 
    /// run properly.  I'd rather not do that, so I've copied the definition here.
    /// It can be removed if/when the definition moves to common code.
    /// </remarks>
    public class Availability
    {
        public MediaInstanceIdOfferIdPair idPair;

        public HResult hr;

        [XmlIgnoreAttribute]
        public MediaInstanceIdOfferIdPair IdPair { get { return idPair; } set { idPair = value; } }
        [XmlIgnoreAttribute]
        public HResult Hr { get { return hr; } set { hr = value; } }
    }

    public partial class XSigWebClient : System.Web.Services.Protocols.HttpPostClientProtocol
    {
        public ulong PassportPuid { get; set; }
        public ulong UserPuid { get; set; }
        public String IPAddress { get; set; }

        protected override WebRequest GetWebRequest(Uri uri)
        {
            WebRequest req = base.GetWebRequest(uri);

            if (PassportPuid != 0)
            {
                FakeAAInfo aaInfo = new FakeAAInfo(PassportPuid);
                if (IPAddress != null)
                {
                    aaInfo.IpAddressInternet = IPAddress;
                }
                aaInfo.LiveXuid = UserPuid;
                req.Headers[XHttpHdr.AUTHZ] = aaInfo.ConvertToHttpHeaderValue();
            }

            return req;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XSignature.cs ===
using System;
using System.IO;
using System.Security.Cryptography;
using ServerTestFramework.Utilities;
using xonline.common.service;
using xonline.common.protocol;

namespace ServerTestFramework.LiveService.Signature
{
    /// <summary>
    /// This provides access to all of the raw test master signing keys that are
    /// used by the service.
    /// </summary>
    public class Keys
    {
        public static byte[][] SigMaster = 
        {
            Hexer.unhex("9c75a3c7eb57ad0205e0bc24ce08e36488a76e3487aa520c7e08cc0d05eec5ab"),
            Hexer.unhex("9490425f094e849ac676241acd8588bef320e026ba582881a20f1a393ddcf6ec"),
            Hexer.unhex("0000000000000000000000000000000000000000000000000000000000000000"),
            Hexer.unhex("b15b96f8706af6d96c35348244de88010daa22bae71bccee5ff947d17c85c19c"),
            Hexer.unhex("c230e0197273d6f5fa953046a08524b1ea1e7c53a7da9394d20c0564a0454b69")
        };
    }

    /// <summary>
    /// This class provides a bunch of extension methods on xonline service
    /// objects that we can't modify as they aren't part of test code.
    /// </summary>
    public static class SignatureExtensionMethods
    {
        /// <summary>
        /// Sign an XSigVerifySignatureRequest object, by generating the 
        /// signature for the digest in the request and setting it on the sig.
        /// </summary>
        /// <param name="verifyRequest">The request to sign</param>
        public static void Sign(this XSigVerifySignatureRequest verifyRequest)
        {
            Sign(verifyRequest, Keys.SigMaster[0]);
        }

        /// <summary>
        /// Sign an XSigVerifySignatureRequest object, by generating the 
        /// signature for the digest in the request and setting it on the sig.
        /// </summary>
        /// <param name="verifyRequest">The request to sign</param>
        /// <param name="key">The key to sign the request with</param>
        public static void Sign(this XSigVerifySignatureRequest verifyRequest, Byte[] key)
        {
            verifyRequest._signature.ComputeSignature(verifyRequest._digest, key);
        }

        /// <summary>
        /// Initialize an XSigSignature with some sane default values
        /// </summary>
        /// <param name="sig"></param>
        public static void Initialize(this XSigSignature sig)
        {
            sig._signatureVersion = XSigSignature.XONLINE_XSIG_SIGNATURE_VERSION;
            sig._keyVersion = 1;
            sig._serviceId = 0;
            sig._timeStamp = DateTime.UtcNow.Ticks;

            sig._authData = new XSigAuthData();
            sig._authData._titleID = 0xFFC0FE00;
            sig._authData._titleVersion = 1;
            sig._authData._XboxID = 0xFF09000000000000;

            sig._reserved = new Byte[XSigSignature.XONLINE_XSIG_RESERVED_SIZE];

            sig._signature = new Byte[XSigSignature.XONLINE_XSIG_SIGNATURE_KEY_SIZE];
        }

        /// <summary>
        /// Compute the intermediate signing key for an XSigSignature.
        /// </summary>
        /// <param name="sig">The signature to generate the intermediate key from</param>
        /// <param name="key">The XSig key to hash the key with</param>
        /// <returns></returns>
        public static Byte[] ComputeIntermediateSignature(this XSigSignature sig, Byte[] key)
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter wr = new BinaryWriter(ms);

            wr.Write(sig._serviceId);
            wr.Write(sig._timeStamp);
            wr.Write(sig._authData._titleID);
            wr.Write(sig._authData._titleVersion);
            wr.Write(sig._authData._XboxID);
            wr.Write(sig._authData._userID1);
            wr.Write(sig._authData._userID2);
            wr.Write(sig._authData._userID3);
            wr.Write(sig._authData._userID4);

            return new HMACSHA1(key).ComputeHash(ms.ToArray());
        }

        /// <summary>
        /// Compute the signature of a given digest and signature.
        /// </summary>
        /// <param name="sig">The XSigSignature to generate a signature for</param>
        /// <param name="digest">The digest to generate a signature for</param>
        public static void ComputeSignature(this XSigSignature sig, Byte[] digest)
        {
            ComputeSignature(sig, digest, Keys.SigMaster[0]);
        }

        /// <summary>
        /// Compute the signature of a given digest and signature.
        /// </summary>
        /// <param name="sig">The XSigSignature to generate a signature for</param>
        /// <param name="digest">The digest to generate a signature for</param>
        /// <param name="key">The key to generate a signature with</param>
        public static void ComputeSignature(this XSigSignature sig, Byte[] digest, Byte[] key)
        {
            Byte[] intermediateSig = ComputeIntermediateSignature(sig, key);
            sig._signature = new HMACSHA1(intermediateSig).ComputeHash(digest);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XSigWeb.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace ServerTestFramework.LiveService.Signature
{
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    using ServerTestFramework;
    using xonline.common.protocol;
    using xonline.common.config;
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public partial class XSigWebClient : System.Web.Services.Protocols.HttpPostClientProtocol {
        
        private System.Threading.SendOrPostCallback TestConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcquireMediaLicensesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcknowledgeLicensesDeliveryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckLicensesAvailabilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBlacklistDigestStateOperationCompleted;
        
        /// <remarks/>
        public XSigWebClient() 
        {
            String server = Global.XEnv.GetVirtualInterface(VirtualInterface.xsig).ToString();
            this.Url = String.Format("http://{0}/xsig/xsigweb.asmx", server);
        }
        
        /// <remarks/>
        public event TestConnectionCompletedEventHandler TestConnectionCompleted;
        
        /// <remarks/>
        public event AcquireMediaLicensesCompletedEventHandler AcquireMediaLicensesCompleted;
        
        /// <remarks/>
        public event AcknowledgeLicensesDeliveryCompletedEventHandler AcknowledgeLicensesDeliveryCompleted;
        
        /// <remarks/>
        public event CheckLicensesAvailabilityCompletedEventHandler CheckLicensesAvailabilityCompleted;
        
        /// <remarks/>
        public event SetBlacklistDigestStateCompletedEventHandler SetBlacklistDigestStateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.HttpMethodAttribute(typeof(System.Web.Services.Protocols.XmlReturnReader), typeof(System.Web.Services.Protocols.HtmlFormParameterWriter))]
        [return: System.Xml.Serialization.XmlRootAttribute("string", Namespace="urn:schemas-xbox-com:xsigweb-data", IsNullable=true)]
        public string TestConnection(string inputMessage) {
            return ((string)(this.Invoke("TestConnection", (this.Url + "/TestConnection"), new object[] {
                        inputMessage})));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTestConnection(string inputMessage, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TestConnection", (this.Url + "/TestConnection"), new object[] {
                        inputMessage}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndTestConnection(System.IAsyncResult asyncResult) {
            return ((string)(this.EndInvoke(asyncResult)));
        }
        
        /// <remarks/>
        public void TestConnectionAsync(string inputMessage) {
            this.TestConnectionAsync(inputMessage, null);
        }
        
        /// <remarks/>
        public void TestConnectionAsync(string inputMessage, object userState) {
            if ((this.TestConnectionOperationCompleted == null)) {
                this.TestConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestConnectionOperationCompleted);
            }
            this.InvokeAsync("TestConnection", (this.Url + "/TestConnection"), new object[] {
                        inputMessage}, this.TestConnectionOperationCompleted, userState);
        }
        
        private void OnTestConnectionOperationCompleted(object arg) {
            if ((this.TestConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestConnectionCompleted(this, new TestConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.HttpMethodAttribute(typeof(System.Web.Services.Protocols.XmlReturnReader), typeof(System.Web.Services.Protocols.HtmlFormParameterWriter))]
        [return: System.Xml.Serialization.XmlRootAttribute("ArrayOfMediaLicense", Namespace="urn:schemas-xbox-com:xsigweb-data", IsNullable=true)]
        public MediaLicense[] AcquireMediaLicenses(string[] miids, string[] oids, string xuid, string clientInfo) {
            return ((MediaLicense[])(this.Invoke("AcquireMediaLicenses", (this.Url + "/AcquireMediaLicenses"), new object[] {
                        miids,
                        oids,
                        xuid,
                        clientInfo})));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAcquireMediaLicenses(string[] miids, string[] oids, string xuid, string clientInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AcquireMediaLicenses", (this.Url + "/AcquireMediaLicenses"), new object[] {
                        miids,
                        oids,
                        xuid,
                        clientInfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public MediaLicense[] EndAcquireMediaLicenses(System.IAsyncResult asyncResult) {
            return ((MediaLicense[])(this.EndInvoke(asyncResult)));
        }
        
        /// <remarks/>
        public void AcquireMediaLicensesAsync(string[] miids, string[] oids, string xuid, string clientInfo) {
            this.AcquireMediaLicensesAsync(miids, oids, xuid, clientInfo, null);
        }
        
        /// <remarks/>
        public void AcquireMediaLicensesAsync(string[] miids, string[] oids, string xuid, string clientInfo, object userState) {
            if ((this.AcquireMediaLicensesOperationCompleted == null)) {
                this.AcquireMediaLicensesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcquireMediaLicensesOperationCompleted);
            }
            this.InvokeAsync("AcquireMediaLicenses", (this.Url + "/AcquireMediaLicenses"), new object[] {
                        miids,
                        oids,
                        xuid,
                        clientInfo}, this.AcquireMediaLicensesOperationCompleted, userState);
        }
        
        private void OnAcquireMediaLicensesOperationCompleted(object arg) {
            if ((this.AcquireMediaLicensesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcquireMediaLicensesCompleted(this, new AcquireMediaLicensesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.HttpMethodAttribute(typeof(System.Web.Services.Protocols.XmlReturnReader), typeof(System.Web.Services.Protocols.HtmlFormParameterWriter))]
        [return: System.Xml.Serialization.XmlRootAttribute("ArrayOfAcknowledgement", Namespace="urn:schemas-xbox-com:xsigweb-data", IsNullable=true)]
        public Acknowledgement[] AcknowledgeLicensesDelivery(string[] miids, string[] oids, string xuid) {
            return ((Acknowledgement[])(this.Invoke("AcknowledgeLicensesDelivery", (this.Url + "/AcknowledgeLicensesDelivery"), new object[] {
                        miids,
                        oids,
                        xuid})));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAcknowledgeLicensesDelivery(string[] miids, string[] oids, string xuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AcknowledgeLicensesDelivery", (this.Url + "/AcknowledgeLicensesDelivery"), new object[] {
                        miids,
                        oids,
                        xuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public Acknowledgement[] EndAcknowledgeLicensesDelivery(System.IAsyncResult asyncResult) {
            return ((Acknowledgement[])(this.EndInvoke(asyncResult)));
        }
        
        /// <remarks/>
        public void AcknowledgeLicensesDeliveryAsync(string[] miids, string[] oids, string xuid) {
            this.AcknowledgeLicensesDeliveryAsync(miids, oids, xuid, null);
        }
        
        /// <remarks/>
        public void AcknowledgeLicensesDeliveryAsync(string[] miids, string[] oids, string xuid, object userState) {
            if ((this.AcknowledgeLicensesDeliveryOperationCompleted == null)) {
                this.AcknowledgeLicensesDeliveryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcknowledgeLicensesDeliveryOperationCompleted);
            }
            this.InvokeAsync("AcknowledgeLicensesDelivery", (this.Url + "/AcknowledgeLicensesDelivery"), new object[] {
                        miids,
                        oids,
                        xuid}, this.AcknowledgeLicensesDeliveryOperationCompleted, userState);
        }
        
        private void OnAcknowledgeLicensesDeliveryOperationCompleted(object arg) {
            if ((this.AcknowledgeLicensesDeliveryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcknowledgeLicensesDeliveryCompleted(this, new AcknowledgeLicensesDeliveryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.HttpMethodAttribute(typeof(System.Web.Services.Protocols.XmlReturnReader), typeof(System.Web.Services.Protocols.HtmlFormParameterWriter))]
        [return: System.Xml.Serialization.XmlRootAttribute("ArrayOfAvailability", Namespace="urn:schemas-xbox-com:xsigweb-data", IsNullable=true)]
        public Availability[] CheckLicensesAvailability(string[] miids, string[] oids, string xuid) {
            return ((Availability[])(this.Invoke("CheckLicensesAvailability", (this.Url + "/CheckLicensesAvailability"), new object[] {
                        miids,
                        oids,
                        xuid})));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckLicensesAvailability(string[] miids, string[] oids, string xuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckLicensesAvailability", (this.Url + "/CheckLicensesAvailability"), new object[] {
                        miids,
                        oids,
                        xuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public Availability[] EndCheckLicensesAvailability(System.IAsyncResult asyncResult) {
            return ((Availability[])(this.EndInvoke(asyncResult)));
        }
        
        /// <remarks/>
        public void CheckLicensesAvailabilityAsync(string[] miids, string[] oids, string xuid) {
            this.CheckLicensesAvailabilityAsync(miids, oids, xuid, null);
        }
        
        /// <remarks/>
        public void CheckLicensesAvailabilityAsync(string[] miids, string[] oids, string xuid, object userState) {
            if ((this.CheckLicensesAvailabilityOperationCompleted == null)) {
                this.CheckLicensesAvailabilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLicensesAvailabilityOperationCompleted);
            }
            this.InvokeAsync("CheckLicensesAvailability", (this.Url + "/CheckLicensesAvailability"), new object[] {
                        miids,
                        oids,
                        xuid}, this.CheckLicensesAvailabilityOperationCompleted, userState);
        }
        
        private void OnCheckLicensesAvailabilityOperationCompleted(object arg) {
            if ((this.CheckLicensesAvailabilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLicensesAvailabilityCompleted(this, new CheckLicensesAvailabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.HttpMethodAttribute(typeof(System.Web.Services.Protocols.NopReturnReader), typeof(System.Web.Services.Protocols.HtmlFormParameterWriter))]
        public void SetBlacklistDigestState(string[] digest, string status, string deliveryType, string reason) {
            this.Invoke("SetBlacklistDigestState", (this.Url + "/SetBlacklistDigestState"), new object[] {
                        digest,
                        status,
                        deliveryType,
                        reason});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetBlacklistDigestState(string[] digest, string status, string deliveryType, string reason, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetBlacklistDigestState", (this.Url + "/SetBlacklistDigestState"), new object[] {
                        digest,
                        status,
                        deliveryType,
                        reason}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetBlacklistDigestState(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetBlacklistDigestStateAsync(string[] digest, string status, string deliveryType, string reason) {
            this.SetBlacklistDigestStateAsync(digest, status, deliveryType, reason, null);
        }
        
        /// <remarks/>
        public void SetBlacklistDigestStateAsync(string[] digest, string status, string deliveryType, string reason, object userState) {
            if ((this.SetBlacklistDigestStateOperationCompleted == null)) {
                this.SetBlacklistDigestStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBlacklistDigestStateOperationCompleted);
            }
            this.InvokeAsync("SetBlacklistDigestState", (this.Url + "/SetBlacklistDigestState"), new object[] {
                        digest,
                        status,
                        deliveryType,
                        reason}, this.SetBlacklistDigestStateOperationCompleted, userState);
        }
        
        private void OnSetBlacklistDigestStateOperationCompleted(object arg) {
            if ((this.SetBlacklistDigestStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBlacklistDigestStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:xsigweb-data")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:schemas-xbox-com:xsigweb-data", IsNullable=true)]
    public partial class ArrayOfMediaLicense {
        
        private MediaLicense[] mediaLicenseField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MediaLicense", IsNullable=true)]
        public MediaLicense[] MediaLicense {
            get {
                return this.mediaLicenseField;
            }
            set {
                this.mediaLicenseField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:xsigweb-data")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:schemas-xbox-com:xsigweb-data", IsNullable=true)]
    public partial class ArrayOfAcknowledgement {
        
        private Acknowledgement[] acknowledgementField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Acknowledgement", IsNullable=true)]
        public Acknowledgement[] Acknowledgement {
            get {
                return this.acknowledgementField;
            }
            set {
                this.acknowledgementField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:xsigweb-data")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:schemas-xbox-com:xsigweb-data", IsNullable=true)]
    public partial class ArrayOfAvailability {
        
        private Availability[] availabilityField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Availability", IsNullable=true)]
        public Availability[] Availability {
            get {
                return this.availabilityField;
            }
            set {
                this.availabilityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TestConnectionCompletedEventHandler(object sender, TestConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AcquireMediaLicensesCompletedEventHandler(object sender, AcquireMediaLicensesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AcquireMediaLicensesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AcquireMediaLicensesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaLicense[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaLicense[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AcknowledgeLicensesDeliveryCompletedEventHandler(object sender, AcknowledgeLicensesDeliveryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AcknowledgeLicensesDeliveryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AcknowledgeLicensesDeliveryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Acknowledgement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Acknowledgement[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CheckLicensesAvailabilityCompletedEventHandler(object sender, CheckLicensesAvailabilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckLicensesAvailabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckLicensesAvailabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Availability[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Availability[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetBlacklistDigestStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Signature\XRLVerifySignature.cs ===
using System;
using System.IO;
using System.Net;
using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;
using System.Security.Cryptography;

namespace ServerTestFramework.LiveService.Signature
{
    public class XRLXSigVerifySignature : XRLPayloads<XSigVerifySignatureRequest, XSigVerifySignatureResponse>
    {
        /// <summary>
        /// Creates a XSigVerifySignatureRequest from a blob of data.  This 
        /// includes hashing the data and constructing a valid signature.  The 
        /// signature is generated using the default test signing key.
        /// </summary>
        /// <param name="data">The data to create the request from</param>
        /// <returns>A valid XSigVerifySignatureRequest for the given data</returns>
        /// <remarks>
        /// If the returned request is modified, you will need to sign it again
        /// if you want it to have a valid signature
        /// </remarks>
        public static XSigVerifySignatureRequest CreateVerifyRequest(Byte[] data)
        {
            return CreateVerifyRequest(data, Keys.SigMaster[0]);
        }

        /// <summary>
        /// Creates a XSigVerifySignatureRequest from a blob of data.  This 
        /// includes hashing the data and constructing a valid signature.  The 
        /// signature is generated using the provided key.
        /// </summary>
        /// <param name="data">The data to create the request from</param>
        /// <param name="key">The key to sign the request with</param>
        /// <returns>A valid XSigVerifySignatureRequest for the given data</returns>
        /// <remarks>
        /// If the returned request is modified, you will need to sign it again
        /// if you want it to have a valid signature
        /// </remarks>
        public static XSigVerifySignatureRequest CreateVerifyRequest(Byte[] data, Byte[] key)
        {
            XSigVerifySignatureRequest req = new XSigVerifySignatureRequest();

            req._digest = new SHA1Managed().ComputeHash(data);

            req._signature = new XSigSignature();
            req._signature.Initialize();
            req.Sign(key);

            return req;
        }

        /// <summary>
        /// This is just a blob of random extra data that is serialized into the
        /// stream after any request objects.  This can be used to simulate a 
        /// variety of negative test cases.
        /// </summary>
        [WireInfo(Serialize = false)]
        public Byte[] ExtraData = null;

        /// <summary>
        /// Creates an empty XRLXSigVerifySignature request object
        /// </summary>
        public XRLXSigVerifySignature() { }

        /// <summary>
        /// Creates an XRLXSigVerifySignature request object with an array of 
        /// requests.  This does not populate the array, but basically just sets
        /// it up with an empty array that can be used.
        /// </summary>
        /// <param name="numRequests">The size of request objects array to create</param>
        public XRLXSigVerifySignature(Int32 numRequests) : base(numRequests) { }

        /// <summary>
        /// Creates an XRLXSigVerifySignature request object with a single
        /// request object created using the provided data.  If the request is 
        /// modified at all, it will need to be signed again.
        /// </summary>
        /// <param name="data"></param>
        public XRLXSigVerifySignature(Byte[] data)
            : base(1)
        {
            Requests[0] = CreateVerifyRequest(data);
        }

        /// <summary>
        /// Executes the VerifySignature request against the default XSig interface
        /// </summary>
        /// <returns>True if the request was successful, false otherwise</returns>
        public override bool Execute()
        {
            return base.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xsig));
        }

        /// <summary>
        /// Overrides the default write stream to allow the writing of some
        /// additional garbage data for test pruposes
        /// </summary>
        /// <param name="binaryWriter">The stream that the data is written to</param>
        public override void WriteStream(BinaryWriter binaryWriter)
        {
            base.WriteStream(binaryWriter);

            if (ExtraData != null && ExtraData.Length > 0)
            {
                binaryWriter.Write(ExtraData);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\SocialQuery\SocialNetwork.cs ===
//Tools for creation of a social network.

using System.Collections;
using System.Threading;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;

using xonline.common.config;
using xonline.common.community;

namespace ServerTestFramework.LiveService.SocialQuery
{

    public class JumpInEntry {
        public uint titleID;
        public bool beaconed;

        public JumpInEntry(uint titleID, bool beaconed) {
            this.titleID = titleID;
            this.beaconed = beaconed;
        }
    }

    public class UserRecord {
        public PNUser user;
        public ArrayList jumpInList;
        const int JUMPIN_LIST_SIZE = 6;

        public UserRecord(PNUser user) {
            this.user = user;
            jumpInList = new ArrayList(JUMPIN_LIST_SIZE);
        }

        //find the index of a title in the jump in list.
        private int FindTitleIDIndex(uint titleID) {
            for (int i=0; i< jumpInList.Count; i++) {
                if (((JumpInEntry) jumpInList[i]).titleID == titleID) {
                    return i;
                }
            }
            return -1;
        }

        //Set the beacon flag.
        public void SetBeacon(uint titleID) {
            int index = FindTitleIDIndex(titleID);
            if (index != -1) {
                ((JumpInEntry) jumpInList[index]).beaconed = true;
            }
            //How is sorting of beacons done?  Is this by most recently beaconed?
        }

        public void ChangeTitle(uint titleID) {
            //implement the logic we decide here.  We should display the number of items in the
            //list, but keep the rest so if one is removed, the one further back in the list is
            //pulled back.

            //search for the titleID to see if we've played it before
            //if we have, remove it from the current spot.
            int index = FindTitleIDIndex(titleID);
            if (index != -1) {
                jumpInList.RemoveAt(index);
            }

            //now add it to the front.
            jumpInList.Insert(0, new JumpInEntry(titleID, false));
        }

        public ArrayList GetJumpInList() {
            //return here the first JUMPIN_LIST_SIZE items in the ArrayList.  If there aren't that
            //many, currently return a smaller list.  TODO:Pad that with zeroes?
            if (jumpInList.Count <= JUMPIN_LIST_SIZE) {
                return jumpInList.GetRange(0, jumpInList.Count);
            } else {
                return jumpInList.GetRange(0, JUMPIN_LIST_SIZE);
            }

        }
    }


    //a class to contain Social Networks, organized by their arguments.  This allows reuse of them.
    public class SocialNetworkHash {
        public Hashtable networkStore;

        public SocialNetworkHash() {
            networkStore = new Hashtable();
        }

        private string MakeKey(int friendSize, double edgeProbability, double loggedIn) {
            return friendSize + "_" + edgeProbability + "_" + loggedIn;
        }

        //gets a social network of this type.  If it exists, reuse.
        public SocialNetwork Get(int friendSize, double edgeProbability, double loggedIn) {
            string key = MakeKey(friendSize, edgeProbability, loggedIn);
            if (networkStore[key] == null) {
                networkStore[key] = new SocialNetwork(friendSize, edgeProbability, loggedIn);
                return (SocialNetwork) networkStore[key];
            } else {
                return (SocialNetwork) networkStore[key];
            }
        }
        //forcefully replaces a social network.
        public SocialNetwork Replace(int friendSize, double edgeProbability, double loggedIn) {
            string key = MakeKey(friendSize, edgeProbability, loggedIn);
            networkStore[key] = new SocialNetwork(friendSize, edgeProbability, loggedIn);
            return (SocialNetwork) networkStore[key];
        }
        //forcefully removes a social network, whether it exists or not.
        public void Remove(int friendSize, double edgeProbability, double loggedIn) {
            string key = MakeKey(friendSize, edgeProbability, loggedIn);
            networkStore[key] = null;
        }

    }

    public class SocialNetwork {
        public static FriendsCommon _fc;
        public int networkSize;

        public ArrayList userRecords; //PNUsers in here
        private Hashtable xuidToName;

        //create a number of conencted friends
        public SocialNetwork() {
            _fc = new FriendsCommon();
        }
        
        //Create a standard network, with random edging and random logged in/logged out status.
        //Friends are made quickly, so no subscriptions.  Consider logging everyone out and then
        //logging some in to initialize.
        public SocialNetwork(int friendSize, double edgeProbability, double loggedIn) {
            _fc = new FriendsCommon();
            RandomEx randGen = new RandomEx();
            userRecords = new ArrayList(friendSize);
            xuidToName = new Hashtable();
            //Make a friend.  For each friend, cycle through existing friends.
            //If rand < edgeProbability, then make them friends.
            for(int i=0; i<friendSize; i++) {
                Global.RO.Info("Creating new user.");
                PNUser newUser = _fc.CreateXenonUser(true);
                xuidToName[newUser.UserId] = newUser.Name;
                foreach(UserRecord record in userRecords) {
                    PNUser user = record.user;
                    if(randGen.NextDouble() < edgeProbability) {
                        Global.RO.Info("Making " + user.UserId.ToString("X") + " and " + newUser.UserId.ToString("X") + " friends.");
                        MakeFriends(user, newUser);
                    }
                }
                //TODO:if it fails all of them, we may need to do something special to make sure the
                //network is connected.
                UserRecord newRecord = new UserRecord(newUser);
                //may need to set an initial title if we log users in.
                userRecords.Add(newRecord);
            }
        }

        //returns an ArrayList of PNUsers.
        public ArrayList GetFriends(ulong xuid) {
            ArrayList ans = new ArrayList();
            FriendsList list = FriendsListUtil.GetFriendsListForXuid(xuid);
            foreach (UserData user in list.rgUsers) {
                ans.Add(GetPNUser(user.qwXUID));
            }
            return ans;
        }

        public void MakeFriends(PNUser a, PNUser[] list) {
            foreach (PNUser b in list)
            {
                FriendsListUtil.Add(a.UserId, b.UserId, a.Name, b.Name);
                FriendsListUtil.Accept(b.UserId, a.UserId);
            }
        }

        public void MakeFriends(PNUser a, PNUser b) {
            MakeFriends(a, new PNUser[] { b });
        }

        
        //expose some userRecord items to the outside
        public ulong GetXuid(int userIndex) {
            return ((UserRecord) userRecords[userIndex]).user.UserId;
        }

        public void ChangeTitle(int userIndex, uint titleID) {
            ((UserRecord) userRecords[userIndex]).ChangeTitle(titleID);
        }

        public void GetJumpInList(int userIndex) {
            ((UserRecord) userRecords[userIndex]).GetJumpInList();
        }

        public PNUser GetPNUser(ulong xuid) {
            foreach (UserRecord record in userRecords) {
                if (record.user.UserId == xuid) {
                    return record.user;
                }
            }
            return null;
        }

        public string GetNameOfXuid(ulong xuid) {
            return (string) xuidToName[xuid];
        }

        //Create a network with a hub.

        //Create a network for small scale stress purposes.  This will have a queue for logged off users and
        //logged in users.  Rely on bulkusers for creation?
    }


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\DBHelper.cs ===
using System;
using System.Data;
using System.Collections;
using System.Net;
using System.Data.SqlClient;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats.StatsDBSim;
using ServerTestFramework.LiveService.LBServer;
using xonline.common.config;

namespace ServerTestFramework.LiveService.Stats
{
    public class DBHelper
    {
        protected bool      _updateStatsSim;
        protected StatsIMDB _statsIMDB;

        protected static int _recNum = 1;

        /// <summary>
        /// DBHelper without stats server simulation.
        /// </summary>
        public DBHelper()
        {
            DBHelperDoInit(null, false);
        }
        
        //TODO: Remove exposure of UpdateStatsSim, this is an implementation detail.
        //      Whether or not we update should depend entirely on if there is something to update,
        //      and the API should reflect that.  This fix is stop-gap, the API needs to change and
        //      all effected code needs to be updated.
        /// <summary>
        /// DBHelper with stats server simulation.
        /// </summary>
        /// <param name="StatsImdb">IMDB to use for simulation</param>
        /// <param name="UpdateStatsSim">Keep simulation up to date?</param>
        public DBHelper(StatsIMDB  StatsImdb, bool UpdateStatsSim)
        {
            if (null == StatsImdb)
            {
                UpdateStatsSim = false;
            }

            DBHelperDoInit(StatsImdb, UpdateStatsSim);
        }

        private void DBHelperDoInit(StatsIMDB StatsImdb, bool UpdateStatsSim)
        {
            // Only allow updates if a StatsImdb was actually supplied;
            // asking for updates with a null _statsIMDB is an AV waiting to happen.
            _updateStatsSim = UpdateStatsSim;
            _statsIMDB      = StatsImdb;
        }

        /// <summary>
        /// Used to get a Leaderboard Server's descriptive name.
        /// </summary>
        /// <param name="index">Leaderboard Server Index: 0 to n where n = TotalLBServers - 1</param>
        /// <returns>Name of the Leaderboard Server for the given index</returns>
        static public string LBSname(int index)
        {
            string retval = null;

            string[] tmp = Global.XEnv.GetServerListByInterface(Interface.lbsvr);
            if( 0 <= index && index < tmp.Length )
                retval = tmp[index];

            return  retval;
        }

        /// <summary>
        /// Used to get Information on a Leaderboard Server given its index.
        /// </summary>
        /// <param name="index">Leaderboard Server Index: 0 to n where n = TotalLBServers - 1</param>
        /// <returns>IPEndPoint Structure describing the Leaderboard for the given index</returns>
        static public IPEndPoint LBSinfo(int index)
        {
            IPEndPoint retval = null;

            IPEndPoint[] tmp = Global.XEnv.GetInterface(Interface.lbsvr);
            if ( 0 <= index && index < tmp.Length )
                retval = tmp[index];

            return  retval;
        }

        /// <summary>
        /// Used to set a Title as Read/Write
        /// </summary>
        /// <param name="TitleID">TitleId to set as Read/Write</param>
        /// <param name="maxReadwrites">Max Number of Reads/Writes.  Recommended Value: 5</param>
        public void SetTitleReadWrite(int TitleID,int maxReadwrites)
        {
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
            {
                SqlCommand CreateLBCmd = npdb.CreateCommand();
                CreateLBCmd.CommandText = "p_stats_title_set_limits";
                CreateLBCmd.CommandType = CommandType.StoredProcedure;

                // Set the parameters
                SqlParameter ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                CreateLBCmd.Parameters.Add(ret);

                CreateLBCmd.Parameters.Add( "@i_title_id",   SqlDbType.Int).Value = TitleID;
                CreateLBCmd.Parameters.Add( "@i_max_writes", SqlDbType.Int).Value = maxReadwrites;
                CreateLBCmd.Parameters.Add( "@i_max_reads",  SqlDbType.Int).Value = maxReadwrites;

                // Execute the command
                npdb.ExecuteScalar(CreateLBCmd);

                if((int)ret.Value != 0)
                {
                    Global.RO.Error("p_Stats_ResetTitle returned " + ret.Value);
                    throw new Exception("ERROR: p_Stats_ResetTitle returned "+ ret.Value); // TODO: wtf? when do we throw and when don't we??!?
                }
            }
            finally
            {
                npdb.Close();
            }
        }

        /// <summary>
        /// Sets up half of the needed information for a title.  Here to reproduce a bug.
        /// </summary>
        /// <param name="Title_id">Title Id to "half" configure</param>
        /// <param name="lbtypes">Array of leaderboards to create for the title</param>
        public void HalfConfigureTitle(int Title_id,LeaderboardInfo[] lbtypes)
        {
            DeleteTitle(Title_id);
            Global.RO.Debug("**************************title deleted "+Title_id);

            for ( int i=0 ; i < lbtypes.Length ; i++ )
            {

                if(lbtypes[i]._AllowAttachments)
                    HalfCreateNewLeaderBoards(Title_id,(int)lbtypes[i]._uiLbId,lbtypes[i].ResetType,10,100,lbtypes[i]._IsTop100,0,lbtypes[i].ELOParams,lbtypes[i]._IsTeam,lbtypes[i]._IsArbitration,lbtypes[i]._ServerIndex);
                else
                    HalfCreateNewLeaderBoards(Title_id,(int)lbtypes[i]._uiLbId,lbtypes[i].ResetType,0,0,lbtypes[i]._IsTop100,0,lbtypes[i].ELOParams,lbtypes[i]._IsTeam,lbtypes[i]._IsArbitration,lbtypes[i]._ServerIndex);


            }
            reloadStatFDs();

        }

        /// <summary>
        /// Completely (re)configure a Title.  Any leaderboards already existing are laid waste.
        /// </summary>
        /// <param name="Title_id">Title Id to configure</param>
        /// <param name="lbtypes">Array of leaderboards to create for the title</param>
        public void ConfigureTitle(int Title_id,LeaderboardInfo[] lbtypes)
        {
            DeleteTitle(Title_id);
            Global.RO.Debug("**************************title deleted "+Title_id);

            for ( int i=0 ; i<lbtypes.Length ; i++ )
            {

                if(lbtypes[i]._AllowAttachments)
                    CreateNewLeaderBoards(Title_id,(int)lbtypes[i]._uiLbId,lbtypes[i].ResetType,10,100,lbtypes[i]._IsTop100,0,lbtypes[i].ELOParams,lbtypes[i]._IsTeam,lbtypes[i]._IsArbitration,lbtypes[i]._ServerIndex);
                else
                    CreateNewLeaderBoards(Title_id,(int)lbtypes[i]._uiLbId,lbtypes[i].ResetType,0,0,lbtypes[i]._IsTop100,0,lbtypes[i].ELOParams,lbtypes[i]._IsTeam,lbtypes[i]._IsArbitration,lbtypes[i]._ServerIndex);


            }
            reloadStatFDs();

        }

        /// <summary>
        /// Delete a Leaderboard, removing it from NPDB.
        /// </summary>
        /// <param name="Title_id">Title Id for leaderboard</param>
        /// <param name="LB_Type">Leaderboard Id to delete</param>
        /// <param name="ServerIndex">LBS Index where the leaderboard resides</param>
        public void deleteLeaderBoard(int Title_id,int LB_Type,int ServerIndex)
        {
            DeleteLb proc = new DeleteLb(Title_id,LB_Type);
            InternalExecuteLeaderboardRequest(proc, ServerIndex);
        }

        /// <summary>
        /// Create a non-arbitrated gamertag leaderboard with no ELo Params on LBS Index 0.
        /// </summary>
        /// <param name="Title_id">Title Id to create leaderboard for</param>
        /// <param name="LB_Type">Leaderboard Id to create</param>
        /// <param name="Reset_Type">Reset Type: 0=Never, 1=Weekly, 2=Monthly, 3=Yearly</param>
        /// <param name="AttCount">Attachment Count: 0 to n</param>
        /// <param name="Max_AttSize">Max Attachment Size: 0 to 11264 (11MB)</param>
        /// <param name="IsTop100">Is this a Top 100 Leaderboard?</param>
        /// <param name="Decayindays">Time until a user's leaderboard entry becomes invalid and subject to removal, 0=Never</param>
        /// <returns>0, no matter what</returns>
        public int CreateV2LB(int Title_id,int LB_Type,int Reset_Type, int AttCount,int Max_AttSize,byte IsTop100,int Decayindays)
        {
            int retval = CreateNewLeaderBoards(Title_id,LB_Type,Reset_Type, AttCount,Max_AttSize,IsTop100,Decayindays,null,0,0,0);
            return retval;
        }

        /// <summary>
        /// Half-Creates a leaderboard for a title.
        /// 
        /// Leaderbord is cleaned up by manually removing the row from NPDB.
        /// </summary>
        /// <param name="Title_id">Title Id to create leaderboard for</param>
        /// <param name="LB_Type">Leaderboard Id to create</param>
        /// <param name="Reset_Type">Reset Type: 0=Never, 1=Weekly, 2=Monthly, 3=Yearly</param>
        /// <param name="AttCount">Attachment Count: 0 to n</param>
        /// <param name="Max_AttSize">Max Attachment Size: 0 to 11264 (11MB)</param>
        /// <param name="IsTop100">Is this a a Top 100 Leaderboard?</param>
        /// <param name="Decayindays">Time until a user's leaderboard entry becomes invalid and subject to removal: 0=Never</param>
        /// <param name="param">ELo Parameters, used to define the curve for ranking</param>
        /// <param name="IsTeamLB">Is this a Team Leaderboard?</param>
        /// <param name="IsArbitrated">Should this leaderboard be arbitrated?</param>
        /// <param name="ServerIndex">Index of the Leaderboard Server to create the leadboard on</param>
        /// <returns>1, no matter what</returns>
        public int HalfCreateNewLeaderBoards(int Title_id,int LB_Type,int Reset_Type, int AttCount,int Max_AttSize,byte IsTop100,int Decayindays,string param,byte IsTeamLB,byte IsArbitrated,int ServerIndex)
        {

            if(_updateStatsSim)
            {
                if(AttCount>0)
                    _statsIMDB.PlayerDb.CreateLeaderboard((uint)Title_id,(uint)LB_Type,param,true,IsTop100);
                else
                    _statsIMDB.PlayerDb.CreateLeaderboard((uint)Title_id,(uint)LB_Type,param,false,IsTop100);
            }

            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
            {
                SqlCommand Cmd = npdb.CreateCommand();
                Cmd.CommandText = "p_stats_lb_add";
                Cmd.CommandType = CommandType.StoredProcedure;

                // Set the parameters
                SqlParameter ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                Cmd.Parameters.Add(ret);

                Cmd.Parameters.Add("@vc_server", SqlDbType.VarChar).Value  = LBSname(ServerIndex);
                Cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value     = Title_id;
                Cmd.Parameters.Add("@i_lb_id", SqlDbType.Int).Value        = LB_Type;
                Cmd.Parameters.Add("@i_reset_type", SqlDbType.Int).Value   = (int)Reset_Type;
                Cmd.Parameters.Add("@ti_top_100", SqlDbType.TinyInt).Value = IsTop100;

                Cmd.Parameters.Add("@ti_team", SqlDbType.TinyInt).Value       = IsTeamLB;
                Cmd.Parameters.Add("@ti_req_arb", SqlDbType.TinyInt).Value    = IsArbitrated;
                Cmd.Parameters.Add("@i_decay_days", SqlDbType.Int).Value      = Decayindays;
                Cmd.Parameters.Add("@i_attach_count", SqlDbType.Int).Value    = AttCount;
                Cmd.Parameters.Add("@i_max_attach_size", SqlDbType.Int).Value = Max_AttSize;

                //eloparam

                if(param !=null)
                {
                    string [] data = param.Split(new char[]{'=',';'});
                    if(data.Length>=8)
                    {
                        Cmd.Parameters.Add( "@c_Elo_E",        SqlDbType.Char    ).Value = data[1].Trim();
                        Cmd.Parameters.Add( "@i_Elo_K",        SqlDbType.Int     ).Value = data[3].Trim();
                        Cmd.Parameters.Add( "@i_Elo_New",      SqlDbType.Int     ).Value = data[5].Trim();
                        Cmd.Parameters.Add( "@vc_Elo_C_table", SqlDbType.VarChar ).Value = data[7].Trim();
                    }
                }

                // Execute the command
                npdb.ExecuteScalar(Cmd);

                if ( (int)ret.Value >1 || (int)ret.Value < 0 )
                {
                    Global.RO.Error("p_stats_lb_add returned "+ ret.Value);
                    throw new Exception("ERROR: p_stats_lb_add returned "+ ret.Value);
                }
            }
            finally
            {
                npdb.Close();
            }

            return 1;

        }

        /// <summary>
        /// Used to modify a leaderboard's attributes after it has already been created.
        /// </summary>
        /// <param name="Title_id">Title Id for the leaderboard to modify</param>
        /// <param name="LB_Type">Id of the Leaderboard to modify</param>
        /// <param name="Reset_Type">New Reset Type: 0=Never, 1=Weekly, 2=Monthly, 3=Yearly</param>
        /// <param name="IsTop100">Enable/Disable Top 100 functionality</param>
        /// <param name="Decayindays">New Decay Time: 0=Never</param>
        /// <returns></returns>
        public int UpdateLeaderBoards(int Title_id,int LB_Type,int Reset_Type,byte IsTop100,int Decayindays)
        {
            int retval = 0;

            string command = "UPDATE [t_stats_leaderboards]";
            command = command + " SET [i_reset_type]="+Reset_Type.ToString()+", [ti_top_100]="+IsTop100.ToString()+", [i_decay_days]=" +Decayindays.ToString();
            command = command + " WHERE [i_title_id]="+Title_id.ToString()+" and  [i_lb_id]="+LB_Type.ToString();

            retval = StaticNpdb.ExecuteNonQuery(command);

            return retval;
        }

        /// <summary>
        /// Used to create a new Leaderboard for a given title.
        /// </summary>
        /// <param name="Title_id">Title Id to create leaderboard for</param>
        /// <param name="LB_Type">Leaderboard Id to create</param>
        /// <param name="Reset_Type">Reset Type: 0=Never, 1=Weekly, 2=Monthly, 3=Yearly</param>
        /// <param name="AttCount">Attachment Count: 0 to n</param>
        /// <param name="Max_AttSize">Max Attachment Size: 0 to 11264 (11MB)</param>
        /// <param name="IsTop100">Is this a a Top 100 Leaderboard?</param>
        /// <param name="Decayindays">Time until a user's leaderboard entry becomes invalid and subject to removal: 0=Never</param>
        /// <param name="param">ELo Parameters, used to define the curve for ranking</param>
        /// <param name="IsTeamLB">Is this a Team Leaderboard?</param>
        /// <param name="IsArbitrated">Should this leaderboard be arbitrated?</param>
        /// <param name="ServerIndex">Index of the Leaderboard Server to create the leadboard on</param>
        /// <returns>0, no matter what</returns>
        public int CreateNewLeaderBoards(int Title_id,int LB_Type,int Reset_Type, int AttCount,int Max_AttSize,byte IsTop100,int Decayindays,string param,byte IsTeamLB,byte IsArbitrated,int ServerIndex)
        {
            if(_updateStatsSim)
            {
                if( AttCount > 0 )
                    _statsIMDB.PlayerDb.CreateLeaderboard((uint)Title_id,(uint)LB_Type,param,true,IsTop100);
                else
                    _statsIMDB.PlayerDb.CreateLeaderboard((uint)Title_id,(uint)LB_Type,param,false,IsTop100);
            }

            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
            {
                // statsCon closed in the finally block

                SqlCommand Cmd = npdb.CreateCommand();
                Cmd.CommandText = "p_stats_lb_add";
                Cmd.CommandType = CommandType.StoredProcedure;

                // Set the parameters
                SqlParameter ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;

                Cmd.Parameters.Add(ret);
                Cmd.Parameters.Add( "@vc_server",    SqlDbType.VarChar ).Value = LBSname(ServerIndex);
                Cmd.Parameters.Add( "@i_title_id",   SqlDbType.Int     ).Value = Title_id;
                Cmd.Parameters.Add( "@i_lb_id",      SqlDbType.Int     ).Value = LB_Type;
                Cmd.Parameters.Add( "@i_reset_type", SqlDbType.Int     ).Value = (int)Reset_Type;
                Cmd.Parameters.Add( "@ti_top_100",   SqlDbType.TinyInt ).Value = IsTop100;

                Cmd.Parameters.Add( "@ti_team",           SqlDbType.TinyInt ).Value = IsTeamLB;
                Cmd.Parameters.Add( "@ti_req_arb",        SqlDbType.TinyInt ).Value = IsArbitrated;
                Cmd.Parameters.Add( "@i_decay_days",      SqlDbType.Int     ).Value = Decayindays;
                Cmd.Parameters.Add( "@i_attach_count",    SqlDbType.Int     ).Value = AttCount;
                Cmd.Parameters.Add( "@i_max_attach_size", SqlDbType.Int     ).Value = Max_AttSize;

                //eloparam

                if(param !=null)
                {
                    string [] data = param.Split(new char[]{'=',';'});
                    if(data.Length>=8)
                    {
                        Cmd.Parameters.Add( "@c_Elo_E",        SqlDbType.Char    ).Value = data[1].Trim();
                        Cmd.Parameters.Add( "@i_Elo_K",        SqlDbType.Int     ).Value = data[3].Trim();
                        Cmd.Parameters.Add( "@i_Elo_New",      SqlDbType.Int     ).Value = data[5].Trim();
                        Cmd.Parameters.Add( "@vc_Elo_C_table", SqlDbType.VarChar ).Value = data[7].Trim();
                    }
                }

                // Execute the command
                npdb.ExecuteScalar(Cmd);

                if((int)ret.Value >1||(int)ret.Value <0) //BUGBUG: 0 AND 1 are ok?  Is this an off by one?
                {
                    Global.RO.Error("p_stats_lb_add returned "+ ret.Value);
                    throw new Exception("ERROR: p_stats_lb_add returned "+ ret.Value);  //TODO: to throw or not to throw...
                }
            }
            finally
            {
                npdb.Close();
            }

            // load lb in lbs
            CreateLB proc = new CreateLB(Title_id,LB_Type,"");
            InternalExecuteLeaderboardRequest(proc, ServerIndex);

            return 0;
        }

        /// <summary>
        /// Reload the Stats Front Doors, updating leaderboard information for all titles.
        /// </summary>
        public void reloadStatFDs()
        {
            //Global.XEnv.ExecuteXmgmtCommand(Interface.xstatsfd,"exec :xstatsfd ReloadDBMap");
            IPEndPoint[] machines = Global.XEnv.GetInterface(Interface.xstatsfd_int);
            foreach (IPEndPoint mac in machines)
            {
                try
                {
                    XRLReloadDBmap req = new XRLReloadDBmap();
                    if(req.Execute(mac) == false)
                    {
                        Global.RO.Warn("ReloadDBMap failed on server "+machines[0].Address.ToString());
                    }
                }
                catch(Exception)
                {
                    Global.RO.Warn("ReloadDBMap failed on server "+machines[0].Address.ToString());
                    throw;
                }
            }
        }

        /// <summary>
        /// Clear all Leaderboards.  Remove all Leaderboards from NPDB.  Remove Title.
        /// </summary>
        /// <param name="titleid"></param>
        public void DeleteTitle(int titleid)
        {
            // Update in-memory state //
            if (_updateStatsSim)
            {
                // Delete units for title from imdb.
                _statsIMDB.PlayerDb.ClearallTitle();
            }

            // Remove all leaderboards for the title from the Leaderboard Servers //

            // Execute request on all leaderboards
            DeleteTitle proc = new DeleteTitle(titleid);
            InternalExecuteLeaderboardRequest(proc, -1);

            // Remove leaderboard entries for the title from NPDB //
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
            {
                SqlCommand Cmd = npdb.CreateCommand();
                Cmd.CommandText = "p_stats_title_delete";
                Cmd.CommandType = CommandType.StoredProcedure;

                // Set the parameters
                SqlParameter ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                Cmd.Parameters.Add(ret);

                Cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value =  titleid;

                // Execute the command
                npdb.ExecuteScalar(Cmd);

                if((int)ret.Value != 0)
                {
                    Global.RO.Debug("p_stats_title_delete returned "+ ret.Value);
                    //throw new Exception("ERROR: p_stats_title_delete returned "+ ret.Value);
                }
            }
            finally
            {
                npdb.Close();
            }
        }

        /// <summary>
        /// Create a Competition Partition.
        /// </summary>
        /// <param name="i_title_id">Title Id to create the partition for</param>
        /// <param name="partition">Partition Number/param>
        /// <param name="ServerIndex">Index of Leaderboard Server to create the partition on</param>
        /// <returns>0 on success, -1 on failure</returns>
        public int CreateCompetitionPartition(int i_title_id,byte partition,int ServerIndex)
        {
            int retVal = -1;

            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
            {
                string[] lbserver = Global.XEnv.GetServerListByInterface(Interface.lbsvr);

                SqlCommand CreateLBCmd = npdb.CreateCommand();
                CreateLBCmd.CommandText = "p_stats_competition_partition_add";
                CreateLBCmd.CommandType = CommandType.StoredProcedure;

                // Set the parameters
                SqlParameter ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                CreateLBCmd.Parameters.Add(ret);

                CreateLBCmd.Parameters.Add( "@vc_server",      SqlDbType.NVarChar ).Value = lbserver[ServerIndex];
                CreateLBCmd.Parameters.Add( "@i_title_id",     SqlDbType.Int      ).Value = i_title_id;
                CreateLBCmd.Parameters.Add( "@i_comp_part_id", SqlDbType.TinyInt  ).Value = partition;

                // Execute the command
                npdb.ExecuteScalar(CreateLBCmd);

                if ((int)ret.Value == 0)
                {
                    // Success:
                    reloadStatFDs();
                    retVal = 0;
                }
                else
                {
                    Global.RO.Error("p_stats_competition_partition_add returned " + ret.Value);
                    //throw new Exception("ERROR: p_Stats_CreateNewLeaderBoard returned "+ ret.Value);
                }
            }
            finally
            {
                npdb.Close();
            }

            return retVal;
        }

        /// <summary>
        /// Creates a Competition Template for a given title (must be done prior to creating a Competition Partition).
        /// </summary>
        /// <param name="i_title_id">Title Id to create the template for</param>
        /// <param name="i_templateId">Template Id to create: 0 to 255</param>
        /// <param name="ti_reset_type">Reset Type: 0=Never, 1=Weekly, 2=Monthly, 3=Yearly</param>
        /// <param name="i_att_count">Attachment Count: 0 to n</param>
        /// <param name="i_max_att_size">Max Attachment Size: 0 to 11264 (11MB)</param>
        /// <param name="i_decay_days">Time until a user's leaderboard entry becomes invalid and subject to removal: 0=Never</param>
        /// <param name="vc_params">ELo Parameters, used to define the curve for ranking</param>
        /// <param name="ti_isTeam">Is this a Team Leaderboard?</param>
        /// <param name="ti_reqArbitration">Should this leaderboard be arbitrated?</param>
        /// <param name="ServerIndex">Index of the Leaderboard Server to create the template on</param>
        /// <returns>0 on success, -1 on failure</returns>
        public int CreateCompetitionTemplate(int i_title_id,int i_templateId,byte @ti_reset_type,int i_att_count,int i_max_att_size, int i_decay_days, string vc_params, byte ti_isTeam, byte ti_reqArbitration,int ServerIndex)
        {
            int retVal = -1;

            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
            {
                SqlCommand CreateLBCmd = npdb.CreateCommand();
                CreateLBCmd.CommandText = "p_stats_competition_template_add";
                CreateLBCmd.CommandType = CommandType.StoredProcedure;

                // Set the parameters
                SqlParameter ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                CreateLBCmd.Parameters.Add(ret);

                CreateLBCmd.Parameters.Add( "@i_title_id",      SqlDbType.Int     ).Value = i_title_id;
                CreateLBCmd.Parameters.Add( "@i_comp_templ_id", SqlDbType.Int     ).Value = i_templateId;
                CreateLBCmd.Parameters.Add( "@i_reset_type",    SqlDbType.Int     ).Value = ti_reset_type;
                CreateLBCmd.Parameters.Add( "@i_decay_days",    SqlDbType.Int     ).Value = i_decay_days;
                CreateLBCmd.Parameters.Add( "@ti_team",         SqlDbType.TinyInt ).Value = ti_isTeam;
                CreateLBCmd.Parameters.Add( "@ti_req_arb",      SqlDbType.TinyInt ).Value = ti_reqArbitration;

                // Execute the command
                npdb.ExecuteScalar(CreateLBCmd);

                if ((int)ret.Value == 0)
                {
                    // Success:
                    retVal = 0;
                }
                else
                {
                    Global.RO.Error("p_stats_competition_template_add returned " + ret.Value);
                    //throw new Exception("ERROR: p_Stats_CreateNewLeaderBoard returned "+ ret.Value);
                }
            }
            finally
            {
                npdb.Close();
            }

            return retVal;
        }

        /// <summary>
        /// Resets a title, clearing all leaderboards but not removing them from NPDB.
        /// </summary>
        /// <param name="Title_id">Title Id to reset</param>
        /// <returns>true on success, false on failure</returns>
        public static bool ResetTile(uint Title_id)
        {
            bool resetSucceeded = false;

            XRLResetUser ResetReq = new XRLResetUser(Title_id,0,0);

            // execute and get response
            System.Threading.Thread.Sleep(50); //TODO: Why is this sleep here?
            XRLResponse response = ResetReq.Execute();

            if( response != null && response.xResult == 0 )
            {
                resetSucceeded = true;
            }

            return resetSucceeded;
        }

        /// <summary>
        /// Private function to submit LBS Requests and return results.
        /// </summary>
        /// <param name="Proc">Fully-Formed StatsMessage to submit in the request</param>
        /// <param name="ServerIndex">Index of the Leaderboard Server to execute request on: -1 = All</param>
        /// <returns>An ArrayList of results of type: ProcCallResp or null in the error case</returns>
        private static ArrayList InternalExecuteLeaderboardRequest(StatsMessage Proc, int ServerIndex)
        {
            // We must make an lbsClient for each InternalExecute as LBSClient is not threadsafe
            // and InternalExecuteLeaderboardRequest() is reentrant.
            LBSClient lbsClient = new LBSClient("StatsTest");           

            LBSRequest req = new LBSRequest();
            req.AddProc(Proc);

            ArrayList resp = null;

            // Execute on a single Leaderboard Server
            if (0 <= ServerIndex)
            {
                
                IPEndPoint server = LBSinfo(ServerIndex);
                if (null != server)
                {
                    lbsClient.Connect(server);
                    resp = lbsClient.Execute(req, _recNum);
                    lbsClient.DisConnect();

                    System.Threading.Interlocked.Increment(ref _recNum);
                }
                else
                {
                    // Invalid Server Index: No Match
                }
            }

            // Execute on *all* Leaderboard Servers
            else if (-1 == ServerIndex)
            {
                IPEndPoint[] slist = Global.XEnv.GetInterface(Interface.lbsvr);
                if (null != slist && slist.Length > 0)
                {
                    resp = new ArrayList(slist.Length);

                    ArrayList partialResp;
                    foreach (IPEndPoint server in slist)
                    {
                        lbsClient.Connect(server);
                        partialResp = lbsClient.Execute(req, _recNum);
                        lbsClient.DisConnect();

                        System.Threading.Interlocked.Increment(ref _recNum);

                        resp.AddRange(partialResp);
                    }
                }
            }

            // Invalid Server Index: Negative
            else
            {
                // resp is already null
            }

            return resp;
        }

        /// <summary>
        /// Resets all leaderboards on the Leaderboard Serever with index 0 that would be elegible for reset on the provided date.
        /// </summary>
        /// <param name="dt_today">A future date, used to trigger weekly/monthly/yearly resets; will become the "Last Reset Date" for any reset leaderboards.</param>
        public void ResetLeaderboards(DateTime dt_today)
        {
            TestAutoReset proc = new TestAutoReset(dt_today.ToFileTimeUtc());
            InternalExecuteLeaderboardRequest(proc, 0);
        }

        /// <summary>
        /// Change the last write time of all entries on a given leaderboard.
        /// </summary>
        /// <param name="iLbType">Leaderboard Id to change last write times for</param>
        /// <param name="title">Title Id for leaderboard</param>
        /// <param name="iDayDiff">Number of days to adjust the last write time by</param>
        static public void ChangeLastWriteTime(int iLbType,uint title, int iDayDiff)
        {
            TestChangeLastUpdateTime proc = new TestChangeLastUpdateTime((int)title, iLbType, iDayDiff);
            InternalExecuteLeaderboardRequest(proc, 0);
        }

        /// <summary>
        /// Auto-Decay all elegible leaderboards on the Leaderboard server with index 0.
        /// </summary>
        static public void Decay()
        {
            TestAutoDecay proc = new TestAutoDecay(DateTime.UtcNow.ToFileTimeUtc());
            InternalExecuteLeaderboardRequest(proc, 0);
        }

        /// <summary>
        /// Auto-Trim all Top 100 Leaderboards on the Leaderboard Server with index 0.
        /// </summary>
        static public void TrimLB()
        {
            TestTrimLb proc = new TestTrimLb();
            InternalExecuteLeaderboardRequest(proc, 0);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\XeEnumRequest.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using ServerTestFramework;
using System.Threading;
using System.ComponentModel;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using xonline.common.config;
using ServerTestFramework.LiveService.FakeSG;

namespace ServerTestFramework.LiveService.Stats
{
	/// <summary>
	/// StatsEnumByUserRequest
	/// </summary>
	/// <param name="TitleId">Title ID</param>
	/// <param name="UserId">User id for beginning of page</param>
	/// <param name="PageSize">Count of max rows to retrieve for enum</param>
	/// <param name="Spec">Query spec</param>
	/// <returns>StatsReadResponse</returns>
	/// <remarks>
	/// Enumerate list of users starting with specified user id and
	/// including up to the number of rows specified by page size
	/// </remarks>
	public class StatsEnumByUserRequest : XRLPayload
	{
		public uint  TitleId  = 0;
		public ulong UserId   = 0;
		public uint  PageSize = 0;
		public uint  SpecsLen = 0;
		public StatsSpec[] Specs = null;

		public StatsEnumByUserRequest(uint title , ulong puid , uint psize,StatsSpec spec)
		{
			TitleId= title;
			UserId=puid;
			PageSize=psize;
			Specs =new StatsSpec[]{spec};
		}

		public StatsEnumByUserRequest(uint title , ulong puid , uint psize,StatsSpec[] specs)
		{
			TitleId= title;
			UserId=puid;
			PageSize=psize;
			Specs =specs;
		}


		protected override string GetServiceName()
		{
			return "/xstats/xstatenumbyuser.ashx";
		}

		public override void ManualPopulateSlot()
		{
			PopulateSlot(ref Slot);
			Slot.SetClientType(CSGInfo.ClientType.Xenon);
			
			ManualSlotSetup=true;
		}

		public uint ExecuteStress()
		{
			// Prepare request 
			MemoryStream reqStream = new MemoryStream( 512 );
			this.WriteStream(reqStream);
			ManualPopulateSlot();
				
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);
			// create a streem here and then read all data;
			return xAct.XErr;
				
		}

		new public StatsEnumResponse Execute()
		{
			// Prepare request 
			MemoryStream reqStream = new MemoryStream( 512 );
			this.WriteStream(reqStream);
			ManualPopulateSlot();
				
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);
			// create a streem here and then read all data;
			StatsEnumResponse readResp = (StatsEnumResponse)new StatsEnumResponse().ReadBytes(XErr,xAct.ResponseContents);
			return readResp;
				
		}
	}

	/// <summary>
	/// StatsEnumByRankRequest
	/// </summary>
	/// <param name="TitleId">Title ID</param>
	/// <param name="Rank">Rank value for beginning of page</param>
	/// <param name="PageSize">Count of max rows to retrieve for enum</param>
	/// <param name="Spec">Query spec</param>
	/// <returns>StatsReadResponse</returns>
	/// <remarks>
	/// Enumerate list of users starting with specified rank and
	/// including up to the number of rows specified by page size
	/// </remarks>
	public class StatsEnumByRankRequest : XRLPayload
	{
		public uint  TitleId  = 0;
		public ulong Rank     = 0;
		public uint  PageSize = 0;
		public uint  SpecsLen = 0;
		public StatsSpec[] Specs = null;

		public StatsEnumByRankRequest(uint title , ulong rank , uint psize,StatsSpec spec)
		{
			TitleId= title;
			Rank=rank;
			PageSize=psize;
			Specs =new StatsSpec[]{spec};
		}

		public StatsEnumByRankRequest(uint title , ulong rank , uint psize,StatsSpec[] specs)
		{
			TitleId= title;
			Rank=rank;
			PageSize=psize;
			Specs =specs;
		}

		public override void ManualPopulateSlot()
		{
			PopulateSlot(ref Slot);
			Slot.SetClientType(CSGInfo.ClientType.Xenon);
			
			ManualSlotSetup=true;
		}

		new public StatsEnumResponse Execute()
		{
			// Prepare request 
			MemoryStream reqStream = new MemoryStream( 512 );
			this.WriteStream(reqStream);
			ManualPopulateSlot();
				
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);
			// create a streem here and then read all data;
			StatsEnumResponse readResp = (StatsEnumResponse)new StatsEnumResponse().ReadBytes(XErr,xAct.ResponseContents);
			return readResp;
				
		}

		public uint ExecuteStress()
		{
			// Prepare request 
			MemoryStream reqStream = new MemoryStream( 512 );
			this.WriteStream(reqStream);
			ManualPopulateSlot();
				
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);
			// create a streem here and then read all data;
			return xAct.XErr;
				
		}

		protected override string GetServiceName()
		{
			return "/xstats/xstatenumbyrank.ashx";
		}
	}

	/// <summary>
	/// StatsEnumByRatingRequest
	/// </summary>
	/// <param name="TitleId">Title ID</param>
	/// <param name="Rating">Rating for beginning of page</param>
	/// <param name="PageSize">Count of max rows to retrieve for enum</param>
	/// <param name="Spec">Query spec</param>
	/// <returns>StatsReadResponse</returns>
	/// <remarks>
	/// Enumerate list of users starting with specified rating and
	/// including up to the number of rows specified by page size
	/// </remarks>
	public class StatsEnumByRatingRequest : XRLPayload
	{
		public uint  TitleId  = 0;
		public ulong Rating   = 0;
		public uint  PageSize = 0;
		public uint  SpecsLen = 0;
		public StatsSpec[] Specs = null;

		public StatsEnumByRatingRequest(uint title , ulong rating , uint psize,StatsSpec spec)
		{
			TitleId= title;
			Rating=rating;
			PageSize=psize;
			Specs =new StatsSpec[]{spec};
		}

		public StatsEnumByRatingRequest(uint title , ulong rating , uint psize,StatsSpec[] specs)
		{
			TitleId= title;
			Rating=rating;
			PageSize=psize;
			Specs =specs;
		}


		protected override string GetServiceName()
		{
			return "/xstats/xstatenumbyrating.ashx";
		}
		public override void ManualPopulateSlot()
		{
			PopulateSlot(ref Slot);
			Slot.SetClientType(CSGInfo.ClientType.Xenon);
			
			ManualSlotSetup=true;
		}

		new public StatsEnumResponse Execute()
		{
			// Prepare request 
			MemoryStream reqStream = new MemoryStream( 512 );
			this.WriteStream(reqStream);
			ManualPopulateSlot();
				
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);
			// create a streem here and then read all data;
			StatsEnumResponse readResp = (StatsEnumResponse)new StatsEnumResponse().ReadBytes(XErr,xAct.ResponseContents);
			return readResp;
				
		}

		//ExecutStress
		public uint ExecuteStress()
		{
			// Prepare request 
			MemoryStream reqStream = new MemoryStream( 512 );
			this.WriteStream(reqStream);
			ManualPopulateSlot();
				
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);
			// create a streem here and then read all data;
			return xAct.XErr;
				
		}
	}



	public class StatsEnumResponse : WireData
	{

		public uint xResult =0;
		public ushort ResultLen = 0;
		public StatsResultSet[] Result = null;

		public StatsEnumResponse ReadBytes(uint XErr,byte[]  Respdata)
		{
			xResult = XErr;
			if(XResult.Succeeded(XErr))
			{
				MemoryStream RespStream = new MemoryStream(Respdata);
				BinaryReader reader = new BinaryReader(RespStream);
				ResultLen = reader.ReadUInt16();
				Result= new StatsResultSet[ResultLen];
				for(int i=0;i<ResultLen;i++)
				{
					Result[i] = (StatsResultSet)new StatsResultSet().ReadStream(RespStream);
				}
			}
			return this;
		}
	}

	
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\StatsFD.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.LiveService.Stats.StatsDBSim;
using ServerTestFramework.LiveService.Stats.Util;
using xonline.common.config;
using ServerTestFramework.LiveService.Presence;
using xonline.common.service;


namespace ServerTestFramework.LiveService.Stats
{
    /// <summary>
    ///  This class encapsulate the communication between the  test client and the stats FD
    /// </summary>
    public class StatsFD
    {
        public string ServiceName;
        protected int ServiceId =(int)XOService.Stats;
//		
        protected IPEndPoint statsVI =Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd);

        protected FDTransaction xAct = new FDTransaction();  ///object to post data to Stats FD.
        // protected Memstats;  /// object to memory stats simulator.

        public StatsFD()
        {
            //
            // TODO: Add constructor logic here
            //
        }



        public byte[]	GenerateHttpHeader(IPEndPoint Serverip, MemoryStream reqStream,BundledAuthData authData)
        {
            //			if (CrapHeader!=null)				return CrapHeader;
            StringBuilder sbURL;

            sbURL = new StringBuilder();
            sbURL.Append( "POST " );
            sbURL.Append( ServiceName);

            if(authData!=null)
                sbURL.Append( " HTTP/1.1\r\n" );
            else
                sbURL.Append( " HTTP/1.0\r\n" );

            //sbURL.Append( "Expect: 100-continue\r\n");
            sbURL.Append( "Relja: true\r\n");  // This header was requested by SLamb to differentiate tools/tests and real clients
            sbURL.Append( "Connection: Keep-Alive\r\n");
            sbURL.Append( "Host: "+statsVI.Address.ToString()+"\r\n");


            sbURL.Append( "Content-Type: xon/" + ((int)ServiceId).ToString("x")+"\r\n");
            sbURL.Append( "User-Agent: "+((int)ServiceId).ToString("x")+"/0.10.4715\r\n");

            if(authData!=null)
                sbURL.Append(BundledAuthData.HTTP_HEADER_BUNDLED_AUTH_DATA+":"+authData.GetBase64EncodedString()+"\r\n");




            sbURL.Append( "Content-Length: " +  reqStream.Length+"\r\n\r\n");

            System.Text.ASCIIEncoding	AE=new System.Text.ASCIIEncoding();

            byte []CrapHeader=AE.GetBytes(sbURL.ToString());
            return CrapHeader;
        }


        //public Execute()
        /// this function executes the test case and verifyes.
        protected void  PopulateSlot(StatReqBase req,ref CSGInfo Slot)
        {

            Slot.machinePuid = 0x0009FFFFFFFFFFFF;
            Slot.titleId= req.TitleID;
            Slot.titleVersion=1;

            if(!req.IsArbitrated)
            {
                Slot.userPuid0= (req.Users.Length>=1)?req.Users[0]:0;
                Slot.userPuid1=(req.Users.Length>=2)?req.Users[1]:0;
                Slot.userPuid2=(req.Users.Length>=3)?req.Users[2]:0;
                Slot.userPuid3=(req.Users.Length>=4)?req.Users[3]:0;
            }



        }


        // this function posts stats to actual stats FD
        public byte[] PostTOStatsFD(StatReqBase req,ref uint Xerr)
        {
            uint delay=0;
            return PostTOStatsFD(req,ref Xerr,ref delay);
        }

        public byte[] PostTOStatsFD(StatReqBase req,ref uint Xerr,ref uint xdelay)
        {
            Xerr=0;
            MemoryStream reqStream = new MemoryStream( 512 );
            req.GetWireData().WriteStream(reqStream);

            ServiceName = req.GetServiceName();
            byte[]	httpHeader;

            FDTransaction xAct = new FDTransaction();


            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            PopulateSlot(req, ref slot);

            // We don't use CSGInfo.ClientType directly, as we don't want to add an additional dependancy
            // on it to code which uses PostTOStatsFD() and StatsPostReq
            switch (req.PlatformBit)
            {
                case PlatformBit.Xenon:
                    slot.SetClientType(CSGInfo.ClientType.Xenon);
                    break;
                case PlatformBit.PC:
                    slot.SetClientType(CSGInfo.ClientType.PC);
                    break;
                default:
                    throw new ArgumentException("Did not recognize the Request's Platform Bit!", "req.PlatformBit");
            }

            if(req.IsArbitrated)
            {
                xAct.endPoint = Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd_int);
                httpHeader=GenerateHttpHeader(statsVI,reqStream,req.authData);
                xAct.Execute(httpHeader, reqStream,ref slot,false);

            }
            else
            {
                xAct.endPoint = Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd);
                httpHeader=GenerateHttpHeader(statsVI,reqStream,null);
                
                xAct.Execute(httpHeader, reqStream,ref slot,true);

            }


            if( (xAct.XErr != 0) )
            {
                Xerr = xAct.XErr;
            }

            xdelay =xAct.XDelay;


            return xAct.ResponseContents;


        }
        // this function posts  stats to im memory Db

    }

    public  class BaseManager:StatsFD
    {
        public StatsIMDB  Im_Stats  = new StatsIMDB();
        public bool IsAttributeEqual(ref XrlSubAttr t1, ref XrlSubAttr t2, ref string expString)
        {
            if(t1.Info.ID != t2.Info.ID)
            {
                //	throw new StatsException(707,"verify: GetUnitStats invalid AttrID Expected : "+t1.Info.ID+" Received :-"+t2.Info.ID);
                expString="verify: GetUnitStats invalid AttrID Expected : "+t1.Info.ID+" Received :-"+t2.Info.ID;
                return false;
            }
            if(t1.Info.Type != t2.Info.Type)
            {
                //throw new StatsException(707,"verify: GetUnitStats invalid AttrTpye Expected : "+t1.Info.Type+" Received :-"+t2.Info.Type);
                expString="verify: GetUnitStats invalid AttrTpye Expected : "+t1.Info.Type+" Received :-"+t2.Info.Type;
                return false;
            }


            switch (t1.Info.Type)
            {
                case (byte)XrlAttrType.Long:
                    if(((XrlAttrUInt)t1.Data).Data!=((XrlAttrUInt)t2.Data).Data)
                    {
                        //	throw new StatsException(707,"verify: GetUnitStats invalid Data Expected : "+((XrlAttrUInt)t1.Data).Data+" Received :-"+((XrlAttrUInt)t2.Data).Data);
                        expString=	"verify: GetUnitStats invalid Data Expected : "+((XrlAttrUInt)t1.Data).Data+" Received :-"+((XrlAttrUInt)t2.Data).Data;
                        return false;
                    }
                    break;
                case (byte)XrlAttrType.LongLong:
                    if(((XrlAttrULong)t1.Data).Data!=((XrlAttrULong)t2.Data).Data)
                    {
                        //throw new StatsException(707,"verify: GetUnitStats invalid Data Expected : "+((XrlAttrULong)t1.Data).Data+" Received :-"+((XrlAttrULong)t2.Data).Data);
                        expString="verify: GetUnitStats invalid Data Expected : "+((XrlAttrULong)t1.Data).Data+" Received :-"+((XrlAttrULong)t2.Data).Data;
                        return false;
                    }
                    break;
                case (byte)XrlAttrType.Double:
                    if(((XrlAttrDouble)t1.Data).Data!=((XrlAttrDouble)t2.Data).Data)
                    {
                        //throw new StatsException(707,"verify: GetUnitStats invalid Data Expected : "+((XrlAttrDouble)t1.Data).Data+" Received :-"+((XrlAttrDouble)t2.Data).Data);
                        expString= "verify: GetUnitStats invalid Data Expected : "+((XrlAttrDouble)t1.Data).Data+" Received :-"+((XrlAttrDouble)t2.Data).Data;
                        return false;
                    }

                    break;
                case (byte)XrlAttrType.String:
                    if(t1.Info.ID == 4)
                    {
                        if(((XrlAttrString)t1.Data).Data!=((XrlAttrString)t2.Data).Data)
                        {
                            //throw new StatsException(707,"verify: GetUnitStats invalid Data Expected : "+((XrlAttrString)t1.Data).Data+" Received :-"+((XrlAttrString)t2.Data).Data);
                            expString= "verify: GetUnitStats invalid Data Expected : "+((XrlAttrString)t1.Data).Data+" Received :-"+((XrlAttrString)t2.Data).Data;
                            return false;
                        }
                    }
                    else
                    {
                        if(((XrlAttrUTFString)t1.Data).Data!=((XrlAttrUTFString)t2.Data).Data)
                        {
                            //	throw new StatsException(707,"verify: GetUnitStats invalid Data Expected : "+((XrlAttrUTFString)t1.Data).Data+" Received :-"+((XrlAttrUTFString)t2.Data).Data);
                            expString= "verify: GetUnitStats invalid Data Expected : "+((XrlAttrUTFString)t1.Data).Data+" Received :-"+((XrlAttrUTFString)t2.Data).Data;
                            return false;
                        }
                    }

                    break;
            }
            return true;
        }

        public virtual  uint PostTOStatsIMDB(StatsPostReq req)
        {
            Im_Stats.ClearQueue();
            Im_Stats.QueueStatsPost(req);
            uint [] errors=Im_Stats.ExecuteAll();
            return errors[0];

        }
        public virtual  uint PostTOStatsIMDB(XRLSetRequest req)
        {
            Im_Stats.ClearQueue();
            Im_Stats.QueueStatsSet(req);
            uint [] errors=Im_Stats.ExecuteSetAll();
            return errors[0];

        }

        //Verify();
    }

    public class VerifyFlags
    {
        public static int Unit=1;
        public static int Player=2;
        public static int Teams=4;
        public static int Unit_Player=3;
        public static int Unit_Team=5;
        public static int Player_Team=6;
        public static int Unit_Team_Player=7;
        public static int Unit_VerifyGetOnly=8;
    }

    public class TestCaseException : Exception
    {

        public TestCaseException(string message) : base(message)
        {

        }
    }

    public class g_Statobj
    {
        public static TestManager TManager = new TestManager();
    }


    public  class MultiThreadedTestManager :BaseManager
    {
        public uint [] XErr;
        protected StatsPostReq[] requests;
        protected XRLSetRequest[] Setrequests;
        protected int intStartIndex;
        protected int Count;


        override public uint PostTOStatsIMDB(StatsPostReq req)
        {
            //

             Im_Stats.QueueStatsPost(req);
            return 1;

        }

        override public uint PostTOStatsIMDB(XRLSetRequest req)
        {
            //

            Im_Stats.QueueStatsSet(req);
            return 1;

        }
        public MultiThreadedTestManager(StatsIMDB Imdb ,XRLSetRequest[] req ,int Start,int count)
        {
            Im_Stats=Imdb;
            Setrequests =req;
            intStartIndex =Start;
            Count =count;
            XErr = new uint[Count];
        }


        public MultiThreadedTestManager(StatsIMDB Imdb ,StatsPostReq[] req ,int Start,int count)
        {
            Im_Stats=Imdb;
            requests =req;
            intStartIndex =Start;
            Count =count;
            XErr = new uint[Count];
        }
        public void ThreadProc()
        {
            byte[] PostResp= null;

            int eCount=0;
            for( int i=intStartIndex;i<(intStartIndex+Count);i++,eCount++)
            {
                //System.Console.WriteLine("index"+i);
                PostTOStatsIMDB(requests[i]);
                PostResp =PostTOStatsFD(requests[i],ref XErr[eCount]);
                if(XErr[eCount]!=0)
                    System.Console.WriteLine(XErr[eCount]);
            }

            // build PostResponse from



        }

        public void SetThreadProc()
        {

            for( int i=intStartIndex;i<(intStartIndex+Count);i++)
            {
                //System.Console.WriteLine("index"+i);
                PostTOStatsIMDB(Setrequests[i]);
                XRLSetResponse resp = (XRLSetResponse)Setrequests[i].Execute();
                if(resp.xResult!=0)
                 System.Console.WriteLine(resp.xResult);
            }

        }
    }
    /// <summary>
    /// Summary description for TestManager.
    /// </summary>

    public  class TestManager :BaseManager
    {
        public TestManager(){}

        public void ExecuteInMultipleThreadsAndVerify(XRLSetRequest[] req,int reqperthread)
        {
            int TotalNoOFthreads =req.Length%reqperthread==0?(req.Length/reqperthread):(req.Length/reqperthread+1);
            Thread[] TaskThreads= new Thread[TotalNoOFthreads];

            int RequestperThread= reqperthread;

            // create threads...
            // cleare Queue..
            Im_Stats.ClearQueue();
            int startindex=0;
            for(int i=0;i<TotalNoOFthreads;i++)
            {
                MultiThreadedTestManager temp = new MultiThreadedTestManager(Im_Stats,req,startindex,RequestperThread);
                startindex = startindex+RequestperThread;
                TaskThreads[i]=ThreadMaker.CreateThread(temp.SetThreadProc);
                TaskThreads[i].Start();
            }

            //wait till all threads are done.;
            for(int i=0;i<TotalNoOFthreads;i++)
            {
                TaskThreads[i].Join();
            }

            // execute all queued request in the inmemory DB.
            uint [] errors=Im_Stats.ExecuteSetAll();

            VerifyEnumPlayers(req[0].titleId,false);

        }

        public void ExecuteAndVerify(XRLSetRequest[] req,bool verify)
        {
            //bool verify=true;
            //bool verifyAttachment=false;

            for ( int i=0;i< req.Length;i++)
            {
                uint HResultIM =PostTOStatsIMDB(req[i]);
                XRLSetResponse resp = req[i].Execute();

                if(resp.xResult != HResultIM)
                    throw new TestCaseException("Invalid HR Server:"+resp.xResult+" Expected :"+HResultIM);



            }


            if(verify ==true)
                VerifyEnumPlayers(req[0].titleId,false);

        }

        public void ExecuteAndVerify(XRLResetUser req,uint xerror,bool verify)
        {


            XRLResponse resp = req.Execute();
            if(resp.xResult != xerror)
                throw new TestCaseException("Invalid HR Server:"+resp.xResult+" Expected :"+xerror);

            if(resp.xResult!=HResult.S_OK)
                return ;
            Im_Stats.PlayerDb.ResetUser(req.titleId,req.LBType,req.userPuid);


            if(verify ==true)
                VerifyEnumPlayers(req.titleId,false);

        }

        public void ExecuteAndVerify(StatsPostReq[] req,int VerifyFlag)
        {
            ExecuteAndVerify(req,VerifyFlag,true,false);
        }
        public void ExecuteAndVerify(StatsPostReq[] req,int VerifyFlag,bool VerifyOnEveryPost)
        {
            ExecuteAndVerify(req,VerifyFlag,VerifyOnEveryPost,false);
        }

        public void ExecuteInMultipleThreadsAndVerify(StatsPostReq[] req,int VerifyFlag,int reqperThread)
        {
            int TotalNoOFthreads =req.Length%reqperThread==0?(req.Length/reqperThread):(req.Length/reqperThread+1);
            Thread[] TaskThreads= new Thread[TotalNoOFthreads];

            int RequestperThread= req.Length/TotalNoOFthreads;

            // create threads...
            // cleare Queue..
            Im_Stats.ClearQueue();
            int startindex=0;
            for(int i=0;i<TotalNoOFthreads;i++)
            {
                MultiThreadedTestManager temp = new MultiThreadedTestManager(Im_Stats,req,startindex,RequestperThread);
                startindex = startindex+RequestperThread;
                TaskThreads[i]=ThreadMaker.CreateThread(temp.ThreadProc);
                TaskThreads[i].Start();
            }

            //wait till all threads are done.;
            for(int i=0;i<TotalNoOFthreads;i++)
            {
                TaskThreads[i].Join();
            }

            // execute all queued request in the inmemory DB.
            uint [] errors=Im_Stats.ExecuteAll();

            if((VerifyFlag & VerifyFlags.Player)==VerifyFlags.Player)
            {

                VerifyEnumPlayers(req[0].data.TitleID,false);

            }


        }
        public void HandleAttachment(byte[] response, uint titleid)
        {
            XRLSetResponse SetResp = (XRLSetResponse)new XRLSetResponse().ReadBytes(XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT,response);


            for( int i=0;i<SetResp.SetRef.Length;i++)
            {
                bool found= false;
                PlayerTeamLb lb = (PlayerTeamLb) Im_Stats.PlayerDb._playerLbs[new TitleLbKey(titleid, SetResp.SetRef[i].LeaderBoardId)];
                if(lb==null)
                    throw new StatsException(HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,"Invalid Title : "+titleid);

                lb.Rerank();
                for( int j=0;j<lb._rankedEntries.Count;j++)
                {
                    if(j>10)
                    {
                        throw new StatsException(707,"ERROR :Usere should not be qualified"+SetResp.SetRef[i].UserPuid);
                    }
                    PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)	lb._rankedEntries[j];
                    if(PalyerEntry._ulUserId==SetResp.SetRef[i].UserPuid)
                    {
                        PalyerEntry._AttachmentPath = SetResp.Token.PathName;
                        found=true;
                    }
                }
                if(!found)
                    throw new StatsException(707,"ERROR :Usere should not be qualified"+SetResp.SetRef[i].UserPuid);

            }
            XRLCommitAttachment req= new XRLCommitAttachment(titleid,50,50,SetResp.Token.PathNameLen,SetResp.Token.PathName,SetResp.SetRefLen,SetResp.SetRef);
            XRLResponse commitResp = req.Execute();

            if(commitResp.xResult!=0)
                throw new StatsException(commitResp.xResult,"ERROR :Commit failed");

        }


        public void ExecuteAndVerify(StatsPostReq[] req,int VerifyFlag,bool VerifyOnEveryPost,bool Attachments)
        {
            bool verify=true;
            bool verifyAttachment=false;

            for ( int i=0;i< req.Length;i++)
            {
                byte[] PostResp= null;
                uint HResultFD=0;
                uint HResultIM =PostTOStatsIMDB(req[i]); //TODO: Edit to make expected value be THE expected value... no special cases after this runs.
                PostResp =PostTOStatsFD(req[i],ref HResultFD);

                // build PostResponse from

                // Arb returns immediately with S_OK
                if(req[i].IsArbitrated == true &&  HResultIM == HResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
                {
                    Global.RO.Warn("Ignoring CAN_UPLOAD_ATTACHMENT for Arbitrated request");
                }
                else if(!Attachments && HResultFD != HResultIM)
                    throw new TestCaseException("Invalid HR Server:"+HResultFD+" Expected :"+HResultIM);

                if(Attachments && req[i].IsXenon)
                {
                    if(HResultFD !=0 && PostResp.Length !=0)
                        throw new Exception("StatsPost should not send any response even if user qulafies for Att  for 360 title");
                }
                else if(Attachments && HResultFD !=0 )
                {
                    
                    if(Attachments && HResultFD == HResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
                    {
                        HandleAttachment(PostResp,req[i].data.TitleID);
                        verifyAttachment= true;
                        continue;
                    }
                    else
                    {
                        throw new TestCaseException("Invalid HR Server:"+HResultFD+" Expected :"+HResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT);
                    }
                   
                }

                // TODO: Make this fail in the multiple call scenario
                // Negative Testcase
                else if(HResultFD !=0 && HResultFD == HResultIM)
                {
                    System.Console.WriteLine("Error Verified Hresult :"+HResultFD);
                    verify= false; // This means even calls that succeeded won't be verified! // No verification: automatic pass  o.o
                    continue;
                }


            }

            // TODO: Move 360 Verifcation code from ReplaceUserStats into common code... just check IsXenon Flag... :D
            if(verify)
            {
                if((VerifyFlag & VerifyFlags.Player)==VerifyFlags.Player)
                {

                    VerifyEnumPlayers(req[0].data.TitleID,verifyAttachment);

                }
            }




        }

        // Also the negative test case?  o.O  -- Requires that that LB be completely empty :O
        public void ExecuteAndVerifyBadReq(StatsPostReq[] req,uint XError,LeaderboardInfo[] PlayerLBs)
        {
            for ( int i=0;i< req.Length;i++)
            {
                uint HResultFD=0;
                PostTOStatsFD(req[i],ref HResultFD);

                if(HResultFD != XError)
                    throw new TestCaseException("Invalid HR Server:" + HResultFD + " Expected :" + XError);


            }

            // verify that LB is empty
            if(PlayerLBs!=null && PlayerLBs.Length>0)
            {
                for(int idx=0;idx<PlayerLBs.Length;idx++)
                {
                    IsPlayerLbEmpty(req[0].data.TitleID,PlayerLBs[idx]._uiLbId,PlayerLBs[idx]._ServerIndex);
                }

            }


        }

        public void IsPlayerLbEmpty(uint title, uint LBID,int Serverindex)
        {
            XRLGetRequest _req = new XRLGetRequest(1);
            _req.AddGetData(title,0,LBID);
            XRLGetResponse _resp=_req.Execute();

            XrlAttrUInt LBSize  = (XrlAttrUInt) _resp.RespData[0].AttList.SubAttr[0].Data;

            if(LBSize !=null && LBSize.Data!=0)
                throw new StatsException(707,"LB "+LBID+"Should be empty but has "+LBSize.Data+"records");
        }
        
        public bool CompareEnumUserEntry(EnumLBUserdata user,PlayerTeamLbEntry player,ref string Excepstring,bool Attachment)
        {

            if(user.Userdata.UserID != player._ulUserId)
            {
                Excepstring = "verify: EnumUserStats Invalid USer expected u1: "+player._ulUserId+" Received :"+user.Userdata.UserID;
                return false;
            }

            if(user.Userdata.Rating != (ulong)player._lRating)
            {
                Excepstring = "verify: EnumUserStats Rating expected u1: "+player._lRating+" Received :"+user.Userdata.Rating;
                return false;
            }

            for(int i=0;i<user.AttList.SubAttr.Length;i++)
            {
                XrlSubAttr tmp= user.AttList.SubAttr[i];
                XrlSubAttr tparam= (XrlSubAttr)player._stats[(short)tmp.Info.ID];

                if(tparam ==null)
                {
                    if(tmp.Info.ID== SpecialAttrib.AttachmentPathName)
                    {
                        string pathnme= Encoding.UTF8.GetString(player._AttachmentPath);
                        XrlAttrUTFString tempStr= (XrlAttrUTFString)tmp.Data;
                        if(pathnme !=  tempStr.Data)
                        {
                            Excepstring = "verify: EnumUserStats invalid pathname  ";
                            return false;
                        }
                        else
                            return true;

                    }
                    else if(tmp.Info.Type ==(byte)XrlAttrType.None && tmp.Data==null)
                    {
                        return true;
                    }
                    else
                    {
                        Excepstring = "verify: EnumUserStats invalid Attribute : "+tmp.Info.ID;
                        return false;
                    }
                }

                if(!IsAttributeEqual(ref tparam,ref tmp,ref Excepstring))
                    return false;



            }




            return true;
        }

        public void VerifyEnumPlayers(uint title, bool attachment)
        {
            foreach(TitleLbKey  tlbkey in Im_Stats.PlayerDb._playerLbs.Keys)
            {
                PlayerTeamLb lb = (PlayerTeamLb) Im_Stats.PlayerDb._playerLbs[tlbkey];
                if(lb._uiTitleId==title)
                {
                    // get the first user and create attrib list
                    PlayerTeamLbEntry tmp = null;
                    if (lb._rankedEntries.Count > 1)
                    {
                        tmp = (PlayerTeamLbEntry)lb._rankedEntries[0];
                    }
                    else
                    {
                        if (lb._lbEntries.Keys.Count > 1)
                        {
                            IEnumerator keyEnum = lb._lbEntries.Keys.GetEnumerator();
                            keyEnum.MoveNext(); // Move to the first entry in the collection

                            tmp = (PlayerTeamLbEntry)lb._lbEntries[ (ulong) keyEnum.Current ];
                        }
                    }

                    if (tmp == null)
                    {
                        tmp = new PlayerTeamLbEntry(1);
                    }

                    ArrayList temp = new ArrayList();
                    foreach(short Statid in tmp._stats.Keys)
                    {
                        temp.Add((ushort)Statid);
                    }

                    if (attachment)
                    {
                        temp.Add((ushort)SpecialAttrib.AttachmentPathName);
                    }

                    ushort[] attribs = (ushort[]) temp.ToArray(typeof(ushort));

                    ArrayList enumlist = lb.GetRankedList();

                    ulong totalEntries = (ulong)lb._rankedEntries.Count;
                    if(totalEntries == 0)
                    {
                        XRLEnumLBRequest _req = new XRLEnumLBRequest(lb._uiTitleId, lb._uiLbId, 1, 0, 50, attribs);
                        XRLEnumLBResponse _resp = _req.ExecuteEx();
                        if (_resp.RepUserLBLen != 0)
                        {
                            throw new StatsException(707, "verify: EnumUserStats Expected Record count: " + totalEntries + " Received: " + _resp.RepUserLBLen);
                        }
                    }

                    ulong mindex           = 0;
                    int   CurrUUidx        = 0;
                    int   TotalEntriesSeen = 0;

                    uint entriesPerRequest = 50;
                    for ( ulong Start = 0 ; Start < totalEntries ; Start += entriesPerRequest )
                    {
                        XRLEnumLBRequest _req = new XRLEnumLBRequest(lb._uiTitleId, lb._uiLbId, (Start + 1), 0, entriesPerRequest, attribs);
                        XRLEnumLBResponse _resp = _req.ExecuteEx();

                        ulong ExpectedEntries = totalEntries - Start;
                        if (ExpectedEntries > entriesPerRequest)
                        {
                            ExpectedEntries = entriesPerRequest;
                        }

                        //Global.RO.Warn("st:"+Start+"totalEntries"+totalEntries);

                        // Give up if we didn't get the expected number of entries back
                        if ( ExpectedEntries != _resp.RepUserLBLen )
                        {
                            throw new StatsException(707, "verify: EnumUserStats Expected Record count: " + ExpectedEntries + " Received: " + _resp.RepUserLBLen);
                        }

                        // TODO: erh, wha?
                        //code under construction

                        RankedList rlist = (RankedList)enumlist[CurrUUidx];
                        for( ulong idx = 0 ; idx < ExpectedEntries ; idx++, mindex++ )
                        {
                            // Get the next "page" if we've walked off the edge of the previous one.

                         // if ( idxRList >= (ulong)rlist._Entries.Count )
                            if ( mindex >= (ulong)TotalEntriesSeen + (ulong)rlist._Entries.Count )
                            {
                                TotalEntriesSeen += rlist._Entries.Count;

                                // mindex will never be greater than the totalEntries... so we'll never hit this when there's nothing to find
                                rlist = (RankedList)enumlist[ ++CurrUUidx ];
                            }

                            EnumLBUserdata Udata = _resp.RepUserLB[idx];

                            // Verify the "page" we are looking at contains the requested entry
                         // if ( idxRList >= (ulong)rlist._Entries.Count ) // seems like this should never ever ever be false, the first if should catch it.
                            if ( mindex >= (ulong)TotalEntriesSeen && mindex < (ulong)TotalEntriesSeen + (ulong)rlist._Entries.Count)
                            {
                                string msg = "";
                                bool found = false;

                                // If both are ranked lists, they should exactly parallel eachother right?
                                for (int idy = 0; idy < rlist._Entries.Count; idy++)
                                {
                                    if (CompareEnumUserEntry(Udata, (PlayerTeamLbEntry)rlist._Entries[idy], ref msg, attachment))
                                    {
                                        found = true;
                                        break;
                                    }
                                }

                                if (!found)
                                {
                                    // If we didn't find one of the entries, msg will contain the last error reported (all others get glossed over)
                                    throw new StatsException(707, msg);
                                }
                            }
                            else
                            {
                                throw new StatsException(707, "verify: EnumUserStats Invalid user: " + Udata.Userdata.UserID);
                            }
                        }
                    }
                }

                //XRLEnumLBRequest _req = new XRLEnumLBRequesttitleid,lbtype,0,0,10,1,

            }
        }

        public void VerifyGetPlayers(XRLGetRequest  req)
        {
            VerifyGetPlayers(req, HResult.S_OK);
        }
        public void VerifyGetPlayers(XRLGetRequest  req, uint ExpectedError)
        {
            XRLGetResponse resp = req.Execute();
            VerifyGetPlayersRsp(req, resp, ExpectedError);
        }

        public void VerifyGetPlayersRsp(XRLGetRequest  req,XRLGetResponse  resp, uint ExpectedError)
        {
            

            if(resp.xResult != HResult.S_OK)
            {
                if(resp.xResult !=ExpectedError)
                    throw new StatsException(resp.xResult,"Unexpected HR : "+resp.xResult);
                else
                    return;
            }

            if(req.ReqData.Length != resp.RespData.Length)
                throw new StatsException(707,"Expected Record count is "+req.ReqData.Length+" But Received "+resp.RespData.Length);

            for( int i=0; i<req.ReqData.Length;i++)
            {
                GetRequestData data = req.ReqData[i];
                GetResponseData rpsdata = resp.RespData[i];
                // make sure that correct recode is availaible

                if(data.m_dwLeaderBoardType != rpsdata.Resphead.dwLeaderBoardType)
                    throw new StatsException(707,"Expected LB Type is "+data.m_dwLeaderBoardType+" But Received "+rpsdata.Resphead.dwLeaderBoardType);
                if(data.m_qwUserId != rpsdata.Resphead.userPuid)
                    throw new StatsException(707,"Expected User is "+data.m_qwUserId+" But Received "+rpsdata.Resphead.userPuid);
                if(data.AttribId.Length != rpsdata.AttList.SubAttr.Length)
                    throw new StatsException(707,"Expected Attrib Count is "+data.AttribId.Length+" But Received "+rpsdata.AttList.SubAttr.Length);

                TitleLbKey tlbkey = new TitleLbKey(data.m_dwTitleId,data.m_dwLeaderBoardType);
                PlayerTeamLb lb = (PlayerTeamLb) Im_Stats.PlayerDb._playerLbs[tlbkey];

                if(lb ==null)
                {
                    XrlSubAttr[] SubAttr =rpsdata.AttList.SubAttr;
                    for(int attidx=0;attidx<SubAttr.Length;attidx++)
                    {
                        if((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
                            throw new StatsException(707,"Invalid Type Expected None");
                        if( SubAttr[attidx].Data != null)
                            throw new StatsException(707,"Invalid data Expected null");
                    }
                    return ;
                }

                if(lb._lbEntries.Contains(data.m_qwUserId))
                {
                    PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._lbEntries[data.m_qwUserId];
                    XrlSubAttr[] SubAttr =rpsdata.AttList.SubAttr;
                    for(int attidx=0;attidx<SubAttr.Length;attidx++)
                    {
                        if(SubAttr[attidx].Info.ID == SpecialAttrib.AttachmentPathName)
                        {
                            if((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.String)
                                throw new StatsException(707,"Invalid Type Expected string");
                            XrlAttrUTFString tmp  = (XrlAttrUTFString)SubAttr[attidx].Data;
                            string pathnme= Encoding.UTF8.GetString(PalyerEntry._AttachmentPath);
                            if(	tmp.Data != pathnme)
                                throw new StatsException(707,"Invalid Attachemnt  Expected "+pathnme+" Received "+tmp.Data);
                        }
                        if(SubAttr[attidx].Info.ID == SpecialAttrib.AttachmentSize)
                        {
                            if((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.Long)
                                throw new StatsException(707,"Invalid Type Expected int");
                            XrlAttrUInt tmp = (XrlAttrUInt) SubAttr[attidx].Data;
                            if(tmp.Data!=PalyerEntry._AttachmentSize)
                                throw new StatsException(707,"Invalid Attachemnt size  Expected "+PalyerEntry._AttachmentSize+" Received "+tmp.Data);
                        }
                        else if (SubAttr[attidx].Info.ID == SpecialAttrib.Rating)
                        {
                            if((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.LongLong)
                                throw new StatsException(707,"Invalid Type Expected long");
                            XrlAttrULong tmp =(XrlAttrULong) SubAttr[attidx].Data;
                            if(tmp.Data!=(ulong)PalyerEntry._lRating)
                                throw new StatsException(707,"Invalid rating  Expected "+PalyerEntry._lRating+" Received "+tmp.Data);

                        }
                        else if (SubAttr[attidx].Info.ID == SpecialAttrib.Rank)
                        {
                            if((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.LongLong)
                                throw new StatsException(707,"Invalid Type Expected long");
                            XrlAttrULong tmp =(XrlAttrULong) SubAttr[attidx].Data;
                            if(tmp.Data!=PalyerEntry._uiRank)
                                throw new StatsException(707,"Invalid rank  Expected "+PalyerEntry._uiRank+" Received "+tmp.Data);

                        }
                        else if (SubAttr[attidx].Info.ID == SpecialAttrib.Nickname)
                        {
                            if((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.String)
                                throw new StatsException(707,"Invalid Type Expected string");
                            XrlAttrString  tmp =(XrlAttrString) SubAttr[attidx].Data;
                            if(tmp.Data!=PalyerEntry._NickName)
                                throw new StatsException(707,"Invalid nickname  Expected "+PalyerEntry._NickName+" Received "+tmp.Data);

                        }
                        else if (SubAttr[attidx].Info.ID == SpecialAttrib.LeaderboardSize)
                        {
                            if((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.Long)
                                throw new StatsException(707,"Invalid Type Expected int");
                            XrlAttrUInt tmp =(XrlAttrUInt) SubAttr[attidx].Data;
                            if(tmp.Data!=lb._lbEntries.Count)
                                throw new StatsException(707,"Invalid LB Size  Expected "+lb._lbEntries.Count+" Received "+tmp.Data);

                        }
                        else if(PalyerEntry._stats.Contains((short)SubAttr[attidx].Info.ID))
                        {
                            XrlSubAttr PlayerAttr  = (XrlSubAttr)PalyerEntry._stats[(short)SubAttr[attidx].Info.ID];
                            string error= null;
                            if(!IsAttributeEqual(ref PlayerAttr,ref SubAttr[attidx],ref error))
                                throw new StatsException(707,error);

                        }
                        else
                        {
                            if((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
                                throw new StatsException(707,"Invalid Type Expected None");
                            if( SubAttr[attidx].Data != null)
                                throw new StatsException(707,"Invalid data Expected null");
                        }


                        }

                }
                else
                {
                    // user does not exist make sure that ALL attributes are NULL.

                }

            }

        }

        public XRLEnumLBResponse ExecuteAndVerifyEnumPlayers(XRLEnumLBRequest _req, uint Expectedentries)
        {
                XRLEnumLBResponse _resp=_req.ExecuteEx();
                if(Expectedentries !=_resp.RepUserLBLen)
                    throw new StatsException(707,"verify: EnumUserStats Expected Record count: "+Expectedentries+" Received :"+_resp.RepUserLBLen);

                TitleLbKey  tlbkey = new TitleLbKey(_req.TitleId,_req.LBType);
                PlayerTeamLb lb = (PlayerTeamLb) Im_Stats.PlayerDb._playerLbs[tlbkey];

                if(lb == null)
                {// LEaderboard is empty.
                    if(_resp.RepUserLBLen!=0)
                        throw new StatsException(707,"verify: EnumUserStats Expected Record count: 0 Received :"+_resp.RepUserLBLen);

                }
                lb.Rerank();
                ArrayList enumlist = lb.GetRankedList();
                int TotalSize = lb._rankedEntries.Count;
                // Find correct entries to compare.
                int CurrUUidx =0;
                if( _req.IsPivotUser==1)
                {
                    //find the user.
                    int idx=0;
                    int totalAbove=0;
                    bool found=false;
                    for(;idx<enumlist.Count && !found;idx++)
                    {
                        RankedList  rlist=(RankedList)	enumlist[idx];
                        int ridx=0;
                        for(;ridx<rlist._Entries.Count;ridx++)
                        {
                            PlayerTeamLbEntry player =(PlayerTeamLbEntry)rlist._Entries[ridx];
                            if(player._ulUserId==_req.Pivot)
                            {
                                found=true;
                                totalAbove = ridx;
                                break;
                            }
                        }

                    }
                    if(found)
                    {

                        for(int ydx=idx-2;ydx>=0;ydx--)
                        {
                            totalAbove +=((RankedList)enumlist[ydx])._Entries.Count;
                            
                            if(totalAbove >= _req.PageSize/2)
                            {
                                if((TotalSize-ydx)< _req.PageSize) 
                                {
                                    int tmpidx = (int)(ydx-(int)(_req.PageSize-(TotalSize-ydx)));
                                    if(tmpidx>totalAbove)
                                        CurrUUidx=tmpidx;
                                }
                                else
                                    CurrUUidx=ydx;
                                break;
                            }
                        }
                    }
                    else
                    {
                        //user not fond error
                        if(_resp.RepUserLBLen!=0)
                            throw new StatsException(707,"verify: EnumUserStats Expected Record count: 0 Received :"+_resp.RepUserLBLen);

                    }
                }
                else
                {
                    // find the rank entry.
                    int rank=0;
                    for(int idx=0;idx<enumlist.Count;idx++)
                    {
                        rank +=((RankedList)enumlist[idx])._Entries.Count;
                        if((ulong)rank>=_req.Pivot)
                        {
                            CurrUUidx=idx;
                            break;
                        }
                    }
                }


                for(ulong idx=0;idx<Expectedentries;idx++)
                {
                    EnumLBUserdata Udata=_resp.RepUserLB[idx];
                    RankedList  rlist=(RankedList)	enumlist[CurrUUidx];
                    if(Udata.Userdata.Rating<(ulong)rlist.Rating)
                    {
                        CurrUUidx++;
                        rlist=(RankedList)	enumlist[CurrUUidx];
                    }

                    if(Udata.Userdata.Rating==(ulong)rlist.Rating)
                    {
                        bool found=false;
                        string msg="";
                        for (int idy=0;idy<rlist._Entries.Count;idy++)
                        {

                            if(CompareEnumUserEntry(Udata,(PlayerTeamLbEntry)rlist._Entries[idy],ref msg,false))
                            {
                                found=true;
                                break;
                            }
                        }
                        if(!found)
                            throw new StatsException(707,msg);

                    }
                    else
                        throw new StatsException(707,"wrong user "  );
                }
                return _resp;

                //XRLEnumLBRequest _req = new XRLEnumLBRequesttitleid,lbtype,0,0,10,1,

            }
    }






}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\StatsRead.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using ServerTestFramework;
using System.Threading;
using System.ComponentModel;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using xonline.common.config;
using ServerTestFramework.LiveService.FakeSG;

namespace ServerTestFramework.LiveService.Stats
{
	/// <summary>
	/// Summary description for StatsRead.
	/// </summary>
	public class StatsSpec : WireData
	{
		public uint ViewId;
		public uint ColumnIdsLen = 0;
		public ushort[] ColumnIds = null;

		public StatsSpec(uint view ,ushort[] columns)
		{
			ViewId= view;
			ColumnIds=columns;

		}

		public StatsSpec(uint view ,uint columncount,ushort[] columns)
		{
			ViewId= view;
			ColumnIdsLen=columncount;
			ColumnIds=columns;
			this.ManualArraySize=true;

		}
	}

	public class StatsReadRequest : XRLPayload
	{
		public uint TitleId;
		public uint UsersLen;
		public ulong[] Users = null;
		public uint SpecsLen;
		public StatsSpec[] Specs = null;

		public StatsReadRequest(uint title, ulong[] puids ,StatsSpec[] statspecs)
		{
			TitleId=title;
			Users=puids;
			Specs=statspecs;

		}

		public StatsReadRequest(uint title,uint usercount, ulong[] puids ,uint speccount,StatsSpec[] statspecs)
		{
			TitleId=title;
			UsersLen=usercount;
			Users=puids;
			SpecsLen=speccount;
			Specs=statspecs;
			this.ManualArraySize=true;

		}

		protected override string GetServiceName()
		{
			return "/xstats/xstatread.ashx";
		}
		
		public override void ManualPopulateSlot()
		{
			PopulateSlot(ref Slot);
			Slot.SetClientType(CSGInfo.ClientType.Xenon);
			
			ManualSlotSetup=true;
		}

		

		new public StatsReadResponse Execute()
		{
			// Prepare request 
			MemoryStream reqStream = new MemoryStream( 512 );
			this.WriteStream(reqStream);
			ManualPopulateSlot();
				
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);
			// create a streem here and then read all data;
			StatsReadResponse readResp = (StatsReadResponse)new StatsReadResponse().ReadBytes(XErr,xAct.ResponseContents);
			return readResp;
				
		}



		public uint ExecuteStress()
		{
			// Prepare request 
			MemoryStream reqStream = new MemoryStream( 512 );
			this.WriteStream(reqStream);
			ManualPopulateSlot();
				
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);
			// create a streem here and then read all data;
			
			return xAct.XErr;
				
		}


	}


	public class StatsReadResponse : WireData
	{
		public uint xResult =0;
		public uint ResultsLen = 0;
		public StatsResultSet[] Results = null;

		public StatsReadResponse ReadBytes(uint XErr,byte[]  Respdata)
		{
			xResult = XErr;
			if(XResult.Succeeded(XErr))
			{

				MemoryStream RespStream = new MemoryStream(Respdata);
				BinaryReader reader = new BinaryReader(RespStream);
				ResultsLen= reader.ReadUInt32();
				Results = new StatsResultSet[ResultsLen];
				for(int count =0 ; count< ResultsLen; count++ )
				{
					Results[count] = (StatsResultSet)new StatsResultSet().ReadStream(RespStream);
					
				}
					
			}
			return this;
		}
	}


	public class StatsResultSet : WireData
	{
		public ulong ViewId;
		public uint ViewSize = 0;
		public uint RowsLen = 0;
		public StatsRow[] Rows = null;
	}

	public class StatsRow : WireData
	{
		public ulong Puid = 0;
		public uint  Rank   = 0;
		public ulong Rating = 0;
		public uint GamerTagLen= 0;
		public string GamerTag = null;
		public uint ColumnsLen = 0;
		public XrlSubAttr[] Columns = null;

		public override WireData ReadStream(BinaryReader binaryReader)
		{
			Puid= binaryReader.ReadUInt64();
			Rank= binaryReader.ReadUInt32();
			Rating=binaryReader.ReadUInt64();
			GamerTagLen=binaryReader.ReadUInt32();
			byte[] rawBytes = binaryReader.ReadBytes( (int)GamerTagLen );
			GamerTag = utf8.GetString( rawBytes );
			ColumnsLen=binaryReader.ReadUInt32();
			Columns = new XrlSubAttr[ColumnsLen];
			for(int count=0;count<ColumnsLen;count++)
			{
				Columns[count]= (XrlSubAttr)new XrlSubAttr(true).ReadStream(binaryReader);
			}

			return this;
		}
	}




}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\XRLCommitAttachment.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using xonline.common.config;
using xonline.common.service;


namespace ServerTestFramework.LiveService.Stats
{
	/// <summary>
	///
	/// </summary>
	public class XRLCommitAttachment:XRLPayload
	{
		public uint Titleid;
		public uint AttSize;
		public uint AttSizeUnComp;
		public ushort PathNameLen;
		public ushort SetRefDataLen;
		public byte[] PathName;
		public SetDataReference[] SetRefData;
		bool Truncate= false;

		public XRLCommitAttachment(uint title,uint SizeOfAtt,uint SizeOfAttUncomp, ushort PathLen,byte[] Path,ushort RefLen,SetDataReference[] RefData)
		{
			Titleid =title;
			AttSize =SizeOfAtt;
			AttSizeUnComp=SizeOfAttUncomp;
			PathNameLen=PathLen;
			SetRefDataLen=RefLen;
			PathName=Path;
			SetRefData=RefData;
			ServiceId=XOService.Stats;

		}
		public XRLCommitAttachment(uint title,uint SizeOfAtt,uint SizeOfAttUncomp, ushort PathLen,byte[] Path,ushort RefLen,SetDataReference[] RefData ,bool truncate)
		{
			Titleid =title;
			AttSize =SizeOfAtt;
			AttSizeUnComp=SizeOfAttUncomp;
			PathNameLen=PathLen;
			SetRefDataLen=RefLen;
			PathName=Path;
			SetRefData=RefData;
			Truncate=truncate;
			ServiceId=XOService.Stats;

		}

		protected override string GetServiceName()
		{
			return "/xstats/xstatscommitatt.ashx";
		}

		protected void WriteTruncatedStream(MemoryStream reqStream)
		{
			BinaryWriter bWriter= new BinaryWriter(reqStream);
			bWriter.Write(Titleid);
			bWriter.Write(AttSize);
			bWriter.Write(AttSizeUnComp);
			bWriter.Write(PathNameLen);
			bWriter.Write(SetRefDataLen);

		}

		new public XRLResponse Execute()
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			if(Truncate==true)
			{
				WriteTruncatedStream(reqStream);
			}
			else
			{
				WriteStream(reqStream);
			}

			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);

			//if(bRet)
			{
				XRLResponse resp = new XRLResponse(XErr);
				return resp;
			}

			//return( null );

		}

	}



	public class XRLResponse
	{
		public uint xResult =0;
		public XRLResponse()
		{
		}
		public XRLResponse(uint err)
		{
			xResult = err;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\XRLComp.cs ===
using System;
using System.Net;
using System.IO;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.StatsDBSim;
using xonline.common.config;


namespace ServerTestFramework.LiveService.Stats
{
	/// <summary>
	/// Summary description for XRLComp.
	/// </summary>
	public class ReqCompCreateLb :XRLPayload
	{
		public uint     _uiTitleId      = 0;
		public uint     _uiTemplateId   = 0;
		public ReqCompCreateLb(uint title,uint tempid)
		{
			_uiTitleId=title;
			_uiTemplateId= tempid;
		}

		protected override string GetServiceName()
		{
			return "/xstats/xstatscompcreatelb.ashx";
		}

		public RepCompCreateLb GetResponse()
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );

			WriteStream(reqStream);

			IPEndPoint ippiont=Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd_int);
			bool bRet = InternalExecute(ippiont,reqStream);

			if(XErr != 0)
				throw new StatsException(XErr,"RepCompCreateLb failed");

			RepCompCreateLb resp = (RepCompCreateLb)new RepCompCreateLb().ReadBytes(xAct.ResponseContents);
			return resp;


		}
	}

	public class RepCompCreateLb :WireData
	{
		public uint     _uiLbId     = 0;
	}

	public class ReqCompDeleteLb :XRLPayload
	{
		public uint     _uiTitleId      = 0;
		public uint     _uiLbId         = 0;
		public ReqCompDeleteLb(uint title,uint lbid)
		{
			_uiTitleId= title;
			_uiLbId=lbid;
		}
		protected override string GetServiceName()
		{
			return "/xstats/xstatscompdeletelb.ashx";
		}

		public uint GetResponse()
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );

			WriteStream(reqStream);

			IPEndPoint ippiont=Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd_int);
			bool bRet = InternalExecute(ippiont,reqStream);



			if(XErr != 0)
				throw new StatsException(XErr,"RepCompCreateLb failed");

			return 0;


		}



	}

	public class ReqFindRating :XRLPayload
	{
		public uint     _uiTitleId      = 0;
		public uint     _uiLbId         = 0;
		public long     _lRating        = 0;
		public ReqFindRating(uint title,uint lbid,long rating)
		{
			_uiTitleId=title;
			_uiLbId =lbid;
			_lRating=rating;
		}
		protected override string GetServiceName()
		{
			return "/xstats/xstatsfindrating.ashx";
		}

		public RepFindRating GetResponse()
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );

			WriteStream(reqStream);

			IPEndPoint ippiont=Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd_int);
			bool bRet = InternalExecute(ippiont,reqStream);

			if(XErr != 0)
				throw new StatsException(XErr,"RepCompCreateLb failed");

			RepFindRating resp = (RepFindRating)new RepFindRating().ReadBytes(xAct.ResponseContents);
			return resp;


		}

	}

	public class RepFindRating :WireData
	{
		public ulong    _ulPuid     = 0;
		public uint     _uiRank     = 0;
		public long     _lRating    = 0;

	}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\PlatformVisibleLeaderboard.cs ===
﻿using System;
using System.IO;
using System.Net;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Runtime.Serialization;

using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.Database;

namespace ServerTestFramework.LiveService.Stats
{
    public class t_PlatformVisibleLeaderboard
    {
        public t_PlatformVisibleLeaderboard()
        {
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
            {
                SqlCommand Cmd = npdb.CreateCommand();
                Cmd.CommandText = "SELECT * FROM sys.tables WHERE name = 't_stats_platform_visible_leaderboards'";
                Cmd.CommandType = CommandType.Text;

                // Execute the command
                if (null == npdb.ExecuteScalar(Cmd))
                    throw new Exception("t_stats_platform_visible_leaderboards table not found in NPDB");
            }
            finally
            {
                npdb.Close();
            }
        }

        //Returns row count that match the given Title ID
        public int RowCount(int i_title_id)
        {
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
            {
                SqlCommand Cmd = npdb.CreateCommand();
                Cmd.CommandText = "SELECT COUNT(*) FROM t_stats_platform_visible_leaderboards WHERE i_title_id =" + i_title_id;
                Cmd.CommandType = CommandType.Text;

                // Execute the command
                return (int)npdb.ExecuteScalar(Cmd);
            }
            finally
            {
                npdb.Close();
            }
        }

        //Returns row count that match all fields values given
        public int RowCount(int i_title_id, int i_lb_id, string vc_locale, int si_rating_attr_id, byte ti_flags, byte ti_type, byte ti_format, string vc_name, string vc_rating)
        {
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            short si_rating_short = (short)si_rating_attr_id;

            try
            {
                SqlCommand Cmd = npdb.CreateCommand();
                Cmd.CommandText = String.Format("SELECT COUNT(*) FROM t_stats_platform_visible_leaderboards WHERE i_title_id = {0} AND i_lb_id = {1} AND vc_locale = '{2}' AND ti_flags = {3} AND ti_type = {4} AND ti_format = {5} AND vc_name = '{6}' AND vc_rating = '{7}' AND si_rating_attr_id = {8}", i_title_id, i_lb_id, vc_locale, ti_flags, ti_type, ti_format, vc_name, vc_rating, si_rating_short);
                Cmd.CommandType = CommandType.Text;

                // Execute the command
                return (int)npdb.ExecuteScalar(Cmd);
            }
            finally
            {
                npdb.Close();
            }
        }

        //Insert data to table using sproc - p_stats_platform_visible_leaderboard_add and NOT reloads in-memory DB using Xmgmt
        public void insert(int i_title_id, int i_lb_id, string vc_locale, short si_rating_attr_id, byte ti_flags, byte ti_type, byte ti_format, string vc_name, string vc_rating)
        {
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
            {
                SqlCommand CreateLBCmd = npdb.CreateCommand();
                CreateLBCmd.CommandText = "p_stats_platform_visible_leaderboard_add";
                CreateLBCmd.CommandType = CommandType.StoredProcedure;

                // Set the parameters
                SqlParameter ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                CreateLBCmd.Parameters.Add(ret);

                CreateLBCmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value = i_title_id;
                CreateLBCmd.Parameters.Add("@i_lb_id", SqlDbType.Int).Value = i_lb_id;
                CreateLBCmd.Parameters.Add("@vc_locale", SqlDbType.VarChar).Value = vc_locale;
                CreateLBCmd.Parameters.Add("@si_rating_attr_id", SqlDbType.SmallInt).Value = si_rating_attr_id;
                CreateLBCmd.Parameters.Add("@ti_flags", SqlDbType.TinyInt).Value = ti_flags;
                CreateLBCmd.Parameters.Add("@ti_type", SqlDbType.TinyInt).Value = ti_type;
                CreateLBCmd.Parameters.Add("@ti_format", SqlDbType.TinyInt).Value = ti_format;
                CreateLBCmd.Parameters.Add("@vc_name", SqlDbType.NVarChar).Value = vc_name;
                CreateLBCmd.Parameters.Add("@vc_rating", SqlDbType.NVarChar).Value = vc_rating;

                // Execute the command
                npdb.ExecuteScalar(CreateLBCmd);

                if ((int)ret.Value != 0)
                {
                    Global.RO.Error("p_stats_platform_visible_leaderboard_add returned " + ret.Value);
                    throw new Exception("ERROR: p_stats_platform_visible_leaderboard_add returned " + ret.Value);
                }
            }
            finally
            {
                npdb.Close();
            }
        }

        //Insert data to table using sproc - p_stats_platform_visible_leaderboard_add and reloads in-memory DB using Xmgmt
        public void insert_reload(int i_title_id, int i_lb_id, string vc_locale, short si_rating_attr_id, byte ti_flags, byte ti_type, byte ti_format, string vc_name, string vc_rating)
        {
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
            {
                SqlCommand CreateLBCmd = npdb.CreateCommand();
                CreateLBCmd.CommandText = "p_stats_platform_visible_leaderboard_add";
                CreateLBCmd.CommandType = CommandType.StoredProcedure;

                // Set the parameters
                SqlParameter ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                CreateLBCmd.Parameters.Add(ret);

                CreateLBCmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value = i_title_id;
                CreateLBCmd.Parameters.Add("@i_lb_id", SqlDbType.Int).Value = i_lb_id;
                CreateLBCmd.Parameters.Add("@vc_locale", SqlDbType.VarChar).Value = vc_locale;
                CreateLBCmd.Parameters.Add("@si_rating_attr_id", SqlDbType.SmallInt).Value = si_rating_attr_id;
                CreateLBCmd.Parameters.Add("@ti_flags", SqlDbType.TinyInt).Value = ti_flags;
                CreateLBCmd.Parameters.Add("@ti_type", SqlDbType.TinyInt).Value = ti_type;
                CreateLBCmd.Parameters.Add("@ti_format", SqlDbType.TinyInt).Value = ti_format;
                CreateLBCmd.Parameters.Add("@vc_name", SqlDbType.VarChar).Value = vc_name;
                CreateLBCmd.Parameters.Add("@vc_rating", SqlDbType.VarChar).Value = vc_rating;

                // Execute the command
                npdb.ExecuteScalar(CreateLBCmd);

                //Reload the platformVisibleLeaderboard table using Xtstats so that the in-memory table is in-sync
                Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.xstatsfd_int, "e :xstatsfd reloadplatformvisibleleaderboards");

                if ((int)ret.Value != 0)
                {
                    Global.RO.Error("p_stats_platform_visible_leaderboard_add returned " + ret.Value);
                    throw new Exception("ERROR: p_stats_platform_visible_leaderboard_add returned " + ret.Value);
                }
            }
            finally
            {
                npdb.Close();
            }
        }

        //DELETEs data from table using sproc - p_stats_platform_visible_leaderboards_delete_all_for_title_id and NOT reloads in-memory DB using Xmgmt
        public void delete(int i_title_id)
        {
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
            {
                SqlCommand CreateLBCmd = npdb.CreateCommand();
                CreateLBCmd.CommandText = "p_stats_platform_visible_leaderboards_delete_all_for_title_id";
                CreateLBCmd.CommandType = CommandType.StoredProcedure;

                // Set the parameters
                SqlParameter ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                CreateLBCmd.Parameters.Add(ret);

                CreateLBCmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value = i_title_id;

                // Execute the command
                npdb.ExecuteScalar(CreateLBCmd);

                if ((int)ret.Value != 0)
                {
                    Global.RO.Error("p_stats_platform_visible_leaderboard_add returned " + ret.Value);
                    throw new Exception("ERROR: p_stats_platform_visible_leaderboard_add returned " + ret.Value);
                }
            }
            finally
            {
                npdb.Close();
            }
        }

        //DELETEs data from table using sproc - p_stats_platform_visible_leaderboards_delete_all_for_title_id and reloads in-memory DB using Xmgmt
        public void delete_reload(int i_title_id)
        {
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
            {
                SqlCommand CreateLBCmd = npdb.CreateCommand();
                CreateLBCmd.CommandText = "p_stats_platform_visible_leaderboards_delete_all_for_title_id";
                CreateLBCmd.CommandType = CommandType.StoredProcedure;

                // Set the parameters
                SqlParameter ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                CreateLBCmd.Parameters.Add(ret);

                CreateLBCmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value = i_title_id;

                // Execute the command
                npdb.ExecuteScalar(CreateLBCmd);

                //Reload the platformVisibleLeaderboard table using Xtstats so that the in-memory table is in-sync 
                Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.xstatsfd_int, "e :xstatsfd reloadplatformvisibleleaderboards");

                if ((int)ret.Value != 0)
                {
                    Global.RO.Error("p_stats_platform_visible_leaderboard_add returned " + ret.Value);
                    throw new Exception("ERROR: p_stats_platform_visible_leaderboard_add returned " + ret.Value);
                }
            }
            finally
            {
                npdb.Close();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\StatsPostReq.cs ===
using System;
using System.Text;
using System.Collections;
using System.IO;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.Stats
{
	/// <summary>
	/// Summary description for XRLUnitReplace.
	/// </summary>
	/// 
	public class StatsProc
	{
		public StatsProcCall Proc= null;
		ushort _ProcID=0;
		public StatsProc(ushort ProcID)
		{
			_ProcID =ProcID;
		}
		
		public void  BuildStatsUnit(int lbid, ulong puid1,ulong puid2,ulong puid3,ulong puid4,short Depend_index,params object[] param)
		{
			StatsProcBuilder _Unit = new StatsProcBuilder(_ProcID);
			_Unit.AddParam(new StatParamPuid(puid1));
			_Unit.AddParam(new StatParamPuid(puid2));
			_Unit.AddParam(new StatParamPuid(puid3));
			_Unit.AddParam(new StatParamPuid(puid4));
			_Unit.AddParam(new StatParam(lbid));
			_Unit.AddParam(new StatParam(Depend_index));

			for(int i=0;i<param.Length;i++)
			{
				if(param[i] is byte)
				{
					_Unit.AddParam(new StatParam((byte)param[i]));
				}
				else if(param[i] is short)
				{
					_Unit.AddParam(new StatParam((short)param[i]));
				}
				else if(param[i] is ushort)
				{
					_Unit.AddParam(new StatParam((short)((ushort)param[i])));
				}
				else if(param[i] is int)
				{
					_Unit.AddParam(new StatParam((int)param[i]));
				}
				else if(param[i] is long)
				{
					_Unit.AddParam(new StatParam((long)param[i]));
				}
				else if(param[i] is double)
				{
					_Unit.AddParam(new StatParam((double)param[i]));
				}
				else if(param[i] is string)
				{
					_Unit.AddParam(new StatParam((string)param[i]));
				}
				else
				{
					throw new Exception("Invalid type of param[i]");
				}

			}
			Proc = _Unit.GetWireData();
		}

		

		public void  BuildPlayerStats(int lbid, ulong puid,short Depend_index,params object[] param)
		{
			StatsProcBuilder _Player = new StatsProcBuilder(_ProcID);
			_Player.AddParam(new StatParamPuid(puid));
			_Player.AddParam(new StatParam(lbid));
			_Player.AddParam(new StatParam(Depend_index));

			for(int i=0;i<param.Length;i++)
			{
				if(param[i] is byte)
				{
					_Player.AddParam(new StatParam((byte)param[i]));
				}
				else if(param[i] is short)
				{
					_Player.AddParam(new StatParam((short)param[i]));
				}
				else if(param[i] is ushort)
				{
					_Player.AddParam(new StatParam((short)((ushort)param[i])));
				}
				else if(param[i] is int)
				{
					_Player.AddParam(new StatParam((int)param[i]));
				}
				else if(param[i] is long)
				{
					_Player.AddParam(new StatParam((long)param[i]));
				}
				else if(param[i] is double)
				{
					_Player.AddParam(new StatParam((double)param[i]));
				}
				else if(param[i] is string)
				{
					_Player.AddParam(new StatParam((string)param[i]));
				}
				else
				{
					throw new Exception("Invalid type of param[i]");
				}

			}
			Proc = _Player.GetWireData();
		}


		public void  BuildMuSigmaStats(int lbid, short Depend_index,params object[] param)
		{
			StatsProcBuilder _Player = new StatsProcBuilder(_ProcID);
			_Player.AddParam(new StatParam(lbid));
			_Player.AddParam(new StatParam(Depend_index));

			for(int i=0;i<param.Length;i++)
			{
				if(param[i] is int)
				{
					_Player.AddParam(new StatParam((int)param[i]));
				}
				else if(param[i] is ulong)
				{
					_Player.AddParam(new StatParamPuid((ulong)param[i]));
				}
				else
				{
					throw new Exception("Invalid type of param[i]");
				}

			}

			Proc = _Player.GetWireData();
		}

        
        public void  BuildMuSigmaExStats(int lbid, short Depend_index,double beta, double tou, double drawProbability,params object[] param)
        {
            StatsProcBuilder _Player = new StatsProcBuilder(_ProcID);
            _Player.AddParam(new StatParam(lbid));
            _Player.AddParam(new StatParam(Depend_index));
             _Player.AddParam(new StatParam(beta));
             _Player.AddParam(new StatParam(tou));
             _Player.AddParam(new StatParam(drawProbability));

            for(int i=0;i+3<param.Length;i=i+4)
            {
                //user
                if(param[i] is ulong)
                {
                    _Player.AddParam(new StatParamPuid((ulong)param[i]));
                }
                else
                {
                    throw new Exception("Invalid type of param[i]");
                }
                // team
                if(param[i+1] is int)
                {
                    _Player.AddParam(new StatParam((int)param[i+1]));
                }
                else
                {
                    throw new Exception("Invalid type of param[i+1]");
                }
                   //score
                if(param[i+2] is int)
                {
                    _Player.AddParam(new StatParam((int)param[i+2]));
                }
                else
                {
                    throw new Exception("Invalid type of param[i+2]");
                }
               // partialplay flags
                if(param[i+3] is ulong)
                {
                    _Player.AddParam(new StatParam((long)(ulong)param[i+3]));
                }
                else if(param[i+3] == null)
                {
                    _Player.AddParam(new StatParam());
                }
                else
                {
                    throw new Exception("Invalid type of param[i+3]");
                }

            }

            Proc = _Player.GetWireData();
        }


		public void  BuildELOPlayer(int lbid, ulong puid1,ulong puid2,short Depend_index,params object[] param)
		{
			StatsProcBuilder _Player = new StatsProcBuilder(_ProcID);
			_Player.AddParam(new StatParamPuid(puid1));
			_Player.AddParam(new StatParamPuid(puid2));
			_Player.AddParam(new StatParam(lbid));
			_Player.AddParam(new StatParam(Depend_index));
			
			for(int i=0;i<param.Length;i++)
			{
				if(param[i] is byte)
				{
					_Player.AddParam(new StatParam((byte)param[i]));
				}
				else if(param[i] is short)
				{
					_Player.AddParam(new StatParam((short)param[i]));
				}
				else if(param[i] is ushort)
				{
					_Player.AddParam(new StatParam((short)((ushort)param[i])));
				}
				else if(param[i] is int)
				{
					_Player.AddParam(new StatParam((int)param[i]));
				}
				else if(param[i] is long)
				{
					_Player.AddParam(new StatParam((long)param[i]));
				}
				else if(param[i] is double)
				{
					_Player.AddParam(new StatParam((double)param[i]));
				}
				else if(param[i] is string)
				{
					_Player.AddParam(new StatParam((string)param[i]));
				}
				else
				{
					throw new Exception("Invalid type of param[i]");
				}

			}
			Proc = _Player.GetWireData();
		}


		public void  BuildELOUnits(int lbid, ulong[] unit1,ulong[] unit2,short Depend_index,params object[] param)
		{
			StatsProcBuilder _Player = new StatsProcBuilder(_ProcID);
			_Player.AddParam(new StatParamPuid(unit1[0]));
			_Player.AddParam(new StatParamPuid(unit1[1]));
			_Player.AddParam(new StatParamPuid(unit1[2]));
			_Player.AddParam(new StatParamPuid(unit1[3]));
			_Player.AddParam(new StatParamPuid(unit2[0]));
			_Player.AddParam(new StatParamPuid(unit2[1]));
			_Player.AddParam(new StatParamPuid(unit2[2]));
			_Player.AddParam(new StatParamPuid(unit2[3]));
			
			_Player.AddParam(new StatParam(lbid));
			_Player.AddParam(new StatParam(Depend_index));
			
			for(int i=0;i<param.Length;i++)
			{
				if(param[i] is byte)
				{
					_Player.AddParam(new StatParam((byte)param[i]));
				}
				else if(param[i] is short)
				{
					_Player.AddParam(new StatParam((short)param[i]));
				}
				else if(param[i] is ushort)
				{
					_Player.AddParam(new StatParam((short)((ushort)param[i])));
				}
				else if(param[i] is int)
				{
					_Player.AddParam(new StatParam((int)param[i]));
				}
				else if(param[i] is long)
				{
					_Player.AddParam(new StatParam((long)param[i]));
				}
				else if(param[i] is double)
				{
					_Player.AddParam(new StatParam((double)param[i]));
				}
				else if(param[i] is string)
				{
					_Player.AddParam(new StatParam((string)param[i]));
				}
				else
				{
					throw new Exception("Invalid type of param[i]");
				}

			}
			Proc = _Player.GetWireData();
		}

	

	}

	public class XUser
	{
		public ulong UserId;
		public ulong[] TeamPuidList;

		public XUser(ulong user, ulong[] teampuids)
		{
			UserId =user;
			TeamPuidList= teampuids;
		}
		
	}
	
	public class RequestBuilder
	{
		public	ArrayList StatsProcs = new ArrayList();
		protected uint m_title;
		public ulong[] Users= new ulong[4]{0,0,0,0};
		protected bool IsArbitrated= false;
		protected bool AppendTeamTicket= false;
		protected BundledAuthData     authData= null;
		protected byte[] key;
		private RandomEx keyGen;
		public RequestBuilder()
		{
			
		}
		public RequestBuilder(uint titleid, XUser[] users, bool Arbitrate, bool TeamTicket)
		{
			Builder(titleid,users,Arbitrate,TeamTicket);
		}

		public RequestBuilder(uint titleid, ulong[] users, bool Arbitrate, bool TeamTicket)
		{
			XUser[] temp= new XUser[users.Length];
			for(int i=0;i< users.Length;i++)
			{
				temp[i]= new XUser(users[i], null);
			}

			Builder(titleid,temp,Arbitrate,TeamTicket);
		}
		public void Builder(uint titleid, ulong[] users, bool Arbitrate, bool TeamTicket)
		{
			XUser[] temp= new XUser[users.Length];
			for(int i=0;i< users.Length;i++)
			{
				temp[i]= new XUser(users[i], null);
			}

			Builder(titleid,temp,Arbitrate,TeamTicket);
		}
		public void Builder(uint titleid, XUser[] users, bool Arbitrate, bool TeamTicket)
		{
			m_title=titleid;
			if(TeamTicket)
			{
				AppendTeamTicket= TeamTicket;
				
				keyGen = new RandomEx();
				key = new byte[16];
				keyGen.NextBytes(key);

			}
			if(Arbitrate)
			{
				IsArbitrated =Arbitrate;

				XUIDAndTrust[]      xuids = new XUIDAndTrust[users.Length];
				for(int i=0;i<users.Length;i++)
					xuids[i]=new XUIDAndTrust(users[i].UserId,0,0);
				authData = new BundledAuthData(titleid,xuids);
			}
			else
			{
				Users = new ulong[users.Length];
				for(int i=0;i< users.Length;i++)
				{
					Users[i]= users[i].UserId;
				}
				
			}
		}
		
		public RequestBuilder(uint titleid, ulong[] users, bool Arbitrate)
		{
			Builder(titleid,users,Arbitrate,false);
		}

		public void AddProcs(StatsProcCall procCall)
		{
			StatsProcs.Add(procCall);
		}

		public StatsPostReq  GetPostData()
		{
			StatsPostReq temp = new StatsPostReq();
			temp.Users =Users;
			temp.TitleID=m_title;
			temp.IsArbitrated=IsArbitrated;
			temp.AppendTeamTicket=AppendTeamTicket;
			temp.authData = authData;
			temp._key=key;

			StatsProcCall[]	ProcCalls = new StatsProcCall[StatsProcs.Count];
			for (int i=0;i<StatsProcs.Count;i++)
			{
				ProcCalls[i]=(StatsProcCall)StatsProcs[i];
			}
			temp.data= new StatsPostWireData(m_title,ProcCalls);

			return temp;
		}


	}

    // We don't use CSGInfo.ClientType directly, as we don't want to add an additional dependancy
    // on it to code which uses PostTOStatsFD() and StatsPostReq
    public enum PlatformBit
    {
        Xbox,
        Xenon,
        PC
    };

	public class StatReqBase
	{
		public ulong[] Users= new ulong[4]{0,0,0,0};
		public byte[] _key;
		public uint TitleID;
		public bool IsArbitrated = false;
		public bool AppendTeamTicket = false;
		public BundledAuthData  authData;
		
            //default all requests to Xenon requests.
        private PlatformBit _platformBit = PlatformBit.Xenon;
        public PlatformBit PlatformBit
        {
            get
            {
                return _platformBit;
            }

            set
            {
                _platformBit = value;
            }
        }

        public bool IsXenon
        {
            get
            {
                bool retVal = false;
                if (_platformBit == PlatformBit.Xenon)
                {
                    retVal = true;
                }
                else if (_platformBit != PlatformBit.Xbox)
                {
                    // If anyone is depending on IsXenon == false indicating that the platform is Xbox
                    // and this is not the case, we need to catch them sooner, rather than later.
                    throw new InvalidOperationException("IsXenon was queried with PlatformBit = " + _platformBit);
                }

                return retVal;
            }

            set
            {
                // Mimicing previous functionality
                if (value == true)
                {
                    _platformBit = PlatformBit.Xenon;
                }
                else
                {
                    throw new InvalidOperationException("Attempt to set the platform bit to Xbox!  Xbox platform is no longer supported.");
//                    _platformBit = PlatformBit.Xbox;
                }
            }
        }

		public virtual WireData GetWireData()
		{
			return null;
		}
		public virtual string GetServiceName()
		{
			return null;
		}
	}

	public class StatsPostReq :StatReqBase
	{
		public StatsPostWireData  data;
		public uint ExpErrOnPost=0;
		public uint ExpErrOnGet=0;
		public uint ExpErrOnEnum=0;
		public uint PorcindexUsedInVerify=0;
		
		

		public override WireData GetWireData()
		{
			return data;
		}
		public override string GetServiceName()
		{
			return "/xstats/statpost.ashx";
			
		}
	}
	public class StatsPostWireData: WireData
	{
		public uint		TitleID=0;
		public ushort	ProcCallsLen=0;
		public StatsProcCall[]	ProcCalls = null;

		public  StatsPostWireData(uint Titleid, StatsProcCall[]  procs)
		{
			TitleID=Titleid;
			ProcCalls =procs;
		}

		
		
	}



	public class StatsProcBuilder
	{
		public ushort ProcID;
		protected ArrayList Params = new ArrayList();

		public StatsProcBuilder(ushort Procid)
		{
			ProcID =Procid;
		}
		public void  AddParam(StatParam param)
		{
			Params.Add(param);
		}

		public StatsProcCall GetWireData()
		{

			StatParam[]	tempParams = new StatParam[Params.Count];
			for (int i=0;i<Params.Count;i++)
			{
				tempParams[i]=(StatParam)Params[i];
			}

			return new StatsProcCall(ProcID,tempParams);

		}

	}
	public  class StatsProcCall:WireData
	{
		public ushort ProcID;
		public ushort ParamsLen=0;
		public StatParam[] Params;

		public StatsProcCall(ushort Procid,StatParam[] sParams)
		{
			ProcID=Procid;
			Params=sParams;
			
		}
		
	}

	public class StatParam :WireData
	{
		public byte         _bParamType = 0;
		public object       _data = null;

		public StatParam()
		{
		}
        
		public override WireData ReadStream(BinaryReader reader)   
		{
			
			_bParamType = reader.ReadByte();
          
			switch(_bParamType)
			{
				case StatParamTypes.Int8:
					_data = (object) reader.ReadByte(); // BUGBUG: sign?
					break;
				case StatParamTypes.Int16:
					_data = (object) reader.ReadInt16();
					break;
				case StatParamTypes.Int32:
					_data = (object) reader.ReadInt32();
					break;
				case StatParamTypes.Int64:
					_data = (object) reader.ReadInt64();
					break;
				case StatParamTypes.Float:
					_data = (object) reader.ReadDouble();
					break;
				case StatParamTypes.Utf8string:
				{
					ushort strsize = reader.ReadUInt16();
                   
					if(strsize > ProtocolConstant.MaxUtf8StringParamSize)
					{
						throw new Exception( 
							"Utf8String parameter size greater than allowed max (" + 
							ProtocolConstant.MaxUtf8StringParamSize + ")");
					}

					_data = (object) Encoding.UTF8.GetString(reader.ReadBytes(strsize));
					break;
				}
				case StatParamTypes.Puid:
					_data = (object) reader.ReadUInt64();
					break;
                case StatParamTypes.Null:
                    reader.ReadByte();
                    break;
				default:
					throw new Exception( 
						"Invalid parameter type " + _bParamType.ToString());
			}
			return this;
		}

		
		public override void WriteStream(BinaryWriter writer)
		{
			
			writer.Write(_bParamType);
           
			switch(_bParamType)
			{
                case StatParamTypes.Null:
                     writer.Write((Byte) 0);
                    break;
				case StatParamTypes.Int8:
					writer.Write((byte)_data);
					break;
				case StatParamTypes.Int16:
					writer.Write((short)_data);
					break;
				case StatParamTypes.Int32:
					writer.Write((int)_data);
					break;
				case StatParamTypes.Int64:
					writer.Write((long)_data);
					break;
				case StatParamTypes.Float:
					writer.Write((double)_data);
					break;
				case StatParamTypes.Utf8string:
				{
					byte[] encstring = Encoding.UTF8.GetBytes((string)_data);
					writer.Write((ushort) encstring.Length);
					writer.Write(encstring);
					break;
				}
				case StatParamTypes.Puid:
					writer.Write((ulong)_data);
					break;
				default:
					throw new Exception(
						"Invalid parameter type " + _bParamType.ToString());
			}
		}

		public override string ToString()
		{
			return "("+_bParamType+")"+
				(_data == null ? "(null)" : _data.ToString()) + " ";
		}

		public StatParam(int udata)
		{
			_bParamType=StatParamTypes.Int32;
			_data =(object)udata;
		}
		public StatParam(short sdata)
		{
			_bParamType=StatParamTypes.Int16;
			_data =(object)sdata;
		}
		public StatParam(double ddata)
		{
			_bParamType=StatParamTypes.Float;
			_data =(object)ddata;
		}
		public StatParam(long ldata)
		{
			_bParamType=StatParamTypes.Int64;
			_data =(object)ldata;
		}
		public StatParam(byte bdata)
		{
			_bParamType=StatParamTypes.Int8;
			_data =(object)bdata;
		}
		public StatParam(string sdata)
		{
			_bParamType=StatParamTypes.Utf8string;
			_data =(object)sdata;
		}
	}

	public class StatParamPuid : StatParam
	{
		public StatParamPuid(ulong puid)
		{
			_bParamType=StatParamTypes.Puid;
			_data =(object)puid;
		}
	}
	public class StatContitions 
	{
		public const byte Equal				= 1;
		public const byte Greater			= 2;
		public const byte GreaterOREqual	= 3;
		public const byte Less		        = 4;
		public const byte LessOREqual       = 5;
		public const byte Exist			    = 6;
		public const byte NotExist          = 7;
		public const byte NotEqual          = 8;
	}

	public class StatParamTypes 
	{
		public const byte Null         = 0;
		public const byte Int8         = 1;
		public const byte Int16        = 2;
		public const byte Int32        = 3;
		public const byte Int64        = 4;
		public const byte Float        = 5;
		public const byte Utf8string   = 6;
		public const byte Puid         = 7;
	}
    
	
	public class StatProcIDs
	{
		public const ushort Replace     = 0x8001;
		public const ushort ReplaceUnit = 0x8002;
		public const ushort Add			= 0x8003;
		public const ushort AddUnit		= 0x8004;
		public const ushort Elo			= 0x8005;
		public const ushort EloUnit		= 0x8006;
		public const ushort CondPlayer		= 0x8007;
		public const ushort CondUnit		= 0x8008;
		public const ushort Min         = 0x8009;
		public const ushort Max         = 0x800B;
        public const ushort MuSigma     = 0x800D;
        public const ushort MuSigmaEx   = 0x800E;
		
	}

	public class ProtocolConstant
	{
		public const uint   MaxNicknameLength = 31;
		public const uint   MaxSpecsPerRequest = 101;
		public const uint   MaxSpecsPerSetDataRequest = 20;
		public const uint   MaxAttrPerSpec = 70;
		public const string AttachStorageDomain = "Stats";
        
		// BUGBUG: review V2 protocol parameters:
		public const uint   MaxProcedureCount = 64;
		public const uint   MaxUtf8StringParamSize = 1024;
		public const uint   MaxStatPostParamCount = 256;
		public const uint   MaxStatUnitGetSpecs   = 5;
	}



	//helper classes
	//Rapper for replace procedure
	public class StatsPlayerReplace:StatsProc
	{
		public StatsPlayerReplace():base(StatProcIDs.Replace)
		{
		}
		public StatsPlayerReplace(int lbid, ulong puid,short Depend_index,params object[] param):base(StatProcIDs.Replace)
		{
			BuildPlayerStats(lbid,puid,Depend_index,param);
		}
	
	}

	public class StatsPlayerMin:StatsProc
	{
		public StatsPlayerMin():base(StatProcIDs.Min)
		{
		}
		public StatsPlayerMin(int lbid, ulong puid,short Depend_index,params object[] param):base(StatProcIDs.Min)
		{
			BuildPlayerStats(lbid,puid,Depend_index,param);
		}
	
	}

	public class StatsPlayerMax:StatsProc
	{
		public StatsPlayerMax():base(StatProcIDs.Max)
		{
		}
		public StatsPlayerMax(int lbid, ulong puid,short Depend_index,params object[] param):base(StatProcIDs.Max)
		{
			BuildPlayerStats(lbid,puid,Depend_index,param);
		}
	
	}
	
	public class StatsUnitReplace:StatsProc
	{
		public StatsUnitReplace():base(StatProcIDs.ReplaceUnit)
		{
		}
		public StatsUnitReplace(int lbid, ulong[] members,short Depend_index,params object[] param):base(StatProcIDs.ReplaceUnit)
		{
			BuildStatsUnit(lbid,members[0],members[1],members[2],members[3],Depend_index,param);
		}
		public StatsUnitReplace(int lbid, ulong puid1,ulong puid2,ulong puid3,ulong puid4,short Depend_index,params object[] param):base(StatProcIDs.ReplaceUnit)
		{
			BuildStatsUnit(lbid,puid1,puid2,puid3,puid4,Depend_index,param);
		}
	
	}
	//Rapper for Increment procedure
	public class StatsUnitAdd:StatsProc
	{
		public StatsUnitAdd():base(StatProcIDs.AddUnit)
		{
		}
		public StatsUnitAdd(int lbid, ulong puid1,ulong puid2,ulong puid3,ulong puid4,short Depend_index,params object[] param):base(StatProcIDs.AddUnit)
		{
			BuildStatsUnit(lbid,puid1,puid2,puid3,puid4,Depend_index,param);
		}
	
	}

	public class StatsPlayerAdd:StatsProc
	{
		public StatsPlayerAdd():base(StatProcIDs.Add)
		{
		}
		public StatsPlayerAdd(int lbid, ulong puid,short Depend_index,params object[] param):base(StatProcIDs.Add)
		{
			BuildPlayerStats(lbid,puid,Depend_index,param);
		}
	
	}

	//Rapper for ELO procedure
	public class StatsUnitElo:StatsProc
	{
		public StatsUnitElo():base(StatProcIDs.EloUnit)
		{
		}

		public StatsUnitElo(int lbid ):base(StatProcIDs.EloUnit)
		{
			BuildELOUnits(lbid,new ulong[4]{501,502,0,0},new ulong[4]{606,602,0,0},0,new object[]{(double)1,(double).5,(double).5});
		}

		public StatsUnitElo(int lbid, ulong[] Unit1,ulong[] Unit2,short depend,params object[] param):base(StatProcIDs.EloUnit)
		{
			BuildELOUnits(lbid,Unit1,Unit2,depend,param);
		}
	
	}

	public class StatsPlayerElo:StatsProc
	{
		public StatsPlayerElo():base(StatProcIDs.Elo)
		{
		}
		public StatsPlayerElo(int lbid, ulong puid1,ulong puid2,params object[] param):base(StatProcIDs.Elo)
		{
			BuildELOPlayer(lbid,puid1,puid2,0,param);
		}
	
	}

	//Rapper for Conditional procedure
	public class ConditionalUnit:StatsProc
	{
		public ConditionalUnit():base(StatProcIDs.CondUnit)
		{
		}
		public ConditionalUnit(int lbid, ulong[] members,byte Condition,short StatID,object Value):base(StatProcIDs.CondUnit)
		{
			StatsProcBuilder _Condition = new StatsProcBuilder(StatProcIDs.CondUnit);
			for(int i=0;i<4;i++)
			{
				_Condition.AddParam(new StatParamPuid(members[i]));
			}
			_Condition.AddParam(new StatParam(lbid));
			_Condition.AddParam(new StatParam(Condition));
			_Condition.AddParam(new StatParam(StatID));

			if(Value is byte)
			{
				_Condition.AddParam(new StatParam((byte)Value));
			}
			else if(Value is short)
			{
				_Condition.AddParam(new StatParam((short)Value));
			}
			else if(Value is ushort)
			{
				_Condition.AddParam(new StatParam((short)((ushort)Value)));
			}
			else if(Value is int)
			{
				_Condition.AddParam(new StatParam((int)Value));
			}
			else if(Value is long)
			{
				_Condition.AddParam(new StatParam((long)Value));
			}
			else if(Value is double)
			{
				_Condition.AddParam(new StatParam((double)Value));
			}
			else if(Value is string)
			{
				_Condition.AddParam(new StatParam((string)Value));
			}
			else
			{
				throw new Exception("Invalid type of param[i]");
			}

			Proc = _Condition.GetWireData();


		}
	
	}

	public class ConditionalPlayer:StatsProc
	{
		public ConditionalPlayer():base(StatProcIDs.CondPlayer)
		{
		}
		public ConditionalPlayer(int lbid, ulong puid,byte Condition,short StatID,object Value):base(StatProcIDs.CondPlayer)
		{
			StatsProcBuilder _Condition = new StatsProcBuilder(StatProcIDs.CondPlayer);
			_Condition.AddParam(new StatParamPuid(puid));
			_Condition.AddParam(new StatParam(lbid));
			_Condition.AddParam(new StatParam(Condition));
			_Condition.AddParam(new StatParam(StatID));

			if(Value is byte)
			{
				_Condition.AddParam(new StatParam((byte)Value));
			}
			else if(Value is short)
			{
				_Condition.AddParam(new StatParam((short)Value));
			}
			else if(Value is ushort)
			{
				_Condition.AddParam(new StatParam((short)((ushort)Value)));
			}
			else if(Value is int)
			{
				_Condition.AddParam(new StatParam((int)Value));
			}
			else if(Value is long)
			{
				_Condition.AddParam(new StatParam((long)Value));
			}
			else if(Value is double)
			{
				_Condition.AddParam(new StatParam((double)Value));
			}
			else if(Value is string)
			{
				_Condition.AddParam(new StatParam((string)Value));
			}
			else
			{
				throw new Exception("Invalid type of param[i]");
			}

			Proc = _Condition.GetWireData();


		}
	
	}


	//Rapper for MuSigma
	public class StatsMuSigma:StatsProc
	{
		public StatsMuSigma():base(StatProcIDs.MuSigma)
		{
		}
		
		public StatsMuSigma(uint lbid, short Depend_index,params object[] param):base(StatProcIDs.MuSigma)
		{
			BuildMuSigmaStats((int)lbid,Depend_index,param);
		}
	
	}

    public class StatsMuSigmaEx:StatsProc
    {
        public StatsMuSigmaEx():base(StatProcIDs.MuSigmaEx)
        {
        }
		
        public StatsMuSigmaEx(uint lbid, short Depend_index,double beta, double tou, double drawProbability,params object[] param):base(StatProcIDs.MuSigmaEx)
        {
            BuildMuSigmaExStats((int)lbid,Depend_index,beta,tou,drawProbability,param);
        }
	
    }


	
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\XRLEnumLBRequest.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using xonline.common.config;
using xonline.common.service;



namespace ServerTestFramework.LiveService.Stats
{
	/// <summary>
	///
	/// </summary>
	public class XRLEnumLBRequest:XRLPayload
	{
		public uint		TitleId;
		public uint		LBType;
		public ulong	Pivot;
		public byte		IsPivotUser;
		public uint		PageSize;
		public uint		AttribIdLen=0;
		public ushort[]	AttribId = null;


		public XRLEnumLBRequest(uint titleId,uint lBType,ulong pivot,byte isPivotUser,uint pageSize,ushort[] AttribIds)
		{
			ServiceId=XOService.Stats;
			TitleId = titleId;
			LBType = lBType;
			Pivot = pivot;
			IsPivotUser =isPivotUser;
			PageSize = pageSize;
			AttribIdLen = (uint)AttribIds.Length;
			AttribId = AttribIds;

		}

		public XRLEnumLBRequest(uint titleId,uint lBType,ulong pivot,byte isPivotUser,uint pageSize,uint attrCount,int SpecialAttMask)
		{
			ServiceId=XOService.Stats;
			TitleId = titleId;
			LBType = lBType;
			Pivot = pivot;
			IsPivotUser =isPivotUser;
			PageSize = pageSize;
			AttribIdLen = attrCount;
			AttribId = new ushort[AttribIdLen];

			ushort addattr=1;
			for (uint index=0;index <attrCount;index++)
			{
				if((SpecialAttMask & SpecialAttribMask.AttachmentPathName) == SpecialAttribMask.AttachmentPathName)
				{
					AttribId[index] = SpecialAttrib.AttachmentPathName;
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.AttachmentPathName);
				}
				else if((SpecialAttMask & SpecialAttribMask.AttachmentSize) == SpecialAttribMask.AttachmentSize)
				{
					AttribId[index] = SpecialAttrib.AttachmentSize;
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.AttachmentSize);
				}
				else if((SpecialAttMask & SpecialAttribMask.Nickname) == SpecialAttribMask.Nickname)
				{
					AttribId[index] = SpecialAttrib.Nickname;
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.Nickname);
				}
				else
				{

					AttribId[index]= addattr;
					addattr++;
				}
				//}

			}


		}

		protected override string GetServiceName()
		{
			return "/xstats/xstatsenumlb.ashx";
		}


		public uint ExecuteStress()
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);

			
			return xAct.XErr;

		}

		public XRLEnumLBResponse ExecuteEx()
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);

			XRLEnumLBResponse EnumLBResp = (XRLEnumLBResponse)new XRLEnumLBResponse().ReadBytes(XErr,xAct.ResponseContents);
			return EnumLBResp;

		}
		new public XRLEnumLBResponse Execute()
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);

			XRLEnumLBResponse EnumLBResp = (XRLEnumLBResponse)new XRLEnumLBResponse().ReadBytes(XErr,xAct.ResponseContents);
			return EnumLBResp;

		}

		public XRLEnumLBResponse Execute(bool shortmessage , bool longmessage)
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			BinaryWriter bwriter = new BinaryWriter(reqStream);
			ulong i=59843243980;

			if(shortmessage)
			{
				bwriter.Write(TitleId);
				bwriter.Write(LBType);
				bwriter.Write(Pivot);
				bwriter.Write(IsPivotUser);
				bwriter.Write(PageSize);
				bwriter.Write(AttribId.Length);
				for(int idx=0;idx<(AttribId.Length-1);idx++)
				{
					bwriter.Write(AttribId[idx]);
				}

			}
			if (longmessage)
			{
				WriteStream( reqStream );
				bwriter.Write(i);

			}
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);

			XRLEnumLBResponse EnumLBResp = (XRLEnumLBResponse)new XRLEnumLBResponse().ReadBytes(XErr,xAct.ResponseContents);
			return EnumLBResp;

		}
	}

	public class XRLEnumLBResponse:XRLResponse
	{
		public uint uiLbSize=0;
		public uint RepUserLBLen=0;
		public uint AttCount=0;
		public EnumLBUserdata[] RepUserLB;

		public XRLEnumLBResponse()
		{

		}

		public XRLEnumLBResponse ReadBytes(uint XErr ,byte[]  Respdata)
		{
			base.xResult = XErr;
			if(XResult.Succeeded(XErr))
			{
				MemoryStream RespStream = new MemoryStream(Respdata);
				BinaryReader _reader= new BinaryReader(RespStream);

				uiLbSize = _reader.ReadUInt32();
				RepUserLBLen =_reader.ReadUInt32();
				AttCount =_reader.ReadUInt32();

				RepUserLB = new EnumLBUserdata[RepUserLBLen];
				for(int count =0 ; count< RepUserLBLen; count++ )
				{
					RepUserLB[count] = (EnumLBUserdata)new EnumLBUserdata(AttCount).ReadStream(RespStream);
					//RespData[count]= new GetResponseData().
				}

			}
			return this;
		}

	}
}


namespace ServerTestFramework.LiveService.Stats.Util
{



	public class EnumLBUserdata
	{
		public ELBUserHead Userdata;
		public uint AttlistSize;
		public XRLAttList AttList;

		public EnumLBUserdata(uint AttSize)
		{
			AttlistSize = AttSize;
		}

		public EnumLBUserdata ReadStream(Stream stream)
		{
			Userdata = (ELBUserHead)new ELBUserHead().ReadStream(stream);
			AttList = (XRLAttList)new XRLAttList(AttlistSize).ReadStream(stream);
			return  this;
		}

		public class ELBUserHead: WireData
		{
			public ulong UserID;
			public uint Rank;
			public ulong Rating;
			public byte XNameLen;
			public byte NickNameLen;
			public byte[] XName;
			public byte[] NickName;
		}




	}


	public class WebEnumLBUserdata
	{
		public ulong UserID=0;
		public uint Rank=0;
		public ulong Rating=0;
		public byte AttrLen=0;
		public XRLAttList Attr=null;

		public WebEnumLBUserdata()
		{

		}
		public WebEnumLBUserdata ReadStream(Stream stream)
		{
			BinaryReader _reader= new BinaryReader(stream);
			UserID = _reader.ReadUInt64();
			Rank = _reader.ReadUInt32();
			Rating=_reader.ReadUInt64();
			AttrLen=_reader.ReadByte();


			Attr = (XRLAttList)new XRLAttList((uint)AttrLen).ReadStream(stream);
			return this;
		}

	}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\XRLEstimateRankForRatings.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using ServerTestFramework;
using System.Threading;
using System.ComponentModel;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using xonline.common.config;
using ServerTestFramework.LiveService.FakeSG;

namespace ServerTestFramework.LiveService.Stats
{
	/// <summary>
	/// Summary description for XRLEstimateRankForRatings.
	/// </summary>
    public class StatsEstimateRankRequestStruct:WireData
    {
        public int   m_nLbId = 0;
        public ulong m_ulRating = 0;
        public StatsEstimateRankRequestStruct(int lbid, ulong rating)
        {
            m_nLbId =lbid;
            m_ulRating=rating;
        }
    }
    
    public class StatsEstimateRankForRatingsRequest:XRLPayload
    {
        public int  m_nTitleId = 0;

       
        public uint m_uRatingRequestCount = 0;

        [WireInfo(SizeParam="m_uRatingRequestCount")]
        public StatsEstimateRankRequestStruct[] m_arrRatingStruct = null;

        protected override string GetServiceName()
        {
            return "/xstats/xstatestimaterankforratings.ashx";
        }

        new public StatsEstimateRankForRatingsResponse Execute()
        {
            // Prepare request
            MemoryStream reqStream = new MemoryStream( 512 );
            WriteStream( reqStream );
            bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);

            StatsEstimateRankForRatingsResponse RankForRatingsResponse = (StatsEstimateRankForRatingsResponse)new StatsEstimateRankForRatingsResponse().ReadBytes(XErr,xAct.ResponseContents);
             return RankForRatingsResponse;

        }

        public uint ExecuteStress()
        {
            // Prepare request
            MemoryStream reqStream = new MemoryStream(512);
            WriteStream(reqStream);
            bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd), reqStream);

            return XErr;

        }


    }

    public class StatsEstimateRankForRatingsResponse:XRLResponse
    {
        
        public uint m_uRankForRatingReplyCount = 0;
       
        public uint[] m_arruiRankForRating = null;

        public StatsEstimateRankForRatingsResponse ReadBytes(uint XErr ,byte[]  Respdata)
        {
            base.xResult = XErr;
            if(XResult.Succeeded(XErr))
            {

                MemoryStream RespStream = new MemoryStream(Respdata);
                BinaryReader _reader= new BinaryReader(RespStream);
                m_uRankForRatingReplyCount =  _reader.ReadUInt32();

                m_arruiRankForRating = new uint[m_uRankForRatingReplyCount];

                for(int i=0;i<m_uRankForRatingReplyCount;i++)
                {
                    m_arruiRankForRating[i]= _reader.ReadUInt32();
                }


            }
            return this;
        }

       
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\XRLGetRequest.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using ServerTestFramework;
using System.Threading;
using System.ComponentModel;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using xonline.common.config;
using xonline.common.service;


namespace ServerTestFramework.LiveService.Stats
{

		/// <summary>
		///
		/// </summary>
		public class XRLGetRequest:XRLPayload
		{
			public uint ReqDataLen=0;
			public GetRequestData[] ReqData=null;
			private uint NoRecAdded=0;

			public XRLGetRequest(uint RecCount)
			{
				ServiceId=XOService.Stats;
				ReqDataLen =RecCount;
				ReqData = new GetRequestData[ReqDataLen];

			}
			protected override string GetServiceName()
			{
				return "/xstats/xstatsget.ashx";
			}

			public bool AddGetData(uint titleid,ulong userid,uint LBType,ushort[] Attribs)
			{
				if(NoRecAdded < ReqDataLen)
				{
					ReqData[NoRecAdded]= new GetRequestData(titleid,
						userid,LBType,Attribs);
					NoRecAdded++;
					return true;
				}
				return false;

			}


			public bool AddGetData(uint titleid,ulong userid,uint LBType,uint AttribCount ,ushort[] Attribs)
			{
				if(NoRecAdded < ReqDataLen)
				{
					ReqData[NoRecAdded]= new GetRequestData(titleid,
						userid,LBType,AttribCount,Attribs);
					NoRecAdded++;
					return true;
				}
				return false;

			}



			public bool AddGetData(uint titleid,ulong userid,uint LBType,uint Attcount,int SpecialAttMask)
			{
				if(NoRecAdded < ReqDataLen)
				{
					ReqData[NoRecAdded]= new GetRequestData(titleid,
						userid,LBType,Attcount,SpecialAttMask);
					NoRecAdded++;
					return true;
				}
				return false;

			}

			public bool AddGetData(uint titleid,ulong userid,uint LBType)
			{
				if(NoRecAdded < ReqDataLen)
				{
					ReqData[NoRecAdded]= new GetRequestData(titleid,
						userid,LBType);
					NoRecAdded++;
					return true;
				}
				return false;

			}

			new public XRLGetResponse Execute()
			{
				// Prepare request
				MemoryStream reqStream = new MemoryStream( 512 );
				for(int count=0; count < ReqDataLen; count++)
				{
					ReqData[count].WriteStream(reqStream);
				}

				bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);
				// create a streem here and then read all data;
				XRLGetResponse GetResp = (XRLGetResponse)new XRLGetResponse().ReadBytes(XErr,xAct.ResponseContents,this);
				return GetResp;

			}

			public uint ExecuteStress()
			{
				// Prepare request
				MemoryStream reqStream = new MemoryStream( 512 );
				for(int count=0; count < ReqDataLen; count++)
				{
					ReqData[count].WriteStream(reqStream);
				}

				bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);
				// create a streem here and then read all data;
				
				return xAct.XErr;

			}

		}


		public class XRLGetResponse:XRLResponse
		{
			public uint RespDataLen=0;
			public GetResponseData[] RespData=null;

			public XRLGetResponse()
			{
			}
			public XRLGetResponse ReadBytes(uint XErr,byte[]  Respdata,XRLGetRequest Request)
			{
				base.xResult = XErr;
				if(XResult.Succeeded(XErr))
				{

					MemoryStream RespStream = new MemoryStream(Respdata);
					RespDataLen= Request.ReqDataLen;
					RespData = new GetResponseData[RespDataLen];
					for(int count =0 ; count< RespDataLen; count++ )
					{
						uint AttCount =Request.ReqData[count].AttribIdLen;
						RespData[count] = (GetResponseData)new GetResponseData(AttCount).ReadStream(RespStream);
						//RespData[count]= new GetResponseData().
					}

				}
				return this;
			}
		}


	namespace Util
	{
		public class GetRequestData : WireData
		{
			public uint m_dwTitleId=0;
			public ulong m_qwUserId=0;
			public uint m_dwLeaderBoardType=0;
			public uint AttribIdLen=0;
			public ushort[]  AttribId = null;

			public GetRequestData()
			{
			}
			public GetRequestData(uint titleid,ulong userid,uint LBType,uint AttribCount,ushort[] Attribs)
			{
				m_dwTitleId = titleid;
				m_qwUserId =userid;
				m_dwLeaderBoardType =LBType;
				AttribIdLen= AttribCount;
				AttribId = Attribs;
			}

			public GetRequestData(uint titleid,ulong userid,uint LBType,ushort[] Attribs)
			{
				m_dwTitleId = titleid;
				m_qwUserId =userid;
				m_dwLeaderBoardType =LBType;
				AttribIdLen= (uint)Attribs.Length;
				AttribId = Attribs;
			}


			public GetRequestData(uint titleid,ulong userid,uint LBType,uint Attcount,int SpecialAttMask)
			{
				m_dwTitleId = titleid;
				m_qwUserId =userid;
				m_dwLeaderBoardType =LBType;
				AttribIdLen= Attcount;
                AttribId = new ushort[Attcount];

				ushort addattr=1;
				for (uint index=0;index <Attcount;index++)
				{
					if((SpecialAttMask & SpecialAttribMask.Nickname) == SpecialAttribMask.Nickname)
					{
						AttribId[index] =SpecialAttrib.Nickname;
						SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.Nickname);
					}
					else if((SpecialAttMask & SpecialAttribMask.Rating) == SpecialAttribMask.Rating)
					{
						AttribId[index] =SpecialAttrib.Rating;
						SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.Rating);
					}
					else if((SpecialAttMask & SpecialAttribMask.Rank) == SpecialAttribMask.Rank)
					{
						AttribId[index] = SpecialAttrib.Rank;
						SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.Rank);
					}
					else if((SpecialAttMask & SpecialAttribMask.AttachmentPathName) == SpecialAttribMask.AttachmentPathName)
					{
						AttribId[index] = SpecialAttrib.AttachmentPathName;
						SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.AttachmentPathName);
					}
					else if((SpecialAttMask & SpecialAttribMask.AttachmentSize) == SpecialAttribMask.AttachmentSize)
					{
						AttribId[index] = SpecialAttrib.AttachmentSize;
						SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.AttachmentSize);
					}
					else
					{
						AttribId[index]= addattr;
						addattr++;
					}

				}


			}


			public GetRequestData(uint titleid,ulong userid,uint LBType)
			{
				m_dwTitleId = titleid;
				m_qwUserId =userid;
				m_dwLeaderBoardType =LBType;
				AttribIdLen= 1;
				AttribId = new ushort[1];

				AttribId[0] = SpecialAttrib.LeaderboardSize;




			}


			public override void WriteStream(BinaryWriter binaryWriter)
			{
				binaryWriter.Write(m_dwTitleId);
				binaryWriter.Write(m_qwUserId);
				binaryWriter.Write(m_dwLeaderBoardType);
				binaryWriter.Write(AttribIdLen);
				for(int i=0;i<AttribId.Length;i++)
				{
					binaryWriter.Write(AttribId[i]);
				}
			}


		}

		public class GetResponseData
		{
			public XRLGetHeader Resphead;
			public uint AttlistSize;
			public XRLAttList AttList;

			public GetResponseData(uint AttSize)
			{
				AttlistSize = AttSize;

			}

			//new MemoryStream
			public GetResponseData ReadStream(Stream stream)
			{
				Resphead = (XRLGetHeader)new XRLGetHeader().ReadStream(stream);
				AttList = (XRLAttList)new XRLAttList(AttlistSize).ReadStream(stream);
				return  this;
			}


			public class XRLGetHeader: WireData
			{
				public ulong userPuid = 0;
				public uint dwLeaderBoardType=0;

			}


		}

		public class XRLAttList
		{
			public uint SubAttrSize=0;
			public XrlSubAttr[] SubAttr=null;

			public XRLAttList(uint size)
			{
				SubAttrSize= size;
				SubAttr = new XrlSubAttr[size];
			}

			public XRLAttList ReadStream(Stream stream)
			{
				for (int i=0;i<SubAttrSize;i++)
				{
					SubAttr[i]= (XrlSubAttr)new XrlSubAttr().ReadStream(stream);
				}

				return this;
			}

		}

		public class XResult
		{
			public static bool Failed(uint hr)
			{
				return (hr >> 31 == 1);
			}

			public static bool Succeeded(uint hr)
			{
				return (hr >> 31 == 0);
			}


			// standard HRESULTS
			//
			public const uint S_OK                      = 0x0;
			public const uint S_FALSE                   = 0x1;
			public const uint E_FAIL                    = 0x80004005;
			public const uint E_INVALIDARG              = 0x80070057;

			// XOnline facility-wide HRESULTS
			//
			public const uint XONLINE_E_INTERNAL_ERROR      = 0x80150007;
			public const uint XONLINE_E_SERVER_ERROR        = 0x8015000A;
			public const uint XONLINE_E_INVALID_REQUEST     = 0x80150010;


			// Stats HRESULTS
			public const uint XONLINE_E_STAT_BAD_REQUEST                        = 0x80159001;   // server received incorrectly formatted request.
			public const uint XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD       = 0x80159002;   // title or leaderboard id were not recognized by the server.
			public const uint XONLINE_E_STAT_USER_NOT_FOUND                     = 0x80159003;   // user not found.
			public const uint XONLINE_E_STAT_TOO_MANY_SPECS                     = 0x80159004;   // too many stat specs in a request.
			public const uint XONLINE_E_STAT_TOO_MANY_STATS                     = 0x80159005;   // too manu stats in a spec.
			public const uint XONLINE_E_STAT_SET_FAILED_0                       = 0x80159100;   // set operation failed on spec index 0
			public const uint XONLINE_E_STAT_PERMISSION_DENIED                  = 0x80159200;   // operation failed because of credentials. UserId is not logged in or this operation is not supported in production (e.g. userId=0 in XOnlineStatReset)
			public const uint XONLINE_E_STAT_LEADERBOARD_WAS_RESET              = 0x80159201;   // operation failed because user was logged on before the leaderboard was reset.
			public const uint XONLINE_E_STAT_INVALID_ATTACHMENT                 = 0x80159202;   // attachment is invalid.
			public const uint XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT              = 0x00159203;   // Use XOnlineStatWriteGetResults to get a handle to upload a attachment.

		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\XRLResetUser.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Stats;
using xonline.common.config;
using  ServerTestFramework.LiveService.Presence;
using xonline.common.service;

namespace ServerTestFramework.LiveService.Stats
{
	/// <summary>
	///
	/// </summary>
	public class XRLResetUser:XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint	titleId=10;
		[XRLPayloadFld(IsUPuid=true)]
		public ulong userPuid= 0;
		public uint LBType=0;

		public XRLResetUser(uint title,ulong user,uint lbtype)
		{
			titleId = title;
			userPuid = user;
			LBType = lbtype;
			ServiceId=XOService.Stats;
		}

		protected override string GetServiceName()
		{
			return "/xstats/xstatsreset.ashx";
		}

		public new XRLResponse Execute()
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );

			WriteStream(reqStream);

			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);

			XRLResponse resp = new XRLResponse(XErr);
			return resp;


		}

		public override void ManualPopulateSlot()
		{
			PopulateSlot(ref Slot);
			ManualSlotSetup=true;
		}


        //public XRLResponse Execute(TeamTickets ticket)
        //{
        //    // Prepare request
        //    MemoryStream reqStream = new MemoryStream( 512 );

        //    WriteStream(reqStream);
        //    ticket.WriteStream(reqStream);

        //    ManualPopulateSlot();
        //    if(ticket.list.tickets.Length>=1)
        //        Slot.userPuid0=ticket.list.tickets[0].userID;

        //    bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);
        //    XRLResponse resp = new XRLResponse(XErr);
        //    return resp;


        //}

		public XRLResponse Execute(bool shotmessage,bool longmessage,bool NoAuth)
		{
			ulong i=59843243980;
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			BinaryWriter bwriter = new BinaryWriter(reqStream);

			if(shotmessage)
			{
				bwriter.Write(titleId);
				bwriter.Write(userPuid);
				bwriter.Write((short)LBType);

			}
			else if(longmessage)
			{
				WriteStream(reqStream);
				bwriter.Write(i);

			}
			else if(NoAuth)
			{
				WriteStream(reqStream);
				ManualSlotSetup=true;
			}



			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);

			XRLResponse resp = new XRLResponse(XErr);
			return resp;


		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\XRLRemoveAtt.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Stats;
using xonline.common.config;
using xonline.common.service;

namespace ServerTestFramework.LiveService.Stats
{
	/// <summary>
	/// Summary description for XRLRemoveAtt.
	/// </summary>
	public class XRLRemoveAtt:XRLPayload
	{
		public ushort       attachPathNameLen = 0;
		public string       attachPathName       = null;


		public XRLRemoveAtt(String AttName)
		{
			attachPathNameLen =(ushort)AttName.Length;
			attachPathName = AttName;
			ServiceId=XOService.Stats;
		}

		protected override string GetServiceName()
		{
			return "/xstats/xstatsremoveatt.ashx";
		}

		new public XRLResponse Execute()
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream(reqStream);
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);

			XRLResponse resp = new XRLResponse(XErr);
			return resp;




		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\XRLSubAttr.cs ===
using System;
using System.IO;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Stats;


namespace ServerTestFramework.LiveService.Stats
{
	public class XrlSubAttr : WireData
	{
		public XrlTypeInfo Info;
		public XrlAttrData Data;
		private bool _isXenon = false;
		
		public XrlSubAttr()
		{
		}


		public XrlSubAttr(bool isXenon)
		{
			_isXenon=isXenon;
		}

		public XrlSubAttr(ushort id)
		{
			Info = new XrlTypeInfo(id, (byte)XrlAttrType.None);
		}

		public XrlSubAttr(ushort id, uint data)
		{
			Info = new XrlTypeInfo(id, (byte)XrlAttrType.Long);
			Data = new XrlAttrUInt();
			((XrlAttrUInt)Data).Data = data;
		}

		public XrlSubAttr(ushort id, ulong data)
		{
			Info = new XrlTypeInfo(id, (byte)XrlAttrType.LongLong);
			Data = new XrlAttrULong();
			((XrlAttrULong)Data).Data = data;
		}

		public XrlSubAttr(ushort id, double data)
		{
			Info = new XrlTypeInfo(id, (byte)XrlAttrType.Double);
			Data = new XrlAttrDouble();
			((XrlAttrDouble)Data).Data = data;
		}

		public XrlSubAttr(ushort id, string data)
		{
			const ushort Nickname			= 0xFFFD;
			if( id == Nickname)
			{
				Info = new XrlTypeInfo(id, (byte)XrlAttrType.String);
				Data = new XrlAttrString();
				((XrlAttrString)Data).Data = data;
			}
			else
			{
				Info = new XrlTypeInfo(id, (byte)XrlAttrType.String);
				Data = new XrlAttrUTFString();
				((XrlAttrUTFString)Data).Data = data;
				((XrlAttrUTFString)Data).DataLen =(short) data.Length;

			}
		}

		public XrlSubAttr(ushort id, string data,bool IsUTF)
		{			
			if( !IsUTF)
			{
				Info = new XrlTypeInfo(id, (byte)XrlAttrType.String);
				Data = new XrlAttrString();
				((XrlAttrString)Data).Data = data;
			}
			else
			{
				Info = new XrlTypeInfo(id, (byte)XrlAttrType.String);
				Data = new XrlAttrUTFString();
				((XrlAttrUTFString)Data).Data = data;
				((XrlAttrUTFString)Data).DataLen =(short) data.Length;

			}
		}

		override public WireData ReadStream(BinaryReader reader)
		{
			const ushort Nickname			= 0xFFFD;
			Info = (XrlTypeInfo)new XrlTypeInfo().ReadStream(reader);

			if(_isXenon)
			{
				switch (Info.Type)
				{
					case(byte)StatParamTypes.Null:
						Info.Type= (byte)XrlAttrType.None;
						reader.ReadByte();
						break;
					case(byte)StatParamTypes.Int32:
						Info.Type= (byte)XrlAttrType.Long;
						break;
					case(byte)StatParamTypes.Int64:
						Info.Type= (byte)XrlAttrType.LongLong;
						break;
					case(byte)StatParamTypes.Float:
						Info.Type= (byte)XrlAttrType.Double;
						break;
					case(byte)StatParamTypes.Utf8string:
						Info.Type= (byte)XrlAttrType.String;
						break;
				}

			}
			switch (Info.Type)
			{
				case (byte)XrlAttrType.Long:
					Data = (XrlAttrData)new XrlAttrUInt().ReadStream(reader);
					break;
				case (byte)XrlAttrType.LongLong:
					Data = (XrlAttrData)new XrlAttrULong().ReadStream(reader);
					break;
				case (byte)XrlAttrType.Double:
					Data = (XrlAttrData)new XrlAttrDouble().ReadStream(reader);
					break;
				case (byte)XrlAttrType.String:
					if(Info.ID == Nickname)
						Data = (XrlAttrData)new XrlAttrString().ReadStream(reader);
					else
						Data = (XrlAttrData)new XrlAttrUTFString().ReadStream(reader);

					break;
			}

			return this;
		}

		override public void WriteStream(BinaryWriter writer)
		{
			Info.WriteStream(writer);
			if (Data != null)
				Data.WriteStream(writer);
		}

		
		
	}

	public class XrlTypeInfo : WireData
	{
		public ushort ID;
		public byte Type;

		public XrlTypeInfo()
		{
		}

		public XrlTypeInfo(ushort id, byte type)
		{
			ID = id;
			Type = type;
		}
	}

	public enum XrlAttrType
	{
		None = 0,
		Long = 1,
		LongLong = 2,
		Double = 3,
		String = 4,
		Invalid = 5,
	}

	public class XrlAttrData : WireData
	{
	}

	public class XrlAttrUInt : XrlAttrData
	{
		public uint Data;
	}
	
	public class XrlAttrULong : XrlAttrData
	{
		public ulong Data;
	}

	public class XrlAttrDouble : XrlAttrData
	{
		public double Data;
	}

	public class XrlAttrString : XrlAttrData
	{
		public byte DataLen;
		public string Data;
	}

	public class XrlAttrUTFString : XrlAttrData
	{
		public short DataLen;
		public string Data;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\XRLUsageStore.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using xonline.common.config;


namespace ServerTestFramework.LiveService.Stats
{
	/// <summary>
	///
	/// </summary>
	public class XRLUsageStore:XRLPayload
	{
        	public int xmlLength;
        
	        [WireInfo(SizeParam="xmlLength")]
		public string XML;

	        protected override string GetServiceName()
        	{
			return "/xstats/usagestore.ashx";
        	}

		public override bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd));
		}


	        public override bool Execute(IPEndPoint endPoint)
        	{
		        MemoryStream reqStream = new MemoryStream(512);
		        WriteStream(reqStream);			
			bool uRet = false;
			bool bRet = InternalExecute(endPoint, reqStream);
			if (bRet)
			{
				if ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0))
				{
					uRet = true;
        			}
			}
			return uRet;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\XRLWebEnumLB.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.Utilities;
using xonline.common.config;
using xonline.common.service;

namespace ServerTestFramework.LiveService.Stats
{
	/// <summary>
	///
	/// </summary>
	public class XRLWebEnumLB:XRLPayload
	{
		public uint		TitleId;
		public uint		LBId;
		public ulong	PivotOrPageStart;
		public byte		IsPivotUser;
		public uint		PageSize;

		public XRLWebEnumLB(uint titleId,uint lbid,ulong pivot_pagestart,byte isPivotUser,uint pageSize)
		{
			TitleId = titleId;
			LBId = lbid;
			PivotOrPageStart = pivot_pagestart;
			IsPivotUser =isPivotUser;
			PageSize = pageSize;
			ServiceId=XOService.Stats;
		}

		protected override string GetServiceName()
		{
			return "/xstats/xstatswebenumlb.ashx";
		}


		public XRLWebEnumLBResponse ExecuteNull()
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			//WriteStream( reqStream );
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd_int),reqStream);

			XRLWebEnumLBResponse EnumLBResp = (XRLWebEnumLBResponse)new XRLWebEnumLBResponse().ReadBytes(XErr,xAct.ResponseContents);
			return EnumLBResp;

		}

		public XRLWebEnumLBResponse Execute(int NoOfBytesToWrite)
		{
			// Prepare request

			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );
			MemoryStream reqModStream= new MemoryStream( 512 );
			reqModStream.Write(reqStream.GetBuffer(),0,(int)(reqStream.Length-NoOfBytesToWrite));
			bool bRet = this.InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd_int),reqModStream);

			XRLWebEnumLBResponse EnumLBResp = (XRLWebEnumLBResponse)new XRLWebEnumLBResponse().ReadBytes(XErr,xAct.ResponseContents);
			return EnumLBResp;

		}

		new public XRLWebEnumLBResponse Execute()
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd_int),reqStream);

			XRLWebEnumLBResponse EnumLBResp = (XRLWebEnumLBResponse)new XRLWebEnumLBResponse().ReadBytes(XErr,xAct.ResponseContents);
			return EnumLBResp;

		}
		public uint ExecuteStress()
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd_int),reqStream);

			//XRLWebEnumLBResponse EnumLBResp = (XRLWebEnumLBResponse)new XRLWebEnumLBResponse().ReadBytes(XErr,xAct.ResponseContents);
			return xAct.XErr;

		}
	}


	public class XRLWebEnumLBResponse:XRLResponse
	{
		public uint uiLbSize=0;
		public ulong ulLastResetTime;
		public uint RepUserLBLen=0;
		public WebEnumLBUserdata[] RepUserLB;

		public XRLWebEnumLBResponse()
		{

		}

		public XRLWebEnumLBResponse ReadBytes(uint XErr ,byte[]  Respdata)
		{
			base.xResult = XErr;
			if(XResult.Succeeded(XErr))
			{
				MemoryStream RespStream = new MemoryStream(Respdata);
				BinaryReader _reader= new BinaryReader(RespStream);

				uiLbSize = _reader.ReadUInt32();
				ulLastResetTime = _reader.ReadUInt64();
				RepUserLBLen =_reader.ReadUInt32();


				RepUserLB = new WebEnumLBUserdata[RepUserLBLen];
				for(int count =0 ; count< RepUserLBLen; count++ )
				{
					RepUserLB[count] = (WebEnumLBUserdata)new WebEnumLBUserdata().ReadStream(RespStream);
					//RespData[count]= new GetResponseData().
				}

			}
			return this;
		}


	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\XRLSetRequest.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.FakeSG;
using xonline.common.config;
using xonline.common.service;


namespace ServerTestFramework.LiveService.Stats
{
	public class XRLReloadDBmap:XRLPayload
	{
		protected override string GetServiceName()
		{
			return "/xstats/xstatsreloaddbmap.ashx";
		}
		new public bool Execute(IPEndPoint endPoint)
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream();


			bool bRet = InternalExecute(endPoint,reqStream);

			return bRet;


		}
	}
	/// <summary>
	///
	/// </summary>
	public class XRLSetRequest:XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint	titleId=10;
		[XRLPayloadFld(IsUPuid=true, ArraySize=4)]
		public ulong[] userPuid= null;
		public uint SetReqLen=0;
		public SetRequestData []  SetReq=null;
		private uint NoRecAdded=0;
		public bool NoAuthResp=false;
		public bool NoUserInAuth=false;
		public bool WrongTitleInAuth=false;

		public XRLSetRequest(uint title,uint RecCount)
		{
			titleId = title;
			SetReqLen = RecCount;
			SetReq = new SetRequestData[SetReqLen];
			userPuid = new ulong[4];
			ServiceId=XOService.Stats;

		}
		protected bool Adduser(ulong uid)
		{
			if(userPuid[0]== 0)
			{
				userPuid[0]= uid;
			}
			else if(userPuid[0]!=uid && userPuid[1]==0)
			{
				userPuid[1]= uid;
			}
			else if(userPuid[0]!=uid && userPuid[1]!=uid && userPuid[2]==0)
			{
				userPuid[2]=uid;
			}
			else if(userPuid[0]!=uid && userPuid[1]!=uid && userPuid[2]!=uid && userPuid[3]==0)
			{
				userPuid[3]= uid;
			}


			return true;
		}

		public bool AddSetData(uint LBType,ulong luserPuid,uint AttCount,int SpecialAttMask,ulong URating,ushort Attid, ulong Attrvalue)
		{

			if(NoRecAdded < SetReqLen)
			{
				if(Adduser(luserPuid))
				{
					SetReq[NoRecAdded] = new SetRequestData(titleId,LBType,
						luserPuid,
						AttCount,
						SpecialAttMask,URating,Attid,Attrvalue);
					NoRecAdded++;
					return true;
				}

			}

			return false;
		}


		public bool AddSetData(uint LBType,ulong luserPuid,uint AttCount,int SpecialAttMask,ulong URating)
		{

			if(NoRecAdded < SetReqLen)
			{
				if(Adduser(luserPuid))
				{
					SetReq[NoRecAdded] = new SetRequestData(titleId,LBType,
						luserPuid,
						AttCount,
						SpecialAttMask,URating);
					NoRecAdded++;
					return true;
				}

			}

			return false;
		}

		public bool AddSetData(uint LBType,ulong luserPuid,uint TotalAttCount,int SpecialAttMask,ulong URating,uint NoOfNullAttr)
		{

			if(NoRecAdded < SetReqLen)
			{
				if(Adduser(luserPuid))
				{
					SetReq[NoRecAdded] = new SetRequestData(titleId,LBType,
						luserPuid,
						TotalAttCount,
						SpecialAttMask,URating,NoOfNullAttr);
					NoRecAdded++;
					return true;
				}

			}

			return false;
		}


		public bool AddSetData(uint LBType,ulong luserPuid,uint AttCount,int SpecialAttMask,ulong URating,string NickName)
		{

			if(NoRecAdded < SetReqLen)
			{
				if(Adduser(luserPuid))
				{
					SetReq[NoRecAdded] = new SetRequestData(titleId,LBType,
						luserPuid,
						AttCount,
						SpecialAttMask,URating,NickName);
					NoRecAdded++;
					return true;
				}

			}

			return false;
		}


		public bool AddSetData(uint LBType,ulong luserPuid ,XrlSubAttr[] stats)
		{

			if(NoRecAdded < SetReqLen)
			{
				if(Adduser(luserPuid))
				{
					SetReq[NoRecAdded] = new SetRequestData(titleId,LBType,luserPuid,stats);
					NoRecAdded++;
					return true;
				}

			}

			return false;
		}


		public bool AddSetData(uint LBType,ulong luserPuid ,uint attribcount,XrlSubAttr[] stats)
		{

			if(NoRecAdded < SetReqLen)
			{
				if(Adduser(luserPuid))
				{
					SetReq[NoRecAdded] = new SetRequestData(titleId,LBType,luserPuid,attribcount,stats);
					NoRecAdded++;
					return true;
				}

			}

			return false;
		}


		protected override string GetServiceName()
		{
			return "/xstats/xstatsset.ashx";
		}

		new public XRLSetResponse Execute(IPEndPoint IpendPT)
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			for(int count=0; count < SetReqLen; count++)
			{
				SetReq[count].WriteStream(reqStream);
			}

			bool bRet = InternalExecute(IpendPT,reqStream);

			// create a response object here;
			XRLSetResponse SetResp = (XRLSetResponse)new XRLSetResponse().ReadBytes(XErr,xAct.ResponseContents);
			return SetResp;


		}


		new public XRLSetResponse Execute()
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			for(int count=0; count < SetReqLen; count++)
			{
				SetReq[count].WriteStream(reqStream);
			}

			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);

			// create a response object here;
			XRLSetResponse SetResp = (XRLSetResponse)new XRLSetResponse().ReadBytes(XErr,xAct.ResponseContents);
			return SetResp;


		}
		public bool ExecuteNoResp() // this request cannot be used with  Stats with attachments
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			for(int count=0; count < SetReqLen; count++)
			{
				SetReq[count].WriteStream(reqStream);
			}

			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd),reqStream);

			// create a response object here;
			XRLSetResponse SetResp = (XRLSetResponse)new XRLSetResponse().ReadBytes(XErr,xAct.ResponseContents);
			if(SetResp !=null )
			{
				return true;
			}
			else
			{
				System.Console.WriteLine(" retval = "+bRet+"XERR"+XErr+"httpStatus"+httpStatus);
			}


			return( false );


		}


		public override void ManualPopulateSlot()
		{
			if(!NoAuthResp)
			{
				PopulateSlot(ref Slot);
				if(WrongTitleInAuth)
				{
					Slot.titleId= titleId+10000;

				}

				if( NoUserInAuth)
				{
					Slot.userPuid0=0;
					Slot.userPuid1=0;
					Slot.userPuid2=0;
					Slot.userPuid3=0;
				}




			}
			ManualSlotSetup=true;
		}

	}




	public class XRLSetResponse:XRLResponse
	{
		public AccessToken Token;
		public ushort SetRefLen;
		public SetDataReference[] SetRef;

		public XRLSetResponse()
		{
		}

		public XRLSetResponse ReadBytes(uint XErr, byte[]  Respdata)
		{
			base.xResult =XErr ;
			if(XErr == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
			{
				MemoryStream RespStream = new MemoryStream(Respdata);
				BinaryReader _reader= new BinaryReader(RespStream);


				Token =(AccessToken) new AccessToken().ReadStream(RespStream);
				SetRefLen = _reader.ReadUInt16();
				SetRef = new SetDataReference[SetRefLen];
				for(int i=0;i< SetRefLen;i++)
				{
					SetRef[i] = (SetDataReference)new SetDataReference().ReadStream(RespStream);
				}
			}

			return this;
		}

	}

}

namespace ServerTestFramework.LiveService.Stats.Util
{
	public class SpecialAttrib
	{
		public static ushort Rank				= 0xFFFF;
		public static ushort Rating				= 0xFFFE;
		public static ushort Nickname			= 0xFFFD;
		public static ushort LeaderboardSize	= 0xFFFC;
		public static ushort AttachmentPathName = 0xFFFB;
		public static ushort AttachmentSize     = 0xFFFA;
		public static ushort UnitActivity        = 0xFFF9;
		public static ushort UnitLastPlayedDate  = 0xFFF8;
		public static ushort ReservedEnd		 = 0xFFF7;
		 // MuSigma attributes
		public static ushort Skill				= 61;
		public static ushort GamesPlayed        = 62;
		public static  ushort Mu                = 63;
		public static ushort Sigma              = 64;
	}

	public class SpecialAttribMask
	{
		public  static int Null					 = 0x0000;
		public  static int Rank					 = 0x0001;
		public  static int Rating				 = 0x0002;
		public  static int Nickname				 = 0x0004;
		public  static int LeaderboardSize		 = 0x0008;
		public  static int AttachmentPathName	 = 0x0010;
		public  static int AttachmentSize		 = 0x0020;

	}

	public enum AttrType
	{
		None = 0,
		Long = 1,
		LongLong = 2,
		Double = 3,
		String = 4
	}


	public class SetDataReference :WireData
	{
		public uint LeaderBoardId;
		public ulong UserPuid;

	}

	public class UserState
	{
		public static int Unknown = -1;
		public static int CommitedAtt = 0;
		public static int UnCommitedAtt = 1;
		public static int NOAtt = 2;
	}

	public class UserRatingMap
	{
		public uint LBtype;
		public int AttStatus;
		public ulong user;
		public ulong rating;

		public UserRatingMap(ulong userid,ulong urating)
		{
			user = userid;
			rating = urating;
			AttStatus = UserState.Unknown;
		}
		public UserRatingMap(ulong userid,ulong urating,int attFlag)
		{
			user = userid;
			rating = urating;
			AttStatus = attFlag;

		}
		public UserRatingMap(ulong userid,ulong urating,int attFlag,uint lbt)
		{
			user = userid;
			rating = urating;
			AttStatus = attFlag;
			LBtype = lbt;

		}

	};

	public class AccessToken :WireData
	{
		public ushort	Operation=0;
		public ushort	Version=0;
		public uint		ServiceId=0;
		public uint		Flags=0;
		public ulong	UserPuid;
		public ulong	XboxPuid;
		public ushort	PathNameLen;
		public byte[]	PathName;
		public long		TokenExpirationDate;
		public long		FileExpirationDate;
		public uint		maxFileSize;
		public ushort	SignatureLen;
		public byte[]	Signature;

		public byte[] WriteSignData()
		{
			MemoryStream ReqStream = new MemoryStream();
			BinaryWriter w= new BinaryWriter(ReqStream);

			w.Write(Operation);
			w.Write(Version);
			w.Write(ServiceId);
			w.Write(Flags);
			w.Write(UserPuid);
			w.Write(XboxPuid);
			w.Write(PathNameLen);
			if ( PathNameLen > 0 )
			{
				w.Write(PathName);
			}
			w.Write(TokenExpirationDate);
			w.Write(FileExpirationDate);
			w.Write(maxFileSize);

			return ReqStream.ToArray();

		}

	}



	public class DataGen
	{
		static public Random			RandRatingGen=new System.Random(400);

		static public ulong GetRandomVal()
		{
			return (ulong)RandRatingGen.Next(1,5000);
		}
	}
	public class SetRequestData: WireData
	{
		public uint	titleId=10;
		public ulong userPuid = 0;
		public uint dwLeaderBoardType;
		public uint SubAttrLen=0;
		public XrlSubAttr[] SubAttr=null;

		public SetRequestData(uint	utitleId,uint LBType,ulong luserPuid,uint AttCount,int SpecialAttMask,ulong Urating,ushort attrid,ulong attrVal)
		{
			//int flag=1;
			uint ActualAttCnt=AttCount;
			titleId=utitleId;
			userPuid = luserPuid;
			dwLeaderBoardType = LBType;
			SubAttrLen = AttCount;
			SubAttr = new XrlSubAttr[AttCount];




			ushort addattr=1;
			for (uint index=0;index <AttCount;index++)
			{
				if(index==0)
				{
					SubAttr[index]= new XrlSubAttr(attrid,attrVal);
					ActualAttCnt--;
					continue;
				}

				if((SpecialAttMask & SpecialAttribMask.Nickname)==SpecialAttribMask.Nickname)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.Nickname,"pankaj");
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.Nickname);
					ActualAttCnt--;
				}
				else if((SpecialAttMask & SpecialAttribMask.Rating) == SpecialAttribMask.Rating)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.Rating,Urating);
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.Rating);
					ActualAttCnt--;
				}
				else if((SpecialAttMask & SpecialAttribMask.AttachmentPathName)==SpecialAttribMask.AttachmentPathName)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.AttachmentPathName,"pankaj");
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.AttachmentPathName);
					ActualAttCnt--;
				}
				else if((SpecialAttMask & SpecialAttribMask.AttachmentSize)==SpecialAttribMask.AttachmentSize)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.AttachmentSize,(uint)20);
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.AttachmentSize);
					ActualAttCnt--;
				}
				else
				{
					if(addattr >=1 && addattr<21)
					{
						SubAttr[index]= new XrlSubAttr((ushort)addattr,(uint)DataGen.GetRandomVal());
						addattr++;
					}
					else if(addattr >=21 && addattr<41)
					{
						SubAttr[index]= new XrlSubAttr((ushort)addattr,DataGen.GetRandomVal());
						addattr++;
					}
					else if(addattr>=41)
					{
						SubAttr[index]= new XrlSubAttr((ushort)addattr,(double)DataGen.GetRandomVal());
						addattr++;
					}
					ActualAttCnt++;

				}
			}



		}


		public SetRequestData(uint	utitleId,uint LBType,ulong luserPuid,uint AttCount,int SpecialAttMask,ulong Urating,uint NoOfNullAttr)
		{
			//int flag=1;
			uint ActualAttCnt=AttCount;
			titleId=utitleId;
			userPuid = luserPuid;
			dwLeaderBoardType = LBType;
			SubAttrLen = AttCount;
			SubAttr = new XrlSubAttr[AttCount];




			ushort addattr=1;
			for (uint index=0;index <AttCount;index++)
			{

				if((SpecialAttMask & SpecialAttribMask.Nickname)==SpecialAttribMask.Nickname)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.Nickname,"pankaj");
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.Nickname);
					ActualAttCnt--;
				}
				else if((SpecialAttMask & SpecialAttribMask.Rating) == SpecialAttribMask.Rating)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.Rating,Urating);
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.Rating);
					ActualAttCnt--;
				}
				else if((SpecialAttMask & SpecialAttribMask.AttachmentPathName)==SpecialAttribMask.AttachmentPathName)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.AttachmentPathName,"pankaj");
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.AttachmentPathName);
					ActualAttCnt--;
				}
				else if((SpecialAttMask & SpecialAttribMask.AttachmentSize)==SpecialAttribMask.AttachmentSize)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.AttachmentSize,(uint)20);
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.AttachmentSize);
					ActualAttCnt--;
				}
				else
				{
					if(NoOfNullAttr>0)
					{
						SubAttr[index]= new XrlSubAttr((ushort)addattr);
						addattr++;
						NoOfNullAttr--;
					}
					else if(addattr >=1 && addattr<21)
					{
						SubAttr[index]= new XrlSubAttr((ushort)addattr,(uint)DataGen.GetRandomVal());
						addattr++;
					}
					else if(addattr >=21 && addattr<41)
					{
						SubAttr[index]= new XrlSubAttr((ushort)addattr,DataGen.GetRandomVal());
						addattr++;
					}
					else if(addattr>=41)
					{
						SubAttr[index]= new XrlSubAttr((ushort)addattr,(double)DataGen.GetRandomVal());
						addattr++;
					}
					ActualAttCnt++;

				}
			}



		}

		public SetRequestData(uint	utitleId,uint LBType,ulong luserPuid,uint AttCount,int SpecialAttMask,ulong Urating)
		{
			//int flag=1;
			uint ActualAttCnt=AttCount;
			titleId=utitleId;
			userPuid = luserPuid;
			dwLeaderBoardType = LBType;
			SubAttrLen = AttCount;
			SubAttr = new XrlSubAttr[AttCount];




			ushort addattr=1;
			for (uint index=0;index <AttCount;index++)
			{

				if((SpecialAttMask & SpecialAttribMask.Nickname)==SpecialAttribMask.Nickname)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.Nickname,"pankaj");
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.Nickname);
					ActualAttCnt--;
				}
				else if((SpecialAttMask & SpecialAttribMask.Rating) == SpecialAttribMask.Rating)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.Rating,Urating);
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.Rating);
					ActualAttCnt--;
				}
				else if((SpecialAttMask & SpecialAttribMask.AttachmentPathName)==SpecialAttribMask.AttachmentPathName)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.AttachmentPathName,"pankaj");
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.AttachmentPathName);
					ActualAttCnt--;
				}
				else if((SpecialAttMask & SpecialAttribMask.AttachmentSize)==SpecialAttribMask.AttachmentSize)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.AttachmentSize,(uint)20);
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.AttachmentSize);
					ActualAttCnt--;
				}
				else
				{
					if(addattr >=1 && addattr<21)
					{
						SubAttr[index]= new XrlSubAttr((ushort)addattr,(uint)DataGen.GetRandomVal());
						addattr++;
					}
					else if(addattr >=21 && addattr<41)
					{
						SubAttr[index]= new XrlSubAttr((ushort)addattr,DataGen.GetRandomVal());
						addattr++;
					}
					else if(addattr>=41)
					{
						SubAttr[index]= new XrlSubAttr((ushort)addattr,(double)DataGen.GetRandomVal());
						addattr++;
					}
					ActualAttCnt++;

				}
			}



		}

		public SetRequestData(uint	utitleId,uint LBType,ulong luserPuid,uint AttCount,int SpecialAttMask,ulong Urating,string NickName)
		{
			titleId=utitleId;
			userPuid = luserPuid;
			dwLeaderBoardType = LBType;
			SubAttrLen = AttCount;
			SubAttr = new XrlSubAttr[AttCount];


			ushort addattr=1;
			for (uint index=0;index <AttCount;index++)
			{

				if((SpecialAttMask & SpecialAttribMask.Nickname)==SpecialAttribMask.Nickname)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.Nickname,NickName);
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.Nickname);
				}
				else if((SpecialAttMask & SpecialAttribMask.Rating) == SpecialAttribMask.Rating)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.Rating,Urating);
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.Rating);
				}
				else if((SpecialAttMask & SpecialAttribMask.AttachmentPathName)==SpecialAttribMask.AttachmentPathName)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.AttachmentPathName,"pankaj");
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.AttachmentPathName);
				}
				else if((SpecialAttMask & SpecialAttribMask.AttachmentSize)==SpecialAttribMask.AttachmentSize)
				{
					SubAttr[index]= new XrlSubAttr(SpecialAttrib.AttachmentSize,(uint)20);
					SpecialAttMask = SpecialAttMask & (~SpecialAttribMask.AttachmentSize);
				}
				else
				{
					SubAttr[index]= new XrlSubAttr((ushort)addattr,(ulong)123456);
					addattr++;
				}
			}



		}

		public SetRequestData(uint	utitleId,uint LBType,ulong luserPuid,XrlSubAttr[] stats)
		{
			titleId=utitleId;
			userPuid = luserPuid;
			dwLeaderBoardType = LBType;
			SubAttrLen =(uint) stats.Length;
			SubAttr = stats;

		}

		public SetRequestData(uint	utitleId,uint LBType,ulong luserPuid,uint length ,XrlSubAttr[] stats)
		{
			titleId=utitleId;
			userPuid = luserPuid;
			dwLeaderBoardType = LBType;
			SubAttrLen =(uint)length;
			SubAttr = stats;

		}

		public override void WriteStream(BinaryWriter binaryWriter)
		{
			binaryWriter.Write(titleId);
			binaryWriter.Write(userPuid);
			binaryWriter.Write(dwLeaderBoardType);
			binaryWriter.Write(SubAttrLen);
			for(int i=0;i<SubAttr.Length;i++)
			{
				SubAttr[i].WriteStream(binaryWriter);
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\IMDB\IMDB.cs ===
using System;
using System.Collections;
using System.Diagnostics;
using ServerTestFramework.LiveService;
using ServerTestFramework;


namespace ServerTestFramework.LiveService.Stats.StatsDBSim
{

	public class StatsException : Exception
	{
		public uint XErr;
		public StatsException(uint Xerr,string message) : base(message)
		{
			XErr=Xerr;
		}
	}

	/// <summary>
	/// Summary description for IMDB.
	/// </summary>
	public class StatsIMDB
	{
		ArrayList PostReqs = new ArrayList();
		ArrayList SetReqs = new ArrayList();
		public PlayerTeamIMDB PlayerDb = new PlayerTeamIMDB();
		public Hashtable ProcIds= new Hashtable();

		public void ClearQueue()
		{
			lock(this)
			{
				PostReqs= new ArrayList();
				SetReqs = new ArrayList();
			}
		}

		public void QueueStatsPost(StatsPostReq req)
		{
			lock(this)
			{
				PostReqs.Add(req);
			}
		}

		public void QueueStatsSet(XRLSetRequest req)
		{
			lock(this)
			{
				SetReqs.Add(req);
			}
		}

		public uint[]  ExecuteSetAll()
		{
			uint[] errors= new uint[SetReqs.Count];
			// we have to increment the global ineration number for each request since we use it to rank user.
			PlayerDb._guiUntier+=1;
			lock(this)
			{
				
				for(int i=0 ; i<SetReqs.Count;i++)
				{
					errors[i]=StatsSetTOIMDB((XRLSetRequest)SetReqs[i]);
				}
			}
			return errors;

		}


		public uint[]  ExecuteAll()
		{
			uint[] errors= new uint[PostReqs.Count];
			// we have to increment the global ineration number for each request since we use it to rank user.
			PlayerDb._guiUntier+=1;
			lock(this)
			{
				
				for(int i=0 ; i<PostReqs.Count;i++)
				{
					errors[i]=PostTOStatsIMDB((StatsPostReq)PostReqs[i]);
				}
			}
			return errors;
		}
		
		
		
		//IsPlayerCondTrue
		public bool  IsCondTrue(StatsProcCall Proc,uint uiTitleId,int paramindex)
		{
			bool retval= false;
			short procindex=0;
			StatParam[] Params =Proc.Params;
			if (paramindex<Params.Length && Params[paramindex]._data is Int16)
				procindex=((short)(Params[paramindex]._data));
			else
				throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"2nd param must be LBID"));
			
			
			if(ProcIds.Contains(procindex)&& (bool)ProcIds[procindex])
			{
				retval=true;
			}
			
			if(procindex ==0)
				retval=true;

			if(procindex!=0 && !ProcIds.Contains(procindex))
				throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"there is no condition proc at index"+(procindex+1)));

			return retval;

		}
		public void  AddToUserConditionMap(StatsProcCall Proc,uint uiTitleId, short procindex)
		{
			ulong Userid =0;
			uint  uiLbId =0;
			byte comptype=0;;
			short statid=0;
			object objvalue= null;
            
			StatParam[] Params =Proc.Params;
			int i=0;

			if (Params[i] is StatParamPuid )
			{
				Userid=(ulong)(Params[i++]._data);
				
			}
			else
				throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"1st params is not users"));

			if (i<Params.Length && Params[i]._data is Int32)
				uiLbId=(uint)((int)(Params[i++]._data));
			else
				throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"2nd param must be LBID"));

			if (i<Params.Length && Params[i]._data is byte)
				comptype=((byte)(Params[i++]._data));
			else
				throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"3nd param must be CompType"));
			
			if (i<Params.Length && Params[i]._data is Int16)
				statid=((short)(Params[i++]._data));
			else
				throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"4th param must be statID"));
			if (i<Params.Length )
				objvalue=((Params[i++]._data));
			

			
			// insert the proc id & val= true if condition Succeed or val=false
			if(PlayerDb.VerifyStatID(uiTitleId,uiLbId,Userid,statid,objvalue,comptype))
				ProcIds.Add((short)(procindex+1),true);
			else
				ProcIds.Add((short)(procindex+1),false);
			
			
			

		}

		protected uint StatsSetTOIMDB(XRLSetRequest req)
		{
			uint Xerr=0;
			try
			{
				// add data to in memroy stats
				if(req.SetReq.Length >20)
				{
					Xerr= HResult.XONLINE_E_STAT_TOO_MANY_SPECS;
					Global.RO.Warn("IMDB:- Records greater then MAx Allowed ");
					return Xerr;
				}

				for(int i=0; i <req.SetReq.Length;i++)
				{
					try
					{
						PlayerDb.SetUserStats(req.SetReq[i]);
					}
					catch(StatsException sExp)
					{
						Xerr= sExp.XErr;
						Global.RO.Warn("IMDB:-"+sExp.Message);
						if(Xerr!=HResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
							break;
					}
				}
			}
			catch(StatsException sExp)
			{
				Xerr= sExp.XErr;
				Global.RO.Warn("IMDB:-"+sExp.Message);
			}

			return Xerr;
		}

		protected uint PostTOStatsIMDB(StatsPostReq req)
		{
			uint Xerr=0;
			uint titleid =req.data.TitleID;
			ProcIds.Clear();
			

			StatsProcCall[]  tProcCalls = req.data.ProcCalls;

			if(tProcCalls.Length>1000)
			{
				Xerr= HResult.XONLINE_E_STAT_TOO_MANY_PROCEDURES;
				Global.RO.Warn("IMDB:- Too Many Procedures max is 1000");
				return Xerr;
			}

			try
			{
				for( int i=0; i<tProcCalls.Length;i++)
				{
					try
					{
						if(tProcCalls[i].ProcID<StatProcIDs.Replace ||tProcCalls[i].ProcID>StatProcIDs.MuSigmaEx)
							throw new StatsException(HResult.XONLINE_E_STAT_INVALID_PROCEDURE,"INVALID_PROCEDURE "+tProcCalls[i].ProcID);

						if( tProcCalls[i].ProcID==StatProcIDs.CondPlayer)
							AddToUserConditionMap(tProcCalls[i],titleid,(short)i);
						else if( tProcCalls[i].ProcID==StatProcIDs.Replace && IsCondTrue(tProcCalls[i],titleid,2))
							PlayerDb.Replace(tProcCalls[i],titleid);
						else if( tProcCalls[i].ProcID==StatProcIDs.Min && IsCondTrue(tProcCalls[i],titleid,2))
							PlayerDb.Min(tProcCalls[i],titleid);
						else if( tProcCalls[i].ProcID==StatProcIDs.Max && IsCondTrue(tProcCalls[i],titleid,2))
							PlayerDb.Max(tProcCalls[i],titleid);
						else if( tProcCalls[i].ProcID==StatProcIDs.Add && IsCondTrue(tProcCalls[i],titleid,2))
							PlayerDb.Add(tProcCalls[i],titleid);
						else if( tProcCalls[i].ProcID==StatProcIDs.Elo && IsCondTrue(tProcCalls[i],titleid,3))
							PlayerDb.Elo(tProcCalls[i],titleid);
						else if( tProcCalls[i].ProcID==StatProcIDs.MuSigma && IsCondTrue(tProcCalls[i],titleid,1))
                            PlayerDb.MuSigma(tProcCalls[i],titleid);
                        else if( tProcCalls[i].ProcID==StatProcIDs.MuSigmaEx && IsCondTrue(tProcCalls[i],titleid,1))
                            PlayerDb.MuSigmaEx(tProcCalls[i],titleid);
					}
					catch(StatsException sExp)
					{
						Xerr= sExp.XErr;
						Global.RO.Warn("IMDB:-"+sExp.Message);
						if(Xerr!=HResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
							break;
					}

						
						
				}

				

			}
			catch(StatsException sExp)
			{
				Xerr= sExp.XErr;
				Global.RO.Warn("IMDB:-"+sExp.Message);
			}

			return Xerr;
		}

				
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFUtil\DbUtil.cs ===
using System;
using ServerTestFramework;
using xonline.common.diagnostics;
using System.Data.SqlClient;
using System.IO;
using System.Text.RegularExpressions;

using xonline.common.config;
using xonline.common.mgmt;

namespace xonline.common.stfutil
{
    public class DbUtil
    {
        public static SqlConnection CreateDb(string iface)
        {
            IInterfaceInfo ifaceinfo = Config.GetSingleInterface(iface);
            return CreateDb(ifaceinfo.IPAddressString, ifaceinfo.DBName);
        
        }        
        
        public static SqlConnection CreateDb(string server, string dbname)
        {
            SqlConnection cxn = null;
            
            cxn = new SqlConnection("Data Source=" + server + 
                                      ";Initial Catalog=master" + 
                                      ";Integrated Security=SSPI");
            cxn.Open();
            SqlCommand cmd = cxn.CreateCommand();
            
            // try to kill any sessions on the database we're about to drop
            try
            {
                cmd.CommandText = "sp_who";
                SqlDataReader reader = cmd.ExecuteReader();
                string kills = "";
                
                while (reader.Read())
                {
                    if (!reader.IsDBNull(reader.GetOrdinal("dbname")) && (string)reader["dbname"] == dbname)
                    {
                        kills += "kill " + reader.GetInt16(reader.GetOrdinal("spid")) + "\r\n";
                    }
                }
                
                reader.Close();
                
                if (kills != "")
                {
                    cmd.CommandText = kills;
                    cmd.ExecuteNonQuery();
                }
            }
            catch (SqlException se)
            {
                Console.WriteLine("    Attempting to kill existing users failed with " + se.Message + ". Continuing...");
            }
                        
                
            
            

            // Attempt to create the database. If it already exists, we continue and just re-initialize it with the test data
            try
            {
                cmd.CommandText = "if exists (select * from sysdatabases where name = '" + dbname + "') " + 
                                    "begin drop database " + dbname + " end " + 
                                    "create database " + dbname;
                
                cmd.ExecuteNonQuery();
                
                cxn.ChangeDatabase(dbname);
                                                                                    
                cmd = cxn.CreateCommand();
                cmd.CommandText = "sp_addrole 'ClientLib'";
                cmd.ExecuteNonQuery();
            }
            catch (SqlException se)
            {
                // REVIEW: continue as if everything is good. This is horribly slow since we have to wait for the DB drop to fail with a timeout error
                Console.WriteLine("    Database creation failed with message " + se.Message + ". Continuing...");
            }
                
            
            return cxn;
            
        }
        
        public static void ExecuteSqlFile(SqlConnection cxn, string sqlfile)
        {
            using (StreamReader reader = new StreamReader(sqlfile))
            {
                string fileText = reader.ReadToEnd();
                string[] statements = Regex.Split(fileText, "^go\\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
                
                SqlCommand cmd = cxn.CreateCommand();
                cmd.Transaction =  cxn.BeginTransaction();
                
                foreach (string sql in statements)
                {
                    if (sql.Trim() != "")
                    {
                        try
                        {
                            cmd.CommandText = sql;
                            cmd.ExecuteNonQuery();
                        }
                        catch (SqlException e)
                        {
                            cmd.Transaction.Rollback();
                            throw new Exception("An error occured executing " + sqlfile + ", Line " + e.LineNumber + ":\r\n" + e.Message);
                        }
                            
                    }    
                }
                
                cmd.Transaction.Commit();
                
                
            }        
        }
    }    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFUtil\AccountsUtil.cs ===
using System;
using System.Diagnostics;
using System.Net;
using System.Security.Cryptography;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.LiveService.FakeSG;

using xonline.common.billing;
using xonline.common.diagnostics;
using xonline.common.protocol;
using xonline.common.puidmgr;
using xonline.common.service;
using xonline.common.user;
using xonline.common.utilities;

namespace xonline.common.stfutil
{
    public class AccountsUtil
    {
        public static CSGInfo CreateSGInfoSlot()
        {
            ulong machinePuid = PUIDMgr.GetNewXenonPuid();
            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();

            slot.machinePuid = machinePuid;
            slot.languageID = (ushort)1;

            slot.wMajorVersion = 2;
            slot.wMinorVersion = 0;
            slot.wBuildNumber = 6509;
            slot.wQFENumber = 0;

            slot.titleId = XOn.XENON_LIVE_SIGNUP_TITLE_ID;
            slot.authDataFlags |= xonline.common.service.SGInfo.XONLINE_AUTHDATA_FLAGS_ISXENON_MASK;

            return slot;
        }

        public static CSGInfo CreateSGInfoSlot(User u)
        {
            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();

            slot.machinePuid = u.MachinePuid;
            slot.languageID = (ushort)u.LanguageId;
            slot.userPuid0 = u.Puid;
            slot.userFlag0 = ((((uint)u.Tier << 4) << 8) | (uint)u.CountryId) << 8;
            slot.wMajorVersion = 2;
            slot.wMinorVersion = 0;
            slot.wBuildNumber = 6509;
            slot.wQFENumber = 0;

            if ( u.AccountType == User.XenonAccount )
            {
                slot.titleId = XOn.XENON_LIVE_SIGNUP_TITLE_ID;
                slot.authDataFlags |= xonline.common.service.SGInfo.XONLINE_AUTHDATA_FLAGS_ISXENON_MASK;
            }
            else if ( u.AccountType == User.Xbox1Account )
            {
                slot.titleId = XOn.DASH_TITLE_ID;
                slot.authDataFlags &= (~xonline.common.service.SGInfo.XONLINE_AUTHDATA_FLAGS_ISXENON_MASK);
            }

            if ( u.IsJuvenileAccount )
            {
                slot.userFlag0 |= 0x01000000;
            }

            return slot;
        }

        public static string CreateHttpAuthData()
        {
            HTTPAuthData httpAuthData = new HTTPAuthData();
            httpAuthData.OverrideTitleID = XOn.WEB_TITLE_ID;
            httpAuthData.OverrideXboxID = 0;

            httpAuthData.OverridePrivileges[0] |= ((uint)1) << (byte)xonline.common.service.XOService.User_Account;
            httpAuthData.OverrideNumPrivileges++;

            httpAuthData.OverridePrivileges[0] |= ((uint)1) << (byte)xonline.common.service.XOService.Base_Subscription;
            httpAuthData.OverrideNumPrivileges++;

            string authData = httpAuthData.GetBase64EncodedString();
            return authData;
        }

        public static string CreateHttpAuthData(User u)
        {
            HTTPAuthData httpAuthData = new HTTPAuthData();
            httpAuthData.OverrideTitleID = XOn.WEB_TITLE_ID;
            httpAuthData.OverrideXboxID = 0;

            uint dwUserFlags = 0;
            XUIDAndTrust.SetUserFlagCountry(ref dwUserFlags, (uint)u.CountryId);
            XUIDAndTrust.SetUserFlagLanguage(ref dwUserFlags, (uint)u.LanguageId);
            XUIDAndTrust.SetUserFlagTier(ref dwUserFlags, (uint)u.Tier);

            httpAuthData.LogonUsers[0] = new XUIDAndTrust(u.Puid, dwUserFlags, 0.0F);

            httpAuthData.OverridePrivileges[0] |= ((uint)1) << (byte)xonline.common.service.XOService.Base_Subscription;
            httpAuthData.OverrideNumPrivileges++;

            httpAuthData.OverridePrivileges[0] |= ((uint)1) << (byte)xonline.common.service.XOService.User_Account;
            httpAuthData.OverrideNumPrivileges++;

            httpAuthData.OverridePrivileges[0] |= ((uint)1) << (byte)xonline.common.service.XOService.Billing_Offering;
            httpAuthData.OverrideNumPrivileges++;

            string authData = httpAuthData.GetBase64EncodedString();
            return authData;
        }

        public static User CreateAdultUser()
        {
            return CreateAdultUser(103, PaymentInstrumentTypeEnum.CreditCard, CardTypeEnum.Visa);
        }

        public static User CreateAdultUser(byte countryId)
        {
            return CreateAdultUser(countryId, PaymentInstrumentTypeEnum.CreditCard, CardTypeEnum.Visa);
        }

        public static User CreateAdultUser(CardTypeEnum ccType)
        {
            return CreateAdultUser(103, PaymentInstrumentTypeEnum.CreditCard, ccType);
        }

        public static User CreateAdultUser(byte countryId, CardTypeEnum ccType)
        {
            return CreateAdultUser(countryId, PaymentInstrumentTypeEnum.CreditCard, ccType);
        }

        public static User CreateAdultUser(PaymentInstrumentTypeEnum piType, CardTypeEnum ccType)
        {
            return CreateAdultUser(103, piType, ccType);
        }

        public static User CreateAdultUser(byte countryId, PaymentInstrumentTypeEnum piType, CardTypeEnum ccType)
        {
            CreateLiveAccountRequest req = CreateAdultUserRequest(countryId, piType, ccType);
            return CreateUserFromRequest(req);
        }

        public static User CreateJuvenileUser()
        {
            return CreateJuvenileUser(103, PaymentInstrumentTypeEnum.CreditCard, CardTypeEnum.Visa);
        }

        public static User CreateJuvenileUser(byte countryId)
        {
            return CreateJuvenileUser(countryId, PaymentInstrumentTypeEnum.CreditCard, CardTypeEnum.Visa);
        }

        public static User CreateJuvenileUser(byte countryId, CardTypeEnum ccType)
        {
            return CreateJuvenileUser(countryId, PaymentInstrumentTypeEnum.CreditCard, ccType);
        }

        public static User CreateJuvenileUser(PaymentInstrumentTypeEnum piType, CardTypeEnum ccType)
        {
            return CreateJuvenileUser(103, piType, ccType);
        }

        public static User CreateJuvenileUser(byte countryId, PaymentInstrumentTypeEnum piType, CardTypeEnum ccType)
        {
            CreateLiveAccountRequest req = CreateJuvenileUserRequest(countryId, piType, ccType);
            return CreateUserFromRequest(req);
        }

        public static User CreateUserFromRequest(CreateLiveAccountRequest req)
        {
            return CreateUserFromRequest(req, null);
        }

        public static User CreateUserFromRequest(CreateLiveAccountRequest req, WebHeaderCollection httpHeaders)
        {
            CreateLiveAccountResponse resp = new CreateLiveAccountResponse();

            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.machinePuid = req.machinePuid;
            slot.userPuid0 = 0;
            slot.titleId = XOn.XENON_LIVE_SIGNUP_TITLE_ID;
            slot.authDataFlags |= xonline.common.service.SGInfo.XONLINE_AUTHDATA_FLAGS_ISXENON_MASK;

            XRLObject2 xrlo = resp;
            HResult hr = StfXrlUtil.PostXrlRequest(ref slot, xonline.common.service.XOService.User_Account, req.Xrl, httpHeaders, req, ref xrlo);

            if ( false == HResult.Succeeded(hr) )
            {
                throw new XRLException(hr, XEvent.Id.COMMON_CODE_199, "CreateUserFromRequest: CreateLiveAccount failed.");
            }

            User u = new User();
            u.Load(resp.userPuid);

            return u;
        }

        public static CreateLiveAccountRequest CreateAdultUserRequest()
        {
            return CreateAdultUserRequest(103, PaymentInstrumentTypeEnum.CreditCard, CardTypeEnum.Visa);
        }

        public static CreateLiveAccountRequest CreateAdultUserRequest(byte countryId)
        {
            return CreateAdultUserRequest(countryId, PaymentInstrumentTypeEnum.CreditCard, CardTypeEnum.Visa);
        }

        public static CreateLiveAccountRequest CreateAdultUserRequest(CardTypeEnum ccType)
        {
            return CreateAdultUserRequest(103, PaymentInstrumentTypeEnum.CreditCard, ccType);
        }

        public static CreateLiveAccountRequest CreateAdultUserRequest(byte countryId, CardTypeEnum ccType)
        {
            return CreateAdultUserRequest(countryId, PaymentInstrumentTypeEnum.CreditCard, ccType);
        }

        public static CreateLiveAccountRequest CreateAdultUserRequest(PaymentInstrumentTypeEnum piType, CardTypeEnum ccType)
        {
            return CreateAdultUserRequest(103, piType, ccType);
        }

        public static CreateLiveAccountRequest CreateAdultUserRequest(byte countryId, PaymentInstrumentTypeEnum piType, CardTypeEnum ccType)
        {
            CreateLiveAccountRequest req = CreateUserRequest(countryId, piType, ccType);
            req.birthdate = new DateTime(1970, 1, 1);

            return req;
        }

        public static CreateLiveAccountRequest CreateJuvenileUserRequest()
        {
            return CreateJuvenileUserRequest(103, PaymentInstrumentTypeEnum.CreditCard, CardTypeEnum.Visa);
        }

        public static CreateLiveAccountRequest CreateJuvenileUserRequest(byte countryId)
        {
            return CreateJuvenileUserRequest(countryId, PaymentInstrumentTypeEnum.CreditCard, CardTypeEnum.Visa);
        }

        public static CreateLiveAccountRequest CreateJuvenileUserRequest(CardTypeEnum ccType)
        {
            return CreateJuvenileUserRequest(103, PaymentInstrumentTypeEnum.CreditCard, ccType);
        }

        public static CreateLiveAccountRequest CreateJuvenileUserRequest(byte countryId, PaymentInstrumentTypeEnum piType, CardTypeEnum ccType)
        {
            CreateLiveAccountRequest req = CreateUserRequest(countryId, piType, ccType);

            // juvenile accounts have different owner passport puid
            req.signedOwnerPassportPuid = PassportTestUtil.Create();

            // set age to the country's min user age
            int minUserAge = CountryDictionary.MinAge(countryId).User;
            DateTime now = DateTime.UtcNow;

            req.birthdate = new DateTime(now.Year - minUserAge, now.Month, now.Day);

            return req;
        }

        public static CreateLiveAccountRequest CreateUserRequest(byte countryId, PaymentInstrumentTypeEnum piType, CardTypeEnum ccType)
        {
            CreateLiveAccountRequest req = CreateGenericLiveAccountRequest();

            req.addressInfo = CreateAddressInfo(countryId);
            req.countryId = countryId;
            req.languageId = xonline.common.service.XOn.XC_LANGUAGE_ENGLISH;

            req.paymentInstrumentType = (byte) piType;
            switch (piType)
            {
            case PaymentInstrumentTypeEnum.CreditCard:
                req.creditCardInfo = CreateCreditCardInfo(ccType);
                break;
            case PaymentInstrumentTypeEnum.DirectDebit:
                req.directDebitInfo = CreateDirectDebitInfo();
                break;
            case PaymentInstrumentTypeEnum.None:
                req.offerId = 0;
                req.billingToken = "CRYCP-BM9W4-KH3B6-6MRQT-HHGBF";
                break;
            }

            return req;
        }

        public static AddressInfoData CreateAddressInfo()
        {
            return CreateAddressInfo(103); // US
        }

        public static AddressInfoData CreateAddressInfo(byte countryId)
        {
            AddressInfoData ai = new AddressInfoData();

            switch (countryId)
            {
            case 5:  // AT
                {
                    ai.street1 = "Liechtenstienstrabe 89";
                    ai.city = "Vienna";
                    ai.postalCode = "1090";
                }
                break;
            case 6:  // AU
                {
                    ai.street1 = "7 Haas";
                    ai.city = "Broome";
                    ai.state = "WA";
                    ai.postalCode = "6725";
                }
                break;
            case 8:  // BE
                {
                    ai.street1 = "20 Place Rogier";
                    ai.city = "Brussels";
                    ai.postalCode = "1210";
                }
                break;
            case 16: // CA
                {
                    ai.street1 = "1348 Robson Street";
                    ai.city = "Vancouver";
                    ai.state = "BC";
                    ai.postalCode = "V6E 1C5";
                }
                break;
            case 18: // CH
                {
                    ai.street1 = "TrockMatt 6c";
                    ai.city = "Othmarsingen";
                    ai.postalCode = "5504";
                }
                break;
            case 24: // DE
                {
                    ai.street1 = "111 Foo";
                    ai.city = "Mnchen";
                    ai.postalCode = "80788";
                }
                break;
            case 25: // DK
                {
                    ai.street1 = "Gammel Strand 50";
                    ai.city = "Kbenhavn";
                    ai.postalCode = "1202";
                }
                break;
            case 31: // ES
                {
                    ai.street1 = "Grand Via 12";
                    ai.city = "Madrid";
                    ai.postalCode = "28013";
                }
                break;
            case 32: // FI
                {
                    ai.street1 = "Pohjoinen Rautatiekatu 23";
                    ai.city = "Helsinki";
                    ai.postalCode = "00100";
                }
                break;
            case 34: // FR
                {
                    ai.street1 = "15 rue Edouard Manet";
                    ai.city = "Paris";
                    ai.postalCode = "75013";
                }
                break;
            case 35: // GB
                {
                    ai.street1 = "87-135 Brompton Road";
                    ai.street2 = "Knightsbridge";
                    ai.city = "London";
                    ai.postalCode = "SW1X 7XL";
                }
                break;
            case 39: // HK
                {
                    ai.street1 = "Salisbury Road";
                    ai.city = "Kowloon";
                }
                break;
            case 44: // IE
                {
                    ai.street1 = "4 Chapel Hill";
                    ai.city = "Kildaire";
                    ai.state = "Kildaire";
                }
                break;
            case 50: // IT
                {
                    ai.street1 = "Via A. Lamarmora 28";
                    ai.city = "Firenze";
                    ai.postalCode = "50121";
                }
                break;
            case 53: // JP
                {
                    ai.street1 = "\x1753415361677F89";
                    ai.city = "\x2D674C5E025E17533A53";
                    ai.state = "\x1753776D5390";
                    ai.postalCode = "0010010";
                }
                break;
            case 56: // KR
                {
                    ai.street1 = "123 Elm St.";
                    ai.city = "Seoul";
                    ai.postalCode = "110-700";
                }
                break;
            case 71: // MX
                {
                    ai.street1 = "Paseo de los cocoteros";
                    ai.city = "Nuevo Vallarta";
                    ai.state = "NAY";
                    ai.postalCode = "63735";
                }
                break;
            case 74: // NL
                {
                    ai.street1 = "Nieuwezijds Voorburgwal 5";
                    ai.city = "Amsterdam";
                    ai.postalCode = "1012 RC";
                }
                break;
            case 75: // NO
                {
                    ai.street1 = "Ruths Vei 25 B";
                    ai.city = "Oslo";
                    ai.postalCode = "0980";
                }
                break;
            case 76: // NZ
                {
                    ai.street1 = "Queen Street";
                    ai.city = "Methven";
                    ai.postalCode = "8353";
                }
                break;
            case 90: // SE
                {
                    ai.street1 = "Norra Vallgaton 62";
                    ai.city = "Malmo";
                    ai.postalCode = "20180";
                }
                break;
            case 91: // SG
                {
                    ai.street1 = "Joo Chait Road";
                    ai.city = "Singapore";
                    ai.postalCode = "427373";
                }
                break;
            case 101: // TW
                {
                    ai.street1 = "Pei Ta Road";
                    ai.city = "Hsinchu";
                    ai.postalCode = "300";
                }
                break;
            case 103: // US
            default:
                {
                    ai.street1 = "123 Main St.";
                    ai.street2 = "Apt. #321";
                    ai.state = "AK";
                    ai.city = "Eek";
                    ai.postalCode = "99578";
                }
                break;
            }
            return ai;
        }

        public static CreateLiveAccountRequest CreateGenericLiveAccountRequest()
        {
            CreateLiveAccountRequest req = new CreateLiveAccountRequest();

            req.titleId = XOn.XENON_LIVE_SIGNUP_TITLE_ID;
            req.machinePuid = PUIDMgr.GetNewXenonPuid();
            req.signedUserPassportPuid = PassportTestUtil.Create();
            req.signedOwnerPassportPuid = req.signedUserPassportPuid;
            req.gamertag = GetRandomGamertag();
            req.firstName = "Joe";
            req.lastName = "Blow";

            req.addressInfo = new AddressInfoData();

            req.phoneInfo = CreatePhoneInfo();
            req.email = req.gamertag + "@xboxtest.com";
            req.birthdate = new DateTime(1980,1,1);
            req.paymentInstrumentType = (byte) PaymentInstrumentTypeEnum.None;
            req.offerId = 0xFFFE07D18000000A;
            req.billingToken = "";

            req.creditCardInfo = new CreditCardInfoData();
            req.directDebitInfo = new DirectDebitInfoData();

            return req;
        }

        public static User CreateXbox1UserFromRequest(CreateAccountRequest caReq)
        {
            CreateAccountResponse caResp = new CreateAccountResponse();

            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.machinePuid = caReq.machinePuid;
            slot.userPuid0 = 0;
            slot.titleId = XOn.DASH_TITLE_ID;

            XRLObject2 xrlo = caResp;
            HResult hr = StfXrlUtil.PostXrlRequest(ref slot, xonline.common.service.XOService.User_Account, caReq.Xrl, caReq, ref xrlo);

            if ( false == HResult.Succeeded(hr) )
            {
                throw new XRLException(hr, XEvent.Id.COMMON_CODE_200, "CreateUserFromRequest: CreateLiveAccount failed.");
            }

            User u = new User();
            u.Load(caResp.puid);

            return u;
        }

        public static CreateAccountRequest CreateXbox1JuvenileUserRequest(byte countryId, CardTypeEnum ccType)
        {
            CreateAccountRequest caReq = CreateGenericXbox1AccountRequest();

            AddressInfoData addr = CreateAddressInfo(countryId);
            caReq.street1    = addr.street1;
            caReq.street2    = addr.street2;
            caReq.city       = addr.city;
            caReq.district   = addr.district;
            caReq.state      = addr.state;
            caReq.postalCode = addr.postalCode;
            caReq.countryId  = countryId;
            caReq.languageId = xonline.common.service.XOn.XC_LANGUAGE_ENGLISH;

            CreditCardInfoData cc = CreateCreditCardInfo(ccType);
            caReq.cardTypeId = (byte) ccType;
            caReq.cardHolder = cc.accountHolderName;
            caReq.cardNumber = cc.accountNumber;
            caReq.cardExpiration = cc.expirationDate;

            // set age to the country's min user age
            int minUserAge = CountryDictionary.MinAge(countryId).User;
            DateTime now = DateTime.UtcNow;
            caReq.birthdate = new DateTime(now.Year - minUserAge, now.Month, now.Day);

            return caReq;
        }


        public static CreateAccountRequest CreateXbox1UserRequest(byte countryId, CardTypeEnum ccType)
        {
            CreateAccountRequest caReq = CreateGenericXbox1AccountRequest();

            AddressInfoData addr = CreateAddressInfo(countryId);
            caReq.street1    = addr.street1;
            caReq.street2    = addr.street2;
            caReq.city       = addr.city;
            caReq.district   = addr.district;
            caReq.state      = addr.state;
            caReq.postalCode = addr.postalCode;
            caReq.countryId  = countryId;
            caReq.languageId = xonline.common.service.XOn.XC_LANGUAGE_ENGLISH;

            CreditCardInfoData cc = CreateCreditCardInfo(ccType);
            caReq.cardTypeId = (byte) ccType;
            caReq.cardHolder = cc.accountHolderName;
            caReq.cardNumber = cc.accountNumber;
            caReq.cardExpiration = cc.expirationDate;

            return caReq;
        }


        public static CreateAccountRequest CreateGenericXbox1AccountRequest()
        {
            CreateAccountRequest caReq = new CreateAccountRequest();

            caReq.machinePuid = PUIDMgr.GetNewPUID();
            caReq.titleId = XOn.DASH_TITLE_ID;
            caReq.birthdate = new DateTime(1980,1,1);
            caReq.msSpam = 1;
            caReq.partnerSpam = 0;
            caReq.gamertag = GetRandomGamertag();
            caReq.firstName = "Joe";
            caReq.lastName = "Blow";
            caReq.email = caReq.gamertag + "@xboxtest.com";
            caReq.activationCode = "1111111111111111111111111";

            PhoneInfoData phoneInfo = CreatePhoneInfo();
            caReq.phonePrefix = phoneInfo.phonePrefix;
            caReq.phoneNumber = phoneInfo.phoneNumber;
            caReq.phoneExtension = phoneInfo.phoneExtension;

            return caReq;
        }

        public static PhoneInfoData CreatePhoneInfo()
        {
            PhoneInfoData pi = new PhoneInfoData();
            pi.phonePrefix = "888";
            pi.phoneNumber = "5551212";

            return pi;
        }

        public static CreditCardInfoData CreateVisaInfo()
        {
            return CreateCreditCardInfo(CardTypeEnum.Visa);
        }

        public static CreditCardInfoData CreateCreditCardInfo(CardTypeEnum ccType)
        {
            CreditCardInfoData cci = new CreditCardInfoData();
            cci.cardType = (byte) ccType;
            cci.accountHolderName = "Joe Blow";
            switch (ccType)
            {
            case CardTypeEnum.Visa:
                cci.accountNumber = CCNumber.GetCCNumberVISA();
                break;
            case CardTypeEnum.MasterCard:
                cci.accountNumber = CCNumber.GetCCNumberMC();
                break;
            case CardTypeEnum.AmEx:
                cci.accountNumber = CCNumber.GetCCNumberAMEX();
                break;
            case CardTypeEnum.Discover:
                cci.accountNumber = CCNumber.GetCCNumberDiscover();
                break;
            case CardTypeEnum.JCB:
                cci.accountNumber = CCNumber.GetCCNumberJCB();
                break;
            case CardTypeEnum.Diners:
                cci.accountNumber = CCNumber.GetCCNumberDiners();
                break;
            case CardTypeEnum.KLCC:
                cci.accountNumber = CCNumber.GetCCNumber();
                break;
            }
            cci.expirationDate = new DateTime(DateTime.UtcNow.Year + 3, 1, 1);

            return cci;
        }

        public static DirectDebitInfoData CreateDirectDebitInfo()
        {
            DirectDebitRandomizer ddr = new DirectDebitRandomizer("DE");
            ddr.Randomize();

            DirectDebitInfoData ddi = new DirectDebitInfoData();
            ddi.accountHolderName = "Joe Blow";
            ddi.accountNumber = ddr.AccountNumber;
            ddi.branchCode = ddr.BranchCode;
            return ddi;
        }

        public static string GetRandomGamertag()
        {
            string name = "";

            for (;;)
            {
                string[] names = null;
                GamertagSuggestionParameters parameters = new GamertagSuggestionParameters(null, 1, 103);
                GamertagSuggestions gamerTagSuggestions = GamertagSuggestionsFactory.GetGamerTagSuggestions(GamertagSuggestionType.NounAdjectiveSuggestion);

                gamerTagSuggestions.GetNameSuggestions(parameters, out names);

                name = names[0];
                int padLength = (int)XOn.XONLINE_NAME_MAX_SIZE - name.Length;

                if ( padLength > 0 )
                {
                    Random r = new Random();
                    string pad = r.Next().ToString().Substring(1, padLength);
                    name += pad;
                }

                if ( NameUtil.VetName(name) )
                {
                    break;
                }
            }

            return name;
        }

        public static ulong CreateOfflineXuid()
        {
            RandomNumberGenerator rng = RandomNumberGenerator.Create();
            byte[] xuidBytes = new byte[8];
            rng.GetBytes(xuidBytes);
            return BitConverter.ToUInt64(xuidBytes, 0);
        }

        /// <summary>
        /// *** FOR INTERNAL MICROSOFT TEST ONLY ***
        /// This file will generate and validate credit card numbers based on the checksum.
        /// The credit card numbers created by this class are for internal test only. They
        /// will pass the checksum requirement but they are NOT real credit cards and they
        /// are useless in production or outside of Microsoft.
        /// NEVER attempt to use these cards in production or outside of Microsoft. You will
        /// not be able to purchase anything and you will be committing FRAUD.
        /// Immediately upon completion of testing, you must discard the credit card number.
        ///
        /// Vendors under NDA can also use these cards for test purposes only. This generator
        /// should not used outside of the MS network.
        /// </summary>

        public class CCNumber
        {
            public enum CreditCardType {unknown, VISA, VISA13, MasterCard, AMEX, Discover, JCB, Diners}


            public static string GetCCNumber()          {return GetCCNumber(CreditCardType.unknown);}
            public static string GetCCNumberVISA()      {return GetCCNumber(CreditCardType.VISA);}
            public static string GetCCNumberVISA13()    {return GetCCNumber(CreditCardType.VISA13);}
            public static string GetCCNumberMC()        {return GetCCNumber(CreditCardType.MasterCard);}
            public static string GetCCNumberAMEX()      {return GetCCNumber(CreditCardType.AMEX);}
            public static string GetCCNumberDiscover()  {return GetCCNumber(CreditCardType.Discover);}
            public static string GetCCNumberJCB()       {return GetCCNumber(CreditCardType.JCB);}
            public static string GetCCNumberDiners()    {return GetCCNumber(CreditCardType.Diners);}

            private static string GetCCNumber(CreditCardType aCreditCardType)
            {
                string creditCardNumber = null;
                string creditCardPrefix = null;
                int    creditCardLength = 0;
                bool   randomNumberFlag = true;
                int    temp             = 0;
                int    sum              = 0;
                Random randomNumber     = null;

                // need to sleep for 10 milliseconds in case the function gets called back to back
                Thread.Sleep(10);
                randomNumber = new Random((int) DateTime.Now.Ticks);

                // Generate prefix depending on the type of card
                switch(aCreditCardType)
                {
                case CreditCardType.VISA:
                    creditCardPrefix = "4";
                    creditCardLength = 16;
                    break;
                case CreditCardType.VISA13:
                    creditCardPrefix = "4";
                    creditCardLength = 13;
                    break;
                case CreditCardType.MasterCard:
                    randomNumberFlag = true;
                    temp = 0;

                    while (randomNumberFlag)
                    {
                        // Need a number from 1 to 5.
                        // In order to get a 5, need to ask for a 6 and then test.
                        temp = randomNumber.Next(1,6);
                        if (temp < 5)
                            randomNumberFlag = false;
                    }

                    creditCardPrefix = "5" + temp.ToString();
                    creditCardLength = 16;
                    break;
                case CreditCardType.AMEX:
                    randomNumberFlag = true;
                    temp = 0;

                    while (randomNumberFlag)
                    {
                        // Need either a 4 or a 7.
                        // In order to get a 7, need to ask for an 8 and then test.
                        temp = randomNumber.Next(4,8);
                        if ((temp == 4) || (temp == 7))
                            randomNumberFlag = false;
                    }

                    creditCardPrefix = "3" + temp.ToString();
                    creditCardLength = 15;
                    break;
                case CreditCardType.Discover:
                    creditCardPrefix = "6011";
                    creditCardLength = 16;
                    break;
                case CreditCardType.JCB:
                    creditCardPrefix = "354";
                    creditCardLength = 16;
                    break;
                case CreditCardType.Diners:
                    randomNumberFlag = true;
                    temp = 0;

                    while (randomNumberFlag)
                    {
                        // Need a number from 0 to 8 but not 7.
                        // In order to get a 8, need to ask for a 9 and then test.
                        temp = randomNumber.Next(0,9);
                        if ((temp < 9) && (temp != 7))
                            randomNumberFlag = false;
                    }

                    if (temp < 6)
                        creditCardPrefix = "30" + temp.ToString();
                    else
                        creditCardPrefix = "3" + temp.ToString();
                    creditCardLength = 14;
                    break;
                default:    // build a number that will pass the checksum but fail the prefix check
                    creditCardPrefix = "0";
                    creditCardLength = 16;
                    break;
                }

                creditCardNumber = creditCardPrefix;

                // Generate the remaining credit card numbers less the checksum number
                for (int i = 0; i < (creditCardLength - creditCardPrefix.Length - 1); i++)
                {
                    temp = randomNumber.Next(0,10);
                    if (temp > 9)
                        i--;
                    else
                        creditCardNumber += temp.ToString();
                }

                // Generate the checksum digit based on LUHN mod10
                sum  = 0;
                temp = 0;
                for (int i = (creditCardNumber.Length - 1); i >= 0; i--)
                {
                    temp = ((Convert.ToInt32(creditCardNumber[i]) - '0') * 2);
                    if (temp < 10)
                        sum += temp;
                    else
                        sum += ((temp / 10) + (temp % 10));

                    if (i - 1 >= 0)
                    {
                        i--;
                        sum += (Convert.ToInt32(creditCardNumber[i]) - '0');
                    }
                }

                if (sum % 10 == 0)
                    temp = 0;
                else
                    temp = (10 - (sum % 10));

                creditCardNumber += temp.ToString();

                return creditCardNumber;
            }

            public static CreditCardType ValidateCCNumber(string creditCardNumber)
            {
                CreditCardType result = CreditCardType.unknown;

                // Determine typr of card: VISA, MasterCard, AMEX, Discover
                // Test prefix and number of digits
                if (creditCardNumber.StartsWith("4") &&
                    (creditCardNumber.Length == 13 || creditCardNumber.Length == 16))
                {
                    result = CreditCardType.VISA;
                }
                else if ((creditCardNumber.StartsWith("51") || creditCardNumber.StartsWith("52") ||
                          creditCardNumber.StartsWith("53") || creditCardNumber.StartsWith("54") || creditCardNumber.StartsWith("55")) &&
                         creditCardNumber.Length == 16)
                {
                    result = CreditCardType.MasterCard;
                }
                else if ((creditCardNumber.StartsWith("34") || creditCardNumber.StartsWith("37")) &&
                         creditCardNumber.Length == 15)
                {
                    result = CreditCardType.AMEX;
                }
                else if (creditCardNumber.StartsWith("6011") &&
                         creditCardNumber.Length == 16)
                {
                    result = CreditCardType.Discover;
                }
                else if ((creditCardNumber.StartsWith("3") && creditCardNumber.Length == 16) ||
                         (creditCardNumber.StartsWith("1800") || creditCardNumber.StartsWith("2131") && creditCardNumber.Length == 15))
                {
                    result = CreditCardType.JCB;
                }
                else if ((creditCardNumber.StartsWith("300") || creditCardNumber.StartsWith("301") || creditCardNumber.StartsWith("302") ||
                          creditCardNumber.StartsWith("303") || creditCardNumber.StartsWith("304") || creditCardNumber.StartsWith("305") ||
                          creditCardNumber.StartsWith("36") || creditCardNumber.StartsWith("38")) &&
                         creditCardNumber.Length == 14)
                {
                    result = CreditCardType.Diners;
                }
                else
                    result = CreditCardType.unknown;

                // Apply the LUHN mod10 check to determine if the credit card is valid
                if (result != CreditCardType.unknown)
                {
                    int sum = 0;
                    int temp = 0;
                    for (int i = (creditCardNumber.Length - 1); i >= 0; i--)
                    {
                        sum += (Convert.ToInt32(creditCardNumber[i]) - 48);

                        if (i - 1 >= 0)
                        {
                            i--;
                            temp = ((Convert.ToInt32(creditCardNumber[i]) - 48) * 2);
                            if (temp < 10)
                                sum += temp;
                            else
                                sum += ((temp / 10) + (temp % 10));
                        }
                    }

                    // Determine if credit card number is valid
                    if (sum % 10 != 0)
                        result = CreditCardType.unknown;
                }

                return result;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFUtil\PassportTestUtil.cs ===
using System;
using System.Data.SqlTypes;
using System.Security.Cryptography;
using System.Text;
using System.IO;

using ServerTestFramework;
using ServerTestFramework.LiveService.FakeSG;

using xonline.common.offer;
using xonline.common.billing;
using xonline.common.diagnostics;
using xonline.common.puidmgr;
using xonline.common.service;
using xonline.common.user;
using xonline.common.utilities;
using xonline.common.protocol;
using xonline.common.stfutil;

namespace xonline.common.stfutil
//namespace UacsDevTest
{
    public class PassportTestUtil
    {
        public static string GenerateRandomPassportMemberName()
        {
            RandomNumberGenerator rand = RandomNumberGenerator.Create();
            byte[] nameBytes = new byte[8];
            rand.GetBytes(nameBytes);
            return String.Format("Xe{0}@xboxtest.com", PassportClient.ByteArrayToString(nameBytes));
        }

        public static uint Create(
            string passportMemberName,
            string password,
            string secretQuestion,
            string secretAnswer,
            DateTime birthdate,
            byte countryId,
            out byte[] sessionToken
        )
        {
            XePassportCreateRequest req = new XePassportCreateRequest();
            XePassportCreateResponse resp = new XePassportCreateResponse();
            byte[] encryptedCredentials = null;
            HResult hr = HResult.E_FAIL;

            XRLObject2 xrlo = null;

            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.machinePuid = 0;
            slot.userPuid0 = 0;

            if ( PassportClientGlobal.Global is PassportClient)
            {
                PassportClient passport = (PassportClient) PassportClientGlobal.Global;
                passport.TestGenerateEncryptedCredentials("", password,
                    secretAnswer, out encryptedCredentials);
            }
            else if ( PassportClientGlobal.Global is FakePassportClient )
            {
                FakePassportClient passport = (FakePassportClient) PassportClientGlobal.Global;
                passport.TestGenerateEncryptedCredentials("", password,
                    secretAnswer, out encryptedCredentials);
            }
            else
            {
                throw new Exception("PassportClientGlobal.Global is neither an instance of PassportClient nor FakePassportClient!");
            }
            
            req.passportMemberName = passportMemberName;
            req.secretQuestion     = secretQuestion;
            req.encryptedPassword  = encryptedCredentials;
            req.birthdate          = birthdate;
            req.countryId          = countryId;
            
            xrlo = resp;
            hr = StfXrlUtil.PostXrlRequest(ref slot, xonline.common.service.XOService.User_Account, req.Xrl, req, ref xrlo);

            if(HResult.Succeeded(hr))
            {
                sessionToken = resp.sessionToken;
            }
            else
            {
                sessionToken = null;
            }

            return hr;
        }
        
        public static uint Create(
            string passportMemberName,
            string password,
            string secretQuestion,
            string secretAnswer,
            out byte[] sessionToken
        )
        {
            XePassportCreateRequest req = new XePassportCreateRequest();
            XePassportCreateResponse resp = new XePassportCreateResponse();
            byte[] encryptedCredentials = null;
            HResult hr = HResult.E_FAIL;

            XRLObject2 xrlo = null;

            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.machinePuid = 0;
            slot.userPuid0 = 0;

            if ( PassportClientGlobal.Global is PassportClient)
            {
                PassportClient passport = (PassportClient) PassportClientGlobal.Global;
                passport.TestGenerateEncryptedCredentials("", password,
                    secretAnswer, out encryptedCredentials);
            }
            else if ( PassportClientGlobal.Global is FakePassportClient )
            {
                FakePassportClient passport = (FakePassportClient) PassportClientGlobal.Global;
                passport.TestGenerateEncryptedCredentials("", password,
                    secretAnswer, out encryptedCredentials);
            }
            else
            {
                throw new Exception("PassportClientGlobal.Global is neither an instance of PassportClient nor FakePassportClient!");
            }

            req.passportMemberName = passportMemberName;
            req.secretQuestion     = secretQuestion;
            req.encryptedPassword  = encryptedCredentials;

            xrlo = resp;
            hr = StfXrlUtil.PostXrlRequest(ref slot, xonline.common.service.XOService.User_Account, req.Xrl, req, ref xrlo);

            if(HResult.Succeeded(hr))
            {
                sessionToken = resp.sessionToken;
            }
            else
            {
                sessionToken = null;
            }

            return hr;
        }

        public static byte[] Create()
        {
            HResult hr;
            string pmn = GenerateRandomPassportMemberName();
            byte[] sessionToken;

            hr = Create(pmn, "supersecret", "What's your favorite colour?", "magenta", out sessionToken);

            if(HResult.Failed(hr))
                throw new Exception("Failed to create passport. hr = " + hr.ToString());

            return sessionToken;
        }

        public static uint Login(
            string passportMemberName,
            string password,
            out byte[] sessionToken
        )
        {
            return Login(
                    passportMemberName,
                    password,
                    XOn.XONLINE_PASSPORT_LOGIN_MESSENGER_SERVICE_ID,
                    out sessionToken);
        }

        public static uint Login(
            string passportMemberName,
            string password,
            int serviceId,
            out byte[] sessionToken
        )
        {
            PassportClient passport;
            byte[] encSesKey;
            byte[] encPassw;
            byte[] encReq;
            XePassportLoginRequest req;
            XePassportLoginResponse rep;
            HResult hr = HResult.E_FAIL;

            passport = (PassportClient) PassportClientGlobal.Global;
            passport.TestGenerateEncryptedLoginParts(
                password,
                out encSesKey,
                out encPassw,
                out encReq);

            req = new XePassportLoginRequest();
            req.passportMemberName    = passportMemberName;
            req.encryptedSessionKey   = encSesKey;
            req.encryptedPassword     = encPassw;
            req.encryptedTokenRequest = encReq;
            req.serviceId             = serviceId;

            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.machinePuid = 0;
            slot.userPuid0 = 0;

            rep = new XePassportLoginResponse();
            XRLObject2 xrlo = rep;
            hr = StfXrlUtil.PostXrlRequest(ref slot, xonline.common.service.XOService.User_Account, req.Xrl, req, ref xrlo);

            if(HResult.Succeeded(hr))
            {
                sessionToken = rep.sessionToken;
            }
            else
            {
                sessionToken = new byte[0];
            }

            return hr;
        }

        public static uint ChangePassword(
            byte[] sessionToken,
            string pmn,
            string oldPassword,
            string newPassword
        )
        {
            byte[] encryptedCredentials;
            PassportClient passport;
            HResult hr = HResult.E_FAIL;

            passport = (PassportClient) PassportClientGlobal.Global;
            passport.TestGenerateEncryptedCredentials(oldPassword, newPassword,
                "", out encryptedCredentials);

        #if false
            hr = passport.ChangePassword(GetPuidFromSignedPuid(sessionToken), pmn, encryptedCredentials);
        #else
            XePassportChangePasswordRequest req = new XePassportChangePasswordRequest();
            req.sessionToken       = sessionToken;
            req.passportMemberName = pmn;
            req.encryptedPassword  = encryptedCredentials;

            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.machinePuid = 0;
            slot.userPuid0 = 0;

            hr = StfXrlUtil.PostXrlRequest(ref slot, xonline.common.service.XOService.User_Account, req.Xrl, req);
        #endif

            return hr;
        }

        public static UInt64 GetPuidFromSignedPuid(
            byte[] signedPuid)
        {
            BinaryReader br = new BinaryReader(new MemoryStream(signedPuid));
            return br.ReadUInt64();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Stats\IMDB\PlayerTeam.cs ===
using System;
using System.Collections;
using System.Diagnostics;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using MSRC.Ranking.RankingSystems;
using MSRC.Ranking;
using MSRC.Ranking.Skills;


namespace ServerTestFramework.LiveService.Stats.StatsDBSim
{
    public class statIMDB
    {
		

        public bool IsLess(int i, int j)
        {
            if(i>=j)
                throw new StatsException(HResult.XONLINE_E_STAT_NOT_ENOUGH_PARAMETERS,"NOT_ENOUGH_PARAMETERS");

            return true;
        }

        public void IsBetween0And1(double a)
        {
            if(a<0 || a>1)
                throw new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"NOT_ENOUGH_PARAMETERS");

        }
    }


    /// <summary>
    /// Summary description for PlayerTeam.
    /// </summary>
    public class PlayerTeamIMDB:statIMDB
    {
        public uint         _guiUntier = 0;
        public  Hashtable _playerLbs  = new Hashtable();

        public bool CheckIFUserQulifiesAtt(ulong Userid,long rating,PlayerTeamLb lb)
        {
            bool retval = false;
            if(lb._lbInfo._AllowAttachments)
            {

                lb.Rerank();
                if(lb._rankedEntries.Count<11 || rating >((PlayerTeamLbEntry)lb._rankedEntries[10])._lRating)
                    retval = true;
                else if(rating ==((PlayerTeamLbEntry)lb._rankedEntries[10])._lRating)
                {
                    if(((PlayerTeamLbEntry)lb._rankedEntries[10])._ulUserId==Userid)
                        retval = true;
                }


            }
            return retval;
        }


        public void IsAttrIDValid(ushort id)
        {
            bool valid = false;
            if(id==SpecialAttrib.Rating|| id==SpecialAttrib.Nickname|| id==SpecialAttrib.AttachmentSize)
                valid=true;

           if(!valid && id >64 )
                throw new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"Invalid Attribute id");
        }

        public void ResetUser(uint uiTitleId,uint uiLbId,ulong Userid)
        {

            if(uiLbId==0)
            {
                ArrayList temp = new ArrayList();
                // cleare all leaderboards for this title.
                foreach (TitleLbKey key in _playerLbs.Keys)
                {
                    if(key._uiTitleId==uiTitleId)
                        temp.Add(key);
                }
                foreach (TitleLbKey key in temp)
                    _playerLbs.Remove(key);
				
                return;
            }

            if(Userid==0)
            {
                // cleare all users for the  specified leaderboard
                TitleLbKey key =new TitleLbKey(uiTitleId, uiLbId);
                if(_playerLbs.Contains(key))
                    _playerLbs.Remove(key);
				
                return;
            }


            PlayerTeamLb lb = (PlayerTeamLb) _playerLbs[new TitleLbKey(uiTitleId, uiLbId)];
            if(lb==null)
                throw new StatsException(HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,"Invalid Title : "+uiTitleId);

            PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._lbEntries[Userid];
            if(PalyerEntry!=null)
            {
                lb._lbEntries.Remove(Userid);
                lb.Rerank();
                for (int i=0; i< lb._rankedEntries.Count;i++)
                {
                    PlayerTeamLbEntry  Palyer=(PlayerTeamLbEntry)lb._rankedEntries[i];
                    if(Palyer._ulUserId==Userid)
                    {
                        lb._rankedEntries.RemoveAt(i);
                        break;
                    }
                }

            }
			
			
        }
        public bool VerifyStatID(uint uiTitleId,uint uiLbId,ulong Userid,short StatId,object val2,byte operation)
        {
            bool retval = false;
            bool found= false;
			
            object val1= null;
            //StatContitions

            PlayerTeamLb lb = (PlayerTeamLb) _playerLbs[new TitleLbKey(uiTitleId, uiLbId)];
            if(lb==null)
                throw new StatsException(HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,"Invalid Title : "+uiTitleId);

            PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._lbEntries[Userid];
            if(PalyerEntry!=null)
            {
                IsAttrIDValid((ushort)StatId);
                if((ushort)StatId ==SpecialAttrib.Rating)
                {
                    found= true;
                    val1 = (long)PalyerEntry._lRating;
                    if(val2 is long)
                    {
                        switch(operation)
                        {
                            case StatContitions.Equal:
                                if((long)val1==(long)val2)
                                    retval= true;
                                break;
                            case StatContitions.NotEqual:
                                if((long)val1!=(long)val2)
                                    retval= true;
                                break;
                            case StatContitions.Greater:
                                if((long)val1>(long)val2)
                                    retval= true;
                                break;
                            case StatContitions.GreaterOREqual:
                                if((long)val1>=(long)val2)
                                    retval= true;
                                break;
                            case StatContitions.Less:
                                if((long)val1<(long)val2)
                                    retval= true;
                                break;
                            case StatContitions.LessOREqual:
                                if((long)val1<=(long)val2)
                                    retval= true;
                                break;
                            case StatContitions.Exist:
                                retval= true;
                                break;
                        }
						

                    }
                    else
                    {
                        if(operation == StatContitions.NotEqual)
                            retval= true;
							
                    }
					
                }
                else
                {
                    XrlSubAttr temp =(XrlSubAttr) PalyerEntry._stats[StatId];
                    if(temp !=null)
                    {
                        found= true;
                        switch (temp.Info.Type)
                        {
                            case (byte)XrlAttrType.Long:
                                val1 =(int)((XrlAttrUInt)temp.Data).Data;
                                if(val2 is int)
                                {
                                    switch(operation)
                                    {
                                        case StatContitions.Equal:
                                            if((int)val1==(int)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.NotEqual:
                                            if((int)val1!=(int)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.Greater:
                                            if((int)val1>(int)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.GreaterOREqual:
                                            if((int)val1>=(int)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.Less:
                                            if((int)val1<(int)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.LessOREqual:
                                            if((int)val1<=(int)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.Exist:
                                            retval= true;
                                            break;
                                    }

                                }
                                else
                                {
                                    if(operation == StatContitions.NotEqual)
                                        retval= true;
							
                                }

                                break;
                            case (byte)XrlAttrType.LongLong:
                                val1 =(long)((XrlAttrULong)temp.Data).Data;
                                if(val2 is long)
                                {
                                    switch(operation)
                                    {
                                        case StatContitions.Equal:
                                            if((long)val1==(long)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.NotEqual:
                                            if((long)val1!=(long)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.Greater:
                                            if((long)val1>(long)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.GreaterOREqual:
                                            if((long)val1>=(long)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.Less:
                                            if((long)val1<(long)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.LessOREqual:
                                            if((long)val1<=(long)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.Exist:
                                            retval= true;
                                            break;
                                    }
                                }
                                else
                                {
                                    if(operation == StatContitions.NotEqual)
                                        retval= true;
							
                                }
                                break;
                            case (byte)XrlAttrType.Double:
                                val1 =(double)((XrlAttrDouble)temp.Data).Data;
                                if(val2 is double)
                                {
                                    switch(operation)
                                    {
                                        case StatContitions.Equal:
                                            if((double)val1==(double)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.NotEqual:
                                            if((double)val1!=(double)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.Greater:
                                            if((double)val1>(double)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.GreaterOREqual:
                                            if((double)val1>=(double)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.Less:
                                            if((double)val1<(double)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.LessOREqual:
                                            if((double)val1<=(double)val2)
                                                retval= true;
                                            break;
                                        case StatContitions.Exist:
                                            retval= true;
                                            break;
                                    }
                                }
                                else
                                {
                                    if(operation == StatContitions.NotEqual)
                                        retval= true;
							
                                }
                                break;
							
                        }
                    }
                }
            }

            if(!found)
            {
                // if value does not exist in the database it will return true for <, <=, >,>=,NotExist
                //and false for =,!= and exist
                if(operation!=StatContitions.Equal && operation!=StatContitions.NotEqual &&operation!=StatContitions.Exist)
                    retval=true;
            }
			
			
            return retval;
        }

        public void SetUserStats(SetRequestData req)
        {


            if(req.SubAttr.Length ==0)
                throw new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"Zero Attributes ");

            bool HasRating= false;
			
            PlayerTeamLb lb = (PlayerTeamLb) _playerLbs[new TitleLbKey(req.titleId, req.dwLeaderBoardType)];
            if(lb==null)
                throw new StatsException(HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,"VALID_TITLE_OR_LEADERBOARD : "+req.titleId);

            // check if the user already exists
            PlayerTeamLbEntry  PalyerEntry=null;
            PalyerEntry=(PlayerTeamLbEntry)lb._lbEntries[req.userPuid];
            if(PalyerEntry==null)
                PalyerEntry= new PlayerTeamLbEntry(req.userPuid);

            if(req.SubAttr.Length>64)
                throw new StatsException(HResult.XONLINE_E_STAT_TOO_MANY_STATS,"Max Allowed stats is 64");

            for(int i=0; i<req.SubAttr.Length ;i++)
            {
                short StatId=0;
                StatId = (short)req.SubAttr[i].Info.ID;
				
                if((ushort)StatId ==SpecialAttrib.Rating)
                {
                    if(req.SubAttr[i].Info.Type != (int)XrlAttrType.LongLong)
                        throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"ratting should be longlong"));	
                    XrlAttrULong rating = (XrlAttrULong)req.SubAttr[i].Data;
                    PalyerEntry._lRating = (long) rating.Data;
                    PalyerEntry._uiUntier=_guiUntier; 
                    HasRating=true;
					
                }
                else if((ushort)StatId ==SpecialAttrib.Nickname)
                {
                    if(req.SubAttr[i].Info.Type != (int)XrlAttrType.String)
                        throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"Nickname should be string"));	
                    XrlAttrString nickname = (XrlAttrString)req.SubAttr[i].Data;
                    PalyerEntry._NickName = nickname.Data;

                }
                else if((ushort)StatId >SpecialAttrib.ReservedEnd)
                {
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"Cannot set attribute"));	
                }
                else
                {
                    if((int)req.SubAttr[i].Info.Type > (int)XrlAttrType.Invalid)
                        throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"Invalid type"));	

                    if((int)req.SubAttr[i].Info.Type != (int)XrlAttrType.None)
                        PalyerEntry._stats[StatId]= req.SubAttr[i] ;
                    else
                    {
                        if(PalyerEntry._stats.Contains(StatId))
                        {
                            PalyerEntry._stats.Remove(StatId);
                        }
                    }
                }
            }
            if(HasRating && lb._lbEntries[req.userPuid]==null)
                lb._rankedEntries.Add(PalyerEntry);

            if(lb._lbEntries[req.userPuid]==null)
                lb._lbEntries[req.userPuid]=PalyerEntry;

            if(CheckIFUserQulifiesAtt(PalyerEntry._ulUserId,PalyerEntry._lRating,lb))
                throw (new StatsException(HResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT,"User Qulafies for attachment"));
	

        }
        public void Max(StatsProcCall Proc,uint uiTitleId)
        {
            ulong Userid=0;
            uint uiLbId=0;
            bool HasRating= false;
            int i=0;
			

            StatParam[] Params =Proc.Params;
            IsLess(i,Params.Length);
            if (Params[i] is StatParamPuid )
            {
                Userid=(ulong)(Params[i++]._data);
				
            }
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"1st params is not users"));

            IsLess(i,Params.Length);
            if (Params[i]._data is Int32)
                uiLbId=(uint)((int)(Params[i]._data));
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"2nd param must be LBID"));
			
            PlayerTeamLb lb = (PlayerTeamLb) _playerLbs[new TitleLbKey(uiTitleId, uiLbId)];
            if(lb==null)
                throw new StatsException(HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,"Invalid Title : "+uiTitleId);

            //
            // we increment i by 2 because the stats attributes start at index 7 
            PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._lbEntries[Userid];
            if(PalyerEntry==null)
                PalyerEntry= new PlayerTeamLbEntry(Userid);
            i=3;
			
            // Update unitLb's stat using usStatId and val
            for(; (i)<Params.Length  ;i=i+2)
            {
                IsLess(i,Params.Length);
                short StatId=0;
                if(((byte)Params[i]._bParamType)== StatParamTypes.Int16)
                    StatId = (short)Params[i]._data;
                else
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"stats id must be Int16"));
                IsAttrIDValid((ushort)StatId);
                if((ushort)StatId ==SpecialAttrib.Rating)
                {
                    if(((byte)Params[i+1]._bParamType)== StatParamTypes.Int64)
                    {
                        if(PalyerEntry._lRating <(long) Params[i+1]._data)
                        {
                            PalyerEntry._lRating = (long) Params[i+1]._data;
                            PalyerEntry._uiUntier=_guiUntier; 
                            HasRating=true;
                        }
                    }
                    else
                        throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"Rating must be long"));
                }
                else
                {
                    // create a XrlSubAttr and store inmemory db.
                    XrlSubAttr temp = null;
                    if(((byte)Params[i+1]._bParamType)== StatParamTypes.Int32)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(uint)((int)Params[i+1]._data));
                    }
                    else if (((byte)Params[i+1]._bParamType)== StatParamTypes.Int64)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(ulong)((long)Params[i+1]._data));
                    }
                    else if (((byte)Params[i+1]._bParamType)== StatParamTypes.Float)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(double)Params[i+1]._data);
                    }
                    else if (((byte)Params[i+1]._bParamType)== StatParamTypes.Utf8string)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(string)Params[i+1]._data);
                    }
                    else
                        throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"only int32,int64,float,string is allowed"));

                    // first check if attribute is present
                    XrlSubAttr current =(XrlSubAttr)PalyerEntry._stats[StatId];
                    if(current!=null && current.Info.Type == temp.Info.Type)
                    {
                        if(current.Info.Type== (byte)XrlAttrType.Long)
                        {
                            if((int)((XrlAttrUInt)current.Data).Data < (int)((XrlAttrUInt)temp.Data).Data)
                                ((XrlAttrUInt)current.Data).Data = ((XrlAttrUInt)temp.Data).Data;
                        }
                        else if(current.Info.Type== (byte)XrlAttrType.LongLong)
                        {
                            if((long)((XrlAttrULong)current.Data).Data <(long)((XrlAttrULong)temp.Data).Data)
                                ((XrlAttrULong)current.Data).Data = ((XrlAttrULong)temp.Data).Data;
                        }
                        else if(current.Info.Type== (byte)XrlAttrType.Double)
                        {
                            if(((XrlAttrDouble)current.Data).Data < ((XrlAttrDouble)temp.Data).Data)
                                ((XrlAttrDouble)current.Data).Data = ((XrlAttrDouble)temp.Data).Data;
                        }
                    }
                    else
                    {
                        PalyerEntry._stats[StatId]= temp ;
                    }

                }
            }

            if(HasRating && lb._lbEntries[Userid]==null)
                lb._rankedEntries.Add(PalyerEntry);
			
            if(lb._lbEntries[Userid]==null)
                lb._lbEntries[Userid]=PalyerEntry;

            if(CheckIFUserQulifiesAtt(PalyerEntry._ulUserId,PalyerEntry._lRating,lb))
                throw (new StatsException(HResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT,"User Qulafies for attachment"));
	
			
        }

        public void Min(StatsProcCall Proc,uint uiTitleId)
        {
            ulong Userid=0;
            uint uiLbId=0;
            bool HasRating= false;
            int i=0;
			

            StatParam[] Params =Proc.Params;
            IsLess(i,Params.Length);
            if (Params[i] is StatParamPuid )
            {
                Userid=(ulong)(Params[i++]._data);
				
            }
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"1st params is not users"));

            IsLess(i,Params.Length);
            if (Params[i]._data is Int32)
                uiLbId=(uint)((int)(Params[i]._data));
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"2nd param must be LBID"));
			
            PlayerTeamLb lb = (PlayerTeamLb) _playerLbs[new TitleLbKey(uiTitleId, uiLbId)];
            if(lb==null)
                throw new StatsException(HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,"Invalid Title : "+uiTitleId);

            //
            // we increment i by 2 because the stats attributes start at index 7 
            PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._lbEntries[Userid];
            bool newuser =false;
            if(PalyerEntry==null)
            {
                PalyerEntry= new PlayerTeamLbEntry(Userid);
                newuser=true;
            }
            i=3;
			
            // Update unitLb's stat using usStatId and val
            for(; (i)<Params.Length  ;i=i+2)
            {
                IsLess(i,Params.Length);
                short StatId=0;
                if(((byte)Params[i]._bParamType)== StatParamTypes.Int16)
                    StatId = (short)Params[i]._data;
                else
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"stats id must be Int16"));
                IsAttrIDValid((ushort)StatId);
                if((ushort)StatId ==SpecialAttrib.Rating)
                {
                    if(((byte)Params[i+1]._bParamType)== StatParamTypes.Int64)
                    {
                        if(newuser || PalyerEntry._lRating >(long) Params[i+1]._data)
                        {
                            PalyerEntry._lRating = (long) Params[i+1]._data;
                            PalyerEntry._uiUntier=_guiUntier; 
                            HasRating=true;
                        }
                    }
                    else
                        throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"Rating must be long"));
                }
                else
                {
                    // create a XrlSubAttr and store inmemory db.
                    XrlSubAttr temp = null;
                    if(((byte)Params[i+1]._bParamType)== StatParamTypes.Int32)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(uint)((int)Params[i+1]._data));
                    }
                    else if (((byte)Params[i+1]._bParamType)== StatParamTypes.Int64)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(ulong)((long)Params[i+1]._data));
                    }
                    else if (((byte)Params[i+1]._bParamType)== StatParamTypes.Float)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(double)Params[i+1]._data);
                    }
                    else if (((byte)Params[i+1]._bParamType)== StatParamTypes.Utf8string)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(string)Params[i+1]._data);
                    }
                    else
                        throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"only int32,int64,float,string is allowed"));

                    // first check if attribute is present
                    XrlSubAttr current =(XrlSubAttr)PalyerEntry._stats[StatId];
                    if(current!=null && current.Info.Type == temp.Info.Type)
                    {
                        if(current.Info.Type== (byte)XrlAttrType.Long)
                        {
                            if((int)((XrlAttrUInt)current.Data).Data >(int) ((XrlAttrUInt)temp.Data).Data)
                                ((XrlAttrUInt)current.Data).Data = ((XrlAttrUInt)temp.Data).Data;
                        }
                        else if(current.Info.Type== (byte)XrlAttrType.LongLong)
                        {
                            if((long)((XrlAttrULong)current.Data).Data >(long)((XrlAttrULong)temp.Data).Data)
                                ((XrlAttrULong)current.Data).Data = ((XrlAttrULong)temp.Data).Data;
                        }
                        else if(current.Info.Type== (byte)XrlAttrType.Double)
                        {
                            if(((XrlAttrDouble)current.Data).Data > ((XrlAttrDouble)temp.Data).Data)
                                ((XrlAttrDouble)current.Data).Data = ((XrlAttrDouble)temp.Data).Data;
                        }
                    }
                    else
                    {
                        PalyerEntry._stats[StatId]= temp ;
                    }

                }
            }

            if(HasRating && lb._lbEntries[Userid]==null)
                lb._rankedEntries.Add(PalyerEntry);
			
            if(lb._lbEntries[Userid]==null)
                lb._lbEntries[Userid]=PalyerEntry;

            if(CheckIFUserQulifiesAtt(PalyerEntry._ulUserId,PalyerEntry._lRating,lb))
                throw (new StatsException(HResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT,"User Qulafies for attachment"));
	
			
        }


        public void Replace(StatsProcCall Proc,uint uiTitleId)
        {
            ulong Userid=0;
            uint uiLbId=0;
            bool HasRating= false;
            int i=0;
			

            StatParam[] Params =Proc.Params;
            IsLess(i,Params.Length);
            if (Params[i] is StatParamPuid )
            {
                Userid=(ulong)(Params[i++]._data);
				
            }
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"1st params is not users"));

            IsLess(i,Params.Length);
            if (Params[i]._data is Int32)
                uiLbId=(uint)((int)(Params[i]._data));
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"2nd param must be LBID"));
			
            PlayerTeamLb lb = (PlayerTeamLb) _playerLbs[new TitleLbKey(uiTitleId, uiLbId)];
            if(lb==null)
                throw new StatsException(HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,"Invalid Title : "+uiTitleId);

            //
            // we increment i by 2 because the stats attributes start at index 7 
            PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._lbEntries[Userid];
            if(PalyerEntry==null)
                PalyerEntry= new PlayerTeamLbEntry(Userid);
            i=3;
			
            // Update unitLb's stat using usStatId and val
            for(; (i)<Params.Length  ;i=i+2)
            {
                IsLess(i,Params.Length);
                short StatId=0;
                if(((byte)Params[i]._bParamType)== StatParamTypes.Int16)
                    StatId = (short)Params[i]._data;
                else
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"stats id must be Int16"));
                IsAttrIDValid((ushort)StatId);
                if((ushort)StatId ==SpecialAttrib.Rating)
                {
                    if(((byte)Params[i+1]._bParamType)== StatParamTypes.Int64)
                    {
                        PalyerEntry._lRating = (long) Params[i+1]._data;
                        PalyerEntry._uiUntier=_guiUntier; 
                        HasRating=true;
                    }
                    else
                        throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"Rating must be long"));
                }
                else
                {
                    // create a XrlSubAttr and store inmemory db.
                    XrlSubAttr temp = null;
                    if(((byte)Params[i+1]._bParamType)== StatParamTypes.Int32)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(uint)((int)Params[i+1]._data));
                    }
                    else if (((byte)Params[i+1]._bParamType)== StatParamTypes.Int64)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(ulong)((long)Params[i+1]._data));
                    }
                    else if (((byte)Params[i+1]._bParamType)== StatParamTypes.Float)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(double)Params[i+1]._data);
                    }
                    else if (((byte)Params[i+1]._bParamType)== StatParamTypes.Utf8string)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(string)Params[i+1]._data);
                    }
                    else
                        throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"only int32,int64,float,string is allowed"));

                    PalyerEntry._stats[StatId]= temp ;
                }
            }

            if(HasRating && lb._lbEntries[Userid]==null)
                lb._rankedEntries.Add(PalyerEntry);
			
            if(lb._lbEntries[Userid]==null)
                lb._lbEntries[Userid]=PalyerEntry;

            if(CheckIFUserQulifiesAtt(PalyerEntry._ulUserId,PalyerEntry._lRating,lb))
                throw (new StatsException(HResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT,"User Qulafies for attachment"));
	
			
        }

        public void Add(StatsProcCall Proc,uint uiTitleId)
        {
            ulong Userid=0;
            uint uiLbId=0;
            bool HasRating= false;
            int i=0;

            StatParam[] Params =Proc.Params;
            IsLess(i,Params.Length);
            if (Params[i] is StatParamPuid )
            {
                Userid=(ulong)(Params[i]._data);
				
            }
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"1st params is not users"));


            IsLess(++i,Params.Length);
            if (Params[i]._data is Int32)
                uiLbId=(uint)((int)(Params[i]._data));
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"2nd param must be LBID"));
			
            PlayerTeamLb lb = (PlayerTeamLb) _playerLbs[new TitleLbKey(uiTitleId, uiLbId)];
            if(lb==null)
                throw new StatsException(HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,"Invalid Title : "+uiTitleId);

            //
            // we increment i by 2 because the stats attributes start at index 7 
            PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._lbEntries[Userid];
            if(PalyerEntry==null)
                PalyerEntry= new PlayerTeamLbEntry(Userid);
            i=3;
			
            // Update unitLb's stat using usStatId and val
            for(; (i)<Params.Length  ;i=i+2)
            {
                IsLess(i,Params.Length);
                short StatId=0;
                if(((byte)Params[i]._bParamType)== StatParamTypes.Int16)
                    StatId = (short)Params[i]._data;
                else
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"stats id must be Int16"));
                IsAttrIDValid((ushort)StatId);
                if((ushort)StatId ==SpecialAttrib.Rating)
                {
                    if(((byte)Params[i+1]._bParamType)== StatParamTypes.Int64)
                    {
                        PalyerEntry._lRating += (long) Params[i+1]._data;
                        PalyerEntry._uiUntier=_guiUntier; 
                        HasRating=true;
                    }
                    else
                        throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"Rating must be long"));
                }
                else
                {
                    // create a XrlSubAttr and store inmemory db.
                    XrlSubAttr temp = null;
                    if(((byte)Params[i+1]._bParamType)== StatParamTypes.Int32)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(uint)((int)Params[i+1]._data));
                    }
                    else if (((byte)Params[i+1]._bParamType)== StatParamTypes.Int64)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(ulong)((long)Params[i+1]._data));
                    }
                    else if (((byte)Params[i+1]._bParamType)== StatParamTypes.Float)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(double)Params[i+1]._data);
                    }
                    else if (((byte)Params[i+1]._bParamType)== StatParamTypes.Utf8string)
                    {
                        temp= new XrlSubAttr((ushort)StatId,(string)Params[i+1]._data);
                    }
                    else
                        throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"only int32,int64,float,string is allowed"));

                    //PalyerEntry._stats[StatId]= temp ;
					
                    // first check if attribute is present
                    XrlSubAttr current =(XrlSubAttr)PalyerEntry._stats[StatId];

                    if(current!=null && current.Info.Type == temp.Info.Type)
                    {
                        if(current.Info.Type== (byte)XrlAttrType.Long)
                        {
                            ((XrlAttrUInt)current.Data).Data += ((XrlAttrUInt)temp.Data).Data;
                        }
                        else if(current.Info.Type== (byte)XrlAttrType.LongLong)
                        {
                            ((XrlAttrULong)current.Data).Data += ((XrlAttrULong)temp.Data).Data;
                        }
                        else if(current.Info.Type== (byte)XrlAttrType.Double)
                        {
                            ((XrlAttrDouble)current.Data).Data += ((XrlAttrDouble)temp.Data).Data;
                        }
                    }
                    else
                    {
                        PalyerEntry._stats[StatId]= temp ;
                    }

                }
            }

            if(HasRating && lb._lbEntries[Userid]==null)
            {
                lb._rankedEntries.Add(PalyerEntry);
                lb._lbEntries[Userid]=PalyerEntry;
            }

            if(CheckIFUserQulifiesAtt(PalyerEntry._ulUserId,PalyerEntry._lRating,lb))
                throw (new StatsException(HResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT,"User Qulafies for attachment"));
        }

        public void ProcessMuSigmaEx(Hashtable teams,uint uiTitleId,uint uiLbId,double beta,double tau, double drawpp )
        {
            //todo temp constants read from leaderboard info once server side is implemented.
                        
			
            PlayerTeamLb lb = (PlayerTeamLb) _playerLbs[new TitleLbKey(uiTitleId, uiLbId)];
            if(lb==null)
                throw new StatsException(HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,"Invalid Title : "+uiTitleId);

            MuSigmaRankingSystem ranksys = new MuSigmaRankingSystem(beta,drawpp,tau);
            Game game = new Game(DateTime.Now);
            IDictionaryEnumerator teamEnum = teams.GetEnumerator();
            while(teamEnum.MoveNext())
            {					
                Team team= (Team)teamEnum.Value;
                game.AddTeam(team);
                for(int i=0;i<team.NumberOfPlayers;i++)
                {
                    double mu=0.0;
                    double sigma=0.0;
                    object rating=null;

                    int player= team.PlayerIDs[i];
                    PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._lbEntries[(ulong)player];
                    PlayerSkills playerskill= new PlayerSkills();

                    if(PalyerEntry!=null)
                    {
                        rating= PalyerEntry._lRating;
                        mu		=((XrlAttrDouble)((XrlSubAttr) PalyerEntry._stats[(short)SpecialAttrib.Mu]).Data).Data;
                        sigma	=((XrlAttrDouble) ((XrlSubAttr)PalyerEntry._stats[(short)SpecialAttrib.Sigma]).Data).Data;
						
                    }
                    else
                    {
                        PalyerEntry = new PlayerTeamLbEntry((ulong)player);
                        lb._rankedEntries.Add(PalyerEntry);
                        lb._lbEntries[(ulong)player]=PalyerEntry;
                        mu= (double) 3.0;
                        sigma =(double)1.0;
                    }
                    playerskill.AddSkill(new MuSigmaSkill(mu,sigma),game.Date);
                    ranksys.PlayerSkillsList.AddPlayerSkills(playerskill,player);
                }
            }
            // rank game and update player ratings.
            try
            {
                ranksys.Update(game);
            }
            catch( Exception e)
            {
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,e.ToString()));
            }

            teamEnum.Reset();

            while(teamEnum.MoveNext())
            {
                Team team= (Team)teamEnum.Value;
                for(int i=0;i<team.NumberOfPlayers;i++)
                {
                    int player= team.PlayerIDs[i];
                    MuSigmaSkill skill = (MuSigmaSkill)ranksys.PlayerSkillsList.GetPlayerSkills(player).LatestSkill;
                    PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._lbEntries[(ulong)player];
					
                    double fRating= (((skill.Mu - (3*skill.Sigma)) * 50/6) + 1);
                    XrlSubAttr Mutemp=  new XrlSubAttr(SpecialAttrib.Mu,skill.Mu);
                    XrlSubAttr Sigmatemp= new XrlSubAttr(SpecialAttrib.Sigma,skill.Sigma);
					
                    long  normalizedRating = (long)fRating;
                    if (normalizedRating < 1)
                        normalizedRating = 1;
                    if (normalizedRating > 50)
                        normalizedRating = 50;

                    XrlSubAttr Skilltemp= new XrlSubAttr(SpecialAttrib.Skill,(ulong)normalizedRating);


                    PalyerEntry._lRating = (long)(fRating*1000000.0);
                    PalyerEntry._stats[(short)SpecialAttrib.Mu]=Mutemp;
                    PalyerEntry._stats[(short)SpecialAttrib.Sigma]=Sigmatemp;
                    PalyerEntry._stats[(short)SpecialAttrib.Skill]=Skilltemp;

                    if(PalyerEntry._stats.Contains((short)SpecialAttrib.GamesPlayed))
                    {
                        ((XrlAttrULong)((XrlSubAttr)PalyerEntry._stats[(short)SpecialAttrib.GamesPlayed]).Data).Data+=1;
                    }
                    else
                    {
                        XrlSubAttr Gplayed = new XrlSubAttr(SpecialAttrib.GamesPlayed,(ulong)1);
                        PalyerEntry._stats[(short)SpecialAttrib.GamesPlayed]=Gplayed;
                    }
										
                }
            }
        }


        public void ProcessMuSigma(Hashtable teams,uint uiTitleId,uint uiLbId)
        {
            //todo temp constants read from leaderboard info once server side is implemented.
            double beta = 0.5;
            double epsilon=0.1;
            double tau =0.01;
			
            PlayerTeamLb lb = (PlayerTeamLb) _playerLbs[new TitleLbKey(uiTitleId, uiLbId)];
            if(lb==null)
                throw new StatsException(HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,"Invalid Title : "+uiTitleId);

            MuSigmaRankingSystem ranksys = new MuSigmaRankingSystem(beta,epsilon,tau);
            Game game = new Game(DateTime.Now);
            IDictionaryEnumerator teamEnum = teams.GetEnumerator();
            while(teamEnum.MoveNext())
            {					
                Team team= (Team)teamEnum.Value;
                game.AddTeam(team);
                for(int i=0;i<team.NumberOfPlayers;i++)
                {
                    double mu=0.0;
                    double sigma=0.0;
                    object rating=null;

                    int player= team.PlayerIDs[i];
                    PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._lbEntries[(ulong)player];
                    PlayerSkills playerskill= new PlayerSkills();

                    if(PalyerEntry!=null)
                    {
                        rating= PalyerEntry._lRating;
                        mu		=((XrlAttrDouble)((XrlSubAttr) PalyerEntry._stats[(short)SpecialAttrib.Mu]).Data).Data;
                        sigma	=((XrlAttrDouble) ((XrlSubAttr)PalyerEntry._stats[(short)SpecialAttrib.Sigma]).Data).Data;
						
                    }
                    else
                    {
                        PalyerEntry = new PlayerTeamLbEntry((ulong)player);
                        lb._rankedEntries.Add(PalyerEntry);
                        lb._lbEntries[(ulong)player]=PalyerEntry;
                        mu= (double) 3.0;
                        sigma =(double)1.0;
                    }
                    playerskill.AddSkill(new MuSigmaSkill(mu,sigma),game.Date);
                    ranksys.PlayerSkillsList.AddPlayerSkills(playerskill,player);
                }
            }
            // rank game and update player ratings.
            ranksys.Update(game);

            teamEnum.Reset();

            while(teamEnum.MoveNext())
            {
                Team team= (Team)teamEnum.Value;
                for(int i=0;i<team.NumberOfPlayers;i++)
                {
                    int player= team.PlayerIDs[i];
                    MuSigmaSkill skill = (MuSigmaSkill)ranksys.PlayerSkillsList.GetPlayerSkills(player).LatestSkill;
                    PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._lbEntries[(ulong)player];
					
                    double fRating= (((skill.Mu - (3*skill.Sigma)) * 50/6) + 1);
                    XrlSubAttr Mutemp=  new XrlSubAttr(SpecialAttrib.Mu,skill.Mu);
                    XrlSubAttr Sigmatemp= new XrlSubAttr(SpecialAttrib.Sigma,skill.Sigma);
					
                    long  normalizedRating = (long)fRating;
                    if (normalizedRating < 1)
                        normalizedRating = 1;
                    if (normalizedRating > 50)
                        normalizedRating = 50;

                    XrlSubAttr Skilltemp= new XrlSubAttr(SpecialAttrib.Skill,(ulong)normalizedRating);


                    PalyerEntry._lRating = (long)(fRating*1000000.0);
                    PalyerEntry._stats[(short)SpecialAttrib.Mu]=Mutemp;
                    PalyerEntry._stats[(short)SpecialAttrib.Sigma]=Sigmatemp;
                    PalyerEntry._stats[(short)SpecialAttrib.Skill]=Skilltemp;

                    if(PalyerEntry._stats.Contains((short)SpecialAttrib.GamesPlayed))
                    {
                        ((XrlAttrULong)((XrlSubAttr)PalyerEntry._stats[(short)SpecialAttrib.GamesPlayed]).Data).Data+=1;
                    }
                    else
                    {
                        XrlSubAttr Gplayed = new XrlSubAttr(SpecialAttrib.GamesPlayed,(ulong)1);
                        PalyerEntry._stats[(short)SpecialAttrib.GamesPlayed]=Gplayed;
                    }
										
                }
            }
        }

        public void MuSigma(StatsProcCall Proc,uint uiTitleId)
        {

			
            uint uiLbId=0;
            Hashtable teams= new Hashtable();
            Hashtable users= new Hashtable();

            StatParam[] Params =Proc.Params;
            if(Params.Length<2)
               throw new StatsException(HResult.XONLINE_E_STAT_NOT_ENOUGH_PARAMETERS,"NOT_ENOUGH_PARAMETERS");


            if (Params[0]._data is Int32)
                uiLbId=(uint)((int)(Params[0]._data));
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"1st param must be LBID"));
			
			

            for(int i=2; i< Params.Length;i++)
            {
                ulong puid=0;
                int teamid=0;
                int score=0;

                if (Params[i] is StatParamPuid )
                    puid=(ulong)(Params[i]._data);
                else
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST, i+" param is not users"));
                i++;
                IsLess(i,Params.Length);
                if (Params[i]._data is Int32)
                    teamid=((int)(Params[i]._data));
                else
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,i+" param is not teamid"));

                i++;
                IsLess(i,Params.Length);
                if (Params[i]._data is Int32)
                    score=((int)(Params[i]._data));
                else
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"5th param must be score"));

                // populate users hastable
                if(!users.ContainsKey(puid))
                {
                    users[puid]=puid;
                }
                else
                {
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"same user twice"));
                }
                // populate team
                Team team;
                if(teams.ContainsKey(teamid))
                {
                    team = (Team) teams[teamid];
                }
                else
                {
                    team = new Team();
                    teams.Add(teamid,team);

                }
                team.AddPlayer((int)puid,score);
            }

           // if(users.Count<2 || teams.Count<2)
             //   throw new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"MuSigma Procedure should have 2 Unique players and teams"); 

            ProcessMuSigma(teams,uiTitleId,uiLbId);




        }


        public const int   c_playerSkillPartialPlayShift   = 0;
        public const int   c_playerSkillLearningShift      = 16;
        public const int   c_playerSkillFlagsShift         = 48;
        public const int   c_playerSkillFlagPartialPlaySet = 0x0001;
        public const int   c_playerSkillFlagLearningSet    = 0x0002;
        public const double BETA_MIN = 0.25;
        public const double BETA_MAX = 5.0;
        public const double TAU_MIN  = 0.01;
        public const double TAU_MAX  = 0.05;
        public const double DRAW_PROBABILITY_MIN = 0.0;
        public const double DRAW_PROBABILITY_MAX = 0.99;


        public void MuSigmaEx(StatsProcCall Proc,uint uiTitleId)
        {

			
            uint uiLbId=0;
            double beta;
            double tou;
            double drawPP;
            Hashtable teams= new Hashtable();
            Hashtable users= new Hashtable();

            StatParam[] Params =Proc.Params;
            if(Params.Length<4)
                throw new StatsException(HResult.XONLINE_E_STAT_NOT_ENOUGH_PARAMETERS,"NOT_ENOUGH_PARAMETERS");


            if (Params[0]._data is Int32)
                uiLbId=(uint)((int)(Params[0]._data));
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"1st param must be LBID"));

            if (Params[2]._data is double)
            {
                beta=(double)((Params[2]._data));
                if (beta < BETA_MIN || beta> BETA_MAX )
                {
                    throw new StatsException(
                        HResult.XONLINE_E_STAT_BAD_REQUEST,
                        String.Format("Error: Invalid Beta Override value for Title "));
                }

            }
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"1st param must be LBID"));
            if (Params[3]._data is double)
            {
                tou=(double)((Params[3]._data));
                if (tou < TAU_MIN || tou > TAU_MAX )
                {
                    throw new StatsException(
                        HResult.XONLINE_E_STAT_BAD_REQUEST,
                        String.Format("Error: Invalid Tau Override value for Title "));
                }

            }
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"1st param must be LBID"));
            if (Params[4]._data is double)
            {
                drawPP=(double)((Params[4]._data));
                if (drawPP< DRAW_PROBABILITY_MIN  || drawPP > DRAW_PROBABILITY_MAX )
                {
                    throw new StatsException(
                        HResult.XONLINE_E_STAT_BAD_REQUEST,
                        String.Format("Error: Invalid Draw Probability Override value for "));
                }

            }
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"1st param must be LBID"));
			
			

            for(int i=5; i< Params.Length;i++)
            {
                ulong puid=0;
                int teamid=0;
                int score=0;
                Int16 skillLearningFactor   = 100;
                Int16 partialPlayPercentage = 100;

                if (Params[i] is StatParamPuid )
                    puid=(ulong)(Params[i]._data);
                else
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST, i+" param is not users"));
                i++;
                IsLess(i,Params.Length);
                if (Params[i]._data is Int32)
                    teamid=((int)(Params[i]._data));
                else
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,i+" param is not teamid"));

               
                i++;
                IsLess(i,Params.Length);
                if (Params[i]._data is Int32)
                    score=((int)(Params[i]._data));
                else
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"5th param must be score"));

                i++;
                IsLess(i,Params.Length);
                if (Params[i]._bParamType !=StatParamTypes.Null && Params[i]._data is Int64)
                {
                    long playerOverrides =((long)(Params[i]._data));
                    Int16 flags                 = (Int16)((playerOverrides >> c_playerSkillFlagsShift) & 0xFFFF);
                    if (0 != (flags & c_playerSkillFlagPartialPlaySet))
                    {
                        partialPlayPercentage = (Int16)((playerOverrides >> c_playerSkillPartialPlayShift) & 0xFFFF);

                        if ( partialPlayPercentage < 0 ||  partialPlayPercentage >100)
                        {
                            throw new StatsException(
                                HResult.XONLINE_E_STAT_BAD_REQUEST,
                                String.Format("Error: Invalid partial play value for user 0x{0:X16}: {1}.",
                                puid,
                                partialPlayPercentage));
                        }
                    }

                    if (0 != (flags & c_playerSkillFlagLearningSet))
                    {
                        skillLearningFactor = (Int16)((playerOverrides >> c_playerSkillLearningShift) & 0xFFFF);

                        if ( skillLearningFactor<0 || skillLearningFactor >100)
                        {
                            throw new StatsException(
                                HResult.XONLINE_E_STAT_BAD_REQUEST,
                                String.Format("Error: Invalid skill learning factor for user 0x{0:X16}: {1}.",
                                puid,
                                skillLearningFactor));
                        }
                    }

                }
                else if(Params[i]._bParamType !=StatParamTypes.Null)
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"6th param must be partial play flags"));


                // populate users hastable
                if(!users.ContainsKey(puid))
                {
                    users[puid]=puid;
                }
                else
                {
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"same user twice"));
                }
                // populate team
                Team team;
                if(teams.ContainsKey(teamid))
                {
                    team = (Team) teams[teamid];
                }
                else
                {
                    team = new Team();
                    teams.Add(teamid,team);

                }
                team.AddPlayer((int)puid,score,((double)partialPlayPercentage) / 100.0  , ((double)skillLearningFactor) / 100.0);
            }

          //  if(users.Count<2 || teams.Count<2)
          //      throw new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"MuSigma Procedure should have 2 Unique players and teams"); 

            
            ProcessMuSigmaEx(teams,uiTitleId,uiLbId,beta,tou,drawPP);
            




        }


        public void Elo(StatsProcCall Proc,uint uiTitleId)
        {
            ulong[] Userids=new ulong[2];
            uint uiLbId=0;
            double outcome;
            double ma;
            double mb;
            int i=0;

            StatParam[] Params =Proc.Params;
            for(;i<2;i++)
            {
                IsLess(i,Params.Length);
                if (Params[i] is StatParamPuid )
                {
                    Userids[i]=(ulong)(Params[i]._data);
					
                }
                else
                    throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,i+"st params is not users"));
			
                if(Userids[i]<=0)
                    throw (new StatsException(HResult.XONLINE_E_STAT_PERMISSION_DENIED,i+"Puid 0 not allowed"));
            }
			
            IsLess(i,Params.Length);
            if (Params[i]._data is Int32)
                uiLbId=(uint)((int)(Params[i]._data));
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"3nd param must be LBID"));

            i=4;
            IsLess(i,Params.Length);
            if (Params[i]._data is double)
                outcome=((double)(Params[i++]._data));
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"4nd param must be OutCome"));
            IsLess(i,Params.Length);
            if (Params[i]._data is double)
                ma=((double)(Params[i++]._data));
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"4nd param must be Ma"));
			
            IsLess(i,Params.Length);
            if (Params[i]._data is double)
                mb=((double)(Params[i]._data));
            else
                throw (new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"4nd param must be Mb"));
			
            IsBetween0And1(outcome);
            IsBetween0And1(ma);
            IsBetween0And1(mb);
            //calculate the new rating for both users.
            PlayerTeamLb lb = (PlayerTeamLb) _playerLbs[new TitleLbKey(uiTitleId, uiLbId)];
            if(lb==null)
                throw new StatsException(HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,"Invalid Title : "+uiTitleId);



            //
            if(Userids[0] ==Userids[1])
                throw new StatsException(HResult.XONLINE_E_STAT_BAD_REQUEST,"userA and B are same"); 

            PlayerTeamLbEntry  PalyerEntry1=(PlayerTeamLbEntry)lb._lbEntries[Userids[0]];
            PlayerTeamLbEntry  PalyerEntry2=(PlayerTeamLbEntry)lb._lbEntries[Userids[1]];
            object rating1=null;
            object rating2=null;


            if(PalyerEntry1!=null)
                rating1= PalyerEntry1._lRating;
            else
            {
                PalyerEntry1= new PlayerTeamLbEntry(Userids[0]);
                lb._rankedEntries.Add(PalyerEntry1);
                lb._lbEntries[Userids[0]]=PalyerEntry1;
            }
            if(PalyerEntry2!=null)
                rating2= PalyerEntry2._lRating;
            else
            {
                PalyerEntry2= new PlayerTeamLbEntry(Userids[1]);
                lb._rankedEntries.Add(PalyerEntry2);
                lb._lbEntries[Userids[1]]=PalyerEntry2;
            }

            lb._lbInfo.CalCulateELO(ref PalyerEntry1._lRating,ref PalyerEntry2._lRating,rating1,rating2,outcome,ma,mb);

            if(CheckIFUserQulifiesAtt(PalyerEntry1._ulUserId,PalyerEntry1._lRating,lb))
                throw (new StatsException(HResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT,"User Qulafies for attachment"));
			
            if(CheckIFUserQulifiesAtt(PalyerEntry2._ulUserId,PalyerEntry2._lRating,lb))
                throw (new StatsException(HResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT,"User Qulafies for attachment"));

        }


        public void ClearallTitle( )
        {
            _playerLbs.Clear();
        }

        public void deleteLeaderboard(uint    uiTitleId,uint    uiLbId)
        {
            TitleLbKey titleLbKey = new TitleLbKey(uiTitleId, uiLbId);
            _playerLbs.Remove(titleLbKey);
        }

        public void CreateLeaderboard(uint    uiTitleId,uint    uiLbId,string  param ,bool AllowAtt,Byte IsTop100)
        {
            TitleLbKey titleLbKey = new TitleLbKey(uiTitleId, uiLbId);
            PlayerTeamLb playerLb =null;
            if(param!=null)
                playerLb =new PlayerTeamLb(uiTitleId, uiLbId, param);
            else
                playerLb =new PlayerTeamLb(uiTitleId,uiLbId,IsTop100);
            playerLb._lbInfo._AllowAttachments =AllowAtt;
            _playerLbs[titleLbKey] = playerLb;
        }
    }

    // TitleLbKey
    public class TitleLbKey
    {
        public uint     _uiTitleId;
        public uint     _uiLbId;
        
        public TitleLbKey(uint uiTitleId, uint uiLbId)
        {
            _uiTitleId = uiTitleId;
            _uiLbId = uiLbId;
        }
        
        // Object.Equals
        public override bool Equals(object obj)
        {
            return (_uiTitleId == ((TitleLbKey)obj)._uiTitleId)
                && (_uiLbId == ((TitleLbKey)obj)._uiLbId);
        }
        
        public override int GetHashCode()
        {
            return (int)(_uiTitleId + _uiLbId);
        }
    }

    public class BaseLB
    {
        public LeaderboardInfo _lbInfo;
        public uint         _uiTitleId;
        public uint         _uiLbId;
        public Hashtable    _lbEntries      = new Hashtable();
        public ArrayList    _rankedEntries  = new ArrayList();

        public BaseLB(uint title, uint lbid)
        {
            _uiTitleId = title;
            _uiLbId = lbid;
        }

        public void Rerank()
        {
            _rankedEntries.Sort();

            //
            if( _lbInfo._IsTop100==(byte)1)
            {
                ArrayList top100results = new ArrayList();

                if(_rankedEntries.Count>100)
                {
                    for(int i=0;i<100;i++)
                    {
                        top100results.Add(_rankedEntries[i]);
                    }
                }
                else
                {
                    for(int i=0;i<_rankedEntries.Count;i++)
                    {
                        top100results.Add(_rankedEntries[i]);
                    }

                }

                _rankedEntries= top100results;
            }

            int iRank = 1;
            foreach(PlayerTeamLbEntry lbEntry in _rankedEntries)
            {
                lbEntry._uiRank = (uint) iRank++;
            }
        }

        public ArrayList GetRankedList()
        {
			
            ArrayList results = new ArrayList();
            Rerank();
            long CurrentRating=-1;
            uint   CurrUntier=0;
            RankedList current= null;
            //PlayerTeamLbEntry

			
            for (int i=0;i<_rankedEntries.Count;i++)
            {
                PlayerTeamLbEntry player =(PlayerTeamLbEntry)_rankedEntries[i];
                if(player._lRating !=CurrentRating || player._uiUntier !=CurrUntier)
                {
                    current=new RankedList(player._lRating);
                    CurrentRating =player._lRating;
                    CurrUntier = player._uiUntier;
                    current._Entries.Add(player);
                    results.Add(current);
                }
                else
                    current._Entries.Add(player);


            }

            return results;

        }
    }
    
    public  class PlayerTeamLb:BaseLB  
    {		
		
	
        public PlayerTeamLb(uint uiTitleId,uint uiLbId, byte Istop100) :base(uiTitleId,uiLbId)
        {
            _lbInfo = new LeaderboardInfo(uiLbId,Istop100);
        }

        public PlayerTeamLb(uint uiTitleId, uint uiLbId, string param) :base(uiTitleId,uiLbId)
        {
            _lbInfo = new LeaderboardInfo(uiLbId, param);
        }

		
    }

	
    public class RankedList
    {
        public ArrayList _Entries= new ArrayList();
        public long Rating;
        public RankedList(long rating)
        {
            Rating=rating;
        }

    }


    public class BaseLBEntry :IComparable
    {
        public ulong        _ulUserId;
        public Hashtable    _stats = new Hashtable();
        public long         _lRating = 0;
        public uint         _uiUntier = 0;
        public uint         _uiRank = uint.MinValue;
        static public uint  _uiUntierSeed = 0;

        public BaseLBEntry(ulong ulUserId)
        {
            _ulUserId=ulUserId;
        }

        // IComparable.CompareTo
        public int CompareTo(object obj)
        {
            // Sort descending by rating               
            int c = ((PlayerTeamLbEntry)obj)._lRating.CompareTo(_lRating);

            // In case of same rating, use _uiUntier to decide. The expected behavior is that who got in first
            // takes precedence.
            if(c == 0)
                c = _uiUntier.CompareTo(((PlayerTeamLbEntry)obj)._uiUntier);

            return c;
        }



    }

    public class PlayerTeamLbEntry : BaseLBEntry
    {
        public byte[]		_AttachmentPath=null;
        public ushort		_AttachmentSize=0;
        public string		_NickName= null;


        public PlayerTeamLbEntry(ulong ulUserId):base(ulUserId)
        {
	
        }

	
		
    }
	
    public class ResetTypes
    {
        public static byte NoReset =0;
        public static byte Weekly =1;
        public static byte monthly=2;
        public static byte bimonthly=3;
        public static byte quarterly=4;
        public static byte SemiAnnually=5;
        public static byte annually=6;

    }
           

    public class LeaderboardInfo
    {
        public string ELOParams;
        public int _ServerIndex=0;
        public   bool			_AllowAttachments=false; 
        public   byte            _IsTeam=0;
        public   byte            _IsArbitration=0;
        public   uint            _uiLbId=0;
        public   bool            _fEloEnabled= false;
        public   float           _fEloE      = 10.0F;
        public   float           _fEloK      = 120.0F;
        public   int             _iEloNew    = 500;
        protected   ELO_C[]         _eloC       = new ELO_C[] { new ELO_C(0, 40) };
        public	Byte				_IsTop100 =0;
        public	int				_LBSize =0;
        public	int				ResetType =0;

        public LeaderboardInfo(uint uiLbId,byte IsTop100)
        {
            _uiLbId     = uiLbId;
            _IsTop100 =IsTop100;
            _LBSize		=100;
        }
        public LeaderboardInfo(uint uiLbId,byte IsTop100,byte RType)
        {
            _uiLbId     = uiLbId;
            _IsTop100 =IsTop100;
            _LBSize		=100;
            ResetType = RType;
        }
					
        public LeaderboardInfo(uint uiLbId, string param)
        {
            _uiLbId     = uiLbId;
            ELOParams=param;
            ParseParameters(param);
        }
        public LeaderboardInfo(uint uiLbId, string param,bool AllowAttachments,byte IsTeam)
        {
            _uiLbId     = uiLbId;
            ELOParams=param;
            ParseParameters(param);
            _AllowAttachments=AllowAttachments;
            _IsTeam=IsTeam;
			
        }

        public LeaderboardInfo(uint uiLbId, string param,byte IsTeam,byte IsArbitration)
        {
            _uiLbId     = uiLbId;
            ELOParams=param;
            ParseParameters(param);
            _IsTeam=IsTeam;
            _IsArbitration=IsArbitration;
        }

        public LeaderboardInfo(uint uiLbId, string param,byte IsTeam,byte IsArbitration,int Serveridx)
        {
            _uiLbId     = uiLbId;
            ELOParams=param;
            ParseParameters(param);
            _IsTeam=IsTeam;
            _IsArbitration=IsArbitration;
            _ServerIndex=Serveridx;
        }

        public long GetElo_C(long lRating)
        {
            // Find the right C for this lRating
            int i;
            for(i=1; i < _eloC.Length; i++)
            {
                if(_eloC[i]._lStartRating > lRating)
                    break;
            }
    
            return _eloC[i-1]._iC;
        }

        protected void ParseParameters(string param)
        {
            // param should contain parameter pairs separated by semi-collons.
            // Ex: ELO_E=10.0;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10
            string[] paramPairs = param.Split(new char[]{';'});
    
            foreach(string paramPair in paramPairs)
            {
                if(paramPair.Trim() == String.Empty)
                    continue;
        
                try
                {
                    // Split name and value. 
                    string[] nameAndValue = paramPair.Split(new char[]{'='});
                    string paramName = nameAndValue[0];
                    string paramValue = nameAndValue[1];
            
                    switch(paramName.ToUpper())
                    {
                        case "ELO_E":
                            string temp = Convert.ToString(paramValue);
                            if(temp=="10")
                                _fEloE=10.0F;
                            else
                                _fEloE=(float)Math.E;
                            break;
                
                        case "ELO_K":
                            _fEloK  = Convert.ToSingle(paramValue);
                            break;
                
                        case "ELO_NEW":
                            _iEloNew = Convert.ToInt32(paramValue);
                            break;
                
                        case "ELO_C":
                            ParseEloC(paramValue);
                            break;
                
                        default:
                            throw new Exception("Invalid parameter name");
                    }
                }
                catch(Exception e)
                {
                    throw new Exception("Failed to parse leaderboard parameters. Failed while parsing: "+paramPair+
                        "\nMessage: "+e.Message, e);
                }
            }
        }

        protected void ParseEloC(string eloCvalue)
        {
            // The ELO_C parameter contains an array that maps rating ranges to C constants.
            // Ex: ELO_C=0:40,1000:20,1500:10
            // The example above means that from 0 to 999 C = 40, 1000 to 1499 C = 20 and 1500 ahead C = 10
    
            string[] elocpairs = eloCvalue.Split(new char[]{','});
            _eloC = new ELO_C[elocpairs.Length];
    
            for(int iElocNdx=0; iElocNdx < _eloC.Length; iElocNdx++)
            {
                string[] ratingAndC = elocpairs[iElocNdx].Split(new char[]{':'});
                _eloC[iElocNdx]._lStartRating = Convert.ToInt64(ratingAndC[0]);
                _eloC[iElocNdx]._iC = Convert.ToInt32(ratingAndC[1]);
            }
    
            if(_eloC.Length == 0)
                throw new Exception("ELO_C parameter must contain at least one item.");
    
            Array.Sort(_eloC);
        }

        protected struct ELO_C : IComparable
        {
            public ELO_C(long lStartRating, int iC)
            {
                _lStartRating = lStartRating;
                _iC = iC;
            }
    
            public long     _lStartRating;
            public int      _iC;
    
            // IComparable.CompareTo
            public int CompareTo(object obj)
            {
                return _lStartRating.CompareTo(((ELO_C)obj)._lStartRating);
            }
        }
        public long GetEndofBucket1()
        {
            long temp=0;
            if(_eloC.Length>2)
                temp=_eloC[1]._lStartRating;
            else
                temp=Int32.MaxValue;
            return temp;
        }


        public void CalCulateELO(ref long NewRatingA, ref long NewRatingB,object RatingA, object RatingB, double  dMatchOutcome,double  dC1,double  dC2)
        {
            //ToDO add checks here....

			
            // Get the ratings of both players. If they don't have rating yet, use the Elo_new constant specified in 
            // the leaderboard by the publisher.
            long   lRating1 = RatingA != null ? (long) RatingA : _iEloNew;
            long   lRating2 = RatingB != null ? (long) RatingB : _iEloNew;

            // Calculate the maximum weight of the match from the table provided by the publisher. The table contains
            // weights based on ranges of ratings. We're going to get the weight for both users and use the highest.
            long    lC1 = GetElo_C(lRating1);
            long    lC2 = GetElo_C(lRating2);
            long    lC  = Math.Max(lC1, lC2);

            // Calculate the expected outcome based on the players' ratings.
					
            double dExpectedOutcome1 = 1.0 / (1.0 + Math.Pow(_fEloE,(lRating2 - lRating1)/_fEloK));
            double dExpectedOutcome2 = 1.0 - dExpectedOutcome1;
            // Calculate the deltas. Look, they are symmetric!!!
            long lDelta1 = (long) (lC * (dMatchOutcome - dExpectedOutcome1));
            long lDelta2 = lDelta1 * -1;
            
            // Calculated the new ratings. Apply the new deltas after being modified by C1 and C2 (specified by the 
            // game)
            if(lRating1 <GetEndofBucket1() ||lRating1 <GetEndofBucket1())
            {
                NewRatingA = (long) (lRating1 + (dC1 * lDelta1));
                NewRatingB = (long) (lRating2 + (dC2 * lDelta2));
            }
            else
            {
                if(dC1==dC2)
                {
                    NewRatingA = (long) (lRating1 + (dC1 * lDelta1));
                    NewRatingB = (long) (lRating2 + (dC2 * lDelta2));
                }
                else
                {
                    NewRatingA = (long) (lRating1 + (lDelta1));
                    NewRatingB = (long) (lRating2 + (lDelta2));
                }

            }

        }

    }
        
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\StorUtil.cs ===
using System;
using System.Collections.Generic;
using System.Text;

namespace ServerTestFramework.LiveService.Storage
{
    public static class StorUtil
    {
        public static uint ByteArrayToUInt(byte[] src)
        {
            uint dest = 0;
            for (int i = 3; i >= 0; i--)
            {
                dest <<= 8;
                dest += src[i];
            }
            return dest;
        }

        public static string DigitsFromStringStale(string src)
        {
            string numbers = "";
            foreach (char c in src)
            {
                if (char.IsDigit(c))
                {
                    numbers += c;
                }
            }
            return numbers;
        }

        public static string LettersAndDigitsFromString(string src)
        {
            string numbers = "";
            foreach (char c in src)
            {
                if (char.IsLetterOrDigit(c))
                {
                    numbers += c;
                }
            }
            return numbers;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFUtil\DirectDebitRandomizer.cs ===
using System;
using System.Diagnostics;

//namespace Microsoft.Subscriptions.Test.BDK.Tools
namespace xonline.common.stfutil
{
    /// <summary>
    /// This class provides properties to generate random credit card numbers
    /// </summary>
    public class DirectDebitRandomizer
    {

        #region // Fields

        private String algorithm;
        private String accountNumber;
        private String accountNumberLastFour;
        private String bankCode;
        private String branchCode;
        private String checkDigits;
        private String country;
        private static Random randomizer = new Random();
        #endregion

        #region // Constructors

        /// <summary>
        /// Default constructor - assumes France for the direct debit country
        /// </summary>
        public DirectDebitRandomizer() : this( "FR" )
        {
        }

        /// <summary>
        /// Uses the country provided to randomize on
        /// </summary>
        public DirectDebitRandomizer( String countryCode) : this(countryCode, "MOD11")
        {
        }

        /// <summary>
        /// Uses the country provided to randomize on
        /// </summary>
        public DirectDebitRandomizer( String countryCode, String alg )
        {
            this.algorithm = alg;
            this.accountNumber = String.Empty;
            this.accountNumberLastFour = String.Empty;
            this.bankCode = String.Empty;
            this.branchCode = String.Empty;
            this.checkDigits = String.Empty;
            Country = countryCode;
        }

        #endregion

        #region // Properties

        /// <summary>
        /// The account number of the direct debit account
        /// </summary>
        public String AccountNumber
        {
            get
            {
                return accountNumber;
            }
            set
            {
                accountNumber = value;
            }
        }

        /// <summary>
        /// The last four digits of the account number
        /// </summary>
        public String AccountNumberLastFour
        {
            get
            {
                return accountNumberLastFour;
            }
            set
            {
                accountNumberLastFour = value;
            }
        }

        /// <summary>
        /// The bank code of the direct debit account
        /// </summary>
        public String BankCode
        {
            get
            {
                return bankCode;
            }
            set
            {
                bankCode = value;
            }
        }

        /// <summary>
        /// The branch code of the direct debit account
        /// </summary>
        public String BranchCode
        {
            get
            {
                return branchCode;
            }
            set
            {
                branchCode = value;
            }
        }

        /// <summary>
        /// The checksum of the direct debit account
        /// </summary>
        public String CheckDigits
        {
            get
            {
                return checkDigits;
            }
            set
            {
                checkDigits = value;
            }
        }

        /// <summary>
        /// The country of the direct debit account
        /// </summary>
        public String Country
        {
            get
            {
                return country;
            }
            set
            {
                country = value;
                RandomizeDirectDebitValues();
            }
        }
        /// <summary>
        /// Alogrithm used to generate acct number
        /// </summary>
        public String Algorithm
        {
            get
            {
                return algorithm;
            }
            set
            {
                algorithm = value;
            }
        }

        #endregion

        #region // Methods

        /// <summary>
        /// Generates a random direct debit account number, bank code, branch code, etc.
        /// These values are in the various properties of this class and are synched with each other to provide a valid direct debit account.
        /// </summary>
        public void Randomize()
        {
            RandomizeDirectDebitValues();
        }

        /// <summary>
        /// Generates a random direct debit account number, bank code, branch code, etc.
        /// These values are in the various properties of this class and are synched with each other to provide a valid direct debit account.
        /// </summary>
        private void RandomizeDirectDebitValues()
        {
            switch ( Country.ToUpper() )
            {
                    // Germany
                case "DE":
                    // Generate and assign random values
                    this.bankCode      = String.Empty;
                    this.branchCode    = System.Math.Floor( ( randomizer.NextDouble() * 90000000   ) + 10000000 ).ToString();
                    this.accountNumber = System.Math.Floor( ( randomizer.NextDouble() * 9999999990 ) + 10       ).ToString();
                    this.checkDigits   = String.Empty;

                    // Break out
                    break;

                    // France
                case "FR":
                    // Generate and assign random values
                    this.bankCode      = System.Math.Floor( ( randomizer.NextDouble() * 90000 ) + 10000 ).ToString();
                    this.branchCode    = System.Math.Floor( ( randomizer.NextDouble() * 90000 ) + 10000 ).ToString();
                    this.accountNumber = String.Empty;
                    this.checkDigits   = String.Empty;

                    // French accounts have 2 to 11 alphanumeric characters for account numbers. This constructs one
                    for ( Int16 i = 1; i <= randomizer.Next( 2, 11 ); i++ )
                    {
                        Int32 randomNumber = randomizer.Next( 48, 83 );
                        if ( randomNumber >= 58 )
                        {
                            randomNumber += 7;
                        }

                        this.accountNumber += Convert.ToChar( randomNumber ).ToString();
                    }

                    // Construct the checksum for a French account
                    this.checkDigits = GetCheckDigitsForFranceAccount();

                    // Break out
                    break;

                    // The catch all
                default:
                    // Generate and assign random values using Germany (DE) as the default (it's the easiest)
                    this.bankCode      = String.Empty;
                    this.branchCode    = System.Math.Floor( ( randomizer.NextDouble() * 90000000   ) + 10000000 ).ToString();
                    this.accountNumber = System.Math.Floor( ( randomizer.NextDouble() * 9999999990 ) + 10       ).ToString();
                    this.checkDigits   = String.Empty;

                    // Break out
                    break;
            }
        }

        /// <summary>
        /// Returns the Check Digits value based on the algorithm for a French direct debit account.
        /// </summary>
        /// <returns></returns>
        private String GetCheckDigitsForFranceAccount()
        {
            // Build in the first half of the full account number
            String fullBankAccountNumber = this.BankCode + this.BranchCode;

            // Pad the full account number with zeros
            fullBankAccountNumber = fullBankAccountNumber.PadRight( ( 21 - this.accountNumber.Length ), '0' );

            // Add the account number to the end
            fullBankAccountNumber += this.AccountNumber;

            // A string that will be the full numeric string, after conversion
            String bigChecksumString = String.Empty;

            // Loop through the full account number and convert to a numeric string
            for ( Int16 i = 0; i <= ( fullBankAccountNumber.Length - 1 ); i++ )
            {
                // A specific character in the Full Account Number, each time through the loop
                Char specificChar = Convert.ToChar( fullBankAccountNumber.Substring( i, 1 ) );

                // If a numeric, add to the string straight out
                if ( specificChar <= 57 )
                {
                    bigChecksumString += specificChar - 48;
                }
                    // Letters A through I are 1 through 9 in order. Add the number
                else if ( specificChar <= 73 )
                {
                    bigChecksumString += specificChar - 64;
                }
                    // Letters J through R are 1 through 9 in order. Add the number
                else if ( specificChar <= 82 )
                {
                    bigChecksumString += specificChar - 73;
                }
                    // Letters S through Z are 2 through 9 in order. Add the number
                else if ( specificChar <= 90 )
                {
                    bigChecksumString += specificChar - 81;
                }
            }

            // Finally add two zeroes to the end of the big long String
            bigChecksumString += "00";

            // leftOver is what is left after each modulus of 97 as we move down the big checksum string
            String leftOver = String.Empty;

            // Move down the big checksum string
            for ( Int16 i = 0; i <= ( bigChecksumString.Length - 1 ); i++ )
            {
                // Append the next number to what was left from the last operation
                leftOver += bigChecksumString.Substring( i, 1 );

                // Take leftOver, convert it to a number to modulus it against 97, then convert the result back to a string
                leftOver = Convert.ToString( Convert.ToInt16( leftOver ) % 97 );
            }

            // Now that we are done, subtract leftOver from 97
            Int32 checksum = 97 - Convert.ToInt32( leftOver );

            // This is the value to be returned
            String returnValue = String.Empty;

            // the return value must be 2 digits, so may need a leading zero
            if ( checksum < 10 )
            {
                returnValue = "0" + checksum.ToString();
            }
            else
            {
                returnValue = checksum.ToString();
            }

            return returnValue;
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Constants.cs ===
using System;
using System.IO;
using System.Diagnostics;
using System.Security.Cryptography;
using System.Text;

namespace ServerTestFramework.LiveService.Storage
{
	/// <summary>
	/// All constants that will be used by storage service
	/// part of it are copied from StorageConstants.cs
	/// </summary>
	public class Constants
	{	
		/* the following constants are copied from StorageConstants.cs */
		public const ushort    sizeSignature        = 100;
		public const int    sizeHash                = 20;
		public const int	maxSizeAttributes		= 256;
		public const int    maxSizeName             = 255;
		public const int	maxSizeDomain			= 63;
		public const ushort accessTokenVersion      = 1;
		public const int    sizeAccessTokenBase     = 48 + sizeSignature;
		public const int    maxAccessTokenSize      = sizeAccessTokenBase + maxSizeName;
		public const int	syncDomainReservedSize  = 64;
		public const int	maxStorageOperations	= 100;

		// SyncDomain debug flag bit settings
		// * DeleteList  = 0x01
		//   If the DeleteList bit is set, a list of files to be deleted is
		//   returned at the end of the response.
		//
		// * NoDelete    = 0x02
		//   If the NoDelete bit is set, the actual deletion of the files is 
		//   not performed.  A list of the files that would have been deleted 
		//   is still returned if the DeleteList bit is set.
		// 
		// * NoDelay     = 0x04
		//   If the NoDelay bit is set, attachments which aren't part of the
		//   canonical list are deleted immediately instead of waiting until
		//   they are at least 24 hours old.
		//
		// * NoSkewCheck = 0x08
		//   If the NoSkewCheck bit is set, the request timestamp isn't
		//   required to be within 5 minutes of the current server time.
		public const uint syncDomainDeleteList  = 0x01;
		public const uint syncDomainNoDelete    = 0x02;
		public const uint syncDomainNoDelay     = 0x04;
		public const uint syncDomainNoSkewCheck = 0x08;

		// Temporary constants. Have to transform them into configurable 
		// settings at some point.
		public const int        maxFileSize     = 11*1024*1024;
		public const string     wstStoreApp     = "StoreDb";

		// Identity Types
		public enum IdType
		{
			Undefined       = 0,
			UserId          = 1,
			GroupId         = 2,
			TournamentId    = 3,
			TitleId			= 4,
			Invalid			= 5
		}
    
		// Storage Operations
		public enum Operation
		{
			Undefined               = 0,
			FileWrite               = 1,
			FileRead                = 2,
			FileRemove              = 3,
			FileEnumerate			= 4,
            ReadAchievements = 5
		}

		/// <summary>
		///  Storage Domain Ids: this part got from npdb t_storage_domains table
		/// </summary>
		public enum StorageDomain
		{
			Stats                   = 0,
			Title					= 1,
			tuser					= 2,
			tteam					= 3,
			msg						= 4,
			xestats					= 5,
			global					= 6
		}

		// Storage Content Types
		public enum ContentType
		{
			Unknown                 = 0,
			ContentPackage          = 1,
			Invalid					= 2
		}

		// Storage Compression Types
		public enum CompressionType
		{
			Uncompressed            = 0,
			NoCompression           = 1,
			LZX                     = 2,
			Invalid					= 3
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\XRLAccessToken.cs ===
using System;
using System.IO;
using System.Diagnostics;
using System.Security.Cryptography;
using System.Text;

namespace ServerTestFramework.LiveService.Storage
{
	/// <summary>
	/// basic fields of accessToken that will be shared by all sorts of requests
	/// </summary>
	public class AccessToken : WireData
	{
		public ushort operation;
		public ushort version = accessTokenVersion;
		public uint   serviceId;
		public uint   flags;
	//since we do ManualSlotSetup, we won't use attributes:[XRLPayloadFld(IsUPuid = true)]
		public ulong  userPuid;
	//same as above:[XRLPayloadFld(IsMPuid = true)]
		public ulong  xboxPuid;
		public ushort pathNameLen;
		public string pathName;

		public const ushort baseTokenSize = 32;
		public const ushort accessTokenVersion = 1;

		public virtual bool Validate()
		{
			//TODO: put real logic here
			return true;
		}
	}

	/// <summary>
	/// additional fields for readFile request
	/// </summary>
	public class ReadFileToken : WireData
	{	
		public long tokenExpirationDate;

		public ushort signatureLen;
		public byte[] signature;
	}

	/// <summary>
	/// additional fields for writeFile request
	/// </summary>
	public class WriteFileToken : WireData
	{
		public long tokenExpirationDate;
		public long fileExpirationDate;
		public uint maxFileSize;

		public ushort signatureLen;
		public byte[] signature;
	}
    
	/// <summary>
	/// addtional fields for removeFile requests
	/// </summary>
	public class RemoveFileToken : WireData
	{
		public long tokenExpirationDate;		
	
		public ushort signatureLen;
		public byte[] signature;
	}
	/// <summary>
	/// additional fields for EnumFiles request
	/// </summary>
	public class EnumFilesToken : WireData
	{	
		public long tokenExpirationDate;

		public ushort signatureLen;
		public byte[] signature;
	}


	/// <summary>
	/// AccessToken that is used for WriteFile request
	/// the fields of this class should be in sync with accessToken.cs in
	/// \\depot\xonline\private\common\mc\storage\accessToken.cs
	/// </summary>
	public class MyWriteFileToken : WireData
	{
		public AccessToken		baseAT = new AccessToken();
		public WriteFileToken	writeAT = new WriteFileToken();
	}
	
	/// <summary>
	/// AccessToken that is used for ReadFile request
	/// the fields of this class should be in sync with accessToken.cs in
	/// \\depot\xonline\private\common\mc\storage\accessToken.cs
	/// </summary>
	public class MyReadFileToken : WireData
	{
		public AccessToken		baseAT = new AccessToken();
		public ReadFileToken	readAT = new ReadFileToken();
	}

	/// <summary>
	/// AccessToken that is used for RemoveFile request
	/// the fields of this class should be in sync with accessToken.cs in
	/// \\depot\xonline\private\common\mc\storage\accessToken.cs
	/// </summary
	public class MyRemoveFileToken : WireData
	{
		public AccessToken		baseAT = new AccessToken();
		public RemoveFileToken	removeAT = new RemoveFileToken();
	}

	/// <summary>
	/// AccessToken that is used for EnumFiles request
	/// the fields of this class should be in sync with accessToken.cs in
	/// \\depot\xonline\private\common\mc\storage\accessToken.cs
	/// </summary
	public class MyEnumFilesToken : WireData
	{
		public AccessToken		baseAT = new AccessToken();
		public EnumFilesToken	enumFilesAT = new EnumFilesToken();
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFUtil\StfXrlUtil.cs ===
using System;
using System.Reflection;
using System.Net;
using System.Collections;
using System.IO;
using System.Text;
using System.Runtime.InteropServices;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Utilities;

using xonline.common.config;
using xonline.common.diagnostics;
using xonline.common.mgmt;
using xonline.common.service;
using xcs = xonline.common.service;

namespace xonline.common.stfutil
{
    public class StfXrlUtil
    {
        // append the SGIPPort header to the xrl reqest?
        public static bool AppendSGIPPort = false;


        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, string path, XRLObject2 requestObj, ref XRLObject2 responseObj)
        {
            uint hr;
            hr = PostXrlRequest(ref slot, service, false, path, null, requestObj, ref responseObj);
            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, XRLObject2 requestObj, ref XRLObject2 responseObj)
        {
            uint hr;
            hr = PostXrlRequest(ref slot, service, useInternal, path, null, requestObj, ref responseObj);
            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, string path, WebHeaderCollection reqHeaders, XRLObject2 requestObj, ref XRLObject2 responseObj)
        {
            uint hr;
            hr = PostXrlRequest(ref slot, service, false, path, reqHeaders, requestObj, ref responseObj);
            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, WebHeaderCollection reqHeaders, XRLObject2 requestObj, ref XRLObject2 responseObj)
        {
            uint hr;
            byte[] responseData = null;

            hr = PostXrlRequest(ref slot, service, useInternal, path, reqHeaders, requestObj, out responseData);

            if ( responseObj != null && responseData != null && responseData.Length > 0 )
            {
                BinaryReader r = new BinaryReader(new MemoryStream(responseData));
                responseObj.ReadFromRequest(r, (UTF8Encoding)Encoding.UTF8, responseData.Length, null);
            }

            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, string path, XRLObject2 requestObj)
        {
            uint hr;
            byte[] responseData = null;

            hr = PostXrlRequest(ref slot, service, path, requestObj, out responseData);
            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, string path, WebHeaderCollection reqHeaders, XRLObject2 requestObj)
        {
            uint hr;
            byte[] responseData = null;

            hr = PostXrlRequest(ref slot, service, false, path, reqHeaders, requestObj, out responseData);
            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, string path, XRLObject2 requestObj, out byte[] responseData)
        {
            uint hr = PostXrlRequest(ref slot, service, false, path, null, requestObj, out responseData);
            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, XRLObject2 requestObj, out byte[] responseData)
        {
            WebHeaderCollection webHeaders = new WebHeaderCollection();
            webHeaders.Add("X-Schema-Ver", WireInfoAttribute.VersionToString(requestObj.SchemaVersion));

            return PostXrlRequest(ref slot, service, useInternal, path, webHeaders, requestObj.GetBytes(), out responseData);
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, WebHeaderCollection reqHeaders, XRLObject2 requestObj, out byte[] responseData)
        {
            if (reqHeaders == null)
            {
                reqHeaders = new WebHeaderCollection();
            }
            
            if (reqHeaders["X-Schema-Ver"] == null)
            {
                reqHeaders.Add("X-Schema-Ver", WireInfoAttribute.VersionToString(requestObj.SchemaVersion));
            }

            return PostXrlRequest(ref slot, service, useInternal, path, reqHeaders, requestObj.GetBytes(), out responseData);
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, byte[] requestData, out byte[] responseData)
        {
            return PostXrlRequest(ref slot, service, useInternal, path, null, requestData, out responseData);
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, WebHeaderCollection reqHeaders, byte[] requestData, out byte[] responseData)
        {
            uint hr;

            MemoryStream reqStream = new MemoryStream(requestData, 0, requestData.Length, true, true);

            string uri = "POST " + path + " HTTP/1.0\r\n";

            WebHeaderCollection headers = new WebHeaderCollection();
            headers.Add("Content-Type", "xon/" + ((int)service).ToString("x"));
            headers.Add("User-Agent", ((int)service).ToString("x")+"/1.0.4325");
            headers.Add("Content-Length", reqStream.Length.ToString());
            if (reqHeaders != null)
            {
                headers.Add(reqHeaders);
            }

            // if no schema version is present, default to be the current schema version
            if (headers["X-Schema-Ver"] == null)
            {
                headers.Add("X-Schema-Ver", WireInfoAttribute.VersionToString(WireData.CurrentSchemaVersion));
            }

            FDTransaction xAct = new FDTransaction();
            xAct.endPoint = GetServiceEndPoint(service, useInternal);
            xAct.AppendSGIPPort = AppendSGIPPort;

            string headerString = uri + headers.ToString();
            ASCIIEncoding ascii = new ASCIIEncoding();
            byte[] headerBytes = ascii.GetBytes(headerString);

            bool retValue = xAct.Execute(headerBytes, reqStream, ref slot);

            hr = xAct.XErr;

            responseData = xAct.ResponseContents;

            if ( !retValue && xcs.HResult.Succeeded(hr) )
            {
                throw new Exception("StfXrlUtil.PostXrlRequest: failed request: " + headerString);
            }

            return hr;
        }

        public static IPEndPoint GetServiceEndPoint( xcs.XOService service, bool useInternal )
        {
            string addr = GetServiceAddress(service, useInternal);
            LiveServer ls = new LiveServer(service.ToString(), addr);
            return ls.EPDefault;
        }

        //-----------------------------------------------------
        // GetServiceAddress
        //
        //      Returns an address from the service configuration
        //      that can be used to contact the given service id.
        //
        public static string GetServiceAddress( xcs.XOService service, bool useInternal )
        {
            string viface;

            switch (service)
            {
            case xcs.XOService.PresNotification:
                viface = useInternal ? VirtualInterface.xpnfd_presence_int : VirtualInterface.xpnfd_presence;
                break;

            case xcs.XOService.StringService:
                viface = useInternal ? VirtualInterface.stringsvr_int : VirtualInterface.stringsvr;
                break;

            case xcs.XOService.Auto_Update:
                Assert.AreEqual( false, useInternal ); // no internal interface
                viface = VirtualInterface.xbos_autoupdate;
                break;

            case xcs.XOService.Base_Subscription:
                Assert.AreEqual( false, useInternal ); // no internal interface
                viface = VirtualInterface.xbos_base_subscription;
                break;

            case xcs.XOService.User_Account:
                viface = useInternal ? VirtualInterface.xuacs_int : VirtualInterface.xuacs;
                break;

            case xcs.XOService.Matchmaking:
                viface = useInternal ? VirtualInterface.xmatchfd_int : VirtualInterface.xmatchfd;
                break;

            case xcs.XOService.Stats:
                viface = useInternal ? VirtualInterface.xstatsfd_int : VirtualInterface.xstatsfd;
                break;

            case xcs.XOService.Feedback:
                Assert.AreEqual( false, useInternal ); // no internal interface
                viface = VirtualInterface.fbserver;
                break;

            case xcs.XOService.Billing_Offering:
                Assert.AreEqual( false, useInternal ); // no internal interface
                viface = VirtualInterface.xbos_billing_offering;
                break;

            case xcs.XOService.Signature_Server:
                viface = useInternal ? VirtualInterface.xsig_int : VirtualInterface.xsig;
                break;

            case xcs.XOService.Query:
                viface = useInternal ? VirtualInterface.xqry_int : VirtualInterface.xqry;
                break;

            case xcs.XOService.Name_Resolution:
                viface = useInternal ? VirtualInterface.stfd_name_resolution_int : VirtualInterface.stfd_name_resolution;
                break;

            case xcs.XOService.Storage:
                //TODO: VirtualInterface has no internal interface for storage
                // but needs one
                viface = VirtualInterface.stfd_storage;
                break;

            case xcs.XOService.Arbitration:
                viface = useInternal ? VirtualInterface.xarb_int : VirtualInterface.xarb;
                break;

            case xcs.XOService.Cron:
                Assert.IsTrue( useInternal ); // no external interface
                viface = VirtualInterface.cron_int;
                break;

            case xcs.XOService.MessagingService:
                //TODO: VirtualInterface has no internal interface for
                // messaging but needs one
                viface = VirtualInterface.xpnfd_messaging;
                break;

            case xcs.XOService.Teams:
                //TODO: VirtualInterface has no internal interface for
                // teams but needs one
                viface = VirtualInterface.xpnfd_teams;
                break;

            case xcs.XOService.DRM:
                viface = useInternal ? VirtualInterface.xbos_drm_int : VirtualInterface.xbos_drm;
                break;

            case xcs.XOService.Crypto:
                Assert.AreEqual(true, useInternal); // no external interface
                viface = VirtualInterface.xcrypto_int;
                break;

            default:
                throw new XRLException(xcs.HResult.XONLINE_E_INTERNAL_ERROR, XEvent.Id.COMMON_CODE_86, "Setting name for service " + service + " not found!   Add it to StfXrlUtil.GetServiceAddress.");
            }

            IVirtualInterfaceInfo fdInfo = Config.GetVirtualInterface(viface, Config.MainSiteId);
            if ( fdInfo == null )
            {
                throw new XRLException(xcs.HResult.XONLINE_E_INTERNAL_ERROR, XEvent.Id.COMMON_CONFIG_283, "Virtual interface for service " + viface.ToString() + " not found!  Check the config database.");
            }

            return fdInfo.IPAddressString + ":" + fdInfo.Port;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\XRLGetQuota.cs ===
using System;
using System.Net;
using System.IO;
using System.Collections;
using System.Security.Cryptography;
using System.Globalization;
using ServerTestFramework.LiveService.Presence;
using xonline.common.config;
using xonline.common.service;

namespace ServerTestFramework.LiveService.Storage
{
    /// <summary>
    /// This class is for get quota data from storage database
    /// </summary>
    public class XRLGetQuota : XRLPayload
    {
        public uint  domainId;
        public uint  titleId;
        public uint  keyType;
        public ulong keyValue;

        protected override string GetServiceName()
        {
            return "/stfd/getquota.ashx";
        }
        protected IPEndPoint stfd = Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage_int);
        public IPEndPoint Server
        {
            get {return stfd;}
            set {stfd = value;}
        }

        /// <summary>
        /// default constructor for XRLGetQuota
        /// normally will be used for negative test cases
        /// </summary>
        public XRLGetQuota(uint domain, uint title, uint keyT, ulong keyVal)
        {
            // all GetQuota request are datacenter requests
			// since we use configdb, it is taken care of by VirtualInterface.stfd_storage_int
			// this.stfd.EPDefault.Port = Global.Env.XStoreServer.EPBack[0].Port;

            domainId = domain;
            titleId = title;
            keyType = keyT;
            keyValue = keyVal;

            this.ServiceId = XOService.Storage;
        }
        /// <summary>
        /// send GetQuota request to stfd:11140 since it's a datacenter request
        /// </summary>
        /// <param name="Response"></param>
        /// <returns></returns>

        public bool Execute(out XRLGetQuotaResponse Response)
        {
            MemoryStream reqStream = new MemoryStream( 512 );
            WriteStream( reqStream );

            bool uRet = false;
            bool bRet=InternalExecute(this.Server,reqStream);

            Response = null;
            if( bRet )
            {
                if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
                {
                    Response = new XRLGetQuotaResponse();
                    MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
                    Response.ReadStream(respBuff);
                    uRet = true;
                }
            }
            return uRet;
        }
    }
    /// <summary>
    /// This class is for XRLGetQuotaResponse
    /// </summary>
    public class XRLGetQuotaResponse : XRLPayload
    {
        public ulong maxFileSize;
        public ulong totalBytesMax;
        public ulong totalBytesUsed;
        public uint  totalFilesMax;
        public uint  totalFilesUsed;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\XRLEnumFiles.cs ===
using System;
using System.Net;
using System.IO;
using System.Collections;
using System.Security.Cryptography;
using xonline.common.config;
using xonline.common.service;
using ServerTestFramework.Utilities;
namespace ServerTestFramework.LiveService.Storage
{
	/// <summary>
	/// This class is for emerate files
	/// </summary>
	public class XRLEnumFiles : XRLPayload
	{
		public MyEnumFilesToken  accessToken;
		public uint         uiTitleId;
		public uint         uiTitleVersion;
		public byte         bUserCountryId;
		public uint         uiRangeStart;
		public uint         uiRangeEnd;
		public long         lIfModifiedSinceDate;      

		protected override string GetServiceName()
		{
			return "/stfd/enumerateFiles.ashx";
		}

		/// <summary>
		/// XRLEnumFiles constructor that takes five parameters
		/// </summary>
		/// <param name="pathName">pathName of the files that will be enumerated</param>
		/// <param name="titleID">titleID of the files that will be enumerated; it should be the same as the one in the pathname</param>
		/// <param name="rangeStart">zero-based index of the starting file</param>
		/// <param name="rangeEnd">zero-based index of the ending file</param>
		/// <param name="lModifiedSince">return files that modified after this time</param>
		public XRLEnumFiles(string pathName,uint titleID,uint rangeStart, uint rangeEnd, long lModifiedSince)
		{
			uint randomTitleVersion = (uint)RandomEx.GlobalRandGen.Next();
            uint randomUserCountryId = (byte)RandomEx.GlobalRandGen.Next(2 ^ 8 - 1);

            ulong randomUserPUID = (RandomEx.GlobalRandGen.NextUlong() & Auth.SgClient.k_CounterPuidMask) | Auth.SgClient.k_UserPuidMask;
            ulong randomXBoxPUID = (RandomEx.GlobalRandGen.NextUlong() & Auth.SgClient.k_CounterPuidMask) | Auth.SgClient.k_XenonMachinePuidMask;

			ulong	randomPartitionKeyValue = (ulong)((new Random((int)randomUserCountryId).NextDouble()) * 0xffffffffffffffff);		

			this.accessToken	 = new MyEnumFilesToken();
			this.accessToken.baseAT.flags = 0; 
			this.accessToken.baseAT.operation = (ushort)Constants.Operation.FileEnumerate;
			this.accessToken.baseAT.pathName = pathName;
			this.accessToken.baseAT.pathNameLen = (ushort)pathName.Length;
			this.accessToken.baseAT.userPuid = randomUserPUID;
			this.accessToken.baseAT.version = Constants.accessTokenVersion;
			this.accessToken.baseAT.xboxPuid = randomXBoxPUID;
			this.accessToken.enumFilesAT.tokenExpirationDate = (long)System.DateTime.UtcNow.AddYears(1).ToFileTimeUtc();
			this.accessToken.enumFilesAT.signatureLen = 0;
			this.accessToken.enumFilesAT.signature = null;
			this.accessToken.baseAT.pathName = pathName;
			this.accessToken.baseAT.pathNameLen = (ushort)pathName.Length;
			if(pathName.StartsWith("//title"))
				this.accessToken.baseAT.serviceId = 0;
			else if (pathName.StartsWith("//tuser"))
				this.accessToken.baseAT.serviceId = 0;


			this.uiTitleId = titleID;
			this.uiTitleVersion = randomTitleVersion;
			this.bUserCountryId = (byte)randomUserCountryId;

			this.uiRangeStart = rangeStart;
			this.uiRangeEnd = rangeEnd;
			this.lIfModifiedSinceDate = lModifiedSince;

			this.ServiceId = XOService.Storage;	
		
			if(pathName.StartsWith("//global") == false)
			{
				// set up SGAuth field
				this.ManualSlotSetup = true;
				this.Slot.machinePuid = accessToken.baseAT.xboxPuid;
				this.Slot.userPuid0 = accessToken.baseAT.userPuid;
				this.Slot.titleId = this.uiTitleId;
				this.Slot.titleVersion = this.uiTitleVersion;
				this.Slot.userFlag0 = (uint)this.bUserCountryId <<8;
				this.Slot.ClearServices();
				this.Slot.AddService(XOService.Storage);
			}
			
			// serviceAddr is the perssion type for crossTitle enum
			else	//bug 25899:Expose enumerate privileges on the global storage domain
			{
				uint    ip = 0;
				byte [] addr;
				HTTPAuthData    authData;
				ulong	requestId = 0;
				// this is a dataCenter request, needs to use HTTPAuthData header
				requestId = (ulong)new Random().NextDouble() * 0xffffffffffffffff;
				addr = Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage_int).Address.GetAddressBytes();
				for(int i = 0; i < addr.Length; i++)
					ip = (ip << 8) + addr[i];
				authData = new HTTPAuthData((ushort) Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage_int).Port,
					ip,requestId,0,this.uiTitleId,(uint)XOService.Storage,0);
				authData.dwTitleVersion = this.uiTitleVersion;
				this.CustomHeader = HTTPAuthData.HTTP_HEADER_AUTH_DATA + ":" +
					authData.GetBase64EncodedString() + "\r\n";
				this.accessToken.baseAT.userPuid = 0;
				this.accessToken.baseAT.xboxPuid = 0;
				this.bUserCountryId = 0;
			}

		}
		/// <summary>
		/// If this is a dataCenter EnumFile request,then we need append HTTPAuthData header
		/// </summary>
		/// <param name="endPoint"></param>
		/// <param name="reqStream"></param>
		/// <returns></returns>
		public override byte[] GenerateHttpHeader(IPEndPoint endPoint, MemoryStream reqStream)
		{
			if(this.CustomHeader == String.Empty)
				return base.GenerateHttpHeader(endPoint, reqStream);
			else    // there is HTTPAuthData Header
			{
				endPoint.Port = (ushort) Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage_int).Port;
				return base.GenerateHttpHeader(endPoint, reqStream);
			}
		}
		/// <summary>
		/// send XRLEnumFiles http request to storage front door and get the response back
		/// </summary>
		/// <param name="sServer">Storage front door</param>
		/// <param name="Response">XRLEnumFiles response</param>
		/// <returns></returns>
		public bool Execute(IPEndPoint sServer, out XRLEnumFilesResponse Response)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet=InternalExecute(sServer,reqStream);
			
			Response = null;
			if( bRet )
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					Response = new XRLEnumFilesResponse();
					MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
					Response.ReadStream(respBuff);
					uRet = true;
				}
			}
			return uRet;
		}
	}

	/// <summary>
	/// This class is for each file returned in the enumFile response
	/// </summary>
	public class XRLSingleEnumFileResult : WireData
	{
		public uint         uiTitleId;
		public uint         uiTitleVersion;
		public ulong        ulUserPuid;
		public byte         bUserCountryId;
		public ulong        ulXboxPuid;
		public uint         uiContentType;
		public uint         blobDataLen;
		public uint         uiBlobSizeUncompressed;
		public long         lCreationDate;
		public long         lModifiedDate;
		public ushort       attributesLen;
		public ushort		pathNameLen;
		public byte[]       attributes;
		public string		pathName;

		/// <summary>
		/// Compare each single enumFile response with the writeFile request;
		/// </summary>
		/// <param name="other">requests that upload the file</param>
		/// <returns></returns>
		public bool Compare(XRLWriteFile	other)
		{
			if(other.uiTitleId != uiTitleId)
			{
				Global.RO.Warn("TitleID in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.uiTitleVersion != uiTitleVersion)
			{
				Global.RO.Warn("TitleVersion in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.accessToken.baseAT.userPuid != ulUserPuid)
			{
				Global.RO.Warn("OwerPUID in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.bUserCountryId != bUserCountryId)
			{
				Global.RO.Warn("OwerCountryID in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.accessToken.baseAT.xboxPuid != ulXboxPuid)
			{
				Global.RO.Warn("OwnerXBoxPUID in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.uiContentType != uiContentType)
			{
				Global.RO.Warn("ContentType in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.blobDataLen != uiBlobSizeUncompressed)
			{
				Global.RO.Warn("UncompressedFileSize in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.attributesLen != attributesLen)
			{
				Global.RO.Warn("AttributesLen in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.uiBlobSizeCompressed != blobDataLen)
			{
				Global.RO.Warn("CompressedFileSize in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.attributes != null)
			{
				if(attributes != null)
				{
					for(int i = 0; i < other.attributesLen; i++)
						if(other.attributes[i] != attributes[i])
						{
							Global.RO.Warn("Attributes in the ReadFileResponse does not match the one in WriteFile Requests");
							return false;
						}
				}
				else
				{
					Global.RO.Warn("No Attributes returned in the ReadFileResponse");
					return false;
				}
			}
			return true;
		}
	}
	/// <summary>
	/// enumFiles response
	/// </summary>
	public class XRLEnumFilesResponse : XRLPayload
	{
		public uint			numFilesTotal;	// total number of files matching the request
		public uint			resultsLen;		// actual number of files returned in the response
		public XRLSingleEnumFileResult[]	results;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\XRLNameResolver.cs ===
using System;
using System.Text;
using System.IO;
using System.Net;
using xonline.common.service;

namespace ServerTestFramework.LiveService.Storage
{
	/// <summary>
	/// Summary description for XRLNameResolver.
	/// </summary>
	public class XRLNameResolver : XRLPayload
	{
		public ushort		DomainLen;
		public byte []		Domain;

//		protected override XOService[]GetServices()
//		{
//			return new XOService[1] {XOService.Name_Resolution};
//		}

		protected override string GetServiceName()
		{
			return "/stfd/ResolveName.ashx";
		}

		public XRLNameResolver()
		{
			this.ServiceId=XOService.Name_Resolution;
		}
		public XRLNameResolver(string domain)
		{
			this.ServiceId=XOService.Name_Resolution;
			this.DomainLen = (ushort)domain.Length;
			this.Domain = new ASCIIEncoding().GetBytes(domain);

			this.ManualSlotSetup = true;
			this.Slot.ClearServices();
			this.Slot.AddService(XOService.Name_Resolution);
			//this.Slot.services = GetServices();
		}
		public bool Execute(IPEndPoint sServer, out XRLNameResolverResponse Response)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet=InternalExecute(sServer,reqStream);
			
			Response = null;
			if( bRet )
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					Response = new XRLNameResolverResponse();
					MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
					Response.ReadStream(respBuff);
					uRet = true;
				}
			}
			return uRet;
		}
	}
	public class XRLNameResolverResponse : XRLPayload
	{
		public uint			uiPrimaryIP;	// primary (read/write) IP address 
		public ushort		usPrimaryPort;	// primary (read/write) port for this domain
		public uint			uiAlternateIP;	// alternate (read-only) IP address
		public ushort		usAlternatePort;// alternate (read-only) port
		public long			lExpiration;	// absolute expiration for use of this mapping
		public ushort		RuleLen;		// length of the following rule, bytes
		public byte []		Rule;			// text of the mapping rule, UTF-8 encoded.
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\XRLReadFileHash.cs ===
using System;
using System.Text;
using System.IO;
using System.Net;
using xonline.common.config;
using xonline.common.service;

namespace ServerTestFramework.LiveService.Storage
{
	public class XRLReadFileHash : XRLPayload
	{
		public ushort		pathNameLen;
		public string		pathName;

		protected override string GetServiceName()
		{
			return "/stfd/ReadFileHash.ashx";
		}
		protected IPEndPoint stfd = new IPEndPoint(Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage_int).Address,
													Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage_int).Port);

		public IPEndPoint Server
		{
			get {return stfd;}
			set {stfd = value;}
		}
		public XRLReadFileHash()
		{
			// Tsunami: GlobalTitle and PerUserPerTitle
			// readFileHash is called by widget to get bannedDigest so it's datacenter call
			ServiceId=XOService.Storage;
		}
		public bool Execute(IPEndPoint Server, out XRLReadFileHashResponse Response)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet=InternalExecute(Server,reqStream);

			Response = null;
			if( bRet )
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					Response = new XRLReadFileHashResponse();
					MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
					Response.ReadStream(respBuff);
					uRet = true;
				}
			}
			return uRet;
		}
	}

	public class XRLReadFileHashResponse : XRLPayload
	{
		[XRLPayloadFld(ArraySize=Constants.sizeHash)]
		public byte[]		clientHash;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\XRLReadAchievements.cs ===
using System;
using System.Net;
using System.IO;
using System.Collections;
using System.Security.Cryptography;
using System.Globalization;
using ServerTestFramework.LiveService.Presence;

using xonline.common.config;
using xonline.common.service;

namespace ServerTestFramework.LiveService.Storage
{
    /// <summary>
    /// This class is for download a file from storage database
    /// </summary>
    public class XRLReadAchievements : XRLPayload
    {
        public MyReadFileToken accessToken;

        protected override string GetServiceName()
        {
            return "/stfd/readtitlefiles.ashx";
        }

        private void setConstructor()
        {
            uint randomTitleId = (uint)new Random().Next();
            uint randomPartitionKeySeed = (byte)new Random().Next(2 ^ 8 - 1);
            ulong randomPartitionKeyValue = (ulong)((new Random((int)randomPartitionKeySeed).NextDouble()) * 0xffffffffffffffff);
            ulong randomUserPUID = ((ulong)((new Random().NextDouble()) * 0xffffffffffffffff) & Auth.SgClient.k_CounterPuidMask) | Auth.SgClient.k_UserPuidMask;
            ulong randomXBoxPUID = ((ulong)((new Random().NextDouble()) * 0xffffffffffffffff) & Auth.SgClient.k_CounterPuidMask) | Auth.SgClient.k_XenonMachinePuidMask;
            uint randomTitleVersion = (uint)new Random().Next();

            string pathName = String.Format("//global.{0}/u:{1}/{2}{3}",
                                            randomTitleId.ToString("x"),
                                            randomPartitionKeyValue.ToString("x"),
                                            randomTitleId.ToString("x"),
                                            Guid.NewGuid().ToString());

            ServiceId = XOService.Storage;

            accessToken = new MyReadFileToken();
            accessToken.baseAT.flags = 0;
            accessToken.baseAT.operation = (ushort)Constants.Operation.ReadAchievements;
            accessToken.baseAT.pathName = pathName;
            accessToken.baseAT.pathNameLen = (ushort)pathName.Length;
            accessToken.baseAT.serviceId = (uint)XOService.Stats;
            accessToken.baseAT.userPuid = randomUserPUID;
            accessToken.baseAT.version = Constants.accessTokenVersion;
            accessToken.baseAT.xboxPuid = randomXBoxPUID;
            accessToken.readAT.tokenExpirationDate = (long)System.DateTime.UtcNow.AddYears(1).ToFileTimeUtc();
            accessToken.readAT.signatureLen = 0;
            accessToken.readAT.signature = null;

            // set up SGAuth field
            this.ManualSlotSetup = true;
            this.Slot.machinePuid = accessToken.baseAT.xboxPuid;
            this.Slot.userPuid0 = accessToken.baseAT.userPuid;
            this.Slot.titleId = randomTitleId;
            this.Slot.titleVersion = randomTitleVersion;
            this.Slot.userFlag0 = 0;
            this.Slot.ClearServices();
            this.Slot.AddService(XOService.Storage);
        }

        public XRLReadAchievements(string pathName)
        {
            setConstructor();
            this.accessToken.baseAT.pathName = pathName;
            this.accessToken.baseAT.pathNameLen = (ushort)pathName.Length;
        }

        /// <summary>
        /// Send XRLReadAchievements requests to the xstorage front door
        /// </summary>
        /// <returns></returns>
        public bool Execute(out XRLReadAchievementsResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage), out Response);
        }

        /// <summary>
        /// send XRLReadAchievements http request to storage front door and get the response back
        /// </summary>
        /// <param name="sServer">Storage front door</param>
        /// <param name="Response">XRLReadAchievements response</param>
        /// <returns></returns>
        public bool Execute(IPEndPoint sServer, out XRLReadAchievementsResponse Response)
        {
            MemoryStream reqStream = new MemoryStream(512);
            WriteStream(reqStream);

            bool uRet = false;
            bool bRet = InternalExecute(sServer, reqStream);

            Response = null;
            if (bRet)
            {
                if ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0))
                {
                    Response = new XRLReadAchievementsResponse();
                    MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
                    Response.ReadStream(respBuff);
                    uRet = true;
                }
            }
            return uRet;
        }
    }

    public class AchievementInfo : WireData
    {
        public uint id;
        public ushort blobLength;
        public ushort blobExtraLength;
        public ushort chunkCount;

        [WireInfo(SizeParam = "blobLength")]
        public byte[] blob = null;
    }

    /// <summary>
    /// This class is for XRLReadAchievementsResponse
    /// </summary>
    public class XRLReadAchievementsResponse : XRLPayload
    {
        public uint ulTitleId;
        public ushort numItems;

        [WireInfo(SizeParam = "numItems")]
        public AchievementInfo[] resultItems = null;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\XRLWriteFile.cs ===
using System;
using System.Net;
using System.IO;
using System.Collections;
using System.Security.Cryptography;
using System.Data.SqlClient;
using System.Text;
using System.Globalization;
using Microsoft.Webstore.WstClient;
using ServerTestFramework;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.Signature;
using ServerTestFramework.Utilities;
using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;

namespace ServerTestFramework.LiveService.Storage
{
    /// <summary>
    /// This class is used to upload a file to storage database
    /// </summary>
    public class XRLWriteFile : XRLPayload
    {
        public MyWriteFileToken  accessToken;

        //    [XRLPayloadFld(IsTitleId=true)]
        public uint         uiTitleId;
        //    [XRLPayloadFld(IsTitleVersion=true)]
        public uint         uiTitleVersion;
        public byte         bUserCountryId;
        public byte         bCompressionType;
        public uint         uiContentType;
        [XRLPayloadFld(ArraySize=Constants.sizeHash)]
        public byte[]       blobHash;
        [XRLPayloadFld(ArraySize=Constants.sizeSignature)]
        public byte[]       blobSignature;
        public uint         blobDataLen;
        public ushort        attributesLen;
        public uint         uiBlobSizeCompressed;
        public byte[]        attributes;
        public byte[]        blobData;

        protected IPEndPoint stfd = new IPEndPoint(Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage).Address,
													Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage).Port);

        [WireInfo(Serialize=false)]
        private static RandomEx RandGen = new RandomEx();

        /// <summary>
        /// Set or get Storage Front door
        /// </summary>
        public IPEndPoint Server
        {
            get {return stfd;}
            set {stfd = value;}
        }
        
        //        protected override XOService[] GetServices()
        //        {
        //            return new XOService[1] {XOService.Storage};
        //        }
        protected override string GetServiceName()
        {
            return "/stfd/writefile.ashx";
        }

        private void setConstructor(uint uiFileSize, string pathName, bool stress)
        {
            uint titleVersion = (uint)RandGen.Next();
            setConstructor(uiFileSize, pathName, stress, titleVersion);
        }

        private void setConstructor(uint uiFileSize, string pathName, bool stress, uint titleVersion)
        {
            uint titleID = 0;
            setConstructor(uiFileSize, pathName, stress, titleVersion, ref titleID);
        }

        private void setConstructor(uint uiFileSize, string pathName, bool stress, uint titleVersion,
            ref uint TitleId)
        {
            ulong randomUserPUID = ((ulong)((RandGen.NextDouble()) * 0xffffffffffffffff) & Auth.SgClient.k_CounterPuidMask) | Auth.SgClient.k_UserPuidMask;
            uint    randomUserCountryId = (byte)RandGen.Next(255);
            ulong randomXBoxPUID = ((ulong)((RandGen.NextDouble()) * 0xffffffffffffffff) & Auth.SgClient.k_CounterPuidMask) | Auth.SgClient.k_XenonMachinePuidMask;

            if (TitleId == 0)
            {
                // extract titleID from pathName
                int startPos = pathName.IndexOf("t:");
                if (startPos == -1)    // pathName doesn't have title ID
                    TitleId = (uint)RandGen.Next();
                else
                {
                    string subStr = pathName.Substring(startPos + 2);
                    StringBuilder temp = new StringBuilder();
                    for (int i = 0; i < subStr.IndexOf(@"/"); i++)
                        temp.Append(subStr[i]);
                    TitleId = (uint)Int32.Parse(temp.ToString(), NumberStyles.AllowHexSpecifier);
                }
            }

            accessToken     = new MyWriteFileToken();
            accessToken.baseAT.flags = 0;
            accessToken.baseAT.operation = (ushort)Constants.Operation.FileWrite;
            accessToken.baseAT.pathName = pathName;
            accessToken.baseAT.pathNameLen = (ushort)pathName.Length;
            accessToken.baseAT.serviceId = (uint)XOService.Stats;
            accessToken.baseAT.userPuid = randomUserPUID;
            accessToken.baseAT.version = Constants.accessTokenVersion;
            accessToken.baseAT.xboxPuid = randomXBoxPUID;
            accessToken.writeAT.fileExpirationDate = (long)System.DateTime.UtcNow.AddHours(96).ToFileTimeUtc();
            accessToken.writeAT.tokenExpirationDate = (long)System.DateTime.UtcNow.AddHours(96).ToFileTimeUtc();
            accessToken.writeAT.maxFileSize = Constants.maxFileSize;
            accessToken.writeAT.signature = new Byte[Constants.sizeSignature];
            accessToken.writeAT.signatureLen = Constants.sizeSignature;

            //call XSig to get AccessToken signed
            byte[] signDataWithExtra = (byte[])accessToken;
            int sizeDataToSign = accessToken.baseAT.Size() + 20;//20 is fileExp/tokenExp/maxFilesize
            byte[] signData = new byte[sizeDataToSign];
            Array.Copy(signDataWithExtra, 0, signData, 0, sizeDataToSign);
            XSigSignature signature = new XSigSignature();
            signature.Initialize();
            signature._serviceId = (uint)XOService.Stats;

            SHA1 sha1 = new SHA1CryptoServiceProvider();
            signature.ComputeSignature(sha1.ComputeHash(signData));
            accessToken.writeAT.signature = (byte [])signature;


            byte [] blob = new byte[uiFileSize];
            if(stress == false)
                RandGen.NextBytes(blob);
            //            int randomNumber = 0;
            //            for (int i = 0; i < blob.Length; i++)
            //            {
            //                randomNumber = new Random(unchecked((int)System.DateTime.Now.Ticks)).Next();
            //                blob[i] = (byte)(randomNumber%256);
            //            }
            this.blobData = blob;
            this.uiTitleId = TitleId;
            this.uiTitleVersion = titleVersion;
            this.bUserCountryId = (byte)randomUserCountryId;
            this.bCompressionType = (byte)Constants.CompressionType.Uncompressed;
            this.uiContentType = (uint)Constants.ContentType.ContentPackage;
            this.blobHash = new SHA1CryptoServiceProvider().ComputeHash(blob);
            //TODO:the blobSignature computed from blobHash;should be signed by XSig
            this.blobSignature = new byte [Constants.sizeSignature];
            for(int i = 0; i < Constants.sizeSignature; i++)
                this.blobSignature[i] = 8;

            this.uiBlobSizeCompressed = (uint)blob.Length;
            this.blobDataLen = (uint)blob.Length;
            this.attributes = null;
            this.attributesLen = 0;

            // we use setup SG slot manually, we won't use XRLPayld attribute at all
            this.ManualSlotSetup = true;
            this.Slot.machinePuid = accessToken.baseAT.xboxPuid;
            this.Slot.userPuid0 = accessToken.baseAT.userPuid;
            this.Slot.titleId = this.uiTitleId;
            this.Slot.titleVersion = this.uiTitleVersion;
            this.Slot.userFlag0 = (uint)this.bUserCountryId <<8;
            this.Slot.ClearServices();
            this.Slot.AddService(XOService.Storage);
            //    this.Slot.services = GetServices();

            this.ServiceId = XOService.Storage;
        }
        /// <summary>
        /// default constructor for XRLWriteFile
        /// </summary>
        public XRLWriteFile()
        {
            uint    randomTitleId = (uint)RandGen.Next();
            ulong    randomPartitionKeyValue = (ulong)((RandGen.NextDouble()) * 0xffffffffffffffff);
            string pathName = "//stats."+randomTitleId.ToString("x")
                + "/u:" + randomPartitionKeyValue.ToString("x") + "/" + randomTitleId.ToString("x")
                + "/" + Guid.NewGuid().ToString();

            setConstructor(102400, pathName, false);
        }
        /// <summary>
        /// XRLWriteFile constructor that takes four parameters
        /// Can be used together with stats API to upload a file
        /// </summary>
        /// <param name="titleID">titleID of the upload file</param>
        /// <param name="uiFileSize">filesize of the upload file in byte</param>
        /// <param name="pathName">stats generated pathName of the upload file</param>
        /// <param name="UserPuid">userPUID that upload the file</param>
        public XRLWriteFile(uint titleID,uint uiFileSize, string pathName, ulong UserPuid)
        {
            setConstructor(uiFileSize, pathName, false);
            this.accessToken.baseAT.pathName = pathName;
            this.accessToken.baseAT.pathNameLen = (ushort)pathName.Length;
            this.accessToken.baseAT.userPuid = UserPuid;
            this.Slot.userPuid0 = UserPuid;
            this.uiTitleId = titleID;
            this.Slot.titleId = this.uiTitleId;

            //need to resign the access Token
            byte[] signDataWithExtra = (byte[])accessToken;
            int sizeDataToSign = accessToken.baseAT.Size() + 20;//20 is fileExp/tokenExp/maxFilesize
            byte[] signData = new byte[sizeDataToSign];
            Array.Copy(signDataWithExtra, 0, signData, 0, sizeDataToSign);
            XSigSignature signature = new XSigSignature();
            signature.Initialize();
            signature._serviceId = (uint)XOService.Stats;

            SHA1 sha1 = new SHA1CryptoServiceProvider();
            signature.ComputeSignature(sha1.ComputeHash(signData));
            this.accessToken.writeAT.signature = (byte [])signature;
        }
        /********************************************************************
         * The followings are for Tsunami feature
         ********************************************************************/
        /// <summary>
        /// Tsunami testing: different domain has different permission type
        /// </summary>
        /// <param name="permissionType">None/All/Owner/Team/UserToken/ServiceToken/ServiceAddr</param>
        public XRLWriteFile(string permissionType, string pathName)
            : this(permissionType, pathName, 1024, false) {}

        public XRLWriteFile(string permissionType, string pathName, uint uiFileSize, bool stress)
            : this(permissionType, pathName, uiFileSize, stress, (uint)RandGen.Next()) {}

        public XRLWriteFile(string permissionType, string pathName, uint uiFileSize, bool stress, uint titleVersion)
            : this (permissionType, pathName, uiFileSize, stress, titleVersion, 0) {}

        public XRLWriteFile(string permissionType, string pathName, uint uiFileSize, bool stress, uint titleVersion, 
            uint TitleID)
        {
            uint _titleID = TitleID;
            setConstructor(uiFileSize, pathName, stress, titleVersion, ref _titleID);
            this.Slot.titleId = this.uiTitleId = _titleID;
            int startPos;
            string subStr = "";
            StringBuilder temp;

            switch(permissionType)
            {
                case "All":
                    this.accessToken.writeAT.signature = null;
                    this.accessToken.writeAT.signatureLen = 0;
                    // if this is for messaging, then //msg.<countryid>/u:....
                    startPos = pathName.IndexOf("msg");
                    if(startPos != -1)
                    {
                        subStr = pathName.Substring(startPos + 4);
                        temp = new StringBuilder();
                        for (int i = 0; i < subStr.IndexOf(@"/"); i++)
                            temp.Append(subStr[i]);
                        this.bUserCountryId = Byte.Parse(temp.ToString(),NumberStyles.AllowHexSpecifier);
                        this.Slot.userFlag0 = (uint)this.bUserCountryId <<8;
                    }
                    break;
                case "ServiceToken":
                    // gameClips use ServiceToken
                    startPos = pathName.IndexOf("stats");
                    if(startPos != -1)
                    {
                        // find titleID from pathName //stats.123/u:89898/123/dkfjkdjfkd
                        string temp2 = pathName.Substring(8,pathName.IndexOf(@"/u:")-8);
                        this.uiTitleId = this.Slot.titleId = (uint)Int32.Parse(temp2,NumberStyles.AllowHexSpecifier);
                    }
                    break;
                case "Owner":
                    this.accessToken.writeAT.signature = null;
                    this.accessToken.writeAT.signatureLen = 0;
                    this.accessToken.baseAT.serviceId = 0;
                    // owner means the userPUID in the pathName should be the same as AccessToken
                    startPos = pathName.IndexOf("u:");
                    if(startPos != -1)
                    {
                        subStr = pathName.Substring(startPos+2);
                        temp = new StringBuilder();
                        for (int i = 0; i < subStr.IndexOf(@"/"); i++)
                            temp.Append(subStr[i]);
                        if(temp.ToString().Length != 0)
                        {
                            long userID = Int64.Parse(StorUtil.LettersAndDigitsFromString(temp.ToString()),
                                NumberStyles.AllowHexSpecifier);
                            this.accessToken.baseAT.userPuid = (ulong)userID;
                            this.Slot.userPuid0 = (ulong)userID;
                        }
                    }
                    // find titleID from pathName
                    if((subStr.Length !=1) && (subStr.Length != 0))
                    {
                        int        titleIDStartPos = subStr.IndexOf(@"/") + 1;
                        string    tIDStr = subStr.Substring(titleIDStartPos);
                        int        len = tIDStr.IndexOf(@"/");
                        if(len > 0)
                        {
                            string tempid = "";
                            foreach (char c in tIDStr.Substring(0, len))
                            {
                                if (Char.IsLetterOrDigit(c))
                                {
                                    tempid += c;
                                }
                            }
                            uint    tID = (uint)Int32.Parse(tempid, NumberStyles.AllowHexSpecifier);
                            this.uiTitleId = this.Slot.titleId = tID;
                        }
                    }
                    break;
                case "ServiceAddr":
                    // this is a dataCenter WriteFile request, needs to use HTTPAuthData header
                    ulong    requestId = (ulong)RandGen.NextDouble() * 0xffffffffffffffff;
                    uint    titleID = this.uiTitleId;
                    byte [] addr = Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage_int).Address.GetAddressBytes();
                    uint ip = StorUtil.ByteArrayToUInt(addr);
                    HTTPAuthData authData = new HTTPAuthData((ushort) Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage_int).Port,
                        ip,requestId,0,titleID,(uint)XOService.Storage,0);

                    authData.dwTitleVersion = this.uiTitleVersion;
                    // other authData info: userPUID,xboxPUID,bCountryID is already 0 by default,
                    // so no need to specify here.
                    this.CustomHeader = HTTPAuthData.HTTP_HEADER_AUTH_DATA + ":" +
                        authData.GetBase64EncodedString() + "\r\n";

                    this.accessToken.writeAT.signature = null;
                    this.accessToken.writeAT.signatureLen = 0;
                    //Tsunami: game clips removeFile and GlobalTitleStorage write/remove
                    //will come from internal tools:33842
                    this.accessToken.baseAT.serviceId = (uint)XOService.Storage;
                    this.accessToken.baseAT.userPuid = 0;
                    this.accessToken.baseAT.xboxPuid = 0;
                    this.bUserCountryId = 0;
                    break;
                case "Team":
                    // find titleID and teamPUID from pathName
                    ulong    []teamPUIDList = new ulong[1];
                    startPos = pathName.IndexOf("u:");
                    ulong    userpuid = 0;
                    if(startPos != -1)
                    {
                        subStr = pathName.Substring(startPos);
                        int teamPUIDEndPos = subStr.IndexOf(@"/")-1;
                        int teamPUIDLen = teamPUIDEndPos - 2+1;
                        teamPUIDList[0] = (ulong)Int64.Parse(StorUtil.LettersAndDigitsFromString(
                            subStr.Substring(2,teamPUIDLen)),NumberStyles.AllowHexSpecifier);
                        int titleIDStartPos = subStr.IndexOf(@"/") + 1;
                        string tIDStr = subStr.Substring(titleIDStartPos);
                        int len = tIDStr.IndexOf(@"/");
                        uint tiID = (uint)Int32.Parse(tIDStr.Substring(0,len),NumberStyles.AllowHexSpecifier);
                        this.uiTitleId = this.Slot.titleId = tiID;
                        // get userpuid
                        int useridstartpos = tIDStr.IndexOf(@"/")+1;
                        string useridstr = tIDStr.Substring(useridstartpos);
                        int useridlen = useridstr.IndexOf(@"/");
                        userpuid = (ulong)Int64.Parse(StorUtil.LettersAndDigitsFromString(
                            useridstr.Substring(0,useridlen)),NumberStyles.AllowHexSpecifier);
                    }
                    // team tickets is requred
                    this.accessToken.baseAT.flags = 1;
                    this.accessToken.writeAT.signature = null;
                    this.accessToken.writeAT.signatureLen = 0;
                    // append team tickets at the end of request
                    byte []key    = new byte[16];
                    RandGen.NextBytes(key);
                    this.Slot.userPuid0 = this.accessToken.baseAT.userPuid = userpuid;
                    this.Slot.SetKey(key);
                    break;
                default:
                    break;
            }
        }
        /// <summary>
        /// connect to STDB to check columns that cannot be checked by ReadFileResponse
        /// </summary>
        /// <returns></returns>
        public bool Verify()
        {
            int         r_domainId = -1, r_keyType = -1;
            long        r_keyValue = -1;    //or ULONG????
            string      r_vcName = "", fileName = "";
            long        r_ExpirationDate = 0, r_CreateDate = 0;
            byte[]      r_ClientbinHash = new byte[Constants.sizeHash];    //blobdata hash; 20byte
            long        keyValue = 0;

            // 1. we need to use userPUID in the sql statement; thus we have the signed/unsigned headache
            // 2. we need to use the userPUID in pathName in the where clause
            // except for GlobalStorage, other types of storage uses userPUID as partition key
            int            startPos = this.accessToken.baseAT.pathName.IndexOf("u:");
            if(startPos != -1)
            {
                string        subStr = this.accessToken.baseAT.pathName.Substring(startPos+2);
                StringBuilder    temp = new StringBuilder();
                for (int i = 0; i < subStr.IndexOf(@"/"); i++)
                    temp.Append(subStr[i]);
                keyValue = Int64.Parse(temp.ToString(),NumberStyles.AllowHexSpecifier);
                startPos = subStr.IndexOf(@"/");
                fileName    = subStr.Substring(startPos);
            }

            // identify which storage domain for this request
            uint    domainID = 0, keyType = 0;
            string pathName = this.accessToken.baseAT.pathName;
            if(pathName.StartsWith(@"//stats"))
            {
                domainID = (uint)Constants.StorageDomain.Stats;
                keyType = (uint)Constants.IdType.UserId;
            }
			else if(pathName.StartsWith(@"//xestats"))
			{
				domainID = (uint)Constants.StorageDomain.xestats;
				keyType = (uint)Constants.IdType.UserId;
			}
			else if(pathName.StartsWith(@"//global"))
			{
				// CrossTitle storage is partitioned based on TitleID:
				// //global/t:ffed0001/ach/1/1
				startPos = this.accessToken.baseAT.pathName.IndexOf("t:");
				if(startPos != -1)
				{
                    string subStr = this.accessToken.baseAT.pathName.Substring(startPos + 2);
                    keyValue = Int64.Parse(subStr.Substring(0, subStr.IndexOf('/')), NumberStyles.AllowHexSpecifier);
                    fileName = subStr.Substring(subStr.IndexOf('/'));
					/*string        subStr = this.accessToken.baseAT.pathName.Substring(startPos+2);
					StringBuilder    temp = new StringBuilder();
					for (int i = 0; i < subStr.IndexOf(@"/"); i++)
						temp.Append(subStr[i]);
					keyValue = Int64.Parse(temp.ToString(),NumberStyles.AllowHexSpecifier);
					startPos = subStr.IndexOf(@"/");
					fileName    = subStr.Substring(startPos);*/
				}
				domainID = (uint)Constants.StorageDomain.global;
				keyType = (uint)Constants.IdType.TitleId;
			}
			else if(pathName.StartsWith(@"//title"))
			{
				// GlobalTitle Storage request is partitioned based on titleID
                startPos = this.accessToken.baseAT.pathName.IndexOf("t:");
				if(startPos != -1)
				{
					string subStr = this.accessToken.baseAT.pathName.Substring(startPos+2);
                    keyValue = Int64.Parse(subStr.Substring(0, subStr.IndexOf('/')), NumberStyles.AllowHexSpecifier);
                    fileName = subStr.Substring(subStr.LastIndexOf('/'));
                    /*  // ugh...
					StringBuilder    temp = new StringBuilder();
					for (int i = 0; i < subStr.IndexOf(@"/"); i++)
						temp.Append(subStr[i]);
					keyValue = Int64.Parse(temp.ToString(),NumberStyles.AllowHexSpecifier);
					startPos = this.accessToken.baseAT.pathName.LastIndexOf("/");
					fileName    = this.accessToken.baseAT.pathName.Substring(startPos);
                     */
				}
				domainID = (uint)Constants.StorageDomain.Title;
				keyType = (uint)Constants.IdType.TitleId;
			}
			else if(pathName.StartsWith(@"//tuser"))
			{
				domainID = (uint)Constants.StorageDomain.tuser;
				keyType = (uint)Constants.IdType.UserId;
			}
			else if(pathName.StartsWith(@"//msg"))
			{
				domainID = (uint)Constants.StorageDomain.msg;
				keyType = (uint)Constants.IdType.UserId;
			}
			else if(pathName.StartsWith(@"//tteam"))
			{
				domainID = (uint)Constants.StorageDomain.tteam;
				keyType = (uint)Constants.IdType.UserId;
			}
			else
			{
				Global.RO.Warn("Nonexistent db"+pathName);
				return false;
			}

            bool        found = false;
			/*  // removed since we are using webstore 
            string	it;
			if(pathName.StartsWith(@"//msg"))
				it = Interface.msgdb;
			else
				it = Interface.storedb;
            */

            // Change to use WebStore instead of relying on the interface since storedb isn't used
            // Get the webstore app...
            Database.Npdb npdb = new ServerTestFramework.Database.Npdb();
            npdb.ConnectToServer();
            string query = "SELECT vc_webstore_app FROM t_storage_domains WHERE i_domain_id=" + domainID.ToString() + " AND vc_environment ='"+ Config.Environment + "'";
            Global.RO.Debug("Executing query against NPDB to get storage webstore app:" + query);
            object webstoreApp = npdb.ExecuteScalar(query);
            if (webstoreApp == null)
            {
                query = "SELECT vc_webstore_app FROM t_storage_domains WHERE i_domain_id=" + domainID.ToString() + " AND vc_environment ='ALL'";
                Global.RO.Debug("Executing query against NPDB to get storage webstore app:" + query);
                webstoreApp = npdb.ExecuteScalar(query);
            }
            Global.RO.Debug("Result Application: " + webstoreApp.ToString());
            npdb.Close();

            // set the new query...
            query = @"SELECT f.i_domain_id, f.i_key_type, f.bi_key_value,
                                f.vc_name, f.dt_expires, f.dt_created, f.bin_client_hash
                                FROM t_files f INNER JOIN t_blobs b ON f.uid_blob=b.uid_blob
                                WHERE f.bi_key_value=" + keyValue +
                                @" AND f.vc_name='" + fileName + @"'";

            // Query webstore for the rows and populate data
            using (WSClient ws = new WSClient(webstoreApp.ToString(), CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.Partition = WstCommand.AnyPartition;
                ws.SetHashVal(keyValue);
                ws.CommandSql = query;

                using (WstDataReader r = ws.Execute())
                {
                    while (r.Read())
                    {
                        {
                            found = true;
                            r_domainId = r.GetInt32(0);
                            r_keyType = r.GetInt32(1);
                            r_keyValue = r.GetInt64(2);
                            r_vcName = r.GetString(3);
                            r_ExpirationDate = r.GetDateTime(4).ToFileTimeUtc();
                            r_CreateDate = r.GetDateTime(5).ToFileTimeUtc();
                            r.GetBytes(6, 0, r_ClientbinHash, 0, Constants.sizeHash);
                        }
                    }
                    r.Close();
                }
            }
           
            /*  // Removed for the WS lookup above
            foreach (IPEndPoint server in Global.XEnv.GetInterface(it))
            {
                found = false;
                // connect to the db
                string myConnStr = "Data Source=" +server.Address.ToString()+ @";Database=" + dbName +
                    @";Trusted_Connection=true";
                SqlConnection    mySqlConn;
                mySqlConn =  new SqlConnection(myConnStr);

                // get the row according to vc_name,domain_id, key_type and key_value
                string    myQuery = @"SELECT f.i_domain_id, f.i_key_type, f.bi_key_value,
                                f.vc_name, f.dt_expires, f.dt_created, f.bin_client_hash
                                FROM t_files f INNER JOIN t_blobs b ON f.uid_blob=b.uid_blob
                                WHERE f.bi_key_value=" + keyValue +
                    @" AND f.vc_name='" +fileName + @"'";

                SqlCommand        myCommand = new SqlCommand(myQuery, mySqlConn);
                myCommand.Connection.Open();
                SqlDataReader    myReader = myCommand.ExecuteReader();
                while (myReader.Read())
                {
                    found = true;
                    r_domainId = myReader.GetInt32(0);
                    r_keyType = myReader.GetInt32(1);
                    r_keyValue = myReader.GetInt64(2);
                    r_vcName = myReader.GetString(3);
                    r_ExpirationDate = myReader.GetDateTime(4).ToFileTimeUtc();
                    r_CreateDate = myReader.GetDateTime(5).ToFileTimeUtc();
                    myReader.GetBytes(6,0,r_ClientbinHash,0,Constants.sizeHash);
                }
                myReader.Close();
                myCommand.Connection.Close();
                if(found)
                    break;
            }
            */
            if(found)
            {
                // check if they are the values that passed in
                if(r_domainId != domainID || r_keyType != keyType)
                    return false;
                if(r_keyValue != keyValue)
                {
                    Global.RO.Warn("The bi_key_value in t_files is not set correctly!");
                    return false;
                }
                if(r_vcName != fileName)
                {
                    Global.RO.Warn("The vc_name in t_files is not set correctly!");
                    return false;
                }
                for(int i = 0; i < Constants.sizeHash; i++)
                    if(r_ClientbinHash[i] != this.blobHash[i])
                    {
                        Global.RO.Warn("The bin_client_Hash in t_files is not set correctly!");
                        return false;
                    }
                // time difference that within second is tolerable
                long    expDate = this.accessToken.writeAT.fileExpirationDate;
                // 0 is a special case
                // If the fileExpirationDate is 0 it will default to the value above
                // UNLESS there is an override in i_default_expiry_in_days in npdb.dbo.t_storage_domains for the current environment
                if (expDate == 0)
                {
                    npdb.ConnectToServer();
                    query = "SELECT i_default_expiry_in_days FROM t_storage_domains WHERE i_domain_id=" + domainID.ToString() + " AND vc_environment ='" + Config.Environment + "'";
                    Global.RO.Debug("Executing query against NPDB to get i_default_expiry_in_days:" + query);
                    object defaultExpirationInDays = npdb.ExecuteScalar(query);
                    if (defaultExpirationInDays == null)
                    {
                        query = "SELECT i_default_expiry_in_days FROM t_storage_domains WHERE i_domain_id=" + domainID.ToString() + " AND vc_environment ='ALL'";
                        Global.RO.Debug("Executing query against NPDB to get i_default_expiry_in_days:" + query);
                        defaultExpirationInDays = npdb.ExecuteScalar(query);
                    }
                    Global.RO.Debug("i_default_expiry_in_days: " + defaultExpirationInDays.ToString());
                    npdb.Close();

                    long defautlExpiry = 0;
                    if (long.TryParse(defaultExpirationInDays.ToString(), out defautlExpiry) == true)
                    {
                        expDate = System.DateTime.UtcNow.AddDays(defautlExpiry).ToFileTimeUtc();
                        //Global.RO.Debug("expDate: " + expDate.ToString());
                    }
                    else
                    {
                        if (defaultExpirationInDays.ToString().ToUpper() != "NULL")
                        {
                            Global.RO.Warn("Could not parse i_default_expiry_in_days as a long");
                        }
                        // if i_default_expiry_in_days = NULL then it defaults to Dec31,9999 in the p_file_put sproc
                        expDate = 2650466880000000000;    //Dec31,9999
                    }
                }

                Global.RO.Debug("expDate: " + System.DateTime.FromFileTimeUtc(expDate).ToString());
                Global.RO.Debug("r_ExpirationDate: " + System.DateTime.FromFileTimeUtc(r_ExpirationDate).ToString());
                if (((r_ExpirationDate > expDate) && ((r_ExpirationDate - expDate)/10000000>300))
                    ||((r_ExpirationDate < expDate) && ((expDate-r_ExpirationDate)/10000000>300)))
                {
                    Global.RO.Warn("The fileExpirationDate in t_files is not set correctly!");
                    return false;
                }
                // time difference is within 5 minute(300s) is tolerable
                long    createDate = DateTime.UtcNow.ToFileTimeUtc();
                if(((r_CreateDate > createDate) && ((r_CreateDate-createDate)/10000000>300))
                    ||((r_CreateDate < createDate) && ((createDate-r_CreateDate)/10000000>300)))
                {
                    Global.RO.Warn("The fileCreateDate in t_files is not set correctly!");
                    return false;
                }
                return true;
            }
            else
            {
                Global.RO.Warn("Couldn't find the file: keyvalue "+keyValue+"fileName "+fileName);
                return false;
            }
        }
        //    private bool getRowValues(XRLWriteFile req, out int refCount, out string uidBlob, out long readCount)
        private bool getRowValues(XRLWriteFile req, out int refCount, out string uidBlob)
        {
            refCount = 0;
            uidBlob = "";
            //readCount = 0;

            // extract the <path-part> from pathName
            uint domainID = 0;
            string fileName = "";
            long        keyValue    = 0;
            int startPos = req.accessToken.baseAT.pathName.IndexOf("u:");
            if(startPos != -1)
            {
                string        subStr = this.accessToken.baseAT.pathName.Substring(startPos+2);
                StringBuilder    temp = new StringBuilder();
                for (int i = 0; i < subStr.IndexOf(@"/"); i++)
                    temp.Append(subStr[i]);
                keyValue = Int64.Parse(temp.ToString(),NumberStyles.AllowHexSpecifier);
            }

            // identify which storage domain for this request
            string pathName = req.accessToken.baseAT.pathName.ToLower();
            if(pathName.StartsWith(@"//stats"))
            {
                domainID = (uint)Constants.StorageDomain.Stats;
                startPos = req.accessToken.baseAT.pathName.IndexOf("u:");
                string    subStr = "";
                if(startPos != -1)
                {
                    subStr = this.accessToken.baseAT.pathName.Substring(startPos+2);
                    fileName = subStr.Substring(subStr.IndexOf(@"/"));
                }
            }
            else if(pathName.StartsWith(@"//xestats"))
            {
                domainID = (uint)Constants.StorageDomain.xestats;
                startPos = req.accessToken.baseAT.pathName.IndexOf("u:");
                string    subStr = "";
                if(startPos != -1)
                {
                    subStr = this.accessToken.baseAT.pathName.Substring(startPos+2);
                    fileName = subStr.Substring(subStr.IndexOf(@"/"));
                }
            }
			else if(pathName.StartsWith(@"//global"))
			{
                domainID = (uint)Constants.StorageDomain.global;
                startPos = req.accessToken.baseAT.pathName.IndexOf("t:");
				string    subStr = "";
				if(startPos != -1)
				{
					subStr = this.accessToken.baseAT.pathName.Substring(startPos+2);
					StringBuilder    temp = new StringBuilder();
					for (int i = 0; i < subStr.IndexOf(@"/"); i++)
						temp.Append(subStr[i]);
					keyValue = Int64.Parse(temp.ToString(),NumberStyles.AllowHexSpecifier);
					fileName = subStr.Substring(subStr.IndexOf(@"/"));
				}
			}
            else if(pathName.StartsWith(@"//title"))
            {
                domainID = (uint)Constants.StorageDomain.Title;
                startPos = req.accessToken.baseAT.pathName.IndexOf("t:");
                string    subStr = "";
                if(startPos != -1)
                {
                    subStr = this.accessToken.baseAT.pathName.Substring(startPos+2);
                    StringBuilder    temp = new StringBuilder();
                    for (int i = 0; i < subStr.IndexOf(@"/"); i++)
                        temp.Append(subStr[i]);
                    keyValue = Int64.Parse(temp.ToString(),NumberStyles.AllowHexSpecifier);
                    fileName = subStr.Substring(subStr.IndexOf(@"/"));
                }
            }
            else if(pathName.StartsWith(@"//tuser"))
            {
                domainID = (uint)Constants.StorageDomain.tuser;
                startPos = req.accessToken.baseAT.pathName.IndexOf("u:");
                string    subStr = "";
                if(startPos != -1)
                {
                    subStr = this.accessToken.baseAT.pathName.Substring(startPos+2);
                    fileName = subStr.Substring(subStr.IndexOf(@"/"));
                }
            }
            else if(pathName.StartsWith(@"//msg"))
            {
                domainID = (uint)Constants.StorageDomain.msg;
                startPos = req.accessToken.baseAT.pathName.IndexOf("u:");
                string    subStr = "";
                if(startPos != -1)
                {
                    subStr = this.accessToken.baseAT.pathName.Substring(startPos+2);
                    fileName = subStr.Substring(subStr.IndexOf(@"/"));
                }
            }
            else if(pathName.StartsWith(@"//tteam"))
            {
                domainID = (uint)Constants.StorageDomain.tteam;
                startPos = req.accessToken.baseAT.pathName.IndexOf("u:");
                string    subStr = "";
                if(startPos != -1)
                {
                    subStr = this.accessToken.baseAT.pathName.Substring(startPos+2);
                    fileName = subStr.Substring(subStr.IndexOf(@"/"));
                }
            }
            else
            {
                Global.RO.Warn("Nonexistent db"+pathName);
                return false;
            }

            bool        found = false;

            // Change to use WebStore instead of relying on the interface since storedb isn't used
            // Get the webstore app...
            Database.Npdb npdb = new ServerTestFramework.Database.Npdb();
            npdb.ConnectToServer();
            string query = "SELECT vc_webstore_app FROM t_storage_domains WHERE i_domain_id=" + domainID.ToString() + " AND vc_environment ='"+ Config.Environment + "'";
            Global.RO.Debug("Executing query against NPDB to get storage webstore app:" + query);
            object webstoreApp = npdb.ExecuteScalar(query);
            if (webstoreApp == null)
            {
                query = "SELECT vc_webstore_app FROM t_storage_domains WHERE i_domain_id=" + domainID.ToString() + " AND vc_environment ='ALL'";
                Global.RO.Debug("Executing query against NPDB to get storage webstore app:" + query);
                webstoreApp = npdb.ExecuteScalar(query);
            }
            Global.RO.Debug("Result Application: " + webstoreApp.ToString());
            npdb.Close();

            // set the new query...
            query = @"SELECT cast (f.uid_blob as nvarchar(255)), b.i_ref_count
                            FROM t_files f INNER JOIN t_blobs b ON f.uid_blob=b.uid_blob
                            WHERE f.bi_key_value=" + keyValue +
                @" AND f.vc_name='" + fileName + @"'";

            // Query webstore for the rows and populate data
            using (WSClient ws = new WSClient(webstoreApp.ToString(), CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.Partition = WstCommand.AnyPartition;
                ws.SetHashVal(keyValue);
                ws.CommandSql = query;

                using (WstDataReader r = ws.Execute())
                {
                    while (r.Read())
                    {
                        {
                            found = true;
                            uidBlob = r.GetString(0);
                            refCount = r.GetInt32(1);
                        }
                    }
                    r.Close();
                }
            }
           
            /*  // Removed for the WS lookup above
            foreach (IPEndPoint server in Global.XEnv.GetInterface(it))
			{
				found = false;
				// connect to the db
				string myConnStr = "Data Source=" +server.Address.ToString()+ @";Database="+dbName+
					@";Trusted_Connection=true";
				SqlConnection    mySqlConn =  new SqlConnection(myConnStr);

				// bug 30215: removed bi_read_count that causes timeout
				//                string    myQuery = @"SELECT cast (f.uid_blob as nvarchar(255)), b.i_ref_count, f.bi_read_count
				//                                FROM t_files f INNER JOIN t_blobs b ON f.uid_blob=b.uid_blob
				//                                WHERE f.bi_key_value=" + keyValue +
				//                @" AND f.vc_name='" +fileName + @"'";
				string    myQuery = @"SELECT cast (f.uid_blob as nvarchar(255)), b.i_ref_count
                            FROM t_files f INNER JOIN t_blobs b ON f.uid_blob=b.uid_blob
                            WHERE f.bi_key_value=" + keyValue +
					@" AND f.vc_name='" +fileName + @"'";


				SqlCommand        myCommand = new SqlCommand(myQuery, mySqlConn);
				myCommand.Connection.Open();
				SqlDataReader    myReader = myCommand.ExecuteReader();
				while (myReader.Read())
				{
					found = true;
					uidBlob = myReader.GetString(0);
					refCount = myReader.GetInt32(1);
					//    readCount = myReader.GetInt64(2);
				}
				myReader.Close();
				myCommand.Connection.Close();
				if(found)
					break;
			}
            */

            if(found)
				return true;
			else
			{
				Global.RO.Warn("No query results returned");
				return false;
			}
        }

        // for Other stats w/attachments testing
        public bool CheckRefCount(XRLWriteFile    req2, int expectedCount, bool fCheckUid)
        {
            bool        fRet = false;
            int            refCount1 = 0, refCount2 = 0;
            //            long        readCount = 0;
            string        uidBlob1, uidBlob2;

            // get the row for req1 and req2
            if(getRowValues(this, out refCount1, out uidBlob1) && getRowValues(req2, out refCount2, out uidBlob2))
            {
                if(fCheckUid)
                {
                    if(!uidBlob1.Equals(uidBlob2))
                    {
                        Global.RO.Warn("the two rows found donot have same uidBlob");
                        return fRet;
                    }
                }
                if((refCount1 == expectedCount) && (refCount2 == expectedCount))
                    fRet = true;
                else
                    Global.RO.Warn("ref_count in t_blobs is wrong:" + refCount1.ToString() +"and"+refCount2.ToString());
            }
            else
                Global.RO.Warn("No row found for req1 or req2");
            return fRet;
        }
        // bi_read_count in t_files
        //        public bool CheckReadCount(XRLWriteFile    req2, long expectedCount)
        //        {
        //            bool        fRet = false;
        //            int            refCount = 0;
        //            long        readCount = 0;
        //            string        uidBlob;
        //
        //            if(getRowValues(this, out refCount, out uidBlob, out readCount))
        //            {
        //                if(readCount == expectedCount)
        //                    fRet = true;
        //                else
        //                    Global.RO.Warn("bi_read_count in t_files is wrong:"+readCount.ToString());
        //            }
        //            return fRet;
        //        }

        /// <summary>
        /// If this is a dataCenter WriteFile request,then we need append HTTPAuthData header
        /// </summary>
        /// <param name="endPoint"></param>
        /// <param name="reqStream"></param>
        /// <returns></returns>
        public override byte[] GenerateHttpHeader(IPEndPoint endPoint, MemoryStream reqStream)
        {
            if(this.CustomHeader == String.Empty)
                return base.GenerateHttpHeader(endPoint, reqStream);
            else    // there is HTTPAuthData Header
            {
                endPoint.Port = Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage_int).Port;
                return base.GenerateHttpHeader(endPoint, reqStream);
            }
        }
        /// <summary>
        /// send XRLWriteFile requests to the xstorage front door
        /// </summary>
        /// <param name="sServer"></param>
        /// <returns></returns>
        public override bool Execute()
        {
            MemoryStream reqStream = new MemoryStream( 512 );
            WriteStream( reqStream );

            bool uRet = false;
            bool bRet=InternalExecute(this.Server,reqStream);

            if( bRet )
            {
                if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
                {
                    uRet = true;
                }
            }
            return uRet;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\XRLReportBrokenLink.cs ===
using System;
using System.Text;
using System.IO;
using System.Net;
using xonline.common.service;

namespace ServerTestFramework.LiveService.Storage
{
	/// <summary>
	/// Summary description for XRLReportBrokenLink.
	/// </summary>
	public class XRLReportBrokenLink : XRLPayload
	{
		//dwStatusData codes: { STORAGE_BROKEN_LINK_GENERIC = 0 }
		public uint			uiStatusData;	// indicator of context relating to the failure
		public ushort		pathNameLen;	// length of the following full pathname, bytes
		public byte []		pathName;		// full pathname string, UTF-8 encoded

		protected override string GetServiceName()
		{
			return "/stfd/ReportBrokenLink.ashx";
		}
		public XRLReportBrokenLink()
		{
			ServiceId=XOService.Name_Resolution;
		}
		public XRLReportBrokenLink(string pathName)
		{
			ServiceId=XOService.Name_Resolution;
			this.uiStatusData = 0;//STORAGE_BROKEN_LINK_GENERIC;
			this.pathName = new ASCIIEncoding().GetBytes(pathName);
			this.pathNameLen = (ushort)pathName.Length;
		}
		public override bool Execute(IPEndPoint sServer)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet=InternalExecute(sServer,reqStream);

			if( bRet )
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					uRet = true;
				}
			}
			return uRet;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\XRLReadFile.cs ===
using System;
using System.Net;
using System.IO;
using System.Collections;
using System.Security.Cryptography;
using System.Globalization;
using ServerTestFramework.LiveService.Presence;

using xonline.common.config;
using xonline.common.service;

namespace ServerTestFramework.LiveService.Storage
{
	/// <summary>
	/// This class is for download a file from storage database
	/// </summary>
	public class XRLReadFile : XRLPayload
	{
		public MyReadFileToken  accessToken;
		public uint         uiTitleId;
		public uint         uiTitleVersion;
		public byte         bUserCountryId;
		public uint         uiRangeStart;
		public uint         uiRangeEnd;
		public long         lIfModifiedSinceDate;      

		protected override string GetServiceName()
		{
			return "/stfd/readfile.ashx";
		}

		private void setConstructor()
		{
			uint	randomTitleId = (uint)new Random().Next();
			uint	randomTitleVersion = (uint)new Random().Next();
			uint	randomUserCountryId = (byte)new Random().Next(2^8 - 1);
			ulong	randomUserPUID = ((ulong)((new Random().NextDouble()) * 0xffffffffffffffff) & Auth.SgClient.k_CounterPuidMask) | Auth.SgClient.k_UserPuidMask;
            ulong randomXBoxPUID = ((ulong)((new Random().NextDouble()) * 0xffffffffffffffff) & Auth.SgClient.k_CounterPuidMask) | Auth.SgClient.k_XenonMachinePuidMask;
			ulong	randomPartitionKeyValue = (ulong)((new Random((int)randomUserCountryId).NextDouble()) * 0xffffffffffffffff);
			
			ServiceId=XOService.Storage;

			string pathName = "//stats."+randomTitleId.ToString("x")
				+ "/u:" + randomPartitionKeyValue.ToString("x") + "/"
				+ randomTitleId.ToString("x")
				+ Guid.NewGuid().ToString();
			
			accessToken	 = new MyReadFileToken();
			accessToken.baseAT.flags = 0; 
			accessToken.baseAT.operation = (ushort)Constants.Operation.FileRead;
			accessToken.baseAT.pathName = pathName;
			accessToken.baseAT.pathNameLen = (ushort)pathName.Length;
			accessToken.baseAT.serviceId = (uint)XOService.Stats;
			accessToken.baseAT.userPuid = randomUserPUID;
			accessToken.baseAT.version = Constants.accessTokenVersion;
			accessToken.baseAT.xboxPuid = randomXBoxPUID;
			accessToken.readAT.tokenExpirationDate = (long)System.DateTime.UtcNow.AddYears(1).ToFileTimeUtc();
			accessToken.readAT.signatureLen = 0;
			accessToken.readAT.signature = null;
			
			this.uiTitleId = randomTitleId;
			this.uiTitleVersion = randomTitleVersion;
			this.bUserCountryId = (byte)randomUserCountryId;

			// TODO: for stats w/attachments, the following three fields are all 0s
			this.uiRangeStart = 0;
			this.uiRangeEnd = 0;
			this.lIfModifiedSinceDate = 0;

			this.ServiceId = XOService.Storage;

			// set up SGAuth field
			this.ManualSlotSetup = true;
			this.Slot.machinePuid = accessToken.baseAT.xboxPuid;
			this.Slot.userPuid0 = accessToken.baseAT.userPuid;
			this.Slot.titleId = this.uiTitleId;
			this.Slot.titleVersion = this.uiTitleVersion;
			this.Slot.userFlag0 = (uint)this.bUserCountryId <<8;
			this.Slot.ClearServices();
			this.Slot.AddService(XOService.Storage);
		}
		/// <summary>
		/// default constructor for XRLReadFile
		/// normally will be used for negative test cases
		/// </summary>
		public XRLReadFile()
		{
			setConstructor();
		}
		/// <summary>
		/// XRLReadFile constructor that takes one parameter
		/// </summary>
		/// <param name="pathName">pathName of the file that will be downloaded</param>
		public XRLReadFile(string pathName)
		{
			setConstructor();
			this.accessToken.baseAT.pathName = pathName;
			this.accessToken.baseAT.pathNameLen = (ushort)pathName.Length;
			if(pathName.IndexOf("tteam") != -1)
				// this is a team request; permission type is "Team";
				// need to do something (Wave 3)
			{
				// find titleID and teamPUID and userPUID from pathName
				ulong	[]teamPUIDList = new ulong[1];
				int startPos = pathName.IndexOf("u:");
				if(startPos != -1)
				{
					string subStr = pathName.Substring(startPos);
					int teamPUIDEndPos = subStr.IndexOf(@"/")-1;
					int teamPUIDLen = teamPUIDEndPos - 2+1;
                    teamPUIDList[0] = (ulong)Int64.Parse(StorUtil.LettersAndDigitsFromString(
                        subStr.Substring(2,teamPUIDLen)),NumberStyles.AllowHexSpecifier);
					int titleIDStartPos = subStr.IndexOf(@"/") + 1;
					string tIDStr = subStr.Substring(titleIDStartPos);
					int len = tIDStr.IndexOf(@"/");
					uint tiID = (uint)Int32.Parse(tIDStr.Substring(0,len),NumberStyles.AllowHexSpecifier);
					this.uiTitleId = this.Slot.titleId = tiID;
				}
				// team tickets is requred
				this.accessToken.baseAT.flags = 1;
				// append team tickets at the end of request
				byte []key	= new byte[16];
				new Random().NextBytes(key);
				ulong	userPUID = this.accessToken.baseAT.userPuid;
				this.Slot.SetKey(key);
			}
			// else this is a ReadFile requests that permission is "All", do nothing
		}

        /// <summary>
        /// Send XRLReadFile requests to the xstorage front door
        /// </summary>
        /// <returns></returns>
        public bool Execute(out XRLReadFileResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage), out Response);
        }

		/// <summary>
		/// send XRLReadFile http request to storage front door and get the response back
		/// </summary>
		/// <param name="sServer">Storage front door</param>
		/// <param name="Response">XRLReadFile response</param>
		/// <returns></returns>
		public bool Execute(IPEndPoint sServer, out XRLReadFileResponse Response)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet=InternalExecute(sServer,reqStream);
			
			Response = null;
			if( bRet )
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					Response = new XRLReadFileResponse();
					MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
					Response.ReadStream(respBuff);
					uRet = true;
				}
			}
			return uRet;
		}
		/// <summary>
		/// During stress, I found out it spend lots of time in deserializing when reading response
		/// since stress doesn't care the response, we will just ignore it for stress tests.
		/// </summary>
		/// <param name="sServer"></param>
		/// <param name="Response"></param>
		/// <returns></returns>
		public bool Execute(bool stress, IPEndPoint sServer, out XRLReadFileResponse Response)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet=InternalExecute(sServer,reqStream);
			
			Response = null;
			if( bRet)
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					if(!stress)
					{
						Response = new XRLReadFileResponse();
						MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
						Response.ReadStream(respBuff);
						uRet = true;
					}
					else
					{
						uRet = true;
					}
				}
			}
			return uRet;
		}
	}
	/// <summary>
	/// This class is for XRLReadFileResponse
	/// </summary>
	public class XRLReadFileResponse : XRLPayload
	{
		public uint         uiTitleId;
		public uint         uiTitleVersion;
		public ulong        ulUserPuid;
		public byte         bUserCountryId;
		public ulong        ulXboxPuid;
		public byte         bCompressionType;
		public uint         uiContentType;
		[XRLPayloadFld(ArraySize=Constants.sizeSignature)]
		public byte[]       blobSignature;
		public uint         uiBlobSizeUncompressed;
		public long         lCreationDate;
		public ushort       attributesLen;
		public uint         blobDataLen;
		public byte[]       attributes;
		public byte[]		blobData;

		/// <summary>
		/// Compare the readFile response with the writeFile request;
		/// This method can be used to check if all columns are set up correctly
		/// in the database for upload file request
		/// </summary>
		/// <param name="other">requests that upload the file</param>
		/// <returns></returns>
		public bool Compare(XRLWriteFile	other)
		{
			if(other.uiTitleId != uiTitleId)
			{
				Global.RO.Warn("TitleID in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.uiTitleVersion != uiTitleVersion)
			{
				Global.RO.Warn("TitleVersion in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.accessToken.baseAT.userPuid != ulUserPuid)
			{
				Global.RO.Warn("OwerPUID in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.bUserCountryId != bUserCountryId)
			{
				Global.RO.Warn("OwerCountryID in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.accessToken.baseAT.xboxPuid != ulXboxPuid)
			{
				Global.RO.Warn("OwnerXBoxPUID in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
//			if(other.bCompressionType != bCompressionType)
//			{
//				Global.RO.Warn("CompressionType in the ReadFileResponse does not match the one in WriteFile Requests");
//				return false;
//			}
			// TODO: 27731
			if(other.uiContentType != uiContentType)
			{
				Global.RO.Warn("ContentType in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			for(int i = 0; i < Constants.sizeSignature; i++)
				if(other.blobSignature[i] != blobSignature[i])
				{
					Global.RO.Warn("blobSignature in the ReadFileResponse does not match the one in WriteFile Requests");
					return false;
				}
			if(other.blobDataLen != uiBlobSizeUncompressed)
			{
				Global.RO.Warn("UncompressedFileSize in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			//TODO:???? lCreationDate
			if(other.attributesLen != attributesLen)
			{
				Global.RO.Warn("AttributesLen in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.uiBlobSizeCompressed != blobDataLen)
			{
				Global.RO.Warn("CompressedFileSize in the ReadFileResponse does not match the one in WriteFile Requests");
				return false;
			}
			if(other.attributes != null)
			{
				if(attributes != null)
				{
					for(int i = 0; i < other.attributesLen; i++)
						if(other.attributes[i] != attributes[i])
						{
							Global.RO.Warn("Attributes in the ReadFileResponse does not match the one in WriteFile Requests");
							return false;
						}
				}
				else
				{
					Global.RO.Warn("No Attributes returned in the ReadFileResponse");
					return false;
				}
			}
			// TODO: for April release, since no compression is done we can compare the compressed
			// data returned in ReadFile response with the noncompressed data that passed in the writeFile request
			if(other.blobData != null)
			{
				if(blobData != null)
				{
					for(int i = 0; i < other.blobDataLen; i++)
						if(other.blobData[i] != blobData[i])
						{
							Global.RO.Warn("BlobData in the ReadFileResponse does not match the one in WriteFile Requests");
							return false;
						}
				}
				else 
				{
					Global.RO.Warn("No BlobData returned in the ReadFileResponse");
					return false;
				}
			}
			return true;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\BlobTableClient.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.StorageClient;

using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    /// <summary>
    /// This class is used to retrieve or upload table data to Azure Storage
    /// </summary>
    public class BlobTableClient : TableClient
    {
        private BlobTableContext _blobContext;

        public BlobTableClient()
        {
        }

        public BlobTableClient(string storageAccount, string storageKey, string cloudBaseAddress)
            : base(storageAccount, storageKey, cloudBaseAddress)
        {
        }

        public BlobTableClient(string accessToken, string cloudBaseAddress)
            : base(accessToken, cloudBaseAddress)
        {
        }

        public BlobTableClient(StorageCredentials storageCredentials, string cloudBaseAddress)
            : base(storageCredentials, cloudBaseAddress)
        {
        }

        public BlobTableClient(StorageAccountInformation storageAccountInformation)
            : base(storageAccountInformation.StorageAccount, storageAccountInformation.StorageKey, storageAccountInformation.CloudBaseAddress)
        {
        }

        protected override void InitializeClient()
        {
            _tableClient = new CloudTableClient(_tableBaseAddress.AbsoluteUri, _storageCredentials);

            _blobContext = new BlobTableContext(
                _tableBaseAddress.AbsoluteUri,
                _storageCredentials);

            _blobContext.RetryPolicy = RetryPolicies.Retry(5, TimeSpan.FromMinutes(1));
        }

        public void CreateIfNotExist()
        {
            if (!_tableClient.DoesTableExist("BlobTableEntry"))
            {
                CloudTableClient.CreateTablesFromModel(
                    typeof(BlobTableContext),
                    _tableBaseAddress.AbsoluteUri,
                    _storageCredentials);
            }
        }

        public void ReCreate()
        {
            _tableClient.DeleteTableIfExist("BlobTableEntry");

            CloudTableClient.CreateTablesFromModel(
                typeof(BlobTableContext),
                _tableBaseAddress.AbsoluteUri,
                _storageCredentials);
        }

        public static string GetRowKey(Guid rowKeyGuid)
        {
            string rowKey = rowKeyGuid.ToString("N");

            return rowKey;
        }

        public static Guid GetGuidFromRowKey(string rowKey)
        {
            Guid rowKeyGuid = new Guid(rowKey);

            return rowKeyGuid;
        }

        /// <summary>
        /// Single location to use for calculating the Blob Path. If the Blob path changes in design
        /// it only needs to be changed here to avoid massive test updates. All tests should use these
        /// functions rather than calculating the path themselves
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="transactionGuid"></param>
        /// <returns>String BlobPath for BlobStorage</returns>
        public static string GetStoragePath(ulong xuid, string fileName, Guid transactionGuid)
        {
            return GetStoragePath(xuid, fileName, transactionGuid.ToString("N"));
        }

        public static string GetStoragePath(ulong xuid, string fileName, string transactionId)
        {
            return GetStoragePath(xuid.ToString(BlobTableEntry.XuidFormatString), fileName, transactionId);
        }

        public static string GetStoragePath(string xuidString, string fileName, string transactionId)
        {
            string storagePath = string.Format("{0}/{1}.{2}", xuidString, fileName, transactionId);

            return storagePath;
        }

        /// <summary>
        /// Generates an SAS query URL that is equivalent to what the Client FrontDoor would return. 
        /// This URL can be used to directly download a file without needing any managed code
        /// </summary>
        /// <param name="storageUri"></param>
        /// <param name="container"></param>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="transactionId"></param>
        /// <param name="signature"></param>
        /// <returns>URL for direct file access using the provided SAS signature</returns>
        public static string GetSASUrl(string storageUri, string container, ulong xuid, string fileName, string transactionId, string signature)
        {
            return GetSASUrl(storageUri, container, xuid.ToString(BlobTableEntry.XuidFormatString), fileName, transactionId, signature);
        }

        public static string GetSASUrl(string storageUri, string container, string xuid, string fileName, string transactionId, string signature)
        {
            string storagePath = GetStoragePath(xuid, System.Web.HttpUtility.UrlEncode(fileName), transactionId); 
            string sasFileUrl = String.Format("{0}/{1}/{2}{3}",
                storageUri, container, storagePath, signature);

            return sasFileUrl;
        }

        /// <summary>
        /// Wrapper function to protect agains server exceptions. If the table has only been created with no entries
        /// the first Select will throw rather than return a null/empty list. Catch that error and return an empty list
        /// </summary>
        /// <param name="blobEnum">IEnumerable parameter result from query</param>
        /// <returns>IEnumerable.ToList()</returns>
        private static List<BlobTableEntry> GetListFromIEnumerable(IEnumerable<BlobTableEntry> blobEnum)
        {
            List<BlobTableEntry> blobList;
            try
            {
                blobList = blobEnum.ToList();
            }
            catch
            {
                blobList = new List<BlobTableEntry>();
            }

            return blobList;
        }

        public List<BlobTableEntry> Select()
        {
            var allResults = (from p in _blobContext.BlobTableEntry select p).AsTableServiceQuery();

            return GetListFromIEnumerable(allResults);
        }

        public List<BlobTableEntry> SelectBlob(string fileName)
        {
            var allResults = (from p in _blobContext.BlobTableEntry
                             where p.Filename == fileName
                             select p).AsTableServiceQuery();

            return GetListFromIEnumerable(allResults);
        }

        public List<BlobTableEntry> SelectBlob(ulong xuid, string rowKey)
        {
            var allResults = (from p in _blobContext.BlobTableEntry 
                             where p.PartitionKey == xuid.ToString(BlobTableEntry.XuidFormatString)
                                && p.RowKey == rowKey
                             select p).AsTableServiceQuery();

            return GetListFromIEnumerable(allResults);
        }

        public List<BlobTableEntry> SelectXuid(ulong xuid)
        {
            var allResults = (from p in _blobContext.BlobTableEntry
                             where p.PartitionKey == xuid.ToString(BlobTableEntry.XuidFormatString)
                             select p).AsTableServiceQuery();

            return GetListFromIEnumerable(allResults);
        }

        public List<BlobTableEntry> SelectTitle(uint titleid)
        {
            var allResults = (from p in _blobContext.BlobTableEntry
                             where p.TitleId == titleid
                             select p).AsTableServiceQuery();

            return GetListFromIEnumerable(allResults);
        }

        public void AddBlobTableEntry(BlobTableEntry entry)
        {
            _blobContext.AddObject("BlobTableEntry", entry);
            _blobContext.SaveChanges();
        }

        public void UpdateBlobTableEntry(BlobTableEntry entry)
        {
            _blobContext.UpdateObject(entry);
            _blobContext.SaveChanges();
        }

        public void DeleteBlobTableEntry(BlobTableEntry entry)
        {
            _blobContext.DeleteObject(entry);
            _blobContext.SaveChanges();
        }

        public void SafeDeleteBlobTableEntry(BlobTableEntry entry)
        {
            try
            {
                DeleteBlobTableEntry(entry);
            }
            catch (Exception ex)
            {
                Global.RO.Warn(ex.ToString());
            }
        }

        public void ClearTable()
        {
            _tableClient.DeleteTableIfExist("BlobTableEntry");
            do
            {
                System.Threading.Thread.Sleep(5000);
                try
                {
                    CloudTableClient.CreateTablesFromModel(
                        typeof(BlobTableContext),
                        _tableBaseAddress.AbsoluteUri,
                        _storageCredentials);
                }
                catch
                {
                }
            }
            while (!_tableClient.DoesTableExist("BlobTableEntry"));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\BlobClient.cs ===
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.IO;
using System.Security.Cryptography;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.StorageClient;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    /// <summary>
    /// This class is used to retrieve or upload a file to Azure Storage
    /// </summary>
    public class BlobClient
    {
        protected string _storageAccountName = "devstoreaccount1";
        protected string _storageKey = "Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==";
        protected StorageCredentials _storageCredentials;
        protected Uri _blobBaseAddress = new Uri("http://127.0.0.1:10000/devstoreaccount1");
        protected CloudBlobContainer _blobContainer;
        protected CloudBlobClient _blobClient;

        private BlobClient()
        {
        }

        public BlobClient(string storageAccount, string storageKey, string cloudBaseAddress)
        {
            _storageAccountName = storageAccount;
            _storageKey = storageKey;
            _storageCredentials = new StorageCredentialsAccountAndKey(_storageAccountName, _storageKey);
            _blobBaseAddress = new Uri(cloudBaseAddress);
            InitializeClient();
        }

        public BlobClient(string accessToken, string cloudBaseAddress)
        {
            _storageCredentials = new StorageCredentialsSharedAccessSignature(accessToken);
            _blobBaseAddress = new Uri(cloudBaseAddress);
            _blobClient = new CloudBlobClient(_blobBaseAddress, _storageCredentials);
            try
            {
                InitializeClient();
            }
            catch
            {
                //Access Token may fail to "ListContainers"
                BlobContainer = "fffe07d1";
            }
        }

        public BlobClient(StorageAccountInformation storageAccountInformation)
            : this(storageAccountInformation.StorageAccount, storageAccountInformation.StorageKey, storageAccountInformation.CloudBaseAddress)
        {
        }

        public BlobClient(string fullSASUrl)
        {
            Uri fullSASUri = new Uri(fullSASUrl);
            _storageCredentials = new StorageCredentialsSharedAccessSignature(GetSASSignatureFromSASUrl(fullSASUri));
            _blobBaseAddress = new Uri(GetCloudBaseAddressFromSASUrl(fullSASUri));
            //_blobBaseAddress = fullSASUri;
            _blobClient = new CloudBlobClient(_blobBaseAddress, _storageCredentials);
            BlobContainer = GetBlobContainerFromSASUrl(fullSASUri);
        }

        public BlobClient(Uri fullSASUri)
        {
            _storageCredentials = new StorageCredentialsSharedAccessSignature(GetSASSignatureFromSASUrl(fullSASUri));
            _blobBaseAddress = new Uri(GetCloudBaseAddressFromSASUrl(fullSASUri));
            _blobClient = new CloudBlobClient(_blobBaseAddress, _storageCredentials);
            BlobContainer = GetBlobContainerFromSASUrl(fullSASUri);
        }

        public BlobClient(StorageCredentials storageCredentials, string cloudBaseAddress)
        {
            _storageCredentials = storageCredentials;
            _blobBaseAddress = new Uri(cloudBaseAddress);
            InitializeClient();
        }

        protected void InitializeClient()
        {
            _blobClient = new CloudBlobClient(_blobBaseAddress, _storageCredentials);
            if (_blobContainer == null)
            {
                List<CloudBlobContainer> containerList = _blobClient.ListContainers().ToList<CloudBlobContainer>();
                if (containerList.Count > 0)
                {
                    _blobContainer = containerList[0];
                }
            }
            else
            {
                _blobContainer = _blobClient.GetContainerReference(BlobContainer);
            }
        }

        public string StorageAccount
        {
            //get { return _storageAccountName; }
            set
            {
                _storageAccountName = value;
                _storageCredentials = new StorageCredentialsAccountAndKey(_storageAccountName, _storageKey);
                InitializeClient();
            }
        }

        public string StorageKey
        {
            set
            {
                _storageKey = value;
                _storageCredentials = new StorageCredentialsAccountAndKey(_storageAccountName, _storageKey);
                InitializeClient();
            }
        }

        public string AccessToken
        {
            set
            {
                _storageCredentials = new StorageCredentialsSharedAccessSignature(value);
                InitializeClient();
            }
        }

        public string CloudBaseAddress
        {
            get { return _blobBaseAddress.AbsoluteUri; }
            set { _blobBaseAddress = new Uri(value); InitializeClient(); }
        }

        public StorageCredentials Credentials
        {
            get { return _storageCredentials; }
            set { _storageCredentials = value; InitializeClient(); }
        }

        public string BlobContainer
        {
            get { return _blobContainer.Name; }
            set
            {
                _blobContainer = _blobClient.GetContainerReference(value);
            }
        }

        #region MD5Hash
        public static string GetMD5HashString(byte[] inputBytes)
        {
            byte[] byteMD5 = GetMD5Hash(inputBytes);
            return Convert.ToBase64String(byteMD5);
        }

        public static string GetMD5HashString(string inputString)
        {
            byte[] byteMD5 = GetMD5Hash(inputString);
            return Convert.ToBase64String(byteMD5);
        }

        public static string GetMD5HashString(Stream inputStream)
        {
            byte[] byteMD5 = GetMD5Hash(inputStream);
            return Convert.ToBase64String(byteMD5);
        }

        public static byte[] GetMD5Hash(byte[] inputBytes)
        {
            MD5 md5Hasher = MD5.Create();
            byte[] byteMD5 = md5Hasher.ComputeHash(inputBytes);

            return byteMD5;
        }

        public static byte[] GetMD5Hash(string inputString)
        {
            MD5 md5Hasher = MD5.Create();
            byte[] byteMD5 = md5Hasher.ComputeHash(Encoding.Default.GetBytes(inputString));

            return byteMD5;
        }

        public static byte[] GetMD5Hash(Stream inputStream)
        {
            MD5 md5Hasher = MD5.Create();
            byte[] byteMD5 = md5Hasher.ComputeHash(inputStream);
            inputStream.Position = 0;

            return byteMD5;
        }
        #endregion

        #region SharedAccessSignature
        public static string GetCloudBaseAddressFromSASUrl(Uri sasUri)
        {
            StringBuilder cloudBaseAddress = new StringBuilder();

            cloudBaseAddress.AppendFormat("{0}://{1}/", sasUri.Scheme, sasUri.Authority);
            if ((sasUri.Segments.Length > 2) &&
                (sasUri.Segments[1] == "devstoreaccount1/"))
            {
                cloudBaseAddress.Append("devstoreaccount1");
            }
            return cloudBaseAddress.ToString();
        }

        public static string GetBlobContainerFromSASUrl(Uri sasUri)
        {
            string blobContainer = "";

            if ((sasUri.Segments.Length > 2) &&
                (sasUri.Segments[1] == "devstoreaccount1/"))
            {
                // AbsolutePath = /devstoreaccount1/Container/Xuid/FileName.TransactionId
                blobContainer = sasUri.Segments[2];
            }
            else
            {
                // AbsolutePath = /Container/Xuid/FileName.TransactionId
                // 1 initial slashes so the container is Segment[1]
                blobContainer = sasUri.Segments[1];
            }
            blobContainer = blobContainer.Trim(new char[1] { '/' });

            return blobContainer;
        }

        public static string GetSASSignatureFromSASUrl(Uri sasUri)
        {
            string sasSignature = sasUri.Query.Trim(new char[1] { '?' });

            return sasSignature;
        }
        #endregion

        public List<string> GetContainers()
        {
            List<string> containerNameList = new List<string>();

            List<CloudBlobContainer> containerList = _blobClient.ListContainers().ToList<CloudBlobContainer>();
            foreach (CloudBlobContainer blobContainer in containerList)
            {
                containerNameList.Add(blobContainer.Name);
            }

            return containerNameList;
        }

        public CloudBlobContainer CreateContainer(string containerName)
        {
            CloudBlobContainer blobContainer = _blobClient.GetContainerReference(containerName);
            blobContainer.CreateIfNotExist();

            return blobContainer;
        }

        public bool DeleteContainer(string containerName)
        {
            bool success = true;
            try
            {
                CloudBlobContainer blobContainer = _blobClient.GetContainerReference(containerName);
                blobContainer.Delete();
            }
            catch
            {
                success = false;
            }
            return success;
        }

        public List<string> GetBlobList()
        {
            return GetBlobList("");
        }

        public List<string> GetBlobList(string container, string rootPath)
        {
            this.BlobContainer = container;
            return GetBlobList(rootPath);
        }

        public List<string> GetBlobList(string rootPath)
        {
            List<string> fileNameList = new List<string>();
            string separator = BlobContainer + "/";

            List<IListBlobItem> blobList;
            if (string.IsNullOrEmpty(rootPath))
            {
                blobList = _blobContainer.ListBlobs().ToList<IListBlobItem>();
            }
            else
            {
                CloudBlobDirectory rootDirectory = _blobContainer.GetDirectoryReference(rootPath);
                blobList = rootDirectory.ListBlobs().ToList<IListBlobItem>();
            }
            foreach (IListBlobItem blob in blobList)
            {
                if (blob.GetType() != typeof (CloudBlockBlob)) continue;

                int splitIndex = blob.Uri.LocalPath.IndexOf(separator) + separator.Length;

                fileNameList.Add(blob.Uri.LocalPath.Substring(splitIndex));
            }

            return fileNameList;
        }

        public List<string> GetFolderList()
        {
            return GetFolderList("");
        }

        public List<string> GetFolderList(string container, string rootPath)
        {
            this.BlobContainer = container;
            return GetFolderList(rootPath);
        }

        public List<string> GetFolderList(string rootPath)
        {
            List<string> folderNameList = new List<string>();

            List<IListBlobItem> blobList;
            if(string.IsNullOrEmpty(rootPath))
            {
                blobList = _blobContainer.ListBlobs().ToList<IListBlobItem>();
            }
            else
            {
                CloudBlobDirectory rootDirectory = _blobContainer.GetDirectoryReference(rootPath);
                blobList = rootDirectory.ListBlobs().ToList<IListBlobItem>();
            }
            foreach (IListBlobItem blob in blobList)
            {
                if (blob.GetType() == typeof(CloudBlobDirectory))
                {
                    folderNameList.Add(blob.Uri.LocalPath);
                }
            }

            return folderNameList;
        }

        #region GetBlob APIs
        public Stream GetBlobAsStream(string container, string blobPath)
        {
            this.BlobContainer = container;
            return GetBlobAsStream(blobPath);
        }

        public Stream GetBlobAsStream(string blobPath)
        {
            MemoryStream blobStream = null;
            if (!string.IsNullOrEmpty(blobPath))
            {
                blobStream = new MemoryStream();
                CloudBlockBlob blobBlock = _blobContainer.GetBlockBlobReference(blobPath);
                blobBlock.DownloadToStream(blobStream);
                blobStream.Seek(0, SeekOrigin.Begin);
            }
            return blobStream;
        }

        public void GetBlobAsFile(string container, string blobPath, string downloadFilename)
        {
            this.BlobContainer = container;
            GetBlobAsFile(blobPath, downloadFilename);
        }

        public void GetBlobAsFile(string blobPath, string downloadFilename)
        {
            if (!string.IsNullOrEmpty(blobPath))
            {
                CloudBlockBlob blobBlock = _blobContainer.GetBlockBlobReference(blobPath);
                blobBlock.DownloadToFile(downloadFilename);
            }
        }

        public BlobAttributes GetBlobAttributes(string blobPath)
        {
            BlobAttributes blobAttributes = null;
            if (!string.IsNullOrEmpty(blobPath))
            {
                CloudBlockBlob blobBlock = _blobContainer.GetBlockBlobReference(blobPath);
                blobBlock.FetchAttributes();
                blobAttributes = blobBlock.Attributes;
            }
            return blobAttributes;
        }

        public BlobProperties GetBlobProperties(string blobPath)
        {
            BlobProperties blobProperties = null;
            if (!string.IsNullOrEmpty(blobPath))
            {
                CloudBlockBlob blobBlock = _blobContainer.GetBlockBlobReference(blobPath);
                blobBlock.FetchAttributes();
                blobProperties = blobBlock.Properties;
            }
            return blobProperties;
        }

        public string GetBlobMD5(string blobPath)
        {
            string blobMD5 = null;
            if (!string.IsNullOrEmpty(blobPath))
            {
                CloudBlockBlob blobBlock = _blobContainer.GetBlockBlobReference(blobPath);
                blobBlock.FetchAttributes();
                blobMD5 = blobBlock.Properties.ContentMD5;
            }
            return blobMD5;
        }
        #endregion

        #region PutBlob APIs
        public void PutBlob(string container, string blobPath, Stream uploadStream)
        {
            this.BlobContainer = container;
            PutBlob(blobPath, uploadStream);
        }

        public void PutBlob(string blobPath, Stream uploadStream)
        {
            PutBlob(blobPath, uploadStream, GetMD5HashString(uploadStream));
        }

        public void PutBlob(string blobPath, Stream uploadStream, string contentMD5)
        {
            if (!string.IsNullOrEmpty(blobPath))
            {
                CloudBlockBlob blobBlock = _blobContainer.GetBlockBlobReference(blobPath);
                blobBlock.Properties.ContentMD5 = contentMD5;
                blobBlock.UploadFromStream(uploadStream);
                uploadStream.Position = 0;
            }
        }

        public void PutBlob(string container, string blobPath, string fileName)
        {
            this.BlobContainer = container;
            PutBlob(blobPath, fileName);
        }

        public void PutBlob(string blobPath, string fileName)
        {
            if (!string.IsNullOrEmpty(blobPath))
            {
                CloudBlockBlob blobBlock = _blobContainer.GetBlockBlobReference(blobPath);
                blobBlock.UploadFile(fileName);
            }
        }
        #endregion

        #region DownloadBlockList APIs
        public List<ListBlockItem> DownloadBlockList(string container, string blobPath)
        {
            this.BlobContainer = container;
            return DownloadBlockList(blobPath, BlockListingFilter.All);
        }

        public List<ListBlockItem> DownloadBlockList(string container, string blobPath, BlockListingFilter blockFilter)
        {
            this.BlobContainer = container;
            return DownloadBlockList(blobPath, blockFilter);
        }

        public List<ListBlockItem> DownloadBlockList(string blobPath)
        {
            return DownloadBlockList(blobPath, BlockListingFilter.All);
        }

        public List<ListBlockItem> DownloadBlockList(string blobPath, BlockListingFilter blockFilter)
        {
            List<ListBlockItem> blockList = new List<ListBlockItem>();
            if (!string.IsNullOrEmpty(blobPath))
            {
                CloudBlockBlob blobBlock = _blobContainer.GetBlockBlobReference(blobPath);
                blockList = blobBlock.DownloadBlockList(blockFilter).ToList<ListBlockItem>();
            }

            return blockList;
        }
        #endregion

        #region PutBlockList APIs
        public void PutBlockList(string container, string blobPath, string blobMD5, List<string> blockList)
        {
            this.BlobContainer = container;
            PutBlockList(blobPath, blobMD5, blockList);
        }

        public void PutBlockList(string blobPath, string blobMD5, List<string> blockList)
        {
            // Not going to error check the blockList length in case we want to put an empty block list
            CloudBlockBlob blobBlock = _blobContainer.GetBlockBlobReference(blobPath);
            blobBlock.Properties.ContentMD5 = blobMD5;
            blobBlock.PutBlockList(blockList);
        }
        #endregion

        #region PutBlock APIs
        public void PutBlock(string blobPath, string blockID, Stream blockStream)
        {
            PutBlock(blobPath, blockID, GetMD5HashString(blockStream), blockStream);
        }

        public void PutBlock(string blobPath, string blockID, string blockMD5, Stream blockStream)
        {
            if (!string.IsNullOrEmpty(blobPath))
            {
                CloudBlockBlob blobBlock = _blobContainer.GetBlockBlobReference(blobPath);
                blobBlock.PutBlock(blockID, blockStream, blockMD5);
                blockStream.Position = 0;
            }
        }
        #endregion

        #region DeleteBlob APIs
        public bool DeleteBlob(string container, string blobPath)
        {
            this.BlobContainer = container;
            return DeleteBlob(blobPath);
        }

        public bool DeleteBlob(string blobPath)
        {
            if (!string.IsNullOrEmpty(blobPath))
            {
                CloudBlockBlob blobBlock = _blobContainer.GetBlockBlobReference(blobPath);
                return blobBlock.DeleteIfExists();
            }
            return false;
        }
        #endregion

        #region SetMetadata APIs

        public void SetMetadata(string container, string blobPath, NameValueCollection metadata)
        {
            BlobContainer = container;

            SetMetadata(blobPath, metadata);
        }

        public void SetMetadata(string blobPath, NameValueCollection metadata)
        {
            if(string.IsNullOrEmpty(blobPath) || metadata == null)
            {
                return;
            }

            CloudBlob blob = _blobContainer.GetBlobReference(blobPath);

            foreach(string key in metadata.AllKeys)
            {
                blob.Metadata[key] = metadata[key];
            }

            blob.SetMetadata();
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\XRLRemoveFile.cs ===
using System;
using System.Text;
using System.Globalization;
using System.IO;
using System.Net;
using ServerTestFramework.LiveService.Signature;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using xonline.common.config;
using xonline.common.service;
using xonline.common.protocol;
using System.Security.Cryptography;

namespace ServerTestFramework.LiveService.Storage
{
    /// <summary>
    /// This class is for delete a file from storage database
    /// </summary>
    public class XRLRemoveFile : XRLPayload
    {
        public MyRemoveFileToken    accessToken;
        public uint         uiTitleId;
        public uint         uiTitleVersion;

        protected override string GetServiceName()
        {
            return "/stfd/RemoveFile.ashx";
        }
        protected IPEndPoint stfd = new IPEndPoint(Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage).Address,
                                                    Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage).Port);

        /// <summary>
        /// Set or get Storage Front door
        /// </summary>
        public IPEndPoint Server
        {
            get {return stfd;}
            set {stfd = value;}
        }
        private void SetConstructor(string pathName, uint TitleID)
        {
            uint    randomTitleVersion = (uint)RandomEx.GlobalRandGen.Next();

            ulong randomUserPUID = (RandomEx.GlobalRandGen.NextUlong() & Auth.SgClient.k_CounterPuidMask) | Auth.SgClient.k_UserPuidMask;
            ulong randomXBoxPUID = (RandomEx.GlobalRandGen.NextUlong() & Auth.SgClient.k_CounterPuidMask) | Auth.SgClient.k_XenonMachinePuidMask;

            accessToken     = new MyRemoveFileToken();
            accessToken.baseAT.flags = 0;
            accessToken.baseAT.operation = (ushort)Constants.Operation.FileRemove;
            accessToken.baseAT.pathName = pathName;
            if(pathName != null)
                accessToken.baseAT.pathNameLen = (ushort)pathName.Length;
            else
                accessToken.baseAT.pathNameLen = 0;

            accessToken.baseAT.serviceId = (uint)XOService.Stats;
            accessToken.baseAT.userPuid = randomUserPUID;
            accessToken.baseAT.version = Constants.accessTokenVersion;
            accessToken.baseAT.xboxPuid = randomXBoxPUID;
            accessToken.removeAT.tokenExpirationDate = (long)System.DateTime.UtcNow.AddHours(1).ToFileTimeUtc();

            //need to resign the access Token
            byte[] signDataWithExtra = (byte[])accessToken;
            int sizeDataToSign = accessToken.baseAT.Size() + 8;//20 is tokenExp
            byte[] signData = new byte[sizeDataToSign];
            Array.Copy(signDataWithExtra, 0, signData, 0, sizeDataToSign);
            XSigSignature signature = new XSigSignature();
            signature.Initialize();
            signature._serviceId = (uint)XOService.Stats;

            SHA1 sha1 = new SHA1CryptoServiceProvider();
            signature.ComputeSignature(sha1.ComputeHash(signData));
            
            accessToken.removeAT.signature = (byte[])signature;
            accessToken.removeAT.signatureLen = Constants.sizeSignature;

            this.uiTitleId = TitleID;
            this.uiTitleVersion = randomTitleVersion;

            // we use setup SG slot manually, we won't use XRLPayld attribute at all
            this.ManualSlotSetup = true;
            this.Slot.machinePuid = accessToken.baseAT.xboxPuid;
            this.Slot.userPuid0 = accessToken.baseAT.userPuid;
            this.Slot.titleId = this.uiTitleId;
            this.Slot.titleVersion = this.uiTitleVersion;
            this.Slot.ClearServices();
            this.Slot.AddService(XOService.Storage);

            this.ServiceId=XOService.Storage;
        }
        /// <summary>
        /// XRLRemoveFile constructor that takes two parameters
        /// </summary>
        /// <param name="pathName">pathName of the file that need to be removed</param>
        /// <param name="TitleID">titleID of the file that need to be removed</param>
        public XRLRemoveFile(string pathName, uint TitleID, string permissionType)
        {
            SetConstructor(pathName, TitleID);
            int startPos = 0;
            string            subStr = "";
            StringBuilder    temp = new StringBuilder();
            if(pathName != null)
            {
                startPos = pathName.IndexOf("t:");
                if(startPos != -1)
                {
                    subStr = pathName.Substring(startPos + 2);
                    temp = new StringBuilder();
                    for (int i = 0; i < subStr.IndexOf(@"/"); i++)
                        temp.Append(subStr[i]);
                    this.uiTitleId = (uint)(Int32.Parse(temp.ToString(),NumberStyles.AllowHexSpecifier));
                    this.Slot.titleId = this.uiTitleId;
                }
            }
            ulong    requestId = 0;
            uint    ip = 0;
            byte [] addr;
            HTTPAuthData    authData;
            switch(permissionType)
            {
                case "All":
                    this.accessToken.removeAT.signature = null;
                    this.accessToken.removeAT.signatureLen = 0;
                    break;
                case "Owner":
                    this.accessToken.removeAT.signature = null;
                    this.accessToken.removeAT.signatureLen = 0;
                    this.accessToken.baseAT.serviceId = 0;
                    // owner means the userPUID in the pathName should be the same as AccessToken
                    if(pathName != null)
                    {
                        startPos = pathName.IndexOf("u:");
                        if(startPos != -1)
                        {
                            subStr = pathName.Substring(startPos+2);
                            temp = new StringBuilder();
                            for (int i = 0; i < subStr.IndexOf(@"/"); i++)
                                temp.Append(subStr[i]);
                            long userID = Int64.Parse(temp.ToString(),NumberStyles.AllowHexSpecifier);
                            this.accessToken.baseAT.userPuid= (ulong)userID;
                            this.Slot.userPuid0 = (ulong)userID;
                        }
                    }
                    break;
                case "ServiceAddr":
                    // this is a dataCenter RemoveFile request, needs to use HTTPAuthData header
                    requestId = (ulong)new Random().NextDouble() * 0xffffffffffffffff;
					addr = Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage_int).Address.GetAddressBytes();
					for(int i = 0; i < addr.Length; i++)
                        ip = (ip << 8) + addr[i];
                    authData = new HTTPAuthData((ushort) Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage_int).Port,
                        ip,requestId,0,this.uiTitleId,(uint)XOService.Storage,0);
                    authData.dwTitleVersion = this.uiTitleVersion;
                    this.CustomHeader = HTTPAuthData.HTTP_HEADER_AUTH_DATA + ":" +
                        authData.GetBase64EncodedString() + "\r\n";

                    this.accessToken.removeAT.signature = null;
                    this.accessToken.removeAT.signatureLen = 0;
                    //for game clips and GlobalTitleStorage, request comes from tool
					if(pathName != null)
					{
						if(pathName.IndexOf("title") != -1)
						{
							this.accessToken.baseAT.serviceId = (uint)XOService.Storage;
						}
						else if(pathName.StartsWith("//msg"))
						{
							this.accessToken.baseAT.serviceId = 0;
						}
					}
                    this.accessToken.baseAT.userPuid = 0;
                    this.accessToken.baseAT.xboxPuid = 0;
                    break;
                case "Team":
                    // find titleID and teamPUID and userPUID from pathName
                    ulong    []teamPUIDList = new ulong[1];
                    if(pathName != null)
                    {
                        startPos = pathName.IndexOf("u:");
                        if(startPos != -1)
                        {
                            subStr = pathName.Substring(startPos);
                            int teamPUIDEndPos = subStr.IndexOf(@"/")-1;
                            int teamPUIDLen = teamPUIDEndPos - 2+1;
                            teamPUIDList[0] = (ulong)Int64.Parse(subStr.Substring(2,teamPUIDLen),NumberStyles.AllowHexSpecifier);
                            int titleIDStartPos = subStr.IndexOf(@"/") + 1;
                            string tIDStr = subStr.Substring(titleIDStartPos);
                            int len = tIDStr.IndexOf(@"/");
                            uint tiID = (uint)Int32.Parse(tIDStr.Substring(0,len),NumberStyles.AllowHexSpecifier);
                            this.uiTitleId = this.Slot.titleId = tiID;
                        }
                        // team tickets is requred
                        this.accessToken.baseAT.flags = 1;
                        this.accessToken.removeAT.signature = null;
                        this.accessToken.removeAT.signatureLen = 0;
                        // append team tickets at the end of request
                        byte []key    = new byte[16];
                        new Random().NextBytes(key);
                        ulong    userPUID = this.accessToken.baseAT.userPuid;
                        this.Slot.SetKey(key);
                    }
                    break;
                default:
                    break;
            }
        }
        /// <summary>
        /// If this is a dataCenter RemoveFile request,then we need append HTTPAuthData header
        /// </summary>
        /// <param name="endPoint"></param>
        /// <param name="reqStream"></param>
        /// <returns></returns>
        public override byte[] GenerateHttpHeader(IPEndPoint endPoint, MemoryStream reqStream)
        {
            if(this.CustomHeader == String.Empty)
                return base.GenerateHttpHeader(endPoint, reqStream);
            else    // there is HTTPAuthData Header
            {
                endPoint.Port = (ushort)Global.XEnv.GetVirtualInterface(VirtualInterface.stfd_storage_int).Port;
                return base.GenerateHttpHeader(endPoint, reqStream);
            }
        }
        /// <summary>
        /// Send XRLRemoveFile http request to stfd
        /// </summary>
        /// <param name="sServer">storage front door</param>
        /// <returns></returns>
        public override bool Execute()
        {
            MemoryStream reqStream = new MemoryStream( 512 );
            WriteStream( reqStream );

            bool uRet = false;
            bool bRet=InternalExecute(this.Server,reqStream);

            if( bRet )
            {
                if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
                    uRet = true;
            }
            return uRet;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\QueueClient.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.StorageClient;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    /// <summary>
    /// This class is used to retrieve or upload queue data to Azure Storage
    /// </summary>
    public class QueueClient
    {
        protected string _storageAccountName;
        protected string _storageKey;
        protected StorageCredentials _storageCredentials;
        protected Uri _queueBaseAddress;
        protected CloudQueueClient _queueClient;

        public QueueClient()
        {
            StorageAccountInformation storageAccountInfo = XlfsConfiguration.XlfsQueueStorage;
            _storageAccountName = storageAccountInfo.StorageAccount;
            _storageKey = storageAccountInfo.StorageKey;
            _queueBaseAddress = new Uri(storageAccountInfo.CloudBaseAddress);

            _storageCredentials = new StorageCredentialsAccountAndKey(_storageAccountName, _storageKey);

            InitializeClient();
        }

        public QueueClient(string storageAccount, string storageKey, string cloudBaseAddress)
        {
            _storageAccountName = storageAccount;
            _storageKey = storageKey;
            _storageCredentials = new StorageCredentialsAccountAndKey(_storageAccountName, _storageKey);
            _queueBaseAddress = new Uri(cloudBaseAddress);
            InitializeClient();
        }

        public QueueClient(string accessToken, string cloudBaseAddress)
        {
            _storageCredentials = new StorageCredentialsSharedAccessSignature(accessToken);
            _queueBaseAddress = new Uri(cloudBaseAddress);
            InitializeClient();
        }

        public QueueClient(StorageCredentials storageCredentials, string cloudBaseAddress)
        {
            _storageCredentials = storageCredentials;
            _queueBaseAddress = new Uri(cloudBaseAddress);
            InitializeClient();
        }

        public string StorageAccount
        {
            //get { return _storageAccountName; }
            set
            {
                _storageAccountName = value;
                _storageCredentials = new StorageCredentialsAccountAndKey(_storageAccountName, _storageKey);
                InitializeClient();
            }
        }

        public string StorageKey
        {
            set
            {
                _storageKey = value;
                _storageCredentials = new StorageCredentialsAccountAndKey(_storageAccountName, _storageKey);
                InitializeClient();
            }
        }

        public string AccessToken
        {
            set
            {
                _storageCredentials = new StorageCredentialsSharedAccessSignature(value);
                InitializeClient();
            }
        }

        public string CloudBaseAddress
        {
            get { return _queueBaseAddress.AbsoluteUri; }
            set { _queueBaseAddress = new Uri(value); InitializeClient(); }
        }

        public StorageCredentials Credentials
        {
            get { return _storageCredentials; }
            set { _storageCredentials = value; InitializeClient(); }
        }

        protected virtual void InitializeClient()
        {
            _queueClient = new CloudQueueClient(_queueBaseAddress, _storageCredentials);
        }

        #region Queue Management

        public void CreateIfNotExist(string queueName)
        {
            CloudQueue queue = _queueClient.GetQueueReference(queueName);
            queue.CreateIfNotExist();
        }

        public void DeleteQueue(string queueName)
        {
            CloudQueue queue = _queueClient.GetQueueReference(queueName);
            queue.Delete();
        }

        public void Clear(string queueName)
        {
            CloudQueue queue = _queueClient.GetQueueReference(queueName);
            queue.Clear();
        }

        #endregion

        #region Queue Message APIs

        public CloudQueueMessage GetMessage(string queueName)
        {
            CloudQueue queue = _queueClient.GetQueueReference(queueName);

            return queue.GetMessage();
        }

        public CloudQueueMessage GetMessage(string queueName, TimeSpan visibilityTimeout)
        {
            CloudQueue queue = _queueClient.GetQueueReference(queueName);

            return queue.GetMessage(visibilityTimeout);
        }

        public void AddMessage(string queueName, CloudQueueMessage msg)
        {
            CloudQueue queue = _queueClient.GetQueueReference(queueName);
            queue.AddMessage(msg);
        }

        public void DeleteMessage(string queueName, CloudQueueMessage msg)
        {
            CloudQueue queue = _queueClient.GetQueueReference(queueName);
            queue.DeleteMessage(msg);
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\FileTableLastUpdateClient.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.StorageClient;

using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    /// <summary>
    /// This class is used to retrieve or upload table data to Azure Storage
    /// </summary>
    public class FileTableLastUpdateClient : TableClient
    {
        private FileTableLastUpdateContext _fileContext;

        public FileTableLastUpdateClient()
        {
        }

        public FileTableLastUpdateClient(string storageAccount, string storageKey, string cloudBaseAddress)
            : base(storageAccount, storageKey, cloudBaseAddress)
        {
        }

        public FileTableLastUpdateClient(string accessToken, string cloudBaseAddress)
            : base(accessToken, cloudBaseAddress)
        {
        }

        public FileTableLastUpdateClient(StorageCredentials storageCredentials, string cloudBaseAddress)
            : base(storageCredentials, cloudBaseAddress)
        {
        }

        public FileTableLastUpdateClient(StorageAccountInformation storageAccountInformation)
            : base(storageAccountInformation.StorageAccount, storageAccountInformation.StorageKey, storageAccountInformation.CloudBaseAddress)
        {
        }

        protected override void InitializeClient()
        {
            _tableClient = new CloudTableClient(_tableBaseAddress.AbsoluteUri, _storageCredentials);

            _fileContext = new FileTableLastUpdateContext(
                _tableBaseAddress.AbsoluteUri,
                _storageCredentials);

            _fileContext.RetryPolicy = RetryPolicies.Retry(5, TimeSpan.FromMinutes(1));
        }

        public void CreateIfNotExist()
        {
            if (!_tableClient.DoesTableExist("FileTableLastUpdateEntry"))
            {
                CloudTableClient.CreateTablesFromModel(
                    typeof(FileTableLastUpdateContext),
                    _tableBaseAddress.AbsoluteUri,
                    _storageCredentials);
            }
        }

        public void ReCreate()
        {
            _tableClient.DeleteTableIfExist("FileTableLastUpdateEntry");

            CloudTableClient.CreateTablesFromModel(
                typeof(FileTableLastUpdateContext),
                _tableBaseAddress.AbsoluteUri,
                _storageCredentials);
        }

        //Passing in all parameters to save changes on test cases.
        //If the the row key or partition key change, we just change these functions
        public static string GetPartitionKey(ulong xuid, uint titleID, string fileName, DateTime lastUpdate)
        {
            string partitionKey = lastUpdate.ToString(FileTableLastUpdateEntry.PartitionKeyFormatString);

            return partitionKey;
        }

        public static string GetRowKey(ulong xuid, uint titleID, string fileName)
        {
            string rowKey = string.Format(
                FileTableLastUpdateEntry.RowKeyFormatString,
                titleID.ToString(FileTableLastUpdateEntry.TitleIdFormatString),
                xuid.ToString(FileTableLastUpdateEntry.XuidFormatString),
                fileName
                );

            return rowKey;
        }

        public static uint GetTitleIDFromRowKey(string rowKey)
        {
            uint titleID = 0;
            string[] rowKeySplit = rowKey.Split(new char[] { '.' });
            if (rowKeySplit.Length > 0)
            {
                // We just don't want it to throw. If it can't parse the default 0 will be returned
                uint.TryParse(rowKeySplit[0], System.Globalization.NumberStyles.HexNumber, null, out titleID);
            }

            return titleID;
        }

        public static uint GetXuidFromRowKey(string rowKey)
        {
            uint xuid = 0;
            string[] rowKeySplit = rowKey.Split(new char[] { '.' });
            if (rowKeySplit.Length > 1)
            {
                // We just don't want it to throw. If it can't parse the default 0 will be returned
                uint.TryParse(rowKeySplit[1], System.Globalization.NumberStyles.HexNumber, null, out xuid);
            }

            return xuid;
        }

        public static string GetFileNameFromRowKey(string rowKey)
        {
            string fileName = "";
            string[] rowKeySplit = rowKey.Split(new char[] { '.' });
            if (rowKeySplit.Length > 2)
            {
                fileName = rowKeySplit[2];
            }

            return fileName;
        }

        /// <summary>
        /// Wrapper function to protect agains server exceptions. If the table has only been created with no entries
        /// the first Select will throw rather than return a null/empty list. Catch that error and return an empty list
        /// </summary>
        /// <param name="fileEnum">IEnumerable parameter result from query</param>
        /// <returns>IEnumerable.ToList()</returns>
        private static List<FileTableLastUpdateEntry> GetListFromIEnumerable(IEnumerable<FileTableLastUpdateEntry> fileEnum)
        {
            List<FileTableLastUpdateEntry> fileList;
            try
            {
                fileList = fileEnum.ToList();
            }
            catch
            {
                fileList = new List<FileTableLastUpdateEntry>();
            }

            return fileList;
        }

        //If the full list is long then this will allocate the entire List<> at Select time which may use a lot of memory
        //Use SelectIEnumerable as an alternative
        public List<FileTableLastUpdateEntry> Select()
        {
            var allResults = from p in _fileContext.FileTableLastUpdateEntry.Take(1000) select p;

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            return GetListFromIEnumerable(entities);
        }

        public IEnumerable<FileTableLastUpdateEntry> SelectIEnumerable()
        {
            var allResults = from p in _fileContext.FileTableLastUpdateEntry.Take(1000) select p;

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            return entities;
        }

        public List<FileTableLastUpdateEntry> SelectFile(string partitionKey, string rowKey)
        {
            var allResults = from p in _fileContext.FileTableLastUpdateEntry
                             where p.PartitionKey == partitionKey
                                && p.RowKey == rowKey
                             select p;

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            return GetListFromIEnumerable(entities);
        }

        public List<FileTableLastUpdateEntry> SelectFile(string fileName)
        {
            var allResults = from p in _fileContext.FileTableLastUpdateEntry 
                             where p.Filename == fileName
                             select p;

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            return GetListFromIEnumerable(entities);
        }

        public List<FileTableLastUpdateEntry> SelectFile(ulong xuid, uint titleId, string fileName)
        {
            string rowKey = GetRowKey(xuid, titleId, fileName);
            var allResults = from p in _fileContext.FileTableLastUpdateEntry
                             where p.RowKey == rowKey
                             select p;

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            return GetListFromIEnumerable(entities);
        }

        public List<FileTableLastUpdateEntry> SelectFile(ulong xuid, uint titleId, string fileName, DateTime lastUpdate)
        {
            string rowKey = GetRowKey(xuid, titleId, fileName);
            var allResults = from p in _fileContext.FileTableLastUpdateEntry
                             where p.PartitionKey.CompareTo(lastUpdate.ToString(FileTableLastUpdateEntry.PartitionKeyFormatString)) == 0
                                && p.RowKey == rowKey
                             select p;
            if ((lastUpdate.Minute < 5) || (lastUpdate.Minute > 55))
            {
                allResults = from p in _fileContext.FileTableLastUpdateEntry
                             where p.PartitionKey.CompareTo(lastUpdate.AddHours(-1).ToString(FileTableLastUpdateEntry.PartitionKeyFormatString)) >=0
                                && p.PartitionKey.CompareTo(lastUpdate.AddHours(1).ToString(FileTableLastUpdateEntry.PartitionKeyFormatString)) <= 0
                                && p.RowKey == rowKey
                             select p;
            }

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            return GetListFromIEnumerable(entities);
        }

        public List<FileTableLastUpdateEntry> SelectPartition(string partitionKey)
        {
            var allResults = from p in _fileContext.FileTableLastUpdateEntry
                            where p.PartitionKey.CompareTo(partitionKey) == 0
                            select p;

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            return GetListFromIEnumerable(entities);
        }

        public List<FileTableLastUpdateEntry> SelectTransaction(ulong xuid, string transactionId)
        {
            var allResults = from p in _fileContext.FileTableLastUpdateEntry
                             where p.UserXuid == unchecked((long) xuid)
                                && p.TransactionId == transactionId
                             select p;

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            return GetListFromIEnumerable(entities);
        }

        public List<FileTableLastUpdateEntry> SelectXuid(ulong xuid)
        {
            var allResults = from p in _fileContext.FileTableLastUpdateEntry
                             where p.UserXuid == unchecked((long)xuid)
                             select p;

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            return GetListFromIEnumerable(entities);
        }

        public List<FileTableLastUpdateEntry> SelectTitle(uint titleId)
        {
            var allResults = from p in _fileContext.FileTableLastUpdateEntry
                             where p.RowKey.CompareTo(titleId.ToString(FileTableLastUpdateEntry.TitleIdFormatString)) >= 0 
                                && p.RowKey.CompareTo((titleId + 1).ToString(FileTableLastUpdateEntry.TitleIdFormatString)) < 0
                             select p;

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            return GetListFromIEnumerable(entities);
        }

        public List<FileTableLastUpdateEntry> SelectTimeSpan(DateTime startDate, DateTime endDate)
        {
            var allResults = from p in _fileContext.FileTableLastUpdateEntry
                             where p.PartitionKey.CompareTo(startDate.ToString(FileTableLastUpdateEntry.PartitionKeyFormatString)) >= 0
                                && p.PartitionKey.CompareTo(endDate.ToString(FileTableLastUpdateEntry.PartitionKeyFormatString)) <= 0
                                && p.LastUpdate <= endDate
                                && p.LastUpdate >= startDate
                             select p;

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            return GetListFromIEnumerable(entities);
        }

        public List<FileTableLastUpdateEntry> SelectTimeSpan(DateTime startDate, DateTime endDate, uint titleId)
        {
            var allResults = from p in _fileContext.FileTableLastUpdateEntry
                             where p.PartitionKey.CompareTo(startDate.ToString(FileTableLastUpdateEntry.PartitionKeyFormatString)) >= 0
                                && p.PartitionKey.CompareTo(endDate.ToString(FileTableLastUpdateEntry.PartitionKeyFormatString)) <= 0
                                && p.RowKey.CompareTo(titleId.ToString(FileTableLastUpdateEntry.TitleIdFormatString)) >= 0
                                && p.RowKey.CompareTo((titleId + 1).ToString(FileTableLastUpdateEntry.TitleIdFormatString)) < 0
                                && p.LastUpdate <= endDate
                                && p.LastUpdate >= startDate
                             select p;

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            return GetListFromIEnumerable(entities);
        }

        public List<FileTableLastUpdateEntry> SelectTimeSpanSortedMax(DateTime startDate, DateTime endDate, uint titleId, int maxReturn)
        {
            var allResults = from p in _fileContext.FileTableLastUpdateEntry
                             where p.PartitionKey.CompareTo(startDate.ToString(FileTableLastUpdateEntry.PartitionKeyFormatString)) == 0
                                && p.RowKey.CompareTo(titleId.ToString(FileTableLastUpdateEntry.TitleIdFormatString)) >= 0
                                && p.RowKey.CompareTo((titleId + 1).ToString(FileTableLastUpdateEntry.TitleIdFormatString)) < 0
                                && p.LastUpdate <= endDate
                                && p.LastUpdate >= startDate
                             select p;

            var query = allResults.AsTableServiceQuery();
            var entities = query.Execute();

            List<FileTableLastUpdateEntry> fileList = GetListFromIEnumerable(entities);
            FileTableLastUpdateDataSourceComparer dataSourceComparer = new FileTableLastUpdateDataSourceComparer();
            fileList.Sort(dataSourceComparer);
            int numFiles = Math.Min(maxReturn, fileList.Count);

            return fileList.Take(numFiles).ToList<FileTableLastUpdateEntry>();
        }

        public int SelectCount()
        {
            int fileCount = 0;
            var allResults = from p in _fileContext.FileTableLastUpdateEntry.Take(1000) select p;

            var query = allResults.AsTableServiceQuery();
            ResultSegment<FileTableLastUpdateEntry> resultSeg = query.EndExecuteSegmented(query.BeginExecuteSegmented(null, query));

            while (resultSeg.HasMoreResults)
            {
                fileCount += 1000;
                resultSeg = resultSeg.GetNext();
            }
            foreach (FileTableLastUpdateEntry file in resultSeg.Results)
            {
                fileCount++;
            }

            return fileCount;
        }

        /// <summary>
        /// Not recommended for large tables. Use the more efficient SelectCount providing a startDate to avoid using lots of memory
        /// The resultsSegment itself will "cache" older entries rather than freeing the memory after use.
        /// </summary>
        /// <param name="oldest">out param returning the Oldest record found (if records found). DateTime.UtcNow if no records found.</param>
        /// <param name="newest">out param returning the Newest record found. DateTime.UtcNow if no records found.</param>
        /// <returns></returns>
        public int SelectCount(out DateTime oldest, out DateTime newest)
        {
            int fileCount = 0;
            oldest = DateTime.UtcNow;
            newest = DateTime.MinValue;
            FileTableLastUpdateContext fileContext = new FileTableLastUpdateContext(_tableBaseAddress.AbsoluteUri, _storageCredentials);
            var allResults = from p in fileContext.FileTableLastUpdateEntry.Take(1000) select p;

            var query = allResults.AsTableServiceQuery();
            ResultSegment<FileTableLastUpdateEntry> resultSeg = query.EndExecuteSegmented(query.BeginExecuteSegmented(null, query));

            //Setting these back to null to free (and prevent caching of) memory
            fileContext = null;
            allResults = null;

            while (resultSeg.HasMoreResults)
            {
                foreach (FileTableLastUpdateEntry file in resultSeg.Results)
                {
                    fileCount++;
                    if ((file.LastUpdate.HasValue == true) && (file.LastUpdate.Value < oldest))
                        oldest = file.LastUpdate.Value;
                    if ((file.LastUpdate.HasValue == true) && (file.LastUpdate.Value > newest))
                        newest = file.LastUpdate.Value;
                }
                resultSeg = query.EndExecuteSegmented(query.BeginExecuteSegmented(resultSeg.ContinuationToken, null, query));
            }
            foreach (FileTableLastUpdateEntry file in resultSeg.Results)
            {
                fileCount++;
                if ((file.LastUpdate.HasValue == true) && (file.LastUpdate.Value < oldest))
                    oldest = file.LastUpdate.Value;
                if ((file.LastUpdate.HasValue == true) && (file.LastUpdate.Value > newest))
                    newest = file.LastUpdate.Value;
            }

            if (newest == DateTime.MinValue)
                newest = oldest;
            return fileCount;
        }

        /// <summary>
        /// More efficient search (but slower) to find the total count and start and end DateTime for Performance test
        /// resuming. Avoids caching used by most of the managed code to avoid large memory use when the table size
        /// is large
        /// </summary>
        /// <param name="startSearch">DateTime to start searching forward from. Suggested is 1/1/2010</param>
        /// <param name="oldest">out param returning the Oldest record found (if records found).</param>
        /// <param name="newest">out param returning the Newest record found prior to startSearch. Max newest is DateTime.Maxvalue.</param>
        /// <returns></returns>
        public int SelectCount(DateTime startSearch, out DateTime oldest, out DateTime newest)
        {
            int fileCount = 0;
            DateTime currentSearch = new DateTime(startSearch.Year, startSearch.Month, startSearch.Day, startSearch.Hour, 0, 0, startSearch.Kind);
            oldest = currentSearch;
            newest = DateTime.MinValue;
            int sequentialEmptyBlocks = 0;
            int maxSequentialEmptyBlocks = 4;
            List<FileTableLastUpdateEntry> fileList = new List<FileTableLastUpdateEntry>();
            FileTableLastUpdateContext fileContext = new FileTableLastUpdateContext(_tableBaseAddress.AbsoluteUri, _storageCredentials);

            do
            {
                //Check the next block
                fileContext = new FileTableLastUpdateContext(_tableBaseAddress.AbsoluteUri, _storageCredentials);
                var allResults = from p in fileContext.FileTableLastUpdateEntry
                                 where p.PartitionKey.CompareTo(currentSearch.ToString(FileTableLastUpdateEntry.PartitionKeyFormatString)) == 0
                                 select p;

                var query = allResults.AsTableServiceQuery();
                var entities = query.Execute();
                fileList = GetListFromIEnumerable(entities);
                if (fileList.Count == 0)
                {
                    sequentialEmptyBlocks++;
                }
                else
                {
                    sequentialEmptyBlocks = 0;
                    //Count the current group
                    foreach (FileTableLastUpdateEntry file in fileList)
                    {
                        fileCount++;
                        if ((file.LastUpdate.HasValue == true) && (file.LastUpdate.Value < oldest))
                            oldest = file.LastUpdate.Value;
                        if ((file.LastUpdate.HasValue == true) && (file.LastUpdate.Value > newest))
                            newest = file.LastUpdate.Value;
                    }
                }
                currentSearch = currentSearch.AddHours(1);
            } while ((sequentialEmptyBlocks < maxSequentialEmptyBlocks) && (currentSearch < DateTime.MaxValue));

            if (newest == DateTime.MinValue)
                newest = oldest;
            return fileCount;
        }

        public void AddFileTableEntry(FileTableLastUpdateEntry entry)
        {
            _fileContext.AddObject("FileTableLastUpdateEntry", entry);
            _fileContext.SaveChanges();
        }

        public void UpdateFileTableEntry(FileTableLastUpdateEntry entry)
        {
            _fileContext.UpdateObject(entry);
            _fileContext.SaveChanges();
        }

        public void DeleteFileTableEntry(FileTableLastUpdateEntry entry)
        {
            _fileContext.DeleteObject(entry);
            _fileContext.SaveChanges();
        }

        public void SafeDeleteFileTableEntry(FileTableLastUpdateEntry entry)
        {
            try
            {
                DeleteFileTableEntry(entry);
            }
            catch (Exception ex)
            {
                Global.RO.Warn(ex.ToString());
            }
        }

        public void ClearTable()
        {
            _tableClient.DeleteTableIfExist("FileTableLastUpdateEntry");
            do
            {
                System.Threading.Thread.Sleep(5000);
                try
                {
                    CloudTableClient.CreateTablesFromModel(
                        typeof(FileTableLastUpdateContext),
                        _tableBaseAddress.AbsoluteUri,
                        _storageCredentials);
                }
                catch
                {
                }
            }
            while (!_tableClient.DoesTableExist("FileTableLastUpdateEntry"));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\TableClient.cs ===
using System;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.StorageClient;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    /// <summary>
    /// This class is used to retrieve or upload table data to Azure Storage
    /// </summary>
    public class TableClient
    {
        protected string _storageAccountName;
        protected string _storageKey;
        protected StorageCredentials _storageCredentials;
        protected Uri _tableBaseAddress;
        protected CloudTableClient _tableClient;

        public TableClient()
        {
            StorageAccountInformation storageAccountInformation = XlfsConfiguration.XlfsTableStorage;
            _storageAccountName = storageAccountInformation.StorageAccount;
            _storageKey = storageAccountInformation.StorageKey;
            _tableBaseAddress = new Uri(storageAccountInformation.CloudBaseAddress);

            _storageCredentials = new StorageCredentialsAccountAndKey(_storageAccountName, _storageKey);
            InitializeClient();
        }

        public TableClient(string storageAccount, string storageKey, string cloudBaseAddress)
        {
            _storageAccountName = storageAccount;
            _storageKey = storageKey;
            _storageCredentials = new StorageCredentialsAccountAndKey(_storageAccountName, _storageKey);
            _tableBaseAddress = new Uri(cloudBaseAddress);
            InitializeClient();
        }

        public TableClient(string accessToken, string cloudBaseAddress)
        {
            _storageCredentials = new StorageCredentialsSharedAccessSignature(accessToken);
            _tableBaseAddress = new Uri(cloudBaseAddress);
            InitializeClient();
        }

        public TableClient(StorageCredentials storageCredentials, string cloudBaseAddress)
        {
            _storageCredentials = storageCredentials;
            _tableBaseAddress = new Uri(cloudBaseAddress);
            InitializeClient();
        }

        public string StorageAccount
        {
            //get { return _storageAccountName; }
            set
            {
                _storageAccountName = value;
                _storageCredentials = new StorageCredentialsAccountAndKey(_storageAccountName, _storageKey);
                InitializeClient();
            }
        }

        public string StorageKey
        {
            set
            {
                _storageKey = value;
                _storageCredentials = new StorageCredentialsAccountAndKey(_storageAccountName, _storageKey);
                InitializeClient();
            }
        }

        public string AccessToken
        {
            set
            {
                _storageCredentials = new StorageCredentialsSharedAccessSignature(value);
                InitializeClient();
            }
        }

        public string CloudBaseAddress
        {
            get { return _tableBaseAddress.AbsoluteUri; }
            set { _tableBaseAddress = new Uri(value); InitializeClient(); }
        }

        public StorageCredentials Credentials
        {
            get { return _storageCredentials; }
            set { _storageCredentials = value; InitializeClient(); }
        }

        protected virtual void InitializeClient()
        {
            _tableClient = new CloudTableClient(_tableBaseAddress.AbsoluteUri, _storageCredentials);
        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\StorageAccountTableClient.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.StorageClient;
using ServerTestFramework;

using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    /// <summary>
    /// This class is used to retrieve or upload table data to Azure Storage
    /// </summary>
    public class StorageAccountTableClient : TableClient
    {
        private StorageAccountTableContext _storageAccountContext;

        public StorageAccountTableClient()
        {
        }

        public StorageAccountTableClient(string storageAccount, string storageKey, string cloudBaseAddress)
            : base(storageAccount, storageKey, cloudBaseAddress)
        {
        }

        public StorageAccountTableClient(string accessToken, string cloudBaseAddress)
            : base(accessToken, cloudBaseAddress)
        {
        }

        public StorageAccountTableClient(StorageCredentials storageCredentials, string cloudBaseAddress)
            : base(storageCredentials, cloudBaseAddress)
        {
        }

        protected override void InitializeClient()
        {
            _tableClient = new CloudTableClient(_tableBaseAddress.AbsoluteUri, _storageCredentials);

            _storageAccountContext = new StorageAccountTableContext(
                _tableBaseAddress.AbsoluteUri,
                _storageCredentials);

            _storageAccountContext.RetryPolicy = RetryPolicies.Retry(5, TimeSpan.FromMinutes(1));
        }

        public void CreateIfNotExist()
        {
            if (!_tableClient.DoesTableExist("StorageAccountTableEntry"))
            {
                CloudTableClient.CreateTablesFromModel(
                    typeof(StorageAccountTableContext),
                    _tableBaseAddress.AbsoluteUri,
                    _storageCredentials);
            }
        }

        public void ReCreate()
        {
            _tableClient.DeleteTableIfExist("StorageAccountTableEntry");

            CloudTableClient.CreateTablesFromModel(
                typeof(StorageAccountTableContext),
                _tableBaseAddress.AbsoluteUri,
                _storageCredentials);
        }

        /// <summary>
        /// Wrapper function to protect agains server exceptions. If the table has only been created with no entries
        /// the first Select will throw rather than return a null/empty list. Catch that error and return an empty list
        /// </summary>
        /// <param name="fileEnum">IEnumerable parameter result from query</param>
        /// <returns>IEnumerable.ToList()</returns>
        private static List<StorageAccountTableEntry> GetListFromIEnumerable(IEnumerable<StorageAccountTableEntry> fileEnum)
        {
            List<StorageAccountTableEntry> fileList;
            try
            {
                fileList = fileEnum.ToList();
            }
            catch
            {
                fileList = new List<StorageAccountTableEntry>();
            }

            return fileList;
        }

        public List<StorageAccountTableEntry> Select()
        {
            var allResults = (from p in _storageAccountContext.StorageAccountTableEntry select p).AsTableServiceQuery();

            return GetListFromIEnumerable(allResults);
        }

        public List<StorageAccountTableEntry> SelectStorageAccount(string storageAccountName)
        {
            var allResults = (from p in _storageAccountContext.StorageAccountTableEntry
                             where p.PartitionKey == storageAccountName
                             select p).AsTableServiceQuery();

            return GetListFromIEnumerable(allResults);
        }

        public void AddStorageAccountTableEntry(StorageAccountTableEntry entry)
        {
            _storageAccountContext.AddObject("StorageAccountTableEntry", entry);
            _storageAccountContext.SaveChanges();
        }

        public void UpdateStorageAccountTableEntry(StorageAccountTableEntry entry)
        {
            _storageAccountContext.UpdateObject(entry);
            _storageAccountContext.SaveChanges();
        }

        public void DeleteStorageAccountTableEntry(StorageAccountTableEntry entry)
        {
            _storageAccountContext.DeleteObject(entry);
            _storageAccountContext.SaveChanges();
        }

        public void SafeDeleteStorageAccountTableEntry(StorageAccountTableEntry entry)
        {
            try
            {
                DeleteStorageAccountTableEntry(entry);
            }
            catch (Exception ex)
            {
                Global.RO.Warn(ex.ToString());
            }
        }

        public void ClearTable()
        {
            _tableClient.DeleteTableIfExist("StorageAccountTableEntry");
            do
            {
                System.Threading.Thread.Sleep(5000);
                try
                {
                    CloudTableClient.CreateTablesFromModel(
                        typeof(StorageAccountTableContext),
                        _tableBaseAddress.AbsoluteUri,
                        _storageCredentials);
                }
                catch
                {
                }
            }
            while (!_tableClient.DoesTableExist("StorageAccountTableEntry"));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\FileTableClient.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.StorageClient;
using ServerTestFramework;

using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    /// <summary>
    /// This class is used to retrieve or upload table data to Azure Storage
    /// </summary>
    public class FileTableClient : TableClient
    {
        private FileTableContext _fileContext;

        public FileTableClient() : base()
        {
        }

        public FileTableClient(string storageAccount, string storageKey, string cloudBaseAddress)
            : base(storageAccount, storageKey, cloudBaseAddress)
        {
        }

        public FileTableClient(string accessToken, string cloudBaseAddress)
            : base(accessToken, cloudBaseAddress)
        {
        }

        public FileTableClient(StorageCredentials storageCredentials, string cloudBaseAddress)
            : base(storageCredentials, cloudBaseAddress)
        {
        }

        protected override void InitializeClient()
        {
            _tableClient = new CloudTableClient(_tableBaseAddress.AbsoluteUri, _storageCredentials);

            _fileContext = new FileTableContext(
                _tableBaseAddress.AbsoluteUri,
                _storageCredentials);

            _fileContext.RetryPolicy = RetryPolicies.Retry(5, TimeSpan.FromMinutes(1));
        }

        public void CreateIfNotExist()
        {
            if (!_tableClient.DoesTableExist("FileTableEntry"))
            {
                CloudTableClient.CreateTablesFromModel(
                    typeof(FileTableContext),
                    _tableBaseAddress.AbsoluteUri,
                    _storageCredentials);
            }
        }

        public void ReCreate()
        {
            _tableClient.DeleteTableIfExist("FileTableEntry");

            CloudTableClient.CreateTablesFromModel(
                typeof(FileTableContext),
                _tableBaseAddress.AbsoluteUri,
                _storageCredentials);
        }

        public static string GetRowKey(uint titleID, string fileName)
        {
            string rowKey = string.Format("{0:X8}:{1}", titleID, fileName);

            return rowKey;
        }

        public static uint GetTitleIDFromRowKey(string rowKey)
        {
            uint titleID = 0;
            string[] rowKeySplit = rowKey.Split(new char[] { ':' });
            if (rowKeySplit.Length > 0)
            {
                // We just don't want it to throw. If it can't parse the default 0 will be returned
                uint.TryParse(rowKeySplit[0], System.Globalization.NumberStyles.HexNumber, null, out titleID);
            }

            return titleID;
        }

        public static string GetFileNameFromRowKey(string rowKey)
        {
            string fileName = "";
            string[] rowKeySplit = rowKey.Split(new char[] { ':' });
            if (rowKeySplit.Length > 1)
            {
                fileName = rowKeySplit[1];
            }

            return fileName;
        }

        /*public static string GetStoragePath(ulong xuid, string fileName)
        {
            string storagePath = string.Format("{0:X16}/{1}", xuid, fileName);

            return storagePath;
        }*/

        /// <summary>
        /// Wrapper function to protect agains server exceptions. If the table has only been created with no entries
        /// the first Select will throw rather than return a null/empty list. Catch that error and return an empty list
        /// </summary>
        /// <param name="fileEnum">IEnumerable parameter result from query</param>
        /// <returns>IEnumerable.ToList()</returns>
        private static List<FileTableEntry> GetListFromIEnumerable(IEnumerable<FileTableEntry> fileEnum)
        {
            List<FileTableEntry> fileList;
            try
            {
                fileList = fileEnum.ToList();
            }
            catch
            {
                fileList = new List<FileTableEntry>();
            }

            return fileList;
        }

        public List<FileTableEntry> Select()
        {
            var allResults = from p in _fileContext.FileTableEntry select p;

            return GetListFromIEnumerable(allResults);
        }

        public List<FileTableEntry> SelectFile(string fileName)
        {
            var allResults = from p in _fileContext.FileTableEntry 
                             where p.Filename == fileName
                             select p;

            return GetListFromIEnumerable(allResults);
        }

        public List<FileTableEntry> SelectFile(ulong xuid, string rowKey)
        {
            var allResults = from p in _fileContext.FileTableEntry 
                             where p.PartitionKey == xuid.ToString("X16")
                                && p.RowKey == rowKey
                             select p;

            return GetListFromIEnumerable(allResults);
        }

        public List<FileTableEntry> SelectTransaction(ulong xuid, string transactionId)
        {
            var allResults = from p in _fileContext.FileTableEntry
                             where p.PartitionKey == xuid.ToString("X16")
                                && p.TransactionId == transactionId
                             select p;

            return GetListFromIEnumerable(allResults);
        }

        public List<FileTableEntry> SelectXuid(ulong xuid)
        {
            var allResults = from p in _fileContext.FileTableEntry 
                             where p.PartitionKey == xuid.ToString("X16")
                             select p;

            return GetListFromIEnumerable(allResults);
        }

        public List<FileTableEntry> SelectTitle(uint titleid)
        {
            var allResults = from p in _fileContext.FileTableEntry
                             where p.TitleId == titleid
                             select p;

            return GetListFromIEnumerable(allResults);
        }

        public List<FileTableEntry> SelectTimeSpan(DateTime start, DateTime end)
        {
            var allResults = from p in _fileContext.FileTableEntry
                             where p.LastUpdate > start
                                && p.LastUpdate < end
                             select p;

            return GetListFromIEnumerable(allResults);
        }

        public List<FileTableEntry> SelectTimeSpan(DateTime start, DateTime end, uint titleId)
        {
            var allResults = from p in _fileContext.FileTableEntry
                             where p.LastUpdate > start
                                && p.LastUpdate < end
                                && p.TitleId == unchecked((int)titleId)
                             select p;

            return GetListFromIEnumerable(allResults);
        }

        public void AddFileTableEntry(FileTableEntry entry)
        {
            _fileContext.AddObject("FileTableEntry", entry);
            _fileContext.SaveChanges();
        }

        public void UpdateFileTableEntry(FileTableEntry entry)
        {
            _fileContext.UpdateObject(entry);
            _fileContext.SaveChanges();
        }

        public void DeleteFileTableEntry(FileTableEntry entry)
        {
            _fileContext.DeleteObject(entry);
            _fileContext.SaveChanges();
        }

        public void SafeDeleteFileTableEntry(FileTableEntry entry)
        {
            try
            {
                DeleteFileTableEntry(entry);
            }
            catch (Exception ex)
            {
                Global.RO.Warn(ex.ToString());
            }
        }

        public void ClearTable()
        {
            _tableClient.DeleteTableIfExist("FileTableEntry");
            do
            {
                System.Threading.Thread.Sleep(5000);
                try
                {
                    CloudTableClient.CreateTablesFromModel(
                        typeof(FileTableContext),
                        _tableBaseAddress.AbsoluteUri,
                        _storageCredentials);
                }
                catch
                {
                }
            }
            while (!_tableClient.DoesTableExist("FileTableEntry"));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\HttpParameterAttributes.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
    public class HttpRequestParameterAttribute : Attribute
    {
        public Boolean Required { get; set; }
        public String Name { get; set; }
        public String FormatString { get; set; }

        public HttpRequestParameterAttribute(String parameterName)
        {
            this.Name = parameterName;
            this.Required = false;
        }

        public String GenerateParamString(Object value)
        {
            // If we were passed a null value, just use an empty string
            if (value == null)
            {
                value = "";
            }

            if (value is Byte[])
            {
                return GenerateParamString(Convert.ToBase64String((Byte[])value));
            }

            String valueString = null;
            if (value is DateTime)
            {
                DateTime temp = (DateTime)value;
                if (FormatString != null)
                {
                    valueString = temp.ToString(FormatString);
                }
                else
                {
                    valueString = temp.ToString();
                }
            }
            else
            {
                if (FormatString != null)
                {
                    valueString = String.Format(FormatString, value);
                }
                else
                {
                    valueString = value.ToString();
                }
            }
            return GenerateParamString(valueString);
        }

        public virtual String GenerateParamString(String value) { return value; }
    }

    public class HttpQueryParameterAttribute : HttpRequestParameterAttribute
    {
        public HttpQueryParameterAttribute(String parameterName) : base(parameterName) { }

        public override string GenerateParamString(string value)
        {
            StringBuilder sb = new StringBuilder();
            if (!String.IsNullOrEmpty(Name))
            {
                sb.Append(Name);
                sb.Append("=");
            }
            sb.Append(HttpUtility.UrlEncode(value));

            return sb.ToString();
        }
    }

    public class HttpHeaderParameterAttribute : HttpRequestParameterAttribute
    {
        public String ValuePrefix { get; set; }

        public HttpHeaderParameterAttribute(String parameterName) : this(parameterName, null) { }
        public HttpHeaderParameterAttribute(String parameterName, String valuePrefix)
            : base(parameterName)
        {
            this.ValuePrefix = valuePrefix;
        }

        public override string GenerateParamString(string value)
        {
            StringBuilder sb = new StringBuilder();
            if (!String.IsNullOrEmpty(ValuePrefix))
            {
                sb.Append(ValuePrefix);
                sb.Append("=");
            }
            sb.Append(value);

            return sb.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\XlfsAdminGetChangedBlobsContinue.cs ===
using System;
using System.Linq;
using System.Net;
using System.Text;
using System.Collections.Generic;
using System.Xml;
using System.Xml.XPath;
using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.server.xlfs.common;
using System.Xml.Linq;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    public class XlfsAdminGetChangedBlobsContinue : XlfsWebRequest
    {
        [HttpQueryParameter("titleid", FormatString = "{0:X8}")]
        public UInt32? TitleId { get; set; }

        public Dictionary<String,SASInfo> StorageInfo { get; protected set; }

        protected override string MethodName { get { return "xlfsAdminGetChangedBlobsContinue.ashx"; } }

        public override bool Execute()
        {
            return base.Execute(XlfsAdminServer);
        }

        protected override void ProcessResponse(HttpWebResponse response)
        {
            XDocument doc = XDocument.Load(XmlReader.Create(response.GetResponseStream()));
            ProcessResponse(doc);
        }

        protected virtual void ProcessResponse(XDocument doc)
        {
            ParseSASFromResponse(doc);
        }

        protected void ParseSASFromResponse(XDocument doc)
        {
            var sasInfos = from sasNode in doc.Root.Element("StorageAccounts").Elements("SAS")
                              select new SASInfo
                              {
                                  StorageAccount = sasNode.Element("StorageAccount").Value,
                                  StorageUri = new Uri(sasNode.Element("URI").Value),
                                  Container = sasNode.Element("Container").Value,
                                  Signature = sasNode.Element("Signature").Value,
                                  Expiry = ParseDateTimeOrDefault(sasNode.Element("Expiry").Value)
                              };

            StorageInfo = sasInfos.ToDictionary(sasInfo => sasInfo.StorageAccount);
        }

        public bool Verify()
        {
            bool verifyPassed = true;
            if ((StorageInfo == null) || (StorageInfo.Count == 0))
            {
                Global.RO.Error("No SAS Info returned by XlfsAdminGetChangedBlobs");
                return false;
            }
            foreach (SASInfo sasInfo in StorageInfo.Values)
            {
                UInt32 titleId = 0xFFFE07D1;
                if (TitleId.HasValue)
                {
                    titleId = TitleId.Value;
                }
                if (sasInfo.Container != titleId.ToString("x8"))
                {
                    Global.RO.Error("Container returned by XlfsAdminGetChangedBlobs does not match TitleId {0}:{1}", sasInfo.Container, titleId.ToString("x8"));
                    verifyPassed = false;
                }
                if ((sasInfo.StorageAccount == null) || (sasInfo.StorageUri == null) ||
                    (sasInfo.Container == null) || (sasInfo.Signature == null) ||
                    (sasInfo.Expiry == null))
                {
                    Global.RO.Error("Incomplete SAS Info returned by XlfsAdminGetChangedBlobs");
                    verifyPassed = false;
                }
            }
            return verifyPassed;
        }
    }

    public class SASInfo
    {
        public String StorageAccount { get; set; }
        public Uri StorageUri { get; set; }
        public String Container { get; set; }
        public String Signature { get; set; }
        public DateTime Expiry { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\XlfsAdminGetChangedBlobs.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    public class XlfsAdminGetChangedBlobs : XlfsAdminGetChangedBlobsContinue
    {
        [HttpQueryParameter("start", FormatString="u")]
        public DateTime? StartTime { get; set; }
        [HttpQueryParameter("end", FormatString="u")]
        public DateTime? EndTime { get; set; }
        [HttpQueryParameter("continuation", Required = false)]
        public string Continuation { get; set; }
        [HttpQueryParameter("maxresults", Required = false)]
        public int? MaxResults { get; set; }
        
        public List<FileTableLastUpdateEntry> Files { get; protected set; }

        protected override string MethodName { get { return "xlfsAdminGetChangedBlobs.ashx"; } }

        protected override void ProcessResponse(XDocument doc)
        {
            if (doc == null || doc.Root == null)
            {
                throw new NullReferenceException("XML document was null, or did not contain a root element.");
            }

            base.ProcessResponse(doc);
            ParseFilesFromResponse(doc);
            ParseContinuationFromResponse(doc);
        }

        protected void ParseFilesFromResponse(XDocument doc)
        {
            var fileEntries = (from fileNode in doc.Root.Element("Files").Elements("File")
                    select new FileTableLastUpdateEntry
                    {
                        Filename = fileNode.Element("FileName").Value,
                        UserXuid = ParseInt64OrDefault(fileNode.Element("Xuid").Value),
                        TransactionId = fileNode.Element("TransactionId").Value,
                        StorageAccount = fileNode.Element("StorageAccount").Value,
                        LastUpdate = ParseDateTimeOrDefault(fileNode.Element("LastUpdate").Value),
                        Created = ParseDateTimeOrDefault(fileNode.Element("Created").Value),
                        Size = ParseInt32OrDefault(fileNode.Element("Size").Value)
                    }).ToList();

            fileEntries.ForEach(entry =>
                entry.PartitionKey = FileTableLastUpdateClient.GetPartitionKey(
                    0, //entry.UserXuid,
                    0, //entry.TitleId,
                    entry.Filename,
                    entry.LastUpdate.Value));

            Files = fileEntries;
        }

        protected void ParseContinuationFromResponse(XDocument doc)
        {
            string continuation = null;

            XElement continuationElement = doc.Root.Element("Continuation");
            if (continuationElement != null)
            {
                continuation = continuationElement.Value;
            }

            Continuation = continuation;
        }

        public new bool Verify()
        {
            bool verifyPassed = base.Verify();
            DateTime endTime = DateTimeOfExecute;
            if (EndTime.HasValue)
                endTime = EndTime.Value;
            DateTime startTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, endTime.Hour, 0, 0, endTime.Kind);
            if (StartTime.HasValue)
                startTime = StartTime.Value;
            UInt32 titleId = 0xFFFE07D1;
            if (TitleId.HasValue)
                titleId = TitleId.Value;

            FileTableLastUpdateClient fileClient = new FileTableLastUpdateClient();
            List<FileTableLastUpdateEntry> serverList = fileClient.SelectTimeSpanSortedMax(startTime, endTime, titleId, 1000);
            List<FileTableLastUpdateEntry> foundList = new List<FileTableLastUpdateEntry>();
            if ((MaxResults.HasValue && MaxResults.Value > 0 ? Math.Min(MaxResults.Value, serverList.Count) : serverList.Count) != Files.Count)
            {
                Global.RO.Error("File Count in table does not match XlfsAdminGetChangedBlobs result {0}:{1}", serverList.Count, Files.Count);
                verifyPassed = false;
            }
            foreach (FileTableLastUpdateEntry resultsFile in Files)
            {
                bool fileFound = false;
                foreach (FileTableLastUpdateEntry serverFile in serverList)
                {
                    // The "FileName" is only unique to the userId
                    if ((resultsFile.Filename == serverFile.Filename) && (resultsFile.UserXuid == serverFile.UserXuid))
                    {
                        fileFound = true;
                        if (resultsFile.TransactionId != serverFile.TransactionId)
                        {
                            Global.RO.Error("File \"{0}\" has TransactionId mismatch between results and server. {1} : {2}",
                                resultsFile.Filename, resultsFile.TransactionId, serverFile.TransactionId);
                            verifyPassed = false;
                        }
                        if (resultsFile.StorageAccount != serverFile.StorageAccount)
                        {
                            Global.RO.Error("File \"{0}\" has StorageAccount mismatch between results and server. {1} : {2}",
                                resultsFile.Filename, resultsFile.StorageAccount, serverFile.StorageAccount);
                            verifyPassed = false;
                        }
                        if (resultsFile.Size != serverFile.Size)
                        {
                            Global.RO.Error("File \"{0}\" has Size mismatch between results and server. {1} : {2}",
                                resultsFile.Filename, resultsFile.Size, serverFile.Size);
                            verifyPassed = false;
                        }
                        if (!StorageInfo.ContainsKey(resultsFile.StorageAccount))
                        {
                            Global.RO.Error("File \"{0}\" has StorageAccount \"{1}\" info missing in the SAS Information.",
                                resultsFile.Filename, resultsFile.StorageAccount);
                            verifyPassed = false;
                        }
                        //else
                        //{
                        //    SASInfo fileSAS = StorageInfo[resultsFile.StorageAccount];
                        //    string sasFileUrl = String.Format("{0}/{1}/{2}/{3}.{4}{5}",
                        //        fileSAS.StorageUri, fileSAS.Container, resultsFile.PartitionKey,
                        //        System.Web.HttpUtility.UrlEncode(resultsFile.Filename), resultsFile.TransactionId, fileSAS.Signature);
                        //    Global.RO.Debug(sasFileUrl);
                        //}
                        foundList.Add(serverFile);
                    }
                }
                if (!fileFound)
                {
                    Global.RO.Error("File \"{0}\" in results should not have been returned.", resultsFile.Filename);
                    verifyPassed = false;
                }
            }

            if (verifyPassed == false)
            {
                Global.RO.Error("StartTime: \"{0}\".", startTime.ToString());
                Global.RO.Error("EndTime:   \"{0}\".", endTime.ToString());
                Global.RO.Error("TitleID:   \"{0}\".", titleId.ToString("x8"));
            }
            return verifyPassed;
        }

        public FileTableLastUpdateEntry GetFile(ulong userXuid, string fileName)
        {
            FileTableLastUpdateEntry foundFile = null;
            foreach (FileTableLastUpdateEntry tempFileEntry in Files)
            {
                // The "FileName" is only unique to the userId
                if ((tempFileEntry.Filename == fileName) && (tempFileEntry.UserXuid == unchecked((long)userXuid)))
                {
                    foundFile = tempFileEntry;
                }
            }

            return foundFile;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\XlfsAdminPutStorageAccount.cs ===
using System.IO;
using System.Net;
using System.Text;
using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    public class XlfsAdminPutStorageAccount : XlfsWebRequest
    {
        protected override string MethodName { get { return "xlfsAdminPutStorageAccount.ashx"; } }
        protected override string RequestMethod { get { return "POST"; } }

        public StorageAccountTableEntry StorageAccount { get; set; }

        protected override void WriteRequest(HttpWebRequest request)
        {
            string requestBody = string.Format(
                "<StorageAccount name=\"{0}\" key=\"{1}\" capacity=\"{2}\" threshold=\"{3}\" />",
                StorageAccount.PartitionKey,
                StorageAccount.Key,
                StorageAccount.Capacity,
                StorageAccount.Threshold);

            ASCIIEncoding encoding = new ASCIIEncoding();
            byte[] encodedBody = encoding.GetBytes(requestBody);
            request.ContentLength = encodedBody.Length;

            Stream stream = request.GetRequestStream();
            stream.Write(encodedBody, 0, encodedBody.Length);
        }

        public override bool Execute()
        {
            return Execute(XlfsAdminServer);
        }

        public bool Verify()
        {
            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\XlfsAdminGetStorageAccount.cs ===
using System.Net;
using System.Collections.Generic;
using System.Xml;
using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    public class XlfsAdminGetStorageAccount : XlfsWebRequest
    {
        [HttpQueryParameter("storageAccount")]
        public string StorageAccountName { get; set; }

        public StorageAccountTableEntry StorageAccount { get; protected set; }

        protected override string MethodName { get { return "xlfsAdminGetStorageAccount.ashx"; } }

        public override bool Execute()
        {
            return Execute(XlfsAdminServer);
        }

        protected override void ProcessResponse(HttpWebResponse response)
        {
            XmlReader reader = XmlReader.Create(response.GetResponseStream());
            reader.MoveToContent();
            XmlDocument doc = new XmlDocument();
            doc.Load(reader);

            ParseStorageAccountFromResponse(doc);
        }

        protected void ParseStorageAccountFromResponse(XmlDocument doc)
        {
            if( doc == null || 
                doc.DocumentElement == null ||
                doc.DocumentElement.Attributes["name"] == null ||
                doc.DocumentElement.Attributes["key"] == null ||
                doc.DocumentElement.Attributes["capacity"] == null ||
                doc.DocumentElement.Attributes["threshold"] == null )
            {
                StorageAccount = null;
                return;
            }

            StorageAccountTableEntry entry = new StorageAccountTableEntry();
            entry.PartitionKey = doc.DocumentElement.Attributes["name"].Value;
            entry.RowKey = "";
            entry.Key = doc.DocumentElement.Attributes["key"].Value;

            long capacity;
            if (!long.TryParse(doc.DocumentElement.Attributes["capacity"].Value, out capacity))
            {
                capacity = 0;
            }
            entry.Capacity = capacity;

            long threshold;
            if (!long.TryParse(doc.DocumentElement.Attributes["threshold"].Value, out threshold))
            {
                threshold = 0;
            }
            entry.Threshold = threshold;

            StorageAccount = entry;
        }

        public bool Verify()
        {
            StorageAccountTableClient storageAccountTableClient = new StorageAccountTableClient();
            List<StorageAccountTableEntry> storageAccountFromTable =
                storageAccountTableClient.SelectStorageAccount(StorageAccount.PartitionKey);

            foreach(StorageAccountTableEntry entry in storageAccountFromTable)
            {
                if(entry.PartitionKey != StorageAccount.PartitionKey) return false;
                if(entry.Key != StorageAccount.Key) return false;
                if(entry.Capacity != StorageAccount.Capacity) return false;
                if (entry.Threshold != StorageAccount.Threshold) return false;

                return true;
            }

            return false;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\XLFSClient.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.StorageClient;

using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    /// <summary>
    /// This class is used to retrieve or upload a file to XLFS Azure Storage
    /// 
    /// See http://xblwiki/default.aspx/XboxLive/XboxLiveFileSystem.html for design
    /// </summary>
    public class XLFSClient
    {
        protected FileTableLastUpdateClient _fileTableLastUpdateClient;
        protected BlobTableClient _blobTableClient;

        public XLFSClient()
        {
            _fileTableLastUpdateClient = new FileTableLastUpdateClient();
            _blobTableClient = new BlobTableClient();
        }

        public XLFSClient(string storageAccount, string storageKey, string tableBaseAddress)
        {
            _fileTableLastUpdateClient = new FileTableLastUpdateClient(storageAccount, storageKey, tableBaseAddress);
            _blobTableClient = new BlobTableClient(storageAccount, storageKey, tableBaseAddress);
        }

        public XLFSClient(string accessToken, string tableBaseAddress)
        {
            _fileTableLastUpdateClient = new FileTableLastUpdateClient(accessToken, tableBaseAddress);
            _blobTableClient = new BlobTableClient(accessToken, tableBaseAddress);
        }

        public XLFSClient(StorageCredentials storageCredentials, string tableBaseAddress)
        {
            _fileTableLastUpdateClient = new FileTableLastUpdateClient(storageCredentials, tableBaseAddress);
            _blobTableClient = new BlobTableClient(storageCredentials, tableBaseAddress);
        }

        public string CloudBaseAddress
        {
            get { return _fileTableLastUpdateClient.CloudBaseAddress; }
        }

        private StorageAccountInformation GetRandomBlobStorageAccount()
        {
            Random random = new Random();

            return
                XlfsConfiguration.XlfsBlobStorage.Skip(random.Next(XlfsConfiguration.XlfsBlobStorage.Count)).First().
                    Value;
        }

        #region FileTable ReadFile
        /// <summary>
        /// ReadFile to access the Cloud directly to read the file rather than the Admin FD
        /// Searches for the file accross all partitions (slow)
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="titleID"></param>
        /// <returns>Stream to access the file in blob storage</returns>
        public Stream ReadFile(ulong xuid, string fileName, uint titleID)
        {
            string rowKey = FileTableLastUpdateClient.GetRowKey(xuid, titleID, fileName);

            // Find filename in the XUID Files table and get the storage account/path it's in
            List<FileTableLastUpdateEntry> fileList = _fileTableLastUpdateClient.SelectFile(xuid, titleID, fileName);
            if (fileList.Count != 1)
                throw new FileNotFoundException("Expected 1 file back from XUID table got " + fileList.Count, rowKey);
            FileTableLastUpdateEntry fileEntry = fileList[0];

            // Look up in storage accounts table and retrieve the account name/key/address for the file
            string storageAccount = fileEntry.StorageAccount;

            // Create a BlobClient for the account and retrieve the file via GetBlockAsStream if single block file
            if (!XlfsConfiguration.XlfsBlobStorage.ContainsKey(storageAccount))
            {
                throw new UnexpectedTestResultException("Found a row in FileTableLastUpdate that specified a storage account that was not configured in stf.xml.");
            }

            BlobClient blobClient = new BlobClient(XlfsConfiguration.XlfsBlobStorage[storageAccount]);

            //Blocks are stored in the container by TitleID with a subpath of Xuid\Filename
            blobClient.BlobContainer = fileEntry.TitleId.ToString("x8"); //containers cannot be uppercase
            string filePath = BlobTableClient.GetStoragePath(xuid, fileName, fileEntry.TransactionId);
            Stream fileStream = blobClient.GetBlobAsStream(filePath);

            return fileStream;
        }

        /// <summary>
        /// ReadFile to access the Cloud directly to read the file rather than the Admin FD
        /// This version will only search in a single partition for the file rather than accross all partitions
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="titleID"></param>
        /// <param name="lastUpdate">UTC DateTime partition to search for the file</param>
        /// <returns>Stream to access the file in blob storage</returns>
        public Stream ReadFile(ulong xuid, string fileName, uint titleID, DateTime lastUpdate)
        {
            string rowKey = FileTableLastUpdateClient.GetRowKey(xuid, titleID, fileName);

            // Find filename in the XUID Files table and get the storage account/path it's in
            List<FileTableLastUpdateEntry> fileList = _fileTableLastUpdateClient.SelectFile(xuid, titleID, fileName, lastUpdate);
            if (fileList.Count != 1)
                throw new FileNotFoundException("Expected 1 file back from XUID table got " + fileList.Count, rowKey);
            FileTableLastUpdateEntry fileEntry = fileList[0];

            // Look up in storage accounts table and retrieve the account name/key/address for the file
            string storageAccount = fileEntry.StorageAccount;

            // Create a BlobClient for the account and retrieve the file via GetBlockAsStream if single block file
            if(!XlfsConfiguration.XlfsBlobStorage.ContainsKey(storageAccount))
            {
                throw new UnexpectedTestResultException("Found a row in FileTableLastUpdate that specified a storage account that was not configured in stf.xml.");
            }

            BlobClient blobClient = new BlobClient(XlfsConfiguration.XlfsBlobStorage[storageAccount]);

            //Blocks are stored in the container by TitleID with a subpath of Xuid\Filename
            blobClient.BlobContainer = fileEntry.TitleId.ToString("x8"); //containers cannot be uppercase
            string filePath = BlobTableClient.GetStoragePath(xuid, fileName, fileEntry.TransactionId);
            Stream fileStream = blobClient.GetBlobAsStream(filePath);

            return fileStream;
        }

        /// <summary>
        /// Read Properties to access the Cloud directly to read the file rather than the Admin FD
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="titleID"></param>
        /// <returns>Stream to access the file in blob storage</returns>
        public BlobProperties ReadFileProperties(ulong xuid, string fileName, uint titleID)
        {
            string rowKey = FileTableLastUpdateClient.GetRowKey(xuid, titleID, fileName);

            // Find filename in the XUID Files table and get the storage account/path it's in
            List<FileTableLastUpdateEntry> fileList = _fileTableLastUpdateClient.SelectFile(xuid, titleID, fileName);
            if (fileList.Count != 1)
                throw new FileNotFoundException("Expected 1 file back from XUID table got " + fileList.Count, rowKey);
            FileTableLastUpdateEntry fileEntry = fileList[0];

            // Look up in storage accounts table and retrieve the account name/key/address for the file
            string storageAccount = fileEntry.StorageAccount;

            // Create a BlobClient for the account and retrieve the file via GetBlockAsStream if single block file
            if (!XlfsConfiguration.XlfsBlobStorage.ContainsKey(storageAccount))
            {
                throw new UnexpectedTestResultException("Found a row in FileTableLastUpdate that specified a storage account that was not configured in stf.xml.");
            }

            BlobClient blobClient = new BlobClient(XlfsConfiguration.XlfsBlobStorage[storageAccount]);

            //Blocks are stored in the container by TitleID with a subpath of Xuid\Filename
            blobClient.BlobContainer = fileEntry.TitleId.ToString("x8"); //containers cannot be uppercase
            string filePath = BlobTableClient.GetStoragePath(xuid, fileName, fileEntry.TransactionId);
            BlobProperties blobProperties = blobClient.GetBlobProperties(filePath);

            return blobProperties;
        }

        /// <summary>
        /// Read Properties to access the Cloud directly to read the file rather than the Admin FD
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="titleID"></param>
        /// <returns>Stream to access the file in blob storage</returns>
        public string ReadFileMD5(ulong xuid, string fileName, uint titleID)
        {
            string rowKey = FileTableLastUpdateClient.GetRowKey(xuid, titleID, fileName);

            // Find filename in the XUID Files table and get the storage account/path it's in
            List<FileTableLastUpdateEntry> fileList = _fileTableLastUpdateClient.SelectFile(xuid, titleID, fileName);
            if (fileList.Count != 1)
                throw new FileNotFoundException("Expected 1 file back from XUID table got " + fileList.Count, rowKey);
            FileTableLastUpdateEntry fileEntry = fileList[0];

            // Look up in storage accounts table and retrieve the account name/key/address for the file
            string storageAccount = fileEntry.StorageAccount;

            // Create a BlobClient for the account and retrieve the file via GetBlockAsStream if single block file
            if (!XlfsConfiguration.XlfsBlobStorage.ContainsKey(storageAccount))
            {
                throw new UnexpectedTestResultException("Found a row in FileTableLastUpdate that specified a storage account that was not configured in stf.xml.");
            }

            BlobClient blobClient = new BlobClient(XlfsConfiguration.XlfsBlobStorage[storageAccount]);

            //Blocks are stored in the container by TitleID with a subpath of Xuid\Filename
            blobClient.BlobContainer = fileEntry.TitleId.ToString("x8"); //containers cannot be uppercase
            string filePath = BlobTableClient.GetStoragePath(xuid, fileName, fileEntry.TransactionId);
            string blobMD5 = blobClient.GetBlobMD5(filePath);

            return blobMD5;
        }

        /// <summary>
        /// Read the transactionId specific to a FileEntry
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="titleID"></param>
        /// <returns>Stream to access the file in blob storage</returns>
        public string ReadFileTransactionId(ulong xuid, string fileName, uint titleID)
        {
            string rowKey = FileTableLastUpdateClient.GetRowKey(xuid, titleID, fileName);

            // Find filename in the XUID Files table and get the storage account/path it's in
            List<FileTableLastUpdateEntry> fileList = _fileTableLastUpdateClient.SelectFile(xuid, titleID, fileName);
            if (fileList.Count != 1)
                throw new FileNotFoundException("Expected 1 file back from XUID table got " + fileList.Count, rowKey);
            string transactionId = fileList[0].TransactionId;

            return transactionId;
        }
        #endregion

        #region FileTable WriteFile
        /// <summary>
        /// WriteFile to simulate the Write done by the front door
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="titleID"></param>
        /// <param name="fileStream"></param>
        /// <returns>bool indicating success if true</returns>
        public bool WriteFile(ulong xuid, string fileName, uint titleID, Stream fileStream)
        {
            string transactionId = Guid.NewGuid().ToString("N");
            return WriteFile(xuid, fileName, titleID, transactionId, DateTime.UtcNow, fileStream);
        }

        /// <summary>
        /// WriteFile to simulate the Write done by the front door
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="titleID"></param>
        /// <param name="lastUpdate"></param>
        /// <param name="fileStream"></param>
        /// <returns></returns>
        public bool WriteFile(ulong xuid, string fileName, uint titleID, string transactionId, DateTime lastUpdate, Stream fileStream)
        {
            //MD5 may be calculated differently. Need to call the server code to generate this if it changes
            long fileSize = fileStream.Length;
            string rowKey = FileTableLastUpdateClient.GetRowKey(xuid, titleID, fileName);
            //string fileHash = BlobClient.GetMD5HashString(fileStream);
            return WriteFile(xuid, rowKey, fileName, titleID, transactionId, fileSize, lastUpdate, fileStream);
        }

        /// <summary>
        /// Full Parameter suite to allow "incorrect" parameters (ex. rowKey filename not the same as the FileName column in the XUID table)
        /// </summary>
        /// <returns>bool indicating success if true</returns>
        public bool WriteFile(ulong xuid, string rowKey, string fileName, uint titleID, string transactionId, long fileSize, DateTime lastUpdate, Stream fileStream)
        {
            FileTableLastUpdateEntry fileEntry;
            string partitionKey = FileTableLastUpdateClient.GetPartitionKey(xuid, titleID, fileName, lastUpdate);

            // Find filename in the XUID and create an entry if it doesn't exist
            List<FileTableLastUpdateEntry> fileList = _fileTableLastUpdateClient.SelectFile(partitionKey, rowKey);
            if (fileList.Count == 0)
            {
                //Create a new entry since the file doesn't exist
                fileEntry = new FileTableLastUpdateEntry();
                fileEntry.PartitionKey = partitionKey;
                fileEntry.RowKey = rowKey;
                //fileEntry.RowKey = FileTableLastUpdateClient.GetXuidFileName(xuid, fileName);
                fileEntry.Created = DateTime.UtcNow;

                // Grab a random blob storage account to store this file in.
                fileEntry.StorageAccount = GetRandomBlobStorageAccount().StorageAccount;
            }
            else if (fileList.Count == 1)
            {
                //Grab the existing file entry
                fileEntry = fileList[0];

                if (!XlfsConfiguration.XlfsBlobStorage.ContainsKey(fileEntry.StorageAccount))
                {
                    throw new UnexpectedTestResultException("Found a row in FileTableLastUpdate that specified a storage account that was not configured in stf.xml.");
                }

                //TODO: Clean up the old storage in Blob Storage
            }
            else
                throw new ArgumentOutOfRangeException("fileList", "Expected 0 or 1 file back from XUID table got " + fileList.Count);

            // Create a BlobClient for the account and put the file via PutBlock if single block file
            // Add code to put BlockList?
            BlobClient blobClient = new BlobClient(XlfsConfiguration.XlfsBlobStorage[fileEntry.StorageAccount]);

            //Blocks are stored in the container by TitleID with a subpath of Xuid\Filename
            blobClient.BlobContainer = titleID.ToString("x8"); //containers cannot be uppercase
            blobClient.CreateContainer(blobClient.BlobContainer);
            string filePath = BlobTableClient.GetStoragePath(xuid, fileName, transactionId);
            blobClient.PutBlob(filePath, fileStream);

            //use new parameters to update values
            fileEntry.UserXuid = unchecked((long)xuid);
            fileEntry.Filename = fileName;
            fileEntry.LastUpdate = lastUpdate;
            fileEntry.TitleId = unchecked((int)titleID);
            fileEntry.Size = fileSize;
            fileEntry.TransactionId = transactionId;

            //update the FileTable table
            if(fileList.Count == 0)
                _fileTableLastUpdateClient.AddFileTableEntry(fileEntry);
            else            
                _fileTableLastUpdateClient.UpdateFileTableEntry(fileEntry);

            return true;
        }
        #endregion

        #region FileTable RemoveFile
        /// <summary>
        /// Removes a file from storage.
        /// Searches accross all partitions and may be slow.
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="titleID"></param>
        /// <returns></returns>
        public bool RemoveFile(ulong xuid, string fileName, uint titleID)
        {
            bool deleteSucceed = false;
            string rowKey = FileTableLastUpdateClient.GetRowKey(xuid, titleID, fileName);

            // Find filename in the XUID Files table and get the storage account/path it's in
            List<FileTableLastUpdateEntry> fileList = _fileTableLastUpdateClient.SelectFile(xuid, titleID, fileName);
            if (fileList.Count != 1)
                throw new FileNotFoundException("Expected 1 file back from XUID table got " + fileList.Count, rowKey);

            FileTableLastUpdateEntry fileEntry = fileList[0];

            // Look up in storage accounts table and retrieve the account name/key/address for the file
            string storageAccount = fileEntry.StorageAccount;

            // Create a BlobClient for the account and retrieve the file via GetBlockAsStream if single block file
            if (!XlfsConfiguration.XlfsBlobStorage.ContainsKey(storageAccount))
            {
                throw new UnexpectedTestResultException("Found a row in FileTableLastUpdate that specified a storage account that was not configured in stf.xml.");
            }

            BlobClient blobClient = new BlobClient(XlfsConfiguration.XlfsBlobStorage[storageAccount]);

            //Store the block in the container by PartitionKey, TitleID or XUID?
            blobClient.BlobContainer = fileEntry.TitleId.ToString("x8"); //containers cannot be uppercase
            string filePath = BlobTableClient.GetStoragePath(xuid, fileEntry.Filename, fileEntry.TransactionId);
            try
            {
                deleteSucceed = blobClient.DeleteBlob(filePath);
            }
            catch
            {
                deleteSucceed = false;
            }

            //Clean up the entry from the XUID table if the blob deleted (should we clean up the table regardless?
            _fileTableLastUpdateClient.DeleteFileTableEntry(fileEntry);

            return deleteSucceed;
        }

        /// <summary>
        /// Removes a file from XLFS Storage from a specific partition
        /// Faster search that only removes from a specific UTC DateTime partition
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="titleID"></param>
        /// <param name="lastUpdate">UTC DateTime specifying the file partition to search</param>
        /// <returns></returns>
        public bool RemoveFile(ulong xuid, string fileName, uint titleID, DateTime lastUpdate)
        {
            bool deleteSucceed;
            string rowKey = FileTableLastUpdateClient.GetRowKey(xuid, titleID, fileName);

            // Find filename in the XUID Files table and get the storage account/path it's in
            List<FileTableLastUpdateEntry> fileList = _fileTableLastUpdateClient.SelectFile(xuid, titleID, fileName, lastUpdate);
            if (fileList.Count != 1)
                throw new FileNotFoundException("Expected 1 file back from XUID table got " + fileList.Count, rowKey);

            FileTableLastUpdateEntry fileEntry = fileList[0];

            // Look up in storage accounts table and retrieve the account name/key/address for the file
            string storageAccount = fileEntry.StorageAccount;

            // Create a BlobClient for the account and retrieve the file via GetBlockAsStream if single block file
            if (!XlfsConfiguration.XlfsBlobStorage.ContainsKey(storageAccount))
            {
                throw new UnexpectedTestResultException("Found a row in FileTableLastUpdate that specified a storage account that was not configured in stf.xml.");
            }

            BlobClient blobClient = new BlobClient(XlfsConfiguration.XlfsBlobStorage[storageAccount]);

            //Store the block in the container by PartitionKey, TitleID or XUID?
            blobClient.BlobContainer = fileEntry.TitleId.ToString("x8"); //containers cannot be uppercase
            string filePath = BlobTableClient.GetStoragePath(xuid, fileEntry.Filename, fileEntry.TransactionId);
            try
            {
                deleteSucceed = blobClient.DeleteBlob(filePath);
            }
            catch
            {
                deleteSucceed = false;
            }

            //Clean up the entry from the XUID table if the blob deleted (should we clean up the table regardless?
            _fileTableLastUpdateClient.DeleteFileTableEntry(fileEntry);

            return deleteSucceed;
        }

        /// <summary>
        /// "Safe" version of the function above that catches errors. Useful for test clean up when a failure to remove
        /// doesn't mean a test case failure.
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="titleID"></param>
        /// <returns></returns>
        public bool SafeRemoveFile(ulong xuid, string fileName, uint titleID)
        {
            bool deleteSucceed = false;
            try
            {
                deleteSucceed = RemoveFile(xuid, fileName, titleID);
            }
            catch(Exception ex)
            {
                Global.RO.Warn(ex.ToString());
            }
            return deleteSucceed;
        }

        /// <summary>
        /// "Safe" version of the function above that catches errors. Useful for test clean up when a failure to remove
        /// doesn't mean a test case failure.
        /// </summary>
        /// <param name="xuid"></param>
        /// <param name="fileName"></param>
        /// <param name="titleID"></param>
        /// <param name="lastUpdate"></param>
        /// <returns></returns>
        public bool SafeRemoveFile(ulong xuid, string fileName, uint titleID, DateTime lastUpdate)
        {
            bool deleteSucceed = false;
            try
            {
                deleteSucceed = RemoveFile(xuid, fileName, titleID, lastUpdate);
            }
            catch (Exception ex)
            {
                Global.RO.Warn(ex.ToString());
            }
            return deleteSucceed;
        }

        /// <summary>
        /// Iterates through all files in the file table removing the blob and table entry.
        /// Will be slow for large tables
        /// </summary>
        /// <returns></returns>
        public bool ClearFileList()
        {
            bool clearSucceed = true;
            int fileCount = 0;
            IEnumerable<FileTableLastUpdateEntry> fileList = _fileTableLastUpdateClient.SelectIEnumerable();
            foreach (FileTableLastUpdateEntry fileEntry in fileList)
            {
                bool fileSucceed = SafeRemoveFile(
                    (ulong)fileEntry.UserXuid,
                    fileEntry.Filename, (uint)fileEntry.TitleId, fileEntry.LastUpdate.Value);
                clearSucceed = clearSucceed && fileSucceed;
                fileCount++;
                if (fileCount % 500 == 0)
                {
                    Global.RO.Debug("{0} files deleted.", fileCount);
                }
            }
            Global.RO.Success("{0} file(s) deleted.", fileCount);

            return clearSucceed;
        }

        /// <summary>
        /// Iterates through all files in the file table removing the blob and table entry.
        /// Will be slow for large tables
        /// </summary>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <returns></returns>
        public bool ClearFileList(DateTime startDate, DateTime endDate)
        {
            bool clearSucceed = true;
            int fileCount = 0;
            List<FileTableLastUpdateEntry> fileList = _fileTableLastUpdateClient.SelectTimeSpan(startDate, endDate);
            foreach (FileTableLastUpdateEntry fileEntry in fileList)
            {
                bool fileSucceed = SafeRemoveFile(
                    (ulong)fileEntry.UserXuid,
                    fileEntry.Filename, (uint)fileEntry.TitleId, fileEntry.LastUpdate.Value);
                clearSucceed = clearSucceed && fileSucceed;
                fileCount++;
                if (fileCount % 500 == 0)
                {
                    Global.RO.Debug("{0} files deleted.", fileCount);
                }
            }
            Global.RO.Success("{0} file(s) deleted.", fileCount);

            return clearSucceed;
        }

        private static void ClearBlobs(BlobClient blobClient)
        {
            List<string> containerList = blobClient.GetContainers();
            foreach (string container in containerList)
            {
                int titleId;
                if ((container.Length == 8) &&
                    int.TryParse(container, System.Globalization.NumberStyles.HexNumber, null, out titleId))
                {
                    Global.RO.Debug("Deleting container: {0}", container);
                    if (blobClient.DeleteContainer(container))
                        Global.RO.Debug("Deleted container: {0}", container);
                }
            }
        }

        /// <summary>
        /// Fast clearing of storage rather than walking the File and Blob Tables
        /// Clears all blob storage that has containers that are valid titleIds
        /// and drops and recreates the Blob and File Tables
        /// </summary>
        public void ClearStorage()
        {
            if (XlfsConfiguration.XlfsBlobStorage.Count != 0)
            {
                foreach (StorageAccountInformation info in XlfsConfiguration.XlfsBlobStorage.Values)
                {
                    //Need to go through each Storage Account
                    BlobClient blobClient = new BlobClient(info);
                    blobClient.BlobContainer = "fffe07d1";
                    ClearBlobs(blobClient);
                }
            }

            Global.RO.Debug("Clearing File Table.");
            FileTableLastUpdateClient fileClient = new FileTableLastUpdateClient();
            fileClient.ClearTable();

            Global.RO.Debug("Clearing Blob Table.");
            BlobTableClient blobfileClient = new BlobTableClient();
            blobfileClient.ClearTable();

            Global.RO.Debug("Clearing Storage Account Table.");
            StorageAccountTableClient storageAccountTableClient = new StorageAccountTableClient();
            storageAccountTableClient.ClearTable();

        }
        #endregion

        #region BlobFileTable Functions
        public bool WriteBlobFile(ulong xuid, Guid transactionGuid, string fileName, uint titleID, Stream fileStream)
        {
            return WriteBlobFile(xuid, transactionGuid.ToString("N"), fileName, titleID, fileStream);
        }

        public bool WriteBlobFile(ulong xuid, string transactionId, string fileName, uint titleID, Stream fileStream)
        {
            //MD5 may be calculated differently. Need to call the server code to generate this if it changes
            string fileMD5 = fileStream.GetHashCode().ToString("X16");
            return WriteBlobFile(xuid, transactionId, fileName, titleID, fileMD5, fileStream);
        }

        /// <summary>
        /// BlobTable is the "temporary" table for uploads to be stored during upload. UploadEnd() will move the entries to the FileTable
        /// The rowKey in this table is a Guid transaction ID
        /// </summary>
        /// <returns>bool indicating success if true</returns>
        public bool WriteBlobFile(ulong xuid, string rowKey, string fileName, uint titleID, string fileMD5, Stream fileStream)
        {
            BlobTableEntry blobEntry;

            // Find filename in the XUID and create an entry if it doesn't exist
            List<BlobTableEntry> blobList = _blobTableClient.SelectBlob(xuid, rowKey);
            if (blobList.Count == 0)
            {
                //Create a new entry since the file doesn't exist
                blobEntry = new BlobTableEntry();
                blobEntry.PartitionKey = xuid.ToString("X16");
                blobEntry.RowKey = rowKey;

                blobEntry.StorageAccount = GetRandomBlobStorageAccount().StorageAccount;
            }
            else if (blobList.Count == 1)
            {
                //Grab the existing blob entry
                blobEntry = blobList[0];

                if (!XlfsConfiguration.XlfsBlobStorage.ContainsKey(blobEntry.StorageAccount))
                {
                    throw new UnexpectedTestResultException("Found a row in FileTableLastUpdate that specified a storage account that was not configured in stf.xml.");
                }
            }
            else
                throw new ArgumentOutOfRangeException("blobList", "Expected 0 or 1 file back from XUID table got " + blobList.Count);

            // Create a BlobClient for the account and put the file via PutBlock if single block file
            // Add code to put BlockList?
            BlobClient blobClient = new BlobClient(XlfsConfiguration.XlfsBlobStorage[blobEntry.StorageAccount]);

            //Blocks are stored in the container by TitleID with a subpath of Xuid\Blobname
            blobClient.BlobContainer = titleID.ToString("x8"); //containers cannot be uppercase
            blobClient.CreateContainer(blobClient.BlobContainer);
            string blobPath = BlobTableClient.GetStoragePath(xuid, fileName, rowKey);
            blobClient.PutBlob(blobPath, fileStream);

            //use new parameters to update values
            blobEntry.Filename = fileName;
            blobEntry.TitleId = unchecked((int)titleID);
            blobEntry.MD5 = fileMD5;

            //update the XUID table
            if (blobList.Count == 0)
                _blobTableClient.AddBlobTableEntry(blobEntry);
            else
                _blobTableClient.UpdateBlobTableEntry(blobEntry);

            return true;
        }

        public Stream ReadBlobFile(ulong xuid, string transactionId, string fileName, uint titleID)
        {
            // Find filename in the XUID Files table and get the storage account/path it's in
            List<BlobTableEntry> blobList = _blobTableClient.SelectBlob(xuid, transactionId);
            if (blobList.Count != 1)
                throw new FileNotFoundException("Expected 1 file back from XUID table got " + blobList.Count, transactionId);
            BlobTableEntry blobEntry = blobList[0];

            // Look up in storage accounts table and retrieve the account name/key/address for the file
            string storageAccount = blobEntry.StorageAccount;

            // Create a BlobClient for the account and retrieve the file via GetBlockAsStream if single block file
            if (!XlfsConfiguration.XlfsBlobStorage.ContainsKey(storageAccount))
            {
                throw new UnexpectedTestResultException("Found a row in FileTableLastUpdate that specified a storage account that was not configured in stf.xml.");
            }

            BlobClient blobClient = new BlobClient(XlfsConfiguration.XlfsBlobStorage[storageAccount]);

            //Blocks are stored in the container by TitleID with a subpath of Xuid\BlobName.Guid
            blobClient.BlobContainer = blobEntry.TitleId.ToString("x8"); //containers cannot be uppercase
            string blobPath = BlobTableClient.GetStoragePath(xuid, fileName, transactionId);
            Stream fileStream = blobClient.GetBlobAsStream(blobPath);

            return fileStream;
        }

        public bool RemoveBlobFile(ulong xuid, string transactionId, string fileName, uint titleID)
        {
            // Find filename in the XUID Files table and get the storage account/path it's in
            List<BlobTableEntry> blobList = _blobTableClient.SelectBlob(xuid, transactionId);
            if (blobList.Count != 1)
                throw new FileNotFoundException("Expected 1 file back from XUID table got " + blobList.Count, transactionId);
            BlobTableEntry blobEntry = blobList[0];

            // Look up in storage accounts table and retrieve the account name/key/address for the file
            string storageAccount = blobEntry.StorageAccount;

            // Create a BlobClient for the account and retrieve the file via GetBlockAsStream if single block file
            if (!XlfsConfiguration.XlfsBlobStorage.ContainsKey(storageAccount))
            {
                throw new UnexpectedTestResultException("Found a row in FileTableLastUpdate that specified a storage account that was not configured in stf.xml.");
            }

            BlobClient blobClient = new BlobClient(XlfsConfiguration.XlfsBlobStorage[storageAccount]);

            //Blocks are stored in the container by TitleID with a subpath of Xuid\BlobName.Guid
            blobClient.BlobContainer = blobEntry.TitleId.ToString("x8"); //containers cannot be uppercase
            string blobPath = BlobTableClient.GetStoragePath(xuid, fileName, transactionId);
            bool deleteSucceed = blobClient.DeleteBlob(blobPath);

            //Clean up the entry from the XUID table if the blob deleted (should we clean up the table regardless?
            //if (deleteSucceed)
            _blobTableClient.DeleteBlobTableEntry(blobEntry);

            return deleteSucceed;
        }

        public bool SafeRemoveBlobFile(ulong xuid, string transactionId, string fileName, uint titleID)
        {
            bool deleteSucceed = false;
            try
            {
                deleteSucceed = RemoveBlobFile(xuid, transactionId, fileName, titleID);
            }
            catch (Exception ex)
            {
                Global.RO.Warn(ex.ToString());
            }
            return deleteSucceed;
        }

        public bool ClearBlobFileList()
        {
            bool clearSucceed = true;
            List<BlobTableEntry> blobList = _blobTableClient.Select();
            foreach (BlobTableEntry blobEntry in blobList)
            {
                bool fileSucceed = SafeRemoveBlobFile(
                    UInt64.Parse(blobEntry.PartitionKey, System.Globalization.NumberStyles.HexNumber),
                    blobEntry.RowKey, blobEntry.Filename, (uint)blobEntry.TitleId);
                clearSucceed = clearSucceed && fileSucceed;
            }

            return clearSucceed;
        }
        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\XlfsTestIsWriteFileEntriesComplete.cs ===
using System;
using System.Net;
using System.Text;
using System.Collections.Generic;
using System.Xml;
using System.Xml.XPath;
using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    public class XlfsTestIsWriteFileEntriesComplete : XlfsWebRequest
    {
        [HttpQueryParameter("threadid")]
        public Int32? ThreadId { get; set; }

        public Boolean IsComplete { get; protected set; }
        public Boolean Succeeded { get; protected set; }
        public TimeSpan ExecutionTime { get; protected set; }
        public String ErrorString { get; protected set; }

        protected override string MethodName { get { return "xlfsTestIsWriteFileEntriesComplete.ashx"; } }

        public override bool Execute()
        {
            return base.Execute(XlfsTestServer);
        }

        protected override void ProcessResponse(HttpWebResponse response)
        {
            string isCompleteString = response.Headers["complete"];
            bool isComplete = false;
            if (Boolean.TryParse(isCompleteString, out isComplete) == false)
                isComplete = false;
            if (isComplete == true)
            {
                string succeededString = response.Headers["succeeded"];
                bool succeeded = false;
                if (Boolean.TryParse(succeededString, out succeeded) == true)
                    Succeeded = succeeded;
                string executionTimeString = response.Headers["executiontime"];
                TimeSpan executionTime;
                if (TimeSpan.TryParse(executionTimeString, out executionTime) == true)
                    ExecutionTime = executionTime;
                ErrorString = response.Headers["errorstring"];
            }
            IsComplete = isComplete;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\XlfsTestWriteFileEntries.cs ===
using System;
using System.Net;
using System.Text;
using System.Collections.Generic;
using System.Xml;
using System.Xml.XPath;
using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    public class XlfsTestWriteFileEntries : XlfsWebRequest
    {
        [HttpQueryParameter("start")]
        public DateTime? StartTime { get; set; }
        [HttpQueryParameter("end")]
        public DateTime? EndTime { get; set; }
        [HttpQueryParameter("titleid", FormatString = "{0:X8}")]
        public UInt32? TitleId { get; set; }
        [HttpQueryParameter("xuid", FormatString = "{0:X16}")]
        public UInt64? UserXuid { get; set; }
        [HttpQueryParameter("files")]
        public UInt32? FileCount { get; set; }

        public Int32 ThreadId { get; protected set; }

        protected override string MethodName { get { return "xlfsTestWriteFileEntries.ashx"; } }

        public override bool Execute()
        {
            return base.Execute(XlfsTestServer);
        }

        protected override void ProcessResponse(HttpWebResponse response)
        {
            string threadIdString = response.Headers["threadid"];
            int threadId = 0;
            if (Int32.TryParse(threadIdString, out threadId) == false)
                threadId = 0;
            ThreadId = threadId;
        }

        public static bool WaitForComplete(int threadId, int timeout)
        {
            bool isComplete = false;
            XlfsTestIsWriteFileEntriesComplete isCompleteReq = new XlfsTestIsWriteFileEntriesComplete();
            isCompleteReq.ThreadId = threadId;

            DateTime startTime = DateTime.Now;
            do
            {
                System.Threading.Thread.Sleep(10000);
                if (isCompleteReq.Execute())
                    isComplete = isCompleteReq.IsComplete;
            }
            while ((isComplete == false) && (DateTime.Now - startTime < new TimeSpan(0, 0, timeout)));
            if (isComplete == true)
            {
                if (isCompleteReq.Succeeded == true)
                {
                    Global.RO.Debug("Batch Create Files completed in {0} with succeeded: {1}", isCompleteReq.ExecutionTime, isCompleteReq.Succeeded);
                }
                else
                {
                    Global.RO.Debug("Batch Create Files completed in {0} with succeeded: {1} - {2}", isCompleteReq.ExecutionTime, isCompleteReq.Succeeded, isCompleteReq.ErrorString);
                }
            }

            return isComplete;
        }

        public bool WaitForComplete(int timeout)
        {
            return WaitForComplete(ThreadId, timeout);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\XlfsConfiguration.cs ===
﻿using System;
using System.Collections.Generic;
using System.Xml;
using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    [System.ComponentModel.Description("Storage Account Information")]
    [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
    public class StorageAccountInformation
    {
        public string CloudBaseAddress { get; set; }
        public string StorageAccount { get; set; }
        public string StorageKey { get; set; }
    }
    
    public class XlfsConfiguration
    {
        private static Uri _xlfsFdUri;
        public static Uri XlfsFdUri
        {
            get
            {
                if (_xlfsFdUri != null)
                {
                    return _xlfsFdUri;
                }

                UriBuilder ub = new UriBuilder();
                XmlNodeList xlfsNodeList = Global.Config.GetElementsByTagName("xlfs");
                if (xlfsNodeList.Count == 0)
                {
                    ub.Scheme = "http";
                    ub.Host = "127.0.0.1";
                    ub.Port = 81;
                }
                else
                {
                    XmlNode xlfsNode = xlfsNodeList[0];

                    try { ub.Scheme = xlfsNode.Attributes["scheme"].Value; }
                    catch { ub.Scheme = "http"; }
                    try { ub.Host = xlfsNode.Attributes["server"].Value; }
                    catch { ub.Host = "127.0.0.1"; }
                    try { ub.Port = Int32.Parse(xlfsNode.Attributes["port"].Value); }
                    catch { ub.Port = 81; }
                }

                _xlfsFdUri = ub.Uri;
                return _xlfsFdUri;
            }

            set { _xlfsFdUri = value; }
        }

        private static Uri _xlfsAdminFdUri;
        public static Uri XlfsAdminFdUri
        {
            get
            {
                if (_xlfsAdminFdUri != null)
                {
                    return _xlfsAdminFdUri;
                }

                UriBuilder ub = new UriBuilder();
                XmlNodeList xlfsNodeList = Global.Config.GetElementsByTagName("xlfsAdmin");
                if (xlfsNodeList.Count == 0)
                {
                    ub.Scheme = "http";
                    ub.Host = "127.0.0.1";
                    ub.Port = 8080;
                }
                else
                {
                    XmlNode xlfsNode = xlfsNodeList[0];

                    try { ub.Scheme = xlfsNode.Attributes["scheme"].Value; }
                    catch { ub.Scheme = "http"; }
                    try { ub.Host = xlfsNode.Attributes["server"].Value; }
                    catch { ub.Host = "127.0.0.1"; }
                    try { ub.Port = Int32.Parse(xlfsNode.Attributes["port"].Value); }
                    catch { ub.Port = 8080; }
                }

                _xlfsAdminFdUri = ub.Uri;
                return _xlfsAdminFdUri;
            }

            set { _xlfsAdminFdUri = value; }
        }

        private static Uri _xlfsTestFdUri;
        public static Uri XlfsTestFdUri
        {
            get
            {
                if (_xlfsTestFdUri != null)
                {
                    return _xlfsTestFdUri;
                }

                UriBuilder ub = new UriBuilder();
                XmlNodeList xlfsNodeList = Global.Config.GetElementsByTagName("xlfsTest");
                if (xlfsNodeList.Count == 0)
                {
                    ub.Scheme = "http";
                    ub.Host = "127.0.0.1";
                    ub.Port = 8085;
                }
                else
                {
                    XmlNode xlfsNode = xlfsNodeList[0];

                    try { ub.Scheme = xlfsNode.Attributes["scheme"].Value; }
                    catch { ub.Scheme = "http"; }
                    try { ub.Host = xlfsNode.Attributes["server"].Value; }
                    catch { ub.Host = "127.0.0.1"; }
                    try { ub.Port = Int32.Parse(xlfsNode.Attributes["port"].Value); }
                    catch { ub.Port = 8085; }
                }

                _xlfsTestFdUri = ub.Uri;
                return _xlfsTestFdUri;
            }

            set { _xlfsTestFdUri = value; }
        }

        private static StorageAccountInformation _xlfsTableStorage;
        public static StorageAccountInformation XlfsTableStorage
        {
            get
            {
                if (_xlfsTableStorage != null)
                {
                    return _xlfsTableStorage;
                }

                XmlNodeList xlfsTableNodes = Global.Config.GetElementsByTagName("xlfstable");
                if (xlfsTableNodes.Count == 0)
                {
                    _xlfsTableStorage = new StorageAccountInformation
                    {
                        CloudBaseAddress = "http://127.0.0.1:10002/devstoreaccount1",
                        StorageAccount = "devstoreaccount1",
                        StorageKey = "Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw=="
                    };
                }
                else
                {
                    XmlNode xlfsTableNode = xlfsTableNodes[0];

                    _xlfsTableStorage = new StorageAccountInformation
                    {
                        CloudBaseAddress =
                            xlfsTableNode.Attributes["cloudBaseAddress"].Value,
                        StorageAccount = xlfsTableNode.Attributes["storageAccount"].Value,
                        StorageKey = xlfsTableNode.Attributes["storageKey"].Value
                    };
                }

                return _xlfsTableStorage;
            }

            set { _xlfsTableStorage = value; }
        }

        private static StorageAccountInformation _xlfsQueueStorage;
        public static StorageAccountInformation XlfsQueueStorage
        {
            get
            {
                if (_xlfsQueueStorage != null)
                {
                    return _xlfsQueueStorage;
                }

                XmlNodeList xlfsQueueNodes = Global.Config.GetElementsByTagName("xlfsqueue");
                if (xlfsQueueNodes.Count == 0)
                {
                    _xlfsQueueStorage = new StorageAccountInformation
                    {
                        CloudBaseAddress = "http://127.0.0.1:10001/devstoreaccount1",
                        StorageAccount = "devstoreaccount1",
                        StorageKey = "Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw=="
                    };
                }
                else
                {
                    XmlNode xlfsQueueNode = xlfsQueueNodes[0];

                    _xlfsQueueStorage = new StorageAccountInformation
                    {
                        CloudBaseAddress =
                            xlfsQueueNode.Attributes["cloudBaseAddress"].Value,
                        StorageAccount = xlfsQueueNode.Attributes["storageAccount"].Value,
                        StorageKey = xlfsQueueNode.Attributes["storageKey"].Value
                    };
                }

                return _xlfsQueueStorage;
            }

            set { _xlfsQueueStorage = value; }
        }

        private static Dictionary<string, StorageAccountInformation> _xlfsBlobStorage;
        public static Dictionary<string, StorageAccountInformation> XlfsBlobStorage
        {
            get
            {
                if (_xlfsBlobStorage != null)
                {
                    return _xlfsBlobStorage;
                }

                Dictionary<string, StorageAccountInformation> blobStorageAccounts = new Dictionary<string, StorageAccountInformation>();

                // If there are storage accounts already defined in the table, then we'll use them over
                // <xlfsblob> elements in stf.xml.
                StorageAccountTableClient storageAccountTableClient = new StorageAccountTableClient();
                List<StorageAccountTableEntry> storageAccountListFromTable = storageAccountTableClient.Select();
                
                XmlNodeList xlfsBlobNodes = Global.Config.GetElementsByTagName("xlfsblob");

                if (storageAccountListFromTable.Count == 0 && xlfsBlobNodes.Count == 0)
                {
                    throw new UnexpectedTestResultException(
                        "No blob storage accounts defined in either the StorageAccountTable or in <xlfsblob> elements in stf.xml.  Unable to proceed with tests.");
                }

                if (storageAccountListFromTable.Count != 0)
                {
                    foreach (StorageAccountTableEntry entry in storageAccountListFromTable)
                    {
                        StorageAccountInformation storageAccountInformation = new StorageAccountInformation
                            {
                                StorageAccount = entry.PartitionKey,
                                StorageKey = entry.Key,
                                CloudBaseAddress = string.Format("https://{0}.blob.core.windows.net:443/", entry.PartitionKey)
                            };

                        blobStorageAccounts.Add(entry.PartitionKey, storageAccountInformation);
                    }
                }
                else if(xlfsBlobNodes.Count != 0)
                {
                    foreach (XmlNode xlfsBlobNode in xlfsBlobNodes)
                    {
                        StorageAccountInformation storageAccountInformation = new StorageAccountInformation
                            {
                                StorageAccount = xlfsBlobNode.Attributes["storageAccount"].Value,
                                StorageKey = xlfsBlobNode.Attributes["storageKey"].Value,
                                CloudBaseAddress = xlfsBlobNode.Attributes["cloudBaseAddress"].Value
                            };

                        blobStorageAccounts.Add(storageAccountInformation.StorageAccount, storageAccountInformation);
                    }
                }

                if (blobStorageAccounts.Count == 0)
                {
                    StorageAccountInformation storageAccountInformation = new StorageAccountInformation
                    {
                        CloudBaseAddress = "http://127.0.0.1:10002/devstoreaccount1",
                        StorageAccount = "devstoreaccount1",
                        StorageKey = "Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw=="
                    };

                    blobStorageAccounts.Add(storageAccountInformation.StorageAccount, storageAccountInformation);
                }

                _xlfsBlobStorage = blobStorageAccounts;
                return _xlfsBlobStorage;
            }

            set { _xlfsBlobStorage = value; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\XlfsUploadBegin.cs ===
﻿using System;
using System.Net;
using System.Collections.Generic;

using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    public class XlfsUploadBegin : XlfsWebRequest
    {
        [HttpQueryParameter("fn", Required=true)]
        public String FileName { get; set; }
        [HttpHeaderParameter("Content-MD5")]
        public Byte[] FileHash { get; set; }
        [HttpHeaderParameter("x-ms-on-behalf-user-xuid", FormatString = "0x{0:X16}")]
        public UInt64? UserXuid { get; set; }
        [HttpHeaderParameter("x-ms-on-behalf-titleid", FormatString = "0x{0:X8}")]
        public UInt32? TitleId { get; set; }
        [HttpHeaderParameter("x-ms-transaction-id", Required=false)]
        public String TransactionId { get; set; }

        public String StorageUri { get; protected set; }

        protected override string MethodName { get { return "UploadBegin.ashx"; } }

        protected override void ProcessResponse(HttpWebResponse response)
        {
            StorageUri = response.Headers[HttpResponseHeader.Location];

            string transactionId = response.Headers["x-ms-transaction-id"];
            TransactionId = transactionId;
        }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public XlfsUploadBegin()
        {}

        /// <summary>
        /// Copy constructor.
        /// </summary>
        /// <param name="beginReq"></param>
        public XlfsUploadBegin(XlfsUploadBegin beginReq)
        {
            FileName = beginReq.FileName;
            FileHash = beginReq.FileHash;
            UserXuid = beginReq.UserXuid;
            TitleId = beginReq.TitleId;
            TransactionId = beginReq.TransactionId;
            StorageUri = beginReq.StorageUri;
            SamlParameters = new ServerTestFramework.STS.GetSecurityTokenParameters(beginReq.SamlParameters);
        }

        public bool Verify()
        {
            bool verifyPassed = true;
            BlobTableClient blobTableClient = new BlobTableClient();
            List<BlobTableEntry> blobTableList = new List<BlobTableEntry>();
            blobTableList = blobTableClient.SelectBlob(UserXuid.Value, TransactionId);
            if (blobTableList.Count != 1)
            {
                Global.RO.Error("File not found in BlobTable");
                return false;
            }
            // UserXuid and the TransactionId are the PartitionKey and RowKey and don't need to be checked
            if (blobTableList[0].Filename != FileName)
            {
                Global.RO.Error("FileName in table does not match Request. {0} : {1}", blobTableList[0].Filename, FileName);
                Global.RO.Error("{0} : Request", FileName);
                Global.RO.Error("{0} : Server", blobTableList[0].Filename);
                verifyPassed = false;
            }
            if (blobTableList[0].TitleId != unchecked((int)TitleId))
            {
                Global.RO.Error("TitleId in table does not match Request. {0} : {1}", blobTableList[0].TitleId, TitleId);
                verifyPassed = false;
            }
            if (blobTableList[0].MD5 != Convert.ToBase64String(FileHash))
            {
                Global.RO.Error("MD5 in table does not match Request {0}:{1}", blobTableList[0].MD5, Convert.ToBase64String(FileHash));
                verifyPassed = false;
            }
            if (String.IsNullOrEmpty(blobTableList[0].StorageAccount) == true)
            {
                Global.RO.Error("StorageAccount in table was not set {0}", blobTableList[0].StorageAccount);
                verifyPassed = false;
            }
            return verifyPassed;
        }

        public void CleanUp()
        {
            if (UserXuid.HasValue == true)
            {
                BlobTableClient blobTableClient = new BlobTableClient();
                List<BlobTableEntry> blobTableList = blobTableClient.SelectBlob(UserXuid.Value, TransactionId);
                if (blobTableList.Count == 1)
                {
                    blobTableClient.SafeDeleteBlobTableEntry(blobTableList[0]);
                }
            }
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\StringServer\XrlGetTitleID.cs ===
using System;
using System.IO;
using System.Runtime.InteropServices;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Net;
using xonline.common.config;
using xonline.common.service;

namespace ServerTestFramework.LiveService.StringServer
{
	/// <summary>
	/// Summary description for XRLTitleIDRequest.
	/// </summary>
	public class XRLTitleIDRequest : XRLPayload
	{
		// 1 == TitleID look ups in V1
		public ushort wType;
		public ushort wLanguage;
		public ushort wNumTitles;
		[XRLPayloadFld(SizeParam="wNumTitles")]
		public uint[] rgdwTitleIDs;

		public XRLTitleIDRequest()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}

		protected override string GetServiceName()
		{
			return @"/msgserver/msgserver.ashx";
		}


		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}

		public bool Execute(out XRLTitleIDResponse response)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet=InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);

			response=null;
			if(bRet)
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					response = new XRLTitleIDResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
			}

			return uRet;
		}

		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

	}

	public class StringData : WireData
	{
		public ushort wStringSize;
		[XRLPayloadFld(SizeParam="wStringSize")]
		public string szString;
	}

	public class XRLTitleIDResponse : WireData
	{
		public ushort wNumStrings;
		[XRLPayloadFld(SizeParam="wNumStrings")]
		public StringData[] rgStringData;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\StringServer\XrlLogString.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Net;
using xonline.common.config;
using xonline.common.service;

using ServerTestFramework.LiveService.Vortex;

namespace ServerTestFramework.LiveService.StringServer
{    
    /// <summary>
    /// Summary description for XRLLogString.
    /// </summary>
    public class XRLLogString : XRLPayload
    {        
        public ushort logLinesLength;
        
        [XRLPayloadFld(SizeParam="logLinesLength")]
        public string ll;

        public virtual string logLine
        {
            get
            {
                return ll;
            }
            set
            {
                ll = value;                
            }
        }

        public XRLLogString()
        {
            ServiceId = XOService.StringService;
            this.Slot.AddService(XOService.StringService);
        }

        protected override string GetServiceName()
        {
            return @"/msgserver/logstring.ashx";
        }


        override public bool Execute()
        {                         
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
        }

        protected override void ReadResponse(MemoryStream responseStream)
        {
            // override this so base class doesn't throw exception
            // this is really handled by Execute
        }
    }

    /// <summary>
    /// Summary description for XRLLogString.
    /// </summary>
    public class XRLLogBinary : XRLLogString
    {
        [WireInfo(Serialize = false)] //Hide me!
        public int logBytesLength;

        [XRLPayloadFld(SizeParam = "logBytesLength")]
        public byte[] logBytes;

        public override string logLine
        {
            get
            {
                return ll;
            }
            set
            {
                ll = value;
                string[] strings = logLine.Split('|');
                List<VortexEtxField> fields = new List<VortexEtxField>();
                if (strings.Length >= 1)
                    fields.Add(new VortexEtxField(EtxFieldType.Special, 1, new VortexEtxField(EtxFieldType.String, 1, strings[0])));

                for (int k = 1; k < strings.Length; k++)
                    fields.Add(new VortexEtxField(EtxFieldType.String, (uint)k + 1, strings[k]));

                VortexEtxEvent evt = new VortexEtxEvent(fields, 1);
                VortexEtxMessage msg = new VortexEtxMessage(new VortexEtxEventBatch(evt), VortexProtocolType.DistMon);
                logBytes = msg.ToArray();
                logBytesLength = logBytes.Length;
            }
        }

        protected override string GetServiceName()
        {
            return @"/msgserver/logbinary.ashx";
        }        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\StringServer\XrlGetString.cs ===
using System;
using System.IO;
using System.Runtime.InteropServices;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Net;
using xonline.common.config;
using xonline.common.service;

namespace ServerTestFramework.LiveService.StringServer
{
	/// <summary>
	/// Summary description for XRLGetString.
	/// </summary>
	public class XRLGetString : XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint dwTitleID;
		public ushort wLanguage;
		public ushort wNumStrings;
		[XRLPayloadFld(SizeParam="wNumStrings")]
		public uint[] rgdwStringIDs;

		public XRLGetString()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}

		protected override string GetServiceName()
		{
			return @"/msgserver/getstring.ashx";
		}


		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}
		public bool Execute(out XRLGetStringResponse response,int receivetimeout)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			xAct.ReceiveTimeOut=receivetimeout;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);


			response=null;
			if(bRet)
			{

				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					response = new XRLGetStringResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
			}

			return uRet;
		}



		public bool Execute(out XRLGetStringResponse response)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet=InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);

			response=null;
			if(bRet)
			{

				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					response = new XRLGetStringResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
			}

			return uRet;
		}

		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

	}

	public class XRLGet2String : XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint dwTitleID;
		public ushort wNumStrings;
		public ushort wLocaleLen;


	        [XRLPayloadFld(SizeParam="wLocaleLen")]
        	public string           szLocale;

		[XRLPayloadFld(SizeParam="wNumStrings")]
        	public uint[]           rgdwStringIDs;

		public XRLGet2String()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}

		protected override string GetServiceName()
		{
			return @"/msgserver/getstring2.ashx";
		}


		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}
		public bool Execute(out XRLGetStringResponse response,int receivetimeout)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			xAct.ReceiveTimeOut=receivetimeout;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);


			response=null;
			if(bRet)
			{

				if( ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0)) || (xAct.XErr == HResult.S_FALSE))
				{
					response = new XRLGetStringResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					throw new UnexpectedTestResultException(" GetString: retval = "+bRet+" XERR="+XErr+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}



		public bool Execute(out XRLGetStringResponse response)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet=InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);

			response=null;
			if(bRet)
			{

				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					response = new XRLGetStringResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
			}

			return uRet;
		}

		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

	}

	public class XRLGet2String_TooLarge : XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint dwTitleID;
		public ushort wNumStrings;
		public ushort wLocaleLen;


		[XRLPayloadFld(SizeParam="wLocaleLen")]
		public string           szLocale;

		[XRLPayloadFld(SizeParam="wLocaleLen")]
		public uint[]           rgdwStringIDs;

		public XRLGet2String_TooLarge()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}

		protected override string GetServiceName()
		{
			return @"/msgserver/getstring2.ashx";
		}


		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}
		public bool Execute(out XRLGetStringResponse response,int receivetimeout)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			xAct.ReceiveTimeOut=receivetimeout;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);


			response=null;
			if(bRet)
			{

				if( ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0)) || (xAct.XErr == HResult.S_FALSE))
				{
					response = new XRLGetStringResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					throw new UnexpectedTestResultException(" GetString: retval = "+bRet+" XERR="+XErr+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}



		public bool Execute(out XRLGetStringResponse response)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet=InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);

			response=null;
			if(bRet)
			{

				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					response = new XRLGetStringResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
			}

			return uRet;
		}

		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

	}

	public class XRLGet2String_TooSmall : XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint dwTitleID;
		// removed field, makes packet length too short public ushort wNumStrings;
		public ushort wLocaleLen;


		[XRLPayloadFld(SizeParam="wLocaleLen")]
		public string           szLocale;

		[XRLPayloadFld(SizeParam="wLocaleLen")]
		public uint[]           rgdwStringIDs;

		public XRLGet2String_TooSmall()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}

		protected override string GetServiceName()
		{
			return @"/msgserver/getstring2.ashx";
		}


		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}
		public bool Execute(out XRLGetStringResponse response,int receivetimeout)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			xAct.ReceiveTimeOut=receivetimeout;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);


			response=null;
			if(bRet)
			{

				if( ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0)) || (xAct.XErr == HResult.S_FALSE))
				{
					response = new XRLGetStringResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					throw new UnexpectedTestResultException(" GetString: retval = "+bRet+" XERR="+XErr+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}



		public bool Execute(out XRLGetStringResponse response)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet=InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);

			response=null;
			if(bRet)
			{

				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					response = new XRLGetStringResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
			}

			return uRet;
		}

		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

	}


	public class XRLGetStringResponse : WireData
	{
		public ushort wNumStrings;
		[XRLPayloadFld(SizeParam="wNumStrings")]
		public StringData[] rgStringData;
	}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\StringServer\XrlAddString.cs ===
using System;
using System.IO;
using System.Runtime.InteropServices;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Net;
using xonline.common.config;
using xonline.common.service;

namespace ServerTestFramework.LiveService.StringServer
{
	/// <summary>
	/// Summary description for XRLAddString.
	/// </summary>
	public class XRLAddString : XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint dwTitleID;
		public uint dwStringID;   // 0xFFFFFFFF for server-determined ID
		public DateTime dtExpire;
		public ushort wDefLanguage=1;
		//public ushort wExpireMinutes;
		public byte cLangStrings;
		public bool fVetText;
		[XRLPayloadFld(SizeParam="cLangStrings")]
		public LanguageString[] rgLangStrings;

		public XRLAddString()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}

		protected override string GetServiceName()
		{
			return @"/msgserver/addstring.ashx";
		}


		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}

		public bool Execute(out XRLAddResponse response)
		{

			MemoryStream reqStream = new MemoryStream( 768 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);


			response=null;
			if(bRet)
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					response = new XRLAddResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					System.Console.WriteLine(" AddString: retval = "+bRet+" XERR="+XErr+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}

		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

	}

	public class LocaleString : WireData
	{
	        public ushort           wLocaleLen;
	        public ushort           wStringSize;

	        [WireInfo(SizeParam="wLocaleLen")]
	        public string           szLocale;

	        [WireInfo(SizeParam="wStringSize")]
        	public string           szString;
    	}

	public class LanguageString : WireData
	{
		public ushort           wLanguage;
		public ushort           wStringSize;

		[XRLPayloadFld(SizeParam="wStringSize")]
		public string           szString;
	}

	public class XRLAddResponse : WireData
	{
		public uint dwStringID;
	}

	public class XRLAdd2Response : WireData
	{
		public uint             dwStringID;
	    public ushort           wNumStrings;

		[XRLPayloadFld(SizeParam="wNumStrings")]
	    public uint[]           rghrString;
	}

	public class XRLAdd2String : XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint dwTitleID;
		public uint dwStringID;   // 0xFFFFFFFF for server-determined ID
		public DateTime dtExpire;
		public ushort wLocaleLen;
        	public byte cLocaleStrings;
		public bool fVetText;
		[XRLPayloadFld(SizeParam="wLocaleLen")]
	    public string           szDefaultLocale;

        [XRLPayloadFld(SizeParam="cLocaleStrings")]
	    public LocaleString[]   rgLocaleStrings;

		public XRLAdd2String()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}
		protected override string GetServiceName()
		{
			return "/msgserver/addstring2.ashx";
		}


		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}

		public bool Execute(out XRLAdd2Response response)
		{

			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);

			response=null;
			if(bRet)
			{
				if( ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0)) || (xAct.XErr == HResult.S_FALSE))
				{
					response = new XRLAdd2Response();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					response = new XRLAdd2Response();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
					throw new UnexpectedTestResultException("Add2String retval = "+bRet+" XERR="+ServerTestFramework.Global.XErrToString(XErr)+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}

		/*public bool ExecuteTooShort(out XRLAdd2Response response)
		{

			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );
			byte[] bytestream = reqStream.ToArray();
			byte[] shortbytestream = new byte[bytestream.GetLength(0)-10];
			for (int i=0; i < bytestream.GetLength(0) - 10; i++)
			{
				shortbytestream[i] = bytestream[i];
			}

			reqStream = new MemoryStream (shortbytestream);

			bool uRet = false;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);

			response=null;
			if(bRet)
			{
				if( ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0)) || (xAct.XErr == HResult.S_FALSE))
				{
					response = new XRLAdd2Response();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					response = new XRLAdd2Response();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
					throw new UnexpectedTestResultException("Add2String retval = "+bRet+" XERR="+ServerTestFramework.Global.XErrToString(XErr)+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}

		public bool ExecuteTooLong(out XRLAdd2Response response)
		{

			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );
			byte[] bytestream = reqStream.ToArray();
			byte[] shortbytestream = new byte[bytestream.GetLength(0)+10];
			for (int i=0; i < bytestream.GetLength(0); i++)
			{
				shortbytestream[i] = bytestream[i];
			}

			reqStream = new MemoryStream (shortbytestream);

			bool uRet = false;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);

			response=null;
			if(bRet)
			{
				if( ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0)) || (xAct.XErr == HResult.S_FALSE))
				{
					response = new XRLAdd2Response();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					response = new XRLAdd2Response();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
					throw new UnexpectedTestResultException("Add2String retval = "+bRet+" XERR="+ServerTestFramework.Global.XErrToString(XErr)+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}*/


		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

		public int MaxStringLen
		{
			// from xonline.common.protocol.StringDefs.MAX_STRINGSVR_STRING_LEN = 512;
			get
			{
				return 512;
			}
		}

	}

	public class XRLAdd2String_TooLarge : XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint dwTitleID;
		public uint dwStringID;   // 0xFFFFFFFF for server-determined ID
		public DateTime dtExpire;
		public ushort wLocaleLen;
		public byte cLocaleStrings;
		public bool fVetText;
		[XRLPayloadFld(SizeParam="wLocaleLen")]
		public string           szDefaultLocale;

		// Keep wiredata from complaining
		[XRLPayloadFld(SizeParam="wLocaleLen")]
		public LocaleString[]   rgLocaleStrings;
		// added field will make packet too large



		public XRLAdd2String_TooLarge()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}
		protected override string GetServiceName()
		{
			return "/msgserver/addstring2.ashx";
		}


		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}

		public bool Execute(out XRLAdd2Response response)
		{

			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);

			response=null;
			if(bRet)
			{
				if( ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0)) || (xAct.XErr == HResult.S_FALSE))
				{
					response = new XRLAdd2Response();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					response = new XRLAdd2Response();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
					throw new UnexpectedTestResultException("Add2String retval = "+bRet+" XERR="+ServerTestFramework.Global.XErrToString(XErr)+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}

		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

		public int MaxStringLen
		{
			// from xonline.common.protocol.StringDefs.MAX_STRINGSVR_STRING_LEN = 512;
			get
			{
				return 512;
			}
		}

	}

	public class XRLAdd2String_TooSmall : XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint dwTitleID;
		public uint dwStringID;   // 0xFFFFFFFF for server-determined ID
		public DateTime dtExpire;
		public ushort wLocaleLen;
		public byte cLocaleStrings;
		// removed field will make packet too large
		//public bool fVetText;
		[XRLPayloadFld(SizeParam="wLocaleLen")]
		public string           szDefaultLocale;

		[XRLPayloadFld(SizeParam="cLocaleStrings")]
		public LocaleString[]   rgLocaleStrings;

		public XRLAdd2String_TooSmall()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}
		protected override string GetServiceName()
		{
			return "/msgserver/addstring2.ashx";
		}


		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}

		public bool Execute(out XRLAdd2Response response)
		{

			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);

			response=null;
			if(bRet)
			{
				if( ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0)) || (xAct.XErr == HResult.S_FALSE))
				{
					response = new XRLAdd2Response();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					response = new XRLAdd2Response();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
					throw new UnexpectedTestResultException("Add2String retval = "+bRet+" XERR="+ServerTestFramework.Global.XErrToString(XErr)+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}

		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

		public int MaxStringLen
		{
			// from xonline.common.protocol.StringDefs.MAX_STRINGSVR_STRING_LEN = 512;
			get
			{
				return 512;
			}
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\XlfsUploadEnd.cs ===
﻿using System;
using System.Text;
using System.Net;
using System.Collections.Generic;
using ServerTestFramework;

using xonline.server.xlfs.common;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    public class XlfsUploadEnd : XlfsWebRequest
    {
        [HttpHeaderParameter("x-ms-on-behalf-user-xuid", FormatString = "0x{0:X16}")]
        public UInt64? UserXuid { get; set; }
        [HttpHeaderParameter("x-ms-on-behalf-titleid", FormatString = "0x{0:X8}")]
        public UInt32? TitleId { get; set; }
        [HttpHeaderParameter("x-ms-transaction-id")]
        public String TransactionId { get; set; }
        [HttpHeaderParameter("Content-MD5")]
        public Byte[] FileHash { get; set; }

        //Added FileName parameter to facilitate more efficient Verification to avoid table scan verifies
        public String FileName { get; set; }
        //Optional for verification
        public Int64? FileLength { get; set; }

        protected override string MethodName { get { return "UploadEnd.ashx"; } }

        protected override void ProcessResponse(HttpWebResponse response) { }

        public bool Verify()
        {
            bool verifyPassed = true;
            FileTableLastUpdateClient fileTableClient = new FileTableLastUpdateClient();
            List<FileTableLastUpdateEntry> fileList = new List<FileTableLastUpdateEntry>();
            if (String.IsNullOrEmpty(FileName))
            {
                //Table Scan search from available file info
                fileList = fileTableClient.SelectTransaction(UserXuid.Value, TransactionId);
            }
            else
            {
                //If we have the FileName do the more efficient SelectFile
                fileList = fileTableClient.SelectFile(UserXuid.Value, TitleId.Value, FileName, DateTimeOfExecute);
            }
            if (fileList.Count != 1)
            {
                Global.RO.Error("File not found in FileTable");
                return false;
            }
            if (String.IsNullOrEmpty(fileList[0].Filename) == true)
            {
                Global.RO.Error("FileName in table was not set {0}", fileList[0].Filename);
                verifyPassed = false;
            }
            if (fileList[0].TitleId != unchecked((int)TitleId))
            {
                Global.RO.Error("TitleId in table does not match Request {0}:{1}", fileList[0].TitleId, TitleId);
                verifyPassed = false;
            }
            if (fileList[0].TransactionId != TransactionId)
            {
                Global.RO.Error("TransactionId in table does not match Request {0}:{1}", fileList[0].TransactionId, TransactionId);
                verifyPassed = false;
            }
            if (String.IsNullOrEmpty(fileList[0].StorageAccount) == true)
            {
                Global.RO.Error("StorageAccount in table was not set {0}", fileList[0].StorageAccount);
                verifyPassed = false;
            }
            if ((FileLength.HasValue) == true && (fileList[0].Size != FileLength))
            {
                Global.RO.Error("FileLength in table does not match Request {0}:{1}", fileList[0].Size, FileLength);
                verifyPassed = false;
            }
            if (fileList[0].LastUpdate == null)
            {
                Global.RO.Error("LastUpdate in table was not set {0}", fileList[0].LastUpdate);
                verifyPassed = false;
            }

            //Check the BlobTable to make sure the UploadEnd removed the entry when updating the FileTable
            BlobTableClient blobTableClient = new BlobTableClient();
            List<BlobTableEntry> blobTableList = blobTableClient.SelectBlob(UserXuid.Value, TransactionId);
            if (blobTableList.Count != 0)
            {
                Global.RO.Error("File still found in BlobTable. Should have been cleaned up by UploadEnd");
                verifyPassed = false;
            }
            
            return verifyPassed;
        }

        public void CleanUp()
        {
            if ((UserXuid.HasValue == true) && (TitleId.HasValue == true))
            {
                FileTableLastUpdateClient fileTableClient = new FileTableLastUpdateClient();
                List<FileTableLastUpdateEntry> fileList;
                if (String.IsNullOrEmpty(FileName))
                {
                    //Table Scan search from available file info
                    fileList = fileTableClient.SelectTransaction(UserXuid.Value, TransactionId);
                }
                else
                {
                    //If we have the FileName do the more efficient SelectFile
                    fileList = fileTableClient.SelectFile(UserXuid.Value, TitleId.Value, FileName, DateTimeOfExecute);
                }
                if (fileList.Count == 1)
                {
                    XLFSClient xlfsClient = new XLFSClient();
                    xlfsClient.SafeRemoveFile(UserXuid.Value, fileList[0].Filename, TitleId.Value, DateTimeOfExecute);
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\Storage\Azure\XlfsWebRequest.cs ===
﻿using System;
using System.IO;
using System.Net;
using System.Text;
using System.Reflection;
using System.Collections.Generic;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using ServerTestFramework.STS;

namespace ServerTestFramework.LiveService.Storage.Azure
{
    public class XlfsWebRequest
    {
        public HttpWebRequest Request { get; protected set; }
        public HttpWebResponse Response { get; protected set; }

        public HttpStatusCode HttpStatus { get; protected set; }
        public WebExceptionStatus WebStatus { get; protected set; }
        public Exception RequestException { get; protected set; }
        public DateTime DateTimeOfExecute { get; protected set; }

        public Dictionary<String, String> CustomHeaders = new Dictionary<String, String>();
        public List<String> CustomQueryParams = new List<String>();

        protected static Uri XlfsServer { get { return XlfsConfiguration.XlfsFdUri; } }
        protected static Uri XlfsAdminServer { get { return XlfsConfiguration.XlfsAdminFdUri; } }
        protected static Uri XlfsTestServer { get { return XlfsConfiguration.XlfsTestFdUri; } }

        protected virtual String RequestMethod { get { return HttpMethod.Get; } }
        protected virtual String MethodName { get; set; }
        protected virtual String QueryString { get; set; }

        private GetSecurityTokenParameters samlParameters;
        public GetSecurityTokenParameters SamlParameters
        {
            get { return samlParameters; }
            set
            {
                if (value == null)
                {
                    samlParameters = null;
                    SecurityToken = null;
                }
                else
                {
                    samlParameters = new GetSecurityTokenParameters(value);
                    SecurityToken = SamlTokenUtil.GetSecurityToken(samlParameters);
                }
            }
        }

        [HttpHeaderParameter("X-Authorization", "XBL1.0 x")]
        public string SecurityToken { get; set; }

        protected X509Certificate2 requestCertificate;
        public String RequestCertificate
        {
            get { return (requestCertificate == null) ? "" : requestCertificate.Subject; }
            set
            {
                if (value != null)
                {
                    requestCertificate = GetCertificateBySubjectName(value, true);
                    if (requestCertificate == null)
                    {
                        Global.RO.Warn("Unable to find certificate {0}.  No certificate is being used by request.", value);
                    }
                }
                else
                {
                    requestCertificate = null;
                }
            }
        }

        public virtual bool Execute()
        {
            return Execute(XlfsServer);
        }

        public virtual bool Execute(String baseUri)
        {
            return Execute(new Uri(baseUri));
        }

        public virtual bool Execute(Uri baseUri)
        {
            RequestException = null;

            try
            {
                if (samlParameters != null)
                {
                    SecurityToken = SamlTokenUtil.GetSecurityToken(samlParameters);
                }

                Dictionary<String, String> headers = new Dictionary<String, String>(CustomHeaders);
                List<String> queryParameters = new List<String>(CustomQueryParams);

                Type t = GetType();
                PropertyInfo[] mis = t.GetProperties(BindingFlags.Public | BindingFlags.Instance);// | BindingFlags.GetField | BindingFlags.GetProperty);
                foreach (PropertyInfo mi in mis)
                {
                    // Get the value of the property
                    Object value = mi.GetValue(this, null);

                    // Check if it's a header
                    object[] headerParams = mi.GetCustomAttributes(typeof(HttpHeaderParameterAttribute), true);
                    if (headerParams.Length > 0)
                    {
                        HttpHeaderParameterAttribute headerParam = (HttpHeaderParameterAttribute)headerParams[0];
                        if (value == null && !headerParam.Required)
                        {
                            continue;
                        }
                        headers.Add(headerParam.Name, headerParam.GenerateParamString(value));
                    }

                    // Check if it's a query param
                    object[] queryParams = mi.GetCustomAttributes(typeof(HttpQueryParameterAttribute), true);
                    if (queryParams.Length > 0)
                    {
                        HttpQueryParameterAttribute queryParam = (HttpQueryParameterAttribute)queryParams[0];
                        if (value == null && !queryParam.Required)
                        {
                            continue;
                        }
                        queryParameters.Add(queryParam.GenerateParamString(value));
                    }
                }

                UriBuilder ub = new UriBuilder(baseUri);
                ub.Path = MethodName;
                ub.Query = String.Join("&", queryParameters.ToArray());

                Request = (HttpWebRequest)WebRequest.Create(ub.Uri);
                Request.Method = RequestMethod;

                foreach (String headerName in headers.Keys)
                {
                    Request.Headers.Add(headerName, headers[headerName]);
                }

                if (ub.Scheme == "https" && requestCertificate != null)
                {
                    Request.UseDefaultCredentials = false;
                    Request.AuthenticationLevel = AuthenticationLevel.MutualAuthRequired;
                    Request.ClientCertificates.Add(requestCertificate);
                }

                //Request.Headers.Add("X-Authorization", "x=" + securityToken);

                if (Request.Method == HttpMethod.Post)
                {
                    // Write the request body
                    WriteRequest(Request);
                }

                using (Response = (HttpWebResponse)Request.GetResponse())
                {
                    DateTimeOfExecute = DateTime.UtcNow;
                    ProcessResponse(Response);
                    Response.Close();
                }
            }
            catch (WebException we)
            {
                WebStatus = we.Status;
                HttpWebResponse r = we.Response as HttpWebResponse;
                if (r != null)
                {
                    HttpStatus = r.StatusCode;
                }

                RequestException = we;
            }

            return RequestException == null;
        }

        /// <summary>
        /// Retrieve a certificate from based on it's subject name
        /// </summary>
        /// <param name="certSubject">The subject name of the certificate to find</param>
        /// <param name="privateKeyRequired">If true, the certificate must have a private key</param>
        /// <returns>An instance of the certificate with the requested subject</returns>
        /// <remarks>
        /// This method checks in the CurrentUser store for the certificate.  If
        /// it's not found, it will check the LocalMachine store.
        /// </remarks>
        protected X509Certificate2 GetCertificateBySubjectName(string certSubject, bool privateKeyRequired)
        {
            X509Certificate2 certificate;

            // Look for the certificate in the user store
            certificate = GetCertificateBySubjectName(certSubject, privateKeyRequired, StoreLocation.CurrentUser);
            if(certificate == null)
            {
                // If it's not found, check the machine store
                certificate = GetCertificateBySubjectName(certSubject, privateKeyRequired, StoreLocation.LocalMachine);
            }

            return certificate;
        }

        /// <summary>
        /// Retrieve a certificate from the specified certificate store based on
        /// it's subject name
        /// </summary>
        /// <param name="certSubject">The subject name of the certificate to find</param>
        /// <param name="privateKeyRequired">If true, the certificate must have a private key</param>
        /// <returns>An instance of the certificate with the requested subject</returns>
        protected X509Certificate2 GetCertificateBySubjectName(String certSubject, bool privateKeyRequired, StoreLocation storeLocation)
        {
            X509Certificate2Collection matches;
            X509Store store = new X509Store(StoreName.My, storeLocation);
            store.Open(OpenFlags.ReadOnly);

            try
            {
                matches = store.Certificates.Find(X509FindType.FindBySubjectName, certSubject, false);
            }
            finally
            {
                store.Close();
            }

            if (matches == null || matches.Count == 0)
            {
                return null;
            }
            else if (matches.Count > 1)
            {
                Global.RO.Warn("More than 1 certificate found for Subject Name {0}.  Using first certificate.", certSubject);
            }

            X509Certificate2 certificate = matches[0];
            if (privateKeyRequired && certificate.HasPrivateKey == false)
            {
                return null;
            }

            return certificate;
        }

        protected virtual void WriteRequest(HttpWebRequest request) { request.ContentLength = 0; }

        protected virtual void ProcessResponse(HttpWebResponse response) { }

        public string GetExceptionString()
        {
            string errorString = RequestException.ToString();

            if ((RequestException.GetType() == typeof(WebException))
                && (Response != null))
            {
                WebException we = (WebException)RequestException;

                Stream responseStream = we.Response.GetResponseStream();

                byte[] responseBuffer = new byte[responseStream.Length];
                responseStream.Read(responseBuffer, 0, (int)responseStream.Length);

                UTF8Encoding utf8Encoding = new UTF8Encoding();
                errorString = utf8Encoding.GetString(responseBuffer);
            }
            return errorString;
        }

        // Argh, why isn't there an IParseable interface!?
        public static DateTime ParseDateTimeOrDefault(String inputString)
        {
            DateTime result;
            DateTime.TryParse(inputString, out result);
            return result;
        }

        public static Int32 ParseInt32OrDefault(String inputString)
        {
            Int32 result;
            Int32.TryParse(inputString, out result);
            return result;
        }

        public static Int64 ParseInt64OrDefault(String inputString)
        {
            Int64 result;
            Int64.TryParse(inputString, out result);
            return result;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestDB\TestDBConnection.cs ===
using System.Data.SqlClient;
using System.Xml;

using ServerTestFramework;

namespace ServerTestFramework.TestDB
{
    ///<summary> Used to open a connection with TestDB. </summary>
    public class TestDB
    {
        //reporting object for TestDB output.  Anything sent to this area will not be logged to TestDB itself.
        public static Report RO=new Report("TestDB");

        ///<summary> Opens a connection to the default TestDB.  You are responsible for closing the returned connection. </summary>
        public static SqlConnection OpenConnection()
        {
            //find regressiondb group
            XmlElement regEl=Global.Config.SelectSingleNode("/stf/config/regressiondb") as XmlElement;
            if(regEl==null)
            {
                throw new System.Exception("No regressiondb group is defined in global config.");
            }

            //grab the name of the server
            XmlNodeList nlist=regEl.SelectNodes("ip");
            if (nlist.Count==0)
            {
                throw new System.Exception("No regressiondb servers are defined in the global config.");
            }
            else if (nlist.Count>1)
            {
                TestDB.RO.Debug("More than 1 TestDB servers are defined.  Ignoring all but the first.");
            }

            //
            return OpenConnection(nlist[0].InnerText);
        }

        ///<summary> Opens a connection to a TestDB.  You are responsible for closing the returned connection. </summary>
        public static SqlConnection OpenConnection(string ipOrName)
        {
            SqlConnection c=new SqlConnection("Data Source="+ipOrName+";Initial Catalog=testdb;Integrated Security=SSPI");
            c.Open();
            return c;
        }
    };

    /// <summary> Used as a base class for classes that reuse a connection to TestDB. </summary>
    public class TestDBConnector: System.IDisposable
    {
        /// <summary> Connects to TestDB to prepare to read. </summary>
        public TestDBConnector()
        {
            sqlConnection=TestDB.OpenConnection();
        }

        /// <summary> Closes the connection to TestDB. </summary>
        public void Dispose()
        {
            if (sqlConnection!=null)
            {
                sqlConnection.Close();
            }
            sqlConnection=null;
        }

        //The sql connection to TestDB
        protected SqlConnection sqlConnection=null;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestDB\TestDBTree.cs ===
using System.Data.SqlClient;
using System.Collections.Generic;

using ServerTestFramework;

namespace ServerTestFramework.TestDB
{
    /*///<summary> A node in a tree that represents part of TestDB's node tree. </summary>
    public class LinkedTestDBNode
    {
        public LinkedTestDBNode Parent=null; //null if root
        public LinkedTestDBNode []Children=new LinkedTestDBNode[0]; //empty if none

        public int Id=0; //ID of the node in TestDB
        public string Name; //name of the node in TestDB

        public string FullName //fully qualitfied name of the node that uniquely identifies it from all other nodes
        {
            get
            {
                if (Parent==null)
                {
                    return Name;
                }

                return Parent.FullName+"."+Name;
            }
        }
    };*/
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\StringServer\XrlVetString.cs ===
using System;
using System.IO;
using System.Runtime.InteropServices;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Net;
using xonline.common.config;
using xonline.common.service;

namespace ServerTestFramework.LiveService.StringServer
{
	/// <summary>
	/// Summary description for XRLVetString.
	/// </summary>
	public class XRLVetString : XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint dwTitleID;
		public ushort wLanguage;
		public ushort wNumStrings;
		[XRLPayloadFld(SizeParam="wNumStrings")]
		public StringData[] rgStringData;

		public XRLVetString()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}

		protected override string GetServiceName()
		{
			return @"/msgserver/vetstring.ashx";
		}

		override public bool Execute()
		{
			//TODO:  Which server to target here?  Add new def to Servers.cs?
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}

		public bool Execute(out XRLVetResponse response)
		{

			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);


			response=null;
			if(bRet)
			{
				if( ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0)) || (xAct.XErr == HResult.S_FALSE))
				{
					response = new XRLVetResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					throw new UnexpectedTestResultException("VetString: retval = "+bRet+" XERR="+XErr+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}

		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

	}

	public class XRLVet2String : XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint dwTitleID;
		public uint dwFlags;
		public ushort wLocaleLen;
		public ushort wNumStrings;
		[XRLPayloadFld(SizeParam="wLocaleLen")]
        	public string           szLocale;

        	[XRLPayloadFld(SizeParam="wNumStrings")]
        	public StringData[]     rgStringData;

		public XRLVet2String()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}

		protected override string GetServiceName()
		{
			return @"/msgserver/vetstring2.ashx";
		}

		override public bool Execute()
		{
			//TODO:  Which server to target here?  Add new def to Servers.cs?
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}

		public bool Execute(out XRLVetResponse response)
		{

			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);


			response=null;
			if(bRet)
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					response = new XRLVetResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					System.Console.WriteLine("Vet2String: retval = "+bRet+" XERR="+XErr+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}

		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

		public int MaxStringLen
		{
			// from xonline.common.protocol.StringDefs.MAX_STRINGSVR_STRING_LEN = 512;
			get
			{
				return 512;
			}
		}
	}

	public class XRLVet2String_TooLarge : XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint dwTitleID;
		public uint dwFlags;
		public ushort wLocaleLen;
		public ushort wNumStrings;
		[XRLPayloadFld(SizeParam="wLocaleLen")]
		public string           szLocale;

		[XRLPayloadFld(SizeParam="wLocaleLen")]
		public StringData[]     rgStringData;

		public XRLVet2String_TooLarge()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}

		protected override string GetServiceName()
		{
			return @"/msgserver/vetstring2.ashx";
		}

		override public bool Execute()
		{
			//TODO:  Which server to target here?  Add new def to Servers.cs?
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}

		public bool Execute(out XRLVetResponse response)
		{

			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);


			response=null;
			if(bRet)
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					response = new XRLVetResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					System.Console.WriteLine("Vet2String: retval = "+bRet+" XERR="+XErr+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}

		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

		public int MaxStringLen
		{
			// from xonline.common.protocol.StringDefs.MAX_STRINGSVR_STRING_LEN = 512;
			get
			{
				return 512;
			}
		}
	}

	public class XRLVet2String_TooSmall : XRLPayload
	{
		[XRLPayloadFld(IsTitleId=true)]
		public uint dwTitleID;
		public uint dwFlags;
		public ushort wLocaleLen;
		//removing a field should make the packet too small - public ushort wNumStrings;
		[XRLPayloadFld(SizeParam="wLocaleLen")]
		public string           szLocale;

		[XRLPayloadFld(SizeParam="wLocaleLen")]
		public StringData[]     rgStringData;

		public XRLVet2String_TooSmall()
		{
			ServiceId = XOService.StringService;
			this.Slot.AddService(XOService.StringService);
		}

		protected override string GetServiceName()
		{
			return @"/msgserver/vetstring2.ashx";
		}

		override public bool Execute()
		{
			//TODO:  Which server to target here?  Add new def to Servers.cs?
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr));
		}

		public bool Execute(out XRLVetResponse response)
		{

			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool uRet = false;
			bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr),reqStream);


			response=null;
			if(bRet)
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
				{
					response = new XRLVetResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					response.ReadStream( respBuff );

					uRet = true;
				}
				else
				{
					System.Console.WriteLine("Vet2String: retval = "+bRet+" XERR="+XErr+" httpStatus="+httpStatus);
				}
			}

			return uRet;
		}

		protected override void ReadResponse(MemoryStream responseStream)
		{
			// override this so base class doesn't throw exception
			// this is really handled by Execute
		}

		public int MaxStringLen
		{
			// from xonline.common.protocol.StringDefs.MAX_STRINGSVR_STRING_LEN = 512;
			get
			{
				return 512;
			}
		}
	}

	public class XRLVetResponse : WireData
	{
		public ushort wNumStrings;
		[XRLPayloadFld(SizeParam="wNumStrings")]
		public uint[] rghrString;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestDB\TestDBReader.cs ===
using System.Data.SqlClient;
using System.Collections.Generic;

using ServerTestFramework;

namespace ServerTestFramework.TestDB
{
    /// <summary> Used to read data from TestDB. </summary>
    public class TestDBReader: TestDBConnector
    {
        ///<summary> Clears all cached TestDB data. </summary>
        public static void ClearCache()
        {
            cachedEnvironmentList=null;
        }

        ///<summary> Gets a list of the names of all root nodes. </summary>
        public string[] GetRootNodeNames()
        {
            using (SqlDataReader reader=new SqlCommand("exec p_get_node_tree_roots", sqlConnection).ExecuteReader())
            {
                List<string> names=new List<string>();
                while (reader.Read())
                {
                    if ((int)reader[0]!=0) //ignore the master node
                    {
                        names.Add((string)reader[1]);
                    }
                }

                names.Sort();
                return names.ToArray();
            }
        }

        ///<summary> Gets a list of all versions. </summary>
        public Version[] GetVersionList()
        {
            //precache environment list
            GetEnvironmentList();

            //lookup from db
            using (SqlDataReader reader=new SqlCommand("exec p_get_versions", sqlConnection).ExecuteReader())
            {
                List<Version> versions=new List<Version>();
                while (reader.Read())
                {
                    Version ver=new Version();
                    ver.Id=(int)reader[0];
                    ver.Environment=GetEnvironment((int)reader[1]);
                    ver.Number=new VersionNumber((int)reader[2], (int)reader[3], (int)reader[4], (int)reader[5]);
                    ver.Description=(reader[6]==System.DBNull.Value?"":(string)reader[6]);
                    versions.Add(ver);
                }

                return versions.ToArray();
            }
        }

        ///<summary> Gets a list of all environments. </summary>
        public Environment[] GetEnvironmentList()
        {
            //hit cache if we have it
            if (cachedEnvironmentList!=null)
            {
                return cachedEnvironmentList;
            }

            //hit db
            using (SqlDataReader reader=new SqlCommand("exec p_get_environments", sqlConnection).ExecuteReader())
            {
                List<Environment> envs=new List<Environment>();
                while (reader.Read())
                {
                    Environment env=new Environment();
                    env.Id=(int)reader[0];
                    env.Name=(string)reader[1];
                    env.NpdbAddress=(string)reader[2];
                    envs.Add(env);
                }

                cachedEnvironmentList=envs.ToArray();
                return envs.ToArray();
            }
        }

        ///<summary> Given a specific environment ID, returns information about that enviornment. </summary>
        public Environment GetEnvironment(int id)
        {
            Environment []envs=GetEnvironmentList();
            foreach (Environment env in envs)
            {
                if (env.Id==id)
                {
                    return env;
                }
            }

            throw new System.Exception("Environment ID "+id+" not found in environment list.");
        }

        /*///<summary> Returns a TestDBNode for a given ID from testdb, or null if not found. </summary>
        public TestDBNode FindNode(int id)
        {
            if (id==0) //the master root of all is not represented
            {
                return null;
            }

            //try local cache
            if (cachedNodesById.ContainsKey(id))
            {
                return cachedNodesById[id];
            }

            //load from db
        }

        ///<summary> Returns a TestDBNode for a given fully qualified name from testdb, or null if not found. </summary>
        public TestDBNode FindNode(string fullName)
        {
            //try local cache
            TestDBNode node=null;
            if (cachedNodesByName.TryGetValue(fullName, out node))
            {
                return node;
            }

            //hit the db?
            //TODO:
            return null;
        }*/

        //TODO: load cache
        //TODO: clear cache

        // --

#region Internal Workings
        //local cache of nodes that we've loaded from RegDB before
        //Dictionary<string,TestDBNode> cachedNodesByName=new Dictionary<string,TestDBNode>(); //hashed on FullName
        //Dictionary<int,TestDBNode> cachedNodesById=new Dictionary<int,TestDBNode>(); //hashed on Id

        private static Environment[] cachedEnvironmentList=null;
#endregion
    };

    //
    public struct Version
    {
        public int Id;
        public VersionNumber Number;
        public Environment Environment;
        public string Description;
    };

    public struct VersionNumber
    {
        public int Major;
        public int Minor;
        public int Build;
        public int Qfe;

        //public VersionNumber()
        //{}

        public VersionNumber(int maj, int min, int build, int qfe)
        {
            Major=maj;
            Minor=min;
            Build=build;
            Qfe=qfe;
        }
    };

    public struct Environment
    {
        public int Id;
        public string Name;
        public string NpdbAddress;
    };

    public struct TestDBNode
    {
        public int Id;
        public int ParentId;
        public string Name;
    };
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFD\XRLCreateXboxComAccount.cs ===
using System;
using System.Net;
using System.IO;
using xonline.common.config;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.UserAccount;


namespace ServerTestFramework.LiveService.TestFD
{
    public class XRLCreateXboxComAccount : XRLPayload
    {
        public int accessRequested;

        public ushort FirstNameLength = 0;
        [WireInfo(SizeParam = "FirstNameLength")]
        public string firstName;

        public ushort LastNameLength = 0;
        [WireInfo(SizeParam = "LastNameLength")]
        public string lastName;

        public ushort GamertagLength = 0;
        [WireInfo(SizeParam = "GamertagLength")]
        public string gamertag;

        public ushort EmailLength;
        [WireInfo(SizeParam = "EmailLength")]
        public string email;

        public DateTime birthdate;

        [WireInfo(HexString = true)]
        public ulong userPassportPuid = 0;

        [WireInfo(HexString = true)]
        public ulong ownerPassportPuid = 0;

        public byte msftOptIn;

        public byte partnerOptIn;

        public byte parentalControlGroupId = 0;

        [WireInfo(Min = 1, Max = XOn.MAX_DASH_LANG_ID)]
        public ushort languageId;

        public byte countryId;

        public XRLCreateXboxComAccount()
        {
        }


        protected override string GetServiceName()
        {
            return "/testfd/CreateXboxComAccount.ashx";
        }

        public bool Execute(out XRLCreateXboxComAccountResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.testfd), out Response);
        }

        public bool Execute(LiveServer sServer, out XRLCreateXboxComAccountResponse Response)
        {
            return Execute(sServer.EPDefault, out Response);
        }

        public bool Execute(IPEndPoint endPoint, out XRLCreateXboxComAccountResponse Response)
        {
            // Removed the following line because bug #48041 caused dummpy passport puids to fail user account creation
            //ulong dummyPassportPuid = (((ulong)m_rnd.Next()) << 32) + ((ulong)m_rnd.Next());
            if (this.userPassportPuid == 0)
            {
                UacsCommon UACS = new UacsCommon();
                UacsCommon.PassportUser ppu = UACS.CreatePassportUser(countryId);
                this.userPassportPuid = ppu.PassportPuid;
            }

            if (this.ownerPassportPuid == 0) this.ownerPassportPuid = this.userPassportPuid;

            MemoryStream reqStream = new MemoryStream(512);
            WriteStream(reqStream);

            bool uRet = false;
            bool bRet = InternalExecute(endPoint, reqStream);

            Response = null;
            if (bRet)
            {
                if ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0))
                {
                    Response = new XRLCreateXboxComAccountResponse();
                    MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
                    Response.ReadStream(respBuff);

                    uRet = true;
                }
            }

            return uRet;
        }
    }

    public class XRLCreateXboxComAccountResponse : XRLPayload
    {
        public ulong UserPuid = 0;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFD\XRLAddPaypalPaymentInstrument.cs ===
using System;
using System.Net;
using System.IO;
using xonline.common.config;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.UserAccount;

namespace ServerTestFramework.LiveService.TestFD
{
    public class XRLAddPaypalPaymentInstrumentRequest : XRLPayload
    {
        public ulong userPuid;

        //
        // Helpers for client & widget code
        //

        public XRLAddPaypalPaymentInstrumentRequest()
        {
        }

        protected override string GetServiceName()
        {
            return "/testfd/AddPaypalPaymentInstrument.ashx";
        }

        public bool Execute(out XRLAddPaypalPaymentInstrumentResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.testfd), out Response);
        }

        public bool Execute(LiveServer sServer, out XRLAddPaypalPaymentInstrumentResponse Response)
        {
            return Execute(sServer.EPDefault, out Response);
        }

        public bool Execute(IPEndPoint endPoint, out XRLAddPaypalPaymentInstrumentResponse Response)
        {
            bool uRet = false;
            using (MemoryStream reqStream = new MemoryStream(512))
            {
                WriteStream(reqStream);

                // to support schema version
                if (!this.CustomHeader.Contains("X-Schema-Ver:"))
                {
                    this.CustomHeader += "X-Schema-Ver:" + WireInfoAttribute.VersionToString(this.SchemaVersion) + "\r\n";
                }

                bool bRet = InternalExecute(endPoint, reqStream);
                Response = null;
                if (bRet)
                {
                    if ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0))
                    {
                        Response = new XRLAddPaypalPaymentInstrumentResponse();
                        Response.SchemaVersion = this.SchemaVersion;
                        MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
                        Response.ReadStream(respBuff);
                        uRet = true;
                    }
                }
            }
            return uRet;
        }
    }

    public class XRLAddPaypalPaymentInstrumentResponse : XRLPayload
    {
        public uint returnValue;

        public uint paymentInstrumentIdLength;

        [WireInfo(SizeParam = "paymentInstrumentIdLength")]
        public string paymentInstrumentId;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFD\XRLFriendCommands.cs ===
using System;
using System.Net;
using System.IO;
using xonline.common.config;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.UserAccount;




namespace ServerTestFramework.LiveService.TestFD
{
    public class XRLMakeFriendsRequest : XRLPayload
    {
        [WireInfo(Min = 0)]
        public ulong xuid;

        [WireInfo(Min = 0)]
        public uint numberOfFriends;

        [WireInfo(Min = 0)]
        public ushort gamertagPrefixLength;

        [WireInfo(SizeParam = "gamertagPrefixLength")]
        public string gamertagPrefix;

        //
        // Helpers for client & widget code
        //

        public XRLMakeFriendsRequest()
        {
        }

        protected override string GetServiceName()
        {
            return "/testfd/MakeFriends.ashx";
        }

        public bool Execute(out XRLMakeFriendsResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.testfd), out Response);
        }

        public bool Execute(LiveServer sServer, out XRLMakeFriendsResponse Response)
        {
            return Execute(sServer.EPDefault, out Response);
        }

        public bool Execute(IPEndPoint endPoint, out XRLMakeFriendsResponse Response)
        {
            MemoryStream reqStream = new MemoryStream(512);
            WriteStream(reqStream);

            // to support schema version
            if (!this.CustomHeader.Contains("X-Schema-Ver:"))
                this.CustomHeader += "X-Schema-Ver:" + WireInfoAttribute.VersionToString(this.SchemaVersion) + "\r\n";

            bool uRet = false;
            bool bRet = InternalExecute(endPoint, reqStream);

            Response = null;
            if (bRet)
            {
                if ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0))
                {
                    Response = new XRLMakeFriendsResponse();
                    Response.SchemaVersion = this.SchemaVersion;
                    MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
                    Response.ReadStream(respBuff);

                    uRet = true;
                }
            }

            return uRet;
        }
    }

    public class XRLMakeFriendsResponse : XRLPayload
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }

    public class XRLUpdateFriendsPresenceRequest : XRLPayload
    {
        [WireInfo(Min = 0)]
        public ulong xuid;

        [WireInfo(Min = 0)]
        public uint percentageOfFriendsOnline;

        [WireInfo(Min = 0)]
        public uint numberOfUniqueTitles;

        //
        // Helpers for client & widget code
        //

        public XRLUpdateFriendsPresenceRequest()
        {
        }

        protected override string GetServiceName()
        {
            return "/testfd/UpdateFriendsPresence.ashx";
        }

        public bool Execute(out XRLUpdateFriendsPresenceResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.testfd), out Response);
        }

        public bool Execute(LiveServer sServer, out XRLUpdateFriendsPresenceResponse Response)
        {
            return Execute(sServer.EPDefault, out Response);
        }

        public bool Execute(IPEndPoint endPoint, out XRLUpdateFriendsPresenceResponse Response)
        {
            MemoryStream reqStream = new MemoryStream(512);
            WriteStream(reqStream);

            // to support schema version
            if (!this.CustomHeader.Contains("X-Schema-Ver:"))
                this.CustomHeader += "X-Schema-Ver:" + WireInfoAttribute.VersionToString(this.SchemaVersion) + "\r\n";

            bool uRet = false;
            bool bRet = InternalExecute(endPoint, reqStream);

            Response = null;
            if (bRet)
            {
                if ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0))
                {
                    Response = new XRLUpdateFriendsPresenceResponse();
                    Response.SchemaVersion = this.SchemaVersion;
                    MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
                    Response.ReadStream(respBuff);

                    uRet = true;
                }
            }

            return uRet;
        }
    }

    public class XRLUpdateFriendsPresenceResponse : XRLPayload
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }

    public class XRLSetPresenceForUsersRequest : XRLPayload
    {
        [WireInfo(Max = 100)]
        public ushort xuidsLen;

        [WireInfo(SizeParam = "xuidsLen")]
        public ulong[] xuids;

        public uint titleId;

        public uint stateFlags;

        [WireInfo(Max = 58)]
        public uint richPresenceStringLength;

        [WireInfo(SizeParam = "richPresenceStringLength")]
        public string richPresenceString;

        public XRLSetPresenceForUsersRequest()
        {
        }

        protected override string GetServiceName()
        {
            return "/testfd/SetPresenceForUsers.ashx";
        }

        public bool Execute(out XRLSetPresenceForUsersResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.testfd), out Response);
        }

        public bool Execute(LiveServer sServer, out XRLSetPresenceForUsersResponse Response)
        {
            return Execute(sServer.EPDefault, out Response);
        }

        public bool Execute(IPEndPoint endPoint, out XRLSetPresenceForUsersResponse Response)
        {
            MemoryStream reqStream = new MemoryStream(512);
            WriteStream(reqStream);

            // to support schema version
            if (!this.CustomHeader.Contains("X-Schema-Ver:"))
                this.CustomHeader += "X-Schema-Ver:" + WireInfoAttribute.VersionToString(this.SchemaVersion) + "\r\n";

            bool uRet = false;
            bool bRet = InternalExecute(endPoint, reqStream);

            Response = null;
            if (bRet)
            {
                if ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0))
                {
                    Response = new XRLSetPresenceForUsersResponse();
                    Response.SchemaVersion = this.SchemaVersion;
                    MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
                    Response.ReadStream(respBuff);

                    uRet = true;
                }
            }

            return uRet;
        }
    }

    public class XRLSetPresenceForUsersResponse : XRLPayload
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFD\XRLGrantAchievements.cs ===
using System;
using System.Net;
using System.IO;
using xonline.common.config;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.UserAccount;


namespace ServerTestFramework.LiveService.TestFD
{
    public class XRLGrantAchievementsRequest : XRLPayload
    {
        [WireInfo(Min = 0)]
        public ulong xuid;

        [WireInfo(Min = 0)]
        public ushort platformType;

        [WireInfo(Min = 0)]
        public uint numberOfUniqueTitles;

        [WireInfo(Min = 0)]
        public uint percentageOfAchievementsToGrant;

        //
        // Helpers for client & widget code
        //

        public XRLGrantAchievementsRequest()
        {
        }

        protected override string GetServiceName()
        {
            return "/testfd/GrantAchievements.ashx";
        }

        public bool Execute(out XRLGrantAchievementsResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.testfd), out Response);
        }

        public bool Execute(LiveServer sServer, out XRLGrantAchievementsResponse Response)
        {
            return Execute(sServer.EPDefault, out Response);
        }

        public bool Execute(IPEndPoint endPoint, out XRLGrantAchievementsResponse Response)
        {
            MemoryStream reqStream = new MemoryStream(512);
            WriteStream(reqStream);

            // to support schema version
            if (!this.CustomHeader.Contains("X-Schema-Ver:"))
                this.CustomHeader += "X-Schema-Ver:" + WireInfoAttribute.VersionToString(this.SchemaVersion) + "\r\n";

            bool uRet = false;
            bool bRet = InternalExecute(endPoint, reqStream);

            Response = null;
            if (bRet)
            {
                if ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0))
                {
                    Response = new XRLGrantAchievementsResponse();
                    Response.SchemaVersion = this.SchemaVersion;
                    MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
                    Response.ReadStream(respBuff);

                    uRet = true;
                }
            }

            return uRet;
        }
    }

    public class XRLGrantAchievementsResponse : XRLPayload
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFD\XRLPingTestFD.cs ===
using System;
using System.Net;
using System.IO;
using xonline.common.config;

namespace ServerTestFramework.LiveService.TestFD
{
    public class XRLPingTestFD : XRLPayload
    {
        public int accessRequested;

        public XRLPingTestFD()
        {
        }

        protected override string GetServiceName()
        {
            return "/testfd/PingTestFD.ashx";
        }

        public bool Execute(out XRLPingTestFDResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.testfd), out Response);
        }

        public bool Execute(LiveServer sServer, out XRLPingTestFDResponse Response)
        {
            return Execute(sServer.EPDefault, out Response);
        }

        public bool Execute(IPEndPoint endPoint, out XRLPingTestFDResponse Response)
        {
            MemoryStream reqStream = new MemoryStream(512);
            WriteStream(reqStream);
            
            // to support schema version
            if (!this.CustomHeader.Contains("X-Schema-Ver:"))
                this.CustomHeader += "X-Schema-Ver:" + WireInfoAttribute.VersionToString(this.SchemaVersion) + "\r\n";

            bool uRet = false;
            bool bRet = InternalExecute(endPoint, reqStream);

            Response = null;
            if (bRet)
            {
                if ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0))
                {
                    Response = new XRLPingTestFDResponse();
                    Response.SchemaVersion = this.SchemaVersion;
                    MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
                    Response.ReadStream(respBuff);

                    uRet = true;
                }
            }

            return uRet;
        }
    }

    public class XRLPingTestFDResponse : XRLPayload
    {
        public bool accessGranted;

        public int testFDMajorVersion = 0;

        public int testFDMinorVersion = 0;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STS\STSUtil.cs ===
﻿using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens;
using System.IO;
using System.Security.Cryptography.X509Certificates;
using System.ServiceModel.Security;
using System.Text;
using System.Xml;

using xonline.common.service;
using xonline.common.config;

//using ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.STS
{
    public static class STSUtil
    {
        #region Certificates

        private const string StsCertificateIdentifier = "sts.xboxlive.com";

        /// <summary>
        /// Gets the STS signing certificate as defined by the site.xml file.
        /// </summary>
        /// <returns>An X509Certificate2 containing the certificate.</returns>
        public static X509Certificate2 GetStsSigningCertificate ()
        {
            // find site.xml
            string secure_unc = Config.GetSetting(Setting.setup_secureUNC);
            string site_xml_path = Path.Combine(secure_unc, "site.xml");

            if (!File.Exists(site_xml_path))
            {
                throw new InvalidOperationException("Cannot find site.xml in secure share (" + site_xml_path + ").");
            }

            XmlDocument site_xml = new XmlDocument();
            site_xml.Load(site_xml_path);

            // get STS xml elements
            XmlNode sts_element = site_xml.SelectSingleNode("/Site/Certificates/SSLCert[@Identifier='" +
                StsCertificateIdentifier + "']");

            if (sts_element == null)
            {
                throw new InvalidDataException("Cannot find the STS SSLCert in site.xml (" + site_xml_path + ").");
            }

            XmlNode file_attr = sts_element.SelectSingleNode("@File");

            if (file_attr == null)
            {
                throw new InvalidDataException("Cannot find the STS SSLCert in site.xml (" + site_xml_path + ").");
            }

            XmlNode password_element = sts_element.SelectSingleNode("Password");

            // bring it together
            string cert_path = Path.Combine(secure_unc, file_attr.Value);
            string password = (password_element == null ? "" : password_element.InnerText);

            return new X509Certificate2(cert_path, password);
        }

        #endregion

        #region GetSecurityTicket

        public class GetSecurityTicketParameters
        {
            // Subject
            public string SubjectFormat;
            public string SubjectQualifier;
            public string SubjectName;

            // Machine Claims
            public string PlatformType;
            public string MachineID;
            public string DeviceID;
            public string ClientVersion;
            public string TitleID;
            public string TitleVersion;
            public string Puid0;
            public string CID0;

            // User Claims
            public bool GenerateUserClaims;
            public string[] Xuid = new string[4];
            public string[] Gamertag = new string[4];
            public string[] Tier = new string[4];
            public string[] Country = new string[4];
            public string[] Privileges = new string[4];
            // Convenience Accessors for UserInfo
            public string Xuid0 { get { return Xuid[0]; } set { Xuid[0] = value; } }
            public string Gamertag0 { get { return Gamertag[0]; } set { Gamertag[0] = value; } }
            public string Tier0 { get { return Tier[0]; } set { Tier[0] = value; } }
            public string Country0 { get { return Country[0]; } set { Country[0] = value; } }
            public string Privileges0 { get { return Privileges[0]; } set { Privileges[0] = value; } }

            // Conditions, etc
            public DateTime NotBefore;
            public DateTime NotAfter;
            public string AssertionID;
            public string Issuer;
            public string Audience;

            // Security
            public X509Certificate2 Certificate;
            public SigningCredentials Credentials;

            public static Byte DefaultPlatformType = XOn.XPLT_MOBILE;

            public GetSecurityTicketParameters() : this(DefaultPlatformType) { }

            public GetSecurityTicketParameters(Byte platformType)
            {
                SetDefaults(platformType);
            }

            /// <summary>
            /// Creates a set of GetSecurityTicketParameters based of the 
            /// values of an existing set of parameters.
            /// </summary>
            /// <param name="otherParams">The set of parameters to copy</param>
            public GetSecurityTicketParameters(GetSecurityTicketParameters otherParams)
            {
                // Subject
                SubjectFormat = otherParams.SubjectFormat;
                SubjectQualifier = otherParams.SubjectQualifier;
                SubjectName = otherParams.SubjectName;

                // Machine Claims
                PlatformType = otherParams.PlatformType;
                MachineID = otherParams.MachineID;
                DeviceID = otherParams.DeviceID;
                ClientVersion = otherParams.ClientVersion;
                TitleID = otherParams.TitleID;
                TitleVersion = otherParams.TitleVersion;
                Puid0 = otherParams.Puid0;
                CID0 = otherParams.CID0;

                // User Claims
                GenerateUserClaims = otherParams.GenerateUserClaims;
                for (int i = 0; i < 4; i++)
                {
                    Xuid[i] = otherParams.Xuid[i];
                    Gamertag[i] = otherParams.Gamertag[i];
                    Tier[i] = otherParams.Tier[i];
                    Country[i] = otherParams.Country[i];
                    Privileges[i] = otherParams.Privileges[i];
                }

                // Conditions, etc
                NotBefore = otherParams.NotBefore;
                NotAfter = otherParams.NotAfter;
                AssertionID = otherParams.AssertionID;
                Issuer = otherParams.Issuer;
                Audience = otherParams.Audience;
            }

            public void SetDefaults()
            {
                SetDefaults(DefaultPlatformType);
            }

            public virtual void SetDefaults(Byte platformType)
            {
                SubjectFormat = "/xboxlive/nameFormat";
                SubjectQualifier = "Microsoft-NameQualifier-domain";
                SubjectName = XblSamlToken.subject_name_user;

                PlatformType = platformType.ToString();
                ulong machineBase = 0;
                switch (platformType)
                {
                    case XOn.XPLT_MOBILE:
                        machineBase = XOn.XboxId.MobileMachineBase;
                        ClientVersion = "1";
                        TitleID = "584D07D6";
                        TitleVersion = "0";
                        break;
                    case XOn.XPLT_XBOX360:
                        machineBase = XOn.XboxId.XenonMachineBase;
                        ClientVersion = "8159";
                        TitleID = "FFFE07D1";
                        TitleVersion = "8159";
                        break;
                    case XOn.XPLT_PC:
                        machineBase = XOn.XboxId.PcMachineBase;
                        ClientVersion = "1";
                        TitleID = "4D530054";
                        TitleVersion = "0";
                        break;
                    case XOn.XPLT_WEB:
                        machineBase = XOn.XboxId.XboxComMachineBase;
                        ClientVersion = "1";
                        TitleID = "DEADBEEF";
                        TitleVersion = "0";
                        break;
                    default:
                        throw new ArgumentException("Invalid PlatformType: " + platformType);
                }
                MachineID = (machineBase + 1).ToString();
                byte[] temp = new byte[32];
                RandomEx.GlobalRandGen.NextBytes(temp);
                DeviceID = Convert.ToBase64String(temp);

                Puid0 = RandomEx.GlobalRandGen.NextUlong().ToString();
                CID0 = RandomEx.GlobalRandGen.NextUlong().ToString();

                GenerateUserClaims = true;
                Xuid[0] = (XOn.XboxId.UserBase + 1).ToString();
                Gamertag[0] = "DefaultGamertag";
                Tier[0] = "6";
                Country[0] = "1";  // TODO: Change to US
                Privileges[0] = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,25,26,27,28,29,30,31," +
                    "220,223,224,226,227,228,229,230,231,234,237,238,240,242,243,244,245,246,247,248,249,250,251,252,253,254,255";

                NotBefore = DateTime.UtcNow;
                NotAfter = DateTime.UtcNow.AddMinutes(60);
                AssertionID = String.Format("SamlSecurityToken-{0}", Guid.NewGuid().ToString());
                Issuer = "http://sts.xboxlive.com";
                Audience = "http://sts.xboxlive.com";
            }

            public void SetDefaultsForSecurityToken(Byte platformType)
            {
                SetDefaults(platformType);

                this.SubjectName = String.Format("0x{0:X16}", Xuid0);
                this.PlatformType = String.Format("0x{0:X2}", platformType);
                this.MachineID = String.Format("0x{0:X16}", ulong.Parse(this.MachineID));
                this.ClientVersion = String.Format("0x{0:X8}", uint.Parse(this.ClientVersion));
                this.TitleID = String.Format("0x{0:X8}", uint.Parse(this.TitleID));
                this.TitleVersion = String.Format("0x{0:X8}", uint.Parse(this.TitleVersion));

                this.Xuid0 = String.Format("0x{0:X16}", ulong.Parse(this.Xuid0));
                this.Tier0 = String.Format("0x{0:X2}", byte.Parse(this.Tier0));
                this.Country0 = String.Format("0x{0:X2}", byte.Parse(this.Country0));
            }
        }

        /// <summary>
        /// Creates a security ticket in the same way that a call to GetSecurityTicket would.
        /// </summary>
        /// <param name="param">The values to use when creating the security ticket.</param>
        /// <returns>A string representation of the security ticket.</returns>
        public static string GetSecurityTicket(GetSecurityTicketParameters param)
        {
            // Create SAML attribute statement 
            SamlAttributeStatement samlAttributeStatement = new SamlAttributeStatement();

            // Create SAML subject 
            GenerateSamlSubject(samlAttributeStatement, param);

            // SAML attributes
            // Machine Claims
            GenerateMachineClaims(samlAttributeStatement, param);

            // User Claims
            if (param.GenerateUserClaims)
            {
                for (int i = 0; i < 4; i++)
                {
                    if (!String.IsNullOrEmpty(param.Xuid[i]))
                    {
                        GenerateUserClaims(samlAttributeStatement, param, i);
                    }
                }
            }

            SamlSecurityToken samlToken = GenerateSAMLToken(samlAttributeStatement, param);

            StringBuilder stringSamlToken = new StringBuilder();
            XmlWriter xWriter = XmlWriter.Create(stringSamlToken);

            WSSecurityTokenSerializer.DefaultInstance.WriteToken(xWriter, samlToken);

            return stringSamlToken.ToString();
        }

        private static void GenerateSamlSubject(SamlAttributeStatement samlAttributeStatement, GetSecurityTicketParameters param)
        {
            samlAttributeStatement.SamlSubject = new SamlSubject(param.SubjectFormat, param.SubjectQualifier, param.SubjectName);
        }

        private static void GenerateMachineClaims(SamlAttributeStatement samlAttributeStatement, GetSecurityTicketParameters param)
        {
            // PlatformType 
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_platformtype, XblSamlToken.ns_attribute_claims, param.PlatformType);

            // MachinePuid will be 0 for platformType == XOn.XPLT_WEB_GAMES
            if (param.MachineID != null)
            {
                // MachineID
                AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_machineid, XblSamlToken.ns_attribute_claims, param.MachineID);
            }

            // DeviceID will be 0 for platformType == XOn.XPLT_WEB_GAMES
            if (param.DeviceID != null)
            {
                // DeviceID
                AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_deviceid, XblSamlToken.ns_attribute_claims, param.DeviceID);
            }

            // ClientVersion
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_clientversion, XblSamlToken.ns_attribute_claims, param.ClientVersion);

            // TitleID
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_titleid, XblSamlToken.ns_attribute_claims, param.TitleID);

            // TitleVersion
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_titleversion, XblSamlToken.ns_attribute_claims, param.TitleVersion);

            // Puid0
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_puid0, XblSamlToken.ns_attribute_claims, param.Puid0);

            // CID0
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_cid0, XblSamlToken.ns_attribute_claims, param.CID0);
        }

        private static void GenerateUserClaims(SamlAttributeStatement samlAttributeStatement, GetSecurityTicketParameters param, Int32 userIndex)
        {
            // Xuid0
            AddSamlAttribute(samlAttributeStatement, String.Format(XblSamlToken.name_attribute_xuid, userIndex), XblSamlToken.ns_attribute_claims, param.Xuid[userIndex]);

            // Gamertag0
            AddSamlAttribute(samlAttributeStatement, String.Format(XblSamlToken.name_attribute_gamertag, userIndex), XblSamlToken.ns_attribute_claims, param.Gamertag[userIndex]);

            // Tier0
            AddSamlAttribute(samlAttributeStatement, String.Format(XblSamlToken.name_attribute_tier, userIndex), XblSamlToken.ns_attribute_claims, param.Tier[userIndex]);

            // Country0
            AddSamlAttribute(samlAttributeStatement, String.Format(XblSamlToken.name_attribute_country, userIndex), XblSamlToken.ns_attribute_claims, param.Country[userIndex]);

            // Privileges0
            AddSamlAttribute(samlAttributeStatement, String.Format(XblSamlToken.name_attribute_privileges, userIndex), XblSamlToken.ns_attribute_claims, param.Privileges[userIndex]);
        }

        private static SamlSecurityToken GenerateSAMLToken(SamlAttributeStatement samlAttributeStatement, GetSecurityTicketParameters param)
        {
            // Create the SAML statement Enumerable with one statement. 
            List<SamlStatement> samlStatements = new List<SamlStatement>();
            samlStatements.Add(samlAttributeStatement);

            // Create the SAML Conditions and SAML assertion 
            SamlConditions samlConditions = new SamlConditions(param.NotBefore, param.NotAfter);
            if (param.Audience != null)
            {
                SamlAudienceRestrictionCondition samlAudienceRestriction = new SamlAudienceRestrictionCondition();
                samlAudienceRestriction.Audiences.Add(new Uri(param.Audience));
                samlConditions.Conditions.Add(samlAudienceRestriction);
            }

            SamlAssertion samlAssertion = new SamlAssertion(param.AssertionID, param.Issuer, param.NotBefore, samlConditions, null, samlStatements);

            samlAssertion.SigningCredentials = CreateSigningCredentials(param);

            // Create the SAML Token 
            SamlSecurityToken samlToken = new SamlSecurityToken(samlAssertion);

            return samlToken;
        }

        private static SigningCredentials CreateSigningCredentials(GetSecurityTicketParameters param)
        {
            if (param.Credentials != null)
            {
                return param.Credentials;
            }

            // The private key contained in the certificate will be used to sign the token.
            X509AsymmetricSecurityKey signingKey = new X509AsymmetricSecurityKey(param.Certificate);

            // 
            // Signing credentials are consisted 
            // of private key in the certificate (see above), 
            // the signature algorithm, security algortihm and key identifier. 
            return new SigningCredentials(signingKey, SecurityAlgorithms.RsaSha1Signature, SecurityAlgorithms.Sha1Digest,
                new SecurityKeyIdentifier(new X509RawDataKeyIdentifierClause(param.Certificate)));
        }

        private static void AddSamlAttribute(SamlAttributeStatement samlAttributeStatement, String attributeName, String attributeNamespace, String attributeValue)
        {
            SamlAttribute samlAttribute = new SamlAttribute();
            samlAttribute.Name = attributeName;
            samlAttribute.Namespace = attributeNamespace;
            samlAttribute.AttributeValues.Add(attributeValue);

            samlAttributeStatement.Attributes.Add(samlAttribute);
        }

        #endregion

        #region GetPartnerSecurityTicket

        /// <summary>
        /// Derive from GetSecurityTicketParameters for ease of compatibility with other functions.
        /// Most of the fields aren't used.
        /// </summary>
        public class GetPartnerSecurityTicketParameters : GetSecurityTicketParameters
        {
            public override void SetDefaults (byte platformType)
            {
                base.SetDefaults(platformType);

                SubjectName = XblSamlToken.subject_name_partner;
            }
        }

        /// <summary>
        /// Creates a security ticket in the same way that a call to GetPartnerSecurityTicket would.
        /// </summary>
        /// <param name="param">The values to use when creating the security ticket.</param>
        /// <returns>A string representation of the security ticket.</returns>
        public static string GetPartnerSecurityTicket (GetPartnerSecurityTicketParameters param)
        {
            // Create SAML attribute statement 
            SamlAttributeStatement samlAttributeStatement = new SamlAttributeStatement();

            // Create SAML subject 
            GenerateSamlSubject(samlAttributeStatement, param);

            // SAML attributes
            // Machine Claims
            GeneratePartnerClaims(samlAttributeStatement, param);

            SamlSecurityToken samlToken = GenerateSAMLToken(samlAttributeStatement, param);

            StringBuilder stringSamlToken = new StringBuilder();
            XmlWriter xWriter = XmlWriter.Create(stringSamlToken);

            WSSecurityTokenSerializer.DefaultInstance.WriteToken(xWriter, samlToken);

            return stringSamlToken.ToString();
        }

        private static void GeneratePartnerClaims (SamlAttributeStatement samlAttributeStatement, GetPartnerSecurityTicketParameters param)
        {
            // TitleID
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_titleid, XblSamlToken.ns_attribute_claims, param.TitleID);

            // TitleVersion
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_titleversion, XblSamlToken.ns_attribute_claims, param.TitleVersion);

            // PartnerID0
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_partnerid0, XblSamlToken.ns_attribute_claims, param.Xuid0);

            // Gamertag0
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_gamertag0, XblSamlToken.ns_attribute_claims, param.Gamertag0);
        }

        #endregion
    }

    public class SamlTokenParameters
    {
        public String SubjectFormat;
        public String SubjectQualifier;
        public String SubjectName;

        // Machine Claims
        public Byte? PlatformType;
        public UInt64? MachineID;
        public UInt64? DeviceID;
        public UInt32? ClientVersion;
        public UInt32? TitleID;
        public UInt32? TitleVersion;
        public UInt64? Puid0;
        public UInt64? CID0;
        public UInt64? PartnerId0; // For partner security ticket
        public String Gamertag0; // For partner security ticket

        // User Claims
        public bool GenerateUserClaims;
        public UInt64[] Xuid; // Required
        public String[] Gamertag;
        public Byte?[] Tier;
        public Byte?[] Country;
        public Byte[][] Privileges;

        // Conditions, etc
        public DateTime NotBefore;
        public DateTime NotAfter;
        public String Audience;
        public String AssertionID;
        public String Issuer;

        // Security
        public X509Certificate2 Certificate;
        public SigningCredentials Credentials;

        public static Byte DefaultPlatformType = XOn.XPLT_MOBILE;

        public SamlTokenParameters()
        {
            SetDefaults();
        }

        public SamlTokenParameters(byte platformType)
        {
            SetDefaults(platformType);
        }

        public SamlTokenParameters(SamlTokenParameters otherParams)
        {
            this.SubjectFormat = otherParams.SubjectFormat;
            this.SubjectQualifier = otherParams.SubjectQualifier;
            this.SubjectName = otherParams.SubjectName;

            this.PlatformType = otherParams.PlatformType;
            this.MachineID = otherParams.MachineID;
            this.DeviceID = otherParams.DeviceID;
            this.ClientVersion = otherParams.ClientVersion;
            this.TitleID = otherParams.TitleID;
            this.TitleVersion = otherParams.TitleVersion;
            this.Puid0 = otherParams.Puid0;
            this.CID0 = otherParams.CID0;
            this.PartnerId0 = otherParams.PartnerId0; // For partner security ticket
            this.Gamertag0 = otherParams.Gamertag0; // For partner security ticket

            this.GenerateUserClaims = otherParams.GenerateUserClaims;
            this.Xuid = new UInt64[4]; // Required
            this.Gamertag = new String[4]; // Required
            this.Tier = new Byte?[4]; // Required
            this.Country = new Byte?[4]; // Required
            this.Privileges = new Byte[4][]; // Required
            for (int samlSlot = 0; samlSlot < 4; samlSlot++)
            {
                this.Xuid[samlSlot] = otherParams.Xuid[samlSlot];
                this.Gamertag[samlSlot] = otherParams.Gamertag[samlSlot];
                this.Tier[samlSlot] = otherParams.Tier[samlSlot];
                this.Country[samlSlot] = otherParams.Country[samlSlot];
                this.Privileges[samlSlot] = otherParams.Privileges[samlSlot];
            }

            this.NotBefore = otherParams.NotBefore;
            this.NotAfter = otherParams.NotAfter;
            this.Audience = otherParams.Audience;
            this.AssertionID = otherParams.AssertionID;
            this.Issuer = otherParams.Issuer;

            this.Certificate = otherParams.Certificate;
            this.Credentials = otherParams.Credentials;
        }

        public void SetDefaults()
        {
            SetDefaults(DefaultPlatformType);
        }

        public virtual void SetDefaults(byte platformType)
        {
            PlatformType = platformType;
            ulong machineBase = 0;
            switch (platformType)
            {
                case XOn.XPLT_MOBILE:
                    machineBase = XOn.XboxId.MobileMachineBase;
                    ClientVersion = 1;
                    TitleID = 0x584D07D6;
                    TitleVersion = 0;
                    break;
                case XOn.XPLT_XBOX360:
                    machineBase = XOn.XboxId.XenonMachineBase;
                    ClientVersion = 8159;
                    TitleID = 0xFFFE07D1;
                    TitleVersion = 0xAAC4DC00;
                    break;
                case XOn.XPLT_PC:
                    machineBase = XOn.XboxId.PcMachineBase;
                    ClientVersion = 1;
                    TitleID = 0x4D530054;
                    TitleVersion = 0;
                    break;
                case XOn.XPLT_WEB:
                    machineBase = XOn.XboxId.XboxComMachineBase;
                    ClientVersion = 1;
                    TitleID = 0xDEADBEEF;
                    TitleVersion = 0;
                    break;
                default:
                    throw new ArgumentException("Invalid PlatformType: " + platformType);
            }
            MachineID = (machineBase + 1);

            Xuid = new UInt64[4];
            Gamertag = new String[4];
            Tier = new Byte?[4];
            Country = new Byte?[4];
            Privileges = new Byte[4][];

            NotBefore = DateTime.UtcNow;
            NotAfter = DateTime.UtcNow.AddMinutes(60);
            Audience = "http://liveconnect.xbox.com";
            AssertionID = String.Format("SamlSecurityToken-{0}", Guid.NewGuid().ToString());
            Issuer = "http://sts.xboxlive.com";
        }
    }

    public class GetSecurityTokenParameters : SamlTokenParameters
    {
        public GetSecurityTokenParameters(GetSecurityTokenParameters otherParams) : base(otherParams) { }
        public GetSecurityTokenParameters(byte platformType) : base(platformType) { }

        public override void SetDefaults(byte platformType)
        {
            base.SetDefaults(platformType);

            GenerateUserClaims = true;
            // TODO: OMG! Stupid SecurityTokens actually number users 1->4, so the default here should be 1 to make people happy. :(
            Xuid[0] = XOn.XboxId.UserBase + 1;
            Tier[0] = 6;
            Country[0] = 1;  // TODO: Change to US

            SubjectName = String.Format("0x{0:X16}", Xuid[0]);
        }
    }

    public class GetPartnerSecurityTicketParameters : SamlTokenParameters
    {
        public override void SetDefaults(byte platformType)
        {
            base.SetDefaults(platformType);

            SubjectName = XblSamlToken.subject_name_partner;
        }
    }

    /// <summary>
    /// Utility for cerating SAML Tokens of all types
    /// </summary>
    public static class SamlTokenUtil
    {
        /// <summary>
        /// Generate a SAML Token the same as the ones returned by GetSecurityToken
        /// </summary>
        /// <param name="param">The parameters for the SAML Token</param>
        /// <returns>A string containing the XML representation of the SAML Token</returns>
        /// <remarks>This just delegates directly to GenerateSamlTokenString</remarks>
        public static String GetSecurityToken(GetSecurityTokenParameters  param)
        {
            return GenerateSamlTokenString(param);
        }

        public static String GetParternSecurityTicket(GetPartnerSecurityTicketParameters param)
        {
            return GenerateSamlTokenString(param);
        }

        /// <summary>
        /// Generate a SAML Token based on the values in the SamlTokenParameters
        /// </summary>
        /// <param name="param">The parameters for the SAML Token</param>
        /// <returns>A string containing the XML representation of the SAML Token</returns>
        public static String GenerateSamlTokenString(SamlTokenParameters param)
        {
            // Create SAML conditions statement
            SamlConditions samlConditions = new SamlConditions(param.NotBefore, param.NotAfter);

            if(param.Audience != null)
            {
                SamlAudienceRestrictionCondition audienceRestriction = new SamlAudienceRestrictionCondition();
                audienceRestriction.Audiences.Add(new Uri(param.Audience));
                samlConditions.Conditions.Add(audienceRestriction);
            }

            // Create SAML attribute statement 
            SamlAttributeStatement samlAttributeStatement = new SamlAttributeStatement();

            // Add the subject
            GenerateSamlSubject(samlAttributeStatement, param);

            // Add the machine claims
            GenerateMachineClaims(samlAttributeStatement, param);

            // Add the user claims
            if (param.GenerateUserClaims)
            {

                for (int i = 0; i < 4; i++)
                {
                    if (param.Xuid[i] != 0)
                    {
                        GenerateUserClaims(samlAttributeStatement, param, i);
                    }
                }
            }

            // Then create the actual security tokne
            SamlSecurityToken samlToken = GenerateSamlToken(samlAttributeStatement, samlConditions, param);

            // And write it out to a string
            StringBuilder stringSamlToken = new StringBuilder();
            XmlWriter xWriter = XmlWriter.Create(stringSamlToken);
            WSSecurityTokenSerializer.DefaultInstance.WriteToken(xWriter, samlToken);

            return stringSamlToken.ToString();
        }

        /// <summary>
        /// Create a SamlSecurityToken with the attributes and conditions provided
        /// </summary>
        /// <param name="samlAttributeStatement">The SamlAttributes for the SAML Token</param>
        /// <param name="samlConditions">The SamlConditions for the SAML Token</param>
        /// <param name="param">Any additional parameters for the SAML Token</param>
        /// <returns>A new SamlSecurityToken</returns>
        private static SamlSecurityToken GenerateSamlToken(SamlAttributeStatement samlAttributeStatement, SamlConditions samlConditions, SamlTokenParameters param)
        {
            // Create the SAML statement Enumerable with one statement. 
            List<SamlStatement> samlStatements = new List<SamlStatement>();
            samlStatements.Add(samlAttributeStatement);

            SamlAssertion samlAssertion = new SamlAssertion(param.AssertionID, param.Issuer, param.NotBefore, samlConditions, null, samlStatements);

            samlAssertion.SigningCredentials = CreateSigningCredentials(param);

            // Create the SAML Token 
            SamlSecurityToken samlToken = new SamlSecurityToken(samlAssertion);

            return samlToken;
        }

        /// <summary>
        /// Create a set of SigningCredentials used to sign an SAML token
        /// </summary>
        /// <param name="param">The parameters for the credentials</param>
        /// <returns>A SigningCredentials object that can be used to sign a SAML token</returns>
        private static SigningCredentials CreateSigningCredentials(SamlTokenParameters param)
        {
            // The private key contained in the certificate will be used to sign the token.
            X509AsymmetricSecurityKey signingKey = new X509AsymmetricSecurityKey(param.Certificate);
            X509RawDataKeyIdentifierClause keyIdentifier = new X509RawDataKeyIdentifierClause(param.Certificate);

            // Signing credentials consist of private key in the certificate (see above), 
            // the signature algorithm, security algortihm and key identifier. 
            return new SigningCredentials(
                signingKey,
                SecurityAlgorithms.RsaSha1Signature,
                SecurityAlgorithms.Sha1Digest,
                new SecurityKeyIdentifier(keyIdentifier));
        }

        /// <summary>
        /// Add the subject information to the samlAttributeStatement
        /// </summary>
        /// <param name="samlAttributeStatement">The attribute statement to add the subject to</param>
        /// <param name="param">The parameters for the subject</param>
        private static void GenerateSamlSubject(SamlAttributeStatement samlAttributeStatement, SamlTokenParameters param)
        {
            samlAttributeStatement.SamlSubject = new SamlSubject(param.SubjectFormat, param.SubjectQualifier, param.SubjectName);
        }

        /// <summary>
        /// Add a set of of machine claims to the SMAL Attribute Statement
        /// </summary>
        /// <param name="samlAttributeStatement">The statement to add the claims to</param>
        /// <param name="param">The parameters for the claim</param>
        private static void GenerateMachineClaims(SamlAttributeStatement samlAttributeStatement, SamlTokenParameters param)
        {
            // PlatformType 
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_platformtype, XblSamlToken.ns_attribute_claims, param.PlatformType);

            // MachineID (will be 0 for platformType == XOn.XPLT_WEB_GAMES)
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_machineid, XblSamlToken.ns_attribute_claims, param.MachineID);

            // DeviceID
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_deviceid, XblSamlToken.ns_attribute_claims, param.DeviceID);

            // ClientVersion
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_clientversion, XblSamlToken.ns_attribute_claims, param.ClientVersion);

            // TitleID
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_titleid, XblSamlToken.ns_attribute_claims, param.TitleID);

            // TitleVersion
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_titleversion, XblSamlToken.ns_attribute_claims, param.TitleVersion);

            // Puid0
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_puid0, XblSamlToken.ns_attribute_claims, param.Puid0);

            // CID0
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_cid0, XblSamlToken.ns_attribute_claims, param.CID0);

            // PartnerID0
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_partnerid0, XblSamlToken.ns_attribute_claims, param.PartnerId0);

            // Gamertag0
            AddSamlAttribute(samlAttributeStatement, XblSamlToken.name_attribute_gamertag0, XblSamlToken.ns_attribute_claims, param.Gamertag0);
        }

        /// <summary>
        /// Add a set of user clams for a specific user to the SAML Attribute Statement
        /// </summary>
        /// <param name="samlAttributeStatement">The statement to add the claims to</param>
        /// <param name="param">The parameters for the claim</param>
        /// <param name="userIndex">The index of the user to add</param>
        private static void GenerateUserClaims(SamlAttributeStatement samlAttributeStatement, SamlTokenParameters param, Int32 userIndex)
        {
            // Xuid
            AddSamlAttribute(
                samlAttributeStatement,
                String.Format(XblSamlToken.name_attribute_xuid, userIndex),
                XblSamlToken.ns_attribute_claims,
                param.Xuid[userIndex]);

            // Gamertag
            AddSamlAttribute(
                samlAttributeStatement,
                String.Format(XblSamlToken.name_attribute_gamertag, userIndex),
                XblSamlToken.ns_attribute_claims,
                param.Gamertag[userIndex]);

            // Tier
            AddSamlAttribute(
                samlAttributeStatement,
                String.Format(XblSamlToken.name_attribute_tier, userIndex),
                XblSamlToken.ns_attribute_claims,
                param.Tier[userIndex]);

            // Country
            AddSamlAttribute(
                samlAttributeStatement,
                String.Format(XblSamlToken.name_attribute_country, userIndex),
                XblSamlToken.ns_attribute_claims,
                param.Country[userIndex]);

            // Privileges
            AddSamlAttribute(
                samlAttributeStatement,
                String.Format(XblSamlToken.name_attribute_privileges, userIndex),
                XblSamlToken.ns_attribute_claims,
                param.Privileges[userIndex]);
        }

        private static void AddSamlAttribute<T>(SamlAttributeStatement samlAttributeStatement, String attributeName, String attributeNamespace, Nullable<T> attributeValue)
            where T : struct
        {
            if (attributeValue.HasValue)
            {
                AddSamlAttribute(samlAttributeStatement, attributeName, attributeNamespace, attributeValue.Value);
            }
        }

        private static void AddSamlAttribute(SamlAttributeStatement samlAttributeStatement, String attributeName, String attributeNamespace, Object attributeValue)
        {
            if (attributeValue != null)
            {
                String attributeValueString = "";

                Array array = attributeValue as Array;
                if (array != null)
                {
                    if (array.Length > 0)
                    {
                        StringBuilder sb = new StringBuilder();
                        foreach (Object value in array)
                        {
                            sb.Append(value);
                            sb.Append(',');
                        }
                        sb.Remove(sb.Length - 1, 1);
                        attributeValue = sb.ToString();
                    }
                    else
                    {
                        attributeValue = "";
                    }
                }
                else
                {
                    try
                    {
                        attributeValueString = String.Format("0x{0:X}", attributeValue);
                    }
                    catch
                    {
                        // If we caught an exception, just get the ToString value
                        attributeValueString = attributeValue.ToString();
                    }

                }
                SamlAttribute samlAttribute = new SamlAttribute();
                samlAttribute.Name = attributeName;
                samlAttribute.Namespace = attributeNamespace;
                samlAttribute.AttributeValues.Add(attributeValueString);

                samlAttributeStatement.Attributes.Add(samlAttribute);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFD\XRLReflect.cs ===
using System;

using xonline.common.config;
using xonline.common.protocol;

namespace ServerTestFramework.LiveService.TestFD
{
    public class XRLReflect : XRLPayload<TestFdReflectorRequest, TestFdReflectorResponse>
    {
        protected override void SetServices ()
        {
            base.SetServices();
            Slot.AddService(XOService.TestFD);
        }

        public bool Execute (TestFdReflectorRequest.Caller callerValue, TestFdReflectorRequest.Action actionValue, int param)
        {
            Request.CallerValue = callerValue;
            Request.ActionValue = actionValue;
            Request.Param = param;

            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.testfd));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFD\XRLProfileCommands.cs ===
using System;
using System.Net;
using System.IO;
using xonline.common.config;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.UserAccount;




namespace ServerTestFramework.LiveService.TestFD
{
    public class XRLMarkCheaterRequest : XRLPayload
    {
        [WireInfo(Min = 0)]
        public ulong xuid;

        public XRLMarkCheaterRequest()
        {
        }

        protected override string GetServiceName()
        {
            return "/testfd/MarkCheater.ashx";
        }

        public bool Execute(out XRLMarkCheaterResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.testfd), out Response);
        }

        public bool Execute(LiveServer sServer, out XRLMarkCheaterResponse Response)
        {
            return Execute(sServer.EPDefault, out Response);
        }

        public bool Execute(IPEndPoint endPoint, out XRLMarkCheaterResponse Response)
        {
            MemoryStream reqStream = new MemoryStream(512);
            WriteStream(reqStream);

            // to support schema version
            if (!this.CustomHeader.Contains("X-Schema-Ver:"))
                this.CustomHeader += "X-Schema-Ver:" + WireInfoAttribute.VersionToString(this.SchemaVersion) + "\r\n";

            bool uRet = false;
            bool bRet = InternalExecute(endPoint, reqStream);

            Response = null;
            if (bRet)
            {
                if ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0))
                {
                    Response = new XRLMarkCheaterResponse();
                    Response.SchemaVersion = this.SchemaVersion;
                    MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
                    Response.ReadStream(respBuff);

                    uRet = true;
                }
            }

            return uRet;
        }
    }

    public class XRLMarkCheaterResponse : XRLPayload
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }

    public class XRLSetWatermarkRequest : XRLPayload
    {
        [WireInfo(Min = 0)]
        public ulong xuid;

        public uint flags;

        public XRLSetWatermarkRequest()
        {
        }

        protected override string GetServiceName()
        {
            return "/testfd/SetWatermark.ashx";
        }

        public bool Execute(out XRLSetWatermarkResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.testfd), out Response);
        }

        public bool Execute(LiveServer sServer, out XRLSetWatermarkResponse Response)
        {
            return Execute(sServer.EPDefault, out Response);
        }

        public bool Execute(IPEndPoint endPoint, out XRLSetWatermarkResponse Response)
        {
            MemoryStream reqStream = new MemoryStream(512);
            WriteStream(reqStream);

            // to support schema version
            if (!this.CustomHeader.Contains("X-Schema-Ver:"))
                this.CustomHeader += "X-Schema-Ver:" + WireInfoAttribute.VersionToString(this.SchemaVersion) + "\r\n";

            bool uRet = false;
            bool bRet = InternalExecute(endPoint, reqStream);

            Response = null;
            if (bRet)
            {
                if ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0))
                {
                    Response = new XRLSetWatermarkResponse();
                    Response.SchemaVersion = this.SchemaVersion;
                    MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
                    Response.ReadStream(respBuff);

                    uRet = true;
                }
            }

            return uRet;
        }
    }

    public class XRLSetWatermarkResponse : XRLPayload
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }


    public class XRLSetTenureRequest : XRLPayload
    {
        [WireInfo(Min = 0)]
        public ulong xuid;

        public ushort years;

        public ushort months;

        public XRLSetTenureRequest()
        {
        }

        protected override string GetServiceName()
        {
            return "/testfd/SetTenure.ashx";
        }

        public bool Execute(out XRLSetTenureResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.testfd), out Response);
        }

        public bool Execute(LiveServer sServer, out XRLSetTenureResponse Response)
        {
            return Execute(sServer.EPDefault, out Response);
        }

        public bool Execute(IPEndPoint endPoint, out XRLSetTenureResponse Response)
        {
            MemoryStream reqStream = new MemoryStream(512);
            WriteStream(reqStream);

            // to support schema version
            if (!this.CustomHeader.Contains("X-Schema-Ver:"))
                this.CustomHeader += "X-Schema-Ver:" + WireInfoAttribute.VersionToString(this.SchemaVersion) + "\r\n";

            bool uRet = false;
            bool bRet = InternalExecute(endPoint, reqStream);

            Response = null;
            if (bRet)
            {
                if ((xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0))
                {
                    Response = new XRLSetTenureResponse();
                    Response.SchemaVersion = this.SchemaVersion;
                    MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
                    Response.ReadStream(respBuff);

                    uRet = true;
                }
            }

            return uRet;
        }
    }

    public class XRLSetTenureResponse : XRLPayload
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\MixedOverride.cs ===
using ServerTestFramework;

namespace ServerTestFramework.LiveService.TestFdXsts
{
    public abstract class MixedOverrideClientBase: TestFdXstsClientBase
    {
        public abstract void PlatformsPC();
        public abstract void PlatformsPC_WebConfigXbox360();
        public abstract void TitlesFFFE07D2();
        public abstract void TitlesFFFE07D2_WebConfigFFFE07D1();
        public abstract void Privileges252();
        public abstract void Privileges254();
        public abstract void Privileges254_WebConfig255();
        public abstract void RequiresClaimLion();
        public abstract void RequiresClaimLion_WebConfigTiger();

        public static MixedOverrideClientBase CreateClient(ProtocolToUse protocol, bool useAuthSg)
        {
            MixedOverrideClientBase client;

            if (protocol==ProtocolToUse.Soap)
            {
                client=new ServerTestFramework.LiveService.TestFdXsts.Soap.MixedOverrideClient();
            }
            else if (protocol==ProtocolToUse.Wcf)
            {
                client=new ServerTestFramework.LiveService.TestFdXsts.Wcf.MixedOverrideClient();
            }
            else
            {
                throw new System.Exception("Unhandled protocol: "+protocol);
            }

            if (useAuthSg) //override default endpoint which directly hits testfd
            {
                client.EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.authsg);
            }

            return client;
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Mixed.cs ===
using ServerTestFramework;

namespace ServerTestFramework.LiveService.TestFdXsts
{
    public abstract class MixedClientBase: TestFdXstsClientBase
    {
        public abstract void PlatformsPC();
        public abstract void PlatformsPC_WebConfigXbox360();
        public abstract void TitlesFFFE07D2();
        public abstract void TitlesFFFE07D2_WebConfigFFFE07D1();
        public abstract void Privileges253();
        public abstract void Privileges254();
        public abstract void Privileges254_WebConfig255();
        public abstract void RequiresClaimLion();
        public abstract void RequiresClaimLion_WebConfigTiger();

        public static MixedClientBase CreateClient(ProtocolToUse protocol, bool useAuthSg)
        {
            MixedClientBase client;

            if (protocol==ProtocolToUse.Soap)
            {
                client=new ServerTestFramework.LiveService.TestFdXsts.Soap.MixedClient();
            }
            else if (protocol==ProtocolToUse.Wcf)
            {
                client=new ServerTestFramework.LiveService.TestFdXsts.Wcf.MixedClient();
            }
            else
            {
                throw new System.Exception("Unhandled protocol: "+protocol);
            }

            if (useAuthSg) //override default endpoint which directly hits testfd
            {
                client.EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.authsg);
            }

            return client;
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Code.cs ===
using ServerTestFramework;

namespace ServerTestFramework.LiveService.TestFdXsts
{
    public abstract class CodeClientBase: TestFdXstsClientBase
    {
        public abstract string CallVerifyOperator(string method, string claimType, string value, string overrideIssuer);
        public abstract string CallFindClaim(string claimType, string overrideIssuer);

        public static CodeClientBase CreateClient(ProtocolToUse protocol, bool useAuthSg)
        {
            CodeClientBase client;

            if (protocol==ProtocolToUse.Soap)
            {
                client=new ServerTestFramework.LiveService.TestFdXsts.Soap.CodeClient();
            }
            else if (protocol==ProtocolToUse.Wcf)
            {
                client=new ServerTestFramework.LiveService.TestFdXsts.Wcf.CodeClient();
            }
            else
            {
                throw new System.Exception("Unhandled protocol: "+protocol);
            }

            if (useAuthSg) //override default endpoint which directly hits testfd
            {
                client.EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.authsg);
            }

            return client;
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Attribute.cs ===
using ServerTestFramework;

namespace ServerTestFramework.LiveService.TestFdXsts
{
    public abstract class AttributeClientBase: TestFdXstsClientBase
    {
        public abstract void Platforms_None();
        public abstract void Platforms_Xbox360();
        public abstract void Platforms_Xbox360_Pc();
        public abstract void Titles_FFFE07D1();
        public abstract void Titles_FFFE07D1_00112233_FFAA7700();
        public abstract void Privileges_None();
        public abstract void Privileges_254();
        public abstract void Privileges_128_160_255();
        public abstract void Privileges_192_193();
        public abstract void RequiresClaim_Tiger();
        public abstract void RequiresClaim_Lion_Tiger_Ocelot();
        public abstract void AllowedValues_Strings();
        public abstract void AuthEquals_StringAgeGroupElder();
        public abstract void AuthEquals_StringAgeGroupElder_IntegerLanguage1337();
        public abstract void AuthEquals_Xuid();
        public abstract void AuthGreaterThan_PositiveInteger();
        public abstract void AuthGreaterThan_ZeroInteger();
        public abstract void AuthGreaterThan_NegativeInteger();
        public abstract void AuthGreaterThan_String();
        public abstract void AuthLessThan_PositiveInteger();
        public abstract void AuthLessThan_ZeroInteger();
        public abstract void AuthLessThan_NegativeInteger();
        public abstract void AuthLessThan_String();
        public abstract void UserParameter_UnsignedLong(ulong ?userId);
        public abstract void UserParameter_NullableUnsignedLong(ulong ?userId);
        public abstract void UserParameter_SignedLong(long ?userId);
        public abstract void UserParameter_String(string userId);
        public abstract void UserParameter_Binary(byte []userId);
        public abstract void MachineParameter_UnsignedLong(ulong ?machineId);
        public abstract void MachineParameter_String(string machineId);
        public abstract void TitleParameter_UnsignedInt(uint ?titleId);
        public abstract void TitleParameter_SignedInt(int ?titleId);
        public abstract void TitleParameter_UnsignedLong(ulong ?titleId);
        public abstract void TitleParameter_String(string titleId);
        public abstract void TitleParameter_Binary(byte []titleId);
        public abstract void TitleParameter_DateTime(System.DateTime ?titleId);
        public abstract void CountryParameter_UnsignedInt(uint ?countryId);
        public abstract void CountryParameter_NullableSignedInt(int ?countryId);
        public abstract void CountryParameter_SignedShort(short ?countryId);
        public abstract void CountryParameter_UnsignedByte(byte ?countryId);
        public abstract void CountryParameter_String(string countryId);
        public abstract void CountryParameter_Binary(byte []countryId);
        public abstract void CountryParameter_DateTime(System.DateTime ?countryId);
        public abstract void MassiveCombo(ulong userId, ulong machineId, uint titleId, uint countryId);

        public static AttributeClientBase CreateClient(ProtocolToUse protocol, bool useAuthSg)
        {
            AttributeClientBase client;

            if (protocol==ProtocolToUse.Soap)
            {
                client=new ServerTestFramework.LiveService.TestFdXsts.Soap.AttributeClient();
            }
            else if (protocol==ProtocolToUse.Wcf)
            {
                client=new ServerTestFramework.LiveService.TestFdXsts.Wcf.AttributeClient();
            }
            else
            {
                throw new System.Exception("Unhandled protocol: "+protocol);
            }

            if (useAuthSg) //override default endpoint which directly hits testfd
            {
                client.EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.authsg);
            }

            return client;
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\SimpleBase.cs ===
using ServerTestFramework;

namespace ServerTestFramework.LiveService.TestFdXsts
{
    public abstract class SimpleClientBase: TestFdXstsClientBase
    {
        abstract public string Echo(string s);
        abstract public string GetTokenClaimsString();

        public static SimpleClientBase CreateClient(ProtocolToUse protocol, bool useAuthSg)
        {
            SimpleClientBase client;

            if (protocol==ProtocolToUse.Soap)
            {
                client=new ServerTestFramework.LiveService.TestFdXsts.Soap.SimpleClient();
            }
            else if (protocol==ProtocolToUse.Wcf)
            {
                client=new ServerTestFramework.LiveService.TestFdXsts.Wcf.SimpleClient();
            }
            else
            {
                throw new System.Exception("Unhandled protocol: "+protocol);
            }

            if (useAuthSg) //override default endpoint which directly hits testfd
            {
                client.EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.authsg);
            }

            return client;
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\CommonBase.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.common.config;

namespace ServerTestFramework.LiveService.TestFdXsts
{
    //All methods of TestFdXstsClientBase should fail with one of these two exceptions only
    public class HttpRequestFailedException: System.Exception
    {
        public int HttpError;

        public HttpRequestFailedException(int code, string message): base(message)
        {
            HttpError=code;
        }
    };

    public class HttpRequestTimeoutException: System.Exception
    {
        public HttpRequestTimeoutException(string message): base(message)
        {
        }
    };

    public abstract class TestFdXstsClientBase
    {
        public System.Collections.Generic.List<string> AdditionalHeaders=new System.Collections.Generic.List<string>();
        public System.Net.IPEndPoint EndPoint=null;
        public int ExpectedHttpResponseCode=200; //success

        public void AddClaimToken(string token)
        {
            AdditionalHeaders.Add("Authorization: XBL2.0 x="+token);
        }

        public HttpClient GenerateHttpClient()
        {
            return new HttpClient(EndPoint);
        }

        internal delegate void VoidFunction();
        //Derived classes call this with the delegate that does the real work.  This will catch HttpRequestFailedException to enforce ExpectedHttpResponseCode.
        internal void ExecuteAndHandleHttpResponse(VoidFunction vfunc)
        {
            try
            {
                vfunc();

                if (ExpectedHttpResponseCode!=200)
                {
                    throw new UnexpectedTestResultException("Expected HTTP response code "+ExpectedHttpResponseCode+" but got 200");
                }
            }
            catch (HttpRequestFailedException hrfe)
            {
                if (ExpectedHttpResponseCode==200)
                {
                    throw;
                }
                else if (ExpectedHttpResponseCode!=hrfe.HttpError)
                {
                    throw new UnexpectedTestResultException("Expected HTTP response code "+ExpectedHttpResponseCode+" but got "+hrfe.HttpError, hrfe);
                }
            }
        }
    };

    public enum ProtocolToUse
    {
        Soap,
        Wcf,
        Mvc
    }
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\WebConfig.cs ===
using ServerTestFramework;

namespace ServerTestFramework.LiveService.TestFdXsts
{
    public abstract class WebConfigClientBase: TestFdXstsClientBase
    {
        public abstract void Platforms_Xbox360();
        public abstract void Titles_FFFE07D1();
        public abstract void Privileges_254();
        public abstract void RequiresClaim_Tiger();
        public abstract void EqualsAgeGroup_OldEnough();
        public abstract void GreaterThanInteger_13();
        public abstract void LessThanInteger_13();
        public abstract void SimpleAnd();
        public abstract void SimpleOr();
        public abstract void SimpleNot();
        public abstract void ComplexAndOrNot();

        public static WebConfigClientBase CreateClient(ProtocolToUse protocol, bool useAuthSg)
        {
            WebConfigClientBase client;

            if (protocol==ProtocolToUse.Soap)
            {
                client=new ServerTestFramework.LiveService.TestFdXsts.Soap.WebConfigClient();
            }
            else if (protocol==ProtocolToUse.Wcf)
            {
                client=new ServerTestFramework.LiveService.TestFdXsts.Wcf.WebConfigClient();
            }
            else
            {
                throw new System.Exception("Unhandled protocol: "+protocol);
            }

            if (useAuthSg) //override default endpoint which directly hits testfd
            {
                client.EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.authsg);
            }

            return client;
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Soap\Code.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.TestFdXsts.Soap
{
    public class CodeClient: CodeClientBase
    {
        public CodeClient()
        {
            EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.testfdxstssoap_int);
        }

        public override string CallVerifyOperator(string method, string claimType, string value, string overrideIssuer)
        {
            SoapParameters soapParams=new SoapParameters();
            soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("method", method));
            if (claimType!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("claimType", claimType));
            }
            if (value!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("value", value));
            }
            if (overrideIssuer!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("overrideIssuer", overrideIssuer));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Code", "CallVerifyOperator", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            HttpClient.Response response=null;
            ExecuteAndHandleHttpResponse(delegate()
            {
                response=SoapHttpClient.SendReceive(request, EndPoint);
            });
            return SoapHttpClient.ParseResponse(response, "CallVerifyOperator");
        }

        public override string CallFindClaim(string claimType, string overrideIssuer)
        {
            SoapParameters soapParams=new SoapParameters();
            if (claimType!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("claimType", claimType));
            }
            if (overrideIssuer!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("overrideIssuer", overrideIssuer));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Code", "CallFindClaim", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            HttpClient.Response response=null;
            ExecuteAndHandleHttpResponse(delegate()
            {
                response=SoapHttpClient.SendReceive(request, EndPoint);
            });
            return SoapHttpClient.ParseResponse(response, "CallFindClaim");
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Soap\Common.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.TestFdXsts;

namespace ServerTestFramework.LiveService.TestFdXsts.Soap
{
    public class SoapParseException: System.Exception
    {
        public SoapParseException(string message): base(message)
        {
        }
    }

    internal class SoapParameters: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>
    {
    };

    internal class SoapHttpClient
    {
        internal static HttpClient.Request BuildRequest(string service, string api, SoapParameters soapParams, string []additionalHeaders, System.Net.IPEndPoint endpoint)
        {
            HttpClient.Request request=new HttpClient.Request();
            request.URI="/testfdxstssoap/"+service+".asmx";

            //add any extra headers
            request.OtherHeaders.AddLast("Content-Type: text/xml"); //XrlScan requires a content type to be set
            if (additionalHeaders!=null)
            {
                foreach (string h in additionalHeaders)
                {
                    if (h!=null)
                    {
                        request.OtherHeaders.AddLast(h);
                    }
                }
            }

            //build soap blob
            string soapBlob="<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n"+
                                "<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\r\n"+
                                    "<soap12:Body>\r\n"+
                                        "<"+api+" xmlns=\"http://tempuri.org/\">\r\n";
            if (soapParams!=null)
            {
                foreach (System.Collections.Generic.KeyValuePair<string, string> soapParam in soapParams)
                {
                    soapBlob+="<"+soapParam.Key+">";
                    soapBlob+=soapParam.Value;
                    soapBlob+="</"+soapParam.Key+">\r\n";
                }
            }
            soapBlob+=                  "</"+api+">\r\n"+
                                    "</soap12:Body>\r\n"+
                                "</soap12:Envelope>\r\n";

            request.SetContentLengthAndBody(soapBlob);

            //
            request.Host=endpoint.ToString();
            request.Method="POST";
            return request;
        }

        internal static string ParseResponse(HttpClient.Response response, string api)
        {
            string openingTag="<"+api+"Result>";
            int start=response.ContentString.IndexOf(openingTag);
            if (start==-1)
            {
                throw new UnexpectedTestResultException("Unable to find start tag "+openingTag+" in response:\n"+response);
            }
            start+=openingTag.Length;

            string closingTag="</"+api+"Result>";
            int end=response.ContentString.IndexOf(closingTag);
            if (end==-1)
            {
                throw new UnexpectedTestResultException("Unable to find end tag "+closingTag+" in response:\n"+response);
            }

            return response.ContentString.Substring(start, end-start);
        }

        internal static HttpClient.Response SendReceive(HttpClient.Request request, System.Net.IPEndPoint endpoint)
        {
            HttpClient client=new HttpClient(endpoint);
            client.SendRequest(request);
            HttpClient.Response response=client.GetResponse();
            VerifyResponse(request, response);
            return response;
        }

        private static void VerifyResponse(HttpClient.Request request, HttpClient.Response response)
        {
            if (response==null)
            {
                throw new HttpRequestTimeoutException("Http request timed out.");
            }

            if (response.Status!=200)
            {
                throw new HttpRequestFailedException(response.Status, "Http request failed with: "+response.Status);
            }
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Soap\Attribute.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.TestFdXsts.Soap
{
    public class AttributeClient: AttributeClientBase
    {
        public AttributeClient()
        {
            EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.testfdxstssoap_int);
        }

        public override void Platforms_None()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "Platforms_None", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void Platforms_Xbox360()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "Platforms_Xbox360", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void Platforms_Xbox360_Pc()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "Platforms_Xbox360_Pc", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void Titles_FFFE07D1()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "Titles_FFFE07D1", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void Titles_FFFE07D1_00112233_FFAA7700()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "Titles_FFFE07D1_00112233_FFAA7700", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void Privileges_None()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "Privileges_None", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void Privileges_254()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "Privileges_254", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public HttpClient.Request GeneratePrivileges_128_160_255Request()
        {
            return SoapHttpClient.BuildRequest("Attribute", "Privileges_128_160_255", null, AdditionalHeaders.ToArray(), EndPoint);
        }

        public override void Privileges_128_160_255()
        {
            HttpClient.Request request=GeneratePrivileges_128_160_255Request();
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void Privileges_192_193()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "Privileges_192_193", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void RequiresClaim_Tiger()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "RequiresClaim_Tiger", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void RequiresClaim_Lion_Tiger_Ocelot()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "RequiresClaim_Lion_Tiger_Ocelot", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void AllowedValues_Strings()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "AllowedValues_Strings", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void AuthEquals_StringAgeGroupElder()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "AuthEquals_StringAgeGroupElder", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void AuthEquals_StringAgeGroupElder_IntegerLanguage1337()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "AuthEquals_StringAgeGroupElder_IntegerLanguage1337", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void AuthEquals_Xuid()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "AuthEquals_Xuid", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void AuthGreaterThan_PositiveInteger()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "AuthGreaterThan_PositiveInteger", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void AuthGreaterThan_ZeroInteger()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "AuthGreaterThan_ZeroInteger", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void AuthGreaterThan_NegativeInteger()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "AuthGreaterThan_NegativeInteger", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void AuthGreaterThan_String()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "AuthGreaterThan_String", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void AuthLessThan_PositiveInteger()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "AuthLessThan_PositiveInteger", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void AuthLessThan_ZeroInteger()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "AuthLessThan_ZeroInteger", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void AuthLessThan_NegativeInteger()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "AuthLessThan_NegativeInteger", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void AuthLessThan_String()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "AuthLessThan_String", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void UserParameter_UnsignedLong(ulong ?userId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (userId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("userId", userId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "UserParameter_UnsignedLong", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void UserParameter_NullableUnsignedLong(ulong ?userId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (userId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("userId", userId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "UserParameter_UnsignedLong", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void UserParameter_SignedLong(long ?userId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (userId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("userId", userId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "UserParameter_SignedLong", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void UserParameter_String(string userId)
        {
            SoapParameters soapParams=new SoapParameters();
            soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("userId", userId));

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "UserParameter_String", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void UserParameter_Binary(byte []userId)
        {
            //binary is represented as a base64-encoded string
            string userIdEncoded=(userId!=null?System.Convert.ToBase64String(userId):null);

            SoapParameters soapParams=new SoapParameters();
            soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("userId", userIdEncoded));

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "UserParameter_Binary", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void MachineParameter_UnsignedLong(ulong ?machineId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (machineId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("machineId", machineId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "MachineParameter_UnsignedLong", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void MachineParameter_String(string machineId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (machineId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("machineId", machineId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "MachineParameter_String", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void TitleParameter_UnsignedInt(uint ?titleId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (titleId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("titleId", titleId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "TitleParameter_UnsignedInt", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void TitleParameter_SignedInt(int ?titleId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (titleId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("titleId", titleId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "TitleParameter_SignedInt", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void TitleParameter_UnsignedLong(ulong ?titleId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (titleId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("titleId", titleId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "TitleParameter_UnsignedLong", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void TitleParameter_String(string titleId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (titleId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("titleId", titleId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "TitleParameter_String", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void TitleParameter_Binary(byte []titleId)
        {
            string titleIdEncoded=(titleId!=null?System.Convert.ToBase64String(titleId):null);

            SoapParameters soapParams=new SoapParameters();
            if (titleId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("titleId", titleIdEncoded));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "TitleParameter_Binary", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void TitleParameter_DateTime(System.DateTime ?titleId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (titleId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("titleId", titleId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "TitleParameter_DateTime", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void CountryParameter_UnsignedInt(uint ?countryId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (countryId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("countryId", countryId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "CountryParameter_UnsignedInt", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void CountryParameter_NullableSignedInt(int ?countryId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (countryId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("countryId", countryId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "CountryParameter_NullableSignedInt", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void CountryParameter_SignedShort(short ?countryId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (countryId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("countryId", countryId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "CountryParameter_SignedShort", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void CountryParameter_UnsignedByte(byte ?countryId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (countryId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("countryId", countryId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "CountryParameter_UnsignedByte", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void CountryParameter_String(string countryId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (countryId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("countryId", countryId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "CountryParameter_String", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void CountryParameter_Binary(byte []countryId)
        {
            //binary is represented as a base64-encoded string
            string countryIdEncoded=(countryId!=null?System.Convert.ToBase64String(countryId):null);

            SoapParameters soapParams=new SoapParameters();
            if (countryId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("countryId", countryIdEncoded));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "CountryParameter_Binary", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void CountryParameter_DateTime(System.DateTime ?countryId)
        {
            SoapParameters soapParams=new SoapParameters();
            if (countryId!=null)
            {
                soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("countryId", countryId.ToString()));
            }

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "CountryParameter_DateTime", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void MassiveCombo(ulong userId, ulong machineId, uint titleId, uint countryId)
        {
            SoapParameters soapParams=new SoapParameters();
            soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("userId", userId.ToString()));
            soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("countryId", countryId.ToString()));
            soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("titleId", titleId.ToString()));
            soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("machineId", machineId.ToString()));

            HttpClient.Request request=SoapHttpClient.BuildRequest("Attribute", "MassiveCombo", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Soap\MixedOverride.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.TestFdXsts.Soap
{
    public class MixedOverrideClient: MixedOverrideClientBase
    {
        public MixedOverrideClient()
        {
            EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.testfdxstssoap_int);
        }

        //
        // Mixed tests
        //
        public override void PlatformsPC()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("MixedOverride", "PlatformsPC", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void PlatformsPC_WebConfigXbox360()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("MixedOverride", "PlatformsPC_WebConfigXbox360", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate() { SoapHttpClient.SendReceive(request, EndPoint); });
        }

        public override void TitlesFFFE07D2()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("MixedOverride", "TitlesFFFE07D2", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void TitlesFFFE07D2_WebConfigFFFE07D1()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("MixedOverride", "TitlesFFFE07D2_WebConfigFFFE07D1", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate() { SoapHttpClient.SendReceive(request, EndPoint); });
        }

        public override void Privileges252()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("MixedOverride", "Privileges252", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void Privileges254()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("MixedOverride", "Privileges254", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate() { SoapHttpClient.SendReceive(request, EndPoint); });
        }

        public override void Privileges254_WebConfig255()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("MixedOverride", "Privileges254_WebConfig255", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate() { SoapHttpClient.SendReceive(request, EndPoint); });
        }

        public override void RequiresClaimLion()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("MixedOverride", "RequiresClaimLion", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void RequiresClaimLion_WebConfigTiger()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("MixedOverride", "RequiresClaimLion_WebConfigTiger", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate() { SoapHttpClient.SendReceive(request, EndPoint); });
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Soap\Simple.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.TestFdXsts.Soap
{
    public class SimpleClient: SimpleClientBase
    {
        public SimpleClient()
        {
            EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.testfdxstssoap_int);
        }

        public HttpClient.Request GenerateEchoRequest(string s)
        {
            SoapParameters soapParams=new SoapParameters();
            soapParams.Add(new System.Collections.Generic.KeyValuePair<string, string>("s", s));

            return SoapHttpClient.BuildRequest("Simple", "Echo", soapParams, AdditionalHeaders.ToArray(), EndPoint);
        }

        public override string Echo(string s)
        {
            HttpClient.Request request=GenerateEchoRequest(s);
            HttpClient.Response response=null;
            ExecuteAndHandleHttpResponse(delegate()
            {
                response=SoapHttpClient.SendReceive(request, EndPoint);
            });
            return SoapHttpClient.ParseResponse(response, "Echo");
        }

        public override string GetTokenClaimsString()
        {
            SoapParameters soapParams=new SoapParameters();

            HttpClient.Request request=SoapHttpClient.BuildRequest("Simple", "GetTokenClaimsString", soapParams, AdditionalHeaders.ToArray(), EndPoint);
            HttpClient.Response response=null;
            ExecuteAndHandleHttpResponse(delegate()
            {
                response=SoapHttpClient.SendReceive(request, EndPoint);
            });
            return SoapHttpClient.ParseResponse(response, "GetTokenClaimsString");
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Soap\WebConfig.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.TestFdXsts.Soap
{
    public class WebConfigClient: WebConfigClientBase
    {
        public WebConfigClient()
        {
            EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.testfdxstssoap_int);
        }

        public override void Platforms_Xbox360()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("WebConfig", "Platforms_Xbox360", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void Titles_FFFE07D1()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("WebConfig", "Titles_FFFE07D1", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void Privileges_254()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("WebConfig", "Privileges_254", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void RequiresClaim_Tiger()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("WebConfig", "RequiresClaim_Tiger", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void EqualsAgeGroup_OldEnough()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("WebConfig", "EqualsAgeGroup_OldEnough", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void GreaterThanInteger_13()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("WebConfig", "GreaterThanInteger_13", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void LessThanInteger_13()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("WebConfig", "LessThanInteger_13", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void SimpleAnd()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("WebConfig", "SimpleAnd", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void SimpleOr()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("WebConfig", "SimpleOr", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void SimpleNot()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("WebConfig", "SimpleNot", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void ComplexAndOrNot()
        {
            HttpClient.Request request=SoapHttpClient.BuildRequest("WebConfig", "ComplexAndOrNot", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\Attribute.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.TestFdXsts.Wcf
{
    internal class AttributeWsdlWrapper: ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute.Attribute
    {
        System.Collections.Generic.List<string> AdditionalHeaders;

        public AttributeWsdlWrapper(System.Collections.Generic.List<string> headers, System.Net.IPEndPoint endpoint)
        {
            AdditionalHeaders=headers;
            Url="http://"+endpoint+"/testfdxstswcf/Attribute.svc";
        }

        protected override System.Net.WebRequest GetWebRequest(System.Uri uri)
        {
            System.Net.WebRequest req=base.GetWebRequest(uri);

            if (AdditionalHeaders!=null)
            {
                foreach (string s in AdditionalHeaders)
                {
                    int indexOfSplitter=s.IndexOf(":");
                    string left=s.Substring(0, indexOfSplitter);
                    string right=s.Substring(indexOfSplitter+1);
                    req.Headers.Add(left, right);
                }
            }

            return req;
        }

        protected override System.Net.WebResponse GetWebResponse(System.Net.WebRequest request)
        {
            System.Net.WebResponse response=base.GetWebResponse(request);
            if (response is System.Net.HttpWebResponse)
            {
                WcfCommon.VerifyResponse((System.Net.HttpWebResponse)response);
            }
            return response;
        }
    };

    public class AttributeClient: AttributeClientBase
    {
        public AttributeClient()
        {
            EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.testfdxstswcf_int);
        }

        public override void Platforms_None()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Platforms_None();
                });
            }
        }

        public override void Platforms_Xbox360()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Platforms_Xbox360();
                });
            }
        }

        public override void Platforms_Xbox360_Pc()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Platforms_Xbox360_Pc();
                });
            }
        }

        public override void Titles_FFFE07D1()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Titles_FFFE07D1();
                });
            }
        }

        public override void Titles_FFFE07D1_00112233_FFAA7700()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Titles_FFFE07D1_00112233_FFAA7700();
                });
            }
        }

        public override void Privileges_None()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Privileges_None();
                });
            }
        }

        public override void Privileges_254()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Privileges_254();
                });
            }
        }

        public override void Privileges_128_160_255()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Privileges_128_160_255();
                });
            }
        }

        public override void Privileges_192_193()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Privileges_192_193();
                });
            }
        }

        public override void RequiresClaim_Tiger()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.RequiresClaim_Tiger();
                });
            }
        }

        public override void RequiresClaim_Lion_Tiger_Ocelot()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.RequiresClaim_Lion_Tiger_Ocelot();
                });
            }
        }

        public override void AllowedValues_Strings()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.AllowedValues_Strings();
                });
            }
        }

        public override void AuthEquals_StringAgeGroupElder()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.AuthEquals_StringAgeGroupElder();
                });
            }
        }

        public override void AuthEquals_StringAgeGroupElder_IntegerLanguage1337()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.AuthEquals_StringAgeGroupElder_IntegerLanguage1337();
                });
            }
        }

        public override void AuthEquals_Xuid()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.AuthEquals_Xuid();
                });
            }
        }

        public override void AuthGreaterThan_PositiveInteger()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.AuthGreaterThan_PositiveInteger();
                });
            }
        }

        public override void AuthGreaterThan_ZeroInteger()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.AuthGreaterThan_ZeroInteger();
                });
            }
        }

        public override void AuthGreaterThan_NegativeInteger()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.AuthGreaterThan_NegativeInteger();
                });
            }
        }

        public override void AuthGreaterThan_String()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.AuthGreaterThan_String();
                });
            }
        }

        public override void AuthLessThan_PositiveInteger()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.AuthLessThan_PositiveInteger();
                });
            }
        }

        public override void AuthLessThan_ZeroInteger()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.AuthLessThan_ZeroInteger();
                });
            }
        }

        public override void AuthLessThan_NegativeInteger()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.AuthLessThan_NegativeInteger();
                });
            }
        }

        public override void AuthLessThan_String()
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.AuthLessThan_String();
                });
            }
        }


        public override void UserParameter_UnsignedLong(ulong ?userId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    if (userId!=null)
                    {
                        client.UserParameter_UnsignedLong((ulong)userId, true);
                    }
                    else
                    {
                        client.UserParameter_UnsignedLong(0, false);
                    }
                });
            }
        }

        public override void UserParameter_NullableUnsignedLong(ulong ?userId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.UserParameter_NullableUnsignedLong(userId, true);
                });
            }
        }

        public override void UserParameter_SignedLong(long ?userId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    if (userId!=null)
                    {
                        client.UserParameter_SignedLong((long)userId, true);
                    }
                    else
                    {
                        client.UserParameter_SignedLong(0, false);
                    }
                });
            }
        }

        public override void UserParameter_String(string userId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.UserParameter_String(userId);
                });
            }
        }

        public override void UserParameter_Binary(byte []userId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.UserParameter_Binary(userId);
                });
            }
        }

        public override void MachineParameter_UnsignedLong(ulong ?machineId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    if (machineId!=null)
                    {
                        client.MachineParameter_UnsignedLong((ulong)machineId, true);
                    }
                    else
                    {
                        client.MachineParameter_UnsignedLong(0, false);
                    }
                });
            }
        }

        public override void MachineParameter_String(string machineId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.MachineParameter_String(machineId);
                });
            }
        }

        public override void TitleParameter_UnsignedInt(uint ?titleId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    if (titleId!=null)
                    {
                        client.TitleParameter_UnsignedInt((uint)titleId, true);
                    }
                    else
                    {
                        client.TitleParameter_UnsignedInt(0, false);
                    }
                });
            }
        }

        public override void TitleParameter_SignedInt(int ?titleId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    if (titleId!=null)
                    {
                        client.TitleParameter_SignedInt((int)titleId, true);
                    }
                    else
                    {
                        client.TitleParameter_SignedInt(0, false);
                    }
                });
            }
        }

        public override void TitleParameter_UnsignedLong(ulong ?titleId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    if (titleId!=null)
                    {
                        client.TitleParameter_UnsignedLong((ulong)titleId, true);
                    }
                    else
                    {
                        client.TitleParameter_UnsignedLong(0, false);
                    }
                });
            }
        }

        public override void TitleParameter_String(string titleId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.TitleParameter_String(titleId);
                });
            }
        }

        public override void TitleParameter_Binary(byte []titleId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.TitleParameter_Binary(titleId);
                });
            }
        }

        public override void TitleParameter_DateTime(System.DateTime ?titleId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    if (titleId!=null)
                    {
                        client.TitleParameter_DateTime((System.DateTime)titleId, true);
                    }
                    else
                    {
                        client.TitleParameter_DateTime(System.DateTime.MinValue, false);
                    }
                });
            }
        }

        public override void CountryParameter_UnsignedInt(uint ?countryId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    if (countryId!=null)
                    {
                        client.CountryParameter_UnsignedInt((uint)countryId, true);
                    }
                    else
                    {
                        client.CountryParameter_UnsignedInt(0, false);
                    }
                });
            }
        }

        public override void CountryParameter_NullableSignedInt(int ?countryId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.CountryParameter_NullableSignedInt(countryId, true);
                });
            }
        }

        public override void CountryParameter_SignedShort(short ?countryId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    if (countryId!=null)
                    {
                        client.CountryParameter_SignedShort((short)countryId, true);
                    }
                    else
                    {
                        client.CountryParameter_SignedShort(0, false);
                    }
                });
            }
        }

        public override void CountryParameter_UnsignedByte(byte ?countryId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    if (countryId!=null)
                    {
                        client.CountryParameter_UnsignedByte((byte)countryId, true);
                    }
                    else
                    {
                        client.CountryParameter_UnsignedByte(0, false);
                    }
                });
            }
        }

        public override void CountryParameter_String(string countryId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.CountryParameter_String(countryId);
                });
            }
        }

        public override void CountryParameter_Binary(byte []countryId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.CountryParameter_Binary(countryId);
                });
            }
        }

        public override void CountryParameter_DateTime(System.DateTime ?countryId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    if (countryId!=null)
                    {
                        client.CountryParameter_DateTime((System.DateTime)countryId, true);
                    }
                    else
                    {
                        client.CountryParameter_DateTime(System.DateTime.MinValue, false);
                    }
                });
            }
        }

        public override void MassiveCombo(ulong userId, ulong machineId, uint titleId, uint countryId)
        {
            using (AttributeWsdlWrapper client=new AttributeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.MassiveCombo(userId, true, machineId, true, titleId, true, countryId, true);
                });
            }
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\Common.cs ===
namespace ServerTestFramework.LiveService.TestFdXsts.Wcf
{
    public class WcfCommon
    {
        internal static void VerifyResponse(System.Net.HttpWebResponse response)
        {
            if ((int)response.StatusCode!=200)
            {
                throw new ServerTestFramework.LiveService.TestFdXsts.HttpRequestFailedException((int)response.StatusCode, "Got HTTP Response code: "+(int)response.StatusCode);
            }
        }
    };
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Soap\Mixed.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.TestFdXsts.Soap
{
    public class MixedClient: MixedClientBase
    {
        public MixedClient()
        {
            EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.testfdxstssoap_int);
        }

        //
        // Mixed tests
        //
        public override void PlatformsPC()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("Mixed", "PlatformsPC", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void PlatformsPC_WebConfigXbox360()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("Mixed", "PlatformsPC_WebConfigXbox360", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate() { SoapHttpClient.SendReceive(request, EndPoint); });
        }

        public override void TitlesFFFE07D2()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("Mixed", "TitlesFFFE07D2", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void TitlesFFFE07D2_WebConfigFFFE07D1()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("Mixed", "TitlesFFFE07D2_WebConfigFFFE07D1", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate() { SoapHttpClient.SendReceive(request, EndPoint); });
        }

        public override void Privileges253()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("Mixed", "Privileges253", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void Privileges254()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("Mixed", "Privileges254", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate() { SoapHttpClient.SendReceive(request, EndPoint); });
        }

        public override void Privileges254_WebConfig255()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("Mixed", "Privileges254_WebConfig255", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate() { SoapHttpClient.SendReceive(request, EndPoint); });
        }

        public override void RequiresClaimLion()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("Mixed", "RequiresClaimLion", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate(){SoapHttpClient.SendReceive(request, EndPoint);});
        }

        public override void RequiresClaimLion_WebConfigTiger()
        {
            HttpClient.Request request = SoapHttpClient.BuildRequest("Mixed", "RequiresClaimLion_WebConfigTiger", null, AdditionalHeaders.ToArray(), EndPoint);
            ExecuteAndHandleHttpResponse(delegate() { SoapHttpClient.SendReceive(request, EndPoint); });
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\Mixed.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.TestFdXsts.Wcf
{
    internal class MixedWsdlWrapper: ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed.Mixed
    {
        System.Collections.Generic.List<string> AdditionalHeaders;

        public MixedWsdlWrapper(System.Collections.Generic.List<string> headers, System.Net.IPEndPoint endpoint)
        {
            AdditionalHeaders=headers;
            Url="http://"+endpoint+"/testfdxstswcf/Mixed.svc";
        }

        protected override System.Net.WebRequest GetWebRequest(System.Uri uri)
        {
            System.Net.WebRequest req=base.GetWebRequest(uri);

            if (AdditionalHeaders!=null)
            {
                foreach (string s in AdditionalHeaders)
                {
                    int indexOfSplitter=s.IndexOf(":");
                    string left=s.Substring(0, indexOfSplitter);
                    string right=s.Substring(indexOfSplitter+1);
                    req.Headers.Add(left, right);
                }
            }

            return req;
        }

        protected override System.Net.WebResponse GetWebResponse(System.Net.WebRequest request)
        {
            System.Net.WebResponse response=base.GetWebResponse(request);
            if (response is System.Net.HttpWebResponse)
            {
                WcfCommon.VerifyResponse((System.Net.HttpWebResponse)response);
            }
            return response;
        }
    };

    public class MixedClient: MixedClientBase
    {
        public MixedClient()
        {
            EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.testfdxstswcf_int);
        }

        public override void PlatformsPC()
        {
            using (MixedWsdlWrapper client=new MixedWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.PlatformsPC();
                });
            }
        }

        public override void PlatformsPC_WebConfigXbox360()
        {
            using (MixedWsdlWrapper client = new MixedWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.PlatformsPC_WebConfigXbox360();
                });
            }
        }

        public override void TitlesFFFE07D2()
        {
            using (MixedWsdlWrapper client=new MixedWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.TitlesFFFE07D2();
                });
            }
        }

        public override void TitlesFFFE07D2_WebConfigFFFE07D1()
        {
            using (MixedWsdlWrapper client = new MixedWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.TitlesFFFE07D2_WebConfigFFFE07D1();
                });
            }
        }

        public override void Privileges253()
        {
            using (MixedWsdlWrapper client=new MixedWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Privileges253();
                });
            }
        }

        public override void Privileges254()
        {
            using (MixedWsdlWrapper client = new MixedWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Privileges254();
                });
            }
        }

        public override void Privileges254_WebConfig255()
        {
            using (MixedWsdlWrapper client = new MixedWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Privileges254_WebConfig255();
                });
            }
        }

        public override void RequiresClaimLion()
        {
            using (MixedWsdlWrapper client=new MixedWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.RequiresClaimLion();
                });
            }
        }

        public override void RequiresClaimLion_WebConfigTiger()
        {
            using (MixedWsdlWrapper client = new MixedWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.RequiresClaimLion_WebConfigTiger();
                });
            }
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\Code.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.TestFdXsts.Wcf
{
    internal class CodeWsdlWrapper: ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code.Code
    {
        System.Collections.Generic.List<string> AdditionalHeaders;

        public CodeWsdlWrapper(System.Collections.Generic.List<string> headers, System.Net.IPEndPoint endpoint)
        {
            AdditionalHeaders=headers;
            Url="http://"+endpoint+"/testfdxstswcf/Code.svc";
        }

        protected override System.Net.WebRequest GetWebRequest(System.Uri uri)
        {
            System.Net.WebRequest req=base.GetWebRequest(uri);

            if (AdditionalHeaders!=null)
            {
                foreach (string s in AdditionalHeaders)
                {
                    int indexOfSplitter=s.IndexOf(":");
                    string left=s.Substring(0, indexOfSplitter);
                    string right=s.Substring(indexOfSplitter+1);
                    req.Headers.Add(left, right);
                }
            }

            return req;
        }

        protected override System.Net.WebResponse GetWebResponse(System.Net.WebRequest request)
        {
            System.Net.WebResponse response=base.GetWebResponse(request);
            if (response is System.Net.HttpWebResponse)
            {
                WcfCommon.VerifyResponse((System.Net.HttpWebResponse)response);
            }
            return response;
        }
    };

    public class CodeClient: CodeClientBase
    {
        public CodeClient()
        {
            EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.testfdxstswcf_int);
        }

        public override string CallVerifyOperator(string method, string claimType, string value, string overrideIssuer)
        {
            using (CodeWsdlWrapper client=new CodeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                string ret=null;
                ExecuteAndHandleHttpResponse(delegate()
                {
                    ret=client.CallVerifyOperator(method, claimType, value, overrideIssuer);
                });
                return ret;
            }
        }

        public override string CallFindClaim(string claimType, string overrideIssuer)
        {
            using (CodeWsdlWrapper client=new CodeWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                string ret=null;
                ExecuteAndHandleHttpResponse(delegate()
                {
                    ret=client.CallFindClaim(claimType, overrideIssuer);
                });
                return ret;
            }
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\Code.wsdl.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Code {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_ICode", Namespace="http://tempuri.org/")]
    public partial class Code : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CallVerifyOperatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallFindClaimOperationCompleted;
        
        /// <remarks/>
        public Code() {
            this.Url = "http://craigickxblob:13374/testfdxstswcf/Code.svc";
        }
        
        /// <remarks/>
        public event CallVerifyOperatorCompletedEventHandler CallVerifyOperatorCompleted;
        
        /// <remarks/>
        public event CallFindClaimCompletedEventHandler CallFindClaimCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICode/CallVerifyOperator", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CallVerifyOperator([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string method, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string claimType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string value, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string overrideIssuer) {
            object[] results = this.Invoke("CallVerifyOperator", new object[] {
                        method,
                        claimType,
                        value,
                        overrideIssuer});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCallVerifyOperator(string method, string claimType, string value, string overrideIssuer, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CallVerifyOperator", new object[] {
                        method,
                        claimType,
                        value,
                        overrideIssuer}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCallVerifyOperator(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CallVerifyOperatorAsync(string method, string claimType, string value, string overrideIssuer) {
            this.CallVerifyOperatorAsync(method, claimType, value, overrideIssuer, null);
        }
        
        /// <remarks/>
        public void CallVerifyOperatorAsync(string method, string claimType, string value, string overrideIssuer, object userState) {
            if ((this.CallVerifyOperatorOperationCompleted == null)) {
                this.CallVerifyOperatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallVerifyOperatorOperationCompleted);
            }
            this.InvokeAsync("CallVerifyOperator", new object[] {
                        method,
                        claimType,
                        value,
                        overrideIssuer}, this.CallVerifyOperatorOperationCompleted, userState);
        }
        
        private void OnCallVerifyOperatorOperationCompleted(object arg) {
            if ((this.CallVerifyOperatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallVerifyOperatorCompleted(this, new CallVerifyOperatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICode/CallFindClaim", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CallFindClaim([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string claimType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string overrideIssuer) {
            object[] results = this.Invoke("CallFindClaim", new object[] {
                        claimType,
                        overrideIssuer});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCallFindClaim(string claimType, string overrideIssuer, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CallFindClaim", new object[] {
                        claimType,
                        overrideIssuer}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCallFindClaim(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CallFindClaimAsync(string claimType, string overrideIssuer) {
            this.CallFindClaimAsync(claimType, overrideIssuer, null);
        }
        
        /// <remarks/>
        public void CallFindClaimAsync(string claimType, string overrideIssuer, object userState) {
            if ((this.CallFindClaimOperationCompleted == null)) {
                this.CallFindClaimOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallFindClaimOperationCompleted);
            }
            this.InvokeAsync("CallFindClaim", new object[] {
                        claimType,
                        overrideIssuer}, this.CallFindClaimOperationCompleted, userState);
        }
        
        private void OnCallFindClaimOperationCompleted(object arg) {
            if ((this.CallFindClaimCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallFindClaimCompleted(this, new CallFindClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CallVerifyOperatorCompletedEventHandler(object sender, CallVerifyOperatorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallVerifyOperatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallVerifyOperatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CallFindClaimCompletedEventHandler(object sender, CallFindClaimCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallFindClaimCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallFindClaimCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\Mixed.wsdl.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Mixed {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IMixed", Namespace="http://tempuri.org/")]
    public partial class Mixed : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PlatformsPCOperationCompleted;
        
        private System.Threading.SendOrPostCallback PlatformsPC_WebConfigXbox360OperationCompleted;
        
        private System.Threading.SendOrPostCallback TitlesFFFE07D2OperationCompleted;
        
        private System.Threading.SendOrPostCallback TitlesFFFE07D2_WebConfigFFFE07D1OperationCompleted;
        
        private System.Threading.SendOrPostCallback Privileges253OperationCompleted;
        
        private System.Threading.SendOrPostCallback Privileges254OperationCompleted;
        
        private System.Threading.SendOrPostCallback Privileges254_WebConfig255OperationCompleted;
        
        private System.Threading.SendOrPostCallback RequiresClaimLionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequiresClaimLion_WebConfigTigerOperationCompleted;
        
        /// <remarks/>
        public Mixed() {
            this.Url = "http://craigickxblob:13374/testfdxstswcf/Mixed.svc";
        }
        
        /// <remarks/>
        public event PlatformsPCCompletedEventHandler PlatformsPCCompleted;
        
        /// <remarks/>
        public event PlatformsPC_WebConfigXbox360CompletedEventHandler PlatformsPC_WebConfigXbox360Completed;
        
        /// <remarks/>
        public event TitlesFFFE07D2CompletedEventHandler TitlesFFFE07D2Completed;
        
        /// <remarks/>
        public event TitlesFFFE07D2_WebConfigFFFE07D1CompletedEventHandler TitlesFFFE07D2_WebConfigFFFE07D1Completed;
        
        /// <remarks/>
        public event Privileges253CompletedEventHandler Privileges253Completed;
        
        /// <remarks/>
        public event Privileges254CompletedEventHandler Privileges254Completed;
        
        /// <remarks/>
        public event Privileges254_WebConfig255CompletedEventHandler Privileges254_WebConfig255Completed;
        
        /// <remarks/>
        public event RequiresClaimLionCompletedEventHandler RequiresClaimLionCompleted;
        
        /// <remarks/>
        public event RequiresClaimLion_WebConfigTigerCompletedEventHandler RequiresClaimLion_WebConfigTigerCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixed/PlatformsPC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PlatformsPC() {
            this.Invoke("PlatformsPC", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPlatformsPC(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PlatformsPC", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPlatformsPC(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PlatformsPCAsync() {
            this.PlatformsPCAsync(null);
        }
        
        /// <remarks/>
        public void PlatformsPCAsync(object userState) {
            if ((this.PlatformsPCOperationCompleted == null)) {
                this.PlatformsPCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPlatformsPCOperationCompleted);
            }
            this.InvokeAsync("PlatformsPC", new object[0], this.PlatformsPCOperationCompleted, userState);
        }
        
        private void OnPlatformsPCOperationCompleted(object arg) {
            if ((this.PlatformsPCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PlatformsPCCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixed/PlatformsPC_WebConfigXbox360", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PlatformsPC_WebConfigXbox360() {
            this.Invoke("PlatformsPC_WebConfigXbox360", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPlatformsPC_WebConfigXbox360(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PlatformsPC_WebConfigXbox360", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPlatformsPC_WebConfigXbox360(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PlatformsPC_WebConfigXbox360Async() {
            this.PlatformsPC_WebConfigXbox360Async(null);
        }
        
        /// <remarks/>
        public void PlatformsPC_WebConfigXbox360Async(object userState) {
            if ((this.PlatformsPC_WebConfigXbox360OperationCompleted == null)) {
                this.PlatformsPC_WebConfigXbox360OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPlatformsPC_WebConfigXbox360OperationCompleted);
            }
            this.InvokeAsync("PlatformsPC_WebConfigXbox360", new object[0], this.PlatformsPC_WebConfigXbox360OperationCompleted, userState);
        }
        
        private void OnPlatformsPC_WebConfigXbox360OperationCompleted(object arg) {
            if ((this.PlatformsPC_WebConfigXbox360Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PlatformsPC_WebConfigXbox360Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixed/TitlesFFFE07D2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TitlesFFFE07D2() {
            this.Invoke("TitlesFFFE07D2", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitlesFFFE07D2(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TitlesFFFE07D2", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitlesFFFE07D2(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TitlesFFFE07D2Async() {
            this.TitlesFFFE07D2Async(null);
        }
        
        /// <remarks/>
        public void TitlesFFFE07D2Async(object userState) {
            if ((this.TitlesFFFE07D2OperationCompleted == null)) {
                this.TitlesFFFE07D2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitlesFFFE07D2OperationCompleted);
            }
            this.InvokeAsync("TitlesFFFE07D2", new object[0], this.TitlesFFFE07D2OperationCompleted, userState);
        }
        
        private void OnTitlesFFFE07D2OperationCompleted(object arg) {
            if ((this.TitlesFFFE07D2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TitlesFFFE07D2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixed/TitlesFFFE07D2_WebConfigFFFE07D1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TitlesFFFE07D2_WebConfigFFFE07D1() {
            this.Invoke("TitlesFFFE07D2_WebConfigFFFE07D1", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitlesFFFE07D2_WebConfigFFFE07D1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TitlesFFFE07D2_WebConfigFFFE07D1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitlesFFFE07D2_WebConfigFFFE07D1(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TitlesFFFE07D2_WebConfigFFFE07D1Async() {
            this.TitlesFFFE07D2_WebConfigFFFE07D1Async(null);
        }
        
        /// <remarks/>
        public void TitlesFFFE07D2_WebConfigFFFE07D1Async(object userState) {
            if ((this.TitlesFFFE07D2_WebConfigFFFE07D1OperationCompleted == null)) {
                this.TitlesFFFE07D2_WebConfigFFFE07D1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitlesFFFE07D2_WebConfigFFFE07D1OperationCompleted);
            }
            this.InvokeAsync("TitlesFFFE07D2_WebConfigFFFE07D1", new object[0], this.TitlesFFFE07D2_WebConfigFFFE07D1OperationCompleted, userState);
        }
        
        private void OnTitlesFFFE07D2_WebConfigFFFE07D1OperationCompleted(object arg) {
            if ((this.TitlesFFFE07D2_WebConfigFFFE07D1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TitlesFFFE07D2_WebConfigFFFE07D1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixed/Privileges253", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Privileges253() {
            this.Invoke("Privileges253", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrivileges253(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Privileges253", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPrivileges253(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Privileges253Async() {
            this.Privileges253Async(null);
        }
        
        /// <remarks/>
        public void Privileges253Async(object userState) {
            if ((this.Privileges253OperationCompleted == null)) {
                this.Privileges253OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivileges253OperationCompleted);
            }
            this.InvokeAsync("Privileges253", new object[0], this.Privileges253OperationCompleted, userState);
        }
        
        private void OnPrivileges253OperationCompleted(object arg) {
            if ((this.Privileges253Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privileges253Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixed/Privileges254", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Privileges254() {
            this.Invoke("Privileges254", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrivileges254(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Privileges254", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPrivileges254(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Privileges254Async() {
            this.Privileges254Async(null);
        }
        
        /// <remarks/>
        public void Privileges254Async(object userState) {
            if ((this.Privileges254OperationCompleted == null)) {
                this.Privileges254OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivileges254OperationCompleted);
            }
            this.InvokeAsync("Privileges254", new object[0], this.Privileges254OperationCompleted, userState);
        }
        
        private void OnPrivileges254OperationCompleted(object arg) {
            if ((this.Privileges254Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privileges254Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixed/Privileges254_WebConfig255", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Privileges254_WebConfig255() {
            this.Invoke("Privileges254_WebConfig255", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrivileges254_WebConfig255(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Privileges254_WebConfig255", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPrivileges254_WebConfig255(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Privileges254_WebConfig255Async() {
            this.Privileges254_WebConfig255Async(null);
        }
        
        /// <remarks/>
        public void Privileges254_WebConfig255Async(object userState) {
            if ((this.Privileges254_WebConfig255OperationCompleted == null)) {
                this.Privileges254_WebConfig255OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivileges254_WebConfig255OperationCompleted);
            }
            this.InvokeAsync("Privileges254_WebConfig255", new object[0], this.Privileges254_WebConfig255OperationCompleted, userState);
        }
        
        private void OnPrivileges254_WebConfig255OperationCompleted(object arg) {
            if ((this.Privileges254_WebConfig255Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privileges254_WebConfig255Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixed/RequiresClaimLion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequiresClaimLion() {
            this.Invoke("RequiresClaimLion", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequiresClaimLion(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequiresClaimLion", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRequiresClaimLion(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RequiresClaimLionAsync() {
            this.RequiresClaimLionAsync(null);
        }
        
        /// <remarks/>
        public void RequiresClaimLionAsync(object userState) {
            if ((this.RequiresClaimLionOperationCompleted == null)) {
                this.RequiresClaimLionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequiresClaimLionOperationCompleted);
            }
            this.InvokeAsync("RequiresClaimLion", new object[0], this.RequiresClaimLionOperationCompleted, userState);
        }
        
        private void OnRequiresClaimLionOperationCompleted(object arg) {
            if ((this.RequiresClaimLionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequiresClaimLionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixed/RequiresClaimLion_WebConfigTiger", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequiresClaimLion_WebConfigTiger() {
            this.Invoke("RequiresClaimLion_WebConfigTiger", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequiresClaimLion_WebConfigTiger(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequiresClaimLion_WebConfigTiger", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRequiresClaimLion_WebConfigTiger(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RequiresClaimLion_WebConfigTigerAsync() {
            this.RequiresClaimLion_WebConfigTigerAsync(null);
        }
        
        /// <remarks/>
        public void RequiresClaimLion_WebConfigTigerAsync(object userState) {
            if ((this.RequiresClaimLion_WebConfigTigerOperationCompleted == null)) {
                this.RequiresClaimLion_WebConfigTigerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequiresClaimLion_WebConfigTigerOperationCompleted);
            }
            this.InvokeAsync("RequiresClaimLion_WebConfigTiger", new object[0], this.RequiresClaimLion_WebConfigTigerOperationCompleted, userState);
        }
        
        private void OnRequiresClaimLion_WebConfigTigerOperationCompleted(object arg) {
            if ((this.RequiresClaimLion_WebConfigTigerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequiresClaimLion_WebConfigTigerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PlatformsPCCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PlatformsPC_WebConfigXbox360CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TitlesFFFE07D2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TitlesFFFE07D2_WebConfigFFFE07D1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Privileges253CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Privileges254CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Privileges254_WebConfig255CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequiresClaimLionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequiresClaimLion_WebConfigTigerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\MixedOverride.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.TestFdXsts.Wcf
{
    internal class MixedOverrideWsdlWrapper: ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride.MixedOverride
    {
        System.Collections.Generic.List<string> AdditionalHeaders;

        public MixedOverrideWsdlWrapper(System.Collections.Generic.List<string> headers, System.Net.IPEndPoint endpoint)
        {
            AdditionalHeaders=headers;
            Url="http://"+endpoint+"/testfdxstswcf/MixedOverride.svc";
        }

        protected override System.Net.WebRequest GetWebRequest(System.Uri uri)
        {
            System.Net.WebRequest req=base.GetWebRequest(uri);

            if (AdditionalHeaders!=null)
            {
                foreach (string s in AdditionalHeaders)
                {
                    int indexOfSplitter=s.IndexOf(":");
                    string left=s.Substring(0, indexOfSplitter);
                    string right=s.Substring(indexOfSplitter+1);
                    req.Headers.Add(left, right);
                }
            }

            return req;
        }

        protected override System.Net.WebResponse GetWebResponse(System.Net.WebRequest request)
        {
            System.Net.WebResponse response=base.GetWebResponse(request);
            if (response is System.Net.HttpWebResponse)
            {
                WcfCommon.VerifyResponse((System.Net.HttpWebResponse)response);
            }
            return response;
        }
    };

    public class MixedOverrideClient: MixedOverrideClientBase
    {
        public MixedOverrideClient()
        {
            EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.testfdxstswcf_int);
        }

        public override void PlatformsPC()
        {
            using (MixedOverrideWsdlWrapper client=new MixedOverrideWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.PlatformsPC();
                });
            }
        }

        public override void PlatformsPC_WebConfigXbox360()
        {
            using (MixedOverrideWsdlWrapper client = new MixedOverrideWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.PlatformsPC_WebConfigXbox360();
                });
            }
        }

        public override void TitlesFFFE07D2()
        {
            using (MixedOverrideWsdlWrapper client=new MixedOverrideWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.TitlesFFFE07D2();
                });
            }
        }

        public override void TitlesFFFE07D2_WebConfigFFFE07D1()
        {
            using (MixedOverrideWsdlWrapper client = new MixedOverrideWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.TitlesFFFE07D2_WebConfigFFFE07D1();
                });
            }
        }

        public override void Privileges252()
        {
            using (MixedOverrideWsdlWrapper client=new MixedOverrideWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Privileges252();
                });
            }
        }

        public override void Privileges254()
        {
            using (MixedOverrideWsdlWrapper client = new MixedOverrideWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Privileges254();
                });
            }
        }

        public override void Privileges254_WebConfig255()
        {
            using (MixedOverrideWsdlWrapper client = new MixedOverrideWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Privileges254_WebConfig255();
                });
            }
        }

        public override void RequiresClaimLion()
        {
            using (MixedOverrideWsdlWrapper client=new MixedOverrideWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.RequiresClaimLion();
                });
            }
        }

        public override void RequiresClaimLion_WebConfigTiger()
        {
            using (MixedOverrideWsdlWrapper client = new MixedOverrideWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.RequiresClaimLion_WebConfigTiger();
                });
            }
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\Simple.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.TestFdXsts.Wcf
{
    internal class SimpleWsdlWrapper: ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple.Simple
    {
        System.Collections.Generic.List<string> AdditionalHeaders;

        public SimpleWsdlWrapper(System.Collections.Generic.List<string> headers, System.Net.IPEndPoint endpoint)
        {
            AdditionalHeaders=headers;
            Url="http://"+endpoint+"/testfdxstswcf/Simple.svc";
        }

        protected override System.Net.WebRequest GetWebRequest(System.Uri uri)
        {
            System.Net.WebRequest req=base.GetWebRequest(uri);

            if (AdditionalHeaders!=null)
            {
                foreach (string s in AdditionalHeaders)
                {
                    int indexOfSplitter=s.IndexOf(":");
                    string left=s.Substring(0, indexOfSplitter);
                    string right=s.Substring(indexOfSplitter+1);
                    req.Headers.Add(left, right);
                }
            }

            return req;
        }

        protected override System.Net.WebResponse GetWebResponse(System.Net.WebRequest request)
        {
            System.Net.WebResponse response=base.GetWebResponse(request);
            if (response is System.Net.HttpWebResponse)
            {
                WcfCommon.VerifyResponse((System.Net.HttpWebResponse)response);
            }
            return response;
        }
    };

    public class SimpleClient: SimpleClientBase
    {
        public SimpleClient()
        {
            EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.testfdxstswcf_int);
        }

        public override string Echo(string s)
        {
            using (SimpleWsdlWrapper client=new SimpleWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                string ret=null;
                ExecuteAndHandleHttpResponse(delegate()
                {
                    ret=client.Echo(s);
                });
                return ret;
            }
        }

        public override string GetTokenClaimsString()
        {
            using (SimpleWsdlWrapper client=new SimpleWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                string ret=null;
                ExecuteAndHandleHttpResponse(delegate()
                {
                    ret=client.GetTokenClaimsString();
                });
                return ret;
            }
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\Attribute.wsdl.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Attribute {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IAttribute", Namespace="http://tempuri.org/")]
    public partial class Attribute : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CountryParameter_UnsignedIntOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountryParameter_NullableSignedIntOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountryParameter_SignedShortOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountryParameter_UnsignedByteOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountryParameter_StringOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountryParameter_BinaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountryParameter_DateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback MassiveComboOperationCompleted;
        
        private System.Threading.SendOrPostCallback Platforms_NoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback Platforms_Xbox360OperationCompleted;
        
        private System.Threading.SendOrPostCallback Platforms_Xbox360_PcOperationCompleted;
        
        private System.Threading.SendOrPostCallback Titles_FFFE07D1OperationCompleted;
        
        private System.Threading.SendOrPostCallback Titles_FFFE07D1_00112233_FFAA7700OperationCompleted;
        
        private System.Threading.SendOrPostCallback Privileges_NoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback Privileges_254OperationCompleted;
        
        private System.Threading.SendOrPostCallback Privileges_128_160_255OperationCompleted;
        
        private System.Threading.SendOrPostCallback Privileges_192_193OperationCompleted;
        
        private System.Threading.SendOrPostCallback RequiresClaim_TigerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequiresClaim_Lion_Tiger_OcelotOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllowedValues_StringsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthEquals_StringAgeGroupElderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthEquals_StringAgeGroupElder_IntegerLanguage1337OperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthEquals_XuidOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthGreaterThan_PositiveIntegerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthGreaterThan_ZeroIntegerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthGreaterThan_NegativeIntegerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthGreaterThan_StringOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthLessThan_PositiveIntegerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthLessThan_ZeroIntegerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthLessThan_NegativeIntegerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthLessThan_StringOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserParameter_UnsignedLongOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserParameter_NullableUnsignedLongOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserParameter_SignedLongOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserParameter_StringOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserParameter_BinaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback MachineParameter_UnsignedLongOperationCompleted;
        
        private System.Threading.SendOrPostCallback MachineParameter_StringOperationCompleted;
        
        private System.Threading.SendOrPostCallback TitleParameter_UnsignedIntOperationCompleted;
        
        private System.Threading.SendOrPostCallback TitleParameter_SignedIntOperationCompleted;
        
        private System.Threading.SendOrPostCallback TitleParameter_UnsignedLongOperationCompleted;
        
        private System.Threading.SendOrPostCallback TitleParameter_StringOperationCompleted;
        
        private System.Threading.SendOrPostCallback TitleParameter_BinaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback TitleParameter_DateTimeOperationCompleted;
        
        /// <remarks/>
        public Attribute() {
            this.Url = "http://craigickxblob:13374/testfdxstswcf/Attribute.svc";
        }
        
        /// <remarks/>
        public event CountryParameter_UnsignedIntCompletedEventHandler CountryParameter_UnsignedIntCompleted;
        
        /// <remarks/>
        public event CountryParameter_NullableSignedIntCompletedEventHandler CountryParameter_NullableSignedIntCompleted;
        
        /// <remarks/>
        public event CountryParameter_SignedShortCompletedEventHandler CountryParameter_SignedShortCompleted;
        
        /// <remarks/>
        public event CountryParameter_UnsignedByteCompletedEventHandler CountryParameter_UnsignedByteCompleted;
        
        /// <remarks/>
        public event CountryParameter_StringCompletedEventHandler CountryParameter_StringCompleted;
        
        /// <remarks/>
        public event CountryParameter_BinaryCompletedEventHandler CountryParameter_BinaryCompleted;
        
        /// <remarks/>
        public event CountryParameter_DateTimeCompletedEventHandler CountryParameter_DateTimeCompleted;
        
        /// <remarks/>
        public event MassiveComboCompletedEventHandler MassiveComboCompleted;
        
        /// <remarks/>
        public event Platforms_NoneCompletedEventHandler Platforms_NoneCompleted;
        
        /// <remarks/>
        public event Platforms_Xbox360CompletedEventHandler Platforms_Xbox360Completed;
        
        /// <remarks/>
        public event Platforms_Xbox360_PcCompletedEventHandler Platforms_Xbox360_PcCompleted;
        
        /// <remarks/>
        public event Titles_FFFE07D1CompletedEventHandler Titles_FFFE07D1Completed;
        
        /// <remarks/>
        public event Titles_FFFE07D1_00112233_FFAA7700CompletedEventHandler Titles_FFFE07D1_00112233_FFAA7700Completed;
        
        /// <remarks/>
        public event Privileges_NoneCompletedEventHandler Privileges_NoneCompleted;
        
        /// <remarks/>
        public event Privileges_254CompletedEventHandler Privileges_254Completed;
        
        /// <remarks/>
        public event Privileges_128_160_255CompletedEventHandler Privileges_128_160_255Completed;
        
        /// <remarks/>
        public event Privileges_192_193CompletedEventHandler Privileges_192_193Completed;
        
        /// <remarks/>
        public event RequiresClaim_TigerCompletedEventHandler RequiresClaim_TigerCompleted;
        
        /// <remarks/>
        public event RequiresClaim_Lion_Tiger_OcelotCompletedEventHandler RequiresClaim_Lion_Tiger_OcelotCompleted;
        
        /// <remarks/>
        public event AllowedValues_StringsCompletedEventHandler AllowedValues_StringsCompleted;
        
        /// <remarks/>
        public event AuthEquals_StringAgeGroupElderCompletedEventHandler AuthEquals_StringAgeGroupElderCompleted;
        
        /// <remarks/>
        public event AuthEquals_StringAgeGroupElder_IntegerLanguage1337CompletedEventHandler AuthEquals_StringAgeGroupElder_IntegerLanguage1337Completed;
        
        /// <remarks/>
        public event AuthEquals_XuidCompletedEventHandler AuthEquals_XuidCompleted;
        
        /// <remarks/>
        public event AuthGreaterThan_PositiveIntegerCompletedEventHandler AuthGreaterThan_PositiveIntegerCompleted;
        
        /// <remarks/>
        public event AuthGreaterThan_ZeroIntegerCompletedEventHandler AuthGreaterThan_ZeroIntegerCompleted;
        
        /// <remarks/>
        public event AuthGreaterThan_NegativeIntegerCompletedEventHandler AuthGreaterThan_NegativeIntegerCompleted;
        
        /// <remarks/>
        public event AuthGreaterThan_StringCompletedEventHandler AuthGreaterThan_StringCompleted;
        
        /// <remarks/>
        public event AuthLessThan_PositiveIntegerCompletedEventHandler AuthLessThan_PositiveIntegerCompleted;
        
        /// <remarks/>
        public event AuthLessThan_ZeroIntegerCompletedEventHandler AuthLessThan_ZeroIntegerCompleted;
        
        /// <remarks/>
        public event AuthLessThan_NegativeIntegerCompletedEventHandler AuthLessThan_NegativeIntegerCompleted;
        
        /// <remarks/>
        public event AuthLessThan_StringCompletedEventHandler AuthLessThan_StringCompleted;
        
        /// <remarks/>
        public event UserParameter_UnsignedLongCompletedEventHandler UserParameter_UnsignedLongCompleted;
        
        /// <remarks/>
        public event UserParameter_NullableUnsignedLongCompletedEventHandler UserParameter_NullableUnsignedLongCompleted;
        
        /// <remarks/>
        public event UserParameter_SignedLongCompletedEventHandler UserParameter_SignedLongCompleted;
        
        /// <remarks/>
        public event UserParameter_StringCompletedEventHandler UserParameter_StringCompleted;
        
        /// <remarks/>
        public event UserParameter_BinaryCompletedEventHandler UserParameter_BinaryCompleted;
        
        /// <remarks/>
        public event MachineParameter_UnsignedLongCompletedEventHandler MachineParameter_UnsignedLongCompleted;
        
        /// <remarks/>
        public event MachineParameter_StringCompletedEventHandler MachineParameter_StringCompleted;
        
        /// <remarks/>
        public event TitleParameter_UnsignedIntCompletedEventHandler TitleParameter_UnsignedIntCompleted;
        
        /// <remarks/>
        public event TitleParameter_SignedIntCompletedEventHandler TitleParameter_SignedIntCompleted;
        
        /// <remarks/>
        public event TitleParameter_UnsignedLongCompletedEventHandler TitleParameter_UnsignedLongCompleted;
        
        /// <remarks/>
        public event TitleParameter_StringCompletedEventHandler TitleParameter_StringCompleted;
        
        /// <remarks/>
        public event TitleParameter_BinaryCompletedEventHandler TitleParameter_BinaryCompleted;
        
        /// <remarks/>
        public event TitleParameter_DateTimeCompletedEventHandler TitleParameter_DateTimeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/CountryParameter_UnsignedInt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CountryParameter_UnsignedInt(uint countryId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool countryIdSpecified) {
            this.Invoke("CountryParameter_UnsignedInt", new object[] {
                        countryId,
                        countryIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCountryParameter_UnsignedInt(uint countryId, bool countryIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CountryParameter_UnsignedInt", new object[] {
                        countryId,
                        countryIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCountryParameter_UnsignedInt(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CountryParameter_UnsignedIntAsync(uint countryId, bool countryIdSpecified) {
            this.CountryParameter_UnsignedIntAsync(countryId, countryIdSpecified, null);
        }
        
        /// <remarks/>
        public void CountryParameter_UnsignedIntAsync(uint countryId, bool countryIdSpecified, object userState) {
            if ((this.CountryParameter_UnsignedIntOperationCompleted == null)) {
                this.CountryParameter_UnsignedIntOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryParameter_UnsignedIntOperationCompleted);
            }
            this.InvokeAsync("CountryParameter_UnsignedInt", new object[] {
                        countryId,
                        countryIdSpecified}, this.CountryParameter_UnsignedIntOperationCompleted, userState);
        }
        
        private void OnCountryParameter_UnsignedIntOperationCompleted(object arg) {
            if ((this.CountryParameter_UnsignedIntCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryParameter_UnsignedIntCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/CountryParameter_NullableSignedInt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CountryParameter_NullableSignedInt([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> countryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool countryIdSpecified) {
            this.Invoke("CountryParameter_NullableSignedInt", new object[] {
                        countryId,
                        countryIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCountryParameter_NullableSignedInt(System.Nullable<int> countryId, bool countryIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CountryParameter_NullableSignedInt", new object[] {
                        countryId,
                        countryIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCountryParameter_NullableSignedInt(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CountryParameter_NullableSignedIntAsync(System.Nullable<int> countryId, bool countryIdSpecified) {
            this.CountryParameter_NullableSignedIntAsync(countryId, countryIdSpecified, null);
        }
        
        /// <remarks/>
        public void CountryParameter_NullableSignedIntAsync(System.Nullable<int> countryId, bool countryIdSpecified, object userState) {
            if ((this.CountryParameter_NullableSignedIntOperationCompleted == null)) {
                this.CountryParameter_NullableSignedIntOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryParameter_NullableSignedIntOperationCompleted);
            }
            this.InvokeAsync("CountryParameter_NullableSignedInt", new object[] {
                        countryId,
                        countryIdSpecified}, this.CountryParameter_NullableSignedIntOperationCompleted, userState);
        }
        
        private void OnCountryParameter_NullableSignedIntOperationCompleted(object arg) {
            if ((this.CountryParameter_NullableSignedIntCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryParameter_NullableSignedIntCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/CountryParameter_SignedShort", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CountryParameter_SignedShort(short countryId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool countryIdSpecified) {
            this.Invoke("CountryParameter_SignedShort", new object[] {
                        countryId,
                        countryIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCountryParameter_SignedShort(short countryId, bool countryIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CountryParameter_SignedShort", new object[] {
                        countryId,
                        countryIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCountryParameter_SignedShort(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CountryParameter_SignedShortAsync(short countryId, bool countryIdSpecified) {
            this.CountryParameter_SignedShortAsync(countryId, countryIdSpecified, null);
        }
        
        /// <remarks/>
        public void CountryParameter_SignedShortAsync(short countryId, bool countryIdSpecified, object userState) {
            if ((this.CountryParameter_SignedShortOperationCompleted == null)) {
                this.CountryParameter_SignedShortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryParameter_SignedShortOperationCompleted);
            }
            this.InvokeAsync("CountryParameter_SignedShort", new object[] {
                        countryId,
                        countryIdSpecified}, this.CountryParameter_SignedShortOperationCompleted, userState);
        }
        
        private void OnCountryParameter_SignedShortOperationCompleted(object arg) {
            if ((this.CountryParameter_SignedShortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryParameter_SignedShortCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/CountryParameter_UnsignedByte", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CountryParameter_UnsignedByte(byte countryId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool countryIdSpecified) {
            this.Invoke("CountryParameter_UnsignedByte", new object[] {
                        countryId,
                        countryIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCountryParameter_UnsignedByte(byte countryId, bool countryIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CountryParameter_UnsignedByte", new object[] {
                        countryId,
                        countryIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCountryParameter_UnsignedByte(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CountryParameter_UnsignedByteAsync(byte countryId, bool countryIdSpecified) {
            this.CountryParameter_UnsignedByteAsync(countryId, countryIdSpecified, null);
        }
        
        /// <remarks/>
        public void CountryParameter_UnsignedByteAsync(byte countryId, bool countryIdSpecified, object userState) {
            if ((this.CountryParameter_UnsignedByteOperationCompleted == null)) {
                this.CountryParameter_UnsignedByteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryParameter_UnsignedByteOperationCompleted);
            }
            this.InvokeAsync("CountryParameter_UnsignedByte", new object[] {
                        countryId,
                        countryIdSpecified}, this.CountryParameter_UnsignedByteOperationCompleted, userState);
        }
        
        private void OnCountryParameter_UnsignedByteOperationCompleted(object arg) {
            if ((this.CountryParameter_UnsignedByteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryParameter_UnsignedByteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/CountryParameter_String", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CountryParameter_String([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string countryId) {
            this.Invoke("CountryParameter_String", new object[] {
                        countryId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCountryParameter_String(string countryId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CountryParameter_String", new object[] {
                        countryId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCountryParameter_String(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CountryParameter_StringAsync(string countryId) {
            this.CountryParameter_StringAsync(countryId, null);
        }
        
        /// <remarks/>
        public void CountryParameter_StringAsync(string countryId, object userState) {
            if ((this.CountryParameter_StringOperationCompleted == null)) {
                this.CountryParameter_StringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryParameter_StringOperationCompleted);
            }
            this.InvokeAsync("CountryParameter_String", new object[] {
                        countryId}, this.CountryParameter_StringOperationCompleted, userState);
        }
        
        private void OnCountryParameter_StringOperationCompleted(object arg) {
            if ((this.CountryParameter_StringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryParameter_StringCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/CountryParameter_Binary", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CountryParameter_Binary([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] countryId) {
            this.Invoke("CountryParameter_Binary", new object[] {
                        countryId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCountryParameter_Binary(byte[] countryId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CountryParameter_Binary", new object[] {
                        countryId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCountryParameter_Binary(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CountryParameter_BinaryAsync(byte[] countryId) {
            this.CountryParameter_BinaryAsync(countryId, null);
        }
        
        /// <remarks/>
        public void CountryParameter_BinaryAsync(byte[] countryId, object userState) {
            if ((this.CountryParameter_BinaryOperationCompleted == null)) {
                this.CountryParameter_BinaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryParameter_BinaryOperationCompleted);
            }
            this.InvokeAsync("CountryParameter_Binary", new object[] {
                        countryId}, this.CountryParameter_BinaryOperationCompleted, userState);
        }
        
        private void OnCountryParameter_BinaryOperationCompleted(object arg) {
            if ((this.CountryParameter_BinaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryParameter_BinaryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/CountryParameter_DateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CountryParameter_DateTime(System.DateTime countryId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool countryIdSpecified) {
            this.Invoke("CountryParameter_DateTime", new object[] {
                        countryId,
                        countryIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCountryParameter_DateTime(System.DateTime countryId, bool countryIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CountryParameter_DateTime", new object[] {
                        countryId,
                        countryIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCountryParameter_DateTime(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CountryParameter_DateTimeAsync(System.DateTime countryId, bool countryIdSpecified) {
            this.CountryParameter_DateTimeAsync(countryId, countryIdSpecified, null);
        }
        
        /// <remarks/>
        public void CountryParameter_DateTimeAsync(System.DateTime countryId, bool countryIdSpecified, object userState) {
            if ((this.CountryParameter_DateTimeOperationCompleted == null)) {
                this.CountryParameter_DateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryParameter_DateTimeOperationCompleted);
            }
            this.InvokeAsync("CountryParameter_DateTime", new object[] {
                        countryId,
                        countryIdSpecified}, this.CountryParameter_DateTimeOperationCompleted, userState);
        }
        
        private void OnCountryParameter_DateTimeOperationCompleted(object arg) {
            if ((this.CountryParameter_DateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryParameter_DateTimeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/MassiveCombo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MassiveCombo(ulong userId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool userIdSpecified, ulong machineId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool machineIdSpecified, uint titleId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool titleIdSpecified, uint countryId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool countryIdSpecified) {
            this.Invoke("MassiveCombo", new object[] {
                        userId,
                        userIdSpecified,
                        machineId,
                        machineIdSpecified,
                        titleId,
                        titleIdSpecified,
                        countryId,
                        countryIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMassiveCombo(ulong userId, bool userIdSpecified, ulong machineId, bool machineIdSpecified, uint titleId, bool titleIdSpecified, uint countryId, bool countryIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MassiveCombo", new object[] {
                        userId,
                        userIdSpecified,
                        machineId,
                        machineIdSpecified,
                        titleId,
                        titleIdSpecified,
                        countryId,
                        countryIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMassiveCombo(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MassiveComboAsync(ulong userId, bool userIdSpecified, ulong machineId, bool machineIdSpecified, uint titleId, bool titleIdSpecified, uint countryId, bool countryIdSpecified) {
            this.MassiveComboAsync(userId, userIdSpecified, machineId, machineIdSpecified, titleId, titleIdSpecified, countryId, countryIdSpecified, null);
        }
        
        /// <remarks/>
        public void MassiveComboAsync(ulong userId, bool userIdSpecified, ulong machineId, bool machineIdSpecified, uint titleId, bool titleIdSpecified, uint countryId, bool countryIdSpecified, object userState) {
            if ((this.MassiveComboOperationCompleted == null)) {
                this.MassiveComboOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMassiveComboOperationCompleted);
            }
            this.InvokeAsync("MassiveCombo", new object[] {
                        userId,
                        userIdSpecified,
                        machineId,
                        machineIdSpecified,
                        titleId,
                        titleIdSpecified,
                        countryId,
                        countryIdSpecified}, this.MassiveComboOperationCompleted, userState);
        }
        
        private void OnMassiveComboOperationCompleted(object arg) {
            if ((this.MassiveComboCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MassiveComboCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/Platforms_None", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Platforms_None() {
            this.Invoke("Platforms_None", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPlatforms_None(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Platforms_None", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPlatforms_None(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Platforms_NoneAsync() {
            this.Platforms_NoneAsync(null);
        }
        
        /// <remarks/>
        public void Platforms_NoneAsync(object userState) {
            if ((this.Platforms_NoneOperationCompleted == null)) {
                this.Platforms_NoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPlatforms_NoneOperationCompleted);
            }
            this.InvokeAsync("Platforms_None", new object[0], this.Platforms_NoneOperationCompleted, userState);
        }
        
        private void OnPlatforms_NoneOperationCompleted(object arg) {
            if ((this.Platforms_NoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Platforms_NoneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/Platforms_Xbox360", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Platforms_Xbox360() {
            this.Invoke("Platforms_Xbox360", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPlatforms_Xbox360(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Platforms_Xbox360", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPlatforms_Xbox360(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Platforms_Xbox360Async() {
            this.Platforms_Xbox360Async(null);
        }
        
        /// <remarks/>
        public void Platforms_Xbox360Async(object userState) {
            if ((this.Platforms_Xbox360OperationCompleted == null)) {
                this.Platforms_Xbox360OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPlatforms_Xbox360OperationCompleted);
            }
            this.InvokeAsync("Platforms_Xbox360", new object[0], this.Platforms_Xbox360OperationCompleted, userState);
        }
        
        private void OnPlatforms_Xbox360OperationCompleted(object arg) {
            if ((this.Platforms_Xbox360Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Platforms_Xbox360Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/Platforms_Xbox360_Pc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Platforms_Xbox360_Pc() {
            this.Invoke("Platforms_Xbox360_Pc", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPlatforms_Xbox360_Pc(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Platforms_Xbox360_Pc", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPlatforms_Xbox360_Pc(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Platforms_Xbox360_PcAsync() {
            this.Platforms_Xbox360_PcAsync(null);
        }
        
        /// <remarks/>
        public void Platforms_Xbox360_PcAsync(object userState) {
            if ((this.Platforms_Xbox360_PcOperationCompleted == null)) {
                this.Platforms_Xbox360_PcOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPlatforms_Xbox360_PcOperationCompleted);
            }
            this.InvokeAsync("Platforms_Xbox360_Pc", new object[0], this.Platforms_Xbox360_PcOperationCompleted, userState);
        }
        
        private void OnPlatforms_Xbox360_PcOperationCompleted(object arg) {
            if ((this.Platforms_Xbox360_PcCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Platforms_Xbox360_PcCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/Titles_FFFE07D1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Titles_FFFE07D1() {
            this.Invoke("Titles_FFFE07D1", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitles_FFFE07D1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Titles_FFFE07D1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitles_FFFE07D1(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Titles_FFFE07D1Async() {
            this.Titles_FFFE07D1Async(null);
        }
        
        /// <remarks/>
        public void Titles_FFFE07D1Async(object userState) {
            if ((this.Titles_FFFE07D1OperationCompleted == null)) {
                this.Titles_FFFE07D1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitles_FFFE07D1OperationCompleted);
            }
            this.InvokeAsync("Titles_FFFE07D1", new object[0], this.Titles_FFFE07D1OperationCompleted, userState);
        }
        
        private void OnTitles_FFFE07D1OperationCompleted(object arg) {
            if ((this.Titles_FFFE07D1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Titles_FFFE07D1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/Titles_FFFE07D1_00112233_FFAA7700", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Titles_FFFE07D1_00112233_FFAA7700() {
            this.Invoke("Titles_FFFE07D1_00112233_FFAA7700", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitles_FFFE07D1_00112233_FFAA7700(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Titles_FFFE07D1_00112233_FFAA7700", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitles_FFFE07D1_00112233_FFAA7700(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Titles_FFFE07D1_00112233_FFAA7700Async() {
            this.Titles_FFFE07D1_00112233_FFAA7700Async(null);
        }
        
        /// <remarks/>
        public void Titles_FFFE07D1_00112233_FFAA7700Async(object userState) {
            if ((this.Titles_FFFE07D1_00112233_FFAA7700OperationCompleted == null)) {
                this.Titles_FFFE07D1_00112233_FFAA7700OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitles_FFFE07D1_00112233_FFAA7700OperationCompleted);
            }
            this.InvokeAsync("Titles_FFFE07D1_00112233_FFAA7700", new object[0], this.Titles_FFFE07D1_00112233_FFAA7700OperationCompleted, userState);
        }
        
        private void OnTitles_FFFE07D1_00112233_FFAA7700OperationCompleted(object arg) {
            if ((this.Titles_FFFE07D1_00112233_FFAA7700Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Titles_FFFE07D1_00112233_FFAA7700Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/Privileges_None", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Privileges_None() {
            this.Invoke("Privileges_None", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrivileges_None(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Privileges_None", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPrivileges_None(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Privileges_NoneAsync() {
            this.Privileges_NoneAsync(null);
        }
        
        /// <remarks/>
        public void Privileges_NoneAsync(object userState) {
            if ((this.Privileges_NoneOperationCompleted == null)) {
                this.Privileges_NoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivileges_NoneOperationCompleted);
            }
            this.InvokeAsync("Privileges_None", new object[0], this.Privileges_NoneOperationCompleted, userState);
        }
        
        private void OnPrivileges_NoneOperationCompleted(object arg) {
            if ((this.Privileges_NoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privileges_NoneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/Privileges_254", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Privileges_254() {
            this.Invoke("Privileges_254", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrivileges_254(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Privileges_254", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPrivileges_254(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Privileges_254Async() {
            this.Privileges_254Async(null);
        }
        
        /// <remarks/>
        public void Privileges_254Async(object userState) {
            if ((this.Privileges_254OperationCompleted == null)) {
                this.Privileges_254OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivileges_254OperationCompleted);
            }
            this.InvokeAsync("Privileges_254", new object[0], this.Privileges_254OperationCompleted, userState);
        }
        
        private void OnPrivileges_254OperationCompleted(object arg) {
            if ((this.Privileges_254Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privileges_254Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/Privileges_128_160_255", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Privileges_128_160_255() {
            this.Invoke("Privileges_128_160_255", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrivileges_128_160_255(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Privileges_128_160_255", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPrivileges_128_160_255(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Privileges_128_160_255Async() {
            this.Privileges_128_160_255Async(null);
        }
        
        /// <remarks/>
        public void Privileges_128_160_255Async(object userState) {
            if ((this.Privileges_128_160_255OperationCompleted == null)) {
                this.Privileges_128_160_255OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivileges_128_160_255OperationCompleted);
            }
            this.InvokeAsync("Privileges_128_160_255", new object[0], this.Privileges_128_160_255OperationCompleted, userState);
        }
        
        private void OnPrivileges_128_160_255OperationCompleted(object arg) {
            if ((this.Privileges_128_160_255Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privileges_128_160_255Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/Privileges_192_193", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Privileges_192_193() {
            this.Invoke("Privileges_192_193", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrivileges_192_193(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Privileges_192_193", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPrivileges_192_193(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Privileges_192_193Async() {
            this.Privileges_192_193Async(null);
        }
        
        /// <remarks/>
        public void Privileges_192_193Async(object userState) {
            if ((this.Privileges_192_193OperationCompleted == null)) {
                this.Privileges_192_193OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivileges_192_193OperationCompleted);
            }
            this.InvokeAsync("Privileges_192_193", new object[0], this.Privileges_192_193OperationCompleted, userState);
        }
        
        private void OnPrivileges_192_193OperationCompleted(object arg) {
            if ((this.Privileges_192_193Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privileges_192_193Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/RequiresClaim_Tiger", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequiresClaim_Tiger() {
            this.Invoke("RequiresClaim_Tiger", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequiresClaim_Tiger(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequiresClaim_Tiger", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRequiresClaim_Tiger(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RequiresClaim_TigerAsync() {
            this.RequiresClaim_TigerAsync(null);
        }
        
        /// <remarks/>
        public void RequiresClaim_TigerAsync(object userState) {
            if ((this.RequiresClaim_TigerOperationCompleted == null)) {
                this.RequiresClaim_TigerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequiresClaim_TigerOperationCompleted);
            }
            this.InvokeAsync("RequiresClaim_Tiger", new object[0], this.RequiresClaim_TigerOperationCompleted, userState);
        }
        
        private void OnRequiresClaim_TigerOperationCompleted(object arg) {
            if ((this.RequiresClaim_TigerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequiresClaim_TigerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/RequiresClaim_Lion_Tiger_Ocelot", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequiresClaim_Lion_Tiger_Ocelot() {
            this.Invoke("RequiresClaim_Lion_Tiger_Ocelot", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequiresClaim_Lion_Tiger_Ocelot(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequiresClaim_Lion_Tiger_Ocelot", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRequiresClaim_Lion_Tiger_Ocelot(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RequiresClaim_Lion_Tiger_OcelotAsync() {
            this.RequiresClaim_Lion_Tiger_OcelotAsync(null);
        }
        
        /// <remarks/>
        public void RequiresClaim_Lion_Tiger_OcelotAsync(object userState) {
            if ((this.RequiresClaim_Lion_Tiger_OcelotOperationCompleted == null)) {
                this.RequiresClaim_Lion_Tiger_OcelotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequiresClaim_Lion_Tiger_OcelotOperationCompleted);
            }
            this.InvokeAsync("RequiresClaim_Lion_Tiger_Ocelot", new object[0], this.RequiresClaim_Lion_Tiger_OcelotOperationCompleted, userState);
        }
        
        private void OnRequiresClaim_Lion_Tiger_OcelotOperationCompleted(object arg) {
            if ((this.RequiresClaim_Lion_Tiger_OcelotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequiresClaim_Lion_Tiger_OcelotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/AllowedValues_Strings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AllowedValues_Strings() {
            this.Invoke("AllowedValues_Strings", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAllowedValues_Strings(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AllowedValues_Strings", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAllowedValues_Strings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AllowedValues_StringsAsync() {
            this.AllowedValues_StringsAsync(null);
        }
        
        /// <remarks/>
        public void AllowedValues_StringsAsync(object userState) {
            if ((this.AllowedValues_StringsOperationCompleted == null)) {
                this.AllowedValues_StringsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllowedValues_StringsOperationCompleted);
            }
            this.InvokeAsync("AllowedValues_Strings", new object[0], this.AllowedValues_StringsOperationCompleted, userState);
        }
        
        private void OnAllowedValues_StringsOperationCompleted(object arg) {
            if ((this.AllowedValues_StringsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllowedValues_StringsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/AuthEquals_StringAgeGroupElder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuthEquals_StringAgeGroupElder() {
            this.Invoke("AuthEquals_StringAgeGroupElder", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthEquals_StringAgeGroupElder(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthEquals_StringAgeGroupElder", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuthEquals_StringAgeGroupElder(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuthEquals_StringAgeGroupElderAsync() {
            this.AuthEquals_StringAgeGroupElderAsync(null);
        }
        
        /// <remarks/>
        public void AuthEquals_StringAgeGroupElderAsync(object userState) {
            if ((this.AuthEquals_StringAgeGroupElderOperationCompleted == null)) {
                this.AuthEquals_StringAgeGroupElderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthEquals_StringAgeGroupElderOperationCompleted);
            }
            this.InvokeAsync("AuthEquals_StringAgeGroupElder", new object[0], this.AuthEquals_StringAgeGroupElderOperationCompleted, userState);
        }
        
        private void OnAuthEquals_StringAgeGroupElderOperationCompleted(object arg) {
            if ((this.AuthEquals_StringAgeGroupElderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthEquals_StringAgeGroupElderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/AuthEquals_StringAgeGroupElder_IntegerLanguage1337", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuthEquals_StringAgeGroupElder_IntegerLanguage1337() {
            this.Invoke("AuthEquals_StringAgeGroupElder_IntegerLanguage1337", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthEquals_StringAgeGroupElder_IntegerLanguage1337(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthEquals_StringAgeGroupElder_IntegerLanguage1337", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuthEquals_StringAgeGroupElder_IntegerLanguage1337(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuthEquals_StringAgeGroupElder_IntegerLanguage1337Async() {
            this.AuthEquals_StringAgeGroupElder_IntegerLanguage1337Async(null);
        }
        
        /// <remarks/>
        public void AuthEquals_StringAgeGroupElder_IntegerLanguage1337Async(object userState) {
            if ((this.AuthEquals_StringAgeGroupElder_IntegerLanguage1337OperationCompleted == null)) {
                this.AuthEquals_StringAgeGroupElder_IntegerLanguage1337OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthEquals_StringAgeGroupElder_IntegerLanguage1337OperationCompleted);
            }
            this.InvokeAsync("AuthEquals_StringAgeGroupElder_IntegerLanguage1337", new object[0], this.AuthEquals_StringAgeGroupElder_IntegerLanguage1337OperationCompleted, userState);
        }
        
        private void OnAuthEquals_StringAgeGroupElder_IntegerLanguage1337OperationCompleted(object arg) {
            if ((this.AuthEquals_StringAgeGroupElder_IntegerLanguage1337Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthEquals_StringAgeGroupElder_IntegerLanguage1337Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/AuthEquals_Xuid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuthEquals_Xuid() {
            this.Invoke("AuthEquals_Xuid", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthEquals_Xuid(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthEquals_Xuid", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuthEquals_Xuid(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuthEquals_XuidAsync() {
            this.AuthEquals_XuidAsync(null);
        }
        
        /// <remarks/>
        public void AuthEquals_XuidAsync(object userState) {
            if ((this.AuthEquals_XuidOperationCompleted == null)) {
                this.AuthEquals_XuidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthEquals_XuidOperationCompleted);
            }
            this.InvokeAsync("AuthEquals_Xuid", new object[0], this.AuthEquals_XuidOperationCompleted, userState);
        }
        
        private void OnAuthEquals_XuidOperationCompleted(object arg) {
            if ((this.AuthEquals_XuidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthEquals_XuidCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/AuthGreaterThan_PositiveInteger", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuthGreaterThan_PositiveInteger() {
            this.Invoke("AuthGreaterThan_PositiveInteger", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthGreaterThan_PositiveInteger(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthGreaterThan_PositiveInteger", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuthGreaterThan_PositiveInteger(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuthGreaterThan_PositiveIntegerAsync() {
            this.AuthGreaterThan_PositiveIntegerAsync(null);
        }
        
        /// <remarks/>
        public void AuthGreaterThan_PositiveIntegerAsync(object userState) {
            if ((this.AuthGreaterThan_PositiveIntegerOperationCompleted == null)) {
                this.AuthGreaterThan_PositiveIntegerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthGreaterThan_PositiveIntegerOperationCompleted);
            }
            this.InvokeAsync("AuthGreaterThan_PositiveInteger", new object[0], this.AuthGreaterThan_PositiveIntegerOperationCompleted, userState);
        }
        
        private void OnAuthGreaterThan_PositiveIntegerOperationCompleted(object arg) {
            if ((this.AuthGreaterThan_PositiveIntegerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthGreaterThan_PositiveIntegerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/AuthGreaterThan_ZeroInteger", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuthGreaterThan_ZeroInteger() {
            this.Invoke("AuthGreaterThan_ZeroInteger", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthGreaterThan_ZeroInteger(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthGreaterThan_ZeroInteger", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuthGreaterThan_ZeroInteger(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuthGreaterThan_ZeroIntegerAsync() {
            this.AuthGreaterThan_ZeroIntegerAsync(null);
        }
        
        /// <remarks/>
        public void AuthGreaterThan_ZeroIntegerAsync(object userState) {
            if ((this.AuthGreaterThan_ZeroIntegerOperationCompleted == null)) {
                this.AuthGreaterThan_ZeroIntegerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthGreaterThan_ZeroIntegerOperationCompleted);
            }
            this.InvokeAsync("AuthGreaterThan_ZeroInteger", new object[0], this.AuthGreaterThan_ZeroIntegerOperationCompleted, userState);
        }
        
        private void OnAuthGreaterThan_ZeroIntegerOperationCompleted(object arg) {
            if ((this.AuthGreaterThan_ZeroIntegerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthGreaterThan_ZeroIntegerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/AuthGreaterThan_NegativeInteger", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuthGreaterThan_NegativeInteger() {
            this.Invoke("AuthGreaterThan_NegativeInteger", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthGreaterThan_NegativeInteger(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthGreaterThan_NegativeInteger", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuthGreaterThan_NegativeInteger(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuthGreaterThan_NegativeIntegerAsync() {
            this.AuthGreaterThan_NegativeIntegerAsync(null);
        }
        
        /// <remarks/>
        public void AuthGreaterThan_NegativeIntegerAsync(object userState) {
            if ((this.AuthGreaterThan_NegativeIntegerOperationCompleted == null)) {
                this.AuthGreaterThan_NegativeIntegerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthGreaterThan_NegativeIntegerOperationCompleted);
            }
            this.InvokeAsync("AuthGreaterThan_NegativeInteger", new object[0], this.AuthGreaterThan_NegativeIntegerOperationCompleted, userState);
        }
        
        private void OnAuthGreaterThan_NegativeIntegerOperationCompleted(object arg) {
            if ((this.AuthGreaterThan_NegativeIntegerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthGreaterThan_NegativeIntegerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/AuthGreaterThan_String", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuthGreaterThan_String() {
            this.Invoke("AuthGreaterThan_String", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthGreaterThan_String(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthGreaterThan_String", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuthGreaterThan_String(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuthGreaterThan_StringAsync() {
            this.AuthGreaterThan_StringAsync(null);
        }
        
        /// <remarks/>
        public void AuthGreaterThan_StringAsync(object userState) {
            if ((this.AuthGreaterThan_StringOperationCompleted == null)) {
                this.AuthGreaterThan_StringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthGreaterThan_StringOperationCompleted);
            }
            this.InvokeAsync("AuthGreaterThan_String", new object[0], this.AuthGreaterThan_StringOperationCompleted, userState);
        }
        
        private void OnAuthGreaterThan_StringOperationCompleted(object arg) {
            if ((this.AuthGreaterThan_StringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthGreaterThan_StringCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/AuthLessThan_PositiveInteger", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuthLessThan_PositiveInteger() {
            this.Invoke("AuthLessThan_PositiveInteger", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthLessThan_PositiveInteger(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthLessThan_PositiveInteger", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuthLessThan_PositiveInteger(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuthLessThan_PositiveIntegerAsync() {
            this.AuthLessThan_PositiveIntegerAsync(null);
        }
        
        /// <remarks/>
        public void AuthLessThan_PositiveIntegerAsync(object userState) {
            if ((this.AuthLessThan_PositiveIntegerOperationCompleted == null)) {
                this.AuthLessThan_PositiveIntegerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthLessThan_PositiveIntegerOperationCompleted);
            }
            this.InvokeAsync("AuthLessThan_PositiveInteger", new object[0], this.AuthLessThan_PositiveIntegerOperationCompleted, userState);
        }
        
        private void OnAuthLessThan_PositiveIntegerOperationCompleted(object arg) {
            if ((this.AuthLessThan_PositiveIntegerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthLessThan_PositiveIntegerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/AuthLessThan_ZeroInteger", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuthLessThan_ZeroInteger() {
            this.Invoke("AuthLessThan_ZeroInteger", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthLessThan_ZeroInteger(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthLessThan_ZeroInteger", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuthLessThan_ZeroInteger(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuthLessThan_ZeroIntegerAsync() {
            this.AuthLessThan_ZeroIntegerAsync(null);
        }
        
        /// <remarks/>
        public void AuthLessThan_ZeroIntegerAsync(object userState) {
            if ((this.AuthLessThan_ZeroIntegerOperationCompleted == null)) {
                this.AuthLessThan_ZeroIntegerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthLessThan_ZeroIntegerOperationCompleted);
            }
            this.InvokeAsync("AuthLessThan_ZeroInteger", new object[0], this.AuthLessThan_ZeroIntegerOperationCompleted, userState);
        }
        
        private void OnAuthLessThan_ZeroIntegerOperationCompleted(object arg) {
            if ((this.AuthLessThan_ZeroIntegerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthLessThan_ZeroIntegerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/AuthLessThan_NegativeInteger", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuthLessThan_NegativeInteger() {
            this.Invoke("AuthLessThan_NegativeInteger", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthLessThan_NegativeInteger(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthLessThan_NegativeInteger", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuthLessThan_NegativeInteger(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuthLessThan_NegativeIntegerAsync() {
            this.AuthLessThan_NegativeIntegerAsync(null);
        }
        
        /// <remarks/>
        public void AuthLessThan_NegativeIntegerAsync(object userState) {
            if ((this.AuthLessThan_NegativeIntegerOperationCompleted == null)) {
                this.AuthLessThan_NegativeIntegerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthLessThan_NegativeIntegerOperationCompleted);
            }
            this.InvokeAsync("AuthLessThan_NegativeInteger", new object[0], this.AuthLessThan_NegativeIntegerOperationCompleted, userState);
        }
        
        private void OnAuthLessThan_NegativeIntegerOperationCompleted(object arg) {
            if ((this.AuthLessThan_NegativeIntegerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthLessThan_NegativeIntegerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/AuthLessThan_String", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuthLessThan_String() {
            this.Invoke("AuthLessThan_String", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthLessThan_String(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthLessThan_String", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuthLessThan_String(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AuthLessThan_StringAsync() {
            this.AuthLessThan_StringAsync(null);
        }
        
        /// <remarks/>
        public void AuthLessThan_StringAsync(object userState) {
            if ((this.AuthLessThan_StringOperationCompleted == null)) {
                this.AuthLessThan_StringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthLessThan_StringOperationCompleted);
            }
            this.InvokeAsync("AuthLessThan_String", new object[0], this.AuthLessThan_StringOperationCompleted, userState);
        }
        
        private void OnAuthLessThan_StringOperationCompleted(object arg) {
            if ((this.AuthLessThan_StringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthLessThan_StringCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/UserParameter_UnsignedLong", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UserParameter_UnsignedLong(ulong userId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool userIdSpecified) {
            this.Invoke("UserParameter_UnsignedLong", new object[] {
                        userId,
                        userIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUserParameter_UnsignedLong(ulong userId, bool userIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UserParameter_UnsignedLong", new object[] {
                        userId,
                        userIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUserParameter_UnsignedLong(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UserParameter_UnsignedLongAsync(ulong userId, bool userIdSpecified) {
            this.UserParameter_UnsignedLongAsync(userId, userIdSpecified, null);
        }
        
        /// <remarks/>
        public void UserParameter_UnsignedLongAsync(ulong userId, bool userIdSpecified, object userState) {
            if ((this.UserParameter_UnsignedLongOperationCompleted == null)) {
                this.UserParameter_UnsignedLongOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserParameter_UnsignedLongOperationCompleted);
            }
            this.InvokeAsync("UserParameter_UnsignedLong", new object[] {
                        userId,
                        userIdSpecified}, this.UserParameter_UnsignedLongOperationCompleted, userState);
        }
        
        private void OnUserParameter_UnsignedLongOperationCompleted(object arg) {
            if ((this.UserParameter_UnsignedLongCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserParameter_UnsignedLongCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/UserParameter_NullableUnsignedLong", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UserParameter_NullableUnsignedLong([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<ulong> userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool userIdSpecified) {
            this.Invoke("UserParameter_NullableUnsignedLong", new object[] {
                        userId,
                        userIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUserParameter_NullableUnsignedLong(System.Nullable<ulong> userId, bool userIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UserParameter_NullableUnsignedLong", new object[] {
                        userId,
                        userIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUserParameter_NullableUnsignedLong(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UserParameter_NullableUnsignedLongAsync(System.Nullable<ulong> userId, bool userIdSpecified) {
            this.UserParameter_NullableUnsignedLongAsync(userId, userIdSpecified, null);
        }
        
        /// <remarks/>
        public void UserParameter_NullableUnsignedLongAsync(System.Nullable<ulong> userId, bool userIdSpecified, object userState) {
            if ((this.UserParameter_NullableUnsignedLongOperationCompleted == null)) {
                this.UserParameter_NullableUnsignedLongOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserParameter_NullableUnsignedLongOperationCompleted);
            }
            this.InvokeAsync("UserParameter_NullableUnsignedLong", new object[] {
                        userId,
                        userIdSpecified}, this.UserParameter_NullableUnsignedLongOperationCompleted, userState);
        }
        
        private void OnUserParameter_NullableUnsignedLongOperationCompleted(object arg) {
            if ((this.UserParameter_NullableUnsignedLongCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserParameter_NullableUnsignedLongCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/UserParameter_SignedLong", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UserParameter_SignedLong(long userId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool userIdSpecified) {
            this.Invoke("UserParameter_SignedLong", new object[] {
                        userId,
                        userIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUserParameter_SignedLong(long userId, bool userIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UserParameter_SignedLong", new object[] {
                        userId,
                        userIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUserParameter_SignedLong(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UserParameter_SignedLongAsync(long userId, bool userIdSpecified) {
            this.UserParameter_SignedLongAsync(userId, userIdSpecified, null);
        }
        
        /// <remarks/>
        public void UserParameter_SignedLongAsync(long userId, bool userIdSpecified, object userState) {
            if ((this.UserParameter_SignedLongOperationCompleted == null)) {
                this.UserParameter_SignedLongOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserParameter_SignedLongOperationCompleted);
            }
            this.InvokeAsync("UserParameter_SignedLong", new object[] {
                        userId,
                        userIdSpecified}, this.UserParameter_SignedLongOperationCompleted, userState);
        }
        
        private void OnUserParameter_SignedLongOperationCompleted(object arg) {
            if ((this.UserParameter_SignedLongCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserParameter_SignedLongCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/UserParameter_String", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UserParameter_String([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId) {
            this.Invoke("UserParameter_String", new object[] {
                        userId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUserParameter_String(string userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UserParameter_String", new object[] {
                        userId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUserParameter_String(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UserParameter_StringAsync(string userId) {
            this.UserParameter_StringAsync(userId, null);
        }
        
        /// <remarks/>
        public void UserParameter_StringAsync(string userId, object userState) {
            if ((this.UserParameter_StringOperationCompleted == null)) {
                this.UserParameter_StringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserParameter_StringOperationCompleted);
            }
            this.InvokeAsync("UserParameter_String", new object[] {
                        userId}, this.UserParameter_StringOperationCompleted, userState);
        }
        
        private void OnUserParameter_StringOperationCompleted(object arg) {
            if ((this.UserParameter_StringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserParameter_StringCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/UserParameter_Binary", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UserParameter_Binary([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] userId) {
            this.Invoke("UserParameter_Binary", new object[] {
                        userId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUserParameter_Binary(byte[] userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UserParameter_Binary", new object[] {
                        userId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUserParameter_Binary(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UserParameter_BinaryAsync(byte[] userId) {
            this.UserParameter_BinaryAsync(userId, null);
        }
        
        /// <remarks/>
        public void UserParameter_BinaryAsync(byte[] userId, object userState) {
            if ((this.UserParameter_BinaryOperationCompleted == null)) {
                this.UserParameter_BinaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserParameter_BinaryOperationCompleted);
            }
            this.InvokeAsync("UserParameter_Binary", new object[] {
                        userId}, this.UserParameter_BinaryOperationCompleted, userState);
        }
        
        private void OnUserParameter_BinaryOperationCompleted(object arg) {
            if ((this.UserParameter_BinaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserParameter_BinaryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/MachineParameter_UnsignedLong", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MachineParameter_UnsignedLong(ulong machineId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool machineIdSpecified) {
            this.Invoke("MachineParameter_UnsignedLong", new object[] {
                        machineId,
                        machineIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMachineParameter_UnsignedLong(ulong machineId, bool machineIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MachineParameter_UnsignedLong", new object[] {
                        machineId,
                        machineIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMachineParameter_UnsignedLong(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MachineParameter_UnsignedLongAsync(ulong machineId, bool machineIdSpecified) {
            this.MachineParameter_UnsignedLongAsync(machineId, machineIdSpecified, null);
        }
        
        /// <remarks/>
        public void MachineParameter_UnsignedLongAsync(ulong machineId, bool machineIdSpecified, object userState) {
            if ((this.MachineParameter_UnsignedLongOperationCompleted == null)) {
                this.MachineParameter_UnsignedLongOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMachineParameter_UnsignedLongOperationCompleted);
            }
            this.InvokeAsync("MachineParameter_UnsignedLong", new object[] {
                        machineId,
                        machineIdSpecified}, this.MachineParameter_UnsignedLongOperationCompleted, userState);
        }
        
        private void OnMachineParameter_UnsignedLongOperationCompleted(object arg) {
            if ((this.MachineParameter_UnsignedLongCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MachineParameter_UnsignedLongCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/MachineParameter_String", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MachineParameter_String([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string machineId) {
            this.Invoke("MachineParameter_String", new object[] {
                        machineId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMachineParameter_String(string machineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MachineParameter_String", new object[] {
                        machineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMachineParameter_String(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MachineParameter_StringAsync(string machineId) {
            this.MachineParameter_StringAsync(machineId, null);
        }
        
        /// <remarks/>
        public void MachineParameter_StringAsync(string machineId, object userState) {
            if ((this.MachineParameter_StringOperationCompleted == null)) {
                this.MachineParameter_StringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMachineParameter_StringOperationCompleted);
            }
            this.InvokeAsync("MachineParameter_String", new object[] {
                        machineId}, this.MachineParameter_StringOperationCompleted, userState);
        }
        
        private void OnMachineParameter_StringOperationCompleted(object arg) {
            if ((this.MachineParameter_StringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MachineParameter_StringCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/TitleParameter_UnsignedInt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TitleParameter_UnsignedInt(uint titleId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool titleIdSpecified) {
            this.Invoke("TitleParameter_UnsignedInt", new object[] {
                        titleId,
                        titleIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitleParameter_UnsignedInt(uint titleId, bool titleIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TitleParameter_UnsignedInt", new object[] {
                        titleId,
                        titleIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitleParameter_UnsignedInt(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TitleParameter_UnsignedIntAsync(uint titleId, bool titleIdSpecified) {
            this.TitleParameter_UnsignedIntAsync(titleId, titleIdSpecified, null);
        }
        
        /// <remarks/>
        public void TitleParameter_UnsignedIntAsync(uint titleId, bool titleIdSpecified, object userState) {
            if ((this.TitleParameter_UnsignedIntOperationCompleted == null)) {
                this.TitleParameter_UnsignedIntOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitleParameter_UnsignedIntOperationCompleted);
            }
            this.InvokeAsync("TitleParameter_UnsignedInt", new object[] {
                        titleId,
                        titleIdSpecified}, this.TitleParameter_UnsignedIntOperationCompleted, userState);
        }
        
        private void OnTitleParameter_UnsignedIntOperationCompleted(object arg) {
            if ((this.TitleParameter_UnsignedIntCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TitleParameter_UnsignedIntCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/TitleParameter_SignedInt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TitleParameter_SignedInt(int titleId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool titleIdSpecified) {
            this.Invoke("TitleParameter_SignedInt", new object[] {
                        titleId,
                        titleIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitleParameter_SignedInt(int titleId, bool titleIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TitleParameter_SignedInt", new object[] {
                        titleId,
                        titleIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitleParameter_SignedInt(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TitleParameter_SignedIntAsync(int titleId, bool titleIdSpecified) {
            this.TitleParameter_SignedIntAsync(titleId, titleIdSpecified, null);
        }
        
        /// <remarks/>
        public void TitleParameter_SignedIntAsync(int titleId, bool titleIdSpecified, object userState) {
            if ((this.TitleParameter_SignedIntOperationCompleted == null)) {
                this.TitleParameter_SignedIntOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitleParameter_SignedIntOperationCompleted);
            }
            this.InvokeAsync("TitleParameter_SignedInt", new object[] {
                        titleId,
                        titleIdSpecified}, this.TitleParameter_SignedIntOperationCompleted, userState);
        }
        
        private void OnTitleParameter_SignedIntOperationCompleted(object arg) {
            if ((this.TitleParameter_SignedIntCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TitleParameter_SignedIntCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/TitleParameter_UnsignedLong", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TitleParameter_UnsignedLong(ulong titleId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool titleIdSpecified) {
            this.Invoke("TitleParameter_UnsignedLong", new object[] {
                        titleId,
                        titleIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitleParameter_UnsignedLong(ulong titleId, bool titleIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TitleParameter_UnsignedLong", new object[] {
                        titleId,
                        titleIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitleParameter_UnsignedLong(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TitleParameter_UnsignedLongAsync(ulong titleId, bool titleIdSpecified) {
            this.TitleParameter_UnsignedLongAsync(titleId, titleIdSpecified, null);
        }
        
        /// <remarks/>
        public void TitleParameter_UnsignedLongAsync(ulong titleId, bool titleIdSpecified, object userState) {
            if ((this.TitleParameter_UnsignedLongOperationCompleted == null)) {
                this.TitleParameter_UnsignedLongOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitleParameter_UnsignedLongOperationCompleted);
            }
            this.InvokeAsync("TitleParameter_UnsignedLong", new object[] {
                        titleId,
                        titleIdSpecified}, this.TitleParameter_UnsignedLongOperationCompleted, userState);
        }
        
        private void OnTitleParameter_UnsignedLongOperationCompleted(object arg) {
            if ((this.TitleParameter_UnsignedLongCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TitleParameter_UnsignedLongCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/TitleParameter_String", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TitleParameter_String([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string titleId) {
            this.Invoke("TitleParameter_String", new object[] {
                        titleId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitleParameter_String(string titleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TitleParameter_String", new object[] {
                        titleId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitleParameter_String(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TitleParameter_StringAsync(string titleId) {
            this.TitleParameter_StringAsync(titleId, null);
        }
        
        /// <remarks/>
        public void TitleParameter_StringAsync(string titleId, object userState) {
            if ((this.TitleParameter_StringOperationCompleted == null)) {
                this.TitleParameter_StringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitleParameter_StringOperationCompleted);
            }
            this.InvokeAsync("TitleParameter_String", new object[] {
                        titleId}, this.TitleParameter_StringOperationCompleted, userState);
        }
        
        private void OnTitleParameter_StringOperationCompleted(object arg) {
            if ((this.TitleParameter_StringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TitleParameter_StringCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/TitleParameter_Binary", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TitleParameter_Binary([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] titleId) {
            this.Invoke("TitleParameter_Binary", new object[] {
                        titleId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitleParameter_Binary(byte[] titleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TitleParameter_Binary", new object[] {
                        titleId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitleParameter_Binary(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TitleParameter_BinaryAsync(byte[] titleId) {
            this.TitleParameter_BinaryAsync(titleId, null);
        }
        
        /// <remarks/>
        public void TitleParameter_BinaryAsync(byte[] titleId, object userState) {
            if ((this.TitleParameter_BinaryOperationCompleted == null)) {
                this.TitleParameter_BinaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitleParameter_BinaryOperationCompleted);
            }
            this.InvokeAsync("TitleParameter_Binary", new object[] {
                        titleId}, this.TitleParameter_BinaryOperationCompleted, userState);
        }
        
        private void OnTitleParameter_BinaryOperationCompleted(object arg) {
            if ((this.TitleParameter_BinaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TitleParameter_BinaryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IAttribute/TitleParameter_DateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TitleParameter_DateTime(System.DateTime titleId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool titleIdSpecified) {
            this.Invoke("TitleParameter_DateTime", new object[] {
                        titleId,
                        titleIdSpecified});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitleParameter_DateTime(System.DateTime titleId, bool titleIdSpecified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TitleParameter_DateTime", new object[] {
                        titleId,
                        titleIdSpecified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitleParameter_DateTime(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TitleParameter_DateTimeAsync(System.DateTime titleId, bool titleIdSpecified) {
            this.TitleParameter_DateTimeAsync(titleId, titleIdSpecified, null);
        }
        
        /// <remarks/>
        public void TitleParameter_DateTimeAsync(System.DateTime titleId, bool titleIdSpecified, object userState) {
            if ((this.TitleParameter_DateTimeOperationCompleted == null)) {
                this.TitleParameter_DateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitleParameter_DateTimeOperationCompleted);
            }
            this.InvokeAsync("TitleParameter_DateTime", new object[] {
                        titleId,
                        titleIdSpecified}, this.TitleParameter_DateTimeOperationCompleted, userState);
        }
        
        private void OnTitleParameter_DateTimeOperationCompleted(object arg) {
            if ((this.TitleParameter_DateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TitleParameter_DateTimeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CountryParameter_UnsignedIntCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CountryParameter_NullableSignedIntCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CountryParameter_SignedShortCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CountryParameter_UnsignedByteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CountryParameter_StringCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CountryParameter_BinaryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CountryParameter_DateTimeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void MassiveComboCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Platforms_NoneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Platforms_Xbox360CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Platforms_Xbox360_PcCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Titles_FFFE07D1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Titles_FFFE07D1_00112233_FFAA7700CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Privileges_NoneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Privileges_254CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Privileges_128_160_255CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Privileges_192_193CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequiresClaim_TigerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequiresClaim_Lion_Tiger_OcelotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AllowedValues_StringsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AuthEquals_StringAgeGroupElderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AuthEquals_StringAgeGroupElder_IntegerLanguage1337CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AuthEquals_XuidCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AuthGreaterThan_PositiveIntegerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AuthGreaterThan_ZeroIntegerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AuthGreaterThan_NegativeIntegerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AuthGreaterThan_StringCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AuthLessThan_PositiveIntegerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AuthLessThan_ZeroIntegerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AuthLessThan_NegativeIntegerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AuthLessThan_StringCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UserParameter_UnsignedLongCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UserParameter_NullableUnsignedLongCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UserParameter_SignedLongCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UserParameter_StringCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UserParameter_BinaryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void MachineParameter_UnsignedLongCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void MachineParameter_StringCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TitleParameter_UnsignedIntCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TitleParameter_SignedIntCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TitleParameter_UnsignedLongCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TitleParameter_StringCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TitleParameter_BinaryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TitleParameter_DateTimeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\MixedOverride.wsdl.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.MixedOverride {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IMixedOverride", Namespace="http://tempuri.org/")]
    public partial class MixedOverride : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PlatformsPCOperationCompleted;
        
        private System.Threading.SendOrPostCallback PlatformsPC_WebConfigXbox360OperationCompleted;
        
        private System.Threading.SendOrPostCallback TitlesFFFE07D2OperationCompleted;
        
        private System.Threading.SendOrPostCallback TitlesFFFE07D2_WebConfigFFFE07D1OperationCompleted;
        
        private System.Threading.SendOrPostCallback Privileges252OperationCompleted;
        
        private System.Threading.SendOrPostCallback Privileges254OperationCompleted;
        
        private System.Threading.SendOrPostCallback Privileges254_WebConfig255OperationCompleted;
        
        private System.Threading.SendOrPostCallback RequiresClaimLionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequiresClaimLion_WebConfigTigerOperationCompleted;
        
        /// <remarks/>
        public MixedOverride() {
            this.Url = "http://craigickxblob:13374/testfdxstswcf/MixedOverride.svc";
        }
        
        /// <remarks/>
        public event PlatformsPCCompletedEventHandler PlatformsPCCompleted;
        
        /// <remarks/>
        public event PlatformsPC_WebConfigXbox360CompletedEventHandler PlatformsPC_WebConfigXbox360Completed;
        
        /// <remarks/>
        public event TitlesFFFE07D2CompletedEventHandler TitlesFFFE07D2Completed;
        
        /// <remarks/>
        public event TitlesFFFE07D2_WebConfigFFFE07D1CompletedEventHandler TitlesFFFE07D2_WebConfigFFFE07D1Completed;
        
        /// <remarks/>
        public event Privileges252CompletedEventHandler Privileges252Completed;
        
        /// <remarks/>
        public event Privileges254CompletedEventHandler Privileges254Completed;
        
        /// <remarks/>
        public event Privileges254_WebConfig255CompletedEventHandler Privileges254_WebConfig255Completed;
        
        /// <remarks/>
        public event RequiresClaimLionCompletedEventHandler RequiresClaimLionCompleted;
        
        /// <remarks/>
        public event RequiresClaimLion_WebConfigTigerCompletedEventHandler RequiresClaimLion_WebConfigTigerCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixedOverride/PlatformsPC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PlatformsPC() {
            this.Invoke("PlatformsPC", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPlatformsPC(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PlatformsPC", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPlatformsPC(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PlatformsPCAsync() {
            this.PlatformsPCAsync(null);
        }
        
        /// <remarks/>
        public void PlatformsPCAsync(object userState) {
            if ((this.PlatformsPCOperationCompleted == null)) {
                this.PlatformsPCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPlatformsPCOperationCompleted);
            }
            this.InvokeAsync("PlatformsPC", new object[0], this.PlatformsPCOperationCompleted, userState);
        }
        
        private void OnPlatformsPCOperationCompleted(object arg) {
            if ((this.PlatformsPCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PlatformsPCCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixedOverride/PlatformsPC_WebConfigXbox360", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PlatformsPC_WebConfigXbox360() {
            this.Invoke("PlatformsPC_WebConfigXbox360", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPlatformsPC_WebConfigXbox360(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PlatformsPC_WebConfigXbox360", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPlatformsPC_WebConfigXbox360(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PlatformsPC_WebConfigXbox360Async() {
            this.PlatformsPC_WebConfigXbox360Async(null);
        }
        
        /// <remarks/>
        public void PlatformsPC_WebConfigXbox360Async(object userState) {
            if ((this.PlatformsPC_WebConfigXbox360OperationCompleted == null)) {
                this.PlatformsPC_WebConfigXbox360OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPlatformsPC_WebConfigXbox360OperationCompleted);
            }
            this.InvokeAsync("PlatformsPC_WebConfigXbox360", new object[0], this.PlatformsPC_WebConfigXbox360OperationCompleted, userState);
        }
        
        private void OnPlatformsPC_WebConfigXbox360OperationCompleted(object arg) {
            if ((this.PlatformsPC_WebConfigXbox360Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PlatformsPC_WebConfigXbox360Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixedOverride/TitlesFFFE07D2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TitlesFFFE07D2() {
            this.Invoke("TitlesFFFE07D2", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitlesFFFE07D2(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TitlesFFFE07D2", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitlesFFFE07D2(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TitlesFFFE07D2Async() {
            this.TitlesFFFE07D2Async(null);
        }
        
        /// <remarks/>
        public void TitlesFFFE07D2Async(object userState) {
            if ((this.TitlesFFFE07D2OperationCompleted == null)) {
                this.TitlesFFFE07D2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitlesFFFE07D2OperationCompleted);
            }
            this.InvokeAsync("TitlesFFFE07D2", new object[0], this.TitlesFFFE07D2OperationCompleted, userState);
        }
        
        private void OnTitlesFFFE07D2OperationCompleted(object arg) {
            if ((this.TitlesFFFE07D2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TitlesFFFE07D2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixedOverride/TitlesFFFE07D2_WebConfigFFFE07D1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TitlesFFFE07D2_WebConfigFFFE07D1() {
            this.Invoke("TitlesFFFE07D2_WebConfigFFFE07D1", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitlesFFFE07D2_WebConfigFFFE07D1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TitlesFFFE07D2_WebConfigFFFE07D1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitlesFFFE07D2_WebConfigFFFE07D1(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void TitlesFFFE07D2_WebConfigFFFE07D1Async() {
            this.TitlesFFFE07D2_WebConfigFFFE07D1Async(null);
        }
        
        /// <remarks/>
        public void TitlesFFFE07D2_WebConfigFFFE07D1Async(object userState) {
            if ((this.TitlesFFFE07D2_WebConfigFFFE07D1OperationCompleted == null)) {
                this.TitlesFFFE07D2_WebConfigFFFE07D1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitlesFFFE07D2_WebConfigFFFE07D1OperationCompleted);
            }
            this.InvokeAsync("TitlesFFFE07D2_WebConfigFFFE07D1", new object[0], this.TitlesFFFE07D2_WebConfigFFFE07D1OperationCompleted, userState);
        }
        
        private void OnTitlesFFFE07D2_WebConfigFFFE07D1OperationCompleted(object arg) {
            if ((this.TitlesFFFE07D2_WebConfigFFFE07D1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TitlesFFFE07D2_WebConfigFFFE07D1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixedOverride/Privileges252", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Privileges252() {
            this.Invoke("Privileges252", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrivileges252(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Privileges252", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPrivileges252(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Privileges252Async() {
            this.Privileges252Async(null);
        }
        
        /// <remarks/>
        public void Privileges252Async(object userState) {
            if ((this.Privileges252OperationCompleted == null)) {
                this.Privileges252OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivileges252OperationCompleted);
            }
            this.InvokeAsync("Privileges252", new object[0], this.Privileges252OperationCompleted, userState);
        }
        
        private void OnPrivileges252OperationCompleted(object arg) {
            if ((this.Privileges252Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privileges252Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixedOverride/Privileges254", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Privileges254() {
            this.Invoke("Privileges254", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrivileges254(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Privileges254", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPrivileges254(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Privileges254Async() {
            this.Privileges254Async(null);
        }
        
        /// <remarks/>
        public void Privileges254Async(object userState) {
            if ((this.Privileges254OperationCompleted == null)) {
                this.Privileges254OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivileges254OperationCompleted);
            }
            this.InvokeAsync("Privileges254", new object[0], this.Privileges254OperationCompleted, userState);
        }
        
        private void OnPrivileges254OperationCompleted(object arg) {
            if ((this.Privileges254Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privileges254Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixedOverride/Privileges254_WebConfig255", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Privileges254_WebConfig255() {
            this.Invoke("Privileges254_WebConfig255", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrivileges254_WebConfig255(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Privileges254_WebConfig255", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPrivileges254_WebConfig255(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Privileges254_WebConfig255Async() {
            this.Privileges254_WebConfig255Async(null);
        }
        
        /// <remarks/>
        public void Privileges254_WebConfig255Async(object userState) {
            if ((this.Privileges254_WebConfig255OperationCompleted == null)) {
                this.Privileges254_WebConfig255OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivileges254_WebConfig255OperationCompleted);
            }
            this.InvokeAsync("Privileges254_WebConfig255", new object[0], this.Privileges254_WebConfig255OperationCompleted, userState);
        }
        
        private void OnPrivileges254_WebConfig255OperationCompleted(object arg) {
            if ((this.Privileges254_WebConfig255Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privileges254_WebConfig255Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixedOverride/RequiresClaimLion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequiresClaimLion() {
            this.Invoke("RequiresClaimLion", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequiresClaimLion(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequiresClaimLion", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRequiresClaimLion(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RequiresClaimLionAsync() {
            this.RequiresClaimLionAsync(null);
        }
        
        /// <remarks/>
        public void RequiresClaimLionAsync(object userState) {
            if ((this.RequiresClaimLionOperationCompleted == null)) {
                this.RequiresClaimLionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequiresClaimLionOperationCompleted);
            }
            this.InvokeAsync("RequiresClaimLion", new object[0], this.RequiresClaimLionOperationCompleted, userState);
        }
        
        private void OnRequiresClaimLionOperationCompleted(object arg) {
            if ((this.RequiresClaimLionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequiresClaimLionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMixedOverride/RequiresClaimLion_WebConfigTiger", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequiresClaimLion_WebConfigTiger() {
            this.Invoke("RequiresClaimLion_WebConfigTiger", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequiresClaimLion_WebConfigTiger(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequiresClaimLion_WebConfigTiger", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRequiresClaimLion_WebConfigTiger(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RequiresClaimLion_WebConfigTigerAsync() {
            this.RequiresClaimLion_WebConfigTigerAsync(null);
        }
        
        /// <remarks/>
        public void RequiresClaimLion_WebConfigTigerAsync(object userState) {
            if ((this.RequiresClaimLion_WebConfigTigerOperationCompleted == null)) {
                this.RequiresClaimLion_WebConfigTigerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequiresClaimLion_WebConfigTigerOperationCompleted);
            }
            this.InvokeAsync("RequiresClaimLion_WebConfigTiger", new object[0], this.RequiresClaimLion_WebConfigTigerOperationCompleted, userState);
        }
        
        private void OnRequiresClaimLion_WebConfigTigerOperationCompleted(object arg) {
            if ((this.RequiresClaimLion_WebConfigTigerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequiresClaimLion_WebConfigTigerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PlatformsPCCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PlatformsPC_WebConfigXbox360CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TitlesFFFE07D2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TitlesFFFE07D2_WebConfigFFFE07D1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Privileges252CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Privileges254CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Privileges254_WebConfig255CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequiresClaimLionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequiresClaimLion_WebConfigTigerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\WebConfig.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace ServerTestFramework.LiveService.TestFdXsts.Wcf
{
    internal class WebConfigWsdlWrapper: ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig.WebConfig
    {
        System.Collections.Generic.List<string> AdditionalHeaders;

        public WebConfigWsdlWrapper(System.Collections.Generic.List<string> headers, System.Net.IPEndPoint endpoint)
        {
            AdditionalHeaders=headers;
            Url="http://"+endpoint+"/testfdxstswcf/WebConfig.svc";
        }

        protected override System.Net.WebRequest GetWebRequest(System.Uri uri)
        {
            System.Net.WebRequest req=base.GetWebRequest(uri);

            if (AdditionalHeaders!=null)
            {
                foreach (string s in AdditionalHeaders)
                {
                    int indexOfSplitter=s.IndexOf(":");
                    string left=s.Substring(0, indexOfSplitter);
                    string right=s.Substring(indexOfSplitter+1);
                    req.Headers.Add(left, right);
                }
            }

            return req;
        }

        protected override System.Net.WebResponse GetWebResponse(System.Net.WebRequest request)
        {
            System.Net.WebResponse response=base.GetWebResponse(request);
            if (response is System.Net.HttpWebResponse)
            {
                WcfCommon.VerifyResponse((System.Net.HttpWebResponse)response);
            }
            return response;
        }
    };

    public class WebConfigClient: WebConfigClientBase
    {
        public WebConfigClient()
        {
            EndPoint=Global.XEnv.GetVirtualInterface(xonline.common.config.VirtualInterface.testfdxstswcf_int);
        }

        public override void Platforms_Xbox360()
        {
            using (WebConfigWsdlWrapper client=new WebConfigWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Platforms_Xbox360();
                });
            }
        }

        public override void Titles_FFFE07D1()
        {
            using (WebConfigWsdlWrapper client=new WebConfigWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Titles_FFFE07D1();
                });
            }
        }

        public override void Privileges_254()
        {
            using (WebConfigWsdlWrapper client=new WebConfigWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.Privileges_254();
                });
            }
        }

        public override void RequiresClaim_Tiger()
        {
            using (WebConfigWsdlWrapper client=new WebConfigWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.RequiresClaim_Tiger();
                });
            }
        }

        public override void EqualsAgeGroup_OldEnough()
        {
            using (WebConfigWsdlWrapper client=new WebConfigWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.EqualsAgeGroup_OldEnough();
                });
            }
        }

        public override void GreaterThanInteger_13()
        {
            using (WebConfigWsdlWrapper client=new WebConfigWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.GreaterThanInteger_13();
                });
            }
        }

        public override void LessThanInteger_13()
        {
            using (WebConfigWsdlWrapper client=new WebConfigWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.LessThanInteger_13();
                });
            }
        }

        public override void SimpleAnd()
        {
            using (WebConfigWsdlWrapper client=new WebConfigWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.SimpleAnd();
                });
            }
        }

        public override void SimpleOr()
        {
            using (WebConfigWsdlWrapper client=new WebConfigWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.SimpleOr();
                });
            }
        }

        public override void SimpleNot()
        {
            using (WebConfigWsdlWrapper client=new WebConfigWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.SimpleNot();
                });
            }
        }

        public override void ComplexAndOrNot()
        {
            using (WebConfigWsdlWrapper client=new WebConfigWsdlWrapper(AdditionalHeaders, EndPoint))
            {
                ExecuteAndHandleHttpResponse(delegate()
                {
                    client.ComplexAndOrNot();
                });
            }
        }
    };
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\Passport.cs ===
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Text;
using System.Web.Services.Protocols;
using System.Xml;

using xonline.common.config;
using xonline.common.service;

//using xonline.common.config;
//using xonline.common.mgmt;
//using xonline.common.service;
//using xonline.common.billing.passport;

namespace ServerTestFramework.LiveService.UserAccount
{
    // Standard Passport client implementation
    public class PassportTestClient
    {
        private static class PassportServiceData
        {
            private static object InitializationLock = new object();
            private static volatile bool _initialized = false;
            public static bool Initialized
            {
                get
                {
                    return _initialized;
                }
            }

            public static UInt32 PublicExponent;
            public static byte[] Modulus;
            public static byte[] Digest = new byte[XOn.XONLINE_PASSPORT_PUBLIC_KEY_DIGEST_LEN];
            public static string LoginTokenRequest;
            public static string LoginTokenRequestMsn;

            public static void Initialize()
            {
                if (!_initialized)
                {
                    lock (InitializationLock)
                    {
                        if (!_initialized)
                        {
                            UacsCommon.XePassportGetEncryptedProxyParameters(XOn.XONLINE_PASSPORT_LOGIN_MESSENGER_SERVICE_ID,
                               out PublicExponent, out Modulus, out Digest, out LoginTokenRequestMsn);
                            UacsCommon.XePassportGetEncryptedProxyParameters(XOn.XONLINE_PASSPORT_LOGIN_XBOXLIVE_SERVICE_ID, 
                                out PublicExponent, out Modulus, out Digest, out LoginTokenRequest);
                            _initialized = true;
                        }
                    }
                }
            }
        }

        public void Init()
        {
            PassportServiceData.Initialize();
        }

        public void GenerateEncryptedLoginParts(
            string passw,
            out byte[] encSesKey,
            out byte[] encPassw,
            out byte[] encReq
            )
        {
            _GenerateEncryptedLoginParts(
                        passw,
                        XOn.XONLINE_PASSPORT_LOGIN_XBOXLIVE_SERVICE_ID,
                        out encSesKey,
                        out encPassw,
                        out encReq);
        }

        // not used
        public void GenerateEncryptedLoginPartsMsn(
            string passw,
            out byte[] encSesKey,
            out byte[] encPassw,
            out byte[] encReq
            )
        {
            _GenerateEncryptedLoginParts(
                        passw,
                        XOn.XONLINE_PASSPORT_LOGIN_MESSENGER_SERVICE_ID,
                        out encSesKey,
                        out encPassw,
                        out encReq);
        }
        
        public void GenerateEncryptedLoginPartsMsnCustom(
            string passw,
            out byte[] encSesKey,
            out byte[] encPassw,
            out byte[] encReq
            )
        {
            _GenerateEncryptedLoginParts(
                        passw,
                        -1,
                        out encSesKey,
                        out encPassw,
                        out encReq);
        }
        
        private void _GenerateEncryptedLoginParts(
            string passw,
            int serviceId,
            out byte[] encSesKey,
            out byte[] encPassw,
            out byte[] encReq
            )
        {
            SHA1Managed shafn = new SHA1Managed();

            // Generate a random session key
            RandomNumberGenerator rand = RandomNumberGenerator.Create();
            byte[] _sessionKey = new byte[24];
            rand.GetBytes(_sessionKey);
            
            // Use Iv = 0
            byte[] iv = new byte[8]; 

            // Encript session key using passport public key
            encSesKey = EncryptWithPassportPublicKey(_sessionKey);

            // Format timestamp
            DateTime now = DateTime.UtcNow;
            byte[] timestamp = Encoding.UTF8.GetBytes(now.ToString("yyyy-MM-ddTHH:mm:ssZ"));

            // Calculate password message using the following scheme:
            // shaPassw = SHA1_hash(Password + timestamp + SHA1_hash(PP public key))
            // PasswordCiphervalue= Base64(Encrypt-SessionKey_S(shaPassw+timestamp))
            BinaryWriter bw = new BinaryWriter(new MemoryStream(256));
            bw.Write(Encoding.UTF8.GetBytes(passw));
            bw.Write(timestamp);
            bw.Write(PassportServiceData.Digest);
            byte[] passwblob = ((MemoryStream)bw.BaseStream).ToArray();
            byte[] shaPassw = shafn.ComputeHash(passwblob);

            bw = new BinaryWriter(new MemoryStream(256));
            bw.Write(shaPassw);
            bw.Write(timestamp);
            byte[] shaTsBlob = ((MemoryStream)bw.BaseStream).ToArray(); 
            
            byte[] encShaTsBlob = EncryptWith3Des(_sessionKey, iv, shaTsBlob);
            encPassw = encShaTsBlob;

            // Request
            switch(serviceId)
            {
                case -1:
                    string _loginTokenRequestMsnCustom = string.Format(_loginTokenRequestTemplate, Config.GetSetting(Setting.passport_siteAddressMsn), "?id=730&amp;tw=40&amp;fs=1&amp;kpp=1&amp;kv=4&amp;ver=2.1.6000.1&amp;rn=bzYirt7s");
                    encReq = EncryptWith3Des(_sessionKey, iv, Encoding.UTF8.GetBytes(_loginTokenRequestMsnCustom));
                    break;
                case XOn.XONLINE_PASSPORT_LOGIN_MESSENGER_SERVICE_ID:
                    encReq = EncryptWith3Des(_sessionKey, iv, Encoding.UTF8.GetBytes(PassportServiceData.LoginTokenRequestMsn));
                    break;
                default :
                    encReq = EncryptWith3Des(_sessionKey, iv, Encoding.UTF8.GetBytes(PassportServiceData.LoginTokenRequest));
                    break;
            }
        }

        public void GenerateEncryptedCredentials(
            string oldPassword,
            string newPassword,
            string secretAnswer,
            out byte[] encryptedCredentials
            )
        {
            byte[] binOldPassword  = Encoding.ASCII.GetBytes(oldPassword);
            byte[] binPassword     = Encoding.ASCII.GetBytes(newPassword);
            byte[] binSecretAnswer = Encoding.Unicode.GetBytes(secretAnswer);

            BinaryWriter bw = new BinaryWriter(new MemoryStream(200));
            bw.Write((byte)1); // Version of the encryption scheme
            bw.Write((byte)1); // Version of the format of the plaintext string
            bw.Write((byte)binPassword.Length); // Size of password in bytes
            bw.Write(binPassword); // Password in ascii
            bw.Write((byte)binSecretAnswer.Length); // Size of secret-answer in bytes
            bw.Write(binSecretAnswer); // secret-answer in unicode
            bw.Write((byte)binOldPassword.Length); // Size of old-password.
            bw.Write(binOldPassword); // old-password in ascii

            byte[] credentials = ((MemoryStream)bw.BaseStream).ToArray();

            // Encrypt 
            encryptedCredentials = EncryptWithPassportPublicKey(credentials);
        }

        static protected byte[] EncryptWith3Des(byte[] key, byte[] iv, byte[] data)
        {
            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
            MemoryStream ms = new MemoryStream(1024);
            CryptoStream cs = new CryptoStream(ms, tdes.CreateEncryptor(key, iv), CryptoStreamMode.Write);
            cs.Write(data, 0, data.Length);
            cs.Close();
            return ms.ToArray();
        }

        protected byte[] EncryptWithPassportPublicKey(byte[] data)
        {
            byte[] _modulus = PassportServiceData.Modulus;
            uint _pubexp = PassportServiceData.PublicExponent;
            // Managed RSA provider expects key data in big endian order
            byte[] rmodulus = DuplicateAndReverse(_modulus);
            byte[] rpubexp  = new byte[] { 
                                             (byte) ((_pubexp & 0xFF000000)>>24),
                                             (byte) ((_pubexp & 0xFF0000)>>16),
                                             (byte) ((_pubexp & 0xFF00)>>8),
                                             (byte) (_pubexp & 0xFF)
                                         };

            // Load up key            
            RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
            RSAParameters keyInfo = new RSAParameters();
            keyInfo.Modulus  = rmodulus;
            keyInfo.Exponent = rpubexp;
            rsa.ImportParameters(keyInfo);

            // Calculate the max size of message bytes that can be encrypted
            // in one block of cipher text and the number of blocks necessary
            // to encrypt the whole thing
            int msgblocksize  = _modulus.Length - 2 - 2 * 20;
            int blockcount    = (data.Length / msgblocksize) + ((data.Length % msgblocksize) != 0 ? 1 : 0);
            
            // Encrypt
            MemoryStream ciphertext = new MemoryStream(blockcount * _modulus.Length);
            byte[] msgblock = new byte[msgblocksize];
            int dataleft = data.Length;
            for(int i=0; i < blockcount; i++)
            {
                int size = Math.Min(dataleft, msgblocksize);
                if(size != msgblock.Length)
                    msgblock = new byte[size];

                Buffer.BlockCopy(data, i * msgblocksize, msgblock, 0, size);
                byte[] cipherblock = rsa.Encrypt(msgblock, true);
                Array.Reverse(cipherblock);
                ciphertext.Write(cipherblock, 0, cipherblock.Length);
                dataleft -= size;
            }

            return ciphertext.ToArray();
        }

        // Copy buffer and reverse it at the same time
        protected byte[] DuplicateAndReverse(byte[] bin)
        {
            byte[] rdup = new byte[bin.Length];
            
            int rduplength = rdup.Length;
            for(int i=0; i < bin.Length; i++)
            {
                rdup[rduplength - i - 1] = bin[i];
            }

            return rdup;
        }
        

        protected string _loginTokenRequestTemplate = 
            "<ps:EncryptedRequest"+
            "    xmlns:ps='http://schemas.microsoft.com/Passport/SoapServices/EncProxyV1'"+
            "    xmlns:wst='http://schemas.xmlsoap.org/ws/2004/04/trust'"+
            "    xmlns:wsp='http://schemas.xmlsoap.org/ws/2002/12/policy'"+
            "    xmlns:wsa='http://schemas.xmlsoap.org/ws/2004/03/addressing'"+
            "    xmlns:wsse='http://schemas.xmlsoap.org/ws/2003/06/secext'>"+
            "    <wst:RequestSecurityToken>"+
            "        <wst:RequestType>"+
            "            http://schemas.xmlsoap.org/ws/2004/04/security/trust/Issue"+
            "        </wst:RequestType>"+
            "        <wsp:AppliesTo>"+
            "            <wsa:EndpointReference>"+
            "                <wsa:Address>{0}</wsa:Address>"+
            "            </wsa:EndpointReference>"+
            "        </wsp:AppliesTo>"+
            "        <wsse:PolicyReference URI='{1}'/>"+
            "    </wst:RequestSecurityToken>"+
            "</ps:EncryptedRequest>";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\WebConfig.wsdl.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.WebConfig {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IWebConfig", Namespace="http://tempuri.org/")]
    public partial class WebConfig : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback Platforms_Xbox360OperationCompleted;
        
        private System.Threading.SendOrPostCallback Titles_FFFE07D1OperationCompleted;
        
        private System.Threading.SendOrPostCallback Privileges_254OperationCompleted;
        
        private System.Threading.SendOrPostCallback RequiresClaim_TigerOperationCompleted;
        
        private System.Threading.SendOrPostCallback EqualsAgeGroup_OldEnoughOperationCompleted;
        
        private System.Threading.SendOrPostCallback GreaterThanInteger_13OperationCompleted;
        
        private System.Threading.SendOrPostCallback LessThanInteger_13OperationCompleted;
        
        private System.Threading.SendOrPostCallback SimpleAndOperationCompleted;
        
        private System.Threading.SendOrPostCallback SimpleOrOperationCompleted;
        
        private System.Threading.SendOrPostCallback SimpleNotOperationCompleted;
        
        private System.Threading.SendOrPostCallback ComplexAndOrNotOperationCompleted;
        
        /// <remarks/>
        public WebConfig() {
            this.Url = "http://craigickxblob:13374/testfdxstswcf/WebConfig.svc";
        }
        
        /// <remarks/>
        public event Platforms_Xbox360CompletedEventHandler Platforms_Xbox360Completed;
        
        /// <remarks/>
        public event Titles_FFFE07D1CompletedEventHandler Titles_FFFE07D1Completed;
        
        /// <remarks/>
        public event Privileges_254CompletedEventHandler Privileges_254Completed;
        
        /// <remarks/>
        public event RequiresClaim_TigerCompletedEventHandler RequiresClaim_TigerCompleted;
        
        /// <remarks/>
        public event EqualsAgeGroup_OldEnoughCompletedEventHandler EqualsAgeGroup_OldEnoughCompleted;
        
        /// <remarks/>
        public event GreaterThanInteger_13CompletedEventHandler GreaterThanInteger_13Completed;
        
        /// <remarks/>
        public event LessThanInteger_13CompletedEventHandler LessThanInteger_13Completed;
        
        /// <remarks/>
        public event SimpleAndCompletedEventHandler SimpleAndCompleted;
        
        /// <remarks/>
        public event SimpleOrCompletedEventHandler SimpleOrCompleted;
        
        /// <remarks/>
        public event SimpleNotCompletedEventHandler SimpleNotCompleted;
        
        /// <remarks/>
        public event ComplexAndOrNotCompletedEventHandler ComplexAndOrNotCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWebConfig/Platforms_Xbox360", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Platforms_Xbox360() {
            this.Invoke("Platforms_Xbox360", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPlatforms_Xbox360(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Platforms_Xbox360", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPlatforms_Xbox360(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Platforms_Xbox360Async() {
            this.Platforms_Xbox360Async(null);
        }
        
        /// <remarks/>
        public void Platforms_Xbox360Async(object userState) {
            if ((this.Platforms_Xbox360OperationCompleted == null)) {
                this.Platforms_Xbox360OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPlatforms_Xbox360OperationCompleted);
            }
            this.InvokeAsync("Platforms_Xbox360", new object[0], this.Platforms_Xbox360OperationCompleted, userState);
        }
        
        private void OnPlatforms_Xbox360OperationCompleted(object arg) {
            if ((this.Platforms_Xbox360Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Platforms_Xbox360Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWebConfig/Titles_FFFE07D1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Titles_FFFE07D1() {
            this.Invoke("Titles_FFFE07D1", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTitles_FFFE07D1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Titles_FFFE07D1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTitles_FFFE07D1(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Titles_FFFE07D1Async() {
            this.Titles_FFFE07D1Async(null);
        }
        
        /// <remarks/>
        public void Titles_FFFE07D1Async(object userState) {
            if ((this.Titles_FFFE07D1OperationCompleted == null)) {
                this.Titles_FFFE07D1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnTitles_FFFE07D1OperationCompleted);
            }
            this.InvokeAsync("Titles_FFFE07D1", new object[0], this.Titles_FFFE07D1OperationCompleted, userState);
        }
        
        private void OnTitles_FFFE07D1OperationCompleted(object arg) {
            if ((this.Titles_FFFE07D1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Titles_FFFE07D1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWebConfig/Privileges_254", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Privileges_254() {
            this.Invoke("Privileges_254", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrivileges_254(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Privileges_254", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPrivileges_254(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void Privileges_254Async() {
            this.Privileges_254Async(null);
        }
        
        /// <remarks/>
        public void Privileges_254Async(object userState) {
            if ((this.Privileges_254OperationCompleted == null)) {
                this.Privileges_254OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivileges_254OperationCompleted);
            }
            this.InvokeAsync("Privileges_254", new object[0], this.Privileges_254OperationCompleted, userState);
        }
        
        private void OnPrivileges_254OperationCompleted(object arg) {
            if ((this.Privileges_254Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privileges_254Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWebConfig/RequiresClaim_Tiger", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequiresClaim_Tiger() {
            this.Invoke("RequiresClaim_Tiger", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequiresClaim_Tiger(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequiresClaim_Tiger", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRequiresClaim_Tiger(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RequiresClaim_TigerAsync() {
            this.RequiresClaim_TigerAsync(null);
        }
        
        /// <remarks/>
        public void RequiresClaim_TigerAsync(object userState) {
            if ((this.RequiresClaim_TigerOperationCompleted == null)) {
                this.RequiresClaim_TigerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequiresClaim_TigerOperationCompleted);
            }
            this.InvokeAsync("RequiresClaim_Tiger", new object[0], this.RequiresClaim_TigerOperationCompleted, userState);
        }
        
        private void OnRequiresClaim_TigerOperationCompleted(object arg) {
            if ((this.RequiresClaim_TigerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequiresClaim_TigerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWebConfig/EqualsAgeGroup_OldEnough", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EqualsAgeGroup_OldEnough() {
            this.Invoke("EqualsAgeGroup_OldEnough", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEqualsAgeGroup_OldEnough(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EqualsAgeGroup_OldEnough", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEqualsAgeGroup_OldEnough(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void EqualsAgeGroup_OldEnoughAsync() {
            this.EqualsAgeGroup_OldEnoughAsync(null);
        }
        
        /// <remarks/>
        public void EqualsAgeGroup_OldEnoughAsync(object userState) {
            if ((this.EqualsAgeGroup_OldEnoughOperationCompleted == null)) {
                this.EqualsAgeGroup_OldEnoughOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEqualsAgeGroup_OldEnoughOperationCompleted);
            }
            this.InvokeAsync("EqualsAgeGroup_OldEnough", new object[0], this.EqualsAgeGroup_OldEnoughOperationCompleted, userState);
        }
        
        private void OnEqualsAgeGroup_OldEnoughOperationCompleted(object arg) {
            if ((this.EqualsAgeGroup_OldEnoughCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EqualsAgeGroup_OldEnoughCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWebConfig/GreaterThanInteger_13", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GreaterThanInteger_13() {
            this.Invoke("GreaterThanInteger_13", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGreaterThanInteger_13(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GreaterThanInteger_13", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndGreaterThanInteger_13(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void GreaterThanInteger_13Async() {
            this.GreaterThanInteger_13Async(null);
        }
        
        /// <remarks/>
        public void GreaterThanInteger_13Async(object userState) {
            if ((this.GreaterThanInteger_13OperationCompleted == null)) {
                this.GreaterThanInteger_13OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGreaterThanInteger_13OperationCompleted);
            }
            this.InvokeAsync("GreaterThanInteger_13", new object[0], this.GreaterThanInteger_13OperationCompleted, userState);
        }
        
        private void OnGreaterThanInteger_13OperationCompleted(object arg) {
            if ((this.GreaterThanInteger_13Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GreaterThanInteger_13Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWebConfig/LessThanInteger_13", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LessThanInteger_13() {
            this.Invoke("LessThanInteger_13", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLessThanInteger_13(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LessThanInteger_13", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndLessThanInteger_13(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void LessThanInteger_13Async() {
            this.LessThanInteger_13Async(null);
        }
        
        /// <remarks/>
        public void LessThanInteger_13Async(object userState) {
            if ((this.LessThanInteger_13OperationCompleted == null)) {
                this.LessThanInteger_13OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLessThanInteger_13OperationCompleted);
            }
            this.InvokeAsync("LessThanInteger_13", new object[0], this.LessThanInteger_13OperationCompleted, userState);
        }
        
        private void OnLessThanInteger_13OperationCompleted(object arg) {
            if ((this.LessThanInteger_13Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LessThanInteger_13Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWebConfig/SimpleAnd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SimpleAnd() {
            this.Invoke("SimpleAnd", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSimpleAnd(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SimpleAnd", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSimpleAnd(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SimpleAndAsync() {
            this.SimpleAndAsync(null);
        }
        
        /// <remarks/>
        public void SimpleAndAsync(object userState) {
            if ((this.SimpleAndOperationCompleted == null)) {
                this.SimpleAndOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSimpleAndOperationCompleted);
            }
            this.InvokeAsync("SimpleAnd", new object[0], this.SimpleAndOperationCompleted, userState);
        }
        
        private void OnSimpleAndOperationCompleted(object arg) {
            if ((this.SimpleAndCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SimpleAndCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWebConfig/SimpleOr", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SimpleOr() {
            this.Invoke("SimpleOr", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSimpleOr(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SimpleOr", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSimpleOr(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SimpleOrAsync() {
            this.SimpleOrAsync(null);
        }
        
        /// <remarks/>
        public void SimpleOrAsync(object userState) {
            if ((this.SimpleOrOperationCompleted == null)) {
                this.SimpleOrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSimpleOrOperationCompleted);
            }
            this.InvokeAsync("SimpleOr", new object[0], this.SimpleOrOperationCompleted, userState);
        }
        
        private void OnSimpleOrOperationCompleted(object arg) {
            if ((this.SimpleOrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SimpleOrCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWebConfig/SimpleNot", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SimpleNot() {
            this.Invoke("SimpleNot", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSimpleNot(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SimpleNot", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSimpleNot(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SimpleNotAsync() {
            this.SimpleNotAsync(null);
        }
        
        /// <remarks/>
        public void SimpleNotAsync(object userState) {
            if ((this.SimpleNotOperationCompleted == null)) {
                this.SimpleNotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSimpleNotOperationCompleted);
            }
            this.InvokeAsync("SimpleNot", new object[0], this.SimpleNotOperationCompleted, userState);
        }
        
        private void OnSimpleNotOperationCompleted(object arg) {
            if ((this.SimpleNotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SimpleNotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWebConfig/ComplexAndOrNot", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ComplexAndOrNot() {
            this.Invoke("ComplexAndOrNot", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginComplexAndOrNot(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ComplexAndOrNot", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndComplexAndOrNot(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ComplexAndOrNotAsync() {
            this.ComplexAndOrNotAsync(null);
        }
        
        /// <remarks/>
        public void ComplexAndOrNotAsync(object userState) {
            if ((this.ComplexAndOrNotOperationCompleted == null)) {
                this.ComplexAndOrNotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnComplexAndOrNotOperationCompleted);
            }
            this.InvokeAsync("ComplexAndOrNot", new object[0], this.ComplexAndOrNotOperationCompleted, userState);
        }
        
        private void OnComplexAndOrNotOperationCompleted(object arg) {
            if ((this.ComplexAndOrNotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ComplexAndOrNotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Platforms_Xbox360CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Titles_FFFE07D1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void Privileges_254CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RequiresClaim_TigerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EqualsAgeGroup_OldEnoughCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GreaterThanInteger_13CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void LessThanInteger_13CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SimpleAndCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SimpleOrCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SimpleNotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ComplexAndOrNotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\TestFdXsts\Wcf\Simple.wsdl.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace ServerTestFramework.LiveService.TestFdXstsWcf.Wsdl.Simple {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_ISimple", Namespace="http://tempuri.org/")]
    public partial class Simple : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback EchoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTokenClaimsStringOperationCompleted;
        
        /// <remarks/>
        public Simple() {
            this.Url = "http://craigickxblob:13374/testfdxstswcf/Simple.svc";
        }
        
        /// <remarks/>
        public event EchoCompletedEventHandler EchoCompleted;
        
        /// <remarks/>
        public event GetTokenClaimsStringCompletedEventHandler GetTokenClaimsStringCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISimple/Echo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Echo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string s) {
            object[] results = this.Invoke("Echo", new object[] {
                        s});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEcho(string s, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Echo", new object[] {
                        s}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEcho(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EchoAsync(string s) {
            this.EchoAsync(s, null);
        }
        
        /// <remarks/>
        public void EchoAsync(string s, object userState) {
            if ((this.EchoOperationCompleted == null)) {
                this.EchoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEchoOperationCompleted);
            }
            this.InvokeAsync("Echo", new object[] {
                        s}, this.EchoOperationCompleted, userState);
        }
        
        private void OnEchoOperationCompleted(object arg) {
            if ((this.EchoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EchoCompleted(this, new EchoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISimple/GetTokenClaimsString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetTokenClaimsString() {
            object[] results = this.Invoke("GetTokenClaimsString", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTokenClaimsString(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTokenClaimsString", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetTokenClaimsString(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTokenClaimsStringAsync() {
            this.GetTokenClaimsStringAsync(null);
        }
        
        /// <remarks/>
        public void GetTokenClaimsStringAsync(object userState) {
            if ((this.GetTokenClaimsStringOperationCompleted == null)) {
                this.GetTokenClaimsStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTokenClaimsStringOperationCompleted);
            }
            this.InvokeAsync("GetTokenClaimsString", new object[0], this.GetTokenClaimsStringOperationCompleted, userState);
        }
        
        private void OnGetTokenClaimsStringOperationCompleted(object arg) {
            if ((this.GetTokenClaimsStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTokenClaimsStringCompleted(this, new GetTokenClaimsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EchoCompletedEventHandler(object sender, EchoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EchoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EchoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTokenClaimsStringCompletedEventHandler(object sender, GetTokenClaimsStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTokenClaimsStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTokenClaimsStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\UacsCommonLocale.cs ===
using System;
using System.IO;
using System.Threading;
using ServerTestFramework;
using System.Collections;
using System.DirectoryServices;

using ServerTestFramework.WebWidget;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.UserAccount.WebService2;

namespace ServerTestFramework.LiveService.UserAccount
{
    /// <summary>
    /// This class provides common UACS functionality related to locale
    /// </summary>
    public partial class UacsCommon
    {
        public static ulong CreateXboxComUser(byte countryId, ushort languageId, out ulong passportPuid)
        {
            XRLXeCreateXboxComAccount createRequest;
            XRLXeCreateXboxComAccountResponse createResponse;

            int retryCount = 0;
            do
            {
                // create an xbox com user
                createRequest = new XRLXeCreateXboxComAccount(countryId, languageId);
                createResponse = new XRLXeCreateXboxComAccountResponse();

                if (!createRequest.Execute(out createResponse))
                {
                    if (createRequest.XErr != HResult.XONLINE_E_ACCOUNTS_NAME_TAKEN)
                    {
                        throw new UnexpectedTestResultException("XeCreateXboxComAccount() failed: " + createRequest.GetDumpString());
                    }
                    else
                    {
                        Global.RO.Info("XeCreateXboxComAccount.CreateXboxComUser() got XONLINE_E_ACCOUNTS_NAME_TAKEN. Retrying...");
                        retryCount++;
                        continue;
                    }
                }
                if (createRequest.XErr != HResult.S_OK)
                    throw new UnexpectedTestResultException(String.Format("XeCreateXboxComAccount returned XErr=0x{0:x}", createRequest.XErr));
                if (createResponse.UserPuid == 0)
                    throw new UnexpectedTestResultException("XeCreateXboxComAccount return value was 0.");
                break;
            } while (retryCount < 3); // Loop while NAME_TAKEN error is returned

            passportPuid = createRequest.UserPassportPuid;
            return createResponse.UserPuid;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\Ups.cs ===
using System;
using System.Xml;

namespace ServerTestFramework.LiveService.UserAccount
{
    /// <summary>
    /// Summary description for Ups.
    /// </summary>
    // Utility class to read and write to the Ups profile xml blob

    public class UpsProfile
    {
        public enum ProfileAttribute
        {
            FirstName,
            LastName,
            BirthDate,
            Street1,
            Street2,
            City,
            County,
            Country,
            Region,
            PostalCode,
            Phone,
            Email,
            Gamertag
        }

        private string m_firstName;
        private string m_lastName;
        private DateTime m_birthDate;
        private string m_street1;
        private string m_street2;
        private string m_city;
        private string m_country;
        private string m_county;
        private string m_region;
        private string m_postalCode;
        private string m_phonePrefix;
        private string m_phoneNumber;
        private string m_phoneExtension;
        private string m_email;
        private string m_gamertag;

        private int m_valueSet;
        
        public UpsProfile()
        {
            m_valueSet = 0;
        }

        public UpsProfile(string profileXml)
        {
            UpsProfileXml xml = new UpsProfileXml(profileXml);
            
            //        "Personal2_CS.Name_First",
            //        "Personal2_CS.Name_Last",
            //        "Personal_CS.Birthdate",
            //        "Addresses_CS.Home_Street1",
            //        "Addresses_CS.Home_Street2",
            //        "Addresses_CS.Home_City",
            //        "Addresses_CS.Home_County",
            //        "Addresses_CS.Home_Country",
            //        "Addresses_CS.Home_Region",
            //        "Addresses_CS.Home_PostalCode",
            //        "xbox.dayphone"
            //      "xbox.email"
            //      "xbox.gamertag"
            
            string s = "";
            if (xml.IsAttributeInString("Personal2_CS", "Name_First"))       xml.GetAttributeString("Personal2_CS", "Name_First", out m_firstName);
            if (xml.IsAttributeInString("Personal2_CS", "Name_Last"))        xml.GetAttributeString("Personal2_CS", "Name_Last", out m_lastName);

            if (xml.IsAttributeInString("Personal_CS", "Birthdate"))
            {
                xml.GetAttributeString("Personal_CS", "Birthdate", out s);
                if(s != "")
                    m_birthDate = DateTime.Parse(s.Replace(":", "/"));
            }
            
            if (xml.IsAttributeInString("Addresses_CS", "Home_Street1"))     xml.GetAttributeString("Addresses_CS", "Home_Street1", out m_street1);
            if (xml.IsAttributeInString("Addresses_CS", "Home_Street2"))     xml.GetAttributeString("Addresses_CS", "Home_Street2", out m_street2);
            if (xml.IsAttributeInString("Addresses_CS", "Home_City"))        xml.GetAttributeString("Addresses_CS", "Home_City", out m_city);
            if (xml.IsAttributeInString("Addresses_CS", "Home_County"))      xml.GetAttributeString("Addresses_CS", "Home_County", out m_county);
            if (xml.IsAttributeInString("Addresses_CS", "Home_Country"))      xml.GetAttributeString("Addresses_CS", "Home_Country", out m_country);          
            if (xml.IsAttributeInString("Addresses_CS", "Home_Region"))      xml.GetAttributeString("Addresses_CS", "Home_Region", out m_region);
            if (xml.IsAttributeInString("Addresses_CS", "Home_PostalCode"))  xml.GetAttributeString("Addresses_CS", "Home_PostalCode", out m_postalCode);

            if (xml.IsAttributeInString("xbox", "dayphone"))
            {
                xml.GetAttributeString("xbox", "dayphone", out s);
                int start = (s.IndexOf(')') == -1) ? -1 : s.IndexOf(')');
                int end = (s.IndexOf('x') == -1) ? s.Length : s.IndexOf('x');
                if (start != -1)
                {
                    m_phonePrefix = s.Substring(s.IndexOf('(') + 1, s.IndexOf(')') - s.IndexOf('('));
                    m_phonePrefix = m_phonePrefix.Trim();
                }
                m_phoneNumber = s.Substring(start + 1, end - start - 1);
                m_phoneNumber = m_phoneNumber.Trim();
                if (s.IndexOf('x') != -1)
                {
                    m_phoneExtension = s.Substring(end + 1);
                    m_phoneExtension = m_phoneExtension.Trim();
                }
            }
            if (xml.IsAttributeInString("xbox", "email"))                    xml.GetAttributeString("xbox", "email", out m_email);
            if (xml.IsAttributeInString("xbox", "gamertag")) xml.GetAttributeString("xbox", "gamertag", out m_gamertag);

            m_valueSet = 0;
        }

        
        public string FirstName 
        { 
            get { return m_firstName; } 
            set 
            { 
                m_firstName = value; 
                m_valueSet |= 0x0001;
            }
        }
        public string LastName 
        { 
            get { return m_lastName; } 
            set 
            { 
                m_lastName = value; 
                m_valueSet |= 0x0002;
            }
        }
        public DateTime BirthDate 
        { 
            get { return m_birthDate; } 
            set 
            { 
                m_birthDate = value; 
                m_valueSet |= 0x0004;
            }
        }
        public string Street1 
        { 
            get { return m_street1; } 
            set 
            { 
                m_street1 = value; 
                m_valueSet |= 0x0008;
            }
        }
        public string Street2 
        { 
            get { return m_street2; } 
            set 
            { 
                m_street2 = value; 
                m_valueSet |= 0x0010;
            }
        }
        public string City 
        { 
            get { return m_city; } 
            set 
            { 
                m_city = value; 
                m_valueSet |= 0x0020;
            }
        }
        public string Country 
        { 
            get { return m_country; } 
            set 
            { 
                m_country = value; 
                m_valueSet |= 0x0040;
            }
        }
        public string County 
        { 
            get { return m_county; } 
            set 
            { 
                m_county = value; 
                m_valueSet |= 0x0080;
            }
        }
        public string Region 
        { 
            get { return m_region; } 
            set 
            { 
                m_region = value; 
                m_valueSet |= 0x0100;
            }
        }
        public string PostalCode 
        { 
            get { return m_postalCode; } 
            set 
            { 
                m_postalCode = value; 
                m_valueSet |= 0x0200;
            }
        }
        public string PhonePrefix 
        { 
            get { return m_phonePrefix; } 
            set 
            { 
                m_phonePrefix = value; 
                m_valueSet |= 0x0400;   // one bit for all phone data
            }
        }
        public string PhoneNumber 
        { 
            get { return m_phoneNumber; } 
            set 
            { 
                m_phoneNumber = value; 
                m_valueSet |= 0x0400;   // one bit for all phone data
            }
        }
        public string PhoneExtension 
        { 
            get { return m_phoneExtension; } 
            set 
            { 
                m_phoneExtension = value; 
                m_valueSet |= 0x0400;   // one bit for all phone data
            }
        }
        public string Email 
        { 
            get { return m_email; } 
            set 
            { 
                m_email = value; 
                m_valueSet |= 0x0800;
            }
        }
        public string Gamertag
        {
            get { return m_gamertag; }
            set
            {
                m_gamertag = value;
                m_valueSet |= 0x1000;
            }
        }

        public void UpdateUpsProfile(ulong passportPuid)
        {
            UpdateUpsProfile(passportPuid, null);
        }


        public void UpdateUpsProfile(ulong passportPuid, string altUpsUrl)
        {
            string birthDateString = String.Format("{0:d2}:{1:d2}:{2:d4}", m_birthDate.Day, m_birthDate.Month, m_birthDate.Year);
            string phoneString = "";
            if (m_phonePrefix != null) phoneString += String.Format("({0}) ", m_phonePrefix);
            if (m_phoneNumber != null) phoneString += m_phoneNumber;
            if (m_phoneExtension != null) phoneString += String.Format(" x{0}", m_phoneExtension);
    
            UpsProfileXml profileXml = new UpsProfileXml(passportPuid);
            if ((m_valueSet & 0x0001) == 0x0001) profileXml.AppendAttributeString(ProfileAttribute.FirstName,  m_firstName);
            if ((m_valueSet & 0x0002) == 0x0002) profileXml.AppendAttributeString(ProfileAttribute.LastName,   m_lastName);
            if ((m_valueSet & 0x0004) == 0x0004) profileXml.AppendAttributeString(ProfileAttribute.BirthDate,  birthDateString);
            if ((m_valueSet & 0x0008) == 0x0008) profileXml.AppendAttributeString(ProfileAttribute.Street1,    m_street1);
            if ((m_valueSet & 0x0010) == 0x0010) profileXml.AppendAttributeString(ProfileAttribute.Street2,    m_street2);
            if ((m_valueSet & 0x0020) == 0x0020) profileXml.AppendAttributeString(ProfileAttribute.City,       m_city);
            if ((m_valueSet & 0x0040) == 0x0040) profileXml.AppendAttributeString(ProfileAttribute.Country,    m_country);
            if ((m_valueSet & 0x0080) == 0x0080) profileXml.AppendAttributeString(ProfileAttribute.County,     m_county);
            if ((m_valueSet & 0x0100) == 0x0100) profileXml.AppendAttributeString(ProfileAttribute.Region,     m_region);
            if ((m_valueSet & 0x0200) == 0x0200) profileXml.AppendAttributeString(ProfileAttribute.PostalCode, m_postalCode);
            if ((m_valueSet & 0x0400) == 0x0400) profileXml.AppendAttributeString(ProfileAttribute.Phone,      phoneString);
            if ((m_valueSet & 0x0800) == 0x0800) profileXml.AppendAttributeString(ProfileAttribute.Email,      m_email);
            if ((m_valueSet & 0x1000) == 0x1000) profileXml.AppendAttributeString(ProfileAttribute.Gamertag, m_gamertag);

            // send the profile string via the update profile XRL
            XRLXeUpsUpdateProfile updateProfileRequest = new XRLXeUpsUpdateProfile();
            updateProfileRequest.Profile = profileXml.Xml;
            if(altUpsUrl != null)
                updateProfileRequest.CustomHeader = altUpsUrl;
                
            if (!updateProfileRequest.Execute()) throw new Exception("XRLXeUpsUpdateProfile.Execute failed: " + updateProfileRequest.GetDumpString());

            m_valueSet = 0;  // reset which items have changed.
        }

        public string ReturnUpsProfileXML(ulong passportPuid)
        {
            string birthDateString = String.Format("{0:d2}:{1:d2}:{2:d4}", m_birthDate.Day, m_birthDate.Month, m_birthDate.Year);
            string phoneString = "";
            if (m_phonePrefix != null) phoneString += String.Format("({0}) ", m_phonePrefix);
            if (m_phoneNumber != null) phoneString += m_phoneNumber;
            if (m_phoneExtension != null) phoneString += String.Format(" x{0}", m_phoneExtension);

            UpsProfileXml profileXml = new UpsProfileXml(passportPuid);
            if ((m_valueSet & 0x0001) == 0x0001) profileXml.AppendAttributeString(ProfileAttribute.FirstName,  m_firstName);
            if ((m_valueSet & 0x0002) == 0x0002) profileXml.AppendAttributeString(ProfileAttribute.LastName,   m_lastName);
            if ((m_valueSet & 0x0004) == 0x0004) profileXml.AppendAttributeString(ProfileAttribute.BirthDate,  birthDateString);
            if ((m_valueSet & 0x0008) == 0x0008) profileXml.AppendAttributeString(ProfileAttribute.Street1,    m_street1);
            if ((m_valueSet & 0x0010) == 0x0010) profileXml.AppendAttributeString(ProfileAttribute.Street2,    m_street2);
            if ((m_valueSet & 0x0020) == 0x0020) profileXml.AppendAttributeString(ProfileAttribute.City,       m_city);
            if ((m_valueSet & 0x0040) == 0x0040) profileXml.AppendAttributeString(ProfileAttribute.Country,    m_country);
            if ((m_valueSet & 0x0080) == 0x0080) profileXml.AppendAttributeString(ProfileAttribute.County,     m_county);
            if ((m_valueSet & 0x0100) == 0x0100) profileXml.AppendAttributeString(ProfileAttribute.Region,     m_region);
            if ((m_valueSet & 0x0200) == 0x0200) profileXml.AppendAttributeString(ProfileAttribute.PostalCode, m_postalCode);
            if ((m_valueSet & 0x0400) == 0x0400) profileXml.AppendAttributeString(ProfileAttribute.Phone,      phoneString);
            if ((m_valueSet & 0x0800) == 0x0800) profileXml.AppendAttributeString(ProfileAttribute.Email,      m_email);
            if ((m_valueSet & 0x1000) == 0x1000) profileXml.AppendAttributeString(ProfileAttribute.Gamertag, m_gamertag);

            return profileXml.Xml;
        }

        protected class UpsProfileXml
        {
            public UpsProfileXml(string profileXml)
            {
                Init(profileXml);
            }
        
            public UpsProfileXml(ulong puid)
            {
                Init(puid);
            }
        
            public string Xml
            {
                get 
                { 
                    return _xml.OuterXml; 
                }
            }
        
            protected void Init(string profileXml)
            {
                // Load xml document
                _xml = new XmlDocument();
                _xml.LoadXml(profileXml);
            
                // Load namespaces
                _nsm = new XmlNamespaceManager(_xml.NameTable);
                _nsm.AddNamespace("p", _passportUserNs);
            
                // Get the userData element node
                _userDataNode = _xml.SelectSingleNode("/p:userData", _nsm);
                if(_userDataNode == null)
                    throw new Exception("Cannot find 'userData' element in profile xml");
            }
        
            protected void Init(ulong puid)
            {
                _xml = new XmlDocument();
                _nsm = new XmlNamespaceManager(_xml.NameTable);
                _nsm.AddNamespace("p", _passportUserNs);
            
                // Create an empty profile xml
                _userDataNode = _xml.CreateElement("p:userData", _passportUserNs);
                _xml.AppendChild(_userDataNode);
                XmlNode dataOwnerNode = _xml.CreateElement("p:dataOwner", _passportUserNs);
                dataOwnerNode.InnerText = puid.ToString("X016");
                _userDataNode.AppendChild(dataOwnerNode);
            }
        
            public ulong GetPassportPuid()
            {
                XmlNode node;

                if((node = _xml.SelectSingleNode("/p:userData/p:dataOwner", _nsm)) == null)
                    throw new Exception("Cannot find passport-puid in profile xml");
                
                return Convert.ToUInt64(node.InnerText, 16);
            }
        
            protected XmlNode GetAttributeNode(string namespc, string attributeName)
            {
                XmlNode node;
            
                namespc       = namespc.ToUpper();
                attributeName = attributeName.ToUpper();
            
                node = _xml.SelectSingleNode(
                    string.Format("/p:userData/p:propertyCollection[@name=\"{0}\"]/p:property[@name=\"{1}\"]", 
                    namespc, attributeName), _nsm);
                
                if(node == null)
                    throw new Exception(string.Format("Cannot find attribute {0}.{1} in profile xml:\n", namespc, attributeName));
                
                return node;
            }
        
            public bool IsAttributeInString (string namespc, string attributeName)
            {
                XmlNode node;
                try
                {
                    node = GetAttributeNode(namespc, attributeName);
                }
                catch (Exception)
                {
                    return false;
                }
            
                string attributeType = node.Attributes["datatype"].Value.ToLower();

                return (attributeType == "nil" || attributeType == "string" || attributeType == "bstr");
            }

            public bool GetAttributeString(
                string namespc, 
                string attributeName,
                out string value
                )
            {
                XmlNode node = GetAttributeNode(namespc, attributeName);
            
                string attributeType = node.Attributes["datatype"].Value.ToLower();

                if(attributeType == "nil")
                {
                    value  = string.Empty;
                    return false;
                }
                else if(attributeType == "string" || attributeType == "bstr")
                {
                    value = node.InnerText;
                    return true;
                }
                else
                {
                    throw new Exception(string.Format("Attribute {0}.{1} is not string. Profile xml:", namespc, attributeName));
                }
            }
        

            // possible attributes:
            //        "Personal2_CS.Name_First",
            //        "Personal2_CS.Name_Last",
            //        "Personal_CS.Birthdate",
            //        "Addresses_CS.Home_Street1",
            //        "Addresses_CS.Home_Street2",
            //        "Addresses_CS.Home_City",
            //        "Addresses_CS.Home_County",
            //        "Addresses_CS.Home_Country",
            //        "Addresses_CS.Home_Region",
            //        "Addresses_CS.Home_PostalCode",
            //        "xbox.dayphone"
            //      "xbox.email"
            //      "xbox.gamertag"
            protected void AppendAttribute(ProfileAttribute profileAttribute, string datatype, string value)
            {
                string namespc = "";
                string attributeName = "";

                switch (profileAttribute)
                {
                    case ProfileAttribute.FirstName : 
                        namespc = "Personal2_CS"; attributeName = "Name.First";
                        break;
                    case ProfileAttribute.LastName : 
                        namespc = "Personal2_CS"; attributeName = "Name.Last";
                        break;
                    case ProfileAttribute.BirthDate : 
                        namespc = "Personal_CS"; attributeName = "Birthdate";
                        break;
                    case ProfileAttribute.Street1 : 
                        namespc = "Addresses_CS"; attributeName = "Home.Street1";
                        break;
                    case ProfileAttribute.Street2 : 
                        namespc = "Addresses_CS"; attributeName = "Home.Street2";
                        break;
                    case ProfileAttribute.City : 
                        namespc = "Addresses_CS"; attributeName = "Home.City";
                        break;
                    case ProfileAttribute.County : 
                        namespc = "Addresses_CS"; attributeName = "Home.County";
                        break;
                    case ProfileAttribute.Country : 
                        namespc = "Addresses_CS"; attributeName = "Home.Country";
                        break;
                    case ProfileAttribute.Region : 
                        namespc = "Addresses_CS"; attributeName = "Home.Region";
                        break;
                    case ProfileAttribute.PostalCode : 
                        namespc = "Addresses_CS"; attributeName = "Home.PostalCode";
                        break;
                    case ProfileAttribute.Phone : 
                        namespc = "xbox"; attributeName = "dayphone";
                        break;
                    case ProfileAttribute.Email : 
                        namespc = "xbox"; attributeName = "email";
                        break;
                    case ProfileAttribute.Gamertag:
                        namespc = "xbox"; attributeName = "gamertag";
                        break;
                    default:
                        throw new Exception("Invalid values for ProfileAttribute");
                }
                XmlNode attributeNode;
                XmlNode namespcNode;
                XmlAttribute attribute;
            
                namespc       = namespc.ToUpper();
                attributeName = attributeName.ToUpper();
                datatype      = datatype.ToLower();
            
                namespcNode = _xml.SelectSingleNode(
                    string.Format("/p:userData/p:propertyCollection[@name=\"{0}\"]", namespc), _nsm);
                
                if(namespcNode == null)
                {
                    namespcNode = _xml.CreateElement("p:propertyCollection", _passportUserNs);
                    attribute = _xml.CreateAttribute("name");
                    attribute.Value = namespc;
                    namespcNode.Attributes.Append(attribute);
                    _userDataNode.AppendChild(namespcNode);
                }
            
                attributeNode = namespcNode.SelectSingleNode(
                    string.Format("p:property[@name=\"{0}\"]", attributeName), _nsm);
                
                if(attributeNode == null)
                {
                    attributeNode = _xml.CreateElement("p:property", _passportUserNs);
                    namespcNode.AppendChild(attributeNode);
                }
            
                attribute = _xml.CreateAttribute("name");
                attribute.Value = attributeName;
                attributeNode.Attributes.Append(attribute);
            
                attribute = _xml.CreateAttribute("datatype");
                attribute.Value = datatype;
                attributeNode.Attributes.Append(attribute);

                attributeNode.InnerText = value;
            }
        
            public void AppendAttributeString(ProfileAttribute attribute, string value)
            {
                if(value == null)
                    AppendAttribute(attribute, "nil", string.Empty);
                else
                    AppendAttribute(attribute, "string", value);
            }
        
            protected static string _passportUserNs = "http://schemas.microsoft.com/Passport/User";
            protected XmlDocument _xml;
            protected XmlNamespaceManager _nsm;
            protected XmlNode _userDataNode;
        }


        public static byte CountryIdFromCountryCode(string code)
        {
            string[] countryCodes = {
                                        "AE", "AL", "AM", "AR", "AT", "AU", "AZ", "BE", "BG", "BH",
                                        "BN", "BO", "BR", "BY", "BZ", "CA", "CB", "CH", "CL", "CN",
                                        "CO", "CR", "CZ", "DE", "DK", "DO", "DZ", "EC", "EE", "EG",
                                        "ES", "FI", "FO", "FR", "GB", "GE", "GR", "GT", "HK", "HN",
                                        "HR", "HU", "ID", "IE", "IL", "IN", "IQ", "IR", "IS", "IT",
                                        "JM", "JO", "JP", "KE", "KG", "KR", "KW", "KZ", "LB", "LI",
                                        "LT", "LU", "LV", "LY", "MA", "MC", "MK", "MN", "MO", "MV",
                                        "MX", "MY", "NI", "NL", "NO", "NZ", "OM", "PA", "PE", "PH",
                                        "PK", "PL", "PR", "PT", "PY", "QA", "RO", "RU", "SA", "SE",
                                        "SG", "SI", "SK", "SP", "SV", "SY", "TH", "TN", "TR", "TT",
                                        "TW", "UA", "US", "UY", "UZ", "VE", "VN", "YE", "ZA", "ZW"
                                    };

            byte i=0;
            while (countryCodes[i] != code.ToUpper()) i++;

            if (countryCodes[i] == code.ToUpper())
                return (byte)(i+1); // countryIds start at 1, not 0
            else 
                return 0;
        }

        public static string CountryCodeFromCountryId(byte countryId)
        {
            string[] countryCodes = {
                                        "AE", "AL", "AM", "AR", "AT", "AU", "AZ", "BE", "BG", "BH",
                                        "BN", "BO", "BR", "BY", "BZ", "CA", "CB", "CH", "CL", "CN",
                                        "CO", "CR", "CZ", "DE", "DK", "DO", "DZ", "EC", "EE", "EG",
                                        "ES", "FI", "FO", "FR", "GB", "GE", "GR", "GT", "HK", "HN",
                                        "HR", "HU", "ID", "IE", "IL", "IN", "IQ", "IR", "IS", "IT",
                                        "JM", "JO", "JP", "KE", "KG", "KR", "KW", "KZ", "LB", "LI",
                                        "LT", "LU", "LV", "LY", "MA", "MC", "MK", "MN", "MO", "MV",
                                        "MX", "MY", "NI", "NL", "NO", "NZ", "OM", "PA", "PE", "PH",
                                        "PK", "PL", "PR", "PT", "PY", "QA", "RO", "RU", "SA", "SE",
                                        "SG", "SI", "SK", "SP", "SV", "SY", "TH", "TN", "TR", "TT",
                                        "TW", "UA", "US", "UY", "UZ", "VE", "VN", "YE", "ZA", "ZW"
                                    };

            if (countryId > 0 && countryId <= countryCodes.Length)
                return countryCodes[countryId-1]; // countryIds start at 1, not 0
            else
                return "";
        }
    }

    public static class UpsUtilities
    {
        public static bool XeUpsGetProfile_VeirfyGamertag(ulong passportUserPuid, string gamertag)
        {
            // update the xbox namespace
            XRLXeUpsGetProfile request = new XRLXeUpsGetProfile();
            XRLXeUpsGetProfileResponse response = new XRLXeUpsGetProfileResponse();
            request.Puid = passportUserPuid;
            request.Attributes = string.Join(",", new string[] {
                    "xbox.dayphone",
                    "xbox.email",
                    "xbox.gamertag"});

            // send the request
            if (!request.Execute(out response)) throw new UnexpectedTestResultException(request.GetDumpString());
            if (request.XErr != HResult.S_OK) throw new UnexpectedTestResultException(request.GetDumpString());

            Global.RO.Success(response.Profile);
            UpsProfile xboxProfile = new UpsProfile(response.Profile);

            return (gamertag == xboxProfile.Gamertag);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\UacsCommon2.cs ===
using System;
using System.IO;
using System.Web;
using System.Net;
using System.Threading;
using ServerTestFramework;
using System.Collections;
using System.Collections.Generic;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.WebWidget;
using xonline.common.service;

namespace ServerTestFramework.LiveService.UserAccount
{
    public enum UserType { XboxCom, Silver, Gold, Zune };

    public class XblUserSettings
    {
        public UserType UserType;
        public bool UseRealPassport = false;
        public bool CreateMusicNetAccount = false;
        public bool CreateLightweightAccount = false;

        public string GamerTag = null;
        public ulong UserPuid = 0;
        public ulong OwnerPuid = 0;
        public ulong UserPassportPuid = 0;
        public ulong OwnerPassportPuid = 0;
        public XeUser.Country CountryId = XeUser.Country.US;
        public ulong MachinePuid = 0;
        public string PostalCode = null;

        public XblUserSettings(UserType userType)
        {
            UserType = userType;
        }

        public XblUserSettings(UserType userType, bool useRealPassport)
        {
            UserType = userType;
            UseRealPassport = useRealPassport;
        }

        public XblUserSettings(UserType userType, bool useRealPassport, bool createMusicNetAccount)
            : this(userType, useRealPassport)
        {
            CreateMusicNetAccount = createMusicNetAccount;
        }

        public XblUserSettings(UserType userType, bool useRealPassport, bool createMusicNetAccount, ulong machinePuid)
            : this(userType, useRealPassport, createMusicNetAccount)
        {
            MachinePuid = machinePuid;
        }

        public XblUserSettings(XblUserSettings other)
        {
            UserType = other.UserType;
            UseRealPassport = other.UseRealPassport;
            CreateMusicNetAccount = other.CreateMusicNetAccount;
            CreateLightweightAccount = other.CreateLightweightAccount;

            GamerTag = other.GamerTag;
            UserPuid = other.UserPuid;
            OwnerPuid = other.OwnerPuid;
            UserPassportPuid = other.UserPassportPuid;
            OwnerPassportPuid = other.OwnerPassportPuid;
            CountryId = other.CountryId;
            MachinePuid = other.MachinePuid;
            PostalCode = other.PostalCode;
        }
    }

    /// <summary>
    /// Billing coder, please add proper definition for billing information
    /// </summary>
    public sealed class BillingInfo
    {
        public UserType UserType;
        public XeUser.Country CountryId;

        public BillingInfo(XeUser.Country countryId)
        {
            CountryId = countryId;
        }

        public BillingInfo(XblUserSettings settings, Owner owner)
        {
            UserType = settings.UserType;
            CountryId = (XeUser.Country)owner.countryId;
        }

        public BillingInfo(XblUserSettings settings, XeUser user)
        {
            UserType = settings.UserType;
            CountryId = (XeUser.Country)user.CountryId;
        }

        public BillingInfo(XblUserSettings settings, XRLXeCreateXboxComAccount req)
        {
            UserType = settings.UserType;
            CountryId = (XeUser.Country)req.CountryId;
        }

        /// <summary>
        /// return billing information in a string format.  Billing coder please decide what information is necessary to return.
        /// </summary>
        /// <returns>string that contains billing information</returns>
        public override string ToString()
        {
            return UacsCommon2.CountryIdToString(CountryId);
        }
    }

    public sealed class PassportInfo
    {
        /// <summary>
        /// I don't see after passport has been created, there is any reason to change memberName, SQ and SA.  And thus I have made those field public readonly.
        /// sessionToken is in the same category, however, I don't see anybody other than passport functions to use it, and thus the internal designator.
        /// Password can be changed, and thus, I will provide an accessor.
        /// </summary>
        public string MemberName;
        public readonly string SecretQuestion;
        public readonly string SecretAnswer;
        internal byte[] SessionToken;

        private string _password = "supersecret";
        private byte[] _encyptedPassword;
        private ulong _passportPuid;
        private string passportTicket = null;

        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                this._password = value;
                this._encyptedPassword = null;
            }
        }
        /// <summary>
        /// encrypted password is generated by using password, secret question and secret answer
        /// </summary>
        public byte[] EncryptedPassword
        {
            get
            {
                return this._encyptedPassword;
            }
            set
            {
                this._encyptedPassword = value;
            }
        }

        public ulong PassportPuid
        {
            get
            {
                return this._passportPuid;
            }

            set
            {
                _passportPuid = value;
            }
        }

        public string PassportTicket
        {
            get
            {
                if(passportTicket == null)
                {
                     passportTicket = GetPassportTicket(this.MemberName,this.Password);
                }
                return passportTicket;
            }
        }

        internal PassportInfo()
        {
        }

        internal PassportInfo(string memberName, string password, string secretQuestion, string secretAnswer, byte[] sessionToken)
        {
            if (sessionToken == null)
            {
                throw new Exception("The passport puid can not be retrieved if the session token is null.");
            }
            if (sessionToken.Length < 28)
            {
                throw new Exception("The session token is an unexpected length.");
            }

            MemberName = memberName;
            _password = password;
            SecretQuestion = secretQuestion;
            SecretAnswer = secretAnswer;
            SessionToken = sessionToken;

            // The puid is contained within the first 8 bytes of the session token.
            // Extract the first 8 bytes and return it.
            _passportPuid = (ulong)BitConverter.ToInt64(SessionToken, 0);
        }

        public static string GetPassportTicket(string adminPassport, string adminPassword)
        {
			// Sign in to Passport using admin account in order to get admin ticket
			string result = null;
			string content = string.Format("<LoginRequest><ClientInfo name=\"\" version=\"1.35\"/><User><SignInName>{0}</SignInName><Password>{1}</Password><SavePassword>false</SavePassword></User></LoginRequest>",
				HttpUtility.HtmlEncode(adminPassport),
				HttpUtility.HtmlEncode(adminPassword));
			HttpWebRequest request = WebRequest.Create(Global.PassportLoginUrl) as HttpWebRequest;
			request.Method = "POST";
			request.ContentType = "text/xml";
			request.KeepAlive = false;
			request.ContentLength = content.Length;
			StreamWriter swBody = new StreamWriter(request.GetRequestStream());
			swBody.Write(content);
			swBody.Close();

			HttpWebResponse response = null;
			StreamReader srResponse = null;
			string strResponse = "";
			
			try
			{
				response = (HttpWebResponse) request.GetResponse();

				// If request succeeds, then there will be a 200 result
				srResponse = new StreamReader(response.GetResponseStream());

				// Read xml results
				strResponse = srResponse.ReadToEnd();

				// get admin ticket
                int start, end = -1, startP = -1, endP = -1;
				if((start = strResponse.IndexOf("<Redirect>")) != -1)
				{
					if((start = strResponse.IndexOf("t=", start)) != -1)
					{
						start+=2;
						end = Math.Min(strResponse.IndexOf("&amp;", start),
							strResponse.IndexOf("</Redirect>", start));
					}
                
                    if ((startP = strResponse.IndexOf("p=", start)) != -1)
                    {
                        startP += 2;
                        endP = Math.Min(strResponse.IndexOf("&amp;", startP),
                            strResponse.IndexOf("</Redirect>", startP));
                    }
                }

				if(start!=-1 && start<end)
				{
					result = strResponse.Substring(start, end-start);
				}
            }
			catch(Exception e)
			{
				if(e is WebException)
				{
					WebException we = (WebException) e;
					if(we.Response != null)
					{
						srResponse = new StreamReader(we.Response.GetResponseStream());
						strResponse = srResponse.ReadToEnd();
					}
					else
					{
						strResponse = we.ToString();
					}
				}
				else
				{
				}
			}
			finally
			{
				if (srResponse != null)
					srResponse.Close();

				if (response != null)
					response.Close();
			}

			return result;
		}

        public override string ToString()
        {
            string passportInfoStr = string.Empty;
            passportInfoStr += "Passport MemberName: " + ((MemberName == null) ? string.Empty : MemberName) + Environment.NewLine;
            passportInfoStr += "Passport Password: " + ((Password == null) ? string.Empty : Password) + Environment.NewLine;
            passportInfoStr += "Secret Question: " + ((SecretQuestion == null) ? string.Empty : SecretQuestion) + Environment.NewLine;
            passportInfoStr += "Secret Answer: " + ((SecretAnswer == null) ? string.Empty : SecretAnswer) + Environment.NewLine;
            return passportInfoStr;
        }

    }

    /// <summary>
    /// This class will be aggregated into TestBase to provide common UACS functionality
    /// </summary>
    public class UacsCommon2
    {
        private const int MAX_XEUSER_THREAD_COUNT = 50;
        private RandomEx Random = new RandomEx();
        private static PassportTestClient m_passportClient = new PassportTestClient();

        public PassportInfo GetUserPassportInfo(XblUser xblUser)
        {
            return(xblUser._userPassportInfo);
        }

        public PassportInfo GetParentPassportInfo(XblUser xblUser)
        {
            return(xblUser._parentPassportInfo);
        }

        public BillingInfo GetBillingInfo(XblUser xblUser)
        {
            return(xblUser._billingInfo);
        }

        // only for silver and gold users
        public XblUserSettings GetUserSetting(XblUser xblUser)
        {
            return (xblUser._userSetting);
        }

        public void GenerateVisaCard(ulong userPuid)
        {
            GenerateVisaCard(userPuid, XeUser.Country.US);
        }

        public void GenerateVisaCard(ulong userPuid, XeUser.Country ci)
        {
            XRLXeAddPaymentInstrument request = new XRLXeAddPaymentInstrument();

            request.UserPuid = userPuid;
            request.PaymentInstrumentType = (byte)XRLXeAddPaymentInstrument.PaymentInstrumentTypeEnum.CreditCard;
            request.AddressInfo = new AddressInfoData();
            request.PhoneInfo = new PhoneInfoData();

            // address info
            switch(ci)
            {
                case XeUser.Country.CA:
                    request.AddressInfo.Street1       = "4455 148th Ave NE";
                    request.AddressInfo.Street2       = "";
                    request.AddressInfo.City          = "Vancouver";
                    request.AddressInfo.District      = "";
                    request.AddressInfo.State         = "BC";
                    request.AddressInfo.PostalCode    = "V6E 3V7";

                    request.PhoneInfo.PhonePrefix     = "604";
                    request.PhoneInfo.PhoneNumber     = "681-6245";
                    request.PhoneInfo.PhoneExtension  = "";
                    break;

                case XeUser.Country.US:
                default:
                    request.AddressInfo.Street1       = "4455 148th Ave NE";
                    request.AddressInfo.Street2       = "";
                    request.AddressInfo.City          = "Bellevue";
                    request.AddressInfo.District      = "";
                    request.AddressInfo.State         = "WA";
                    request.AddressInfo.PostalCode    = "98007";

                    request.PhoneInfo.PhonePrefix     = "425";
                    request.PhoneInfo.PhoneNumber     = "861-6245";
                    request.PhoneInfo.PhoneExtension  = "";
                    break;
            }

            request.CreditCardInfo = new CreditCardInfoData();
            request.CreditCardInfo.AccountHolderName  = "Mike Martinsen";
            request.CreditCardInfo.AccountNumber      = ServerTestFramework.Utilities.CreditCardRandomizer.GetRandomAccountNumber("visa");
            request.CreditCardInfo.CardType           = (byte)CreditCardInfoData.CreditCardType.Visa;
            request.CreditCardInfo.CcvNumber          = "123";
            request.CreditCardInfo.ExpirationDate     = DateTime.UtcNow.AddYears(2);
            
            request.DirectDebitInfo = new DirectDebitInfoData();
            // no need to populate the dd info since we won't be using this.
                
            XRLXeAddPaymentInstrumentResponse response = new XRLXeAddPaymentInstrumentResponse();

            if (!request.Execute(out response))
            {
                throw new Exception("GenerateVisaCard failed: " + request.GetDumpString());
            }
        }

        public XRLXeGetPaymentInstrumentsResponse GetPaymentInstruments(ulong userPuid)
        {
            XRLXeGetPaymentInstruments request = new XRLXeGetPaymentInstruments();
            request.UserPuid = userPuid;
            request.MaxResults = 999;

            XRLXeGetPaymentInstrumentsResponse response = new XRLXeGetPaymentInstrumentsResponse();
            if (!request.Execute(out response))
            {
                throw new Exception("GetPaymentInstruments failed: " + response.GetDumpString());    
            }

            return response;
        }

        public uint GetPointsBalance(ulong userPuid) 
        {
            XRLXeGetPointsBalance request = new XRLXeGetPointsBalance();
            XRLXeGetPointsBalanceResponse response = new XRLXeGetPointsBalanceResponse();
            request.userPuid = userPuid;

            if (!request.Execute(out response))
                throw new Exception("XRLXeGetPointsBalance failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new Exception(String.Format("XRLXeGetPointsBalance returned XErr=0x{0:x}", request.XErr));
            
            return response.PointsBalance;
            
        }
        

        public PassportInfo CreatePassportUser()
        {
            return CreatePassportUser("xbltest-" + Guid.NewGuid().ToString() + Global.PassportMemberDomain);
        }

        public PassportInfo CreatePassportUser(string memberName)
        {
            //string password = "as13as13!!we421";    // random garbage as the password
            return CreatePassportUser(memberName, "");
        }

        public PassportInfo CreatePassportUser(string memberName, string password)
        {
            if (memberName == "")
            {
                memberName = "xbltest-" + Guid.NewGuid().ToString() + Global.PassportMemberDomain;
            }

            // create the passport user here.
            PassportUser ppu = new PassportUser();
            ppu.MemberName = memberName;
            if (password != "")
            {
                ppu.Password = password;
            }
            ppu.SecretQuestion = "Does your dog bite?";
            ppu.SecretAnswer = "It's not my dog.";

            XRLXePassportCreate request = new XRLXePassportCreate();
            XRLXePassportCreateResponse response = new XRLXePassportCreateResponse();
            
            request.PassportMemberName = ppu.MemberName;
            request.SecretQuestion = ppu.SecretQuestion;

            PassportTestClient passport = new PassportTestClient();
            passport.Init();
            passport.GenerateEncryptedCredentials("", ppu.Password, ppu.SecretAnswer, out request.EncryptedPassword);

            if (!request.Execute(out response)) throw new Exception("CreatePassportUser failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK) 
                throw new Exception(String.Format("CreatePassportUser failed (XErr={0}): {1}", request.XErr, request.GetDumpString()));

            ppu.SessionToken = response.SessionToken;

            PassportInfo ppi = new PassportInfo(ppu.MemberName, ppu.Password, ppu.SecretQuestion, ppu.SecretAnswer, ppu.SessionToken);
            return ppi;
        }

        public class PassportUser
        {
            public string MemberName;
            public string SecretQuestion;
            public byte[] SessionToken;

            private string m_password = "";
            private string m_secretAnswer = "";
            private byte[] m_encryptedPassword = null;

            public string Password
            {
                get { return m_password; }
                set 
                {
                    m_encryptedPassword = null;    // reset the encrypted password
                    m_password = value;
                }
            }

            public string SecretAnswer
            {
                get { return m_secretAnswer; }
                set 
                {
                    m_encryptedPassword = null;    // reset the encrypted password
                    m_secretAnswer = value;
                }
            }

            public byte[] EncryptedPassword
            {
                get 
                {
                    // get the encrypted password here.
                    if (m_encryptedPassword == null)
                    {
                        m_passportClient.GenerateEncryptedCredentials("", Password, SecretAnswer, out m_encryptedPassword);
                    }
                    return m_encryptedPassword;
                }
            }

            public ulong PassportPuid
            {
                get
                {
                    if (this.SessionToken == null) throw new Exception("The passport puid can not be retrieved if the session token is null.");
                    if (this.SessionToken.Length < 28) throw new Exception("The session token is an unexpected length.");

                    // The puid is contained within the first 8 bytes of the session token.
                    // Extract the first 8 bytes and return it.
                    return (ulong)BitConverter.ToInt64(SessionToken, 0);
                }
            }
        }

        public bool DbgShowCreatedUserDetails = false;

        public XblUser CreateUser(UserType userType)
        {
            XblUserSettings settings = new XblUserSettings(userType);
            return(CreateUser(settings));
        }

        public XblUser CreateUser(UserType userType, bool useRealPassport)
        {
            return CreateUser(userType, useRealPassport, false);
        }

        // for now MusicNet Account will be created only for silver or gold users
        public XblUser CreateUser(UserType userType, bool useRealPassport, bool createMusicNetAccount)
        {
            XblUserSettings settings = new XblUserSettings(userType, useRealPassport, createMusicNetAccount);
            return (CreateUser(settings));
        }

        public XblUser CreateUser(XblUserSettings settings)
        {
            XblUser user;

            if (settings.UserType == UserType.XboxCom)
            {
                user = CreateXboxComUser(settings);
            }
            else if (settings.UserType == UserType.Silver)
            {
                user = Create360User(settings);
            }
            else if (settings.UserType == UserType.Gold)
            {
                user = Create360User(settings);
            }
            else if (settings.UserType == UserType.Zune)
            {
                settings.CreateMusicNetAccount = true;
                user = Create360User(settings);
            }
            else
            {
                throw new Exception("User type not implemented yet.");
            }
            return(user);
        }

        private XblUser CreateXboxComUser(XblUserSettings settings)
        {
            XRLXeCreateXboxComAccount request = new XRLXeCreateXboxComAccount();
            XRLXeCreateXboxComAccountResponse response = new XRLXeCreateXboxComAccountResponse();
            request.CountryId = (byte)settings.CountryId;

            // Create a Passport account
            PassportInfo ppUser = null;
            if (settings.UseRealPassport)
            {
                ppUser = CreatePassportUser(request.Gamertag + Global.PassportMemberDomain, "as13as13!!we421");
                request.UserPassportPuid = ppUser.PassportPuid;
                request.OwnerPassportPuid = request.UserPassportPuid;
            }
            else
            {
                ppUser = new PassportInfo();
                ppUser.PassportPuid = request.UserPassportPuid = PassportUtilities.GenerateRandomULong();
                request.OwnerPassportPuid = request.UserPassportPuid;
            }

            // Create an Xbox.Com user
            if (!request.Execute(out response))
                throw new UnexpectedTestResultException("XeCreateXboxComAccount failed: Gamertag=" + request.Gamertag + ". Error: " + request.GetDumpString());

            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XeCreateXboxComAccount returned XErr=0x{0:x}", request.XErr));

            if (response.UserPuid == 0)
                throw new UnexpectedTestResultException("User puid returned was 0.");

            XblUser xblUser = new XblUser(response.UserPuid, request.Gamertag);
            xblUser._billingInfo = new BillingInfo(settings, request);
            xblUser._userPassportInfo = ppUser;

            DumpUserInfo(xblUser.Puid);
            if (settings.UseRealPassport)
            {
                //DumpPassportInfo(ppUser);
            }
            else
            {
                DbgWriteLine("\tFake Passport User Puid: 0x{0:X} ({0})", request.UserPassportPuid);
            }
            return(xblUser);
        }

        private XblUser Create360User(XblUserSettings settings)
        {
            XeUser user = null;

            // gamertag and country
            if(!string.IsNullOrEmpty(settings.GamerTag))
                user = new XeUser(settings.UseRealPassport, settings.GamerTag, (XeUser.Country)settings.CountryId);
            else
                user = new XeUser(settings.UseRealPassport, (XeUser.Country)settings.CountryId);
            
            user.CreateAsGold = settings.UserType == UserType.Gold;

            // machine puid
            if (settings.MachinePuid > 0)
            {
                user.MachinePuid = settings.MachinePuid;
            }
            else
            {
                user.MachinePuid = XOn.XboxId.XenonMachineBase | (~XOn.XboxId.Mask & RandomEx.GlobalRandGen.NextUlong());
                settings.MachinePuid = user.MachinePuid;
            }

            // Only allow overridden Passport info if using FakePassport...
            if(!settings.UseRealPassport && settings.UserPassportPuid != 0 && settings.OwnerPassportPuid != 0)
            {
                user.PassportUserPuid = settings.UserPassportPuid;
                user.PassportOwnerPuid = settings.OwnerPassportPuid;
            }

            // create MusicNet account
            if (settings.CreateMusicNetAccount)
            {
                user.CreateLiveAccountExtra = new XRLXeCreateLiveAccountExtra();
                user.CreateLiveAccountExtra.CreateArgoProfile = true;
            }

            // create lightweight account
            if (settings.CreateLightweightAccount)
            {
                user.LastName = "";
                user.FirstName = "";
                user.AddressInfo = new AddressInfoData();
                user.AddressInfo.City = "";
                user.AddressInfo.District = "";
                user.AddressInfo.PostalCode = "";
                user.AddressInfo.State = "";
                user.AddressInfo.Street1 = "";
                user.AddressInfo.Street2 = "";
                user.PhoneInfo = new PhoneInfoData();
                user.PhoneInfo.PhoneExtension = "";
                user.PhoneInfo.PhoneNumber = "";
                user.PhoneInfo.PhonePrefix = "";
            }

            ulong userPuid = user.Create();
            if (userPuid == 0)
            {
                throw new Exception("Failed to create Xenon user.  Puid == 0; Gamertag=" + user.Gamertag + ". Error: " + user.GetDumpString());
            }

            PassportInfo ppi = new PassportInfo();
            ppi.MemberName = user.PassportMemberName;
            ppi.PassportPuid = user.PassportUserPuid;
            ppi.Password = user.PassportPassword;
            ppi.SessionToken = user.PassportSessionToken;

            XblUser xblUser = new XblUser(userPuid, user.Gamertag);
            xblUser._billingInfo = new BillingInfo(settings, user);
            xblUser._userPassportInfo = ppi;
            // update the postal code for user setting
            settings.PostalCode = user.AddressInfo.PostalCode;
            xblUser._userSetting = new XblUserSettings(settings);

            return(xblUser);
        }

        public string GetGamertagFromPuid(ulong UserPuid)
        {
            UserInfo uinfo;
            bool ret = UodbWS.GetUserInfo(UserPuid, out uinfo);
            if (!ret)
            {
                throw new UnexpectedTestResultException("Call to GetUserInfo() failed.");
            }
            return(uinfo.nickname);
        }

        private void DbgWriteLine(string str, params object[] arg)
        {
            if (DbgShowCreatedUserDetails)
            {
                Global.RO.Debug(str, arg);
            }
        }

        private void DumpUserInfo(ulong Puid)
        {
            UserInfo uinfo;
            bool ret = UodbWS.GetUserInfo(Puid, out uinfo);
            if (!ret)
            {
                throw new UnexpectedTestResultException("Call to GetUserInfo() failed.");
            }
            DbgWriteLine("\tUsername: "+ uinfo.nickname);
            DbgWriteLine("\tPuid: 0x{0:X} ({0})", uinfo.puid);
            DbgWriteLine("\tOwner puid: 0x{0:X} ({0})", uinfo.ownerPuid);
            DbgWriteLine("\tQueued: " + uinfo.queued);
            DbgWriteLine("\tServer: " + uinfo.server);

            UserSubInfo[] subs;
            ret = UodbWS.GetUserSubs(Puid, out subs);
            if (ret)
            {
                foreach (UserSubInfo sub in subs)
                {
                    DbgWriteLine("\tSubscription: 0x{0:X} {1} {2} {3}", sub.offerId, sub.friendlyName, sub.serviceInstanceId, sub.subStatus);
                }
            }
            else
            {
                DbgWriteLine("\tNo user subscription found.");
            }
        }

        private void DumpCCInfo(Owner owner)
        {
            DbgWriteLine("\tCredit Card Type: " + owner.cardTypeId);
            DbgWriteLine("\tCredit Card Holder: " + owner.cardHolder);
            DbgWriteLine("\tCredit Card Number: " + owner.cardNumber);
            DbgWriteLine("\tCredit Card Expiration: " + owner.cardExpiration);
        }

        private void DumpCCInfo(XeUser user)
        {
            DbgWriteLine("\tCredit Card Type: " + user.CreditCardInfo.CardType);
            DbgWriteLine("\tCredit Card Holder: " + user.CreditCardInfo.AccountHolderName);
            DbgWriteLine("\tCredit Card Number: " + user.CreditCardInfo.AccountNumber);
            DbgWriteLine("\tCredit Card Expiration: " + user.CreditCardInfo.ExpirationDate.ToString());
        }

        private void DumpPassportInfo(PassportUser ppUser)
        {
            System.Diagnostics.Debug.Assert(ppUser != null, "DumpPassportInfo can only be called for real Passport users.");
            DbgWriteLine("\tPassport User Puid: 0x{0:X} ({0})", ppUser.PassportPuid);
            DbgWriteLine("\tPassport Member Name: " + ppUser.MemberName);
            DbgWriteLine("\tPassport Password: " + ppUser.Password);
        }

        private void DumpPassportInfo(PassportInfo ppInfo)
        {
            System.Diagnostics.Debug.Assert(ppInfo != null, "DumpPassportInfo can only be called for real Passport users.");
            DbgWriteLine("\tPassport User Puid: 0x{0:X} ({0})", ppInfo.PassportPuid);
            DbgWriteLine("\tPassport Member Name: " + ppInfo.MemberName);
            DbgWriteLine("\tPassport Password: " + ppInfo.Password);
        }

        private void DumpPassportInfo(XeUser user)
        {
            DbgWriteLine("\tPassport User Puid: 0x{0:X} ({0})", user.PassportUserPuid);
            DbgWriteLine("\tPassport Member Name: " + user.PassportMemberName);
            DbgWriteLine("\tPassport Password: as13as13!!we421");
        }

        static public string CountryIdToString(XeUser.Country countryId)
        {
            string countryStr = string.Empty;
            countryStr += "country: ";
            switch (countryId)
            {
                case XeUser.Country.AT:
                    countryStr += "Austria";
                    break;
                case XeUser.Country.AU:
                    countryStr += "Australia";
                    break;
                case XeUser.Country.BE:
                    countryStr += "Belgium";
                    break;
                case XeUser.Country.CA:
                    countryStr += "Canada";
                    break;
                case XeUser.Country.CH:
                    countryStr += "Switzland";
                    break;
                case XeUser.Country.CO:
                    countryStr += "Columbia";
                    break;
                case XeUser.Country.DE:
                    countryStr += "Germany";
                    break;
                case XeUser.Country.DK:
                    countryStr += "Denmark";
                    break;
                case XeUser.Country.ES:
                    countryStr += "Spain";
                    break;
                case XeUser.Country.FI:
                    countryStr += "Finland";
                    break;
                case XeUser.Country.FR:
                    countryStr += "France";
                    break;
                case XeUser.Country.GB:
                    countryStr += "Great Britain";
                    break;
                case XeUser.Country.GR:
                    countryStr += "Greece";
                    break;
                case XeUser.Country.HK:
                    countryStr += "Hong Kong";
                    break;
                case XeUser.Country.IE:
                    countryStr += "Ireland";
                    break;
                case XeUser.Country.IT:
                    countryStr += "Italy";
                    break;
                case XeUser.Country.JP:
                    countryStr += "Japan";
                    break;
                case XeUser.Country.KR:
                    countryStr += "Korea";
                    break;
                case XeUser.Country.MX:
                    countryStr += "Mexico";
                    break;
                case XeUser.Country.NL:
                    countryStr += "Netherlands";
                    break;
                case XeUser.Country.NO:
                    countryStr += "Norway";
                    break;
                case XeUser.Country.NZ:
                    countryStr += "New Zealand";
                    break;
                case XeUser.Country.PT:
                    countryStr += "Portugal";
                    break;
                case XeUser.Country.SE:
                    countryStr += "Sweden";
                    break;
                case XeUser.Country.SG:
                    countryStr += "Singapore";
                    break;
                case XeUser.Country.TW:
                    countryStr += "Taiwan";
                    break;
                case XeUser.Country.US:
                    countryStr += "United States";
                    break;
                default:
                    countryStr += "Unknown";
                    break;
            }
            return countryStr;
        }

        public List<XblUser> GetEachUserType()
        {
            List<XblUser> users = new List<XblUser>();
            foreach (string userTypeString in Enum.GetNames(typeof(UserType)))
            {
                UserType userType = (UserType)Enum.Parse(typeof(UserType), userTypeString);

                Global.RO.Debug("Creating a " + userTypeString + " user.");
                XblUser user = CreateUser(userType);
                users.Add(user);
            }
            return(users);
        }

        public void UpdateXboxComActivity(XblUser user)
        {
            XRLXeUpdateXboxComActivity request = new XRLXeUpdateXboxComActivity();
            request.UserPuid = user.Puid;

            if (!request.Execute())
            {
                throw new Exception("XeUpdateXboxComActivity failed: " + request.GetDumpString());
            }
            if (request.XErr != HResult.S_OK)
            {
                throw new Exception(String.Format("XeUpdateXboxComActivity returned XErr = 0x{0:x}", request.XErr));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\UacsProtocolClasses.cs ===
using System;
using System.Net;
using System.IO;
using System.Text;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
    public class AddressInfoData : XRLPayload
    {
        public ushort Street1Length = 0;
        [WireInfo(SizeParam="Street1Length")]
        public string Street1;
        public ushort Street2Length = 0;
        [WireInfo(SizeParam="Street2Length")]
        public string Street2;
        public ushort CityLength = 0;
        [WireInfo(SizeParam="CityLength")]
        public string City;
        public ushort DistrictLength = 0;
        [WireInfo(SizeParam="DistrictLength")]
        public string District;
        public ushort StateLength = 0;
        [WireInfo(SizeParam="StateLength")]
        public string State;
        public ushort PostalCodeLength = 0;
        [WireInfo(SizeParam="PostalCodeLength")]
        public string PostalCode;

        // igore all length fields and any fields in XRLPayload
        public string Compare(AddressInfoData other)
        {
            StringBuilder sRet = new StringBuilder();
            if (this.Street1 != other.Street1)
            {
                if (!string.IsNullOrEmpty(this.Street1) || !string.IsNullOrEmpty(other.Street1))
                    sRet.Append(string.Format("First.Street1 = {0}, Second.Street1 = {1}\r\n", this.Street1, other.Street1));
            }
            if (this.Street2 != other.Street2)
            {
                if (!string.IsNullOrEmpty(this.Street2) || !string.IsNullOrEmpty(other.Street2))
                    sRet.Append(string.Format("First.Street2 = {0}, Second.Street2 = {1}\r\n", this.Street2, other.Street2));
            }
            if (this.City != other.City)
            {
                if (!string.IsNullOrEmpty(this.City) || !string.IsNullOrEmpty(other.City))
                    sRet.Append(string.Format("First.City = {0}, Second.City = {1}\r\n", this.City, other.City));
            }
            if (this.District != other.District)
            {
                if (!string.IsNullOrEmpty(this.District) || !string.IsNullOrEmpty(other.District))
                    sRet.Append(string.Format("First.District = {0}, Second.District = {1}\r\n", this.District, other.District));
            }
            if (this.State != other.State)
            {
                if (!string.IsNullOrEmpty(this.State) || !string.IsNullOrEmpty(other.State))
                    sRet.Append(string.Format("First.State = {0}, Second.State = {1}\r\n", this.State, other.State));
            }
            if (this.PostalCode != other.PostalCode)
            {
                if (!string.IsNullOrEmpty(this.PostalCode) || !string.IsNullOrEmpty(other.PostalCode))
                    sRet.Append(string.Format("First.PostalCode = {0}, Second.PostalCode = {1}\r\n", this.PostalCode, other.PostalCode));
            }
            if (sRet.Length > 0)
                sRet.Insert(0, "AddressInfoData:\r\n");
            return sRet.ToString();
        }

        public void SetDefaultAddress(XeUser.Country countryCode)
        {
            switch(countryCode)
            {
                case XeUser.Country.AE: // UAE
                case XeUser.Country.AT:
                    Street1="9931 Lovely Lane NE";
                    City="Vienna";
                    PostalCode="1030";
                    State = "";
                    break;
                case XeUser.Country.AU: // Australia
                    Street1="9931 Lovely Lane NE";
                    City="Brighton";
                    PostalCode="3186";
                    State="VIC";
                    break;
                case XeUser.Country.BE: // Belgium
                    Street1="9931 Lovely Lane NE";
                    City="Brussels";
                    PostalCode="1000";
                    break;
                case XeUser.Country.BR: // Brazil
                    Street1="9931 Lovely Lane NE";
                    City="Sao Paulo";
                    PostalCode="07141-970";
                    break;
                case XeUser.Country.CA: // Canada
                    Street1="9931 Lovely Lane NE";
                    City="Victoria";
                    PostalCode="V8W 9W2";
                    State="BC";
                    break;
                case XeUser.Country.CH: // Switzerland
                    Street1="9931 Lovely Lane NE";
                    City="Weinfelden";
                    PostalCode="8570";
                    State="TG";
                    break;
                case XeUser.Country.CL: // Chile
                    Street1 = "9931 Lovely Lane NE";
                    City = "Santiago";
                    PostalCode = "8340457";
                    State = "";
                    break;
                case XeUser.Country.CO: // Colombia
                    Street1="9931 Lovely Lane NE";
                    City = "Medellin";
                    PostalCode = "";
                    State = "";
                    break;
                case XeUser.Country.CN: // China
                    Street1 = "9931 Lovely Lane NE";
                    City = "BeiJing";
                    PostalCode = "100001";
                    State = "";
                    break;
                case XeUser.Country.CZ: // Czech Republic
                    Street1="9931 Lovely Lane NE";
                    City = "Prague";
                    PostalCode = "109 99";
                    State = "";
                    break;
                case XeUser.Country.DE: // Germany
                    Street1="9931 Lovely Lane NE";
                    City="BERLIN";
                    PostalCode="22767";
                    State="";
                    break;
                case XeUser.Country.DK: // Denmark
                    Street1="9931 Lovely Lane NE";
                    City="Kbenhavn K";
                    PostalCode="1202";
                    State = "";
                    break;
                case XeUser.Country.ES: // Spain
                    Street1="9931 Lovely Lane NE";
                    City="Barcelona";
                    PostalCode="08007";
                    State = "";
                    break;
                case XeUser.Country.FI: // Finland
                    Street1="9931 Lovely Lane NE";
                    City="Helsinki";
                    PostalCode="00100";
                    State = "";
                    break;
                case XeUser.Country.FR: // France
                    Street1="9931 Lovely Lane NE";
                    City="CABOURG";
                    PostalCode="14390";
                    State="";
                    break;
                case XeUser.Country.GR: // Greece
                    Street1="9931 Lovely Lane NE";
                    City = "Thessaloniki";
                    PostalCode = "575 00";
                    State = "";
                    break;
                case XeUser.Country.HK: // Hong Kong
                    Street1="9931 Lovely Lane NE";
                    City = "Wanchai";
                    PostalCode = "";
                    State = "";
                    break;
                case XeUser.Country.HU: // Hungary
                    Street1="9931 Lovely Lane NE";
                    City = "Budapest";
                    PostalCode = "1111";
                    State = "";
                    break;
                case XeUser.Country.IE: // Ireland
                    Street1="9931 Lovely Lane NE";
                    City="Banagher-on-the-Shannon";
                    PostalCode="";
                    State = "";
                    break;
                case XeUser.Country.IN:  // India
                    Street1 = "9931 Lovely Lane NE";
                    City = "Gurgaon";
                    PostalCode = "122002";
                    State = "";
                    break;
                case XeUser.Country.IT: // Italy
                    Street1="9931 Lovely Lane NE";
                    City="Bologna";
                    PostalCode="40053";
                    State = "";
                    break;
                case XeUser.Country.JP: // Japan
                    Street1="9931 Lovely Lane NE";
                    City="Shibuya-ku";
                    PostalCode="151-8543";
                    State="Tokyo";
                    break;
                case XeUser.Country.KR: // Korea
                    Street1="9931 Lovely Lane NE";
                    City="Seoul";
                    State="";
                    PostalCode="135-080";
                    break;
                case XeUser.Country.MX: // Mexico
                    Street1="9931 Lovely Lane NE";
                    City = "Mxico City";
                    PostalCode = "11580";
                    State = "Col. Polanco";
                    break;
                case XeUser.Country.NL: // Netherlands
                    Street1="9931 Lovely Lane NE";
                    City="AMSTERDAM";
                    PostalCode="1012 RC";
                    State = "";
                    break;
                case XeUser.Country.NO: // Norway
                    Street1="9931 Lovely Lane NE";
                    City="Oslo";
                    PostalCode="0980";
                    State="";
                    break;
                case XeUser.Country.NZ: // New Zealand
                    Street1="9931 Lovely Lane NE";
                    City = "Aukland";
                    PostalCode = "";
                    State = "";
                    break;
                case XeUser.Country.PL: // Poland
                    Street1="9931 Lovely Lane NE";
                    City = "Warsaw";
                    PostalCode = "00-540";
                    State = "";
                    break;
                case XeUser.Country.PT: // Portugal
                    Street1="9931 Lovely Lane NE";
                    City = "Lisboa";
                    PostalCode = "1250-096";
                    State = "";
                    break;
                case XeUser.Country.RU: // Russia
                    Street1="9931 Lovely Lane NE";
                    City = "Moscow";
                    PostalCode = "113035";
                    State = "";
                    break;
                case XeUser.Country.SE: // Sweden
                    Street1="9931 Lovely Lane NE";
                    City="Jukkasjrvi";
                    PostalCode="981 91";
                    State = "";
                    break;
                case XeUser.Country.SG: // Singapore
                    Street1="9931 Lovely Lane NE";
                    City = "Singapore";
                    PostalCode = "179803";
                    State = "";
                    break;
                case XeUser.Country.TW: // Taiwan
                    Street1="9931 Lovely Lane NE";
                    City = "Taipei";
                    PostalCode = "110";
                    State = "";
                    break;
                case XeUser.Country.GB: // UK
                    Street1="9931 Lovely Lane NE";
                    City="London";
                    PostalCode="EC1Y 8SY";
                    State="";
                    break;
                case XeUser.Country.US:
                    Street1="9931 Lovely Lane NE";
                    City="Redmond";
                    PostalCode="98052";
                    State="WA";
                    break;
                case XeUser.Country.ZA: // South Africa
                    Street1="9931 Lovely Lane NE";
                    City="Cape Town";
                    PostalCode="7800";
                    State="";
                    break;
                default:
                    throw new Exception("AddressInfoData.SetDefaultAddress doesn't know how to generate a CC "+countryCode+" account!");
            }
        }
    }

    public class PhoneInfoData : XRLPayload
    {
        public ushort PhonePrefixLength;
        [WireInfo(SizeParam="PhonePrefixLength")]
        public string PhonePrefix;
        public ushort PhoneNumberLength;
        [WireInfo(SizeParam="PhoneNumberLength")]
        public string PhoneNumber;
        public ushort PhoneExtensionLength;
        [WireInfo(SizeParam="PhoneExtensionLength")]
        public string PhoneExtension;

         // igore all length fields and any fields in XRLPayload
        public string Compare(PhoneInfoData other)
        {
            StringBuilder sRet = new StringBuilder();
            if (this.PhonePrefix != other.PhonePrefix)
            {
                sRet.Append(string.Format("First.PhonePrefix = {0}, Second.PhonePrefix = {1}\r\n", this.PhonePrefix, other.PhonePrefix));
            }
            if (this.PhoneNumber != other.PhoneNumber)
            {
                sRet.Append(string.Format("First.PhoneNumber = {0}, Second.PhoneNumber = {1}\r\n", this.PhoneNumber, other.PhoneNumber));
            }
            if (this.PhoneExtension != other.PhoneExtension)
            {
                sRet.Append(string.Format("First.PhoneExtension = {0}, Second.PhoneExtension = {1}\r\n", this.PhoneExtension, other.PhoneExtension));
            }
            if (sRet.Length > 0)
                sRet.Insert(0, "PhoneInfoData:\r\n");
            return sRet.ToString();
        }
    }

    public class CreditCardInfoData : XRLPayload
    {
        public enum CreditCardType
        {
            Visa            = 0,
            MasterCard      = 1,
            AmEx            = 2,
            Discover        = 3,
            JCB             = 4,
            Diners          = 5,
            KLCC            = 6
        };

        public byte     CardType;
        public ushort   AccountHolderNameLength = 0;
        [WireInfo(SizeParam="AccountHolderNameLength")]
        public string   AccountHolderName;
        public ushort   AccountNumberLength = 0;
        [WireInfo(SizeParam="AccountNumberLength")]
        public string   AccountNumber;
        public ushort   CcvNumberLength = 0;
        [WireInfo(SizeParam="CcvNumberLength")]
        public string   CcvNumber;
        public DateTime ExpirationDate = DateTime.UtcNow.AddYears(2);

        // igore all length fields and any fields in XRLPayload
        public string Compare(CreditCardInfoData other, bool bUpdatePi)
        {
            StringBuilder sRet = new StringBuilder();

            // as part of the credit card payment instrument all that we can update is the accountholdername and the expirationdate
            if (!bUpdatePi && (this.CardType != other.CardType))
            {
                sRet.Append(string.Format("First.CardType = {0}, Second.CardType = {1}\r\n", this.CardType, other.CardType));
            }
            // only compare the last four digits
            if (!bUpdatePi && (this.AccountNumber.Substring(this.AccountNumber.Length - 4) != other.AccountNumber.Substring(other.AccountNumber.Length - 4)))
            {
                sRet.Append(string.Format("First.AccountNumber = {0}, Second.AccountNumber = {1}\r\n", this.AccountNumber, other.AccountNumber));
            }
            /* comment out since SCG does not support Ccv number currently
            if (this.CcvNumber != other.CcvNumber)
            {
                sRet.Append(string.Format("First.CcvNumber = {0}, Second.CcvNumber = {1}\r\n", this.CcvNumber, other.CcvNumber));
            }
            */
            if (this.AccountHolderName != other.AccountHolderName)
            {
                sRet.Append(string.Format("First.AccountHolderName = {0}, Second.AccountHolderName = {1}\r\n", this.AccountHolderName, other.AccountHolderName));
            }
            if (this.ExpirationDate.ToString("yyyy-MM") != other.ExpirationDate.ToString("yyyy-MM"))
            {
                sRet.Append(string.Format("First.ExpirationDate = {0}, Second.ExpirationDate = {1}\r\n", this.ExpirationDate, other.ExpirationDate));
            }
            if (sRet.Length > 0)
                sRet.Insert(0, "CreditCardInfoData:\r\n");
            return sRet.ToString();
        }
    }

    public class DirectDebitInfoData : XRLPayload
    {
        public ushort   AccountHolderNameLength = 0;
        [WireInfo(SizeParam="AccountHolderNameLength")]
        public string   AccountHolderName;
        public ushort   AccountNumberLength = 0;
        [WireInfo(SizeParam="AccountNumberLength")]
        public string   AccountNumber;
        public ushort   BankCodeLength;
        [WireInfo(SizeParam="BankCodeLength")]
        public string   BankCode;
        public ushort   BranchCodeLength;
        [WireInfo(SizeParam="BranchCodeLength")]
        public string   BranchCode;
        public ushort   CheckDigitsLength;
        [WireInfo(SizeParam="CheckDigitsLength")]
        public string   CheckDigits;

        // igore all length fields and any fields in XRLPayload
        public string Compare(DirectDebitInfoData other, bool bUpdatePi)
        {
            StringBuilder sRet = new StringBuilder();

            // as part of the direct debit payment instrument all that we can update is the accountholdername, bankcode and checkdigits
            if (!bUpdatePi && (this.AccountNumber != other.AccountNumber))
            {
                sRet.Append(string.Format("First.AccountNumber = {0}, Second.AccountNumber = {1}\r\n", this.AccountNumber, other.AccountNumber));
            }
            if (!bUpdatePi && (this.BranchCode != other.BranchCode))
            {
                sRet.Append(string.Format("First.BranchCode = {0}, Second.BranchCode = {1}\r\n", this.BranchCode, other.BranchCode));
            }
            if (this.AccountHolderName != other.AccountHolderName)
            {
                sRet.Append(string.Format("First.AccountHolderName = {0}, Second.AccountHolderName = {1}\r\n", this.AccountHolderName, other.AccountHolderName));
            }
            if (this.BankCode != other.BankCode)
            {
                sRet.Append(string.Format("First.BankCode = {0}, Second.BankCode = {1}\r\n", this.BankCode, other.BankCode));
            }
            if (this.CheckDigits != other.CheckDigits)
            {
                sRet.Append(string.Format("First.CheckDigits = {0}, Second.CheckDigits = {1}\r\n", this.CheckDigits, other.CheckDigits));
            }
            if (sRet.Length > 0)
                sRet.Insert(0, "DirectDebitInfoData:\r\n");
            return sRet.ToString();
        }
    }

    public class WholesaleInfoData : XRLPayload {
        public ushort AccountHolderNameLength = 0;

        [WireInfo(SizeParam = "AccountHolderNameLength")]
        public string AccountHolderName = "";

        public ushort ExternalReferenceIdLength = 0;
        [WireInfo(SizeParam = "ExternalReferenceIdLength")]
        public string ExternalReferenceId = "";

        public ushort WholesalePartnerLength = 0;
        [WireInfo(SizeParam = "WholesalePartnerLength")]
        public string WholesalePartner = "";

        public ushort EncryptedPasswordLength = 0;
        [WireInfo(SizeParam = "EncryptedPasswordLength")]
        public string EncryptedPassword = "";
        // igore all length fields and any fields in XRLPayload

        public string Compare(WholesaleInfoData other, bool bUpdatePi)
        {
            StringBuilder sRet = new StringBuilder();

            // as part of the direct debit payment instrument all that we can update is the accountholdername, bankcode and checkdigits
            if (this.AccountHolderName != other.AccountHolderName)
            {
                sRet.Append(string.Format("First.AccountHolderName = {0}, Second.AccountHolderName = {1}\r\n", this.AccountHolderName, other.AccountHolderName));
            }
            if (this.ExternalReferenceId != other.ExternalReferenceId)
            {
                sRet.Append(string.Format("First.ExternalReferenceId = {0}, Second.ExternalReferenceId = {1}\r\n", this.ExternalReferenceId, other.ExternalReferenceId));
            }
            if (this.WholesalePartnerLength != other.WholesalePartnerLength)
            {
                sRet.Append(string.Format("First.WholesalePartnerLength = {0}, Second.WholesalePartnerLength = {1}\r\n", this.WholesalePartnerLength, other.WholesalePartnerLength));
            }
            if (this.EncryptedPassword != other.EncryptedPassword)
            {
                sRet.Append(string.Format("First.EncryptedPassword = {0}, Second.EncryptedPassword = {1}\r\n", this.EncryptedPassword, other.EncryptedPassword));
            }
            if (sRet.Length > 0)
                sRet.Insert(0, "WholesaleInfoData:\r\n");
            return sRet.ToString();
        }
    }

    public class BillingAgreementDetails : XRLPayload
    {
        public ushort payerEmailLength;

        [WireInfo(SizeParam = "payerEmailLength")]
        public string payerEmail;

        public ushort billingAgreementIdLength;

        [WireInfo(SizeParam = "billingAgreementIdLength")]
        public string billingAgreementId;

        public ushort firstNameLength;

        [WireInfo(SizeParam = "firstNameLength")]
        public string firstName;

        public ushort lastNameLength;

        [WireInfo(SizeParam = "lastNameLength")]
        public string lastName;

        public ushort middleNameLength;

        [WireInfo(SizeParam = "middleNameLength")]
        public string middleName;

        public ushort payerBusinessLength;

        [WireInfo(SizeParam = "payerBusinessLength")]
        public string payerBusiness;

        public ushort payerCountryLength;

        [WireInfo(SizeParam = "payerCountryLength")]
        public string payerCountry;

        public ushort billingAgreementDescriptionLength;

        [WireInfo(SizeParam = "billingAgreementDescriptionLength")]
        public string billingAgreementDescription;
    }

    public class PayPalPayinInfoData : XRLPayload
    {
        public PayPalPayinInfoData()
        {
            billingAgreementDetails = new BillingAgreementDetails();
        }

        public BillingAgreementDetails billingAgreementDetails;


        // igore all length fields and any fields in XRLPayload
        public string Compare(PayPalPayinInfoData other, bool bUpdatePi)
        {
            StringBuilder sRet = new StringBuilder();

            if (!bUpdatePi && (this.billingAgreementDetails.payerEmail != other.billingAgreementDetails.payerEmail))
            {
                sRet.Append(string.Format("First.payerEmail = {0}, Second.payerEmail = {1}\r\n", this.billingAgreementDetails.payerEmail, other.billingAgreementDetails.payerEmail));
            }
            if (!bUpdatePi && (this.billingAgreementDetails.billingAgreementId != other.billingAgreementDetails.billingAgreementId))
            {
                sRet.Append(string.Format("First.billingAgreementId = {0}, Second.billingAgreementId = {1}\r\n", this.billingAgreementDetails.billingAgreementId, other.billingAgreementDetails.billingAgreementId));
            }
            if (this.billingAgreementDetails.firstName != other.billingAgreementDetails.firstName)
            {
                sRet.Append(string.Format("First.firstName = {0}, Second.firstName = {1}\r\n", this.billingAgreementDetails.firstName, other.billingAgreementDetails.firstName));
            }
            if (this.billingAgreementDetails.lastName != other.billingAgreementDetails.lastName)
            {
                sRet.Append(string.Format("First.lastName = {0}, Second.lastName = {1}\r\n", this.billingAgreementDetails.lastName, other.billingAgreementDetails.lastName));
            }
            if (this.billingAgreementDetails.middleName != other.billingAgreementDetails.middleName)
            {
                sRet.Append(string.Format("First.middleName = {0}, Second.middleName = {1}\r\n", this.billingAgreementDetails.middleName, other.billingAgreementDetails.middleName));
            }
            if (this.billingAgreementDetails.payerBusiness != other.billingAgreementDetails.payerBusiness)
            {
                sRet.Append(string.Format("First.payerBusiness = {0}, Second.payerBusiness = {1}\r\n", this.billingAgreementDetails.payerBusiness, other.billingAgreementDetails.payerBusiness));
            }
            if (this.billingAgreementDetails.payerCountry != other.billingAgreementDetails.payerCountry)
            {
                sRet.Append(string.Format("First.payerCountry = {0}, Second.payerCountry = {1}\r\n", this.billingAgreementDetails.payerCountry, other.billingAgreementDetails.payerCountry));
            }
            if (this.billingAgreementDetails.billingAgreementDescription != other.billingAgreementDetails.billingAgreementDescription)
            {
                sRet.Append(string.Format("First.billingAgreementDescription = {0}, Second.billingAgreementDescription = {1}\r\n", this.billingAgreementDetails.billingAgreementDescription, other.billingAgreementDetails.billingAgreementDescription));
            }

            if (sRet.Length > 0)
                sRet.Insert(0, "PayPalPayinInfoData:\r\n");
            return sRet.ToString();
        }
    }

    public class PaymentInstrumentInfo : XRLPayload
    {
        public ushort PaymentInstrumentIdLength;
        [WireInfo(SizeParam="PaymentInstrumentIdLength")]
        public string PaymentInstrumentId;
        public byte   PaymentInstrumentType;
        public byte   CreditCardType;
        public ushort AccountNumberLastFourLength;
        [WireInfo(SizeParam="AccountNumberLastFourLength")]
        public string AccountNumberLastFour;

        // igore all length fields and any fields in XRLPayload
        public string Compare(PaymentInstrumentInfo other)
        {
            StringBuilder sRet = new StringBuilder();
            if (this.PaymentInstrumentId != other.PaymentInstrumentId)
            {
                sRet.Append(string.Format("First.PaymentInstrumentId = {0}, Second.PaymentInstrumentId = {1}\r\n", this.PaymentInstrumentId, other.PaymentInstrumentId));
            }
            if (this.PaymentInstrumentType != other.PaymentInstrumentType)
            {
                sRet.Append(string.Format("First.PaymentInstrumentType = {0}, Second.PaymentInstrumentType = {1}\r\n", this.PaymentInstrumentType, other.PaymentInstrumentType));
            }
            if (this.CreditCardType != other.CreditCardType)
            {
                sRet.Append(string.Format("First.CreditCardType = {0}, Second.CreditCardType = {1}\r\n", this.CreditCardType, other.CreditCardType));
            }
            if (this.AccountNumberLastFour != other.AccountNumberLastFour)
            {
                sRet.Append(string.Format("First.AccountNumberLastFour = {0}, Second.AccountNumberLastFour = {1}\r\n", this.AccountNumberLastFour, other.AccountNumberLastFour));
            }
            if (sRet.Length > 0)
                sRet.Insert(0, "PaymentInstrumentInfo:\r\n");
            return sRet.ToString();
        }
    }

    public class PaymentInstrumentInfoEx : XRLPayload
    {
        public enum PaymentInstrumentTypeEnum
        {
            None            = 0,
            CreditCard      = 1,
            DirectDebit     = 2,
            Wholesale       = 3
        };

        public ushort              PaymentInstrumentIdLength = 0;
        [WireInfo(SizeParam="PaymentInstrumentIdLength")]
        public string              PaymentInstrumentId;
        public byte                PaymentInstrumentType = 0;
        public AddressInfoData     AddressInfo;
        public PhoneInfoData       PhoneInfo;
        public CreditCardInfoData  CreditCardInfo;
        public DirectDebitInfoData DirectDebitInfo;

        [WireInfo(MinSchemaVersion = "3.3")]
        public WholesaleInfoData wholesaleInfo;

        [WireInfo(MinSchemaVersion = "5.4")]
        public PayPalPayinInfoData PayPalPayinInfo;

        // igore all length fields and any fields in XRLPayload
        public string Compare(PaymentInstrumentInfoEx other, bool bUpdatePi)
        {
            StringBuilder sRet = new StringBuilder();
            String sComp = "";
            if (this.PaymentInstrumentId != other.PaymentInstrumentId)
            {
                sRet.Append(string.Format("First.PaymentInstrumentId = {0}, Second.PaymentInstrumentId = {1}\r\n", this.PaymentInstrumentId, other.PaymentInstrumentId));
            }
            if (this.PaymentInstrumentType != other.PaymentInstrumentType)
            {
                sRet.Append(string.Format("First.PaymentInstrumentType = {0}, Second.PaymentInstrumentType = {1}\r\n", this.PaymentInstrumentType, other.PaymentInstrumentType));
            }

            if (this.AddressInfo == null || other.AddressInfo == null)
            {
                if (!(this.AddressInfo == null && other.AddressInfo == null))
                {
                    sRet.Append("AddressInfoData: Different -  one is null.\r\n");
                }
            }
            else if ((sComp = this.AddressInfo.Compare(other.AddressInfo)).Length > 0)
            {
                sRet.Append(sComp);
            }

            if (this.PhoneInfo == null || other.PhoneInfo == null)
            {
                if (!(this.PhoneInfo == null && other.PhoneInfo == null))
                {
                    sRet.Append("PhoneInfo: Different -  one is null.\r\n");
                }
            }
            else if ((sComp = this.PhoneInfo.Compare(other.PhoneInfo)).Length > 0)
            {
                sRet.Append(sComp);
            }

            if (this.CreditCardInfo == null || other.CreditCardInfo == null)
            {
                if (!(this.CreditCardInfo == null && other.CreditCardInfo == null))
                {
                    sRet.Append("CreditCardInfo: Different -  one is null.\r\n");
                }
            }
            else if ((sComp = this.CreditCardInfo.Compare(other.CreditCardInfo, bUpdatePi)).Length > 0)
            {
                sRet.Append(sComp);
            }

            if (this.DirectDebitInfo == null || other.DirectDebitInfo == null)
            {
                if (!(this.DirectDebitInfo == null && other.DirectDebitInfo == null))
                {
                    sRet.Append("DirectDebitInfo: Different -  one is null.\r\n");
                }
            }
            else if ((sComp = this.DirectDebitInfo.Compare(other.DirectDebitInfo, bUpdatePi)).Length > 0)
            {
                sRet.Append(sComp);
            }


            if (this.PayPalPayinInfo == null || other.PayPalPayinInfo == null)
            {
                if (!(this.PayPalPayinInfo == null && other.PayPalPayinInfo == null))
                {
                    sRet.Append("PayPalPayinInfo: Different -  one is null.\r\n");
                }
            }
            else if ((sComp = this.PayPalPayinInfo.Compare(other.PayPalPayinInfo, bUpdatePi)).Length > 0)
            {
                sRet.Append(sComp);
            }


            if (sRet.Length > 0)
                sRet.Insert(0, "PaymentInstrumentInfoEx:\r\n");
            return sRet.ToString();
        }
   }

    public class CreditCardInfoDataEx : XRLPayload
    {
        public byte CardType;

        public ushort AccountHolderNameLength = 0;

        [WireInfo( SizeParam = "AccountHolderNameLength" )]
        public string AccountHolderName = "";

        public ushort AccountNumberLength = 0;

        [WireInfo( SizeParam = "AccountNumberLength" )]
        public string EncryptedAccountNumber = "";

        public ushort LastFourAccountNumberLength = 0;

        [WireInfo( SizeParam = "LastFourAccountNumberLength" )]
        public string LastFourAccountNumber = "";

        public ushort CcvNumberLength = 0;
        [WireInfo( SizeParam = "CcvNumberLength" )]
        public string EncryptedCcvNumber = "";

        public DateTime ExpirationDate = new DateTime( 2001, 11, 15 );

    }

    public class DirectDebitInfoDataEx : XRLPayload
    {
        public ushort AccountHolderNameLength = 0;

        [WireInfo( SizeParam = "AccountHolderNameLength" )]
        public string AccountHolderName = "";

        public ushort AccountNumberLength = 0;

        [WireInfo( SizeParam = "AccountNumberLength" )]
        public string EncryptedAccountNumber = "";

        public ushort LastFourAccountNumberLength = 0;

        [WireInfo( SizeParam = "LastFourAccountNumberLength" )]
        public string LastFourAccountNumber = "";

        [WireInfo( Min = 0, Max = XOn.MAX_BANK_CODE_SIZE * XOn.UTF8_MULT )]
        public ushort BankCodeLength;

        [WireInfo( SizeParam = "BankCodeLength" )]
        public string BankCode = "";

        [WireInfo( Min = 0, Max = XOn.MAX_BRANCH_CODE_SIZE * XOn.UTF8_MULT )]
        public ushort BranchCodeLength;

        [WireInfo( SizeParam = "BranchCodeLength" )]
        public string BranchCode = "";

        [WireInfo( Min = 0, Max = XOn.MAX_CHECK_DIGITS_SIZE )]
        public ushort CheckDigitsLength;

        [WireInfo( SizeParam = "CheckDigitsLength" )]
        public string CheckDigits = "";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\UacsCommonAccountCreation.cs ===
using System;
using System.IO;
using System.Threading;
using ServerTestFramework;
using System.Collections;
using System.DirectoryServices;

using ServerTestFramework.WebWidget;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.UserAccount.WebService2;

namespace ServerTestFramework.LiveService.UserAccount
{
    /// <summary>
    /// This class provides common UACS functionality related to XeUser creation;
    /// </summary>
    public partial class UacsCommon
    {
        public static string CreatePassportMember()
        {
            return ( ( new UacsCommon() ).CreatePassportUser( null, (byte)XeUser.Country.US ) ).MemberName;
        }

        public class XeUserCreationHelper
        {
            public enum XeUserCreationTier : int
            {
                XboxLiveSilver = 3,
                XboxLiveGold = 6
            }

            public static XeUser CreateXeSilverUser()
            {
                return CreateXeSilverUser( XeUser.Country.US, XeUser.Language.en );
            }

            public static XeUser CreateXeSilverUser( XeUser.Country countryId )
            {
                ushort languageId = CountryLanguage.GetFirstLanguageFromCountry( (byte)countryId );
                return CreateXeSilverUser( countryId, (XeUser.Language)languageId );
            }

            public static XeUser CreateXeSilverUser( XeUser.Country countryId, XeUser.Language languageId )
            {
                XeUser user = XeUserCreator.CreateXeUser( countryId, languageId );
                if ( user.UserPuid == 0 ) throw new UnexpectedTestResultException( "XeUser.Create() failed." );
                Global.RO.Info( "User 0x{0:X} ({1}) created.", user.UserPuid, user.Gamertag );

                return user;
            }

            public static XeUser CreateXeGoldUser()
            {
                return CreateGoldPPUser( XeUser.Country.US, XeUser.Language.en, Offers.BaseOffers.GoldPP1Year, false );
            }

            public static XeUser CreateGoldPPUser()
            {
                return CreateGoldPPUser( XeUser.Country.US, XeUser.Language.en, Offers.BaseOffers.GoldPP1Month, false );
            }

            public static XeUser CreateGoldPPUser( XeUser.Country countryId )
            {
                ushort languageId = CountryLanguage.GetFirstLanguageFromCountry( (byte)countryId );
                return CreateGoldPPUser( countryId, (XeUser.Language)languageId, Offers.BaseOffers.GoldPP1Year, false );
            }

            public static XeUser CreateGoldPPUser( Offers.BaseOffers offer, bool waitForCallbackCompletion )
            {
                return CreateGoldPPUser( XeUser.Country.US, XeUser.Language.en, offer, waitForCallbackCompletion );
            }

            public static XeUser CreateGoldPPUser( XeUser.Country countryId, XeUser.Language languageId, Offers.BaseOffers offer, bool waitForCallbackCompletion )
            {
                XeUser user = XeUserCreator.CreateXeUser( countryId, languageId );
                if ( user.UserPuid == 0 ) throw new UnexpectedTestResultException( "XeUser.Create() failed." );
                Global.RO.Info( "User 0x{0:X} ({1}) created.", user.UserPuid, user.Gamertag );

                UacsCommon.PurchaseTokenOffer( user, offer );
                UodbWS.WaitForQueueRemoval( user.UserPuid, waitForCallbackCompletion, UodbWS.GetUsersSubscriptionOfferId( user.UserPuid ) );

                return user;
            }

            public static XeUser CreateGoldCCUser()
            {
                return CreateGoldCCUser( XeUser.Country.US, XeUser.Language.en, Offers.BaseOffers.GoldCC1Month, false );
            }

            public static XeUser CreateGoldCCUser( XeUser.Country countryId )
            {
                ushort languageId = CountryLanguage.GetFirstLanguageFromCountry( (byte)countryId );
                return CreateGoldCCUser( countryId, (XeUser.Language)languageId, Offers.BaseOffers.GoldCC1Month, false );
            }

            public static XeUser CreateGoldCCUser( Offers.BaseOffers offer, bool waitForCallbackCompletion )
            {
                return CreateGoldCCUser( XeUser.Country.US, XeUser.Language.en, offer, waitForCallbackCompletion );
            }

            public static XeUser CreateGoldCCUser( XeUser.Country countryId, XeUser.Language languageId, Offers.BaseOffers offer, bool waitForCallbackCompletion )
            {
                XeUser user = XeUserCreator.CreateXeUser( countryId, languageId );
                if ( user.UserPuid == 0 ) throw new UnexpectedTestResultException( "XeUser.Create() failed." );
                Global.RO.Info( "User 0x{0:X} ({1}) created.", user.UserPuid, user.Gamertag );

                UacsCommon.PurchaseCCOfferPMO( user, offer );
                UodbWS.WaitForQueueRemoval( user.UserPuid, waitForCallbackCompletion, UodbWS.GetUsersSubscriptionOfferId( user.UserPuid ) );

                return user;
            }

            public static XeUser CreateLightWtUser( XeUser.Country countryId )
            {
                XeUser user = XeUserCreator.CreateXeLightWtUser( countryId );
                if ( user.UserPuid == 0 ) throw new UnexpectedTestResultException( "XeUser.Create() failed." );
                Global.RO.Info( "User 0x{0:X} ({1}) created.", user.UserPuid, user.Gamertag );

                return user;
            }

            public static XeUser CreateChildXenonUser( XeUser parent )
            {
                XeUser user = XeUserCreator.CreateMinorXeUser( parent, ParentalControlGroup.Restricted );
                if ( user.UserPuid == 0 ) throw new UnexpectedTestResultException( "Child XeUser.Create() failed for " + parent.UserPuid );
                Global.RO.Info( "Child user 0x{0:x} created with gamertag {1}.", user.UserPuid, user.Gamertag );

                return user;
            }

            public static XeUser CreatePartialChildXenonUser( XeUser parent )
            {
                XeUser user = XeUserCreator.CreatePartialMinorXeUser( parent, ParentalControlGroup.Restricted );
                if ( user.UserPuid == 0 ) throw new UnexpectedTestResultException( "Child XeUser.Create() failed for " + parent.UserPuid );
                Global.RO.Info( "Child user 0x{0:x} created with gamertag {1}.", user.UserPuid, user.Gamertag );

                return user;
            }

            public static XeUser CreateChildXenonUser( XeUser parent, XeUser.Country countryId )
            {
                XeUser user = XeUserCreator.CreateMinorXeUser( parent, ParentalControlGroup.Restricted, countryId );
                if ( user.UserPuid == 0 ) throw new UnexpectedTestResultException( "Child XeUser.Create() failed for " + parent.UserPuid );
                Global.RO.Info( "Child user 0x{0:x} created with gamertag {1}.", user.UserPuid, user.Gamertag );

                return user;
            }

            public static XeUser CreateChildXenonUserWithTier( XeUser parent, XeUserCreationTier tier )
            {
                XeUser user = CreateChildXenonUser( parent );

                if ( tier == XeUserCreationTier.XboxLiveGold )
                {
                    UacsCommon.PurchaseTokenOffer( user, Offers.BaseOffers.GoldPP1Year );
                    UacsCommon.WaitForCSAT( user.UserPuid, false );
                }

                return user;
            }

            public static XeUser CreateTeenXenonUser( XeUser parent )
            {
                XeUser user = XeUserCreator.CreateMinorXeUser( parent, ParentalControlGroup.Medium );
                if ( user.UserPuid == 0 ) throw new UnexpectedTestResultException( "Child XeUser.Create() failed for " + parent.UserPuid );
                Global.RO.Info( "Teen user 0x{0:x} created with gamertag {1}.", user.UserPuid, user.Gamertag );

                return user;
            }

            public static XeUser CreateChildXenonUser( byte[] passportSessionToken )
            {
                XeUser user = XeUserCreator.CreateMinorXeUser( passportSessionToken, ParentalControlGroup.Restricted );
                if ( user.UserPuid == 0 )
                    throw new UnexpectedTestResultException( "Child XeUser.Create() failed for PassportPuid "
                        + PassportUtilities.GetPuidFromSessionToken( passportSessionToken ) );
                Global.RO.Info( "Child user 0x{0:x} created with gamertag {1}.", user.UserPuid, user.Gamertag );

                return user;
            }

            public static XeUser CreateTeenXenonUser( byte[] passportSessionToken )
            {
                XeUser user = XeUserCreator.CreateMinorXeUser( passportSessionToken, ParentalControlGroup.Medium );
                if ( user.UserPuid == 0 )
                    throw new UnexpectedTestResultException( "Child XeUser.Create() failed for PassportPuid "
                        + PassportUtilities.GetPuidFromSessionToken( passportSessionToken ) );
                Global.RO.Info( "Teen user 0x{0:x} created with gamertag {1}.", user.UserPuid, user.Gamertag );

                return user;
            }

            public static XeUser CreateZuneUser()
            {
                return CreateZuneUser( XeUser.Country.US, XeUser.Language.en );
            }

            public static XeUser CreateZuneUser( XeUser.Country countryId )
            {
                return CreateZuneUser( countryId, (XeUser.Language)CountryLanguage.GetFirstLanguageFromCountry( (byte)countryId ) );
            }

            public static XeUser CreateZuneUser( XeUser.Country countryId, XeUser.Language languageId )
            {
                XeUser argoUser = new XeUser( true, countryId );
                argoUser.CountryId = (byte)countryId;
                argoUser.LanguageId = (ushort)languageId;

                argoUser.CreateLiveAccountEntryPoint = new XRLXeCreateLiveAccountEntryPoint();
                argoUser.CreateLiveAccountEntryPoint.ClientType = (byte)xonline.common.protocol.ClientTypeEnum.ZuneDorado;   //Dorado
                argoUser.CreateLiveAccountEntryPoint.ServiceType = (byte)xonline.common.protocol.ServiceTypeEnum.Zune;

                if ( argoUser.Create() == 0 )
                {
                    throw new UnexpectedTestResultException( "XeUser.Create() failed: " +
                                  argoUser.GetDumpString() );
                }
                return argoUser;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLChangeGamerTag.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	///
	/// </summary>
	public class XRLChangeGamerTag : XRLPayload
	{
		[XRLPayloadFld(IsMPuid=true)]		public ulong machinePuid=0x0005400000000000;
		[XRLPayloadFld(IsUPuid=true)]		public ulong userPuid=0;
											public ushort newTagLen=0;
											public string newTag="";
		[XRLPayloadFld(Serialize=false)]
		public byte []RespKey = new byte[16];


		protected override string GetServiceName()
		{
			return "/xuacs/changegamertag.ashx";
		}

		protected override void ReadResponse(MemoryStream respBuff)
		{
			int nread = respBuff.Read(RespKey, 0, 16);

			if(nread != 16)
			{
				throw new Exception("SetUserPin payload expects a 16 byte response from XUACS, nread: " + nread);
			}
		}

		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs));
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLAcceptTOU.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	public class XRLAcceptTOU : XRLPayload
	{
		[XRLPayloadFld(IsUPuid=true)]
		public ulong userPuid = 0;

		[XRLPayloadFld(IsMPuid=true)]
		public ulong machinePuid = 0;

		public XRLAcceptTOU()
		{
		}

		public XRLAcceptTOU(ulong puid)
		{
			userPuid=puid;
		}


		protected override string GetServiceName()
		{
			return "/xuacs/accepttou.ashx";
		}

		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs));
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\UserTestBase.cs ===
using System;
using System.Net;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;

namespace ServerTestFramework.LiveService.UserAccount
{
    abstract public class UserTestBase : TestBase
    {
        private RandomEx randGen = new RandomEx();
        public RandomEx RandGen 
        {
            get
            {
                return randGen;
            }
        }
        
        private UacsCommon uacs = new UacsCommon();
        public UacsCommon UACS 
        {
            get
            {
                return uacs;
            }
        }

        public UserTestBase(string testName):base(testName) 
        {
        }
        
        public UserTestBase():base() 
        {
        }
        
        [Obsolete]
        static public Owner GenerateOwner(byte CountryCode)
        {
            Owner NewOwner=new Owner("Obsolete");
            NewOwner.SetAddress(CountryCode);
            return NewOwner;
        }

        protected void DumpInfo(XRLPayload Request)
        {
            lock(Parent)
            {
                Global.RO.Warn("X-Err: "+Global.XErrToString(Request.XErr));
                Global.RO.Warn("Http status: "+Request.httpStatus); 
            }
        }

        /// <summary>
        /// Verifies that the specified call failed, and that the returned error matches the expected code. 
        /// This behavior can be overriden to not check for an explicit error code
        /// 
        /// This function will also set ResultCode as needed
        /// </summary>
        static public bool TestNegative(XRLPayload test, uint expectedCode)
        {
            if (test.httpStatus!=HttpStatusCode.OK)
            {
                if (test.XErr==expectedCode)
                {
                    return true;
                }
            }

            test.Dump();
            throw new Exception("TestNegative expected "+Global.XErrToString(expectedCode)+", got "+Global.XErrToString(test.XErr));
        }

        //  CreateAndTestFailure is intended for NEGATIVE test cases
        protected ulong CreateAndTestPass(Owner ownr, string Description)
        {
            ulong puid=0;
            string Header;
            try
            {
                puid=ownr.Create();
            }
            catch (Exception e)
            {
                Header="Exception caught by test "+FullName;
                ConsoleX.WriteLine(CC.RED,Header);
                ConsoleX.WriteLine(CC.RED,e.ToString());
                Global.RO.Warn(FullName);
                Global.RO.Warn(e.ToString());
            }
            if (puid==0)
            {
                DumpInfo(ownr);
                Global.RO.Warn("Sub test failed! Description: "+Description);
                Global.RO.Info("Failed to create user "+ownr.gamertag);
                
                ResultCode=TEST_RESULTS.FAILED;
                throw new Exception("CreateAndTestPass failed, can't proceed!");
            }
            if (puid!=UodbWS.DoesUserExist(ownr.gamertag))
            {
                Global.RO.Warn("Sub test failed! Description: "+Description);
                ResultCode=TEST_RESULTS.FAILED;
                Global.RO.Warn("Catastrophic failure: user created, but does not exist in UODB");
            }
            return puid;
        }
        
        //  CreateAndTestFailure is intended for NEGATIVE test cases
        protected bool CreateAndTestFailure(Owner ownr, uint expected, string Description)
        {
            ulong puid=0;
            bool    bRet=false;

            puid=ownr.Create();
            bRet=TestNegative(ownr,expected);

            if (puid!=0)
            {
                Global.RO.Warn("Sub test failed! Description: "+Description);
                ResultCode=TEST_RESULTS.FAILED;
                if (0!=UodbWS.DoesUserExist(ownr.gamertag))
                    Global.RO.Warn("Catastrophic failure: user created successfully!");
                return bRet;
            }
            if (bRet==false)
            {
                Global.RO.Warn("Sub test returned wrong code "+Global.XErrToString(ownr.XErr)+"! Description: "+Description);
                ResultCode=TEST_RESULTS.FAILED;
                return bRet;
            }
            return bRet;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLClearSubscriptions.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	public class XRLClearSubscriptions : XRLPayload
	{
		[XRLPayloadFld(IsMPuid=true)]
		public ulong machinePuid = 0;

		protected override string GetServiceName()
		{
			return "/xuacs/clearsubscriptions.ashx";
		}

		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs));
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\UserQueue.cs ===
using System;
using System.Collections;
using System.Threading;

using System.Data;
using System.Data.SqlClient;

using ServerTestFramework.Database;

using System.Diagnostics;

namespace ServerTestFramework.LiveService.UserAccount
{
    public class UserQueue
    {
        // this class contains a queue of available SimpleUser objects
        private ulong m_basePuid;
        private int m_count;
        private string m_prefix;
        private Queue m_userQueue;

        public string Prefix { get { return m_prefix; } }

        public UserQueue(ulong basePuid, int count, string prefix)
        {
            m_basePuid = basePuid;
            m_count = count;
            m_prefix = prefix;
            m_userQueue = new Queue(count);

            for (int i = 0; i < m_count; i++)
            {
                m_userQueue.Enqueue((ulong)(basePuid + (ulong)i));
            }
        }

        public ulong InterlockedGetUser()
        {
            ulong userPuid = 0;
            bool success = false;

            while (!success)
            {
                while (m_userQueue.Count == 0) Thread.Sleep(5);
                lock (m_userQueue)
                {
                    // we need to do an extra check here just to ensure that nothing changed before the lock
                    if (m_userQueue.Count > 0)
                    {
                        userPuid = (ulong)m_userQueue.Dequeue();
                        success = true;
                    }
                }
            }

            return userPuid;
        }

        public void InterlockedQueueUser(ulong userPuid)
        {
            lock (m_userQueue)
            {
                m_userQueue.Enqueue(userPuid);
            }
        }
    }


    public class QueuedUser
    {
        protected UserQueue m_userQueue;
        protected ulong m_userPuid;

        public QueuedUser()
        {
            m_userPuid = 0;
            m_userQueue = null;
        }

        // this method is called in the destructor. It needs to revert the user
        // back to the original state.
        public virtual void RevertUser()
        {
            throw new Exception("A RevertUser() method must be implemented for the derived class");
        }

        protected void InitializeFromQueue(UserQueue queue)
        {
            Debug.Assert(queue != null);
            m_userQueue = queue;
            m_userPuid = queue.InterlockedGetUser();
        }

        protected void RequeueUser()
        {
            if (m_userQueue != null && m_userPuid != 0)
            {
                m_userQueue.InterlockedQueueUser(m_userPuid);
                m_userPuid = 0;
                m_userQueue = null;
            }
        }

        public ulong UserPuid
        {
            get { return m_userPuid; }
        }

        ~QueuedUser()
        {
            if (m_userQueue != null && m_userPuid != 0)
            {
                RequeueUser();
            }
        }
    }

    public class SimpleStressUser : QueuedUser, IDisposable
    {
        public SimpleStressUser(UserQueue queue)
        {
            InitializeFromQueue(queue);
        }

        public override void RevertUser()
        {
            RequeueUser();
        }

        public void Dispose()
        {
            RevertUser();
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\UserPrivileges.cs ===
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;

namespace ServerTestFramework.LiveService.UserAccount
{
    public class UserPrivileges
    {
        uint [] m_privileges;
        /*

        Privileges are stored as single bits in a field of 256 bits.  Bits are stored
        with the high bits being stored in the first of the 32 bytes in the array, 
        and so on.

        NOTE: is this the proper endian-ness for data sent over the wire?
        
        */

        public const int XONLINE_PRIVILEGE_DWORD_LENGTH = 8;
    
        public const int NUM_PRIVILEGE_BITS = 256;
        public const int NUM_PRIVILEGE_DWORDS = NUM_PRIVILEGE_BITS / 32;

        public const int XONLINE_TEST_PRIVILEGE1                               = 201;
        public const int XONLINE_TEST_PRIVILEGE2                               = 202;

        public const int XONLINE_PRIVILEGE_MIN                                 = 211;

        public const byte XPRIVILEGE_SHARE_CONTENT                             = 211;
        public const int XPRIVILEGE_UNSAFE_PROGRAMMING                         = 212;
        public const int XPRIVILEGE_FAMILY                                     = 213;
        public const int XPRIVILEGE_PREMIUM_CONTENT                            = 214;
        public const int XPRIVILEGE_BILLING_SWITCHING_REQUIRES_PIN             = 215;
        public const int XPRIVILEGE_PASSPORT_SWITCHING_REQUIRES_PIN            = 216;
        public const int XPRIVILEGE_PURCHASE_CONTENT_REQUIRES_PIN              = 217;
        public const int XPRIVILEGE_ADD_FRIEND_REQUIRES_PIN                    = 218;
        public const int XPRIVILEGE_PIN_AUTHENTICATED_USER                     = 219;
        public const int XPRIVILEGE_SOCIAL_NETWORK_SHARING                     = 220;
        public const int XPRIVILEGE_PII_ACCESS                                 = 221;
        public const int XPRIVILEGE_CONTENT_AUTHOR                             = 222;
        public const int XPRIVILEGE_PRIMETIME                                  = 223;
        public const int XPRIVILEGE_PREMIUM_VIDEO                              = 224;
        public const int XPRIVILEGE_USER_GRADUATION                            = 225;
        public const int XPRIVILEGE_MULTIPLAYER_DEDICATED_SERVER               = 226;
        public const int XONLINE_XPRIVILEGE_BILLING_SWITCHING                  = 227;
        public const int XONLINE_XPRIVILEGE_PASSPORT_SWITCHING                 = 228;
        public const int XONLINE_XPRIVILEGE_SHARE_FRIENDS_LIST_FRIENDS_ONLY    = 229;
        public const int XONLINE_XPRIVILEGE_SHARE_FRIENDS_LIST                 = 230;
        public const int XONLINE_XPRIVILEGE_METRO_ACCESS                       = 231;
        public const int XONLINE_XPRIVILEGE_SHARE_GAMERTAG_WITH_BUDDIES        = 232; 
        public const int XONLINE_XPRIVILEGE_SHARE_WLID_WITH_FRIENDS            = 233; 
        public const int XONLINE_XPRIVILEGE_VIDEO_COMMUNICATIONS_FRIENDS_ONLY  = 234; 
        public const int XONLINE_XPRIVILEGE_VIDEO_COMMUNICATIONS               = 235; 
        public const int XONLINE_XPRIVILEGE_TESTER_ACCESS                      = 236;
        public const int XONLINE_XPRIVILEGE_MUSIC_EXPLICIT_CONTENT             = 237;
        public const int XONLINE_XPRIVILEGE_TRADE_CONTENT                      = 238;
        public const int XONLINE_XPRIVILEGE_PREVIOUS_LIVE_PROTOCOLS            = 239;
        public const int XONLINE_XPRIVILEGE_CROSS_PLATFORM_SYSTEM_COMMUNICATION= 240;
        public const int XONLINE_XPRIVILEGE_CROSS_PLATFORM_MULTIPLAYER         = 241;
        public const int XONLINE_XPRIVILEGE_XBOX1_LIVE_ACCESS                  = 242;
        public const int XONLINE_XPRIVILEGE_PRESENCE_FRIENDS_ONLY              = 243;
        public const int XONLINE_XPRIVILEGE_PRESENCE                           = 244;
        public const int XONLINE_XPRIVILEGE_PURCHASE_CONTENT                   = 245;
        public const int XONLINE_XPRIVILEGE_USER_CREATED_CONTENT_FRIENDS_ONLY  = 246;
        public const int XONLINE_XPRIVILEGE_USER_CREATED_CONTENT               = 247;
        public const int XONLINE_XPRIVILEGE_PROFILE_VIEWING_FRIENDS_ONLY       = 248;
        public const int XONLINE_XPRIVILEGE_PROFILE_VIEWING                    = 249;
        public const int XONLINE_XPRIVILEGE_VIDEO_MESSAGING_SEND               = 250;
        public const int XONLINE_XPRIVILEGE_COMMUNICATIONS_FRIENDS_ONLY        = 251;
        public const int XONLINE_XPRIVILEGE_COMMUNICATIONS                     = 252;
        public const int XONLINE_XPRIVILEGE_MULTIPLAYER_ENABLED_BY_TIER        = 253;
        public const int XONLINE_XPRIVILEGE_MULTIPLAYER_SESSIONS               = 254;
        public const int XONLINE_XPRIVILEGE_ADD_FRIEND                         = 255;
        public const int XONLINE_PRIVILEGE_MAX                                 = 255;

        // need to update the lists below whenever there are privilege changes, add/update/delete.
        public readonly static byte[] _silverDefaults = { 211, 212, 220, 226, 227, 228, 229, 230, 231, 234, 237, 240, 243, 244, 245, 246, 247, 248, 249, 251, 252, 255 }; //21                                           
        // differences are 223, 224, 238, 242, 250, 253, 254
        public readonly static byte[] _goldDefaults = { 209, 211, 212, 220, 223, 224, 226, 227, 228, 229, 230, 231, 234, 237, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 };  //30
        public readonly static byte[] _freeTrialAddon = new byte[] { 223, 224, 254 };
        // the 48 Gameplay offer (0xFFFE07D10990000A) in TitleVault have privileges, 223, 224, 254
        public readonly static byte[] _48HoursGamePlayAddon = new byte[] { 223, 224, 254 };

        // only used by constructors
        private void Init()
        {
            m_privileges = new uint[NUM_PRIVILEGE_DWORDS];

            for (int i = 0; i < NUM_PRIVILEGE_DWORDS; i++)
                m_privileges[i] = 0;
        }

        public UserPrivileges()
        {
            Init();
        }

        public UserPrivileges(bool setAllPrivs)
        {
            Init();

            // init those privilege bits
            SetAllPrivs(setAllPrivs);
        }
    
        public UserPrivileges(uint [] privileges)
        {
            if (privileges.Length != NUM_PRIVILEGE_DWORDS)
                throw new Exception("Expecting exactly " + NUM_PRIVILEGE_DWORDS + " privilege bytes");
            
            m_privileges = privileges;
        }

        public bool GetPrivilege(int index)
        {
            ulong ul = m_privileges[index / 32];
            ulong mask = (uint)1 << (index % 32);

            return (ul & mask) == mask;
        }

        public void SetPrivilege(int privilege, bool setting)
        {
            this[privilege] = setting;
        }

        public void SetPrivilege(bool allPrivs, int privilege, bool setting)
        {
            SetAllPrivs(allPrivs);
            this[privilege] = setting;
        }

        public void SetPrivilege(int[] privileges, bool setting)
        {
            for (int i = 0; i < privileges.GetLength(0); i++)
            {
                this[privileges[i]] = setting;
            }
        }

        public void SetAllPrivs(bool setting)
        {
            for (int i=XONLINE_PRIVILEGE_MIN; i<=XONLINE_PRIVILEGE_MAX; i++)
            {
                this[i] = setting;
            }
        }

        public void CopyAllPrivs(uint[] privileges)
        {
            if (privileges.Length != NUM_PRIVILEGE_DWORDS)
                throw new Exception("Expecting exactly " + NUM_PRIVILEGE_DWORDS + " privilege bytes");
            
            for (int i = 0; i < NUM_PRIVILEGE_DWORDS; i++)
                m_privileges[i] = privileges[i];
        }

        public override string ToString()
        {
            // generates a string of 0's and 1's which represent the 256 privileges
            // the first 1 or 0 corresponds to privilege #0, and so on...
        
            StringBuilder privileges = new StringBuilder(NUM_PRIVILEGE_BITS);

            for (int i = 0; i < NUM_PRIVILEGE_BITS; i++)
            {
                if (this[i] == true)
                    privileges.Append('1');
                else
                    privileges.Append('0');
            }

            return privileges.ToString();
        }

        public uint[] ToStringArray()
        {
            List<uint> privs = new List<uint>();

            for (int i = XONLINE_PRIVILEGE_MIN; i <= XONLINE_PRIVILEGE_MAX; i++)
            {
                if (this[i] == true)
                    privs.Add((uint)i);
            }

            return privs.ToArray();
        }

        public string ToStringAllPrivileges()
        {
            // generates a string of 0's and 1's which represent the 256 privileges
            // the first 1 or 0 corresponds to privilege #0, and so on...

            StringBuilder privileges = new StringBuilder(NUM_PRIVILEGE_BITS);

            for (int i = XONLINE_PRIVILEGE_MAX; i >= XONLINE_PRIVILEGE_MIN; i--)
            {
                if (this[i] == true)
                    privileges.Append('1');
                else
                    privileges.Append('0');
            }

            return privileges.ToString();
        }

        public bool this[int index]
        {
            // get or set individual bits within the privilege set
        
            get
            {
                ulong ul = m_privileges[index / 32];
                ulong mask = (uint) 1 << (index % 32);
            
                return (ul & mask) == mask;
            }

            set
            {
                // need to disable this check for testing settings outside the min and max
                //if (index < XONLINE_PRIVILEGE_MIN || index > XONLINE_PRIVILEGE_MAX)
                //    throw new Exception("UserPrivileges: index out of range " + index);
            
                uint ul = m_privileges[index / 32];
                uint mask = (uint) 1 << (index % 32);
            
                if (value == true)
                    ul = ul | mask;
                else
                    ul = ul & (0xFFFFFFFF - mask);

                m_privileges[index / 32] = ul;
            }
        }

        public uint [] ToArray()
        {
            return m_privileges;
        }

        public override bool Equals(object obj)
        {
            if (obj.GetType() != typeof(UserPrivileges))
                return base.Equals(obj);

            uint[] privArray1 = m_privileges;
            uint[] privArray2 = ((UserPrivileges)obj).ToArray();

            if (privArray1.Length != privArray2.Length)
                return false;
            for (int i=0; i < privArray1.Length; i++)
            {
                if (privArray1[i] != privArray2[i])
                    return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public void MaxPrivs()
        {
            // get the array from the database
            int[] privs = UodbWS.GetAllValidPrivileges();
            foreach (int i in privs)
            {
                this[i] = true;
            }
        }

        private static UserPrivileges FromBytes(byte[] data)
        {
            UserPrivileges privileges = new UserPrivileges();
            for (int i = 0; i < data.GetLength(0); i++)
            {
                privileges.UnsafeSet(data[i], true);
            }
            return privileges;
        }

        public static UserPrivileges GetSilverDefaults()
        {
            return FromBytes(_silverDefaults);
        }

        public static UserPrivileges GetGoldDefaults()
        {
            return FromBytes(_goldDefaults);
        }

        protected void UnsafeSet(int index, bool value)
        {
            if (index > 255)
            {
                throw new ArgumentOutOfRangeException("This data can only hold 256 bits of information.", "index");
            }
            uint ul = m_privileges[index / 32];
            uint mask = (uint)1 << (index % 32);

            if (value == true)
                ul = ul | mask;
            else
                ul = ul & (0xFFFFFFFF - mask);

            m_privileges[index / 32] = ul;
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLCreateOwner.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using System.Reflection;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
    class OwnerAcctResponse : XRLPayload
    {
        public ulong    Puid=0;
        [XRLPayloadFld(ArraySize=(int)XOn.XONLINE_KEY_LENGTH)]      public byte[]  Key=null;
        [XRLPayloadFld(ArraySize=(int)XOn.XONLINE_USERDOMAIN_SIZE)] public string  Domain="";
        [XRLPayloadFld(ArraySize=(int)XOn.XONLINE_REALM_NAME_SIZE)] public string  Realm="";
    }

    public class Owner : XRLPayload
    {
        [XRLPayloadFld(IsMPuid=true)]
        public ulong machinePuid;
        public uint     titleId;
        public DateTime birthdate;

        public byte     msSpam;
        public byte     partnerSpam;

        [XRLPayloadFld(IsCountryId=true)]
        public byte     countryId;
        public ushort   languageId=1;
        public byte     cardTypeId;
        public DateTime cardExpiration;
        public ushort   gamertagLen=0;
        public string   gamertag;
        public ushort   firstNameLen=0;
        public string   firstName;
        public ushort   lastNameLen=0;
        public string   lastName;
        public ushort   street1Len=0;
        public string   street1;
        public ushort   street2Len=0;
        public string   street2;
        public ushort   street3Len=0;
        public string   street3;
        public ushort   cityLen=0;
        public string   city;
        public ushort   stateLen=0;
        public string   state;
        public ushort   postalCodeLen=0;
        public string   postalCode;
        public ushort   phonePrefixLen=0;
        public string   phonePrefix;
        public ushort   phoneNumberLen=0;
        public string   phoneNumber;
        public ushort   phoneExtensionLen=0;
        public string   phoneExtension;
        public ushort   cardHolderLen=0;
        public string   cardHolder;
        public ushort   cardNumberLen=0;
        public string   cardNumber;
        public ushort   emailLen=0;
        public string   email;
        public ushort   bankCodeLen=0;
        public string   bankCode;
        public ushort   branchCodeLen=0;
        public string   branchCode;
        public ushort   checkDigitsLen=0;
        public string   checkDigits;
        public ushort   activationCodeLen=0;
        public string   activationCode;

        
        private ulong m_userPuid = 0;
        public ulong UserPuid { get { return m_userPuid; } }


        public delegate void OwnerNotifyEvent(Owner Request, ulong puid);
        static public event OwnerNotifyEvent    DefaultOnOwnerExecute=null; //  Doesn't get fired - this is just used to initialize OnOwnerExecute
        public event OwnerNotifyEvent           OnOwnerExecute=null;        //  Gets called after this XRL gets executed


        public enum Country : byte  {   US=103,
                                        CA=16,
                                        JP=53,
                                        UK=35,
                                        DE=24,
                                        IT=50,
                                        NL=74,
                                        SE=90,
                                        BE=8,
                                        DK=25,
                                        FI=32,
                                        IE=44,
                                        NO=75,
                                        CH=18,
                                        AU=6,
                                        AT=5,
                                        KR=56,
                                        ES=31,
                                        FR=34,
// Tsunami countries
                                        TW=101, // taiwan
                                        HK=39,  //hong-kong
                                        SG=91, // singapore
                                        MX=71, // mexico
                                        NZ=76, // new zealand
                                        };

        static public byte  []Countries;

        static Owner()
        {
            Country k=new Country();
            FieldInfo []fields=typeof(Country).GetFields();
            Countries=new byte[fields.Length-1];
            // For some reason, the first field is not a part of the enum (__value)
            for (int i=1; i<fields.Length; i++)
            {
                Countries[i-1]=(byte) fields[i].GetValue(k);
            }
        }

        public string GetLast4DigitsOfCC()
        {
            return cardNumber.Substring(cardNumber.Length-4);
        }

        public void MakeMinor()
        {
            this.birthdate=DateTime.Now.AddYears(-14);
        }

        public void SetAddress(byte CountryCode)
        {
            Country cc=(Country) CountryCode;
            SetAddress(cc);
        }

        public void SetAddress(Country CountryCode)
        {
            Owner NewOwner = this;
            switch(CountryCode)
            {
                case Country.AT:
                    NewOwner.city="Vienna";
                    NewOwner.postalCode="1030";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "AT Owner";
                    break;
                case Country.AU:
                    NewOwner.city="Brighton";
                    NewOwner.postalCode="3186";
                    NewOwner.state="VIC";
                    NewOwner.cardHolder = "AU Owner";
                    break;
                case Country.BE:
                    NewOwner.city="Brussels";
                    NewOwner.postalCode="1000";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "BE Owner";
                    break;
                case Country.CA: // Canada
                    NewOwner.city="Victoria";
                    NewOwner.postalCode="V8W 9W2";
                    NewOwner.state="BC";
                    NewOwner.cardHolder = "CA Owner";
                    break;
                case Country.CH:
                    NewOwner.city="Weinfelden";
                    NewOwner.postalCode="8570";
                    NewOwner.state="TG";
                    NewOwner.cardHolder = "CH Owner";
                    break;
                case Country.DE: // Germany
                    NewOwner.city="BERLIN";
                    NewOwner.postalCode="22767";
                    NewOwner.state="";
                    NewOwner.cardHolder = "DE Owner";
                    break;
                case Country.DK:
                    NewOwner.city="Kbenhavn K";
                    NewOwner.postalCode="1202";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "DK Owner";
                    break;
                case Country.FI:
                    NewOwner.city="Helsinki";
                    NewOwner.postalCode="00100";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "FI Owner";
                    break;
                case Country.FR:    // France
                    NewOwner.city="CABOURG";
                    NewOwner.postalCode="14390";
                    NewOwner.state="";
                    NewOwner.cardHolder = "FR Owner";
                    break;
                case Country.IE:
                    NewOwner.city="Banagher-on-the-Shannon";
                    NewOwner.postalCode="";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "IE Owner";
                    break;
                case Country.IT:
                    NewOwner.city="Bologna";
                    NewOwner.postalCode="40053";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "IT Owner";
                    break;
                case Country.JP:    // Japan
                    NewOwner.city="Shibuya-ku";
                    NewOwner.postalCode="1518543";
                    NewOwner.state="Tokyo";
                    NewOwner.cardHolder = "JP Owner";
                    break;
                case Country.NL:
                    NewOwner.city="AMSTERDAM";
                    NewOwner.postalCode="1012 RC";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "NL Owner";
                    break;
                case Country.NO:
                    NewOwner.city="Oslo";
                    NewOwner.postalCode="0980";
                    NewOwner.state="";
                    NewOwner.cardHolder = "NO Owner";
                    break;
                case Country.SE:
                    NewOwner.city="Jukkasjrvi";
                    NewOwner.postalCode="98191";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "SE Owner";
                    break;
                case Country.ES:
                    NewOwner.city="Barcelona";
                    NewOwner.postalCode="08007";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "ES Owner";
                    break;
                case Country.KR:
                    NewOwner.city="Seoul";
                    NewOwner.state="";
                    NewOwner.postalCode="135080";
                    NewOwner.cardHolder = "KR Owner";
                    break;
                case Country.UK:    // UK
                    NewOwner.city="London";
                    NewOwner.postalCode="EC1Y8SY";
                    NewOwner.state="";
                    NewOwner.cardHolder = "UK Owner";
                    break;
                case Country.US:
                    NewOwner.city="Redmond";
                    NewOwner.postalCode="98052";
                    NewOwner.state="WA";
                    NewOwner.cardHolder = "US Owner";
                    break;
//
// Tsunami countries
//
                case Country.TW:    // taiwan
                    NewOwner.city = "Taipei";
                    NewOwner.postalCode = "110";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "TW Owner";
                    break;
                case Country.HK:    // hong-kong
                    NewOwner.city = "Wanchai";
                    NewOwner.postalCode = "";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "HK Owner";
                    break;
                case Country.SG:    // singapore
                    NewOwner.city = "Singapore";
                    NewOwner.postalCode = "179803";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "SG Owner";
                    break;
                case Country.MX:    // mexico
                    NewOwner.city = "Mxico City";
                    NewOwner.postalCode = "11580";
                    NewOwner.state = "Col. Polanco";
                    NewOwner.cardHolder = "MX Owner";
                    break;
                case Country.NZ:    // new zealand
                    NewOwner.city = "Aukland";
                    NewOwner.postalCode = "";
                    NewOwner.state = "";
                    NewOwner.cardHolder = "NZ Owner";
                    break;
                default:
                    throw new Exception("XRLCreateOwner.SetAddress doesn't know how to generate a CC "+CountryCode+" account!");
            }
            NewOwner.countryId=(byte) CountryCode;
        }

        // This is a better way to ensure that no owner without name will be generated
        private Owner()
        {
        }

        public Owner( string sName)
        {
            gamertag = sName;
            OnOwnerExecute=DefaultOnOwnerExecute;

            // don't change this data it has to match up with
            // data in the emulator for account linking, stress
            //
            birthdate = new DateTime( 1963, 3, 25 );
            countryId = 103;
            cardTypeId = 0;
            cardExpiration = new DateTime( 2016, 10, 24 );
            firstName = "Jacob";
            lastName = "Repp";
            street1 = "Lovely Lane 31337";
            street2 = "#1085618612";
            street3 = "";
            city = "Seattle";
            state = "WA";
            postalCode = "98014";
            phonePrefix = "425";
            phoneNumber = "5555555";
            phoneExtension ="";
            cardHolder  = "Bob";
            cardNumber  = "4111111111111111";
            email       = "xboxstress@winisp.net";
            bankCode    = "";
            branchCode  = "";
            checkDigits = "";
            activationCode="1111111111111111111111111";
        }

        // 40000 00000 00000
        private static long CCnum=InitializeCCNum();
        private static long InitializeCCNum()
        {
            long b=00000000000000;
            long secs=(long)(DateTime.Now-(new DateTime(1977,10,24,6,45,0))).TotalSeconds/100;
            b+=secs*4000000;

            return b;
        }

        /// <summary>
        /// Generates a random Visa number
        /// </summary>
        /// <returns></returns>
        static public string GetCCNumber()
        {
            return GetCCNumber("4",16); // Visa
        }

        /// <summary>
        /// Generates a credit card number that conforms to the LUHN formula
        /// </summary>
        /// <param name="prefix">The prefix for the credit card number.</param>
        /// <param name="size">The length of the credit card number.</param>
        /// <returns>A string containing the generated credit card number.</returns>
        static public string GetCCNumber(string prefix, int size)
        {
            long number = DateTime.Now.Ticks;
            string ccnum = number.ToString();
            if (ccnum.Length > size)    // too many characters.. trim trailing characters
                ccnum = ccnum.Substring(0, size);
            if (ccnum.Length < size)    // not enough characters.. add random numbers
            {
                Random r = new Random(Environment.TickCount);
                for (int i=ccnum.Length; i<size; i++) ccnum += r.Next(9).ToString();
            }

            // now prefix the prefix and
            // to make things easier for us we ensure that the last number is zero
            ccnum = prefix + ccnum.Substring(0, ccnum.Length - prefix.Length - "0".Length) + "0";

            // sanity check
            if (ccnum.Length != size)
                throw new ApplicationException("Incorrect length for generated credit card: " + ccnum.Length + " - " + ccnum);

            // now add the number from left to right, doubling each second one to get a total
            int multiplier = 1;
            int total = 0;
            for (int i=ccnum.Length-1; i>=0; i--)
            {
                int n = int.Parse(ccnum[i].ToString()) * multiplier;
                if (n >= 10) n -= 9;
                total += n;
                if (multiplier == 1) multiplier = 2; else multiplier = 1;
            }

            int remainder = 10 - (total % 10);
            if (remainder == 10) remainder = 0;

            // add the modulus of 10 to the end of the string
            ccnum = ccnum.Substring(0, ccnum.Length - 1) + remainder.ToString();

            return ccnum;
        }


        public void GenerateCCNumber()
        {
            switch (this.cardTypeId)
            {
                case 0: // Visa
                    this.cardNumber=Owner.GetCCNumber();
                    break;
                case 1: // Mastercard
                    this.cardNumber=Owner.GetCCNumber("51",16);
                    break;
                case 2: // Amex
                    this.cardNumber=Owner.GetCCNumber("37",15);

//                  this.cardNumber="348355259681798";
//                  this.cardNumber=Owner.GetCCNumber("34447035339090",15);
                    break;
                case 3: // Discover
                    this.cardNumber=Owner.GetCCNumber("6011",16);
//                  this.cardNumber=Owner.GetCCNumber("601180773170230",16);
                    break;
                case 4: // JCB
                    this.cardNumber=Owner.GetCCNumber("35",16);
                    break;
                case 5: // Diners
                    this.cardNumber=Owner.GetCCNumber("36",14);
                    break;
                case 6: // KK
                    this.cardNumber=Owner.GetCCNumber("9410",16);
                    break;
                default:
                    throw new ApplicationException("Don't know how to generate CC type "+this.cardTypeId);
            }
        }

        protected override string GetServiceName()
        {
            return "/xuacs/createowneracct.ashx";
        }

        public ulong Create()
        {
            return Create(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs));
        }

        public ulong Create(LiveServer sServer)
        {
            return Create(sServer.EPDefault);
        }

        public ulong Create(IPEndPoint endPoint)
        {
            // Prepare request
            MemoryStream reqStream = new MemoryStream( 512 );
            WriteStream( reqStream );

            ulong uRet = 0;
            bool bRet=InternalExecute(endPoint, reqStream);

            if(bRet)
            {
                if( (httpStatus == HttpStatusCode.OK) && (XErr == 0) )
                {
                    OwnerAcctResponse respData = new OwnerAcctResponse();
                    MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
                    respData.ReadStream( respBuff );
                    uRet = respData.Puid;
                }
            }

            if (OnOwnerExecute!=null)
                OnOwnerExecute(this, uRet);

            m_userPuid = uRet;

            if (m_userPuid != 0)
                Global.RO.Info("Owner 0x{0:x} created on partition {1}", m_userPuid, UodbWS.WhatServerIsTheUserOn(m_userPuid));

            return( uRet );
        }

        public void LinkToPassport(ulong PassportPuid)
        {
            LinkToPassport(PassportPuid, false);
        }

        public void LinkToPassport(ulong PassportPuid, bool clearExisting)
        {
            if(clearExisting)
            {
                UnLinkFromPassport(PassportPuid);
            }

            XRLLinkWebAccountResponse resp;
            XRLLinkWebAccount req = new XRLLinkWebAccount();
            req.cardHolder = this.cardHolder;
            req.cardNumber = this.cardNumber;
            req.postalCode = this.postalCode;
            req.phoneExtension = this.phoneExtension;
            req.phoneNumber = this.phoneNumber;
            req.phonePrefix = this.phonePrefix;
            req.gamertag = this.gamertag;
            req.webId =  BitConverter.GetBytes(PassportPuid);


            if(!req.Execute(out resp))
                throw new Exception("LinkToPassport: Failed to link owner account: " + req.GetDumpString());
        }

        public void UnLinkFromPassport(ulong PassportPuid)
        {
            ulong puid = 0;
            UodbWS.GetUserByPassport(PassportPuid, out puid);
            if(puid != 0)
            {
                string gamertag = UodbWS.GetGamertag(puid);
                UodbWS.ExecuteSQLNonQuery("update t_users set bi_user_passport_puid = 0, bi_owner_passport_puid = 0  where bi_user_passport_puid = 0x" + PassportPuid.ToString("X"), puid);
                UodbWS.ExecuteSQLNonQuery("delete from t_user_keys where vc_gamertag = '" + gamertag.ToString() + "'", gamertag);
                UodbWS.ExecuteSQLNonQuery("delete from t_xenon_user_keys where vc_gamertag = '" + gamertag.ToString() + "'", gamertag);
                UodbWS.ExecuteSQLNonQuery("delete from t_user_names where vc_gamertag = '" + gamertag.ToString() + "'", gamertag);
                UodbWS.ExecuteSQLNonQuery("delete from t_user_passport_puids where bi_user_passport_puid = 0x" + PassportPuid.ToString("X"), PassportPuid);
            }
        }

        public void LinkToPassport(ulong PassportUserPuid, ulong PassportOwnerPuid)
        {
            LinkToPassport(PassportUserPuid, PassportOwnerPuid, false);
        }

        public void LinkToPassport(ulong PassportUserPuid, ulong PassportOwnerPuid, bool clearExisting)
        {
            if(clearExisting)
            {
                UnLinkFromPassport(PassportUserPuid);
            }

            XRLXeLinkXbox1Account request = new XRLXeLinkXbox1Account();
            
            byte[] user_passport = PassportUtilities.GenerateSessionToken(PassportUserPuid, request.Slot.Key);
            byte[] owner_passport = PassportUtilities.GenerateSessionToken(PassportOwnerPuid, request.Slot.Key);

            request.Gamertag = this.gamertag;
            request.SignedUserPassportPuid = user_passport;
            request.SignedOwnerPassportPuid = owner_passport;
            request.PhoneInfo.PhonePrefix = this.phonePrefix;
            request.PhoneInfo.PhoneNumber = this.phoneNumber;
            request.PhoneInfo.PhoneExtension = this.phoneExtension;
            request.PostalCode = this.postalCode;
            request.CardHolder = this.cardHolder;
            request.CardNumber = this.cardNumber;

            if (!request.Execute())
                throw new UnexpectedTestResultException("XRLXeLinkXbox1Account failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLXeLinkXbox1Account returned XErr=0x{0:x}", request.XErr));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLGetPaymentInfo.cs ===
using System;
using System.Net;
using System.IO;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
    /// <summary>
    ///
    /// </summary>
    public class XRLGetPaymentInfo : XRLPayload
    {
        [XRLPayloadFld(IsUPuid=true)]
        public ulong userPuid;
        [XRLPayloadFld(ArraySize=4)]
        public byte []pin = new byte[4];

        protected override string GetServiceName()
        {
            return "/xuacs/getpaymentinfo.ashx";
        }

        public XRLGetPaymentInfo()
        {
            pin[0]=1;
            pin[1]=1;
            pin[2]=1;
            pin[3]=1;
        }

        public bool Execute(out XRLGetPaymentInfoResponse Response)
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs), out Response);
        }

        public bool Execute(LiveServer sServer, out XRLGetPaymentInfoResponse Response)
        {
            return Execute(sServer.EPDefault, out Response);
        }

        public bool Execute(IPEndPoint endPoint, out XRLGetPaymentInfoResponse Response)
        {
            MemoryStream reqStream = new MemoryStream( 512 );
            WriteStream( reqStream );

            bool uRet = false;
            bool bRet=InternalExecute(endPoint,reqStream);

            Response=null;
            if(bRet)
            {
                if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == 0) )
                {
                    Response = new XRLGetPaymentInfoResponse();
                    MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
                    Response.ReadStream( respBuff );

                    uRet = true;
                }
            }

            return uRet;
        }
    }

    public class XRLGetPaymentInfoResponse : XRLPayload
    {
        public byte countryId;
        public byte cardTypeId;
        public DateTime cardExpiration;

        public byte msSpam;
        public byte partnerSpam;

        public ushort firstNameLen;
        public string firstName;
        public ushort lastNameLen;
        public string lastName;
        public ushort street1Len;
        public string street1;
        public ushort street2Len;
        public string street2;
        public ushort street3Len;
        public string street3;
        public ushort cityLen;
        public string city;
        public ushort stateLen;
        public string state;
        public ushort postalCodeLen;
        public string postalCode;

        public ushort phonePrefixLen;
        public string phonePrefix;
        public ushort phoneNumberLen;
        public string phoneNumber;
        public ushort phoneExtensionLen;
        public string phoneExtension;

        public ushort cardHolderLen;
        public string cardHolder;
        public ushort cardNumberLen;
        public string cardNumber;

        public ushort emailLen;
        public string email;
        public ushort bankCodeLen;
        public string bankCode;
        public ushort branchCodeLen;
        public string branchCode;
        public ushort checkDigitsLen;
        public string checkDigits;

        new public void Dump()
        {
            Console.WriteLine(street1);
            Console.WriteLine(street2);
            Console.WriteLine(street3);
        }

        public bool Compare(XRLSetPaymentInfo other)
        {

            // Raid bug 14084 - SetPaymentInfo ignores these fields, so temporarily
            // I will ignore them too
/*
            if (this.bankCode!=other.bankCode)
                return false;
            if (this.branchCode!=other.branchCode)
                return false;
            if (this.checkDigits!=other.checkDigits)
                return false;
            if (this.cardNumber.Substring(this.cardNumber.Length-4)!=
                other.cardNumber.Substring(other.cardNumber.Length-4))
                return false;
*/
            if (this.cardExpiration.ToUniversalTime().Month!=other.cardExpiration.ToUniversalTime().Month)
                return false;
            if (this.cardExpiration.ToUniversalTime().Year!=other.cardExpiration.ToUniversalTime().Year)
                return false;
            if (this.cardHolder!=other.cardHolder)
                return false;
            if (this.cardTypeId!=other.cardTypeId)
                return false;
            if (this.city!=other.city)
                return false;
            if (this.countryId!=other.countryId)
                return false;
            if (this.email!=other.email)
                return false;
            if (this.firstName!=other.firstName)
                return false;
            if (this.lastName!=other.lastName)
                return false;
            if (this.phoneExtension.Trim() != other.phoneExtension.Trim())
                return false;
            if (this.phoneNumber.Trim() != other.phoneNumber.Trim())
                return false;
            if (this.phonePrefix.Trim() != other.phonePrefix.Trim())
                return false;
            if (this.postalCode!=other.postalCode)
                return false;
            if (this.state!=other.state)
                return false;
            if (this.street1!=other.street1)
                return false;
            if (this.street2!=other.street2)
                return false;
            if (this.street3!=other.street3)
                return false;
            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLEnumerateEligible.cs ===
using System;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using ServerTestFramework;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	/// Summary description for XRLEnumerateEligible.
	/// </summary>

	[StructLayout(LayoutKind.Sequential)]
	public class XRLEnumerateEligible : XRLPayload
	{
		[XRLPayloadFld(IsUPuid=true)]
		public ulong       UserPUID             =0;
		public uint        TitleId              =XOn.DASH_TITLE_ID;
		public uint        ClientBuffer         =8192;
		public uint        Rating               =0;
		public DateTime    LastChangedDate      =DateTime.Now.AddYears(-2);
		public uint        OfferingType         =XOn.XONLINE_OFFERING_RENEWAL;
		public uint        BitFilter            =0xFFFFFFFF;
		public uint        DescriptionIndex     =0;
		public ushort      StartingIndex        =0;
		public ushort      MaxResults           =25;
		public ushort		LanguageId			=1; // en
		public ushort      VoucherLen           =0;
		public string      Voucher				=null;

		[WireInfo(Serialize=false)]
		public byte			Country=103;

		public override void WriteStream(BinaryWriter writer)
		{
			ManualSlotSetup=true;
			PopulateSlot(ref Slot);
			Slot.userFlag0&=0xFFFF00FF;
			Slot.userFlag0|=(uint)Country<<8;
			base.WriteStream(writer);
		}


		protected override string GetServiceName()
		{
			return "/xuacs/enumerateeligible.ashx";
		}

		static public void Dump(XRLEnumerateEligibleRecord []eligible)
		{
			foreach(XRLEnumerateEligibleRecord e in eligible)
			{
				Console.WriteLine("Eligible for "+e.offeringId+" ( 0x"+e.offeringId.ToString("X")+"), price "+e.currencyCode+" "+e.PriceWhole+"."+e.PriceFractional);
			}
		}

		public bool Execute(out XRLEnumerateEligibleHeader Head, out XRLEnumerateEligibleRecord []Details)
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs), out Head, out Details);
		}

		public bool Execute(LiveServer sServer, out XRLEnumerateEligibleHeader Head, out XRLEnumerateEligibleRecord []Details)
		{
			return Execute(sServer.EPDefault, out Head, out Details);
		}

		public bool Execute(IPEndPoint endPoint, out XRLEnumerateEligibleHeader Head, out XRLEnumerateEligibleRecord []Details)
		{
			Head = new XRLEnumerateEligibleHeader();
			Details = null;

			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool bRet = InternalExecute(endPoint,reqStream);

			if(bRet)
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == HResult.S_OK))
				{
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					Head.ReadStream( respBuff );

					Details = new XRLEnumerateEligibleRecord[Head.Records];
					for (int i=0; i<Details.Length; i++)
					{
						Details[i] = new XRLEnumerateEligibleRecord();
						Details[i].ReadStream( respBuff );
					}
				}
				else
					bRet=false;
			}
			return bRet;
		}
	}

	[StructLayout(LayoutKind.Sequential)]
	public class XRLEnumerateEligibleRecord : WireData
	{
		public short  RecordSize;
		public short  RecordIndex;
		public ulong  offeringId;
		public int    OfferingType;
		public int    BitFlags;
		public int    PackageSize;
		public int    InstallSize;
		public DateTime ActivationDate;
		public int    Rating;
		public short  OfferingFlags;
		public int    TitleSpecificDataLen;
		public int    pbTitleSpecificDataOffset;
		public byte[] TitleSpecificData;

		// Details

		public uint PriceWhole;
		public byte PriceFractional;
		public byte CurrencyFormat;
		[WireInfo(ArraySize=3)]
		public string currencyCode;
		public uint OfferingDetails;

	}

	[StructLayout(LayoutKind.Sequential)]
	public class XRLEnumerateEligibleHeader : WireData
	{
		public short    Records;
		public short    Flags;
		public DateTime LastChangedDate;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLLinkWebAccount.cs ===
using System;
using System.Web;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Net;
using ServerTestFramework;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	/// Summary description for LinkWebAccount.
	/// </summary>
	public class XRLLinkWebAccount : XRLPayload
	{
		public uint credentialType=1;
		public ushort webIdLen;
		public byte[] webId;
		public byte webIdIsOwner=1;
		public ushort gamertagLen;
		public string gamertag;
		public ushort phonePrefixLen;
		public string phonePrefix;
		public ushort phoneNumberLen;
		public string phoneNumber;
		public ushort phoneExtensionLen;
		public string phoneExtension;
		public ushort postalCodeLen;
		public string postalCode;
		public ushort cardHolderLen;
		public string cardHolder;
		public ushort cardNumberLen;
		public string cardNumber;

		protected override string GetServiceName()
		{
			return "/xuacs/linkwebaccount.ashx";
		}

		public bool Execute(out XRLLinkWebAccountResponse Response)
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs_int), out Response);
		}

		public bool Execute(LiveServer sServer, out XRLLinkWebAccountResponse Response)
		{
			// link accounts are done on the datacenter port
			return Execute(sServer.EPBack[0], out Response);
		}

		public bool Execute(IPEndPoint endPoint, out XRLLinkWebAccountResponse Response)
		{
			Response = null;

			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool bRet = InternalExecute(endPoint, reqStream);

			if(bRet)
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == HResult.S_OK))
				{
					Response = new XRLLinkWebAccountResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					Response.ReadStream( respBuff );
				}
			}
			return bRet;
		}


		public override string GetDumpString()
		{
			return base.GetDumpString () + ", gamertag: " + gamertag;
		}

		 //-----------------------------------------------------
        // WriteToResponse
        //
        //      this overrideable implementation uses reflection
        //      to find any instance fields, and writes
        //      most common types to the response stream in the
        //      order of declaration.
        //
        //      - strings are sent in UTF8.
        //      - DateTime is sent as a SYSTEMTIME struct as
        //      defined by windows.h(?)
        //
        public virtual void WriteToResponse(HttpResponse resp)
        {
            BinaryWriter writer = new BinaryWriter(resp.OutputStream);
            Debug.Assert(resp.ContentEncoding is UTF8Encoding, "Unexpected encoding type!");
            WriteToResponse(writer, (UTF8Encoding)resp.ContentEncoding);
        }

        public virtual void WriteToResponse(BinaryWriter writer, UTF8Encoding enc)
        {
            Type t = this.GetType();

            // Allow the base WireData class to write
            WriteStream(writer);
        }

        public virtual byte[] GetBytes()
        {
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);

            WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);
            writer.Flush();

            return stream.ToArray();
        }


	}


	public class XRLLinkWebAccountResponse : WireData
	{
		public ulong UserPuid;
		public ulong OwnerPuid;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLGetSubscriptionStatus.cs ===
using System;
using System.IO;
using System.Net;
using xonline.common.config;
using xonline.common.service;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	/// Summary description for XRLGetSubscriptionStatus.
	/// </summary>
	public class XRLGetSubscriptionStatus : XRLPayload
	{
		[XRLPayloadFld(IsUPuid=true)]
		public ulong userPuid;
		[XRLPayloadFld(IsMPuid=true)]
		public ulong machinePuid;
		[XRLPayloadFld(IsTitleId=true)]
		public uint  titleId=0xfffe0000;
		public uint  serviceId=(uint) XOService.User_Account;
		public uint  languageId=1;

		protected override string GetServiceName()
		{
			return "/xuacs/getsubscriptionstatus.ashx";
		}

		public bool Execute(out XRLGetSubscriptionStatusResponse Head, out XRLGetSubscriptionStatusDetails []Details)
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs), out Head, out Details);
		}

		public bool Execute(LiveServer sServer, out XRLGetSubscriptionStatusResponse Head, out XRLGetSubscriptionStatusDetails []Details)
		{
			return Execute(sServer.EPDefault, out Head, out Details);
		}

		public bool Execute(IPEndPoint endPoint, out XRLGetSubscriptionStatusResponse Head, out XRLGetSubscriptionStatusDetails []Details)
		{
			Head = new XRLGetSubscriptionStatusResponse();
			Details = new XRLGetSubscriptionStatusDetails[1];

			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool bRet = InternalExecute(endPoint,reqStream);

			if(bRet)
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == HResult.S_OK))
				{
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					Head.ReadStream( respBuff );

					if (Head.renewalOfferId!=0)
						Details = new XRLGetSubscriptionStatusDetails[2];

					for (int i=0; i<Details.Length; i++)
					{
						Details[i] = new XRLGetSubscriptionStatusDetails();
						Details[i].ReadStream( respBuff );
					}
				}
			}
			return bRet;
		}


		public XRLGetSubscriptionStatus()
		{
			//
			// TODO: Add constructor logic here
			//
		}


		static public void Dump(XRLGetSubscriptionStatusResponse response, XRLGetSubscriptionStatusDetails []details)
		{
			Console.WriteLine("    Current offer ID : "+response.currentOfferId.ToString("X"));
			Console.WriteLine("Current offer status : "+response.currentOfferStatus);
			Console.WriteLine("          Start date : "+response.startDate.ToLocalTime());
			Console.WriteLine("            End date : "+response.endDate.ToLocalTime());
			Console.WriteLine("       Next offer ID : "+response.renewalOfferId.ToString("X"));
			Console.WriteLine("   Next offer status : "+response.renewalStatus);
			Console.WriteLine("               Grace : "+response.renewalGracePeriod);
		}
	}

	public class XRLGetSubscriptionStatusResponse : WireData
	{
		public ulong currentOfferId;
		public byte  currentOfferStatus;
		public byte  anniversaryDate;
		public DateTime startDate;
		public DateTime endDate;
		public uint  renewalGracePeriod;
		public byte  renewalStatus;
		public ulong renewalOfferId;

		//
		// + Details object for current offer
		//

		//
		// + Details object for renewal offer if applicable
		//
	}

	public class XRLGetSubscriptionStatusDetails : WireData
	{
		public uint   wholePart;
		public byte   fractionalPart;
		public byte   currencyFormat;
		[WireInfo(ArraySize=3)]
		public string ISOCode;
		public uint   offeringDetails;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLGetPostalCode.cs ===
using System;
using System.IO;
using System.Net;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	/// Handles the UACS GetPostalCode API
	/// </summary>
	public class XRLGetPostalCode : XRLPayload
	{
		public class XRLGetPostalCodeResponseHead : XRLPayload
		{
			public byte matchCount   = 0;
		}

		public byte countryId    = 0;
		public ushort postalCodeLen = 0;
		public string postalCode = string.Empty;

		protected int	HitsReturned=0;			// Used for dumping info

		protected override string GetServiceName()
		{
			return "/xuacs/getpostalcode.ashx";
		}

		public int Execute(out XRLGetPostalCodeResponse []codes)
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs), out codes);
		}

		public int Execute(LiveServer sServer, out XRLGetPostalCodeResponse []Items)
		{
			return Execute(sServer.EPDefault, out Items);
		}

		public int Execute(IPEndPoint endPoint, out XRLGetPostalCodeResponse []Items)
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			Items=null;
			HitsReturned = -1;
			bool bRet = InternalExecute(endPoint, reqStream);

			if(bRet)
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == HResult.S_OK))
				{
					XRLGetPostalCodeResponseHead Head = new XRLGetPostalCodeResponseHead();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					Head.ReadStream( respBuff );

					Items = new XRLGetPostalCodeResponse[Head.matchCount];
					for (int i=0; i<Head.matchCount; i++)
					{
						Items[i] = new XRLGetPostalCodeResponse();
						Items[i].ReadStream( respBuff );
					}
					HitsReturned = (int) Head.matchCount;
				}
			}

			return HitsReturned;
		}

		public XRLGetPostalCode()
		{
		}
	}

	public class XRLGetPostalCodeResponse : XRLPayload
	{
		public ushort postalCodeLen = 0;
		public string postalCode    = String.Empty;

		public ushort provinceLen    = 0;
		public string province      = String.Empty;

		public ushort cityLen        = 0;
		public string city          = String.Empty;

		public ushort streetLen      = 0;
		public string street        = String.Empty;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLRenewSubscription.cs ===
using System;
using System.IO;
using System.Net;
using ServerTestFramework;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	/// Summary description for XRLRenewSubscription.
	/// </summary>
	public class XRLRenewSubscription : XRLPayload
	{
		[XRLPayloadFld(IsUPuid=true)]
		public ulong    userPUID        =0;
		[XRLPayloadFld(IsMPuid=true)]
		public ulong    machineId       =4;
		[XRLPayloadFld(IsTitleId=true)]
		public uint     titleId         =XOn.DASH_TITLE_ID;
		public ulong    offerId         =0;
		public ushort   voucherLen      =0;
		public string   voucher         =null;

		protected override string GetServiceName()
		{
			return @"/xuacs/RenewSubscription.ashx";
		}

		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs));
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\UacsCommon.cs ===
using System;
using System.Text;
using System.IO;
using System.Threading;
using System.Reflection;
using ServerTestFramework;
using System.Collections;
using System.DirectoryServices;
using System.Security.Cryptography;

using Microsoft.Webstore.WstClient;
using xonline.common.sql.webstore;
using xonline.common.config;

using ServerTestFramework.WebWidget;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.UserAccount.WebService2;
using ServerTestFramework.LiveService.Billing;


namespace ServerTestFramework.LiveService.UserAccount
{
    /// <summary>
    /// This class will be aggregated into TestBase to provide common UACS functionality
    /// </summary>
    public partial class UacsCommon
    {
        private const int MAX_XEUSER_THREAD_COUNT = 3;
        private const int NUM_PASSPORT_CREATION_RETRIES = 10;

        public static readonly uint DashTitleId_Xbox = 0xFFFE0000;
        public static readonly uint DashTitleId_Xenon = 0xFFFE07D1;
                public static readonly uint WM_TitleId = 0x584D07D6;

        public RandomEx Random;
        private static PassportTestClient m_passportClient = new PassportTestClient();

        class CreatePrivateUsersThread : ThreadBase
        {
            public int            MaxEntries;
            public string        Prefix;
            public CPUIDList    PuidList;
            public bool            Link;

            protected override void ThreadBody()
            {
                UacsCommon ua=new UacsCommon();
                WCUserAccount wcua=null;
                if( Link )
                {
                    wcua = new WCUserAccount();
                }

                while (PuidList.GetSize()<MaxEntries)
                {
                    ulong l=0;
                    Owner ownr=ua.GenerateOwner();
                    ownr.gamertag=Prefix+ua.Random.GenerateRandomNameString(6);
                    try
                    {
                        l=ownr.Create();
                    }
                    catch (System.IO.IOException e)
                    {
                        Global.RO.Warn("UACSCommon.CreatePrivateUsers, failed to create an account with:" + e.ToString());
                        continue;
                    }
                    if (l!=0)
                    {
                        byte[] webId = null;

                        if( Link )
                        {
                            webId = ua.GenerateWebId( l );
                            wcua.LinkUser( webId, true, ownr );
                        }
                        PuidList.Add( l, ownr.gamertag, webId );
                    }
                    else
                        ownr.Dump();
                }
            }
        }

        public CPUIDList CreatePrivateUsers(string prefix, int count )
        {
            return( CreatePrivateUsers( prefix, count, false ) );
        }
        public CPUIDList CreatePrivateUsers(string prefix, int count, bool linked )
        {
            CPUIDList myList=new CPUIDList(count);
            int i;
            int maxThreads=10;

            if(prefix.Length>7)
                throw new ArgumentException("Prefix length must be at most 7 characters");

            // First get all the users in the UODB that match this prefix
            UodbWS.PopulatePuidList(prefix,ref myList);

            // Then Get their webID's if we want them linked
            if( linked )
            {
                WCUserAccount wcua = new WCUserAccount();

                for( i = 0; i < myList.GetSize(); ++i )
                {
                    UserWebMappingList linkList = UodbWS.GetUserWebMapping( myList[i].Puid );

                    if( linkList.Length == 1 )
                    {
                        if( linkList[0].Puid != myList[i].Puid  )
                            throw new Exception( "Puid doesn't match linked user" );

                        myList[i].WebId = linkList[0].GamerWebId;
                    }
                    else if( linkList.Length == 0 )
                    {
                        Owner ownerReloaded = new Owner( myList[i].GamerTag );
                        byte[] webId = GenerateWebId( myList[i].Puid );
                        wcua.LinkUser( webId, true, ownerReloaded );
                        myList[i].WebId = webId;
                    }
                    else
                    {
                        throw new Exception( "WTF" );
                    }
                }
            }

            if (myList.GetSize()!=count)
            {
                // Ok, we need some more. Spawn threads!
                CreatePrivateUsersThread []threads=new CreatePrivateUsersThread[maxThreads];
                try
                {
                    for (i=0; i<maxThreads; i++)
                    {
                        threads[i]=new CreatePrivateUsersThread();
                        threads[i].MaxEntries=count;
                        threads[i].Prefix=prefix;
                        threads[i].PuidList=myList;
                        threads[i].Link = linked;
                        threads[i].Go();    // fly! fly my pretties!
                    }

                    Global.RO.Info("Creating "+count+" users with prefix ["+prefix+"]");

                    ProgressInfo progress = new ProgressInfo("Creating user", (uint)count, 1);

                    // Ok, now let's just wait for the list to be filled up
                    while (myList.GetSize()<count)
                    {
                        progress.SetValue((uint)myList.GetSize());
                        Thread.Sleep(250);
                    }

                    progress.SetValue((uint)count);

                    // Make sure  everyones done with puidlist
                    for( i=0; i < maxThreads; i++ )
                    {
                        while( threads[i].TaskThread.IsAlive )
                        {
                            Thread.Sleep( 10 );
                        }
                    }
                }
                catch (System.Threading.ThreadAbortException) //if our thread is being aborted, abort our little children too
                {
                    for(i=0; i<maxThreads; ++i)
                    {
                        if (threads[i]!=null && threads[i].TaskThread!=null)
                            threads[i].TaskThread.Abort();
                    }
                }
            }

            Global.RO.Info("Created "+(linked?"and linked ":"")+myList.GetSize()+" users, prefix ["+prefix+"]");
            return myList;
        }

        public byte[] GenerateWebId()
        {
            return GenerateWebId((ulong)Random.Next());
        }

        public UacsCommon()
        {
            this.Random = new RandomEx();
        }

        public byte[] GenerateWebId(ulong puid)
        {
            return WCUserAccount.PuidToWebID( puid );
        }

        public ulong CreateUser()
        {
            return CreateUser(GenerateOwner());
        }

        public ulong CreateUser(Owner.Country country)
        {
            return CreateUser(GenerateOwner(country));
        }

        public ulong CreateUser(byte country)
        {
            return CreateUser(GenerateOwner(country));
        }

        public ulong CreateUser(Owner ownr)
        {

            ulong puid=ownr.Create();
            if (puid==0)
                throw new UnexpectedTestResultException("Puid returned from CreateUser was 0");
            Global.RO.Info("Created user: "+ownr.gamertag+", PUID: " + puid + " (" + puid.ToString("x") + ")");

            return puid;
        }

        /// <summary>
        /// Generates and creates a user.
        /// </summary>
        /// <param name="ownr"></param>
        /// <returns></returns>
        public ulong CreateUser(out Owner ownr)
        {
            ownr=GenerateOwner();
            return CreateUser(ownr);
        }

        public Owner GenerateOwner()
        {
            Owner NewOwner=new Owner(Random.GenerateRandomString(15));
            return NewOwner;
        }

        public Owner GenerateOwner(Owner.Country cc)
        {
            return GenerateOwner((byte) cc);
        }

        public Owner GenerateOwner(byte CountryCode)
        {
            Owner NewOwner=new Owner(Random.GenerateRandomString(15));
            NewOwner.SetAddress(CountryCode);
            return NewOwner;
        }

        public void GenerateVisaCard(ulong userPuid)
        {
            XRLXeAddPaymentInstrument request = new XRLXeAddPaymentInstrument();

            request.UserPuid = userPuid;
            request.MachinePuid = 0x00ff00ff00ff00ff;    // this can be any number
            request.PaymentInstrumentType = (byte)XRLXeAddPaymentInstrument.PaymentInstrumentTypeEnum.CreditCard;

            // address info
            request.AddressInfo = new AddressInfoData();
            request.AddressInfo.Street1       = "4455 148th Ave NE";
            request.AddressInfo.Street2       = "";
            request.AddressInfo.City          = "Bellevue";
            request.AddressInfo.District      = "";
            request.AddressInfo.State         = "WA";
            request.AddressInfo.PostalCode    = "98007";

            request.PhoneInfo = new PhoneInfoData();
            request.PhoneInfo.PhonePrefix     = "425";
            request.PhoneInfo.PhoneNumber     = "861-6245";
            request.PhoneInfo.PhoneExtension  = "";

            request.CreditCardInfo = new CreditCardInfoData();
            request.CreditCardInfo.AccountHolderName  = "Mike Martinsen";
            request.CreditCardInfo.AccountNumber      = ServerTestFramework.Utilities.CreditCardRandomizer.GetRandomAccountNumber("visa");
            request.CreditCardInfo.CardType           = (byte)CreditCardInfoData.CreditCardType.Visa;
            request.CreditCardInfo.CcvNumber          = "123";
            request.CreditCardInfo.ExpirationDate     = DateTime.UtcNow.AddYears(2);

            request.DirectDebitInfo = new DirectDebitInfoData();
            // no need to populate the dd info since we won't be using this.

            XRLXeAddPaymentInstrumentResponse response = new XRLXeAddPaymentInstrumentResponse();

            if (!request.Execute(out response))
            {
                throw new Exception("GenerateVisaCard failed: " + request.GetDumpString());
            }
        }

        public XRLXeGetPaymentInstrumentsResponse GetPaymentInstruments(ulong userPuid)
        {
            XRLXeGetPaymentInstruments request = new XRLXeGetPaymentInstruments();
            request.UserPuid = userPuid;
            request.MachinePuid = 0x9000000000000000;    // random value
            request.MaxResults = 999;

            XRLXeGetPaymentInstrumentsResponse response = new XRLXeGetPaymentInstrumentsResponse();
            if (!request.Execute(out response))
            {
                throw new Exception("GetPaymentInstruments failed: " + response.GetDumpString());
            }

            return response;
        }

        public static void XePassportGetEncryptedProxyParameters(int serviceId, out uint publicKeyPublicExponent,
            out byte[] publicKeyModulus, out byte[] publicKeyDigest, out string loginTokenRequest)
        {
            XRLXePassportGetEncryptedProxyParameters request = new XRLXePassportGetEncryptedProxyParameters();
            XRLXePassportGetEncryptedProxyParametersResponse response = new XRLXePassportGetEncryptedProxyParametersResponse();

            request.EPLServiceId = serviceId;
            if (!request.Execute(out response))
                throw new UnexpectedTestResultException("XRLXePassportGetEncryptedProxyParameters failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLXePassportGetEncryptedProxyParameters returned XErr=0x{0:x}", request.XErr));

            if (response.LoginTokenRequestLength == 0 || response.PublicKeyModulusLength == 0)
                throw new UnexpectedTestResultException("Expected non null LoginToken and PublicKeyModulus.");

            loginTokenRequest = response.LoginTokenRequest;
            publicKeyDigest = response.PublicKeyDigest;
            publicKeyModulus = response.PublicKeyModulus;
            publicKeyPublicExponent = response.PublicKeyPublicExponent;
        }

        public static byte[] XePassportLogin(string memberName, string password)
        {
            XRLXePassportLogin request = new XRLXePassportLogin();
            XRLXePassportLoginResponse response = new XRLXePassportLoginResponse();

            byte[] encryptedSessionKey = null;
            byte[] encryptedPassword = null;
            byte[] encryptedToken = null;

            // encrypt the parts we need for login.
            PassportTestClient passportTestClient = new PassportTestClient();
            passportTestClient.Init();
            passportTestClient.GenerateEncryptedLoginParts(password, out encryptedSessionKey, out encryptedPassword, out encryptedToken);

            // login with the member name
            request.PassportMemberName = memberName;
            request.EncryptedSessionKey = encryptedSessionKey;
            request.EncryptedPassword = encryptedPassword;
            request.EncryptedTokenRequest = encryptedToken;

            // try login.
            if (!request.Execute(out response)) return null;
            if (request.XErr != HResult.S_OK) return null;

            return response.SessionToken;
        }

        public PassportUser CreatePassportUser()
        {
            return CreatePassportUser((byte)XeUser.Country.US);
        }

        public PassportUser CreatePassportUser(byte countryId)
        {
            return CreatePassportUser(null, countryId);
		}
        public bool GetPassportMembernameExists(string memberName)
        {
            XRLXePassportGetPuidFromMemberName req = new XRLXePassportGetPuidFromMemberName();
            XRLXePassportGetPuidFromMemberNameResponse resp = new XRLXePassportGetPuidFromMemberNameResponse();
            req.memberName = memberName;
            req.memberNameLength = (ushort)memberName.Length;

            if (!req.Execute(out resp)) throw new Exception("XePassportGetPuidFromMemberName failed for user " + memberName + ": " + req.GetDumpString());
            if (req.XErr != HResult.S_OK)
                throw new Exception(String.Format("XePassportGetPuidFromMemberName failed (XErr={0}): {1}", req.XErr, req.GetDumpString()));

            if (resp.passportPuid != 0x0)
                return true;
            else
                return false;
        }

        public PassportUser CreatePassportUser(string memberName, byte countryId)
        {
            string password = "supersecret";

            if (string.IsNullOrEmpty(memberName))
            {
                for (int i = 0; i < NUM_PASSPORT_CREATION_RETRIES; i++)
                {
                    memberName = "xbltest-" + Guid.NewGuid().ToString() + Global.PassportMemberDomain;
                    if (!GetPassportMembernameExists(memberName))
                    {
                        break;
                    }
                    Global.RO.Info("Passport " + memberName + " already exists. retrying...");
                }
            }

            // create the passport user here.
            PassportUser ppu = new PassportUser();
            ppu.MemberName = memberName;
            ppu.Password = password;
            ppu.SecretQuestion = "Does your dog bite?";
            ppu.SecretAnswer = "It's not my dog.";

            XRLXePassportCreate request = new XRLXePassportCreate();
            XRLXePassportCreateResponse response = new XRLXePassportCreateResponse();

            request.PassportMemberName = ppu.MemberName;
            request.SecretQuestion = ppu.SecretQuestion;
            request.countryId = countryId;

            PassportTestClient passport = new PassportTestClient();
            passport.Init();
            passport.GenerateEncryptedCredentials("", ppu.Password, ppu.SecretAnswer, out request.EncryptedPassword);

            if (!request.Execute(out response)) throw new Exception("CreatePassportUser failed for user "+memberName + ": " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new Exception(String.Format("CreatePassportUser failed (XErr={0}): {1}", request.XErr, request.GetDumpString()));

            ppu.SessionToken = response.SessionToken;

            return ppu;
        }

        public enum CatalogStoreTypeEnum : int
        {
            Xbox360 = 1,
            Zune,
            GamesForWindows,
            Zest,   // the new Zune store for video
            TestStaticOfferStore = 100,
            TestDynamicOfferStore = 101,
            TestVideoStore = 10000
        }

        public enum MediaTypeEnum : uint
        {
            Game360 = 1,
            Movie = 2,
            TVShow = 3,
            MusicVideo = 4,
            ArcadeDemo = 5,
            ViralVideo = 7,
            TVEpisode = 8,
            TVSeason = 9,
            TVSeries = 10,
            TVNetwork = 11,
            Poster = 12,
            Podcast = 13,
            Image = 14,
            BoxArt = 15,
            ArtistPicture = 16,
            ScreenShot = 17,
            InGameContent = 18,
            GameDemo = 19,
            Theme360 = 20,
            Xbox1Game = 21,
            GamerTile = 22,
            ArcadeGame = 23,
            InGameConsumable = 24,
            Track = 25,
            Album = 26,
            AlbumDisc = 27,
            AlbumArt = 28,
            Music = 29,
            GameVideo = 30,
            BackgroundArt = 31,
            Playlist = 32,
            TVTrailer = 33,
            GameTrailer = 34,
            VideoShort = 35,
            Bundle = 36,
            CommunityGame = 37,
            Promotional = 39,
            MovieTrailer = 40,
            GamePackagedVideo = 42,
            AvatarItem = 47,
            PointsBundle = 49,
            GamerTagChange = 48,
            GameSubscription = 50,
            LiveSubscription = 51,
            AddonSubscription = 52,
            MobileGame = 58,
            MobilePDLC = 59,
            MobileConsumable = 60
        };
        public class PassportUser
        {
            public string MemberName;
            public string SecretQuestion;
            public byte[] SessionToken;

            private string m_password = "";
            private string m_secretAnswer = "";
            private byte[] m_encryptedPassword = null;

            public string Password
            {
                get { return m_password; }
                set
                {
                    m_encryptedPassword = null;    // reset the encrypted password
                    m_password = value;
                }
            }

            public string SecretAnswer
            {
                get { return m_secretAnswer; }
                set
                {
                    m_encryptedPassword = null;    // reset the encrypted password
                    m_secretAnswer = value;
                }
            }

            public byte[] EncryptedPassword
            {
                get
                {
                    // get the encrypted password here.
                    if (m_encryptedPassword == null)
                    {
                        m_passportClient.GenerateEncryptedCredentials("", Password, SecretAnswer, out m_encryptedPassword);
                    }
                    return m_encryptedPassword;
                }
            }

            public ulong PassportPuid
            {
                get
                {
                    if (this.SessionToken == null) throw new Exception("The passport puid can not be retrieved if the session token is null.");
                    if (this.SessionToken.Length < 28) throw new Exception("The session token is an unexpected length.");

                    // The puid is contained within the first 8 bytes of the session token.
                    // Extract the first 8 bytes and return it.
                    return (ulong)BitConverter.ToInt64(SessionToken, 0);
                }
            }
        }

        public class XeUserList : System.Collections.ArrayList
        {
            public XeUserList()
            {
            }

            public XeUserList(int Capacity)
            {
                base.Capacity = Capacity;
            }

            public new XeUser this[int index]
            {
                get
                {
                    return (XeUser)base[index];
                }
                set
                {
                    base[index] = value;
                }
            }
        }

        private static UserConfig config;
        private class UserConfig
        {
            public string Prefix;
            public bool UseRealPassport;
            public XeUserList UserList;

            public UserConfig(string Prefix, bool UseRealPassport, XeUserList UserList)
            {
                this.Prefix = Prefix;
                this.UseRealPassport = UseRealPassport;
                this.UserList = UserList;
            }
        }

        private void CreateXeUserThreadProc()
        {
            XeUser user;
            ulong xePuid = 0;
            int attempts = 0;
            int TotalAttempts = 10;

            do
            {
                attempts++;
                string gamerTag = Random.GenerateRandomString(config.Prefix, 15);
                user = new XeUser(config.UseRealPassport, gamerTag);

                try
                {
                    xePuid = user.Create();
                }
                catch (System.Exception)
                {
                    if (attempts == TotalAttempts)
                    {
                        throw;
                    }
                    Thread.Sleep(100);
                }
            } while (xePuid == 0 && attempts < TotalAttempts);

            if (xePuid == 0)
            {
                throw new ServerTestFramework.UnexpectedTestResultException("Unable to create Xenon users");
            }

            config.UserList.Add(user);
        }

        public XeUserList CreateXeUsers(string Prefix, int Count)
        {
            return (CreateXeUsers(Prefix, Count, false));
        }

        public XeUserList CreateXeUsers(string Prefix, int Count, bool UseRealPassport)
        {
            XeUserList xeUserList = new XeUserList(Count);
            config = new UserConfig(Prefix, UseRealPassport, xeUserList);

            uint currentCount = 0;
            uint threadCount = 0;
            Thread[] createXeUserThreads = new Thread[MAX_XEUSER_THREAD_COUNT];

            while (currentCount <= Count)
            {
                if (threadCount == MAX_XEUSER_THREAD_COUNT)
                {
                    bool finished = false;
                    while (!finished)
                    {
                        for (int index = 0; index < createXeUserThreads.Length; index++)
                        {
                            Thread thread = createXeUserThreads[index];
                            if ((thread.ThreadState & ThreadState.Stopped) == ThreadState.Stopped)
                            {
                                createXeUserThreads[index] = ThreadMaker.CreateThread(CreateXeUserThreadProc);
                                createXeUserThreads[index].Start();
                                currentCount++;
                                finished = true;
                            }
                        }
                        if (!finished)
                        {
                            Thread.Sleep(100);
                        }
                    }
                }
                else
                {
                    createXeUserThreads[threadCount] = ThreadMaker.CreateThread(CreateXeUserThreadProc);
                    createXeUserThreads[threadCount].Start();
                    threadCount++;
                    currentCount++;
                }
            }
            foreach (Thread thread in createXeUserThreads)
            {
                thread.Join();
            }
            return (xeUserList);
        }

        public static ulong RandomXenonMachineUid()
        {
            return ServerTestFramework.Core.Utilities.RandomEx.GlobalRandGen.NextUlong() & 0x0000ffffffffffff | 0xfa00000000000000;
        }

        public static ulong CreateXenonMachineUid()
        {
            ulong puid = RandomXenonMachineUid() ;
            string sn = ServerTestFramework.Core.Utilities.RandomEx.GlobalRandGen.GenerateRandomAlphaNumericString(10,14);

            string sqlCmd = String.Format("insert into t_machines (bi_machine_puid,vc_serial_num,dt_blocked_date,dt_reset_date,ti_beta_user,si_hash_bucket,dt_change_datetime,i_beta_title_id) values ({0},'{1}','9999-12-31 00:00:00.000',getutcdate(),0,0,getutcdate(),null)", (long)puid, sn);
			UodbWS.ExecuteSQLNonQuery(sqlCmd, puid);

            return puid;
        }


        public static ulong RandomWM7MachineUid()
        {
            return ServerTestFramework.Core.Utilities.RandomEx.GlobalRandGen.NextUlong() & 0x0000ffffffffffff | 0xfc00000000000000;
        }

        public static ulong CreateWM7MachineUid()
        {
            ulong puid = RandomWM7MachineUid() ;
            string sn = ServerTestFramework.Core.Utilities.RandomEx.GlobalRandGen.GenerateRandomAlphaNumericString(10,14);

            string sqlCmd = String.Format("insert into t_machines (bi_machine_puid,vc_serial_num,dt_blocked_date,dt_reset_date,ti_beta_user,si_hash_bucket,dt_change_datetime,i_beta_title_id) values ({0},'{1}','9999-12-31 00:00:00.000',getutcdate(),0,0,getutcdate(),null)", (long)puid, sn);
			UodbWS.ExecuteSQLNonQuery(sqlCmd, puid);

            return puid;
        }

        public static ulong RandomXboxcomMachineUid()
        {
            return ServerTestFramework.Core.Utilities.RandomEx.GlobalRandGen.NextUlong() & 0x0000ffffffffffff | 0xFFED000000000000;
        }

        public static ulong CreateXboxcomMachineUid()
        {
            ulong puid = RandomXboxcomMachineUid() ;
            string sn = ServerTestFramework.Core.Utilities.RandomEx.GlobalRandGen.GenerateRandomAlphaNumericString(10,14);

            string sqlCmd = String.Format("insert into t_machines (bi_machine_puid,vc_serial_num,dt_blocked_date,dt_reset_date,ti_beta_user,si_hash_bucket,dt_change_datetime,i_beta_title_id) values ({0},'{1}','9999-12-31 00:00:00.000',getutcdate(),0,0,getutcdate(),null)", (long)puid, sn);
            UodbWS.ExecuteSQLNonQuery(sqlCmd, puid);

            return puid;
        }

        public static ulong GetXuidFromPuid(ulong puid)
        {
            ulong xuid;

            string sqlCmd = String.Format("SELECT bi_user_puid FROM t_user_passport_puids where bi_user_passport_puid = {0} and bi_user_puid <> 0xFFFFFFFFFFFFFFFF", puid);

            object obj = UodbWS.ExecuteSQLScalar(sqlCmd, puid);
            if(obj == null)
            {
                xuid = 0;
            }
            else
            {
                xuid = (ulong)(long) obj;
            }

            Global.RO.Info("xuid = 0x{0:X} for puid = 0x{1:X} .", xuid ,puid);

            return xuid;
        }

        public static bool IsFreeGamerEligibleFlagSet(ulong xuid)
        {
            string flag;

            flag = UodbWS.GetUserProperty(xuid, "f_free_gamertag_eligible");

            return(flag == "1");

        }

        public static ulong CreateMobileAccountGeneral()
        {
            ulong xuid;
            byte[] ownerPassportToken;

            xuid = CreateMobileAccountGeneral(out ownerPassportToken) ;

            return xuid;
        }

        public static ulong CreateMobileAccountGeneral(out byte[] ownerPassportToken)
        {
            UacsCommon UACS = new UacsCommon();

            ulong machinePuid = CreateWM7MachineUid();

            // Create Passport
            UacsCommon.PassportUser passportUser = UACS.CreatePassportUser();
            ulong userPassportPuid = passportUser.PassportPuid;
            ownerPassportToken = passportUser.SessionToken;

            Global.RO.Info("userPassportPuid : 0x{0:X}", userPassportPuid);

            ServerTestFramework.LiveService.UserAccount.WebService2.SvcProviderWrapper Provider= new ServerTestFramework.LiveService.UserAccount.WebService2.SvcProviderWrapper(userPassportPuid, 0, machinePuid, 0x584D07D6);

            // Generate gamer tag

            RandomEx rnd = new RandomEx();
            string seed = rnd.GenerateRandomString(5);

            string gamertag  = Provider.GenerateGamertag(seed, machinePuid, GamertagSuggestionType.SeedSuggestion);
            Global.RO.Info("GenerateGamertag is called with seed {0} and returned gamertag : {1}", seed, gamertag);

            // Create Mobile Account
            ushort LanguageId = 1;              // English
            byte CountryId = 103;             // US
            DateTime Birthdate = DateTime.Now.AddYears(-23);

            Provider.CreateMobileAccount(userPassportPuid, ownerPassportToken, machinePuid, gamertag, CountryId, LanguageId, Birthdate);

            Global.RO.Info("WM7 account for {0} created.", gamertag);


            // Get xuid
            ulong xuid = GetXuidFromPuid(userPassportPuid);

            return xuid;
        }

        public static XeUser CreateGoldXeUserwCCOffer()
        {
            return CreateXeUserWCCOffer(Offers.BaseOffers.GoldCC1Month, false);
        }

        public static XeUser CreateXeUserWCCOffer(Offers.BaseOffers offer, bool bWaitForTransactionFlag)
        {
            return CreateXeUserWCCOffer(offer, bWaitForTransactionFlag, XeUser.Country.US, false, 1, false);
        }

        public static XeUser CreateXeUserWCCOffer(Offers.BaseOffers offer, bool bWaitForTransactionFlag, XeUser.Country countryId, bool createPassport, ushort languageId, bool waitForCsat)
        {
            return CreateXeUser(true, false, offer, countryId, createPassport, bWaitForTransactionFlag, languageId, waitForCsat);
        }

        public static XeUser CreateGoldXeUserWTokenOffer()
        {
            return CreateXeUserWTokenOffer(Offers.BaseOffers.GoldPP1Year, false);
        }

        public static XeUser CreateXeUserWTokenOffer(Offers.BaseOffers offer, bool bWaitForTransactionFlag)
        {
            return CreateXeUserWTokenOffer(offer, bWaitForTransactionFlag, XeUser.Country.US, false, 1, false);
        }

        public static XeUser CreateXeUserWTokenOffer(Offers.BaseOffers offer, bool bWaitForTransactionFlag, XeUser.Country countryId, bool createPassport, ushort languageId, bool waitForCsat)
        {
            return CreateXeUser(false, true, offer, countryId, createPassport, bWaitForTransactionFlag, languageId, waitForCsat);
        }

        public static XeUser CreateXeUser(bool useCreditCard, bool useVoucher, Offers.BaseOffers offer, XeUser.Country countryId, bool createPassport, bool bWaitForTransactionFlag, ushort languageId, bool waitForCsat)
        {
            ulong offerid = Offers.GetBaseOfferId(offer);

            //Global.RO.Info("\n>>>>>>>>>>>>>>>>>>>>>>>>>Creating a user using offer 0x" + offerid.ToString("X"));

            XeUser user = new XeUser(createPassport, countryId);

            user.OfferId = offerid;
            user.CountryId = (byte)countryId;
            user.LanguageId = languageId;

            if (useCreditCard)
            {
                user.BillingToken = "";
                user.PaymentInstrumentType = PaymentInstrumentInfoEx.PaymentInstrumentTypeEnum.CreditCard;
                user.CreditCardInfo = new CreditCardInfoData();
                user.CreditCardInfo.CardType = (byte)CreditCardInfoData.CreditCardType.Visa;
                user.CreditCardInfo.AccountNumber = CreditCardRandomizer.GetRandomAccountNumber("visa");
                user.CreditCardInfo.AccountHolderName = user.FirstName + " " + user.LastName;
                user.CreditCardInfo.CcvNumber = "123";
                user.CreditCardInfo.ExpirationDate = DateTime.UtcNow.AddYears(3);
            }

            if (useVoucher)
            {
                string voucher = Offers.GetBaseOfferPrepaidVoucherCode(offer);
                if (voucher == "")
                {
                    throw new UnexpectedTestResultException(" does not have a voucher code.");
                }
                user.BillingToken = voucher;
            }

            if (user.Create() == 0)
            {
                throw new UnexpectedTestResultException("User creation choked on offer id 0x" + offerid.ToString("X") + "\n" + user.GetDumpString());
            }

            Global.RO.Info("User 0x{0:x} created.", user.UserPuid);

            if (waitForCsat)
            {
                WaitForCSAT(user.UserPuid, bWaitForTransactionFlag);
            }

            return user;
        }

        public static void CreateFamily(int numChildren, out XeUser parent, out XeUser[] children)
        {
            CreateFamily(numChildren, out parent, out children, true);
        }

        public static void CreateFamily(int numChildren, out XeUser parent, out XeUser[] children, bool restricted)
        {
            // Create the parent
            parent = new XeUser(true);
            if(parent.Create() == 0) {
                throw new UnexpectedTestResultException("XeUser.Create() failed: " + parent.GetDumpString());
            }
            Global.RO.Info("Parent user 0x{0:X} ({1}) created.", parent.UserPuid, parent.Gamertag);

            // Create some children (dependent accounts)
            children = new XeUser[numChildren];
            for(int i = 0; i < numChildren; i++) {
                XeUser child = new XeUser(true);
                if(child.CreateMinor(parent, restricted) == 0) {
                    throw new UnexpectedTestResultException("XeUser.Create() failed: " + child.GetDumpString());
                }
                Global.RO.Info("Child[{0}] user 0x{1:X} ({2}) created.", i, child.UserPuid, child.Gamertag);
                children[i] = child;
            }
        }

		public static XeUser CreateXenonUser(byte tier)
		{
			if (tier != 3 && tier != 6)
				throw new UnexpectedTestResultException("Tier can either be 3 or 6.");
		
			XeUser user = new XeUser(true);
			if (tier == 6) user.CreateAsGold = true;
			if (user.Create() == 0) throw new UnexpectedTestResultException("XeUser.Create() failed: " + user.GetDumpString());
            Global.RO.Info("User 0x{0:x} created.", user.UserPuid);

			if(tier == 6)
			{
				UacsCommon.WaitForCSAT(user.UserPuid, false);
			}
		
			return user;
		}
		

        public static ulong CreateXboxComUser(bool UseRealPassport, byte CountryId, out string GamerTag, out PassportUser ppUser)
        {
            UacsCommon uc = new UacsCommon();
            UacsCommon2 uc2 = new UacsCommon2();
                
            ulong UserPuid;
            
            XRLXeCreateXboxComAccount request = new XRLXeCreateXboxComAccount();
            XRLXeCreateXboxComAccountResponse response = new XRLXeCreateXboxComAccountResponse();
            request.CountryId = (byte)CountryId;

            // Create a Passport account
            ppUser = null;
            if (UseRealPassport)
            {
                ppUser = uc.CreatePassportUser(request.Gamertag + Global.PassportMemberDomain, CountryId);
                request.UserPassportPuid = ppUser.PassportPuid;
                request.OwnerPassportPuid = request.UserPassportPuid;
                //UserPassportPuid = request.UserPassportPuid;
            }
            else
            {
                request.UserPassportPuid = PassportUtilities.GenerateRandomULong();
                request.OwnerPassportPuid = request.UserPassportPuid;
                //UserPassportPuid = request.UserPassportPuid;
            }

            // Create an Xbox.Com user
            if (!request.Execute(out response))
                throw new UnexpectedTestResultException("XeCreateXboxComAccount failed: " + request.GetDumpString());

            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XeCreateXboxComAccount returned XErr=0x{0:x}", request.XErr));

            if (response.UserPuid == 0)
                throw new UnexpectedTestResultException("User puid returned was 0.");

            UserPuid = response.UserPuid;
            GamerTag = uc2.GetGamertagFromPuid(UserPuid);

            return UserPuid;
        }

        public static void WaitForCSAT(ulong puid, bool bWaitForTransactionFlag)
        {
            int c = 0;
            while (UodbWS.IsUserQueued(puid) && c < 100)
            {
                c++;
                System.Threading.Thread.Sleep(100);
            }

            if (UodbWS.IsUserQueued(puid))
                throw new UnexpectedTestResultException("User never left queued state.");

            if (bWaitForTransactionFlag)
            {
                if (!WaitForTransactionFlag(puid))
                    throw new UnexpectedTestResultException("Provision never came. Can't continue.");
            }
        }


        // waits until the flag is set to zero. This is usually the case when we're waiting for a provision/deprovision 
        // from callback
        public static bool WaitForTransactionFlag(ulong userPuid)
        {
            int c = 0;

            Database.SubscriptionInfo[] si = UodbWS.GetUserServiceIDs(userPuid);
            while (si[0].transactionFlag != 0 && c < 120)
            {
                c++;
                si = UodbWS.GetUserServiceIDs(userPuid);
                Global.RO.Info("Waiting for callback to set the transactionFlag to 0. Currently at {0}", si[0].transactionFlag);
                System.Threading.Thread.Sleep(500);
            }

            return (si[0].transactionFlag == 0);
        }

        public static bool VerifyFlags(Database.SubscriptionInfo si, int expectedTransaction, int expectedStatus)
        {
            Global.RO.Info("Verifying flags:");
            Global.RO.Info("\tsi.transactionFlag = {0}    expectedTransaction = {1}", si.transactionFlag, expectedTransaction);
            Global.RO.Info("\tsi.statusId        = {0}    expectedStatus      = {1}", si.statusId, expectedStatus);

            if (si.transactionFlag != expectedTransaction || si.statusId != expectedStatus)
            {
                Global.RO.Info("Flags don't match!");
                return false;
            }
            
            if (((TimeSpan)(si.changeTime-DateTime.Now)).TotalHours>9)
            {
                Global.RO.Info("Date " + si.changeTime + ", expected " + DateTime.Now);
                return false;
            }

            return true;
        }

        public static void CallProvisionService(Database.SubscriptionInfo si)
        {
            ServerTestFramework.LiveService.Callback.SvcProviderWrapper.Initialize();
            ServerTestFramework.LiveService.Callback.SvcProviderWrapper provider = new ServerTestFramework.LiveService.Callback.SvcProviderWrapper();

            if (!provider.ProvisionService(ref si))
            {
                throw new UnexpectedTestResultException("ProvisionService failed!");
            }
        }

        public static void CallDeProvisionService(Database.SubscriptionInfo si)
        {
            ServerTestFramework.LiveService.Callback.SvcProviderWrapper.Initialize();
            ServerTestFramework.LiveService.Callback.SvcProviderWrapper provider = new ServerTestFramework.LiveService.Callback.SvcProviderWrapper();

            if (!provider.DeprovisionService(ref si))
            {
                throw new UnexpectedTestResultException("DeprovisionService failed!");
            }
        }

        public static void CallDisableService(Database.SubscriptionInfo si)
        {
            ServerTestFramework.LiveService.Callback.SvcProviderWrapper.Initialize();
            ServerTestFramework.LiveService.Callback.SvcProviderWrapper provider = new ServerTestFramework.LiveService.Callback.SvcProviderWrapper();

            if (!provider.DisableService(ref si, null))
            {
                throw new UnexpectedTestResultException("DisableService failed!");
            }
        }

        public static void CallEnableService(Database.SubscriptionInfo si)
        {
            ServerTestFramework.LiveService.Callback.SvcProviderWrapper.Initialize();
            ServerTestFramework.LiveService.Callback.SvcProviderWrapper provider = new ServerTestFramework.LiveService.Callback.SvcProviderWrapper();

            if (!provider.EnableService(ref si))
            {
                throw new UnexpectedTestResultException("EnableService failed!");
            }
        }

        public static void MigrateWM7UserGeneral( byte[] SessionToken)
        {
            UacsCommon UACS = new UacsCommon();

            // Migrate Xboxcom user
            XRLXeMigrateXboxComUser request = new XRLXeMigrateXboxComUser();
            XRLXeMigrateXboxComUserResponse response = new XRLXeMigrateXboxComUserResponse();

            request.SignedPassportPuid = SessionToken;
            request.OfflineXuid = 0;

            if (!request.Execute(out response))
                throw new UnexpectedTestResultException("XRLXeMigrateXboxComUser failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLXeMigrateXboxComUser returned XErr=0x{0:x}", request.XErr));

            Global.RO.Info("Migrate Xboxcom succeeded.");

            // recover the account
            XRLXeRecoverAccount recover = new XRLXeRecoverAccount();

            recover.Request.signedPuid  = SessionToken;
            recover.Request.machinePuid = MachineEditor.CreateNew(MachineType.Xbox360).Id;;

            if (!recover.Execute())
                throw new UnexpectedTestResultException("XRLXeRecoverAccount failed: " + recover.GetDumpString());

            Global.RO.Info("Recover account succeeded.");
        }


        public static string[] GetXuacsServerNames()
        {
            System.Net.IPEndPoint[] eps = ManagementListener.GetXmgmtEndPoints(xonline.common.config.Interface.xuacs);
            if (eps.Length == 0)
            {
                throw new System.Exception("GetXmgmtEndPoints returned 0 entries for " + xonline.common.config.Interface.xuacs);
            }

            string[] serverNames = new string[eps.Length];
            for (int i = 0; i < eps.Length; ++i)
            {
                string ips = eps[i].Address.ToString();
                System.Net.IPHostEntry hostInfo = System.Net.Dns.GetHostEntry(ips);
                string[] names = hostInfo.HostName.Split(new char[] { '.' });
                serverNames[i] = names[0];
            }

            return serverNames;
        }


        public static void DeleteEmulators()
        {
            string strIISPath   = "IIS://"+System.Net.Dns.GetHostName()+"/W3SVC/1/Root";

            DirectoryEntry objDirectoryEntry = new DirectoryEntry(strIISPath);

            objDirectoryEntry.Invoke("Delete", new string[] {"IIsWebVirtualDir", "MusicNetEmulator" });

            objDirectoryEntry.CommitChanges();

            objDirectoryEntry.Close();
        }

        public static void InstallEmulators()
        {
            string strIISPath   = "IIS://"+System.Net.Dns.GetHostName()+"/W3SVC/1/Root";

            DirectoryEntry objRootDirectoryEntry = new DirectoryEntry(strIISPath);
            objRootDirectoryEntry.RefreshCache();

            DirectoryEntry objNewDirectory = objRootDirectoryEntry.Children.Add("MusicNetEmulator","IIsWebVirtualDir");

            string currDir = Directory.GetCurrentDirectory();
            string emulPath = currDir + @"\emulators\emulator";
            objNewDirectory.Properties["Path"].Insert(0, emulPath);

            objNewDirectory.Invoke("AppCreate", true);

            objNewDirectory.Properties["EnableDirBrowsing"][0] = true;
            objNewDirectory.Properties["AccessExecute"][0] = true;
            objNewDirectory.Properties["AccessRead"][0] = true;
            objNewDirectory.Properties["AccessWrite"][0] = false;
            objNewDirectory.Properties["AuthAnonymous"][0] = true;
            objNewDirectory.Properties["AuthBasic"][0] = false;
            objNewDirectory.Properties["AuthNTLM"][0] = false;

            objNewDirectory.CommitChanges();
            objRootDirectoryEntry.CommitChanges();

            objNewDirectory.Close();
            objRootDirectoryEntry.Close();

            System.Threading.Thread.Sleep(3000);
        }

        public static void AddDependent(XeUser parent, XeUser dependent)
        {
            XRLXeAddDependentRequest addReq = new XRLXeAddDependentRequest();

            addReq.userPuid = dependent.UserPuid;

            ulong oldOwnerPassportPuid = UodbWS.GetUserPassportOwnerPuid(dependent.UserPuid);
            byte[] sessTok = PassportUtilities.GenerateSessionToken(oldOwnerPassportPuid, addReq.Slot.Key);
            addReq.signedOldOwnerPassportPuid = sessTok;

            addReq.ownerPuid = parent.UserPuid;

            if (!addReq.Execute())
            {
                throw new UnexpectedTestResultException(string.Format("AddDependent failed: {0}", addReq.GetDumpString()));
            }
            if (addReq.XErr != HResult.S_OK)
            {
                throw new UnexpectedTestResultException(string.Format("AddDependent didnot return S_OK: {0}", addReq.GetDumpString()));
            }
        }

        public static void RemoveDependent(XeUser parent, XeUser dependent)
        {
            XRLXeRemoveDependentRequest removeReq = new XRLXeRemoveDependentRequest();
            
            removeReq.userPuid = dependent.UserPuid;
            removeReq.ownerPuid = parent.UserPuid;

            if (!removeReq.Execute())
            {
                throw new UnexpectedTestResultException(string.Format("RemoveDependent failed: {0}", removeReq.GetDumpString()));
            }
            if (removeReq.XErr != HResult.S_OK)
            {
                throw new UnexpectedTestResultException(string.Format("RemoveDependent didnot return S_OK: {0}", removeReq.GetDumpString()));
            }
        }
        
		public static void PurchaseFamilyGold(XeUser user)
		{
			string paymentInstrumentId = user.AddPaymentInstrumentVisa();

			// Purchasing regular offer
			XRLXeOfferPurchase purchaseRequest = new XRLXeOfferPurchase();

			purchaseRequest.UserPuid = user.UserPuid;
			purchaseRequest.OfferID = Offers.GetBaseOfferId(Offers.BaseOffers.FamilyGoldCC1Year);	// 12month regular cc offer
			purchaseRequest.LanguageID = user.LanguageId;
			purchaseRequest.CountryID = user.CountryId;
			purchaseRequest.Tier = (byte)UodbWS.GetUserTier(user.UserPuid);
			purchaseRequest.PaymentType = (uint)PaymentTypeEnum.CreditCard;
			purchaseRequest.PaymentInstrumentID = paymentInstrumentId; //paymentInstrumentId;

			if (!purchaseRequest.Execute())
				throw new UnexpectedTestResultException("XRLXeOfferPurchase failed: " + purchaseRequest.GetDumpString());
			if (purchaseRequest.XErr != HResult.S_OK)
				throw new UnexpectedTestResultException(String.Format("XRLXeOfferPurchase returned XErr=0x{0:x}", purchaseRequest.XErr));

			user.OfferId = Offers.GetBaseOfferId(Offers.BaseOffers.FamilyGoldCC1Year);
			user.MachinePuid = RandomXenonMachineUid();
		}

        public static void PurchaseFamilyGoldPMO(XeUser user)
        {
            string paymentInstrumentId = user.AddPaymentInstrumentVisa();

            XRLPreviewProductPurchase pppRequest = new XRLPreviewProductPurchase();
            OfferProductInfo[] offers = new OfferProductInfo[1];
            offers[0] = new OfferProductInfo();
            offers[0].offerId = Offers.GetLiveSubCatalogOfferGuid(Offers.BaseOffers.FamilyGoldCC1Year);
            offers[0].productTypeId = 51;

            pppRequest.offers = offers;
            pppRequest.paymentType = (uint)PaymentTypeEnum.CreditCard;
            pppRequest.paymentInstrumentID = paymentInstrumentId;
            pppRequest.billingToken = "";
            pppRequest.userPuid = user.UserPuid;

            XRLXePreviewProductPurchaseResponse response = new XRLXePreviewProductPurchaseResponse();
            if (!pppRequest.Execute(out response))
                throw new UnexpectedTestResultException("XRLPreviewProductPurchase failed: " + pppRequest.GetDumpString());
            if (pppRequest.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLPreviewProductPurchase returned XErr=0x{0:x}", pppRequest.XErr));

            string[] price = response.previewSubscriptionInfo.netPrice.ToString().Split('.'); 

            OfferMediaTypeExpectedPrice[] offer = new OfferMediaTypeExpectedPrice[1];
            offer[0] = new OfferMediaTypeExpectedPrice();
            offer[0].ExpectedPriceWhole = Convert.ToUInt32(price[0]);
            offer[0].ExpectedPriceFractional = Convert.ToUInt32(price[1]);
            offer[0].MediaTypeId = 51;
            offer[0].OfferId = Offers.GetLiveSubCatalogOfferGuid((Offers.BaseOffers.FamilyGoldCC1Year));

            // Purchasing regular offer
            XRLPurchaseMediaOffers purchaseRequest = new XRLPurchaseMediaOffers();

            purchaseRequest.UserPuid = user.UserPuid;
            purchaseRequest.Offers = offer;
            purchaseRequest.PaymentType = (uint)PaymentTypeEnum.CreditCard;
            purchaseRequest.PaymentInstrumentID = paymentInstrumentId; //paymentInstrumentId;
            purchaseRequest.SubscriptionPurchaseInfo = new SubscriptionPurchaseInfo();
            purchaseRequest.SubscriptionPurchaseInfo.subscriptionTimeExtendedInMonths = (uint)response.previewSubscriptionInfo.timeExtendedinMonths;

            if (!purchaseRequest.Execute())
                throw new UnexpectedTestResultException("XRLPurchaseMediaOffers failed: " + purchaseRequest.GetDumpString());
            if (purchaseRequest.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLPurchaseMediaOffers returned XErr=0x{0:x}", purchaseRequest.XErr));

            user.OfferId = Offers.GetBaseOfferId(Offers.BaseOffers.FamilyGoldCC1Year);
            user.MachinePuid = RandomXenonMachineUid();
        }

        public static XRLXeGetUserSubscriptionDetailsResponse GetUserSubscriptionDetails(ulong userPuid, ulong offerId) 
        {
                XRLXeGetUserSubscriptionDetails request = new XRLXeGetUserSubscriptionDetails();
                XRLXeGetUserSubscriptionDetailsResponse response = new XRLXeGetUserSubscriptionDetailsResponse();

                request.UserPuid = userPuid;
                request.OfferId = offerId;
                request.InstanceId = "";

                if (!request.Execute(out response))
                    throw new UnexpectedTestResultException("XRLXeGetUserSubscriptionDetails failed: " + request.GetDumpString());
                if (request.XErr != HResult.S_OK)
                    throw new UnexpectedTestResultException(String.Format("XRLXeGetUserSubscriptionDetails returned XErr=0x{0:x}", request.XErr));
                return  response;
        }

        public static void PrintUserSubscriptionDetails(ulong userPuid, XRLXeGetUserSubscriptionDetailsResponse response)
        {
            Global.RO.Info("User 0x{0:X}'s subscription details:", userPuid);
            Global.RO.Info("\tSubscriptionId        : {0}", response.SubscriptionId);
            Global.RO.Info("\tDescription           : {0}", response.Description);
            Global.RO.Info("\tCurrentOfferStatus    : {0}", response.CurrentOfferStatus);
            Global.RO.Info("\tFriendlyName          : {0}", response.FriendlyName);
            Global.RO.Info("\tAnniversaryDate       : {0}", response.AnniversaryDate);
            Global.RO.Info("\tPurchaseDate          : {0}", response.PurchaseDate);
            Global.RO.Info("\tActivationDate        : {0}", response.ActivationDate);
            Global.RO.Info("\tEndDate               : {0}", response.EndDate);
            Global.RO.Info("\tHasViolations         : {0}", response.HasViolations);
            Global.RO.Info("\tRenewalGracePeriod    : {0}", response.RenewalGracePeriod);
            Global.RO.Info("\tRenewalOfferStatus    : {0}", response.RenewalOfferStatus);
            Global.RO.Info("\tRenewalOfferId        : 0x{0:X}", response.RenewalOfferId);
            Global.RO.Info("\tDelayedCancel        : {0}", response.delayedCancel.ToString());
            Global.RO.Info("\t--- Current Subscription Details ---");
            Global.RO.Info("\tCurrentOfferDetails.WholePart        : {0}", response.CurrentOfferDetails.WholePart);
            Global.RO.Info("\tCurrentOfferDetails.FractionalPart   : {0}", response.CurrentOfferDetails.FractionalPart);
            Global.RO.Info("\tCurrentOfferDetails.CurrencyFormat   : {0}", response.CurrentOfferDetails.CurrencyFormat);
            Global.RO.Info("\tCurrentOfferDetails.IsoCode          : {0}", response.CurrentOfferDetails.IsoCode);
            Global.RO.Info("\tCurrentOfferDetails.FormattedPrice   : {0}", response.CurrentOfferDetails.FormattedPrice);
            Global.RO.Info("\tCurrentOfferDetails.OfferingDetails  : {0}", response.CurrentOfferDetails.OfferingDetails);
            Global.RO.Info("\t--- Renewal Subscription Details ---");
            Global.RO.Info("\tRenewalOfferDetails.WholePart        : {0}", response.RenewalOfferDetails.WholePart);
            Global.RO.Info("\tRenewalOfferDetails.FractionalPart   : {0}", response.RenewalOfferDetails.FractionalPart);
            Global.RO.Info("\tRenewalOfferDetails.CurrencyFormat   : {0}", response.RenewalOfferDetails.CurrencyFormat);
            Global.RO.Info("\tRenewalOfferDetails.IsoCode          : {0}", response.RenewalOfferDetails.IsoCode);
            Global.RO.Info("\tRenewalOfferDetails.FormattedPrice   : {0}", response.RenewalOfferDetails.FormattedPrice);
            Global.RO.Info("\tRenewalOfferDetails.OfferingDetails  : {0}", response.RenewalOfferDetails.OfferingDetails);
            Global.RO.Info("\t--- Payment Instrument ---");
            Global.RO.Info("\tPaymentInstrument.PaymentInstrumentId      : {0}", response.PaymentInstrument.PaymentInstrumentId);
            Global.RO.Info("\tPaymentInstrument.AddressInfo.Street1      : {0}", response.PaymentInstrument.AddressInfo.Street1);
            Global.RO.Info("\tPaymentInstrument.AddressInfo.Street2      : {0}", response.PaymentInstrument.AddressInfo.Street2);
            Global.RO.Info("\tPaymentInstrument.AddressInfo.City         : {0}", response.PaymentInstrument.AddressInfo.City);
            Global.RO.Info("\tPaymentInstrument.AddressInfo.District     : {0}", response.PaymentInstrument.AddressInfo.District);
            Global.RO.Info("\tPaymentInstrument.AddressInfo.State        : {0}", response.PaymentInstrument.AddressInfo.State);
            Global.RO.Info("\tPaymentInstrument.AddressInfo.PostalCode   : {0}", response.PaymentInstrument.AddressInfo.PostalCode);
            Global.RO.Info("\tPaymentInstrument.PhoneInfo.PhonePrefix    : {0}", response.PaymentInstrument.PhoneInfo.PhonePrefix);
            Global.RO.Info("\tPaymentInstrument.PhoneInfo.PhoneNumber    : {0}", response.PaymentInstrument.PhoneInfo.PhoneNumber);
            Global.RO.Info("\tPaymentInstrument.PhoneInfo.PhoneExtension : {0}", response.PaymentInstrument.PhoneInfo.PhoneExtension);
            Global.RO.Info("\tPaymentInstrument.CreditCardInfo.CardType           : {0}", response.PaymentInstrument.CreditCardInfo.CardType);
            Global.RO.Info("\tPaymentInstrument.CreditCardInfo.AccountHolderName  : {0}", response.PaymentInstrument.CreditCardInfo.AccountHolderName);
            Global.RO.Info("\tPaymentInstrument.CreditCardInfo.AccountNumber      : {0}", response.PaymentInstrument.CreditCardInfo.AccountNumber);
            Global.RO.Info("\tPaymentInstrument.CreditCardInfo.CcvNumber          : {0}", response.PaymentInstrument.CreditCardInfo.CcvNumber);
            Global.RO.Info("\tPaymentInstrument.DirectDebitInfo.AccountHolderName : {0}", response.PaymentInstrument.DirectDebitInfo.AccountHolderName);
            Global.RO.Info("\tPaymentInstrument.DirectDebitInfo.AccountNumber     : {0}", response.PaymentInstrument.DirectDebitInfo.AccountNumber);
            Global.RO.Info("\tPaymentInstrument.DirectDebitInfo.BankCode          : {0}", response.PaymentInstrument.DirectDebitInfo.BankCode);
            Global.RO.Info("\tPaymentInstrument.DirectDebitInfo.BranchCode        : {0}", response.PaymentInstrument.DirectDebitInfo.BranchCode);
            Global.RO.Info("\tPaymentInstrument.DirectDebitInfo.CheckDigits       : {0}", response.PaymentInstrument.DirectDebitInfo.CheckDigits); 
        }

		public static void AssignGoldUser(XeUser parent, XeUser dependent, uint expectedHR)
		{
			XRLXeFamilySubscriptionAssignGoldUser req = new XRLXeFamilySubscriptionAssignGoldUser();
			req.ownerPuid = parent.UserPuid;
			req.userPuid = dependent.UserPuid;
			if (!req.Execute() && expectedHR == HResult.S_OK)
				throw new UnexpectedTestResultException("XRLXeFamilySubscriptionAssignGoldUserRequest failed: " + req.GetDumpString());
			if (req.XErr != expectedHR)
				throw new UnexpectedTestResultException(String.Format("XRLXeFamilySubscriptionAssignGoldUserRequest returned XErr=0x{0:x}", req.XErr));
		}

		public static void AssignGoldUser(XeUser parent, XeUser dependent)
		{
			AssignGoldUser(parent, dependent, HResult.S_OK);
		}

		public static void RemoveGoldUser(XeUser parent, XeUser dependent)
		{
			XRLXeFamilySubscriptionRemoveGoldUser req = new XRLXeFamilySubscriptionRemoveGoldUser();
			req.ownerPuid = parent.UserPuid;
			req.userPuid = dependent.UserPuid;
			if (!req.Execute())
				throw new UnexpectedTestResultException("XRLXeFamilySubscriptionRemoveGoldUserRequest failed: " + req.GetDumpString());
			if (req.XErr != HResult.S_OK)
				throw new UnexpectedTestResultException(String.Format("XRLXeFamilySubscriptionRemoveGoldUserRequest returned XErr=0x{0:x}", req.XErr));
		}

        

        public static void WaitForXCache()
        {
            int wait = Config.GetIntSetting(Setting.xcache_db_pollingInterval);
            Global.RO.Debug("Sleeping " + wait.ToString() + "s (for Xcache)");
            Thread.Sleep(wait * 1000);
        }

        public enum XCache
        {
            Wait,
            NoWait
        }


		public static void ValidateEnumFamilyMembers(ulong requestorPuid, FamilyMember[] expectedFamilyMembers, XCache wait)
		{
			if (wait == XCache.Wait)
				WaitForXCache();

			XRLXeEnumFamilyMembersRequest req = new XRLXeEnumFamilyMembersRequest();
			req.requestorPuid = requestorPuid;

			XRLXeEnumFamilyMembersResponse resp;
			if (!req.Execute(out resp)) {
				throw new UnexpectedTestResultException(string.Format("EnumFamilyMembers failed: {0}", req.GetDumpString()));
			}
			if (req.XErr != 0) {
				throw new UnexpectedTestResultException(string.Format("EnumFamilyMembers returned XErr=0x{0:x}", req.XErr));
			}

            Global.RO.Info("Response shows there are {0} members for user 0x{1:X}.", resp.numFamilyMembers, req.requestorPuid);
            for (ushort idx = 0; idx < resp.numFamilyMembers; idx++)
                Global.RO.Info("The {0}th member in Enum: Puid 0x{1:X}, Flags {2}, Gamertag {3}", idx,
                                resp.familyMembers[idx].userPuid,
                                resp.familyMembers[idx].userFlags,
                                resp.familyMembers[idx].gamertag);


			// 
			if (resp.numFamilyMembers != expectedFamilyMembers.Length)
			{
				throw new UnexpectedTestResultException(string.Format("resp.numFamilyMembers({0}) != expectedFamilyMembers.Length({1})", resp.numFamilyMembers, expectedFamilyMembers.Length));
			}

			// Scan results for each member
			foreach (FamilyMember member in expectedFamilyMembers)
			{
				int idx = Array.FindIndex(resp.familyMembers, c => c.userPuid == member.userPuid);
				if (idx == -1)
				{
					throw new UnexpectedTestResultException(string.Format("EnumFamilyMembersResponse: user 0x{0:X} is missing from response", member.userPuid));
				}
				else 
				{	
					Global.RO.Info("user 0x{0:X} has a flag 0x{1:X}", resp.familyMembers[idx].userPuid, resp.familyMembers[idx].userFlags);
					
					if (resp.familyMembers[idx].userFlags != member.userFlags)
						throw new UnexpectedTestResultException(string.Format("resp.familyMembers[idx].userFlags({0}) != member.userFlags({1})", resp.familyMembers[idx].userFlags, member.userFlags));
					
					if (resp.familyMembers[idx].gamertag != member.gamertag)
						throw new UnexpectedTestResultException(string.Format("resp.familyMembers[idx].gamertag({0}) != member.gamertag({1})", resp.familyMembers[idx].gamertag, member.gamertag));
				}
			}
		}

		public static void VerifyFamilyHistory(ulong PassportOwnerPuid, ulong UserPuid, int hr, bool bGold, byte reason)
		{
            string sql = "SELECT top 1 i_hr, b_family_subscription_gold_user, ti_reason, dt_timestamp " +
                    " FROM dbo.t_family_membership_history WHERE bi_owner_passport_puid = " + (long)PassportOwnerPuid +
					" And bi_dependent_puid = " + (long)UserPuid +
                    //" And ti_reason = " + reason +
					" order by dt_timestamp desc";

			int hrRet=-1;
			bool bGoldRet=false;
			byte reasonRet=98;
			DateTime timeStampRet = DateTime.Today;
			

            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.SetHashVal(PassportOwnerPuid);
                ws.CommandSql = sql;

                using (WstDataReader myDataReader = ws.Execute())
                {
                    if (myDataReader.Read())
                    {
                        hrRet = (int)myDataReader.GetInt32(0);
                        bGoldRet = (bool)myDataReader.GetBoolean(1);
                        reasonRet = (byte)myDataReader.GetByte(2);
                        timeStampRet = (DateTime)myDataReader.GetDateTime(3);
                    }

                    myDataReader.Close();
                }
            }

			Global.RO.Info("Family History table has bi_owner_passport_puid=0x{0:X}, bi_dependent_puid=0x{1:X}, i_hr=0x{2:X}, bGold={3}, reason={4}, timestamp={5}", 
				PassportOwnerPuid, UserPuid, hrRet, bGoldRet, reasonRet, timeStampRet);

			if(hr != hrRet)
				throw new UnexpectedTestResultException(string.Format("hr(0x{0:X}) != hrRet(0x{1:X})", hr, hrRet));
			if(bGold != bGoldRet)
				throw new UnexpectedTestResultException(string.Format("bGold(0x{0:X}) != bGoldRet(0x{1:X})", bGold, bGoldRet));
			if(reason != reasonRet)
				throw new UnexpectedTestResultException(string.Format("reason(0x{0:X}) != reasonRet(0x{1:X})", reason, reasonRet));
		}

		public static bool HasFamilyGoldSubscription(ulong xuid)
		{
            ServerTestFramework.Database.SubscriptionInfo[] sis = UodbWS.GetUserServiceIDs(xuid, (long) Offers.GetBaseOfferId(Offers.BaseOffers.FamilyGoldCC1Year));

            if(sis.Length == 0)
            {
 			    Global.RO.Info("user 0x{0:X} doesn't have FamilyGoldSubscription", xuid);
                return false;
            }

            if(sis[sis.Length-1].statusId == 1)
            {
 			    Global.RO.Info("user 0x{0:X} has FamilyGoldSubscription", xuid);
                return true;
            }

 			    Global.RO.Info("user 0x{0:X} doesn't have FamilyGoldSubscription currently. Current status is {1}", xuid, sis[sis.Length-1].statusId);
            return false;


		}

		public static bool HasFamilyGoldSubscriptionCanceled(ulong xuid)
		{
            ServerTestFramework.Database.SubscriptionInfo[] sis = UodbWS.GetUserServiceIDs(xuid, (long) Offers.GetBaseOfferId(Offers.BaseOffers.FamilyGoldCC1Year));

            if(sis.Length == 0)
            {
 			    Global.RO.Info("user 0x{0:X} doesn't have FamilyGoldSubscription", xuid);
                return false;
            }

            if(sis[sis.Length-1].statusId == 4)
            {
 			    Global.RO.Info("user 0x{0:X} FamilyGoldSubscription has canceled", xuid);
                return true;
            }

 			    Global.RO.Info("user 0x{0:X} FamilyGoldSubscription was not canceled. Current status is {1}", xuid, sis[sis.Length-1].statusId);
            return false;


		}

        public static string ByteArrayToString(byte[] bin)
        {
            StringBuilder str = new StringBuilder(bin.Length * 2 + 1);
            for (int i = 0; i < bin.Length; i++)
            {
                str.Append(bin[i].ToString("x2"));
            }

            return str.ToString();
        }

        public static XRLXeTroubleshootAccountResponse TroubleshootAccount(ulong  xuid)
        {
            XRLXeTroubleshootAccount req = new XRLXeTroubleshootAccount();
            XRLXeTroubleshootAccountResponse response;

            req.UserPuid = xuid;

            if (!req.Execute(out response))
            {
                throw new UnexpectedTestResultException(
                    "XRLXeTroubleshootAccount failed: " +
                    req.GetDumpString());
            }

            if (req.XErr != HResult.S_OK)
            {
                throw new UnexpectedTestResultException(
                    String.Format(
                        "XRLXeTroubleshootAccount returned XErr=0x{0:x}",
                        req.XErr));
            }

            return response;
        }

        public static void AcknowledgeDownGrade(ulong xuid)
        {
            XRLXeAcknowledgeDowngrade request = new XRLXeAcknowledgeDowngrade();

            request.UserId = xuid;

            if (!request.Execute())
                throw new UnexpectedTestResultException("XRLXeAcknowledgeDowngrade failed: " + request.GetDumpString());

            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLXeAcknowledgeDowngrade returned XErr=0x{0:x}", request.XErr));
        }

        public static void PurchaseTokenOffer(XeUser user, Offers.BaseOffers offer)
        {
            PurchaseTokenOffer(user, offer, Offers.GetBaseOfferPrepaidVoucherCode(offer));
        }

        public static void PurchaseTokenOffer(XeUser user, Offers.BaseOffers offer, string voucherCode)
        {
            PurchaseTokenOffer(user, Offers.GetBaseOfferId(offer), voucherCode);
        }

        public static void PurchaseTokenOffer(XeUser user, ulong offerId, string voucherCode)
        {
            XRLXeOfferPurchase request = new XRLXeOfferPurchase();

            request.UserPuid = user.UserPuid;
            request.OfferID = offerId;   
            request.LanguageID = user.LanguageId;
            request.CountryID = user.CountryId;
            request.Tier = (byte)UodbWS.GetUserTier(user.UserPuid);
            request.PaymentType = (uint)PaymentTypeEnum.Token;
            request.BillingToken = voucherCode;

            if (!request.Execute())
                throw new UnexpectedTestResultException("XRLXeOfferPurchase failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLXeOfferPurchase returned XErr=0x{0:x}", request.XErr));
        }

        public static void PurchaseCCOffer(XeUser user, Offers.BaseOffers offer)
        {
            string paymentInstrumentId = user.AddPaymentInstrumentVisa();

            XRLXeOfferPurchase request = new XRLXeOfferPurchase();

            request.UserPuid = user.UserPuid;
            request.OfferID = Offers.GetBaseOfferId(offer);   
            request.LanguageID = user.LanguageId;
            request.CountryID = user.CountryId;
            request.Tier = (byte)UodbWS.GetUserTier(user.UserPuid);
            request.PaymentType = (uint)PaymentTypeEnum.CreditCard;
            request.PaymentInstrumentID = paymentInstrumentId; //paymentInstrumentId;

            if (!request.Execute())
                throw new UnexpectedTestResultException("XRLXeOfferPurchase failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLXeOfferPurchase returned XErr=0x{0:x}", request.XErr));
        }

        public static void PurchaseCCOffer(XeUser user, ulong offerId)
        {
            string paymentInstrumentId = user.AddPaymentInstrumentVisa();

            XRLXeOfferPurchase request = new XRLXeOfferPurchase();

            request.UserPuid = user.UserPuid;
            request.OfferID = offerId;
            request.LanguageID = user.LanguageId;
            request.CountryID = user.CountryId;
            request.Tier = (byte)UodbWS.GetUserTier(user.UserPuid);
            request.PaymentType = (uint)PaymentTypeEnum.CreditCard;
            request.PaymentInstrumentID = paymentInstrumentId; //paymentInstrumentId;

            if (!request.Execute())
                throw new UnexpectedTestResultException("XRLXeOfferPurchase failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLXeOfferPurchase returned XErr=0x{0:x}", request.XErr));
        }

        public static void PurchaseCCOfferPMO(XeUser user, Offers.BaseOffers baseOffer)
        {
            string paymentInstrumentId = user.AddPaymentInstrumentVisa();

            XRLPreviewProductPurchase pppRequest = new XRLPreviewProductPurchase();
            OfferProductInfo[] offers = new OfferProductInfo[1];
            offers[0] = new OfferProductInfo();
            offers[0].offerId = Offers.GetLiveSubCatalogOfferGuid(baseOffer);
            offers[0].productTypeId = 51;

            pppRequest.offers = offers;
            pppRequest.paymentType = (uint)PaymentTypeEnum.CreditCard;
            pppRequest.paymentInstrumentID = paymentInstrumentId;
            pppRequest.billingToken = "";
            pppRequest.userPuid = user.UserPuid;

            XRLXePreviewProductPurchaseResponse response = new XRLXePreviewProductPurchaseResponse();
            if (!pppRequest.Execute(out response))
                throw new UnexpectedTestResultException("XRLPreviewProductPurchase failed: " + pppRequest.GetDumpString());
            if (pppRequest.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLPreviewProductPurchase returned XErr=0x{0:x}", pppRequest.XErr));

            string[] price = response.previewSubscriptionInfo.netPrice.ToString().Split('.');

            OfferMediaTypeExpectedPrice[] offer = new OfferMediaTypeExpectedPrice[1];
            offer[0] = new OfferMediaTypeExpectedPrice();
            offer[0].ExpectedPriceWhole = Convert.ToUInt32(price[0]);
            if (price.Length > 1)
            {
                offer[0].ExpectedPriceFractional = Convert.ToUInt32(price[1]);
            }
            offer[0].MediaTypeId = 51;
            offer[0].OfferId = Offers.GetLiveSubCatalogOfferGuid((baseOffer));

            // Purchasing regular offer
            XRLPurchaseMediaOffers purchaseRequest = new XRLPurchaseMediaOffers();

            purchaseRequest.UserPuid = user.UserPuid;
            purchaseRequest.Offers = offer;
            purchaseRequest.PaymentType = (uint)PaymentTypeEnum.CreditCard;
            purchaseRequest.PaymentInstrumentID = paymentInstrumentId; //paymentInstrumentId;
            purchaseRequest.SubscriptionPurchaseInfo = new SubscriptionPurchaseInfo();
            purchaseRequest.SubscriptionPurchaseInfo.subscriptionTimeExtendedInMonths = (uint)response.previewSubscriptionInfo.timeExtendedinMonths;

            if (!purchaseRequest.Execute())
                throw new UnexpectedTestResultException("XRLPurchaseMediaOffers failed: " + purchaseRequest.GetDumpString());
            if (purchaseRequest.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLPurchaseMediaOffers returned XErr=0x{0:x}", purchaseRequest.XErr));

            user.OfferId = Offers.GetBaseOfferId(Offers.BaseOffers.FamilyGoldCC1Year);
            user.MachinePuid = RandomXenonMachineUid();
        }

        public static ulong GenerateUniqueOfflineXuid()
        {            
            int i = 0;
            ulong offlineXuid = 0;
            uint hr = HResult.S_OK;
            do
            {
                offlineXuid = GenerateOfflineXuid();
                hr = UodbWS.CheckOfflineXuid(offlineXuid);
                i++;
            } while (HResult.XONLINE_E_ACCOUNTS_OFFLINE_XUID_ALREADY_USED == hr && i < 100);

            return offlineXuid;
        }

        public static ulong GenerateOfflineXuid()
        {
            RandomNumberGenerator rng = RandomNumberGenerator.Create();

            // start with 8 random bytes
            byte[] offlineXuidBytes = new byte[8];
            rng.GetBytes(offlineXuidBytes);

            // the high nibble should be 0xE
            offlineXuidBytes[7] = (byte)((offlineXuidBytes[7] | 0xE0) & 0xEF);

            // the high bit of the second nibble should be 1
            offlineXuidBytes[7] |= 0x08;

            ulong offlineXuid = BitConverter.ToUInt64(offlineXuidBytes, 0);

            return offlineXuid;
        }

        public static ServerTestFramework.Database.SubscriptionInfo GetUserServiceID(ulong puid, ulong offerId)
        {
            ServerTestFramework.Database.SubscriptionInfo[] si = UodbWS.GetUserServiceIDs(puid);
            Global.RO.Info("GetUserServiceID for Puid: {0}", puid);
            for (int i = 0; i < si.Length; i++)
            {
                Global.RO.Info("\tServiceInstanceId : {0}", si[i].serviceInstanceId);
                Global.RO.Info("\tOfferId			: 0x{0}", si[i].offerId.ToString("X"));
            }
            for (int i = 0; i < si.Length; i++)
            {
                if ((ulong)si[i].offerId == offerId)
                {
                    return si[i];
                }
            }
            throw new UnexpectedTestResultException("We didn't find user service id for expected offer: 0x" + offerId.ToString("X"));
        }

        public static void SetPrivilege(XeUser user, int ii)
        {
            XRLXeUpdateParentalControls request = new XRLXeUpdateParentalControls();
            request.UserPuid = user.UserPuid;
            request.Source = "UacsCommon";
            
            UserPrivileges grantPrivs = new UserPrivileges();
            grantPrivs.SetPrivilege(ii,true);
            request.UserGrantPrivileges = grantPrivs.ToArray();

            UserPrivileges restrictPrivs = new UserPrivileges();
            restrictPrivs.SetAllPrivs(false);
            request.UserRestrictPrivileges = restrictPrivs.ToArray();

            PassportToken pst = new PassportToken();
            pst.signedPuid = user.PassportOwnerSessionToken;
            request.Tokens = new PassportToken[] { pst };

            if (!request.Execute())
            {
                throw new UnexpectedTestResultException(string.Format("XeUpdateParentalControls failed: {0}", request.GetDumpString()));
            }
            if (request.XErr != 0)
            {
                throw new UnexpectedTestResultException(string.Format("XeUpdateParentalControls returned XErr=0x{0:x}", request.XErr));
            }
        }

        public static void ResetPrivilege(XeUser user, int ii)
        {
            XRLXeUpdateParentalControls request = new XRLXeUpdateParentalControls();
            request.UserPuid = user.UserPuid;
            request.Source = "UacsCommon";
            
            UserPrivileges grantPrivs = new UserPrivileges();
            grantPrivs.SetAllPrivs(false);
            request.UserGrantPrivileges = grantPrivs.ToArray();

            UserPrivileges restrictPrivs = new UserPrivileges();
            restrictPrivs.SetPrivilege(ii,true);
            request.UserRestrictPrivileges = restrictPrivs.ToArray();

            PassportToken pst = new PassportToken();
            pst.signedPuid = user.PassportOwnerSessionToken;
            request.Tokens = new PassportToken[] { pst };

            if (!request.Execute())
            {
                throw new UnexpectedTestResultException(string.Format("XeUpdateParentalControls failed: {0}", request.GetDumpString()));
            }
            if (request.XErr != 0)
            {
                throw new UnexpectedTestResultException(string.Format("XeUpdateParentalControls returned XErr=0x{0:x}", request.XErr));
            }
        }

        public static void SwitchUserDateOfBirthGeneral(ulong xuid, DateTime newBirthday)
        {
            XRLSwitchUserDateOfBirth request = new XRLSwitchUserDateOfBirth();
            request.UserPuid = xuid;
            request.newDateOfBirth = newBirthday;
            request.UseHttpAuth = true;                

            if (!request.Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs_int)))
            {
                throw new UnexpectedTestResultException(string.Format("SwitchUserDateOfBirth failed: {0}", request.GetDumpString()));
            }
            if (request.XErr != 0)
            {
                throw new UnexpectedTestResultException(string.Format("SwitchUserDateOfBirth returned XErr=0x{0:x}", request.XErr));
            }
        }

        public static string GetLocalIpAddress()
        {
            string ip = null;
            System.Net.IPHostEntry iphostentry = System.Net.Dns.GetHostEntry(System.Net.Dns.GetHostName());
            foreach (System.Net.IPAddress ipaddress in iphostentry.AddressList)
            {
                if (ipaddress.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                {
                    ip = ipaddress.ToString();
                    break;
                }
            }
            return ip;
        }

        public static void VerifyGamertagChange(ulong userPuid, string oldGamertag, string newGamertag, bool wasPurchased)
        {            
            GamerTagChange[] changes = UodbWS.GetGamerTagChanges(userPuid);            
            ValueCheck.Test("Old gamertag value recorded", oldGamertag, changes[0].OldGamerTag);
            ValueCheck.Test("New gamertag value recorded", newGamertag, changes[0].NewGamerTag);
            ValueCheck.Test("IPAddress value recorded", GetLocalIpAddress(), changes[0].IpAddress);
            ValueCheck.Test("WasPurchased value recorder", wasPurchased, changes[0].WasPurchased);
        }

        public static void VerifyPassportChange(ulong userPuid, ulong oldPassport, ulong newPassport, byte reason)
        {
            PassportChange[] changes = UodbWS.GetPassportChanges(userPuid);
            ValueCheck.Test("Old passport value recorded", oldPassport, changes[0].OldPassportPuid);
            ValueCheck.Test("New passport value recorded", newPassport, changes[0].NewPassportPuid);
            ValueCheck.Test("IPAddress value recorded", GetLocalIpAddress(), changes[0].IpAddress);
            ValueCheck.Test("Reason value recorder", reason, changes[0].Reason);
        }    

        public static void LiveCacheResetInitializedClientType()
        {
            Assembly a = Assembly.LoadFrom("xonline.common.webplatform.livecache.dll");
            Type myType = a.GetType("xonline.common.webplatform.livecache.LcserviceInfo");
            MethodInfo mi = myType.GetMethod("ResetInitializedClientType", BindingFlags.NonPublic|BindingFlags.Static);
            mi.Invoke(null,null);
        }

        //New API to purchase;
        public static void UserPurchaseOfferWithCreditCard(XeUser user, Offers.BaseOffers offer, uint priceWhole, uint priceFractional)
        {
            string paymentInstrumentId = user.AddPaymentInstrumentVisa();
            
            XRLPurchaseMediaOffers request = new XRLPurchaseMediaOffers();
            request.UserPuid = user.UserPuid;
            request.PaymentType = (uint)PaymentTypeEnum.CreditCard;
            request.PaymentInstrumentID = paymentInstrumentId;
            request.StoreId = (uint)CatalogStoreTypeEnum.Xbox360;

            request.Offers = new OfferMediaTypeExpectedPrice[1];
            request.Offers[0] = new OfferMediaTypeExpectedPrice();
            request.Offers[0].ExpectedPriceFractional = priceFractional;
            request.Offers[0].ExpectedPriceWhole = priceWhole;
            request.Offers[0].OfferId = Offers.GetLiveSubCatalogOfferGuid(offer); ;
            request.Offers[0].MediaTypeId = (int)MediaTypeEnum.LiveSubscription;

            if (!request.Execute())
                throw new UnexpectedTestResultException("XRLPurchaseMediaOffers failed: " + request.GetDumpString());
            if (request.XErr != HResult.S_OK)
                throw new UnexpectedTestResultException(String.Format("XRLPurchaseMediaOffers returned XErr=0x{0:x}", request.XErr));

            UodbWS.WaitForQueueRemoval(user.UserPuid, true);
        }

        public static void UserPurchaseFamilyGold(XeUser user)
        {
            uint FamilyGold12MonthCC_PriceWhole = 99;
            uint FamilyGold12MonthCC_PriceFactional = 99;
            UserPurchaseOfferWithCreditCard(user, Offers.BaseOffers.FamilyGoldCC1Year,
                                FamilyGold12MonthCC_PriceWhole,
                                FamilyGold12MonthCC_PriceFactional);
        }

        public static void UserPurchaseGold(XeUser user)
        {
            // puchase a gold offer
            PurchaseTokenOffer(user, Offers.BaseOffers.GoldPP3Month);
        }

        public static void ShowServerID(ulong userPuid)
        {
            if (userPuid == 0)
                Global.RO.Info("User 0x{0:x} puid is 0, not able to show server ID.", userPuid);
            else
            {
                string server = "";
                try
                {
                    server = UodbWS.WhatServerIsTheUserOn(userPuid);
                }
                catch (Exception exc)
                {
                    // It's not the end of the world if we can't figure out the server
                    server = "(error retreiving server: " + exc.Message + ")";
                }
                Global.RO.Info("User 0x{0:x} created on partition {1}", userPuid, server);
            }
        }

        public static void WaitForValidBillingAccountId(ulong userPuid)
        {
            Global.RO.Info("Check user 0x{0:x} billing account id ...", userPuid);
            const string DUMMY_ID_PREFIX       = "$XBOX!";
            uint retryTimes = 6;
            uint i = 0;
            while (i++ < retryTimes)
            {
                string acctId = UodbWS.GetUserProperty(userPuid, "vc_billing_account_id");
                if (acctId.StartsWith(DUMMY_ID_PREFIX))
                {
                    Global.RO.Info("User 0x{0:x} billing account id is dummy id, wait for 10 seconds ...", userPuid);
                    Thread.Sleep(10000);
                }
                else
                {
                    return;
                }
            }
            string accountId = UodbWS.GetUserProperty(userPuid, "vc_billing_account_id");
            if (accountId.StartsWith(DUMMY_ID_PREFIX))
            {
                Global.RO.Error(String.Format("User 0x{0:x} billing account ID keeps as a dummy account ID.", userPuid));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLSetUserPIN.cs ===
using System;
using System.Net;
using System.IO;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	///
	/// </summary>
	public class SetUserPIN : XRLPayload
	{
		[XRLPayloadFld(IsUPuid=true)]
		public ulong UserPuid=0;
		[XRLPayloadFld(ArraySize=4)]
		public byte []NewPin = new byte[4];

		[XRLPayloadFld(Serialize=false)]
		public byte []RespKey = new byte[16];

		public SetUserPIN()
		{
			for (int i=0; i<NewPin.Length; i++)
				NewPin[i]=0;
		}

		protected override string GetServiceName()
		{
			return "/xuacs/setuserpin.ashx";
		}

		protected override void ReadResponse(MemoryStream respBuff)
		{
			int nread = respBuff.Read(RespKey, 0, 16);

			if(nread != 16)
			{
				throw new Exception("SetUserPin payload expects a 16 byte response from XUACS, nread: " + nread);
			}
		}

		public override bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs));
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLSetPaymentInfo.cs ===
using System;
using System.Net;
using System.IO;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
    /// <summary>
    ///
    /// </summary>
    public class XRLSetPaymentInfo : XRLPayload
    {

        [XRLPayloadFld(IsUPuid=true)]
        public ulong userPuid;

        [XRLPayloadFld(ArraySize=XOn.ACCOUNT_PIN_LENGTH)]
        public byte[] accountPin = new byte[XOn.ACCOUNT_PIN_LENGTH];

        public byte countryId;
        public byte cardTypeId;
        public DateTime cardExpiration;

        public byte msSpam;
        public byte partnerSpam;

        public ushort firstNameLen;
        public string firstName;
        public ushort lastNameLen;
        public string lastName;
        public ushort street1Len;
        public string street1;
        public ushort street2Len;
        public string street2;
        public ushort street3Len;
        public string street3;
        public ushort cityLen;
        public string city;
        public ushort stateLen;
        public string state;
        public ushort postalCodeLen;
        public string postalCode;

        public ushort phonePrefixLen;
        public string phonePrefix;
        public ushort phoneNumberLen;
        public string phoneNumber;
        public ushort phoneExtensionLen;
        public string phoneExtension;

        public ushort cardHolderLen;
        public string cardHolder;
        public ushort cardNumberLen;
        public string cardNumber;

        public ushort emailLen;
        public string email;
        public ushort bankCodeLen;
        public string bankCode;
        public ushort branchCodeLen;
        public string branchCode;
        public ushort checkDigitsLen;
        public string checkDigits;

        protected override string GetServiceName()
        {
            return "/xuacs/setpaymentinfo.ashx";
        }

        public XRLSetPaymentInfo()
        {
            this.accountPin[0]=1;
            this.accountPin[1]=1;
            this.accountPin[2]=1;
            this.accountPin[3]=1;
            this.bankCode="1";
            this.branchCode="2";
            this.cardExpiration=System.DateTime.Now.AddYears(1);
            this.cardHolder="Relja Markovic";
            this.cardNumber="4111111111111111";
            this.cardTypeId=0;
            this.checkDigits="21";
            this.city="Carnation";
            this.countryId=103;
            this.email="xboxstress@winisp.net";
            this.firstName="Relja";
            this.lastName="Markovic";
            this.phoneNumber="555-4291";
            this.phonePrefix="425";
            this.phoneExtension=" ";
            this.postalCode="98014";
            this.state="WA";
            this.street1="street1";
            this.street2="street2";
            this.street3="street3";
        }

        override public bool Execute()
        {
            return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs));
        }

        public void GetFrom(Owner owner)
        {
            string last=owner.GetLast4DigitsOfCC();
            accountPin[0]=(byte) (last[0]-'0');
            accountPin[1]=(byte) (last[1]-'0');
            accountPin[2]=(byte) (last[2]-'0');
            accountPin[3]=(byte) (last[3]-'0');

            this.firstName=owner.firstName;
            this.lastName=owner.lastName;
            this.street1=owner.street1;
            this.street2=owner.street2;
            this.street3=owner.street3;
            this.postalCode=owner.postalCode;
            this.state=owner.state;
            this.phoneNumber=owner.phoneNumber;
            this.phonePrefix=owner.phonePrefix;
            this.phoneExtension=owner.phoneExtension;
            this.cardHolder=owner.cardHolder;
            this.cardExpiration=owner.cardExpiration;
            this.cardTypeId=owner.cardTypeId;

//            cardNumber=owner.cardNumber.Substring(cardNumber.Length-4);
        }

        public void GetFrom(ulong userPuid, XRLGetPaymentInfoResponse paymentinfo)
        {
            accountPin[0]=(byte) (paymentinfo.cardNumber[paymentinfo.cardNumberLen-4]-'0');
            accountPin[1]=(byte) (paymentinfo.cardNumber[paymentinfo.cardNumberLen-3]-'0');
            accountPin[2]=(byte) (paymentinfo.cardNumber[paymentinfo.cardNumberLen-2]-'0');
            accountPin[3]=(byte) (paymentinfo.cardNumber[paymentinfo.cardNumberLen-1]-'0');

            this.firstName=paymentinfo.firstName;
            this.lastName=paymentinfo.lastName;
            this.street1=paymentinfo.street1;
            this.street2=paymentinfo.street2;
            this.street3=paymentinfo.street3;
            this.postalCode=paymentinfo.postalCode;
            this.state=paymentinfo.state;
            this.phoneNumber=paymentinfo.phoneNumber;
            this.phonePrefix=paymentinfo.phonePrefix;
            this.phoneExtension=paymentinfo.phoneExtension;
            this.cardHolder=paymentinfo.cardHolder;
            this.cardExpiration=paymentinfo.cardExpiration;
            this.cardTypeId=paymentinfo.cardTypeId;
            this.userPuid=userPuid;
            this.msSpam=paymentinfo.msSpam;
            this.partnerSpam=paymentinfo.partnerSpam;
            this.ServiceId=paymentinfo.ServiceId;
            this.Slot=paymentinfo.Slot;
            this.email=paymentinfo.email;
            this.city=paymentinfo.city;
            this.countryId=paymentinfo.countryId;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLReserveName.cs ===
using System;
using System.Net;
using System.IO;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	public class XRLReserveResponseHead : XRLPayload
	{
		public ushort NameCount   = 0;
	}

	public class XRLReserveResponseItem : XRLPayload
	{
		public ushort	cbName;

		[XRLPayloadFld(SizeParam="cbName")]
		public string	Name;

	}

	public class XRLReserveName : XRLPayload
	{
		[XRLPayloadFld(IsMPuid=true )] public ulong MachinePuid;
		public byte CountryId;
		public ushort MaxAltNames;
		public ushort cbGamerName;
		[XRLPayloadFld(SizeParam="cbGamerName")] public string GamerName;


		public XRLReserveName()
		{
			CountryId=103;
			MaxAltNames=5;
		}

		protected override string GetServiceName()
		{
			return "/xuacs/reservename.ashx";
		}

		public ulong Create( out XRLReserveResponseHead Head, out XRLReserveResponseItem []Items )
		{
			return Create(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs), out Head, out Items);
		}

		public ulong Create(LiveServer sServer, out XRLReserveResponseHead Head, out XRLReserveResponseItem []Items)
		{
			return Create(sServer.EPDefault, out Head, out Items);
		}

		public ulong Create(IPEndPoint endPoint, out XRLReserveResponseHead Head, out XRLReserveResponseItem []Items)
		{
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			Head=null;
			Items=null;

			ulong uRet = 0;
			bool bRet=InternalExecute(endPoint, reqStream);

			if( bRet )
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == HResult.XONLINE_S_ACCOUNTS_NAME_TAKEN) )
				{
					Head = new XRLReserveResponseHead();
					MemoryStream respBuff = new MemoryStream(xAct.ResponseContents);
					Head.ReadStream( respBuff );

					Items = new XRLReserveResponseItem[Head.NameCount];
					for (int i=0; i<Head.NameCount; i++)
					{
						Items[i] = new XRLReserveResponseItem();
						Items[i].ReadStream( respBuff );
					}
					uRet = Head.NameCount;
				}
			}

			return uRet;
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLSetUserAccountStatus.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	public class XRLSetUserAccountStatus : XRLPayload
	{

		[XRLPayloadFld(IsUPuid=true)]
		public ulong userPuid=0;

		public int newTOS = 0;

		public int nameChangeRequired = 0;

		public DateTime suspendedUntil = DateTime.Now;

		public ushort totalDaysSuspended =0;

		public DateTime voiceBannedUntil = DateTime.Now;

		public ushort totalDaysVoiceBanned = 0;

		public uint billingAccountStatus=0;

		public uint ResetPassword = 0;


		protected override string GetServiceName()
		{
			return "/xuacs/setuseraccountstatus.ashx";
		}

		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs));
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLSetUserSettings2.cs ===
using System;
using System.IO;
using System.Net;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	/// Executes the SetUserSettings2 API
	/// </summary>
	public class XRLSetUserSettings2 : XRLPayload
	{
		[XRLPayloadFld(IsUPuid=true)]
		public ulong userPuid=0;

		public ushort userTier = 0;

		public ushort userFlags = 0;

		[WireInfo(ArraySize=UserPrivileges.XONLINE_PRIVILEGE_DWORD_LENGTH)]
		public uint[] userPrivileges;

		protected override string GetServiceName()
		{
			return "/xuacs/setusersettings2.ashx";
		}

		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs));
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLSetUserSettings.cs ===
using System;
using System.IO;
using System.Net;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	///
	/// </summary>
	public class XRLSetUserSettings : XRLPayload
	{
		[XRLPayloadFld(IsUPuid=true )] public ulong userPuid=0;
		public ushort userFlags=0;

		protected override string GetServiceName()
		{
			return "/xuacs/setusersettings.ashx";
		}

		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs));
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLRestoreAccountRequest.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	public class XRLRestoreAccountResponse : XRLPayload
	{
																		public ulong	userPuid=0x0005400000000000;
		[XRLPayloadFld(ArraySize=(int) XOn.XONLINE_KEY_LENGTH)]			public byte []key;
		[XRLPayloadFld(ArraySize=(int) XOn.XONLINE_USERDOMAIN_SIZE)]	public string domain="";
		[XRLPayloadFld(ArraySize=(int) XOn.XONLINE_REALM_NAME_SIZE)]	public string realm="";
	}
	public class XRLRestoreAccountRequest : XRLPayload
	{
		[XRLPayloadFld(IsMPuid=true)] public ulong machinePuid=0;
		public ushort tagLen=0;
		public string tag="";
		public ushort phonePrefixLen=0;
		public string phonePrefix="";
		public ushort phoneNumberLen=0;
		public string phoneNumber="";
		public ushort phoneExtensionLen=0;
		public string phoneExtension="";
		public ushort postalCodeLen=0;
		public string postalCode="";
		public ushort cardHolderLen=0;
		public string cardHolder="";
		public ushort cardNumberLen=0;
		public string cardNumber="";

		public static implicit operator XRLRestoreAccountRequest(Owner owner)
		{
			XRLRestoreAccountRequest newObject=new XRLRestoreAccountRequest();
			newObject.tag=owner.gamertag;
			newObject.phonePrefix=owner.phonePrefix;
			newObject.phoneNumber=owner.phoneNumber;
			newObject.phoneExtension=owner.phoneExtension;
			newObject.postalCode=owner.postalCode;
			newObject.cardHolder=owner.cardHolder;
			newObject.cardNumber=owner.cardNumber;
			return newObject;
		}

		protected override string GetServiceName()
		{
			return "/xuacs/restoreaccount.ashx";
		}

		public ulong Execute(out XRLRestoreAccountResponse Response)
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs), out Response);
		}

		public ulong Execute(LiveServer sServer, out XRLRestoreAccountResponse Response)
		{
			return Execute(sServer.EPDefault, out Response);
		}

		public ulong Execute(IPEndPoint  endPoint, out XRLRestoreAccountResponse Response)
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream(reqStream);

			Response=null;
			bool bRet = InternalExecute(endPoint, reqStream);
			ulong uRet = 0;

			if(bRet)
			{
				if( (httpStatus == HttpStatusCode.OK) && (XErr == 0) )
				{
					Response = new XRLRestoreAccountResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					Response.ReadStream( respBuff );
					uRet = Response.userPuid;
				}
			}

			return uRet;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLTroubleshootAccount.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	public class XRLTroubleshootAccountResponse : XRLPayload
	{
		public int newTOS = 0;

		public int nameChangeRequired = 0;

		public DateTime suspendedUntil = DateTime.UtcNow;

		public ushort totalDaysSuspended =0;

		public DateTime voiceBannedUntil = DateTime.UtcNow;

		public ushort totalDaysVoiceBanned = 0;

		public uint billingAccountStatus=0;

		public bool Matches(XRLSetUserAccountStatus Request)
		{
			if (nameChangeRequired!=Request.nameChangeRequired)
			{
				Global.RO.Error("Field nameChangeRequired mismatch ("+nameChangeRequired+")!");
				return false;
			}
			if (Math.Abs((suspendedUntil-Request.suspendedUntil).TotalMinutes)>1)
			{
				Global.RO.Error("Field suspendedUntil mismatch!");
				return false;
			}
			if (totalDaysSuspended!=Request.totalDaysSuspended)
			{
				Global.RO.Error("Field totalDaysSuspended mismatch!");
				return false;
			}
			if (Math.Abs((voiceBannedUntil-Request.voiceBannedUntil).TotalMinutes)>1)
			{
				Global.RO.Error("Field voiceBannedUntil mismatch!");
				return false;
			}
			if (totalDaysVoiceBanned!=Request.totalDaysVoiceBanned)
			{
				Global.RO.Error("Field totalDaysVoiceBanned mismatch!");
				return false;
			}
			return true;
		}
	}

	public class XRLTroubleshootAccount : XRLPayload
	{
		[XRLPayloadFld(IsUPuid=true)]
		public ulong	userPuid=0;

		[XRLPayloadFld(IsMPuid=true)]
		public ulong	machinePuid=0;

		protected override string GetServiceName()
		{
			return "/xuacs/troubleshootaccount.ashx";
		}

		public bool Execute(out XRLTroubleshootAccountResponse Response)
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs), out Response);
		}

		public bool Execute(LiveServer sServer, out XRLTroubleshootAccountResponse Response)
		{
			return Execute(sServer.EPDefault, out Response);
		}

		public bool Execute(IPEndPoint endPoint, out XRLTroubleshootAccountResponse Response)
		{
			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool bRet = InternalExecute(endPoint, reqStream);
			Response=null;

			if(bRet)
			{
				if( (httpStatus == HttpStatusCode.OK) && (XErr == 0) )
				{
					Response = new XRLTroubleshootAccountResponse();
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					Response.ReadStream( respBuff );
					bRet=true;
				}
			}

			return( bRet );
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLVerifyBillingPIN.cs ===
using System;
using System.Net;
using System.IO;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	///
	/// </summary>
	public class XRLVerifyBillingPIN : XRLPayload
	{
		[XRLPayloadFld(IsUPuid=true)]
		public ulong userPuid=0;

		[XRLPayloadFld(ArraySize=4)]
		public byte []pin = new byte[4];

		protected override string GetServiceName()
		{
			return "/xuacs/verifybillingpin.ashx";
		}

		public XRLVerifyBillingPIN()
		{
			pin[0]=1;
			pin[1]=1;
			pin[2]=1;
			pin[3]=1;
		}

		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs));
		}

		public void GetFrom(Owner owner)
		{
			string last=owner.GetLast4DigitsOfCC();
			pin[0]=(byte) (last[0]-'0');
			pin[1]=(byte) (last[1]-'0');
			pin[2]=(byte) (last[2]-'0');
			pin[3]=(byte) (last[3]-'0');
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLVerifyVoucher.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	///
	/// </summary>
	public class XRLVerifyVoucher : XRLPayload
	{
		public byte countryId=103;
		public ushort voucherLen=0;
		public string voucher="";

		protected override string GetServiceName()
		{
			return "/xuacs/verifyvoucher.ashx";
		}

		override public bool Execute()
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs));
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLVerifyVoucherGetOffer.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	///
	/// </summary>
	public class XRLVerifyVoucherGetOffer : XRLPayload
	{
		public byte countryId=103;
		public ushort voucherLen=0;
		public string voucher="";

		protected override string GetServiceName()
		{
			return "/xuacs/verifyvouchergetoffer.ashx";
		}

		public bool Execute(out XRLVerifyVoucherGetOfferResponse resp)
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs), out resp);
		}

		public bool Execute(LiveServer sServer, out XRLVerifyVoucherGetOfferResponse resp)
		{
			return Execute(sServer.EPDefault, out resp);
		}

		public bool Execute(IPEndPoint endPoint, out XRLVerifyVoucherGetOfferResponse resp)
		{
			resp = new XRLVerifyVoucherGetOfferResponse();

			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool bRet = InternalExecute(endPoint,reqStream);

			if(bRet)
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == HResult.S_OK))
				{
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					resp.ReadStream( respBuff );
				}
				else
					bRet=false;
			}
			return bRet;
		}
	}

	public class XRLVerifyVoucherGetOfferResponse : XRLPayload
	{
		public ulong offerId;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xbox1\XRLWebGetUserSettings.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using xonline.common.config;

namespace ServerTestFramework.LiveService.UserAccount
{
	/// <summary>
	///
	/// </summary>
	public class XRLWebGetUserSettings : XRLPayload
	{
		[XRLPayloadFld(IsUPuid=true)]
		public ulong userPuid=0;

        public XRLWebGetUserSettings()
        {
            // need to use HTTP auth for web-only requests
            UseHttpAuth = true;

            Slot.titleId = XOn.WEB_TITLE_ID;
        }

		protected override string GetServiceName()
		{
			return "/xuacs/webgetusersettings.ashx";
		}

		public bool Execute(out XRLWebGetUserSettingsResponse resp)
		{
			return Execute(Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs_int), out resp);
		}

		public bool Execute(LiveServer sServer, out XRLWebGetUserSettingsResponse resp)
		{
			return Execute(sServer.EPDefault, out resp);
		}

		public bool Execute(IPEndPoint endPoint, out XRLWebGetUserSettingsResponse resp)
		{
			resp = new XRLWebGetUserSettingsResponse();

			// Prepare request
			MemoryStream reqStream = new MemoryStream( 512 );
			WriteStream( reqStream );

			bool bRet = InternalExecute(endPoint,reqStream);

			if(bRet)
			{
				if( (xAct.httpStatus == HttpStatusCode.OK) && (xAct.XErr == HResult.S_OK))
				{
					MemoryStream respBuff = new MemoryStream( xAct.ResponseContents );
					resp.ReadStream( respBuff );
				}
				else
					bRet=false;
			}
			return bRet;
		}
	}

	public class XRLWebGetUserSettingsResponse : XRLPayload
	{
		public uint flags;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\UserAccount\xenon\offers.cs ===
using System;
using ServerTestFramework.Database;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using xonline.common.config;

namespace ServerTestFramework.LiveService.Billing
{
    public class Offers
    {
        public enum BaseOffers
        {
            SilverFreeTrial,
            GoldMigration,
            GoldSignup,
            GoldCC1Month,
            GoldCC3Month,
            GoldCC1Year,
            GoldCC1YearDiscount,
            GoldPP1Month,
            GoldPP3Month,
            GoldPP1Year,
            GoldPP13Month,
            GamertagChange,
			FreeGamertagChange,
			ZuneFreeGamertagChange,
			GFWLFreeGamertagChange,
            ZuneGamertagChange,
            GoldWH1Month,
            GoldWH1Year,
            GoldBobo,
            FamilyGoldCC1Year,
            FamilyGoldPP1Year
        };

        public static Guid GetLiveSubCatalogOfferGuid(BaseOffers offer)
        {
            Guid offerGuid;
            switch (offer)
            {
                case BaseOffers.FamilyGoldCC1Year: 
                    offerGuid = new Guid("8000004A-0000-4000-8000-0000FFFE07D1");
                    break;
                case BaseOffers.FamilyGoldPP1Year: 
                    offerGuid = new Guid("8000005A-0000-4000-8000-0000FFFE07D1");
                    break;
                case BaseOffers.GoldCC1Month: 
                    offerGuid = new Guid("80000008-0000-4000-8000-0000FFFE07D1");
                    break;
                case BaseOffers.GoldCC3Month: 
                    offerGuid = new Guid("80000009-0000-4000-8000-0000FFFE07D1");
                    break;
                case BaseOffers.GoldCC1Year: 
                    offerGuid = new Guid("8000000A-0000-4000-8000-0000FFFE07D1");
                    break;
                case BaseOffers.GoldSignup: 
                    offerGuid = new Guid("80000003-0000-4000-8000-0000FFFE07D1");
                    break;
                case BaseOffers.GoldPP1Month:
                    offerGuid = new Guid("80000018-0000-4000-8000-0000FFFE07D1");
                    break;
                case BaseOffers.GoldPP3Month:
                    offerGuid = new Guid("80000019-0000-4000-8000-0000FFFE07D1");
                    break;
                case BaseOffers.GoldPP1Year:
                    offerGuid = new Guid("8000001A-0000-4000-8000-0000FFFE07D1");
                    break;
                case BaseOffers.GoldPP13Month:
                    offerGuid = new Guid("8000001B-0000-4000-8000-0000FFFE07D1");
                    break;
                default:
                    throw new Exception("The specified BaseOffer has not been defined.");
            }
            return offerGuid;
        }

        public static ulong GetBaseOfferId(BaseOffers offer)
        {
            ulong offerId = 0;
            switch (offer)
            {
                case BaseOffers.SilverFreeTrial: offerId = 0xFFFE07D180000011;
                    break;
                case BaseOffers.GoldMigration:   offerId = 0xFFFE07D180000001;
                    break;
                case BaseOffers.GoldSignup:      offerId = 0xFFFE07D180000003;
                    break;
                case BaseOffers.GoldCC1Month:    offerId = 0xFFFE07D180000008;
                    break;
                case BaseOffers.GoldCC3Month:    offerId = 0xFFFE07D180000009;
                    break;
                case BaseOffers.GoldCC1Year:     offerId = 0xFFFE07D18000000A;
                    break;
                case BaseOffers.GoldCC1YearDiscount:     offerId = 0xFFFE07D18000002A;
                    break;
                case BaseOffers.GoldPP1Month:    offerId = 0XFFFE07D180000018;
                    break;
                case BaseOffers.GoldPP3Month:    offerId = 0XFFFE07D180000019;
                    break;
                case BaseOffers.GoldPP1Year:     offerId = 0XFFFE07D18000001A;
                    break;
                case BaseOffers.GoldPP13Month:   offerId = 0XFFFE07D18000001B;
                    break;
                case BaseOffers.GoldWH1Month:    offerId = 0XFFFE07D18000001C;
                    break;
                case BaseOffers.GoldWH1Year:     offerId = 0XFFFE07D18000001D;
                    break;
                case BaseOffers.GamertagChange:  offerId = 0xFFFE07D10AA00001;
                    break;
				case BaseOffers.FreeGamertagChange:  offerId = 0xFFFE07D10AA00002;
					break;
				case BaseOffers.ZuneFreeGamertagChange:  offerId = 0xFFFE07D10AA00005;
					break;
				case BaseOffers.GFWLFreeGamertagChange:  offerId = 0xFFFE07D10AA00004;
					break;
                case BaseOffers.ZuneGamertagChange: offerId = 0xFFFE07770AA00002;
                    break;
                case BaseOffers.GoldBobo:  offerId = 0xfffe07d18c000001;
                    break;
                case BaseOffers.FamilyGoldCC1Year: offerId = 0xFFFE07D18000004A;
                    break;
                case BaseOffers.FamilyGoldPP1Year: offerId = 0xFFFE07D18000005A;
                    break;
                default:
                    throw new Exception("The specified BaseOffer has not been defined.");
            }

            return offerId;
        }


        public static string GetBaseOfferPrepaidVoucherCode(BaseOffers offer)
        {
            string voucher = "";
            switch (offer)
            {
                // todo -- dan holt will update the matrix and those updates will need to be reflected in here.
                case BaseOffers.GoldPP1Month:  voucher = "CRYCP-BM9W4-KH3B6-6MRQT-HHGBF";
                    break;
                case BaseOffers.GoldPP3Month:  voucher = "MBYVH-KCWDH-7HXBB-HT7F7-7QTH8";
                    break;
                case BaseOffers.GoldPP1Year:   voucher = "89R44-J8JBF-TJQQB-8QCQC-HW8BF";
                    break;
                case BaseOffers.GoldPP13Month: voucher = "V28YB-4F6MW-YMMWY-QX8G4-BPGBK";
                    break;
                default:
                    throw new Exception("The specified BaseOffer does not have an associated prepaid voucher code.");
            }

            return voucher;
        }

        public static string GetBaseOfferPrepaidMixTokenCode(BaseOffers offer)
        {
            string token = "";
            switch (offer)
            {

                case BaseOffers.GoldPP3Month: token = "XRGRP-H3764-RRQPH-KPTX2-67R9Z";
                    break;
                default:
                    throw new Exception("The specified BaseOffer does not have an associated prepaid voucher code.");
            }

            return token;
        }


        public static string GetBaseOfferStarterKitVoucherCode(BaseOffers offer)
        {
            string voucher = "";
            switch (offer)
            {
                // todo -- dan holt will update the matrix and those updates will need to be reflected in here.
                // dholt to provide this voucher code
                case BaseOffers.GoldPP1Month:  voucher = "";
                    break;
                case BaseOffers.GoldPP3Month:  voucher = "GTTD6-QBX3P-T8BTK-83X83-H72HQ";
                    break;
                case BaseOffers.GoldPP1Year:   voucher = "7HYVD-9H8Y2-88QBJ-Y6BYX-6MCCV";
                    break;
                // dholt to provide this voucher code
                case BaseOffers.GoldPP13Month: voucher = "";
                    break;
                default:
                    throw new Exception("The specified BaseOffer does not have an associated prepaid voucher code.");
            }

            return voucher;
        }


        // --------------------------------------------------
        // Premium Subs

        public enum PremiumSubsOffers
        {
            CC1Month,
            CC3Month,
            CC1Year,
            PP1Month,
            PP3Month,
            PP1Year,
        };

        public static Guid GetPremiumSubsOfferGuid( PremiumSubsOffers offer )
        {
            Guid offerGuid;
            switch ( offer )
            {
            case PremiumSubsOffers.CC3Month:
                offerGuid = new Guid( "88000001-0000-4000-8000-0000FFFF0095" );
                break;
            default:
                throw new Exception( "The specified Premium Subscription Offer has not been defined." );
            }
            return offerGuid;
        }

        public static ulong GetPremiumSubsOfferId(PremiumSubsOffers offer)
        {
            ulong offerId = 0;
            switch (offer)
            {
                case PremiumSubsOffers.CC1Month: offerId = 0xFFFF009588000000;
                    break;
                case PremiumSubsOffers.CC3Month: offerId = 0xFFFF009588000001;
                    break;
                case PremiumSubsOffers.CC1Year:  offerId = 0xFFFF009588000002;
                    break;
                case PremiumSubsOffers.PP1Month: offerId = 0xFFFF009588000010;
                    break;
                case PremiumSubsOffers.PP3Month: offerId = 0xFFFF009588000011;
                    break;
                case PremiumSubsOffers.PP1Year:  offerId = 0xFFFF009588000012;
                    break;
                default:
                    throw new Exception("The specified PremiumSubsOffer has not been defined.");
            }

            return offerId;
        }

        public static string GetPremiumSubsOfferPrepaidCode(PremiumSubsOffers offer)
        {
            string voucher = "";
            switch (offer)
            {
                case PremiumSubsOffers.PP1Month: voucher = "FYK74-XVBD8-G36BG-9C4Y7-HQB8Q";
                    break;
                case PremiumSubsOffers.PP3Month: voucher = "C3H7B-P7J86-BRH4V-XK789-CBMPD";
                    break;
                case PremiumSubsOffers.PP1Year:  voucher = "BTQY7-KGW67-Y7JRJ-RBPQ8-MPHF6";
                    break;
                default:
                    throw new Exception("The specified PremiumSubsOffer does not have an associated prepaid voucher code.");
            }

            return voucher;
        }

        // --------------------------------------------------
        // PSU Subs

        public enum PSUSubsOffers
        {
            PSUGuardiansLicenseOneMonthCC,
            PSUGuardiansLicenseOneMonthPP,
        };

        public static Guid GetPSUSubsOfferGuid( PSUSubsOffers offer )
        {
            Guid offerGuid;
            switch ( offer )
            {
            case PSUSubsOffers.PSUGuardiansLicenseOneMonthCC:
                offerGuid = new Guid( "00000000-0000-4088-8000-0000534507E3" );
                break;
            case PSUSubsOffers.PSUGuardiansLicenseOneMonthPP:
                offerGuid = new Guid( "00000000-0000-4088-8000-0001534507E3" );
                break;
            default:
                throw new Exception( "The specified PSU Offer has not been defined." );
            }
            return offerGuid;
        }

        public static ulong GetPSUSubsOfferId( PSUSubsOffers offer )
        {
            ulong offerId = 0;
            switch ( offer )
            {
            case PSUSubsOffers.PSUGuardiansLicenseOneMonthCC: offerId = 0x534507E388000000;
                break;
            case PSUSubsOffers.PSUGuardiansLicenseOneMonthPP: offerId = 0x534507E388000001;
                break;
            default:
                throw new Exception( "The specified PSU Offer has not been defined." );
            }
            return offerId;
        }

        /// <summary>
        /// MusicNet subscriptions
        /// </summary>
        public enum MusicNetOffers : ulong
        {
            MonthlyCC,
            QuarterlyCC,
            YearlyCC,
            MonthlyPP,
            QuarterlyPP,
            TrialCC_14Days,
            TrialPP_14Days,
            TrialPP_1Day
        }

        public static bool IsCreditCardRequired(MusicNetOffers offer)
        {
            switch (offer)
            {
                case MusicNetOffers.MonthlyCC:
                case MusicNetOffers.QuarterlyCC:
                    return true;
                case MusicNetOffers.MonthlyPP:
                case MusicNetOffers.QuarterlyPP:
                case MusicNetOffers.TrialPP_14Days:
                case MusicNetOffers.TrialPP_1Day:
                    return false;
                default:
                    throw new Exception("Unknown MusicNet offer " + offer);
            }
        }

        public static Guid GetMusicNetOfferGuid( MusicNetOffers offer )
        {
            Guid offerGuid;
            switch ( offer )
            {
            case MusicNetOffers.QuarterlyCC:
                offerGuid = new Guid( "88000001-0000-4000-8000-0000FFFE0777" );
                break;
            default:
                throw new Exception( "The specified MusicNet Offer has not been defined." );
            }
            return offerGuid;
        }

        public static ulong GetOfferId(MusicNetOffers offer)
        {
            ulong offerId = 0;
            switch (offer)
            {
                case MusicNetOffers.MonthlyCC: offerId = 0xFFFE077788000000; break;
                case MusicNetOffers.QuarterlyCC: offerId = 0xFFFE077788000001; break;
                case MusicNetOffers.MonthlyPP: offerId = 0xFFFE077788000010; break;
                case MusicNetOffers.YearlyCC: offerId = 0xFFFE077788000014; break;
                case MusicNetOffers.QuarterlyPP: offerId = 0xFFFE077788000011; break;
                case MusicNetOffers.TrialCC_14Days: offerId = 0xFFFE077788000013; break;
                case MusicNetOffers.TrialPP_14Days: offerId = 0xFFFE07778800001A; break;
                case MusicNetOffers.TrialPP_1Day: offerId = 0xFFFE07778800001B; break;
                default:
                    throw new Exception("The specified MusicNet offer does not have an associated offer ID.");
            }
            return offerId;
        }

        public static string GetPrepaidVoucherCode(MusicNetOffers offer)
        {
            string voucher = "";
            switch (offer)
            {
                case MusicNetOffers.MonthlyPP: voucher = "D6B9M-TQVGM-HP892-WR382-626G8"; break;
                case MusicNetOffers.QuarterlyPP: voucher = "3MYR3-HRBR3-PXP2X-89499-FWBD3"; break;
                case MusicNetOffers.TrialPP_14Days: voucher = "7W2FB-YPVQJ-DMCPF-TWPW9-CPFGQ"; break;
                case MusicNetOffers.TrialPP_1Day: voucher = "PT9X9-6VD8D-93XPT-YBFPQ-MHQ9Q"; break;
                default:
                    throw new Exception("The specified MusicNet offer does not have an associated prepaid voucher code.");
            }
            return voucher;
        }

        public enum XNAOffers : ulong
        {
            FourMonthCC = 0x584E07D109900001,
            YearlyCC = 0x584E07D109900002,
            FourMonthPP = 0x584E07D109900011,
            YearlyPP = 0x584E07D109900012,
        }

        public static string GetPrepaidVoucherCode(XNAOffers offer)
        {
            string voucher = "";
            switch (offer)
            {
                case XNAOffers.FourMonthPP: voucher = "4F7YQ-DTQXQ-2VD9F-TR93P-G8TGT"; break;
                case XNAOffers.YearlyPP: voucher = "PCVB9-JQCF8-P8V6X-TXXQR-FCYTD"; break;
                default:
                    throw new Exception("The specified XNA offer does not has an associated prepaid voucher code.");
            }
            return voucher;
        }

        public enum Gameplay48HourOffers : ulong
        {
            Standard = 0xFFFE07D10990000A,
        }

        public static string GetPrepaidVoucherCode(Gameplay48HourOffers offer)
        {
            string voucher = "";
            switch (offer)
            {
                case Gameplay48HourOffers.Standard: voucher = "xaaaa-aaaaa-aaaaa-aaaaa-aaaaa"; break;
                default:
                    throw new Exception("The specified 48-hour Gameplay offer does not has an associated prepaid voucher code.");
            }
            return voucher;
        }

        public enum FreeGameOffers : ulong
        {
            FreeGame1 = 0xFFFE084600000057,
        }

        // --------------------------------------------------
        // Points offers

        public enum PointsOffers
        {
            CC400US,
            CC500GB,
            CC500US,
            CC1000GB,
            CC1000US,
            CC2000GB,
            CC2000US,
            CC5000GB,
            CC5000US,
            PP100,
            PP160,
            PP700,
            PP1250,
            PP1400,
            PP1500,
            PP1600,
            PP2100,
            PP3000,
            PP3500,
            PP4000,
            PP4100,
            ZuneCC400,
            ZuneCC1200,
            ZuneCC2000,
            ZuneCC4000,
            ZunePP400,
            ZunePP1200,
            ZunePP2000,
            ZunePP4000,
            Promo100,
            Promo200,
            Promo300,
            Promo400,
            Promo500,
            WH5000US,
            WH5000CN,
            WH1000CN,
            NZPP3000
        };


        public static ulong GetPointsOfferId(PointsOffers offer)
        {
            ulong offerId = 0;

            switch (offer)
            {
                case PointsOffers.CC400US: offerId = 0xFFFE07D10FF00119;
                    break;
                case PointsOffers.CC500GB: offerId = 0XFFFE07D10FF00003;
                    break;
                case PointsOffers.CC500US:    offerId = 0xFFFE07D10FF00003;
                    break;
                case PointsOffers.CC1000US:   offerId = 0xFFFE07D10FF00005;
                    break;
                case PointsOffers.CC2000US:   offerId = 0xFFFE07D10FF00007;
                    break;
                case PointsOffers.CC5000US:   offerId = 0xFFFE07D10FF00009;
                    break;
                case PointsOffers.CC1000GB:   offerId = 0xFFFE07D10FF0000B;
                    break;
                case PointsOffers.CC2000GB:   offerId = 0XFFFE07D10FF0000D;
                    break;
                case PointsOffers.CC5000GB:   offerId = 0XFFFE07D10FF00010;
                    break;
                case PointsOffers.PP100:      offerId = 0xFFFE07D10FF00033;
                    break;
                case PointsOffers.PP160: offerId = 0xFFFE07D10FF00050;
     