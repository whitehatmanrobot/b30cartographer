out] */ LPCLSID lpClsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Run( 
            /* [in] */ LPBINDCTX pbc) = 0;
        
        virtual /* [local] */ BOOL STDMETHODCALLTYPE IsRunning( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LockRunning( 
            /* [in] */ BOOL fLock,
            /* [in] */ BOOL fLastUnlockCloses) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetContainedObject( 
            /* [in] */ BOOL fContained) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRunnableObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IRunnableObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IRunnableObject __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IRunnableObject __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetRunningClass )( 
            IRunnableObject __RPC_FAR * This,
            /* [out] */ LPCLSID lpClsid);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Run )( 
            IRunnableObject __RPC_FAR * This,
            /* [in] */ LPBINDCTX pbc);
        
        /* [local] */ BOOL ( STDMETHODCALLTYPE __RPC_FAR *IsRunning )( 
            IRunnableObject __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LockRunning )( 
            IRunnableObject __RPC_FAR * This,
            /* [in] */ BOOL fLock,
            /* [in] */ BOOL fLastUnlockCloses);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetContainedObject )( 
            IRunnableObject __RPC_FAR * This,
            /* [in] */ BOOL fContained);
        
        END_INTERFACE
    } IRunnableObjectVtbl;

    interface IRunnableObject
    {
        CONST_VTBL struct IRunnableObjectVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRunnableObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRunnableObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRunnableObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRunnableObject_GetRunningClass(This,lpClsid)	\
    (This)->lpVtbl -> GetRunningClass(This,lpClsid)

#define IRunnableObject_Run(This,pbc)	\
    (This)->lpVtbl -> Run(This,pbc)

#define IRunnableObject_IsRunning(This)	\
    (This)->lpVtbl -> IsRunning(This)

#define IRunnableObject_LockRunning(This,fLock,fLastUnlockCloses)	\
    (This)->lpVtbl -> LockRunning(This,fLock,fLastUnlockCloses)

#define IRunnableObject_SetContainedObject(This,fContained)	\
    (This)->lpVtbl -> SetContainedObject(This,fContained)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IRunnableObject_GetRunningClass_Proxy( 
    IRunnableObject __RPC_FAR * This,
    /* [out] */ LPCLSID lpClsid);


void __RPC_STUB IRunnableObject_GetRunningClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRunnableObject_Run_Proxy( 
    IRunnableObject __RPC_FAR * This,
    /* [in] */ LPBINDCTX pbc);


void __RPC_STUB IRunnableObject_Run_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IRunnableObject_RemoteIsRunning_Proxy( 
    IRunnableObject __RPC_FAR * This);


void __RPC_STUB IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRunnableObject_LockRunning_Proxy( 
    IRunnableObject __RPC_FAR * This,
    /* [in] */ BOOL fLock,
    /* [in] */ BOOL fLastUnlockCloses);


void __RPC_STUB IRunnableObject_LockRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRunnableObject_SetContainedObject_Proxy( 
    IRunnableObject __RPC_FAR * This,
    /* [in] */ BOOL fContained);


void __RPC_STUB IRunnableObject_SetContainedObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRunnableObject_INTERFACE_DEFINED__ */


#ifndef __IRunningObjectTable_INTERFACE_DEFINED__
#define __IRunningObjectTable_INTERFACE_DEFINED__

/* interface IRunningObjectTable */
/* [uuid][object] */ 

typedef /* [unique] */ IRunningObjectTable __RPC_FAR *LPRUNNINGOBJECTTABLE;


EXTERN_C const IID IID_IRunningObjectTable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000010-0000-0000-C000-000000000046")
    IRunningObjectTable : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Register( 
            /* [in] */ DWORD grfFlags,
            /* [unique][in] */ IUnknown __RPC_FAR *punkObject,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkObjectName,
            /* [out] */ DWORD __RPC_FAR *pdwRegister) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Revoke( 
            /* [in] */ DWORD dwRegister) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsRunning( 
            /* [unique][in] */ IMoniker __RPC_FAR *pmkObjectName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetObject( 
            /* [unique][in] */ IMoniker __RPC_FAR *pmkObjectName,
            /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *ppunkObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NoteChangeTime( 
            /* [in] */ DWORD dwRegister,
            /* [in] */ FILETIME __RPC_FAR *pfiletime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTimeOfLastChange( 
            /* [unique][in] */ IMoniker __RPC_FAR *pmkObjectName,
            /* [out] */ FILETIME __RPC_FAR *pfiletime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumRunning( 
            /* [out] */ IEnumMoniker __RPC_FAR *__RPC_FAR *ppenumMoniker) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRunningObjectTableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IRunningObjectTable __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IRunningObjectTable __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IRunningObjectTable __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Register )( 
            IRunningObjectTable __RPC_FAR * This,
            /* [in] */ DWORD grfFlags,
            /* [unique][in] */ IUnknown __RPC_FAR *punkObject,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkObjectName,
            /* [out] */ DWORD __RPC_FAR *pdwRegister);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Revoke )( 
            IRunningObjectTable __RPC_FAR * This,
            /* [in] */ DWORD dwRegister);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsRunning )( 
            IRunningObjectTable __RPC_FAR * This,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkObjectName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetObject )( 
            IRunningObjectTable __RPC_FAR * This,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkObjectName,
            /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *ppunkObject);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *NoteChangeTime )( 
            IRunningObjectTable __RPC_FAR * This,
            /* [in] */ DWORD dwRegister,
            /* [in] */ FILETIME __RPC_FAR *pfiletime);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTimeOfLastChange )( 
            IRunningObjectTable __RPC_FAR * This,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkObjectName,
            /* [out] */ FILETIME __RPC_FAR *pfiletime);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumRunning )( 
            IRunningObjectTable __RPC_FAR * This,
            /* [out] */ IEnumMoniker __RPC_FAR *__RPC_FAR *ppenumMoniker);
        
        END_INTERFACE
    } IRunningObjectTableVtbl;

    interface IRunningObjectTable
    {
        CONST_VTBL struct IRunningObjectTableVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRunningObjectTable_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRunningObjectTable_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRunningObjectTable_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRunningObjectTable_Register(This,grfFlags,punkObject,pmkObjectName,pdwRegister)	\
    (This)->lpVtbl -> Register(This,grfFlags,punkObject,pmkObjectName,pdwRegister)

#define IRunningObjectTable_Revoke(This,dwRegister)	\
    (This)->lpVtbl -> Revoke(This,dwRegister)

#define IRunningObjectTable_IsRunning(This,pmkObjectName)	\
    (This)->lpVtbl -> IsRunning(This,pmkObjectName)

#define IRunningObjectTable_GetObject(This,pmkObjectName,ppunkObject)	\
    (This)->lpVtbl -> GetObject(This,pmkObjectName,ppunkObject)

#define IRunningObjectTable_NoteChangeTime(This,dwRegister,pfiletime)	\
    (This)->lpVtbl -> NoteChangeTime(This,dwRegister,pfiletime)

#define IRunningObjectTable_GetTimeOfLastChange(This,pmkObjectName,pfiletime)	\
    (This)->lpVtbl -> GetTimeOfLastChange(This,pmkObjectName,pfiletime)

#define IRunningObjectTable_EnumRunning(This,ppenumMoniker)	\
    (This)->lpVtbl -> EnumRunning(This,ppenumMoniker)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IRunningObjectTable_Register_Proxy( 
    IRunningObjectTable __RPC_FAR * This,
    /* [in] */ DWORD grfFlags,
    /* [unique][in] */ IUnknown __RPC_FAR *punkObject,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkObjectName,
    /* [out] */ DWORD __RPC_FAR *pdwRegister);


void __RPC_STUB IRunningObjectTable_Register_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRunningObjectTable_Revoke_Proxy( 
    IRunningObjectTable __RPC_FAR * This,
    /* [in] */ DWORD dwRegister);


void __RPC_STUB IRunningObjectTable_Revoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRunningObjectTable_IsRunning_Proxy( 
    IRunningObjectTable __RPC_FAR * This,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkObjectName);


void __RPC_STUB IRunningObjectTable_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRunningObjectTable_GetObject_Proxy( 
    IRunningObjectTable __RPC_FAR * This,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkObjectName,
    /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *ppunkObject);


void __RPC_STUB IRunningObjectTable_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRunningObjectTable_NoteChangeTime_Proxy( 
    IRunningObjectTable __RPC_FAR * This,
    /* [in] */ DWORD dwRegister,
    /* [in] */ FILETIME __RPC_FAR *pfiletime);


void __RPC_STUB IRunningObjectTable_NoteChangeTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRunningObjectTable_GetTimeOfLastChange_Proxy( 
    IRunningObjectTable __RPC_FAR * This,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkObjectName,
    /* [out] */ FILETIME __RPC_FAR *pfiletime);


void __RPC_STUB IRunningObjectTable_GetTimeOfLastChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRunningObjectTable_EnumRunning_Proxy( 
    IRunningObjectTable __RPC_FAR * This,
    /* [out] */ IEnumMoniker __RPC_FAR *__RPC_FAR *ppenumMoniker);


void __RPC_STUB IRunningObjectTable_EnumRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRunningObjectTable_INTERFACE_DEFINED__ */


#ifndef __IPersist_INTERFACE_DEFINED__
#define __IPersist_INTERFACE_DEFINED__

/* interface IPersist */
/* [uuid][object] */ 

typedef /* [unique] */ IPersist __RPC_FAR *LPPERSIST;


EXTERN_C const IID IID_IPersist;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0000010c-0000-0000-C000-000000000046")
    IPersist : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetClassID( 
            /* [out] */ CLSID __RPC_FAR *pClassID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPersistVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPersist __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPersist __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPersist __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassID )( 
            IPersist __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClassID);
        
        END_INTERFACE
    } IPersistVtbl;

    interface IPersist
    {
        CONST_VTBL struct IPersistVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPersist_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPersist_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPersist_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPersist_GetClassID(This,pClassID)	\
    (This)->lpVtbl -> GetClassID(This,pClassID)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPersist_GetClassID_Proxy( 
    IPersist __RPC_FAR * This,
    /* [out] */ CLSID __RPC_FAR *pClassID);


void __RPC_STUB IPersist_GetClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPersist_INTERFACE_DEFINED__ */


#ifndef __IPersistStream_INTERFACE_DEFINED__
#define __IPersistStream_INTERFACE_DEFINED__

/* interface IPersistStream */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IPersistStream __RPC_FAR *LPPERSISTSTREAM;


EXTERN_C const IID IID_IPersistStream;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000109-0000-0000-C000-000000000046")
    IPersistStream : public IPersist
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsDirty( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Load( 
            /* [unique][in] */ IStream __RPC_FAR *pStm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( 
            /* [unique][in] */ IStream __RPC_FAR *pStm,
            /* [in] */ BOOL fClearDirty) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSizeMax( 
            /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPersistStreamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPersistStream __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPersistStream __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPersistStream __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassID )( 
            IPersistStream __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClassID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsDirty )( 
            IPersistStream __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Load )( 
            IPersistStream __RPC_FAR * This,
            /* [unique][in] */ IStream __RPC_FAR *pStm);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Save )( 
            IPersistStream __RPC_FAR * This,
            /* [unique][in] */ IStream __RPC_FAR *pStm,
            /* [in] */ BOOL fClearDirty);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSizeMax )( 
            IPersistStream __RPC_FAR * This,
            /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbSize);
        
        END_INTERFACE
    } IPersistStreamVtbl;

    interface IPersistStream
    {
        CONST_VTBL struct IPersistStreamVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPersistStream_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPersistStream_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPersistStream_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPersistStream_GetClassID(This,pClassID)	\
    (This)->lpVtbl -> GetClassID(This,pClassID)


#define IPersistStream_IsDirty(This)	\
    (This)->lpVtbl -> IsDirty(This)

#define IPersistStream_Load(This,pStm)	\
    (This)->lpVtbl -> Load(This,pStm)

#define IPersistStream_Save(This,pStm,fClearDirty)	\
    (This)->lpVtbl -> Save(This,pStm,fClearDirty)

#define IPersistStream_GetSizeMax(This,pcbSize)	\
    (This)->lpVtbl -> GetSizeMax(This,pcbSize)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPersistStream_IsDirty_Proxy( 
    IPersistStream __RPC_FAR * This);


void __RPC_STUB IPersistStream_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistStream_Load_Proxy( 
    IPersistStream __RPC_FAR * This,
    /* [unique][in] */ IStream __RPC_FAR *pStm);


void __RPC_STUB IPersistStream_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistStream_Save_Proxy( 
    IPersistStream __RPC_FAR * This,
    /* [unique][in] */ IStream __RPC_FAR *pStm,
    /* [in] */ BOOL fClearDirty);


void __RPC_STUB IPersistStream_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistStream_GetSizeMax_Proxy( 
    IPersistStream __RPC_FAR * This,
    /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbSize);


void __RPC_STUB IPersistStream_GetSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPersistStream_INTERFACE_DEFINED__ */


#ifndef __IMoniker_INTERFACE_DEFINED__
#define __IMoniker_INTERFACE_DEFINED__

/* interface IMoniker */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IMoniker __RPC_FAR *LPMONIKER;

typedef 
enum tagMKSYS
    {	MKSYS_NONE	= 0,
	MKSYS_GENERICCOMPOSITE	= 1,
	MKSYS_FILEMONIKER	= 2,
	MKSYS_ANTIMONIKER	= 3,
	MKSYS_ITEMMONIKER	= 4,
	MKSYS_POINTERMONIKER	= 5,
	MKSYS_CLASSMONIKER	= 7,
	MKSYS_OBJREFMONIKER	= 8
    }	MKSYS;

typedef /* [v1_enum] */ 
enum tagMKREDUCE
    {	MKRREDUCE_ONE	= 3 << 16,
	MKRREDUCE_TOUSER	= 2 << 16,
	MKRREDUCE_THROUGHUSER	= 1 << 16,
	MKRREDUCE_ALL	= 0
    }	MKRREDUCE;


EXTERN_C const IID IID_IMoniker;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0000000f-0000-0000-C000-000000000046")
    IMoniker : public IPersistStream
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE BindToObject( 
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
            /* [in] */ REFIID riidResult,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvResult) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE BindToStorage( 
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObj) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reduce( 
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [in] */ DWORD dwReduceHowFar,
            /* [unique][out][in] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkToLeft,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkReduced) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ComposeWith( 
            /* [unique][in] */ IMoniker __RPC_FAR *pmkRight,
            /* [in] */ BOOL fOnlyIfNotGeneric,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkComposite) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Enum( 
            /* [in] */ BOOL fForward,
            /* [out] */ IEnumMoniker __RPC_FAR *__RPC_FAR *ppenumMoniker) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsEqual( 
            /* [unique][in] */ IMoniker __RPC_FAR *pmkOtherMoniker) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Hash( 
            /* [out] */ DWORD __RPC_FAR *pdwHash) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsRunning( 
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkNewlyRunning) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTimeOfLastChange( 
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
            /* [out] */ FILETIME __RPC_FAR *pFileTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Inverse( 
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CommonPrefixWith( 
            /* [unique][in] */ IMoniker __RPC_FAR *pmkOther,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkPrefix) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RelativePathTo( 
            /* [unique][in] */ IMoniker __RPC_FAR *pmkOther,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkRelPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDisplayName( 
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
            /* [out] */ LPOLESTR __RPC_FAR *ppszDisplayName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ParseDisplayName( 
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
            /* [in] */ LPOLESTR pszDisplayName,
            /* [out] */ ULONG __RPC_FAR *pchEaten,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkOut) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsSystemMoniker( 
            /* [out] */ DWORD __RPC_FAR *pdwMksys) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMonikerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IMoniker __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IMoniker __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IMoniker __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassID )( 
            IMoniker __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClassID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsDirty )( 
            IMoniker __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Load )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IStream __RPC_FAR *pStm);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Save )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IStream __RPC_FAR *pStm,
            /* [in] */ BOOL fClearDirty);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSizeMax )( 
            IMoniker __RPC_FAR * This,
            /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbSize);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *BindToObject )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
            /* [in] */ REFIID riidResult,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvResult);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *BindToStorage )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObj);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reduce )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [in] */ DWORD dwReduceHowFar,
            /* [unique][out][in] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkToLeft,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkReduced);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ComposeWith )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkRight,
            /* [in] */ BOOL fOnlyIfNotGeneric,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkComposite);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Enum )( 
            IMoniker __RPC_FAR * This,
            /* [in] */ BOOL fForward,
            /* [out] */ IEnumMoniker __RPC_FAR *__RPC_FAR *ppenumMoniker);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsEqual )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkOtherMoniker);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Hash )( 
            IMoniker __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwHash);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsRunning )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkNewlyRunning);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTimeOfLastChange )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
            /* [out] */ FILETIME __RPC_FAR *pFileTime);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Inverse )( 
            IMoniker __RPC_FAR * This,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmk);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CommonPrefixWith )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkOther,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkPrefix);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RelativePathTo )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkOther,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkRelPath);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDisplayName )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
            /* [out] */ LPOLESTR __RPC_FAR *ppszDisplayName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ParseDisplayName )( 
            IMoniker __RPC_FAR * This,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
            /* [in] */ LPOLESTR pszDisplayName,
            /* [out] */ ULONG __RPC_FAR *pchEaten,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkOut);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsSystemMoniker )( 
            IMoniker __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwMksys);
        
        END_INTERFACE
    } IMonikerVtbl;

    interface IMoniker
    {
        CONST_VTBL struct IMonikerVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMoniker_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IMoniker_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IMoniker_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IMoniker_GetClassID(This,pClassID)	\
    (This)->lpVtbl -> GetClassID(This,pClassID)


#define IMoniker_IsDirty(This)	\
    (This)->lpVtbl -> IsDirty(This)

#define IMoniker_Load(This,pStm)	\
    (This)->lpVtbl -> Load(This,pStm)

#define IMoniker_Save(This,pStm,fClearDirty)	\
    (This)->lpVtbl -> Save(This,pStm,fClearDirty)

#define IMoniker_GetSizeMax(This,pcbSize)	\
    (This)->lpVtbl -> GetSizeMax(This,pcbSize)


#define IMoniker_BindToObject(This,pbc,pmkToLeft,riidResult,ppvResult)	\
    (This)->lpVtbl -> BindToObject(This,pbc,pmkToLeft,riidResult,ppvResult)

#define IMoniker_BindToStorage(This,pbc,pmkToLeft,riid,ppvObj)	\
    (This)->lpVtbl -> BindToStorage(This,pbc,pmkToLeft,riid,ppvObj)

#define IMoniker_Reduce(This,pbc,dwReduceHowFar,ppmkToLeft,ppmkReduced)	\
    (This)->lpVtbl -> Reduce(This,pbc,dwReduceHowFar,ppmkToLeft,ppmkReduced)

#define IMoniker_ComposeWith(This,pmkRight,fOnlyIfNotGeneric,ppmkComposite)	\
    (This)->lpVtbl -> ComposeWith(This,pmkRight,fOnlyIfNotGeneric,ppmkComposite)

#define IMoniker_Enum(This,fForward,ppenumMoniker)	\
    (This)->lpVtbl -> Enum(This,fForward,ppenumMoniker)

#define IMoniker_IsEqual(This,pmkOtherMoniker)	\
    (This)->lpVtbl -> IsEqual(This,pmkOtherMoniker)

#define IMoniker_Hash(This,pdwHash)	\
    (This)->lpVtbl -> Hash(This,pdwHash)

#define IMoniker_IsRunning(This,pbc,pmkToLeft,pmkNewlyRunning)	\
    (This)->lpVtbl -> IsRunning(This,pbc,pmkToLeft,pmkNewlyRunning)

#define IMoniker_GetTimeOfLastChange(This,pbc,pmkToLeft,pFileTime)	\
    (This)->lpVtbl -> GetTimeOfLastChange(This,pbc,pmkToLeft,pFileTime)

#define IMoniker_Inverse(This,ppmk)	\
    (This)->lpVtbl -> Inverse(This,ppmk)

#define IMoniker_CommonPrefixWith(This,pmkOther,ppmkPrefix)	\
    (This)->lpVtbl -> CommonPrefixWith(This,pmkOther,ppmkPrefix)

#define IMoniker_RelativePathTo(This,pmkOther,ppmkRelPath)	\
    (This)->lpVtbl -> RelativePathTo(This,pmkOther,ppmkRelPath)

#define IMoniker_GetDisplayName(This,pbc,pmkToLeft,ppszDisplayName)	\
    (This)->lpVtbl -> GetDisplayName(This,pbc,pmkToLeft,ppszDisplayName)

#define IMoniker_ParseDisplayName(This,pbc,pmkToLeft,pszDisplayName,pchEaten,ppmkOut)	\
    (This)->lpVtbl -> ParseDisplayName(This,pbc,pmkToLeft,pszDisplayName,pchEaten,ppmkOut)

#define IMoniker_IsSystemMoniker(This,pdwMksys)	\
    (This)->lpVtbl -> IsSystemMoniker(This,pdwMksys)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IMoniker_RemoteBindToObject_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
    /* [in] */ REFIID riidResult,
    /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppvResult);


void __RPC_STUB IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMoniker_RemoteBindToStorage_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppvObj);


void __RPC_STUB IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_Reduce_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [in] */ DWORD dwReduceHowFar,
    /* [unique][out][in] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkToLeft,
    /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkReduced);


void __RPC_STUB IMoniker_Reduce_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_ComposeWith_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkRight,
    /* [in] */ BOOL fOnlyIfNotGeneric,
    /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkComposite);


void __RPC_STUB IMoniker_ComposeWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_Enum_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [in] */ BOOL fForward,
    /* [out] */ IEnumMoniker __RPC_FAR *__RPC_FAR *ppenumMoniker);


void __RPC_STUB IMoniker_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_IsEqual_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkOtherMoniker);


void __RPC_STUB IMoniker_IsEqual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_Hash_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwHash);


void __RPC_STUB IMoniker_Hash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_IsRunning_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkNewlyRunning);


void __RPC_STUB IMoniker_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_GetTimeOfLastChange_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
    /* [out] */ FILETIME __RPC_FAR *pFileTime);


void __RPC_STUB IMoniker_GetTimeOfLastChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_Inverse_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmk);


void __RPC_STUB IMoniker_Inverse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_CommonPrefixWith_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkOther,
    /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkPrefix);


void __RPC_STUB IMoniker_CommonPrefixWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_RelativePathTo_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkOther,
    /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkRelPath);


void __RPC_STUB IMoniker_RelativePathTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_GetDisplayName_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
    /* [out] */ LPOLESTR __RPC_FAR *ppszDisplayName);


void __RPC_STUB IMoniker_GetDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_ParseDisplayName_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
    /* [in] */ LPOLESTR pszDisplayName,
    /* [out] */ ULONG __RPC_FAR *pchEaten,
    /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkOut);


void __RPC_STUB IMoniker_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMoniker_IsSystemMoniker_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwMksys);


void __RPC_STUB IMoniker_IsSystemMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMoniker_INTERFACE_DEFINED__ */


#ifndef __IROTData_INTERFACE_DEFINED__
#define __IROTData_INTERFACE_DEFINED__

/* interface IROTData */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IROTData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f29f6bc0-5021-11ce-aa15-00006901293f")
    IROTData : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetComparisonData( 
            /* [size_is][out] */ byte __RPC_FAR *pbData,
            /* [in] */ ULONG cbMax,
            /* [out] */ ULONG __RPC_FAR *pcbData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IROTDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IROTData __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IROTData __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IROTData __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetComparisonData )( 
            IROTData __RPC_FAR * This,
            /* [size_is][out] */ byte __RPC_FAR *pbData,
            /* [in] */ ULONG cbMax,
            /* [out] */ ULONG __RPC_FAR *pcbData);
        
        END_INTERFACE
    } IROTDataVtbl;

    interface IROTData
    {
        CONST_VTBL struct IROTDataVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IROTData_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IROTData_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IROTData_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IROTData_GetComparisonData(This,pbData,cbMax,pcbData)	\
    (This)->lpVtbl -> GetComparisonData(This,pbData,cbMax,pcbData)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IROTData_GetComparisonData_Proxy( 
    IROTData __RPC_FAR * This,
    /* [size_is][out] */ byte __RPC_FAR *pbData,
    /* [in] */ ULONG cbMax,
    /* [out] */ ULONG __RPC_FAR *pcbData);


void __RPC_STUB IROTData_GetComparisonData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IROTData_INTERFACE_DEFINED__ */


#ifndef __IEnumString_INTERFACE_DEFINED__
#define __IEnumString_INTERFACE_DEFINED__

/* interface IEnumString */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IEnumString __RPC_FAR *LPENUMSTRING;


EXTERN_C const IID IID_IEnumString;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000101-0000-0000-C000-000000000046")
    IEnumString : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ LPOLESTR __RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumString __RPC_FAR *__RPC_FAR *ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumStringVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IEnumString __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IEnumString __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IEnumString __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Next )( 
            IEnumString __RPC_FAR * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ LPOLESTR __RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Skip )( 
            IEnumString __RPC_FAR * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            IEnumString __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IEnumString __RPC_FAR * This,
            /* [out] */ IEnumString __RPC_FAR *__RPC_FAR *ppenum);
        
        END_INTERFACE
    } IEnumStringVtbl;

    interface IEnumString
    {
        CONST_VTBL struct IEnumStringVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumString_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumString_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumString_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumString_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumString_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumString_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumString_Clone(This,ppenum)	\
    (This)->lpVtbl -> Clone(This,ppenum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumString_RemoteNext_Proxy( 
    IEnumString __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ LPOLESTR __RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


void __RPC_STUB IEnumString_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumString_Skip_Proxy( 
    IEnumString __RPC_FAR * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumString_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumString_Reset_Proxy( 
    IEnumString __RPC_FAR * This);


void __RPC_STUB IEnumString_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumString_Clone_Proxy( 
    IEnumString __RPC_FAR * This,
    /* [out] */ IEnumString __RPC_FAR *__RPC_FAR *ppenum);


void __RPC_STUB IEnumString_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumString_INTERFACE_DEFINED__ */


#ifndef __ISequentialStream_INTERFACE_DEFINED__
#define __ISequentialStream_INTERFACE_DEFINED__

/* interface ISequentialStream */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ISequentialStream;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0c733a30-2a1c-11ce-ade5-00aa0044773d")
    ISequentialStream : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Read( 
            /* [length_is][size_is][out] */ void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbRead) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Write( 
            /* [size_is][in] */ const void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbWritten) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISequentialStreamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISequentialStream __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISequentialStream __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISequentialStream __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Read )( 
            ISequentialStream __RPC_FAR * This,
            /* [length_is][size_is][out] */ void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbRead);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Write )( 
            ISequentialStream __RPC_FAR * This,
            /* [size_is][in] */ const void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbWritten);
        
        END_INTERFACE
    } ISequentialStreamVtbl;

    interface ISequentialStream
    {
        CONST_VTBL struct ISequentialStreamVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISequentialStream_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISequentialStream_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISequentialStream_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISequentialStream_Read(This,pv,cb,pcbRead)	\
    (This)->lpVtbl -> Read(This,pv,cb,pcbRead)

#define ISequentialStream_Write(This,pv,cb,pcbWritten)	\
    (This)->lpVtbl -> Write(This,pv,cb,pcbWritten)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE ISequentialStream_RemoteRead_Proxy( 
    ISequentialStream __RPC_FAR * This,
    /* [length_is][size_is][out] */ byte __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbRead);


void __RPC_STUB ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE ISequentialStream_RemoteWrite_Proxy( 
    ISequentialStream __RPC_FAR * This,
    /* [size_is][in] */ const byte __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbWritten);


void __RPC_STUB ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISequentialStream_INTERFACE_DEFINED__ */


#ifndef __IStream_INTERFACE_DEFINED__
#define __IStream_INTERFACE_DEFINED__

/* interface IStream */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IStream __RPC_FAR *LPSTREAM;

typedef struct tagSTATSTG
    {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
    }	STATSTG;

typedef 
enum tagSTGTY
    {	STGTY_STORAGE	= 1,
	STGTY_STREAM	= 2,
	STGTY_LOCKBYTES	= 3,
	STGTY_PROPERTY	= 4
    }	STGTY;

typedef 
enum tagSTREAM_SEEK
    {	STREAM_SEEK_SET	= 0,
	STREAM_SEEK_CUR	= 1,
	STREAM_SEEK_END	= 2
    }	STREAM_SEEK;

typedef 
enum tagLOCKTYPE
    {	LOCK_WRITE	= 1,
	LOCK_EXCLUSIVE	= 2,
	LOCK_ONLYONCE	= 4
    }	LOCKTYPE;


EXTERN_C const IID IID_IStream;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0000000c-0000-0000-C000-000000000046")
    IStream : public ISequentialStream
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Seek( 
            /* [in] */ LARGE_INTEGER dlibMove,
            /* [in] */ DWORD dwOrigin,
            /* [out] */ ULARGE_INTEGER __RPC_FAR *plibNewPosition) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSize( 
            /* [in] */ ULARGE_INTEGER libNewSize) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE CopyTo( 
            /* [unique][in] */ IStream __RPC_FAR *pstm,
            /* [in] */ ULARGE_INTEGER cb,
            /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbRead,
            /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbWritten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Commit( 
            /* [in] */ DWORD grfCommitFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Revert( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LockRegion( 
            /* [in] */ ULARGE_INTEGER libOffset,
            /* [in] */ ULARGE_INTEGER cb,
            /* [in] */ DWORD dwLockType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnlockRegion( 
            /* [in] */ ULARGE_INTEGER libOffset,
            /* [in] */ ULARGE_INTEGER cb,
            /* [in] */ DWORD dwLockType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Stat( 
            /* [out] */ STATSTG __RPC_FAR *pstatstg,
            /* [in] */ DWORD grfStatFlag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppstm) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IStreamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IStream __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IStream __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IStream __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Read )( 
            IStream __RPC_FAR * This,
            /* [length_is][size_is][out] */ void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbRead);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Write )( 
            IStream __RPC_FAR * This,
            /* [size_is][in] */ const void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbWritten);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Seek )( 
            IStream __RPC_FAR * This,
            /* [in] */ LARGE_INTEGER dlibMove,
            /* [in] */ DWORD dwOrigin,
            /* [out] */ ULARGE_INTEGER __RPC_FAR *plibNewPosition);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetSize )( 
            IStream __RPC_FAR * This,
            /* [in] */ ULARGE_INTEGER libNewSize);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CopyTo )( 
            IStream __RPC_FAR * This,
            /* [unique][in] */ IStream __RPC_FAR *pstm,
            /* [in] */ ULARGE_INTEGER cb,
            /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbRead,
            /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbWritten);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Commit )( 
            IStream __RPC_FAR * This,
            /* [in] */ DWORD grfCommitFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Revert )( 
            IStream __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LockRegion )( 
            IStream __RPC_FAR * This,
            /* [in] */ ULARGE_INTEGER libOffset,
            /* [in] */ ULARGE_INTEGER cb,
            /* [in] */ DWORD dwLockType);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UnlockRegion )( 
            IStream __RPC_FAR * This,
            /* [in] */ ULARGE_INTEGER libOffset,
            /* [in] */ ULARGE_INTEGER cb,
            /* [in] */ DWORD dwLockType);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Stat )( 
            IStream __RPC_FAR * This,
            /* [out] */ STATSTG __RPC_FAR *pstatstg,
            /* [in] */ DWORD grfStatFlag);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IStream __RPC_FAR * This,
            /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppstm);
        
        END_INTERFACE
    } IStreamVtbl;

    interface IStream
    {
        CONST_VTBL struct IStreamVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IStream_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IStream_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IStream_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IStream_Read(This,pv,cb,pcbRead)	\
    (This)->lpVtbl -> Read(This,pv,cb,pcbRead)

#define IStream_Write(This,pv,cb,pcbWritten)	\
    (This)->lpVtbl -> Write(This,pv,cb,pcbWritten)


#define IStream_Seek(This,dlibMove,dwOrigin,plibNewPosition)	\
    (This)->lpVtbl -> Seek(This,dlibMove,dwOrigin,plibNewPosition)

#define IStream_SetSize(This,libNewSize)	\
    (This)->lpVtbl -> SetSize(This,libNewSize)

#define IStream_CopyTo(This,pstm,cb,pcbRead,pcbWritten)	\
    (This)->lpVtbl -> CopyTo(This,pstm,cb,pcbRead,pcbWritten)

#define IStream_Commit(This,grfCommitFlags)	\
    (This)->lpVtbl -> Commit(This,grfCommitFlags)

#define IStream_Revert(This)	\
    (This)->lpVtbl -> Revert(This)

#define IStream_LockRegion(This,libOffset,cb,dwLockType)	\
    (This)->lpVtbl -> LockRegion(This,libOffset,cb,dwLockType)

#define IStream_UnlockRegion(This,libOffset,cb,dwLockType)	\
    (This)->lpVtbl -> UnlockRegion(This,libOffset,cb,dwLockType)

#define IStream_Stat(This,pstatstg,grfStatFlag)	\
    (This)->lpVtbl -> Stat(This,pstatstg,grfStatFlag)

#define IStream_Clone(This,ppstm)	\
    (This)->lpVtbl -> Clone(This,ppstm)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IStream_RemoteSeek_Proxy( 
    IStream __RPC_FAR * This,
    /* [in] */ LARGE_INTEGER dlibMove,
    /* [in] */ DWORD dwOrigin,
    /* [out] */ ULARGE_INTEGER __RPC_FAR *plibNewPosition);


void __RPC_STUB IStream_RemoteSeek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStream_SetSize_Proxy( 
    IStream __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER libNewSize);


void __RPC_STUB IStream_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IStream_RemoteCopyTo_Proxy( 
    IStream __RPC_FAR * This,
    /* [unique][in] */ IStream __RPC_FAR *pstm,
    /* [in] */ ULARGE_INTEGER cb,
    /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbRead,
    /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbWritten);


void __RPC_STUB IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStream_Commit_Proxy( 
    IStream __RPC_FAR * This,
    /* [in] */ DWORD grfCommitFlags);


void __RPC_STUB IStream_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStream_Revert_Proxy( 
    IStream __RPC_FAR * This);


void __RPC_STUB IStream_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStream_LockRegion_Proxy( 
    IStream __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER libOffset,
    /* [in] */ ULARGE_INTEGER cb,
    /* [in] */ DWORD dwLockType);


void __RPC_STUB IStream_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStream_UnlockRegion_Proxy( 
    IStream __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER libOffset,
    /* [in] */ ULARGE_INTEGER cb,
    /* [in] */ DWORD dwLockType);


void __RPC_STUB IStream_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStream_Stat_Proxy( 
    IStream __RPC_FAR * This,
    /* [out] */ STATSTG __RPC_FAR *pstatstg,
    /* [in] */ DWORD grfStatFlag);


void __RPC_STUB IStream_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStream_Clone_Proxy( 
    IStream __RPC_FAR * This,
    /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppstm);


void __RPC_STUB IStream_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IStream_INTERFACE_DEFINED__ */


#ifndef __IEnumSTATSTG_INTERFACE_DEFINED__
#define __IEnumSTATSTG_INTERFACE_DEFINED__

/* interface IEnumSTATSTG */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IEnumSTATSTG __RPC_FAR *LPENUMSTATSTG;


EXTERN_C const IID IID_IEnumSTATSTG;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0000000d-0000-0000-C000-000000000046")
    IEnumSTATSTG : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ STATSTG __RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumSTATSTG __RPC_FAR *__RPC_FAR *ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumSTATSTGVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IEnumSTATSTG __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IEnumSTATSTG __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IEnumSTATSTG __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Next )( 
            IEnumSTATSTG __RPC_FAR * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ STATSTG __RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Skip )( 
            IEnumSTATSTG __RPC_FAR * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            IEnumSTATSTG __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IEnumSTATSTG __RPC_FAR * This,
            /* [out] */ IEnumSTATSTG __RPC_FAR *__RPC_FAR *ppenum);
        
        END_INTERFACE
    } IEnumSTATSTGVtbl;

    interface IEnumSTATSTG
    {
        CONST_VTBL struct IEnumSTATSTGVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumSTATSTG_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumSTATSTG_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumSTATSTG_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumSTATSTG_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumSTATSTG_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumSTATSTG_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumSTATSTG_Clone(This,ppenum)	\
    (This)->lpVtbl -> Clone(This,ppenum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumSTATSTG_RemoteNext_Proxy( 
    IEnumSTATSTG __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ STATSTG __RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


void __RPC_STUB IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumSTATSTG_Skip_Proxy( 
    IEnumSTATSTG __RPC_FAR * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumSTATSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumSTATSTG_Reset_Proxy( 
    IEnumSTATSTG __RPC_FAR * This);


void __RPC_STUB IEnumSTATSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumSTATSTG_Clone_Proxy( 
    IEnumSTATSTG __RPC_FAR * This,
    /* [out] */ IEnumSTATSTG __RPC_FAR *__RPC_FAR *ppenum);


void __RPC_STUB IEnumSTATSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumSTATSTG_INTERFACE_DEFINED__ */


#ifndef __IStorage_INTERFACE_DEFINED__
#define __IStorage_INTERFACE_DEFINED__

/* interface IStorage */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IStorage __RPC_FAR *LPSTORAGE;

typedef struct tagRemSNB
    {
    unsigned long ulCntStr;
    unsigned long ulCntChar;
    /* [size_is] */ OLECHAR rgString[ 1 ];
    }	RemSNB;

typedef /* [unique] */ RemSNB __RPC_FAR *wireSNB;

typedef /* [wire_marshal] */ OLECHAR __RPC_FAR *__RPC_FAR *SNB;


EXTERN_C const IID IID_IStorage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0000000b-0000-0000-C000-000000000046")
    IStorage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateStream( 
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
            /* [in] */ DWORD grfMode,
            /* [in] */ DWORD reserved1,
            /* [in] */ DWORD reserved2,
            /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppstm) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE OpenStream( 
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
            /* [unique][in] */ void __RPC_FAR *reserved1,
            /* [in] */ DWORD grfMode,
            /* [in] */ DWORD reserved2,
            /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppstm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateStorage( 
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
            /* [in] */ DWORD grfMode,
            /* [in] */ DWORD dwStgFmt,
            /* [in] */ DWORD reserved2,
            /* [out] */ IStorage __RPC_FAR *__RPC_FAR *ppstg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpenStorage( 
            /* [string][unique][in] */ const OLECHAR __RPC_FAR *pwcsName,
            /* [unique][in] */ IStorage __RPC_FAR *pstgPriority,
            /* [in] */ DWORD grfMode,
            /* [unique][in] */ SNB snbExclude,
            /* [in] */ DWORD reserved,
            /* [out] */ IStorage __RPC_FAR *__RPC_FAR *ppstg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CopyTo( 
            /* [in] */ DWORD ciidExclude,
            /* [size_is][unique][in] */ const IID __RPC_FAR *rgiidExclude,
            /* [unique][in] */ SNB snbExclude,
            /* [unique][in] */ IStorage __RPC_FAR *pstgDest) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveElementTo( 
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
            /* [unique][in] */ IStorage __RPC_FAR *pstgDest,
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsNewName,
            /* [in] */ DWORD grfFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Commit( 
            /* [in] */ DWORD grfCommitFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Revert( void) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE EnumElements( 
            /* [in] */ DWORD reserved1,
            /* [size_is][unique][in] */ void __RPC_FAR *reserved2,
            /* [in] */ DWORD reserved3,
            /* [out] */ IEnumSTATSTG __RPC_FAR *__RPC_FAR *ppenum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DestroyElement( 
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RenameElement( 
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsOldName,
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsNewName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetElementTimes( 
            /* [string][unique][in] */ const OLECHAR __RPC_FAR *pwcsName,
            /* [unique][in] */ const FILETIME __RPC_FAR *pctime,
            /* [unique][in] */ const FILETIME __RPC_FAR *patime,
            /* [unique][in] */ const FILETIME __RPC_FAR *pmtime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetClass( 
            /* [in] */ REFCLSID clsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetStateBits( 
            /* [in] */ DWORD grfStateBits,
            /* [in] */ DWORD grfMask) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Stat( 
            /* [out] */ STATSTG __RPC_FAR *pstatstg,
            /* [in] */ DWORD grfStatFlag) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IStorageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IStorage __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IStorage __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IStorage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateStream )( 
            IStorage __RPC_FAR * This,
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
            /* [in] */ DWORD grfMode,
            /* [in] */ DWORD reserved1,
            /* [in] */ DWORD reserved2,
            /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppstm);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OpenStream )( 
            IStorage __RPC_FAR * This,
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
            /* [unique][in] */ void __RPC_FAR *reserved1,
            /* [in] */ DWORD grfMode,
            /* [in] */ DWORD reserved2,
            /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppstm);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateStorage )( 
            IStorage __RPC_FAR * This,
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
            /* [in] */ DWORD grfMode,
            /* [in] */ DWORD dwStgFmt,
            /* [in] */ DWORD reserved2,
            /* [out] */ IStorage __RPC_FAR *__RPC_FAR *ppstg);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OpenStorage )( 
            IStorage __RPC_FAR * This,
            /* [string][unique][in] */ const OLECHAR __RPC_FAR *pwcsName,
            /* [unique][in] */ IStorage __RPC_FAR *pstgPriority,
            /* [in] */ DWORD grfMode,
            /* [unique][in] */ SNB snbExclude,
            /* [in] */ DWORD reserved,
            /* [out] */ IStorage __RPC_FAR *__RPC_FAR *ppstg);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CopyTo )( 
            IStorage __RPC_FAR * This,
            /* [in] */ DWORD ciidExclude,
            /* [size_is][unique][in] */ const IID __RPC_FAR *rgiidExclude,
            /* [unique][in] */ SNB snbExclude,
            /* [unique][in] */ IStorage __RPC_FAR *pstgDest);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *MoveElementTo )( 
            IStorage __RPC_FAR * This,
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
            /* [unique][in] */ IStorage __RPC_FAR *pstgDest,
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsNewName,
            /* [in] */ DWORD grfFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Commit )( 
            IStorage __RPC_FAR * This,
            /* [in] */ DWORD grfCommitFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Revert )( 
            IStorage __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumElements )( 
            IStorage __RPC_FAR * This,
            /* [in] */ DWORD reserved1,
            /* [size_is][unique][in] */ void __RPC_FAR *reserved2,
            /* [in] */ DWORD reserved3,
            /* [out] */ IEnumSTATSTG __RPC_FAR *__RPC_FAR *ppenum);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DestroyElement )( 
            IStorage __RPC_FAR * This,
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RenameElement )( 
            IStorage __RPC_FAR * This,
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsOldName,
            /* [string][in] */ const OLECHAR __RPC_FAR *pwcsNewName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetElementTimes )( 
            IStorage __RPC_FAR * This,
            /* [string][unique][in] */ const OLECHAR __RPC_FAR *pwcsName,
            /* [unique][in] */ const FILETIME __RPC_FAR *pctime,
            /* [unique][in] */ const FILETIME __RPC_FAR *patime,
            /* [unique][in] */ const FILETIME __RPC_FAR *pmtime);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetClass )( 
            IStorage __RPC_FAR * This,
            /* [in] */ REFCLSID clsid);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetStateBits )( 
            IStorage __RPC_FAR * This,
            /* [in] */ DWORD grfStateBits,
            /* [in] */ DWORD grfMask);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Stat )( 
            IStorage __RPC_FAR * This,
            /* [out] */ STATSTG __RPC_FAR *pstatstg,
            /* [in] */ DWORD grfStatFlag);
        
        END_INTERFACE
    } IStorageVtbl;

    interface IStorage
    {
        CONST_VTBL struct IStorageVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IStorage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IStorage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IStorage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IStorage_CreateStream(This,pwcsName,grfMode,reserved1,reserved2,ppstm)	\
    (This)->lpVtbl -> CreateStream(This,pwcsName,grfMode,reserved1,reserved2,ppstm)

#define IStorage_OpenStream(This,pwcsName,reserved1,grfMode,reserved2,ppstm)	\
    (This)->lpVtbl -> OpenStream(This,pwcsName,reserved1,grfMode,reserved2,ppstm)

#define IStorage_CreateStorage(This,pwcsName,grfMode,dwStgFmt,reserved2,ppstg)	\
    (This)->lpVtbl -> CreateStorage(This,pwcsName,grfMode,dwStgFmt,reserved2,ppstg)

#define IStorage_OpenStorage(This,pwcsName,pstgPriority,grfMode,snbExclude,reserved,ppstg)	\
    (This)->lpVtbl -> OpenStorage(This,pwcsName,pstgPriority,grfMode,snbExclude,reserved,ppstg)

#define IStorage_CopyTo(This,ciidExclude,rgiidExclude,snbExclude,pstgDest)	\
    (This)->lpVtbl -> CopyTo(This,ciidExclude,rgiidExclude,snbExclude,pstgDest)

#define IStorage_MoveElementTo(This,pwcsName,pstgDest,pwcsNewName,grfFlags)	\
    (This)->lpVtbl -> MoveElementTo(This,pwcsName,pstgDest,pwcsNewName,grfFlags)

#define IStorage_Commit(This,grfCommitFlags)	\
    (This)->lpVtbl -> Commit(This,grfCommitFlags)

#define IStorage_Revert(This)	\
    (This)->lpVtbl -> Revert(This)

#define IStorage_EnumElements(This,reserved1,reserved2,reserved3,ppenum)	\
    (This)->lpVtbl -> EnumElements(This,reserved1,reserved2,reserved3,ppenum)

#define IStorage_DestroyElement(This,pwcsName)	\
    (This)->lpVtbl -> DestroyElement(This,pwcsName)

#define IStorage_RenameElement(This,pwcsOldName,pwcsNewName)	\
    (This)->lpVtbl -> RenameElement(This,pwcsOldName,pwcsNewName)

#define IStorage_SetElementTimes(This,pwcsName,pctime,patime,pmtime)	\
    (This)->lpVtbl -> SetElementTimes(This,pwcsName,pctime,patime,pmtime)

#define IStorage_SetClass(This,clsid)	\
    (This)->lpVtbl -> SetClass(This,clsid)

#define IStorage_SetStateBits(This,grfStateBits,grfMask)	\
    (This)->lpVtbl -> SetStateBits(This,grfStateBits,grfMask)

#define IStorage_Stat(This,pstatstg,grfStatFlag)	\
    (This)->lpVtbl -> Stat(This,pstatstg,grfStatFlag)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IStorage_CreateStream_Proxy( 
    IStorage __RPC_FAR * This,
    /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
    /* [in] */ DWORD grfMode,
    /* [in] */ DWORD reserved1,
    /* [in] */ DWORD reserved2,
    /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppstm);


void __RPC_STUB IStorage_CreateStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IStorage_RemoteOpenStream_Proxy( 
    IStorage __RPC_FAR * This,
    /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
    /* [in] */ unsigned long cbReserved1,
    /* [size_is][unique][in] */ byte __RPC_FAR *reserved1,
    /* [in] */ DWORD grfMode,
    /* [in] */ DWORD reserved2,
    /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppstm);


void __RPC_STUB IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStorage_CreateStorage_Proxy( 
    IStorage __RPC_FAR * This,
    /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
    /* [in] */ DWORD grfMode,
    /* [in] */ DWORD dwStgFmt,
    /* [in] */ DWORD reserved2,
    /* [out] */ IStorage __RPC_FAR *__RPC_FAR *ppstg);


void __RPC_STUB IStorage_CreateStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStorage_OpenStorage_Proxy( 
    IStorage __RPC_FAR * This,
    /* [string][unique][in] */ const OLECHAR __RPC_FAR *pwcsName,
    /* [unique][in] */ IStorage __RPC_FAR *pstgPriority,
    /* [in] */ DWORD grfMode,
    /* [unique][in] */ SNB snbExclude,
    /* [in] */ DWORD reserved,
    /* [out] */ IStorage __RPC_FAR *__RPC_FAR *ppstg);


void __RPC_STUB IStorage_OpenStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStorage_CopyTo_Proxy( 
    IStorage __RPC_FAR * This,
    /* [in] */ DWORD ciidExclude,
    /* [size_is][unique][in] */ const IID __RPC_FAR *rgiidExclude,
    /* [unique][in] */ SNB snbExclude,
    /* [unique][in] */ IStorage __RPC_FAR *pstgDest);


void __RPC_STUB IStorage_CopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStorage_MoveElementTo_Proxy( 
    IStorage __RPC_FAR * This,
    /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
    /* [unique][in] */ IStorage __RPC_FAR *pstgDest,
    /* [string][in] */ const OLECHAR __RPC_FAR *pwcsNewName,
    /* [in] */ DWORD grfFlags);


void __RPC_STUB IStorage_MoveElementTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStorage_Commit_Proxy( 
    IStorage __RPC_FAR * This,
    /* [in] */ DWORD grfCommitFlags);


void __RPC_STUB IStorage_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStorage_Revert_Proxy( 
    IStorage __RPC_FAR * This);


void __RPC_STUB IStorage_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IStorage_RemoteEnumElements_Proxy( 
    IStorage __RPC_FAR * This,
    /* [in] */ DWORD reserved1,
    /* [in] */ unsigned long cbReserved2,
    /* [size_is][unique][in] */ byte __RPC_FAR *reserved2,
    /* [in] */ DWORD reserved3,
    /* [out] */ IEnumSTATSTG __RPC_FAR *__RPC_FAR *ppenum);


void __RPC_STUB IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStorage_DestroyElement_Proxy( 
    IStorage __RPC_FAR * This,
    /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName);


void __RPC_STUB IStorage_DestroyElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStorage_RenameElement_Proxy( 
    IStorage __RPC_FAR * This,
    /* [string][in] */ const OLECHAR __RPC_FAR *pwcsOldName,
    /* [string][in] */ const OLECHAR __RPC_FAR *pwcsNewName);


void __RPC_STUB IStorage_RenameElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStorage_SetElementTimes_Proxy( 
    IStorage __RPC_FAR * This,
    /* [string][unique][in] */ const OLECHAR __RPC_FAR *pwcsName,
    /* [unique][in] */ const FILETIME __RPC_FAR *pctime,
    /* [unique][in] */ const FILETIME __RPC_FAR *patime,
    /* [unique][in] */ const FILETIME __RPC_FAR *pmtime);


void __RPC_STUB IStorage_SetElementTimes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStorage_SetClass_Proxy( 
    IStorage __RPC_FAR * This,
    /* [in] */ REFCLSID clsid);


void __RPC_STUB IStorage_SetClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStorage_SetStateBits_Proxy( 
    IStorage __RPC_FAR * This,
    /* [in] */ DWORD grfStateBits,
    /* [in] */ DWORD grfMask);


void __RPC_STUB IStorage_SetStateBits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IStorage_Stat_Proxy( 
    IStorage __RPC_FAR * This,
    /* [out] */ STATSTG __RPC_FAR *pstatstg,
    /* [in] */ DWORD grfStatFlag);


void __RPC_STUB IStorage_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IStorage_INTERFACE_DEFINED__ */


#ifndef __IPersistFile_INTERFACE_DEFINED__
#define __IPersistFile_INTERFACE_DEFINED__

/* interface IPersistFile */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IPersistFile __RPC_FAR *LPPERSISTFILE;


EXTERN_C const IID IID_IPersistFile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0000010b-0000-0000-C000-000000000046")
    IPersistFile : public IPersist
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsDirty( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Load( 
            /* [in] */ LPCOLESTR pszFileName,
            /* [in] */ DWORD dwMode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( 
            /* [unique][in] */ LPCOLESTR pszFileName,
            /* [in] */ BOOL fRemember) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SaveCompleted( 
            /* [unique][in] */ LPCOLESTR pszFileName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurFile( 
            /* [out] */ LPOLESTR __RPC_FAR *ppszFileName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPersistFileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPersistFile __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPersistFile __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPersistFile __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassID )( 
            IPersistFile __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClassID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsDirty )( 
            IPersistFile __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Load )( 
            IPersistFile __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszFileName,
            /* [in] */ DWORD dwMode);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Save )( 
            IPersistFile __RPC_FAR * This,
            /* [unique][in] */ LPCOLESTR pszFileName,
            /* [in] */ BOOL fRemember);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SaveCompleted )( 
            IPersistFile __RPC_FAR * This,
            /* [unique][in] */ LPCOLESTR pszFileName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCurFile )( 
            IPersistFile __RPC_FAR * This,
            /* [out] */ LPOLESTR __RPC_FAR *ppszFileName);
        
        END_INTERFACE
    } IPersistFileVtbl;

    interface IPersistFile
    {
        CONST_VTBL struct IPersistFileVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPersistFile_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPersistFile_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPersistFile_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPersistFile_GetClassID(This,pClassID)	\
    (This)->lpVtbl -> GetClassID(This,pClassID)


#define IPersistFile_IsDirty(This)	\
    (This)->lpVtbl -> IsDirty(This)

#define IPersistFile_Load(This,pszFileName,dwMode)	\
    (This)->lpVtbl -> Load(This,pszFileName,dwMode)

#define IPersistFile_Save(This,pszFileName,fRemember)	\
    (This)->lpVtbl -> Save(This,pszFileName,fRemember)

#define IPersistFile_SaveCompleted(This,pszFileName)	\
    (This)->lpVtbl -> SaveCompleted(This,pszFileName)

#define IPersistFile_GetCurFile(This,ppszFileName)	\
    (This)->lpVtbl -> GetCurFile(This,ppszFileName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPersistFile_IsDirty_Proxy( 
    IPersistFile __RPC_FAR * This);


void __RPC_STUB IPersistFile_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistFile_Load_Proxy( 
    IPersistFile __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszFileName,
    /* [in] */ DWORD dwMode);


void __RPC_STUB IPersistFile_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistFile_Save_Proxy( 
    IPersistFile __RPC_FAR * This,
    /* [unique][in] */ LPCOLESTR pszFileName,
    /* [in] */ BOOL fRemember);


void __RPC_STUB IPersistFile_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistFile_SaveCompleted_Proxy( 
    IPersistFile __RPC_FAR * This,
    /* [unique][in] */ LPCOLESTR pszFileName);


void __RPC_STUB IPersistFile_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistFile_GetCurFile_Proxy( 
    IPersistFile __RPC_FAR * This,
    /* [out] */ LPOLESTR __RPC_FAR *ppszFileName);


void __RPC_STUB IPersistFile_GetCurFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPersistFile_INTERFACE_DEFINED__ */


#ifndef __IPersistStorage_INTERFACE_DEFINED__
#define __IPersistStorage_INTERFACE_DEFINED__

/* interface IPersistStorage */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IPersistStorage __RPC_FAR *LPPERSISTSTORAGE;


EXTERN_C const IID IID_IPersistStorage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0000010a-0000-0000-C000-000000000046")
    IPersistStorage : public IPersist
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsDirty( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InitNew( 
            /* [unique][in] */ IStorage __RPC_FAR *pStg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Load( 
            /* [unique][in] */ IStorage __RPC_FAR *pStg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( 
            /* [unique][in] */ IStorage __RPC_FAR *pStgSave,
            /* [in] */ BOOL fSameAsLoad) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SaveCompleted( 
            /* [unique][in] */ IStorage __RPC_FAR *pStgNew) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HandsOffStorage( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPersistStorageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPersistStorage __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPersistStorage __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPersistStorage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassID )( 
            IPersistStorage __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClassID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsDirty )( 
            IPersistStorage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InitNew )( 
            IPersistStorage __RPC_FAR * This,
            /* [unique][in] */ IStorage __RPC_FAR *pStg);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Load )( 
            IPersistStorage __RPC_FAR * This,
            /* [unique][in] */ IStorage __RPC_FAR *pStg);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Save )( 
            IPersistStorage __RPC_FAR * This,
            /* [unique][in] */ IStorage __RPC_FAR *pStgSave,
            /* [in] */ BOOL fSameAsLoad);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SaveCompleted )( 
            IPersistStorage __RPC_FAR * This,
            /* [unique][in] */ IStorage __RPC_FAR *pStgNew);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *HandsOffStorage )( 
            IPersistStorage __RPC_FAR * This);
        
        END_INTERFACE
    } IPersistStorageVtbl;

    interface IPersistStorage
    {
        CONST_VTBL struct IPersistStorageVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPersistStorage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPersistStorage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPersistStorage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPersistStorage_GetClassID(This,pClassID)	\
    (This)->lpVtbl -> GetClassID(This,pClassID)


#define IPersistStorage_IsDirty(This)	\
    (This)->lpVtbl -> IsDirty(This)

#define IPersistStorage_InitNew(This,pStg)	\
    (This)->lpVtbl -> InitNew(This,pStg)

#define IPersistStorage_Load(This,pStg)	\
    (This)->lpVtbl -> Load(This,pStg)

#define IPersistStorage_Save(This,pStgSave,fSameAsLoad)	\
    (This)->lpVtbl -> Save(This,pStgSave,fSameAsLoad)

#define IPersistStorage_SaveCompleted(This,pStgNew)	\
    (This)->lpVtbl -> SaveCompleted(This,pStgNew)

#define IPersistStorage_HandsOffStorage(This)	\
    (This)->lpVtbl -> HandsOffStorage(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPersistStorage_IsDirty_Proxy( 
    IPersistStorage __RPC_FAR * This);


void __RPC_STUB IPersistStorage_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistStorage_InitNew_Proxy( 
    IPersistStorage __RPC_FAR * This,
    /* [unique][in] */ IStorage __RPC_FAR *pStg);


void __RPC_STUB IPersistStorage_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistStorage_Load_Proxy( 
    IPersistStorage __RPC_FAR * This,
    /* [unique][in] */ IStorage __RPC_FAR *pStg);


void __RPC_STUB IPersistStorage_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistStorage_Save_Proxy( 
    IPersistStorage __RPC_FAR * This,
    /* [unique][in] */ IStorage __RPC_FAR *pStgSave,
    /* [in] */ BOOL fSameAsLoad);


void __RPC_STUB IPersistStorage_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistStorage_SaveCompleted_Proxy( 
    IPersistStorage __RPC_FAR * This,
    /* [unique][in] */ IStorage __RPC_FAR *pStgNew);


void __RPC_STUB IPersistStorage_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistStorage_HandsOffStorage_Proxy( 
    IPersistStorage __RPC_FAR * This);


void __RPC_STUB IPersistStorage_HandsOffStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPersistStorage_INTERFACE_DEFINED__ */


#ifndef __ILockBytes_INTERFACE_DEFINED__
#define __ILockBytes_INTERFACE_DEFINED__

/* interface ILockBytes */
/* [unique][uuid][object] */ 

typedef /* [unique] */ ILockBytes __RPC_FAR *LPLOCKBYTES;


EXTERN_C const IID IID_ILockBytes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0000000a-0000-0000-C000-000000000046")
    ILockBytes : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE ReadAt( 
            /* [in] */ ULARGE_INTEGER ulOffset,
            /* [length_is][size_is][out] */ void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbRead) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE WriteAt( 
            /* [in] */ ULARGE_INTEGER ulOffset,
            /* [size_is][in] */ const void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbWritten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Flush( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSize( 
            /* [in] */ ULARGE_INTEGER cb) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LockRegion( 
            /* [in] */ ULARGE_INTEGER libOffset,
            /* [in] */ ULARGE_INTEGER cb,
            /* [in] */ DWORD dwLockType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnlockRegion( 
            /* [in] */ ULARGE_INTEGER libOffset,
            /* [in] */ ULARGE_INTEGER cb,
            /* [in] */ DWORD dwLockType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Stat( 
            /* [out] */ STATSTG __RPC_FAR *pstatstg,
            /* [in] */ DWORD grfStatFlag) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILockBytesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ILockBytes __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ILockBytes __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ILockBytes __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ReadAt )( 
            ILockBytes __RPC_FAR * This,
            /* [in] */ ULARGE_INTEGER ulOffset,
            /* [length_is][size_is][out] */ void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbRead);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *WriteAt )( 
            ILockBytes __RPC_FAR * This,
            /* [in] */ ULARGE_INTEGER ulOffset,
            /* [size_is][in] */ const void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbWritten);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Flush )( 
            ILockBytes __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetSize )( 
            ILockBytes __RPC_FAR * This,
            /* [in] */ ULARGE_INTEGER cb);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LockRegion )( 
            ILockBytes __RPC_FAR * This,
            /* [in] */ ULARGE_INTEGER libOffset,
            /* [in] */ ULARGE_INTEGER cb,
            /* [in] */ DWORD dwLockType);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UnlockRegion )( 
            ILockBytes __RPC_FAR * This,
            /* [in] */ ULARGE_INTEGER libOffset,
            /* [in] */ ULARGE_INTEGER cb,
            /* [in] */ DWORD dwLockType);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Stat )( 
            ILockBytes __RPC_FAR * This,
            /* [out] */ STATSTG __RPC_FAR *pstatstg,
            /* [in] */ DWORD grfStatFlag);
        
        END_INTERFACE
    } ILockBytesVtbl;

    interface ILockBytes
    {
        CONST_VTBL struct ILockBytesVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILockBytes_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ILockBytes_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ILockBytes_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ILockBytes_ReadAt(This,ulOffset,pv,cb,pcbRead)	\
    (This)->lpVtbl -> ReadAt(This,ulOffset,pv,cb,pcbRead)

#define ILockBytes_WriteAt(This,ulOffset,pv,cb,pcbWritten)	\
    (This)->lpVtbl -> WriteAt(This,ulOffset,pv,cb,pcbWritten)

#define ILockBytes_Flush(This)	\
    (This)->lpVtbl -> Flush(This)

#define ILockBytes_SetSize(This,cb)	\
    (This)->lpVtbl -> SetSize(This,cb)

#define ILockBytes_LockRegion(This,libOffset,cb,dwLockType)	\
    (This)->lpVtbl -> LockRegion(This,libOffset,cb,dwLockType)

#define ILockBytes_UnlockRegion(This,libOffset,cb,dwLockType)	\
    (This)->lpVtbl -> UnlockRegion(This,libOffset,cb,dwLockType)

#define ILockBytes_Stat(This,pstatstg,grfStatFlag)	\
    (This)->lpVtbl -> Stat(This,pstatstg,grfStatFlag)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE ILockBytes_RemoteReadAt_Proxy( 
    ILockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER ulOffset,
    /* [length_is][size_is][out] */ byte __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbRead);


void __RPC_STUB ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE ILockBytes_RemoteWriteAt_Proxy( 
    ILockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER ulOffset,
    /* [size_is][in] */ const byte __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbWritten);


void __RPC_STUB ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ILockBytes_Flush_Proxy( 
    ILockBytes __RPC_FAR * This);


void __RPC_STUB ILockBytes_Flush_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ILockBytes_SetSize_Proxy( 
    ILockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER cb);


void __RPC_STUB ILockBytes_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ILockBytes_LockRegion_Proxy( 
    ILockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER libOffset,
    /* [in] */ ULARGE_INTEGER cb,
    /* [in] */ DWORD dwLockType);


void __RPC_STUB ILockBytes_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ILockBytes_UnlockRegion_Proxy( 
    ILockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER libOffset,
    /* [in] */ ULARGE_INTEGER cb,
    /* [in] */ DWORD dwLockType);


void __RPC_STUB ILockBytes_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ILockBytes_Stat_Proxy( 
    ILockBytes __RPC_FAR * This,
    /* [out] */ STATSTG __RPC_FAR *pstatstg,
    /* [in] */ DWORD grfStatFlag);


void __RPC_STUB ILockBytes_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ILockBytes_INTERFACE_DEFINED__ */


#ifndef __IEnumFORMATETC_INTERFACE_DEFINED__
#define __IEnumFORMATETC_INTERFACE_DEFINED__

/* interface IEnumFORMATETC */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IEnumFORMATETC __RPC_FAR *LPENUMFORMATETC;

typedef struct tagDVTARGETDEVICE
    {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    /* [size_is] */ BYTE tdData[ 1 ];
    }	DVTARGETDEVICE;

typedef CLIPFORMAT __RPC_FAR *LPCLIPFORMAT;

typedef struct tagFORMATETC
    {
    CLIPFORMAT cfFormat;
    /* [unique] */ DVTARGETDEVICE __RPC_FAR *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    }	FORMATETC;

typedef struct tagFORMATETC __RPC_FAR *LPFORMATETC;


EXTERN_C const IID IID_IEnumFORMATETC;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000103-0000-0000-C000-000000000046")
    IEnumFORMATETC : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ FORMATETC __RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumFORMATETC __RPC_FAR *__RPC_FAR *ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumFORMATETCVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IEnumFORMATETC __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IEnumFORMATETC __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IEnumFORMATETC __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Next )( 
            IEnumFORMATETC __RPC_FAR * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ FORMATETC __RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Skip )( 
            IEnumFORMATETC __RPC_FAR * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            IEnumFORMATETC __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IEnumFORMATETC __RPC_FAR * This,
            /* [out] */ IEnumFORMATETC __RPC_FAR *__RPC_FAR *ppenum);
        
        END_INTERFACE
    } IEnumFORMATETCVtbl;

    interface IEnumFORMATETC
    {
        CONST_VTBL struct IEnumFORMATETCVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumFORMATETC_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumFORMATETC_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumFORMATETC_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumFORMATETC_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumFORMATETC_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumFORMATETC_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumFORMATETC_Clone(This,ppenum)	\
    (This)->lpVtbl -> Clone(This,ppenum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumFORMATETC_RemoteNext_Proxy( 
    IEnumFORMATETC __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ FORMATETC __RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


void __RPC_STUB IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumFORMATETC_Skip_Proxy( 
    IEnumFORMATETC __RPC_FAR * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumFORMATETC_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumFORMATETC_Reset_Proxy( 
    IEnumFORMATETC __RPC_FAR * This);


void __RPC_STUB IEnumFORMATETC_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumFORMATETC_Clone_Proxy( 
    IEnumFORMATETC __RPC_FAR * This,
    /* [out] */ IEnumFORMATETC __RPC_FAR *__RPC_FAR *ppenum);


void __RPC_STUB IEnumFORMATETC_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumFORMATETC_INTERFACE_DEFINED__ */


#ifndef __IEnumSTATDATA_INTERFACE_DEFINED__
#define __IEnumSTATDATA_INTERFACE_DEFINED__

/* interface IEnumSTATDATA */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IEnumSTATDATA __RPC_FAR *LPENUMSTATDATA;

typedef 
enum tagADVF
    {	ADVF_NODATA	= 1,
	ADVF_PRIMEFIRST	= 2,
	ADVF_ONLYONCE	= 4,
	ADVF_DATAONSTOP	= 64,
	ADVFCACHE_NOHANDLER	= 8,
	ADVFCACHE_FORCEBUILTIN	= 16,
	ADVFCACHE_ONSAVE	= 32
    }	ADVF;

typedef struct tagSTATDATA
    {
    FORMATETC formatetc;
    DWORD advf;
    /* [unique] */ IAdviseSink __RPC_FAR *pAdvSink;
    DWORD dwConnection;
    }	STATDATA;

typedef STATDATA __RPC_FAR *LPSTATDATA;


EXTERN_C const IID IID_IEnumSTATDATA;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000105-0000-0000-C000-000000000046")
    IEnumSTATDATA : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ STATDATA __RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumSTATDATAVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IEnumSTATDATA __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IEnumSTATDATA __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IEnumSTATDATA __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Next )( 
            IEnumSTATDATA __RPC_FAR * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ STATDATA __RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Skip )( 
            IEnumSTATDATA __RPC_FAR * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            IEnumSTATDATA __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IEnumSTATDATA __RPC_FAR * This,
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenum);
        
        END_INTERFACE
    } IEnumSTATDATAVtbl;

    interface IEnumSTATDATA
    {
        CONST_VTBL struct IEnumSTATDATAVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumSTATDATA_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumSTATDATA_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumSTATDATA_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumSTATDATA_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumSTATDATA_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumSTATDATA_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumSTATDATA_Clone(This,ppenum)	\
    (This)->lpVtbl -> Clone(This,ppenum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumSTATDATA_RemoteNext_Proxy( 
    IEnumSTATDATA __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ STATDATA __RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


void __RPC_STUB IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumSTATDATA_Skip_Proxy( 
    IEnumSTATDATA __RPC_FAR * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumSTATDATA_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumSTATDATA_Reset_Proxy( 
    IEnumSTATDATA __RPC_FAR * This);


void __RPC_STUB IEnumSTATDATA_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumSTATDATA_Clone_Proxy( 
    IEnumSTATDATA __RPC_FAR * This,
    /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenum);


void __RPC_STUB IEnumSTATDATA_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumSTATDATA_INTERFACE_DEFINED__ */


#ifndef __IRootStorage_INTERFACE_DEFINED__
#define __IRootStorage_INTERFACE_DEFINED__

/* interface IRootStorage */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IRootStorage __RPC_FAR *LPROOTSTORAGE;


EXTERN_C const IID IID_IRootStorage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000012-0000-0000-C000-000000000046")
    IRootStorage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SwitchToFile( 
            /* [in] */ LPOLESTR pszFile) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRootStorageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IRootStorage __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IRootStorage __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IRootStorage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SwitchToFile )( 
            IRootStorage __RPC_FAR * This,
            /* [in] */ LPOLESTR pszFile);
        
        END_INTERFACE
    } IRootStorageVtbl;

    interface IRootStorage
    {
        CONST_VTBL struct IRootStorageVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRootStorage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRootStorage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRootStorage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRootStorage_SwitchToFile(This,pszFile)	\
    (This)->lpVtbl -> SwitchToFile(This,pszFile)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IRootStorage_SwitchToFile_Proxy( 
    IRootStorage __RPC_FAR * This,
    /* [in] */ LPOLESTR pszFile);


void __RPC_STUB IRootStorage_SwitchToFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRootStorage_INTERFACE_DEFINED__ */


#ifndef __IAdviseSink_INTERFACE_DEFINED__
#define __IAdviseSink_INTERFACE_DEFINED__

/* interface IAdviseSink */
/* [unique][uuid][object] */ 

typedef IAdviseSink __RPC_FAR *LPADVISESINK;

typedef /* [v1_enum] */ 
enum tagTYMED
    {	TYMED_HGLOBAL	= 1,
	TYMED_FILE	= 2,
	TYMED_ISTREAM	= 4,
	TYMED_ISTORAGE	= 8,
	TYMED_GDI	= 16,
	TYMED_MFPICT	= 32,
	TYMED_ENHMF	= 64,
	TYMED_NULL	= 0
    }	TYMED;

#ifndef RC_INVOKED
#pragma warning(disable:4200)
#endif
typedef struct tagRemSTGMEDIUM
    {
    DWORD tymed;
    DWORD dwHandleType;
    unsigned long pData;
    unsigned long pUnkForRelease;
    unsigned long cbData;
    /* [size_is] */ byte data[ 1 ];
    }	RemSTGMEDIUM;

#ifndef RC_INVOKED
#pragma warning(default:4200)
#endif
#ifdef NONAMELESSUNION
typedef struct tagSTGMEDIUM {
    DWORD tymed;
    union {
        HBITMAP hBitmap;
        HMETAFILEPICT hMetaFilePict;
        HENHMETAFILE hEnhMetaFile;
        HGLOBAL hGlobal;
        LPOLESTR lpszFileName;
        IStream *pstm;
        IStorage *pstg;
        } u;
    IUnknown *pUnkForRelease;
}uSTGMEDIUM;
#else
typedef struct tagSTGMEDIUM
    {
    DWORD tymed;
    /* [switch_is][switch_type] */ union 
        {
        /* [case()] */ HBITMAP hBitmap;
        /* [case()] */ HMETAFILEPICT hMetaFilePict;
        /* [case()] */ HENHMETAFILE hEnhMetaFile;
        /* [case()] */ HGLOBAL hGlobal;
        /* [case()] */ LPOLESTR lpszFileName;
        /* [case()] */ IStream __RPC_FAR *pstm;
        /* [case()] */ IStorage __RPC_FAR *pstg;
        /* [default] */  /* Empty union arm */ 
        }	;
    /* [unique] */ IUnknown __RPC_FAR *pUnkForRelease;
    }	uSTGMEDIUM;

#endif /* !NONAMELESSUNION */
typedef struct _GDI_OBJECT
    {
    DWORD ObjectType;
    /* [switch_is] */ /* [switch_type] */ union __MIDL_IAdviseSink_0002
        {
        /* [case()] */ wireHBITMAP hBitmap;
        /* [case()] */ wireHPALETTE hPalette;
        /* [default] */ wireHGLOBAL hGeneric;
        }	u;
    }	GDI_OBJECT;

typedef struct _userSTGMEDIUM
    {
    struct _STGMEDIUM_UNION
        {
        DWORD tymed;
        /* [switch_is] */ /* [switch_type] */ union __MIDL_IAdviseSink_0003
            {
            /* [case()] */  /* Empty union arm */ 
            /* [case()] */ wireHMETAFILEPICT hMetaFilePict;
            /* [case()] */ wireHENHMETAFILE hHEnhMetaFile;
            /* [case()] */ GDI_OBJECT __RPC_FAR *hGdiHandle;
            /* [case()] */ wireHGLOBAL hGlobal;
            /* [case()] */ LPOLESTR lpszFileName;
            /* [case()] */ BYTE_BLOB __RPC_FAR *pstm;
            /* [case()] */ BYTE_BLOB __RPC_FAR *pstg;
            }	u;
        }	;
    IUnknown __RPC_FAR *pUnkForRelease;
    }	userSTGMEDIUM;

typedef /* [unique] */ userSTGMEDIUM __RPC_FAR *wireSTGMEDIUM;

typedef /* [wire_marshal] */ uSTGMEDIUM STGMEDIUM;

typedef /* [unique] */ userSTGMEDIUM __RPC_FAR *wireASYNC_STGMEDIUM;

typedef /* [wire_marshal] */ STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM __RPC_FAR *LPSTGMEDIUM;

typedef struct _userFLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    userSTGMEDIUM Stgmed;
    }	userFLAG_STGMEDIUM;

typedef /* [unique] */ userFLAG_STGMEDIUM __RPC_FAR *wireFLAG_STGMEDIUM;

typedef /* [wire_marshal] */ struct _FLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    STGMEDIUM Stgmed;
    }	FLAG_STGMEDIUM;


EXTERN_C const IID IID_IAdviseSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0000010f-0000-0000-C000-000000000046")
    IAdviseSink : public IUnknown
    {
    public:
        virtual /* [local] */ void STDMETHODCALLTYPE OnDataChange( 
            /* [unique][in] */ FORMATETC __RPC_FAR *pFormatetc,
            /* [unique][in] */ STGMEDIUM __RPC_FAR *pStgmed) = 0;
        
        virtual /* [local] */ void STDMETHODCALLTYPE OnViewChange( 
            /* [in] */ DWORD dwAspect,
            /* [in] */ LONG lindex) = 0;
        
        virtual /* [local] */ void STDMETHODCALLTYPE OnRename( 
            /* [in] */ IMoniker __RPC_FAR *pmk) = 0;
        
        virtual /* [local] */ void STDMETHODCALLTYPE OnSave( void) = 0;
        
        virtual /* [local] */ void STDMETHODCALLTYPE OnClose( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAdviseSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IAdviseSink __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IAdviseSink __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IAdviseSink __RPC_FAR * This);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnDataChange )( 
            IAdviseSink __RPC_FAR * This,
            /* [unique][in] */ FORMATETC __RPC_FAR *pFormatetc,
            /* [unique][in] */ STGMEDIUM __RPC_FAR *pStgmed);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnViewChange )( 
            IAdviseSink __RPC_FAR * This,
            /* [in] */ DWORD dwAspect,
            /* [in] */ LONG lindex);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnRename )( 
            IAdviseSink __RPC_FAR * This,
            /* [in] */ IMoniker __RPC_FAR *pmk);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnSave )( 
            IAdviseSink __RPC_FAR * This);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnClose )( 
            IAdviseSink __RPC_FAR * This);
        
        END_INTERFACE
    } IAdviseSinkVtbl;

    interface IAdviseSink
    {
        CONST_VTBL struct IAdviseSinkVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAdviseSink_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAdviseSink_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAdviseSink_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAdviseSink_OnDataChange(This,pFormatetc,pStgmed)	\
    (This)->lpVtbl -> OnDataChange(This,pFormatetc,pStgmed)

#define IAdviseSink_OnViewChange(This,dwAspect,lindex)	\
    (This)->lpVtbl -> OnViewChange(This,dwAspect,lindex)

#define IAdviseSink_OnRename(This,pmk)	\
    (This)->lpVtbl -> OnRename(This,pmk)

#define IAdviseSink_OnSave(This)	\
    (This)->lpVtbl -> OnSave(This)

#define IAdviseSink_OnClose(This)	\
    (This)->lpVtbl -> OnClose(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [async][call_as] */ void STDMETHODCALLTYPE IAdviseSink_RemoteOnDataChange_Proxy( 
    IAdviseSink __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pFormatetc,
    /* [unique][in] */ ASYNC_STGMEDIUM __RPC_FAR *pStgmed);


void __RPC_STUB IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [async][call_as] */ void STDMETHODCALLTYPE IAdviseSink_RemoteOnViewChange_Proxy( 
    IAdviseSink __RPC_FAR * This,
    /* [in] */ DWORD dwAspect,
    /* [in] */ LONG lindex);


void __RPC_STUB IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [async][call_as] */ void STDMETHODCALLTYPE IAdviseSink_RemoteOnRename_Proxy( 
    IAdviseSink __RPC_FAR * This,
    /* [in] */ IMoniker __RPC_FAR *pmk);


void __RPC_STUB IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [async][call_as] */ void STDMETHODCALLTYPE IAdviseSink_RemoteOnSave_Proxy( 
    IAdviseSink __RPC_FAR * This);


void __RPC_STUB IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IAdviseSink_RemoteOnClose_Proxy( 
    IAdviseSink __RPC_FAR * This);


void __RPC_STUB IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAdviseSink_INTERFACE_DEFINED__ */


#ifndef __IAdviseSink2_INTERFACE_DEFINED__
#define __IAdviseSink2_INTERFACE_DEFINED__

/* interface IAdviseSink2 */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IAdviseSink2 __RPC_FAR *LPADVISESINK2;


EXTERN_C const IID IID_IAdviseSink2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000125-0000-0000-C000-000000000046")
    IAdviseSink2 : public IAdviseSink
    {
    public:
        virtual /* [local] */ void STDMETHODCALLTYPE OnLinkSrcChange( 
            /* [unique][in] */ IMoniker __RPC_FAR *pmk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAdviseSink2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IAdviseSink2 __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IAdviseSink2 __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IAdviseSink2 __RPC_FAR * This);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnDataChange )( 
            IAdviseSink2 __RPC_FAR * This,
            /* [unique][in] */ FORMATETC __RPC_FAR *pFormatetc,
            /* [unique][in] */ STGMEDIUM __RPC_FAR *pStgmed);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnViewChange )( 
            IAdviseSink2 __RPC_FAR * This,
            /* [in] */ DWORD dwAspect,
            /* [in] */ LONG lindex);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnRename )( 
            IAdviseSink2 __RPC_FAR * This,
            /* [in] */ IMoniker __RPC_FAR *pmk);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnSave )( 
            IAdviseSink2 __RPC_FAR * This);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnClose )( 
            IAdviseSink2 __RPC_FAR * This);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnLinkSrcChange )( 
            IAdviseSink2 __RPC_FAR * This,
            /* [unique][in] */ IMoniker __RPC_FAR *pmk);
        
        END_INTERFACE
    } IAdviseSink2Vtbl;

    interface IAdviseSink2
    {
        CONST_VTBL struct IAdviseSink2Vtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAdviseSink2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAdviseSink2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAdviseSink2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAdviseSink2_OnDataChange(This,pFormatetc,pStgmed)	\
    (This)->lpVtbl -> OnDataChange(This,pFormatetc,pStgmed)

#define IAdviseSink2_OnViewChange(This,dwAspect,lindex)	\
    (This)->lpVtbl -> OnViewChange(This,dwAspect,lindex)

#define IAdviseSink2_OnRename(This,pmk)	\
    (This)->lpVtbl -> OnRename(This,pmk)

#define IAdviseSink2_OnSave(This)	\
    (This)->lpVtbl -> OnSave(This)

#define IAdviseSink2_OnClose(This)	\
    (This)->lpVtbl -> OnClose(This)


#define IAdviseSink2_OnLinkSrcChange(This,pmk)	\
    (This)->lpVtbl -> OnLinkSrcChange(This,pmk)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [async][call_as] */ void STDMETHODCALLTYPE IAdviseSink2_RemoteOnLinkSrcChange_Proxy( 
    IAdviseSink2 __RPC_FAR * This,
    /* [unique][in] */ IMoniker __RPC_FAR *pmk);


void __RPC_STUB IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAdviseSink2_INTERFACE_DEFINED__ */


#ifndef __IDataObject_INTERFACE_DEFINED__
#define __IDataObject_INTERFACE_DEFINED__

/* interface IDataObject */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IDataObject __RPC_FAR *LPDATAOBJECT;

typedef 
enum tagDATADIR
    {	DATADIR_GET	= 1,
	DATADIR_SET	= 2
    }	DATADIR;


EXTERN_C const IID IID_IDataObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0000010e-0000-0000-C000-000000000046")
    IDataObject : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetData( 
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetcIn,
            /* [out] */ STGMEDIUM __RPC_FAR *pmedium) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetDataHere( 
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
            /* [out][in] */ STGMEDIUM __RPC_FAR *pmedium) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE QueryGetData( 
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCanonicalFormatEtc( 
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatectIn,
            /* [out] */ FORMATETC __RPC_FAR *pformatetcOut) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE SetData( 
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
            /* [unique][in] */ STGMEDIUM __RPC_FAR *pmedium,
            /* [in] */ BOOL fRelease) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumFormatEtc( 
            /* [in] */ DWORD dwDirection,
            /* [out] */ IEnumFORMATETC __RPC_FAR *__RPC_FAR *ppenumFormatEtc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DAdvise( 
            /* [in] */ FORMATETC __RPC_FAR *pformatetc,
            /* [in] */ DWORD advf,
            /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvSink,
            /* [out] */ DWORD __RPC_FAR *pdwConnection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DUnadvise( 
            /* [in] */ DWORD dwConnection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumDAdvise( 
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumAdvise) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDataObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDataObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDataObject __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDataObject __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetData )( 
            IDataObject __RPC_FAR * This,
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetcIn,
            /* [out] */ STGMEDIUM __RPC_FAR *pmedium);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDataHere )( 
            IDataObject __RPC_FAR * This,
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
            /* [out][in] */ STGMEDIUM __RPC_FAR *pmedium);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryGetData )( 
            IDataObject __RPC_FAR * This,
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCanonicalFormatEtc )( 
            IDataObject __RPC_FAR * This,
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatectIn,
            /* [out] */ FORMATETC __RPC_FAR *pformatetcOut);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetData )( 
            IDataObject __RPC_FAR * This,
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
            /* [unique][in] */ STGMEDIUM __RPC_FAR *pmedium,
            /* [in] */ BOOL fRelease);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumFormatEtc )( 
            IDataObject __RPC_FAR * This,
            /* [in] */ DWORD dwDirection,
            /* [out] */ IEnumFORMATETC __RPC_FAR *__RPC_FAR *ppenumFormatEtc);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DAdvise )( 
            IDataObject __RPC_FAR * This,
            /* [in] */ FORMATETC __RPC_FAR *pformatetc,
            /* [in] */ DWORD advf,
            /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvSink,
            /* [out] */ DWORD __RPC_FAR *pdwConnection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DUnadvise )( 
            IDataObject __RPC_FAR * This,
            /* [in] */ DWORD dwConnection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumDAdvise )( 
            IDataObject __RPC_FAR * This,
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumAdvise);
        
        END_INTERFACE
    } IDataObjectVtbl;

    interface IDataObject
    {
        CONST_VTBL struct IDataObjectVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDataObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDataObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDataObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDataObject_GetData(This,pformatetcIn,pmedium)	\
    (This)->lpVtbl -> GetData(This,pformatetcIn,pmedium)

#define IDataObject_GetDataHere(This,pformatetc,pmedium)	\
    (This)->lpVtbl -> GetDataHere(This,pformatetc,pmedium)

#define IDataObject_QueryGetData(This,pformatetc)	\
    (This)->lpVtbl -> QueryGetData(This,pformatetc)

#define IDataObject_GetCanonicalFormatEtc(This,pformatectIn,pformatetcOut)	\
    (This)->lpVtbl -> GetCanonicalFormatEtc(This,pformatectIn,pformatetcOut)

#define IDataObject_SetData(This,pformatetc,pmedium,fRelease)	\
    (This)->lpVtbl -> SetData(This,pformatetc,pmedium,fRelease)

#define IDataObject_EnumFormatEtc(This,dwDirection,ppenumFormatEtc)	\
    (This)->lpVtbl -> EnumFormatEtc(This,dwDirection,ppenumFormatEtc)

#define IDataObject_DAdvise(This,pformatetc,advf,pAdvSink,pdwConnection)	\
    (This)->lpVtbl -> DAdvise(This,pformatetc,advf,pAdvSink,pdwConnection)

#define IDataObject_DUnadvise(This,dwConnection)	\
    (This)->lpVtbl -> DUnadvise(This,dwConnection)

#define IDataObject_EnumDAdvise(This,ppenumAdvise)	\
    (This)->lpVtbl -> EnumDAdvise(This,ppenumAdvise)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IDataObject_RemoteGetData_Proxy( 
    IDataObject __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatetcIn,
    /* [out] */ STGMEDIUM __RPC_FAR *pRemoteMedium);


void __RPC_STUB IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IDataObject_RemoteGetDataHere_Proxy( 
    IDataObject __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
    /* [out][in] */ STGMEDIUM __RPC_FAR *pRemoteMedium);


void __RPC_STUB IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDataObject_QueryGetData_Proxy( 
    IDataObject __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc);


void __RPC_STUB IDataObject_QueryGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDataObject_GetCanonicalFormatEtc_Proxy( 
    IDataObject __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatectIn,
    /* [out] */ FORMATETC __RPC_FAR *pformatetcOut);


void __RPC_STUB IDataObject_GetCanonicalFormatEtc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IDataObject_RemoteSetData_Proxy( 
    IDataObject __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
    /* [unique][in] */ FLAG_STGMEDIUM __RPC_FAR *pmedium,
    /* [in] */ BOOL fRelease);


void __RPC_STUB IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDataObject_EnumFormatEtc_Proxy( 
    IDataObject __RPC_FAR * This,
    /* [in] */ DWORD dwDirection,
    /* [out] */ IEnumFORMATETC __RPC_FAR *__RPC_FAR *ppenumFormatEtc);


void __RPC_STUB IDataObject_EnumFormatEtc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDataObject_DAdvise_Proxy( 
    IDataObject __RPC_FAR * This,
    /* [in] */ FORMATETC __RPC_FAR *pformatetc,
    /* [in] */ DWORD advf,
    /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvSink,
    /* [out] */ DWORD __RPC_FAR *pdwConnection);


void __RPC_STUB IDataObject_DAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDataObject_DUnadvise_Proxy( 
    IDataObject __RPC_FAR * This,
    /* [in] */ DWORD dwConnection);


void __RPC_STUB IDataObject_DUnadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDataObject_EnumDAdvise_Proxy( 
    IDataObject __RPC_FAR * This,
    /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumAdvise);


void __RPC_STUB IDataObject_EnumDAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDataObject_INTERFACE_DEFINED__ */


#ifndef __IDataAdviseHolder_INTERFACE_DEFINED__
#define __IDataAdviseHolder_INTERFACE_DEFINED__

/* interface IDataAdviseHolder */
/* [uuid][object][local] */ 

typedef /* [unique] */ IDataAdviseHolder __RPC_FAR *LPDATAADVISEHOLDER;


EXTERN_C const IID IID_IDataAdviseHolder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000110-0000-0000-C000-000000000046")
    IDataAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Advise( 
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObject,
            /* [unique][in] */ FORMATETC __RPC_FAR *pFetc,
            /* [in] */ DWORD advf,
            /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvise,
            /* [out] */ DWORD __RPC_FAR *pdwConnection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unadvise( 
            /* [in] */ DWORD dwConnection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumAdvise( 
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumAdvise) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendOnDataChange( 
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObject,
            /* [in] */ DWORD dwReserved,
            /* [in] */ DWORD advf) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDataAdviseHolderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDataAdviseHolder __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDataAdviseHolder __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDataAdviseHolder __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Advise )( 
            IDataAdviseHolder __RPC_FAR * This,
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObject,
            /* [unique][in] */ FORMATETC __RPC_FAR *pFetc,
            /* [in] */ DWORD advf,
            /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvise,
            /* [out] */ DWORD __RPC_FAR *pdwConnection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Unadvise )( 
            IDataAdviseHolder __RPC_FAR * This,
            /* [in] */ DWORD dwConnection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumAdvise )( 
            IDataAdviseHolder __RPC_FAR * This,
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumAdvise);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SendOnDataChange )( 
            IDataAdviseHolder __RPC_FAR * This,
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObject,
            /* [in] */ DWORD dwReserved,
            /* [in] */ DWORD advf);
        
        END_INTERFACE
    } IDataAdviseHolderVtbl;

    interface IDataAdviseHolder
    {
        CONST_VTBL struct IDataAdviseHolderVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDataAdviseHolder_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDataAdviseHolder_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDataAdviseHolder_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDataAdviseHolder_Advise(This,pDataObject,pFetc,advf,pAdvise,pdwConnection)	\
    (This)->lpVtbl -> Advise(This,pDataObject,pFetc,advf,pAdvise,pdwConnection)

#define IDataAdviseHolder_Unadvise(This,dwConnection)	\
    (This)->lpVtbl -> Unadvise(This,dwConnection)

#define IDataAdviseHolder_EnumAdvise(This,ppenumAdvise)	\
    (This)->lpVtbl -> EnumAdvise(This,ppenumAdvise)

#define IDataAdviseHolder_SendOnDataChange(This,pDataObject,dwReserved,advf)	\
    (This)->lpVtbl -> SendOnDataChange(This,pDataObject,dwReserved,advf)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDataAdviseHolder_Advise_Proxy( 
    IDataAdviseHolder __RPC_FAR * This,
    /* [unique][in] */ IDataObject __RPC_FAR *pDataObject,
    /* [unique][in] */ FORMATETC __RPC_FAR *pFetc,
    /* [in] */ DWORD advf,
    /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvise,
    /* [out] */ DWORD __RPC_FAR *pdwConnection);


void __RPC_STUB IDataAdviseHolder_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDataAdviseHolder_Unadvise_Proxy( 
    IDataAdviseHolder __RPC_FAR * This,
    /* [in] */ DWORD dwConnection);


void __RPC_STUB IDataAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDataAdviseHolder_EnumAdvise_Proxy( 
    IDataAdviseHolder __RPC_FAR * This,
    /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumAdvise);


void __RPC_STUB IDataAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDataAdviseHolder_SendOnDataChange_Proxy( 
    IDataAdviseHolder __RPC_FAR * This,
    /* [unique][in] */ IDataObject __RPC_FAR *pDataObject,
    /* [in] */ DWORD dwReserved,
    /* [in] */ DWORD advf);


void __RPC_STUB IDataAdviseHolder_SendOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDataAdviseHolder_INTERFACE_DEFINED__ */


#ifndef __IMessageFilter_INTERFACE_DEFINED__
#define __IMessageFilter_INTERFACE_DEFINED__

/* interface IMessageFilter */
/* [uuid][object][local] */ 

typedef /* [unique] */ IMessageFilter __RPC_FAR *LPMESSAGEFILTER;

typedef 
enum tagCALLTYPE
    {	CALLTYPE_TOPLEVEL	= 1,
	CALLTYPE_NESTED	= 2,
	CALLTYPE_ASYNC	= 3,
	CALLTYPE_TOPLEVEL_CALLPENDING	= 4,
	CALLTYPE_ASYNC_CALLPENDING	= 5
    }	CALLTYPE;

typedef 
enum tagSERVERCALL
    {	SERVERCALL_ISHANDLED	= 0,
	SERVERCALL_REJECTED	= 1,
	SERVERCALL_RETRYLATER	= 2
    }	SERVERCALL;

typedef 
enum tagPENDINGTYPE
    {	PENDINGTYPE_TOPLEVEL	= 1,
	PENDINGTYPE_NESTED	= 2
    }	PENDINGTYPE;

typedef 
enum tagPENDINGMSG
    {	PENDINGMSG_CANCELCALL	= 0,
	PENDINGMSG_WAITNOPROCESS	= 1,
	PENDINGMSG_WAITDEFPROCESS	= 2
    }	PENDINGMSG;

typedef struct tagINTERFACEINFO
    {
    IUnknown __RPC_FAR *pUnk;
    IID iid;
    WORD wMethod;
    }	INTERFACEINFO;

typedef struct tagINTERFACEINFO __RPC_FAR *LPINTERFACEINFO;


EXTERN_C const IID IID_IMessageFilter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000016-0000-0000-C000-000000000046")
    IMessageFilter : public IUnknown
    {
    public:
        virtual DWORD STDMETHODCALLTYPE HandleInComingCall( 
            /* [in] */ DWORD dwCallType,
            /* [in] */ HTASK htaskCaller,
            /* [in] */ DWORD dwTickCount,
            /* [in] */ LPINTERFACEINFO lpInterfaceInfo) = 0;
        
        virtual DWORD STDMETHODCALLTYPE RetryRejectedCall( 
            /* [in] */ HTASK htaskCallee,
            /* [in] */ DWORD dwTickCount,
            /* [in] */ DWORD dwRejectType) = 0;
        
        virtual DWORD STDMETHODCALLTYPE MessagePending( 
            /* [in] */ HTASK htaskCallee,
            /* [in] */ DWORD dwTickCount,
            /* [in] */ DWORD dwPendingType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMessageFilterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IMessageFilter __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IMessageFilter __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IMessageFilter __RPC_FAR * This);
        
        DWORD ( STDMETHODCALLTYPE __RPC_FAR *HandleInComingCall )( 
            IMessageFilter __RPC_FAR * This,
            /* [in] */ DWORD dwCallType,
            /* [in] */ HTASK htaskCaller,
            /* [in] */ DWORD dwTickCount,
            /* [in] */ LPINTERFACEINFO lpInterfaceInfo);
        
        DWORD ( STDMETHODCALLTYPE __RPC_FAR *RetryRejectedCall )( 
            IMessageFilter __RPC_FAR * This,
            /* [in] */ HTASK htaskCallee,
            /* [in] */ DWORD dwTickCount,
            /* [in] */ DWORD dwRejectType);
        
        DWORD ( STDMETHODCALLTYPE __RPC_FAR *MessagePending )( 
            IMessageFilter __RPC_FAR * This,
            /* [in] */ HTASK htaskCallee,
            /* [in] */ DWORD dwTickCount,
            /* [in] */ DWORD dwPendingType);
        
        END_INTERFACE
    } IMessageFilterVtbl;

    interface IMessageFilter
    {
        CONST_VTBL struct IMessageFilterVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMessageFilter_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IMessageFilter_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IMessageFilter_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IMessageFilter_HandleInComingCall(This,dwCallType,htaskCaller,dwTickCount,lpInterfaceInfo)	\
    (This)->lpVtbl -> HandleInComingCall(This,dwCallType,htaskCaller,dwTickCount,lpInterfaceInfo)

#define IMessageFilter_RetryRejectedCall(This,htaskCallee,dwTickCount,dwRejectType)	\
    (This)->lpVtbl -> RetryRejectedCall(This,htaskCallee,dwTickCount,dwRejectType)

#define IMessageFilter_MessagePending(This,htaskCallee,dwTickCount,dwPendingType)	\
    (This)->lpVtbl -> MessagePending(This,htaskCallee,dwTickCount,dwPendingType)

#endif /* COBJMACROS */


#endif 	/* C style interface */



DWORD STDMETHODCALLTYPE IMessageFilter_HandleInComingCall_Proxy( 
    IMessageFilter __RPC_FAR * This,
    /* [in] */ DWORD dwCallType,
    /* [in] */ HTASK htaskCaller,
    /* [in] */ DWORD dwTickCount,
    /* [in] */ LPINTERFACEINFO lpInterfaceInfo);


void __RPC_STUB IMessageFilter_HandleInComingCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD STDMETHODCALLTYPE IMessageFilter_RetryRejectedCall_Proxy( 
    IMessageFilter __RPC_FAR * This,
    /* [in] */ HTASK htaskCallee,
    /* [in] */ DWORD dwTickCount,
    /* [in] */ DWORD dwRejectType);


void __RPC_STUB IMessageFilter_RetryRejectedCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD STDMETHODCALLTYPE IMessageFilter_MessagePending_Proxy( 
    IMessageFilter __RPC_FAR * This,
    /* [in] */ HTASK htaskCallee,
    /* [in] */ DWORD dwTickCount,
    /* [in] */ DWORD dwPendingType);


void __RPC_STUB IMessageFilter_MessagePending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMessageFilter_INTERFACE_DEFINED__ */


#ifndef __IRpcChannelBuffer_INTERFACE_DEFINED__
#define __IRpcChannelBuffer_INTERFACE_DEFINED__

/* interface IRpcChannelBuffer */
/* [uuid][object][local] */ 

typedef unsigned long RPCOLEDATAREP;

typedef struct tagRPCOLEMESSAGE
    {
    void __RPC_FAR *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void __RPC_FAR *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void __RPC_FAR *reserved2[ 5 ];
    ULONG rpcFlags;
    }	RPCOLEMESSAGE;

typedef RPCOLEMESSAGE __RPC_FAR *PRPCOLEMESSAGE;


EXTERN_C const IID IID_IRpcChannelBuffer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D5F56B60-593B-101A-B569-08002B2DBF7A")
    IRpcChannelBuffer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetBuffer( 
            /* [in] */ RPCOLEMESSAGE __RPC_FAR *pMessage,
            /* [in] */ REFIID riid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendReceive( 
            /* [out][in] */ RPCOLEMESSAGE __RPC_FAR *pMessage,
            /* [out] */ ULONG __RPC_FAR *pStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FreeBuffer( 
            /* [in] */ RPCOLEMESSAGE __RPC_FAR *pMessage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDestCtx( 
            /* [out] */ DWORD __RPC_FAR *pdwDestContext,
            /* [out] */ void __RPC_FAR *__RPC_FAR *ppvDestContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsConnected( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRpcChannelBufferVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IRpcChannelBuffer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IRpcChannelBuffer __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IRpcChannelBuffer __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetBuffer )( 
            IRpcChannelBuffer __RPC_FAR * This,
            /* [in] */ RPCOLEMESSAGE __RPC_FAR *pMessage,
            /* [in] */ REFIID riid);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SendReceive )( 
            IRpcChannelBuffer __RPC_FAR * This,
            /* [out][in] */ RPCOLEMESSAGE __RPC_FAR *pMessage,
            /* [out] */ ULONG __RPC_FAR *pStatus);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FreeBuffer )( 
            IRpcChannelBuffer __RPC_FAR * This,
            /* [in] */ RPCOLEMESSAGE __RPC_FAR *pMessage);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDestCtx )( 
            IRpcChannelBuffer __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwDestContext,
            /* [out] */ void __RPC_FAR *__RPC_FAR *ppvDestContext);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsConnected )( 
            IRpcChannelBuffer __RPC_FAR * This);
        
        END_INTERFACE
    } IRpcChannelBufferVtbl;

    interface IRpcChannelBuffer
    {
        CONST_VTBL struct IRpcChannelBufferVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRpcChannelBuffer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRpcChannelBuffer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRpcChannelBuffer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRpcChannelBuffer_GetBuffer(This,pMessage,riid)	\
    (This)->lpVtbl -> GetBuffer(This,pMessage,riid)

#define IRpcChannelBuffer_SendReceive(This,pMessage,pStatus)	\
    (This)->lpVtbl -> SendReceive(This,pMessage,pStatus)

#define IRpcChannelBuffer_FreeBuffer(This,pMessage)	\
    (This)->lpVtbl -> FreeBuffer(This,pMessage)

#define IRpcChannelBuffer_GetDestCtx(This,pdwDestContext,ppvDestContext)	\
    (This)->lpVtbl -> GetDestCtx(This,pdwDestContext,ppvDestContext)

#define IRpcChannelBuffer_IsConnected(This)	\
    (This)->lpVtbl -> IsConnected(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IRpcChannelBuffer_GetBuffer_Proxy( 
    IRpcChannelBuffer __RPC_FAR * This,
    /* [in] */ RPCOLEMESSAGE __RPC_FAR *pMessage,
    /* [in] */ REFIID riid);


void __RPC_STUB IRpcChannelBuffer_GetBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRpcChannelBuffer_SendReceive_Proxy( 
    IRpcChannelBuffer __RPC_FAR * This,
    /* [out][in] */ RPCOLEMESSAGE __RPC_FAR *pMessage,
    /* [out] */ ULONG __RPC_FAR *pStatus);


void __RPC_STUB IRpcChannelBuffer_SendReceive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRpcChannelBuffer_FreeBuffer_Proxy( 
    IRpcChannelBuffer __RPC_FAR * This,
    /* [in] */ RPCOLEMESSAGE __RPC_FAR *pMessage);


void __RPC_STUB IRpcChannelBuffer_FreeBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRpcChannelBuffer_GetDestCtx_Proxy( 
    IRpcChannelBuffer __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwDestContext,
    /* [out] */ void __RPC_FAR *__RPC_FAR *ppvDestContext);


void __RPC_STUB IRpcChannelBuffer_GetDestCtx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRpcChannelBuffer_IsConnected_Proxy( 
    IRpcChannelBuffer __RPC_FAR * This);


void __RPC_STUB IRpcChannelBuffer_IsConnected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRpcChannelBuffer_INTERFACE_DEFINED__ */


#ifndef __IRpcChannelBuffer2_INTERFACE_DEFINED__
#define __IRpcChannelBuffer2_INTERFACE_DEFINED__

/* interface IRpcChannelBuffer2 */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_IRpcChannelBuffer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("594f31d0-7f19-11d0-b194-00a0c90dc8bf")
    IRpcChannelBuffer2 : public IRpcChannelBuffer
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetProtocolVersion( 
            /* [out][in] */ DWORD __RPC_FAR *pdwVersion) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRpcChannelBuffer2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IRpcChannelBuffer2 __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IRpcChannelBuffer2 __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IRpcChannelBuffer2 __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetBuffer )( 
            IRpcChannelBuffer2 __RPC_FAR * This,
            /* [in] */ RPCOLEMESSAGE __RPC_FAR *pMessage,
            /* [in] */ REFIID riid);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SendReceive )( 
            IRpcChannelBuffer2 __RPC_FAR * This,
            /* [out][in] */ RPCOLEMESSAGE __RPC_FAR *pMessage,
            /* [out] */ ULONG __RPC_FAR *pStatus);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FreeBuffer )( 
            IRpcChannelBuffer2 __RPC_FAR * This,
            /* [in] */ RPCOLEMESSAGE __RPC_FAR *pMessage);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDestCtx )( 
            IRpcChannelBuffer2 __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwDestContext,
            /* [out] */ void __RPC_FAR *__RPC_FAR *ppvDestContext);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsConnected )( 
            IRpcChannelBuffer2 __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetProtocolVersion )( 
            IRpcChannelBuffer2 __RPC_FAR * This,
            /* [out][in] */ DWORD __RPC_FAR *pdwVersion);
        
        END_INTERFACE
    } IRpcChannelBuffer2Vtbl;

    interface IRpcChannelBuffer2
    {
        CONST_VTBL struct IRpcChannelBuffer2Vtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRpcChannelBuffer2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRpcChannelBuffer2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRpcChannelBuffer2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRpcChannelBuffer2_GetBuffer(This,pMessage,riid)	\
    (This)->lpVtbl -> GetBuffer(This,pMessage,riid)

#define IRpcChannelBuffer2_SendReceive(This,pMessage,pStatus)	\
    (This)->lpVtbl -> SendReceive(This,pMessage,pStatus)

#define IRpcChannelBuffer2_FreeBuffer(This,pMessage)	\
    (This)->lpVtbl -> FreeBuffer(This,pMessage)

#define IRpcChannelBuffer2_GetDestCtx(This,pdwDestContext,ppvDestContext)	\
    (This)->lpVtbl -> GetDestCtx(This,pdwDestContext,ppvDestContext)

#define IRpcChannelBuffer2_IsConnected(This)	\
    (This)->lpVtbl -> IsConnected(This)


#define IRpcChannelBuffer2_GetProtocolVersion(This,pdwVersion)	\
    (This)->lpVtbl -> GetProtocolVersion(This,pdwVersion)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IRpcChannelBuffer2_GetProtocolVersion_Proxy( 
    IRpcChannelBuffer2 __RPC_FAR * This,
    /* [out][in] */ DWORD __RPC_FAR *pdwVersion);


void __RPC_STUB IRpcChannelBuffer2_GetProtocolVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRpcChannelBuffer2_INTERFACE_DEFINED__ */


#ifndef __IRpcProxyBuffer_INTERFACE_DEFINED__
#define __IRpcProxyBuffer_INTERFACE_DEFINED__

/* interface IRpcProxyBuffer */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_IRpcProxyBuffer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D5F56A34-593B-101A-B569-08002B2DBF7A")
    IRpcProxyBuffer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Connect( 
            /* [unique][in] */ IRpcChannelBuffer __RPC_FAR *pRpcChannelBuffer) = 0;
        
        virtual void STDMETHODCALLTYPE Disconnect( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRpcProxyBufferVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IRpcProxyBuffer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IRpcProxyBuffer __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IRpcProxyBuffer __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Connect )( 
            IRpcProxyBuffer __RPC_FAR * This,
            /* [unique][in] */ IRpcChannelBuffer __RPC_FAR *pRpcChannelBuffer);
        
        void ( STDMETHODCALLTYPE __RPC_FAR *Disconnect )( 
            IRpcProxyBuffer __RPC_FAR * This);
        
        END_INTERFACE
    } IRpcProxyBufferVtbl;

    interface IRpcProxyBuffer
    {
        CONST_VTBL struct IRpcProxyBufferVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRpcProxyBuffer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRpcProxyBuffer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRpcProxyBuffer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRpcProxyBuffer_Connect(This,pRpcChannelBuffer)	\
    (This)->lpVtbl -> Connect(This,pRpcChannelBuffer)

#define IRpcProxyBuffer_Disconnect(This)	\
    (This)->lpVtbl -> Disconnect(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IRpcProxyBuffer_Connect_Proxy( 
    IRpcProxyBuffer __RPC_FAR * This,
    /* [unique][in] */ IRpcChannelBuffer __RPC_FAR *pRpcChannelBuffer);


void __RPC_STUB IRpcProxyBuffer_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void STDMETHODCALLTYPE IRpcProxyBuffer_Disconnect_Proxy( 
    IRpcProxyBuffer __RPC_FAR * This);


void __RPC_STUB IRpcProxyBuffer_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRpcProxyBuffer_INTERFACE_DEFINED__ */


#ifndef __IRpcStubBuffer_INTERFACE_DEFINED__
#define __IRpcStubBuffer_INTERFACE_DEFINED__

/* interface IRpcStubBuffer */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_IRpcStubBuffer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D5F56AFC-593B-101A-B569-08002B2DBF7A")
    IRpcStubBuffer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Connect( 
            /* [in] */ IUnknown __RPC_FAR *pUnkServer) = 0;
        
        virtual void STDMETHODCALLTYPE Disconnect( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Invoke( 
            /* [in] */ RPCOLEMESSAGE __RPC_FAR *_prpcmsg,
            /* [in] */ IRpcChannelBuffer __RPC_FAR *_pRpcChannelBuffer) = 0;
        
        virtual IRpcStubBuffer __RPC_FAR *STDMETHODCALLTYPE IsIIDSupported( 
            /* [in] */ REFIID riid) = 0;
        
        virtual ULONG STDMETHODCALLTYPE CountRefs( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DebugServerQueryInterface( 
            void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
        virtual void STDMETHODCALLTYPE DebugServerRelease( 
            void __RPC_FAR *pv) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRpcStubBufferVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IRpcStubBuffer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IRpcStubBuffer __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IRpcStubBuffer __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Connect )( 
            IRpcStubBuffer __RPC_FAR * This,
            /* [in] */ IUnknown __RPC_FAR *pUnkServer);
        
        void ( STDMETHODCALLTYPE __RPC_FAR *Disconnect )( 
            IRpcStubBuffer __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IRpcStubBuffer __RPC_FAR * This,
            /* [in] */ RPCOLEMESSAGE __RPC_FAR *_prpcmsg,
            /* [in] */ IRpcChannelBuffer __RPC_FAR *_pRpcChannelBuffer);
        
        IRpcStubBuffer __RPC_FAR *( STDMETHODCALLTYPE __RPC_FAR *IsIIDSupported )( 
            IRpcStubBuffer __RPC_FAR * This,
            /* [in] */ REFIID riid);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *CountRefs )( 
            IRpcStubBuffer __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DebugServerQueryInterface )( 
            IRpcStubBuffer __RPC_FAR * This,
            void __RPC_FAR *__RPC_FAR *ppv);
        
        void ( STDMETHODCALLTYPE __RPC_FAR *DebugServerRelease )( 
            IRpcStubBuffer __RPC_FAR * This,
            void __RPC_FAR *pv);
        
        END_INTERFACE
    } IRpcStubBufferVtbl;

    interface IRpcStubBuffer
    {
        CONST_VTBL struct IRpcStubBufferVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRpcStubBuffer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRpcStubBuffer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRpcStubBuffer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRpcStubBuffer_Connect(This,pUnkServer)	\
    (This)->lpVtbl -> Connect(This,pUnkServer)

#define IRpcStubBuffer_Disconnect(This)	\
    (This)->lpVtbl -> Disconnect(This)

#define IRpcStubBuffer_Invoke(This,_prpcmsg,_pRpcChannelBuffer)	\
    (This)->lpVtbl -> Invoke(This,_prpcmsg,_pRpcChannelBuffer)

#define IRpcStubBuffer_IsIIDSupported(This,riid)	\
    (This)->lpVtbl -> IsIIDSupported(This,riid)

#define IRpcStubBuffer_CountRefs(This)	\
    (This)->lpVtbl -> CountRefs(This)

#define IRpcStubBuffer_DebugServerQueryInterface(This,ppv)	\
    (This)->lpVtbl -> DebugServerQueryInterface(This,ppv)

#define IRpcStubBuffer_DebugServerRelease(This,pv)	\
    (This)->lpVtbl -> DebugServerRelease(This,pv)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IRpcStubBuffer_Connect_Proxy( 
    IRpcStubBuffer __RPC_FAR * This,
    /* [in] */ IUnknown __RPC_FAR *pUnkServer);


void __RPC_STUB IRpcStubBuffer_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void STDMETHODCALLTYPE IRpcStubBuffer_Disconnect_Proxy( 
    IRpcStubBuffer __RPC_FAR * This);


void __RPC_STUB IRpcStubBuffer_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRpcStubBuffer_Invoke_Proxy( 
    IRpcStubBuffer __RPC_FAR * This,
    /* [in] */ RPCOLEMESSAGE __RPC_FAR *_prpcmsg,
    /* [in] */ IRpcChannelBuffer __RPC_FAR *_pRpcChannelBuffer);


void __RPC_STUB IRpcStubBuffer_Invoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


IRpcStubBuffer __RPC_FAR *STDMETHODCALLTYPE IRpcStubBuffer_IsIIDSupported_Proxy( 
    IRpcStubBuffer __RPC_FAR * This,
    /* [in] */ REFIID riid);


void __RPC_STUB IRpcStubBuffer_IsIIDSupported_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG STDMETHODCALLTYPE IRpcStubBuffer_CountRefs_Proxy( 
    IRpcStubBuffer __RPC_FAR * This);


void __RPC_STUB IRpcStubBuffer_CountRefs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRpcStubBuffer_DebugServerQueryInterface_Proxy( 
    IRpcStubBuffer __RPC_FAR * This,
    void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IRpcStubBuffer_DebugServerQueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void STDMETHODCALLTYPE IRpcStubBuffer_DebugServerRelease_Proxy( 
    IRpcStubBuffer __RPC_FAR * This,
    void __RPC_FAR *pv);


void __RPC_STUB IRpcStubBuffer_DebugServerRelease_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRpcStubBuffer_INTERFACE_DEFINED__ */


#ifndef __IPSFactoryBuffer_INTERFACE_DEFINED__
#define __IPSFactoryBuffer_INTERFACE_DEFINED__

/* interface IPSFactoryBuffer */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_IPSFactoryBuffer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D5F569D0-593B-101A-B569-08002B2DBF7A")
    IPSFactoryBuffer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateProxy( 
            /* [in] */ IUnknown __RPC_FAR *pUnkOuter,
            /* [in] */ REFIID riid,
            /* [out] */ IRpcProxyBuffer __RPC_FAR *__RPC_FAR *ppProxy,
            /* [out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateStub( 
            /* [in] */ REFIID riid,
            /* [unique][in] */ IUnknown __RPC_FAR *pUnkServer,
            /* [out] */ IRpcStubBuffer __RPC_FAR *__RPC_FAR *ppStub) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPSFactoryBufferVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPSFactoryBuffer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPSFactoryBuffer __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPSFactoryBuffer __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateProxy )( 
            IPSFactoryBuffer __RPC_FAR * This,
            /* [in] */ IUnknown __RPC_FAR *pUnkOuter,
            /* [in] */ REFIID riid,
            /* [out] */ IRpcProxyBuffer __RPC_FAR *__RPC_FAR *ppProxy,
            /* [out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateStub )( 
            IPSFactoryBuffer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [unique][in] */ IUnknown __RPC_FAR *pUnkServer,
            /* [out] */ IRpcStubBuffer __RPC_FAR *__RPC_FAR *ppStub);
        
        END_INTERFACE
    } IPSFactoryBufferVtbl;

    interface IPSFactoryBuffer
    {
        CONST_VTBL struct IPSFactoryBufferVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPSFactoryBuffer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPSFactoryBuffer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPSFactoryBuffer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPSFactoryBuffer_CreateProxy(This,pUnkOuter,riid,ppProxy,ppv)	\
    (This)->lpVtbl -> CreateProxy(This,pUnkOuter,riid,ppProxy,ppv)

#define IPSFactoryBuffer_CreateStub(This,riid,pUnkServer,ppStub)	\
    (This)->lpVtbl -> CreateStub(This,riid,pUnkServer,ppStub)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPSFactoryBuffer_CreateProxy_Proxy( 
    IPSFactoryBuffer __RPC_FAR * This,
    /* [in] */ IUnknown __RPC_FAR *pUnkOuter,
    /* [in] */ REFIID riid,
    /* [out] */ IRpcProxyBuffer __RPC_FAR *__RPC_FAR *ppProxy,
    /* [out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPSFactoryBuffer_CreateProxy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPSFactoryBuffer_CreateStub_Proxy( 
    IPSFactoryBuffer __RPC_FAR * This,
    /* [in] */ REFIID riid,
    /* [unique][in] */ IUnknown __RPC_FAR *pUnkServer,
    /* [out] */ IRpcStubBuffer __RPC_FAR *__RPC_FAR *ppStub);


void __RPC_STUB IPSFactoryBuffer_CreateStub_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPSFactoryBuffer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_objidl_0043 */
/* [local] */ 

#if  (_WIN32_WINNT >= 0x0400 ) || defined(_WIN32_DCOM) // DCOM
// This interface is only valid on Windows NT 4.0
typedef struct SChannelHookCallInfo
    {
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void __RPC_FAR *pObject;
    }	SChannelHookCallInfo;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0043_v0_0_s_ifspec;

#ifndef __IChannelHook_INTERFACE_DEFINED__
#define __IChannelHook_INTERFACE_DEFINED__

/* interface IChannelHook */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_IChannelHook;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1008c4a0-7613-11cf-9af1-0020af6e72f4")
    IChannelHook : public IUnknown
    {
    public:
        virtual void STDMETHODCALLTYPE ClientGetSize( 
            /* [in] */ REFGUID uExtent,
            /* [in] */ REFIID riid,
            /* [out] */ ULONG __RPC_FAR *pDataSize) = 0;
        
        virtual void STDMETHODCALLTYPE ClientFillBuffer( 
            /* [in] */ REFGUID uExtent,
            /* [in] */ REFIID riid,
            /* [out][in] */ ULONG __RPC_FAR *pDataSize,
            /* [in] */ void __RPC_FAR *pDataBuffer) = 0;
        
        virtual void STDMETHODCALLTYPE ClientNotify( 
            /* [in] */ REFGUID uExtent,
            /* [in] */ REFIID riid,
            /* [in] */ ULONG cbDataSize,
            /* [in] */ void __RPC_FAR *pDataBuffer,
            /* [in] */ DWORD lDataRep,
            /* [in] */ HRESULT hrFault) = 0;
        
        virtual void STDMETHODCALLTYPE ServerNotify( 
            /* [in] */ REFGUID uExtent,
            /* [in] */ REFIID riid,
            /* [in] */ ULONG cbDataSize,
            /* [in] */ void __RPC_FAR *pDataBuffer,
            /* [in] */ DWORD lDataRep) = 0;
        
        virtual void STDMETHODCALLTYPE ServerGetSize( 
            /* [in] */ REFGUID uExtent,
            /* [in] */ REFIID riid,
            /* [in] */ HRESULT hrFault,
            /* [out] */ ULONG __RPC_FAR *pDataSize) = 0;
        
        virtual void STDMETHODCALLTYPE ServerFillBuffer( 
            /* [in] */ REFGUID uExtent,
            /* [in] */ REFIID riid,
            /* [out][in] */ ULONG __RPC_FAR *pDataSize,
            /* [in] */ void __RPC_FAR *pDataBuffer,
            /* [in] */ HRESULT hrFault) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IChannelHookVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IChannelHook __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IChannelHook __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IChannelHook __RPC_FAR * This);
        
        void ( STDMETHODCALLTYPE __RPC_FAR *ClientGetSize )( 
            IChannelHook __RPC_FAR * This,
            /* [in] */ REFGUID uExtent,
            /* [in] */ REFIID riid,
            /* [out] */ ULONG __RPC_FAR *pDataSize);
        
        void ( STDMETHODCALLTYPE __RPC_FAR *ClientFillBuffer )( 
            IChannelHook __RPC_FAR * This,
            /* [in] */ REFGUID uExtent,
            /* [in] */ REFIID riid,
            /* [out][in] */ ULONG __RPC_FAR *pDataSize,
            /* [in] */ void __RPC_FAR *pDataBuffer);
        
        void ( STDMETHODCALLTYPE __RPC_FAR *ClientNotify )( 
            IChannelHook __RPC_FAR * This,
            /* [in] */ REFGUID uExtent,
            /* [in] */ REFIID riid,
            /* [in] */ ULONG cbDataSize,
            /* [in] */ void __RPC_FAR *pDataBuffer,
            /* [in] */ DWORD lDataRep,
            /* [in] */ HRESULT hrFault);
        
        void ( STDMETHODCALLTYPE __RPC_FAR *ServerNotify )( 
            IChannelHook __RPC_FAR * This,
            /* [in] */ REFGUID uExtent,
            /* [in] */ REFIID riid,
            /* [in] */ ULONG cbDataSize,
            /* [in] */ void __RPC_FAR *pDataBuffer,
            /* [in] */ DWORD lDataRep);
        
        void ( STDMETHODCALLTYPE __RPC_FAR *ServerGetSize )( 
            IChannelHook __RPC_FAR * This,
            /* [in] */ REFGUID uExtent,
            /* [in] */ REFIID riid,
            /* [in] */ HRESULT hrFault,
            /* [out] */ ULONG __RPC_FAR *pDataSize);
        
        void ( STDMETHODCALLTYPE __RPC_FAR *ServerFillBuffer )( 
            IChannelHook __RPC_FAR * This,
            /* [in] */ REFGUID uExtent,
            /* [in] */ REFIID riid,
            /* [out][in] */ ULONG __RPC_FAR *pDataSize,
            /* [in] */ void __RPC_FAR *pDataBuffer,
            /* [in] */ HRESULT hrFault);
        
        END_INTERFACE
    } IChannelHookVtbl;

    interface IChannelHook
    {
        CONST_VTBL struct IChannelHookVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IChannelHook_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IChannelHook_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IChannelHook_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IChannelHook_ClientGetSize(This,uExtent,riid,pDataSize)	\
    (This)->lpVtbl -> ClientGetSize(This,uExtent,riid,pDataSize)

#define IChannelHook_ClientFillBuffer(This,uExtent,riid,pDataSize,pDataBuffer)	\
    (This)->lpVtbl -> ClientFillBuffer(This,uExtent,riid,pDataSize,pDataBuffer)

#define IChannelHook_ClientNotify(This,uExtent,riid,cbDataSize,pDataBuffer,lDataRep,hrFault)	\
    (This)->lpVtbl -> ClientNotify(This,uExtent,riid,cbDataSize,pDataBuffer,lDataRep,hrFault)

#define IChannelHook_ServerNotify(This,uExtent,riid,cbDataSize,pDataBuffer,lDataRep)	\
    (This)->lpVtbl -> ServerNotify(This,uExtent,riid,cbDataSize,pDataBuffer,lDataRep)

#define IChannelHook_ServerGetSize(This,uExtent,riid,hrFault,pDataSize)	\
    (This)->lpVtbl -> ServerGetSize(This,uExtent,riid,hrFault,pDataSize)

#define IChannelHook_ServerFillBuffer(This,uExtent,riid,pDataSize,pDataBuffer,hrFault)	\
    (This)->lpVtbl -> ServerFillBuffer(This,uExtent,riid,pDataSize,pDataBuffer,hrFault)

#endif /* COBJMACROS */


#endif 	/* C style interface */



void STDMETHODCALLTYPE IChannelHook_ClientGetSize_Proxy( 
    IChannelHook __RPC_FAR * This,
    /* [in] */ REFGUID uExtent,
    /* [in] */ REFIID riid,
    /* [out] */ ULONG __RPC_FAR *pDataSize);


void __RPC_STUB IChannelHook_ClientGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void STDMETHODCALLTYPE IChannelHook_ClientFillBuffer_Proxy( 
    IChannelHook __RPC_FAR * This,
    /* [in] */ REFGUID uExtent,
    /* [in] */ REFIID riid,
    /* [out][in] */ ULONG __RPC_FAR *pDataSize,
    /* [in] */ void __RPC_FAR *pDataBuffer);


void __RPC_STUB IChannelHook_ClientFillBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void STDMETHODCALLTYPE IChannelHook_ClientNotify_Proxy( 
    IChannelHook __RPC_FAR * This,
    /* [in] */ REFGUID uExtent,
    /* [in] */ REFIID riid,
    /* [in] */ ULONG cbDataSize,
    /* [in] */ void __RPC_FAR *pDataBuffer,
    /* [in] */ DWORD lDataRep,
    /* [in] */ HRESULT hrFault);


void __RPC_STUB IChannelHook_ClientNotify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void STDMETHODCALLTYPE IChannelHook_ServerNotify_Proxy( 
    IChannelHook __RPC_FAR * This,
    /* [in] */ REFGUID uExtent,
    /* [in] */ REFIID riid,
    /* [in] */ ULONG cbDataSize,
    /* [in] */ void __RPC_FAR *pDataBuffer,
    /* [in] */ DWORD lDataRep);


void __RPC_STUB IChannelHook_ServerNotify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void STDMETHODCALLTYPE IChannelHook_ServerGetSize_Proxy( 
    IChannelHook __RPC_FAR * This,
    /* [in] */ REFGUID uExtent,
    /* [in] */ REFIID riid,
    /* [in] */ HRESULT hrFault,
    /* [out] */ ULONG __RPC_FAR *pDataSize);


void __RPC_STUB IChannelHook_ServerGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void STDMETHODCALLTYPE IChannelHook_ServerFillBuffer_Proxy( 
    IChannelHook __RPC_FAR * This,
    /* [in] */ REFGUID uExtent,
    /* [in] */ REFIID riid,
    /* [out][in] */ ULONG __RPC_FAR *pDataSize,
    /* [in] */ void __RPC_FAR *pDataBuffer,
    /* [in] */ HRESULT hrFault);


void __RPC_STUB IChannelHook_ServerFillBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IChannelHook_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_objidl_0044 */
/* [local] */ 

#endif //DCOM

// Well-known Property Set Format IDs
extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;

extern const FMTID FMTID_DiscardableInformation;

extern const FMTID FMTID_ImageSummaryInformation;

extern const FMTID FMTID_AudioSummaryInformation;

extern const FMTID FMTID_VideoSummaryInformation;

extern const FMTID FMTID_MediaFileSummaryInformation;

#if  (_WIN32_WINNT >= 0x0400 ) || defined(_WIN32_DCOM) // DCOM
// This interface is only valid on Windows NT 4.0


extern RPC_IF_HANDLE __MIDL_itf_objidl_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0044_v0_0_s_ifspec;

#ifndef __IClientSecurity_INTERFACE_DEFINED__
#define __IClientSecurity_INTERFACE_DEFINED__

/* interface IClientSecurity */
/* [uuid][object][local] */ 

typedef struct tagSOLE_AUTHENTICATION_SERVICE
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR __RPC_FAR *pPrincipalName;
    HRESULT hr;
    }	SOLE_AUTHENTICATION_SERVICE;

typedef SOLE_AUTHENTICATION_SERVICE __RPC_FAR *PSOLE_AUTHENTICATION_SERVICE;

typedef 
enum tagEOLE_AUTHENTICATION_CAPABILITIES
    {	EOAC_NONE	= 0,
	EOAC_MUTUAL_AUTH	= 0x1,
	EOAC_SECURE_REFS	= 0x2,
	EOAC_ACCESS_CONTROL	= 0x4,
	EOAC_APPID	= 0x8,
	EOAC_DYNAMIC	= 0x10
    }	EOLE_AUTHENTICATION_CAPABILITIES;


EXTERN_C const IID IID_IClientSecurity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0000013D-0000-0000-C000-000000000046")
    IClientSecurity : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QueryBlanket( 
            /* [in] */ IUnknown __RPC_FAR *pProxy,
            /* [out] */ DWORD __RPC_FAR *pAuthnSvc,
            /* [out] */ DWORD __RPC_FAR *pAuthzSvc,
            /* [out] */ OLECHAR __RPC_FAR *__RPC_FAR *pServerPrincName,
            /* [out] */ DWORD __RPC_FAR *pAuthnLevel,
            /* [out] */ DWORD __RPC_FAR *pImpLevel,
            /* [out] */ void __RPC_FAR *__RPC_FAR *pAuthInfo,
            /* [out] */ DWORD __RPC_FAR *pCapabilites) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetBlanket( 
            /* [in] */ IUnknown __RPC_FAR *pProxy,
            /* [in] */ DWORD AuthnSvc,
            /* [in] */ DWORD AuthzSvc,
            /* [in] */ OLECHAR __RPC_FAR *pServerPrincName,
            /* [in] */ DWORD AuthnLevel,
            /* [in] */ DWORD ImpLevel,
            /* [in] */ void __RPC_FAR *pAuthInfo,
            /* [in] */ DWORD Capabilities) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CopyProxy( 
            /* [in] */ IUnknown __RPC_FAR *pProxy,
            /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *ppCopy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IClientSecurityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IClientSecurity __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IClientSecurity __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IClientSecurity __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryBlanket )( 
            IClientSecurity __RPC_FAR * This,
            /* [in] */ IUnknown __RPC_FAR *pProxy,
            /* [out] */ DWORD __RPC_FAR *pAuthnSvc,
            /* [out] */ DWORD __RPC_FAR *pAuthzSvc,
            /* [out] */ OLECHAR __RPC_FAR *__RPC_FAR *pServerPrincName,
            /* [out] */ DWORD __RPC_FAR *pAuthnLevel,
            /* [out] */ DWORD __RPC_FAR *pImpLevel,
            /* [out] */ void __RPC_FAR *__RPC_FAR *pAuthInfo,
            /* [out] */ DWORD __RPC_FAR *pCapabilites);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetBlanket )( 
            IClientSecurity __RPC_FAR * This,
            /* [in] */ IUnknown __RPC_FAR *pProxy,
            /* [in] */ DWORD AuthnSvc,
            /* [in] */ DWORD AuthzSvc,
            /* [in] */ OLECHAR __RPC_FAR *pServerPrincName,
            /* [in] */ DWORD AuthnLevel,
            /* [in] */ DWORD ImpLevel,
            /* [in] */ void __RPC_FAR *pAuthInfo,
            /* [in] */ DWORD Capabilities);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CopyProxy )( 
            IClientSecurity __RPC_FAR * This,
            /* [in] */ IUnknown __RPC_FAR *pProxy,
            /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *ppCopy);
        
        END_INTERFACE
    } IClientSecurityVtbl;

    interface IClientSecurity
    {
        CONST_VTBL struct IClientSecurityVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IClientSecurity_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IClientSecurity_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IClientSecurity_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IClientSecurity_QueryBlanket(This,pProxy,pAuthnSvc,pAuthzSvc,pServerPrincName,pAuthnLevel,pImpLevel,pAuthInfo,pCapabilites)	\
    (This)->lpVtbl -> QueryBlanket(This,pProxy,pAuthnSvc,pAuthzSvc,pServerPrincName,pAuthnLevel,pImpLevel,pAuthInfo,pCapabilites)

#define IClientSecurity_SetBlanket(This,pProxy,AuthnSvc,AuthzSvc,pServerPrincName,AuthnLevel,ImpLevel,pAuthInfo,Capabilities)	\
    (This)->lpVtbl -> SetBlanket(This,pProxy,AuthnSvc,AuthzSvc,pServerPrincName,AuthnLevel,ImpLevel,pAuthInfo,Capabilities)

#define IClientSecurity_CopyProxy(This,pProxy,ppCopy)	\
    (This)->lpVtbl -> CopyProxy(This,pProxy,ppCopy)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IClientSecurity_QueryBlanket_Proxy( 
    IClientSecurity __RPC_FAR * This,
    /* [in] */ IUnknown __RPC_FAR *pProxy,
    /* [out] */ DWORD __RPC_FAR *pAuthnSvc,
    /* [out] */ DWORD __RPC_FAR *pAuthzSvc,
    /* [out] */ OLECHAR __RPC_FAR *__RPC_FAR *pServerPrincName,
    /* [out] */ DWORD __RPC_FAR *pAuthnLevel,
    /* [out] */ DWORD __RPC_FAR *pImpLevel,
    /* [out] */ void __RPC_FAR *__RPC_FAR *pAuthInfo,
    /* [out] */ DWORD __RPC_FAR *pCapabilites);


void __RPC_STUB IClientSecurity_QueryBlanket_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IClientSecurity_SetBlanket_Proxy( 
    IClientSecurity __RPC_FAR * This,
    /* [in] */ IUnknown __RPC_FAR *pProxy,
    /* [in] */ DWORD AuthnSvc,
    /* [in] */ DWORD AuthzSvc,
    /* [in] */ OLECHAR __RPC_FAR *pServerPrincName,
    /* [in] */ DWORD AuthnLevel,
    /* [in] */ DWORD ImpLevel,
    /* [in] */ void __RPC_FAR *pAuthInfo,
    /* [in] */ DWORD Capabilities);


void __RPC_STUB IClientSecurity_SetBlanket_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IClientSecurity_CopyProxy_Proxy( 
    IClientSecurity __RPC_FAR * This,
    /* [in] */ IUnknown __RPC_FAR *pProxy,
    /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *ppCopy);


void __RPC_STUB IClientSecurity_CopyProxy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IClientSecurity_INTERFACE_DEFINED__ */


#ifndef __IServerSecurity_INTERFACE_DEFINED__
#define __IServerSecurity_INTERFACE_DEFINED__

/* interface IServerSecurity */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_IServerSecurity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0000013E-0000-0000-C000-000000000046")
    IServerSecurity : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QueryBlanket( 
            /* [out] */ DWORD __RPC_FAR *pAuthnSvc,
            /* [out] */ DWORD __RPC_FAR *pAuthzSvc,
            /* [out] */ OLECHAR __RPC_FAR *__RPC_FAR *pServerPrincName,
            /* [out] */ DWORD __RPC_FAR *pAuthnLevel,
            /* [out] */ DWORD __RPC_FAR *pImpLevel,
            /* [out] */ void __RPC_FAR *__RPC_FAR *pPrivs,
            /* [out] */ DWORD __RPC_FAR *pCapabilities) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImpersonateClient( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RevertToSelf( void) = 0;
        
        virtual BOOL STDMETHODCALLTYPE IsImpersonating( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IServerSecurityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IServerSecurity __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IServerSecurity __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IServerSecurity __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryBlanket )( 
            IServerSecurity __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pAuthnSvc,
            /* [out] */ DWORD __RPC_FAR *pAuthzSvc,
            /* [out] */ OLECHAR __RPC_FAR *__RPC_FAR *pServerPrincName,
            /* [out] */ DWORD __RPC_FAR *pAuthnLevel,
            /* [out] */ DWORD __RPC_FAR *pImpLevel,
            /* [out] */ void __RPC_FAR *__RPC_FAR *pPrivs,
            /* [out] */ DWORD __RPC_FAR *pCapabilities);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ImpersonateClient )( 
            IServerSecurity __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RevertToSelf )( 
            IServerSecurity __RPC_FAR * This);
        
        BOOL ( STDMETHODCALLTYPE __RPC_FAR *IsImpersonating )( 
            IServerSecurity __RPC_FAR * This);
        
        END_INTERFACE
    } IServerSecurityVtbl;

    interface IServerSecurity
    {
        CONST_VTBL struct IServerSecurityVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IServerSecurity_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IServerSecurity_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IServerSecurity_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IServerSecurity_QueryBlanket(This,pAuthnSvc,pAuthzSvc,pServerPrincName,pAuthnLevel,pImpLevel,pPrivs,pCapabilities)	\
    (This)->lpVtbl -> QueryBlanket(This,pAuthnSvc,pAuthzSvc,pServerPrincName,pAuthnLevel,pImpLevel,pPrivs,pCapabilities)

#define IServerSecurity_ImpersonateClient(This)	\
    (This)->lpVtbl -> ImpersonateClient(This)

#define IServerSecurity_RevertToSelf(This)	\
    (This)->lpVtbl -> RevertToSelf(This)

#define IServerSecurity_IsImpersonating(This)	\
    (This)->lpVtbl -> IsImpersonating(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IServerSecurity_QueryBlanket_Proxy( 
    IServerSecurity __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pAuthnSvc,
    /* [out] */ DWORD __RPC_FAR *pAuthzSvc,
    /* [out] */ OLECHAR __RPC_FAR *__RPC_FAR *pServerPrincName,
    /* [out] */ DWORD __RPC_FAR *pAuthnLevel,
    /* [out] */ DWORD __RPC_FAR *pImpLevel,
    /* [out] */ void __RPC_FAR *__RPC_FAR *pPrivs,
    /* [out] */ DWORD __RPC_FAR *pCapabilities);


void __RPC_STUB IServerSecurity_QueryBlanket_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IServerSecurity_ImpersonateClient_Proxy( 
    IServerSecurity __RPC_FAR * This);


void __RPC_STUB IServerSecurity_ImpersonateClient_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IServerSecurity_RevertToSelf_Proxy( 
    IServerSecurity __RPC_FAR * This);


void __RPC_STUB IServerSecurity_RevertToSelf_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


BOOL STDMETHODCALLTYPE IServerSecurity_IsImpersonating_Proxy( 
    IServerSecurity __RPC_FAR * This);


void __RPC_STUB IServerSecurity_IsImpersonating_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IServerSecurity_INTERFACE_DEFINED__ */


#ifndef __IClassActivator_INTERFACE_DEFINED__
#define __IClassActivator_INTERFACE_DEFINED__

/* interface IClassActivator */
/* [uuid][object] */ 


EXTERN_C const IID IID_IClassActivator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000140-0000-0000-C000-000000000046")
    IClassActivator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetClassObject( 
            /* [in] */ REFCLSID rclsid,
            /* [in] */ DWORD dwClassContext,
            /* [in] */ LCID locale,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IClassActivatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IClassActivator __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IClassActivator __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IClassActivator __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassObject )( 
            IClassActivator __RPC_FAR * This,
            /* [in] */ REFCLSID rclsid,
            /* [in] */ DWORD dwClassContext,
            /* [in] */ LCID locale,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        END_INTERFACE
    } IClassActivatorVtbl;

    interface IClassActivator
    {
        CONST_VTBL struct IClassActivatorVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IClassActivator_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IClassActivator_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IClassActivator_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IClassActivator_GetClassObject(This,rclsid,dwClassContext,locale,riid,ppv)	\
    (This)->lpVtbl -> GetClassObject(This,rclsid,dwClassContext,locale,riid,ppv)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IClassActivator_GetClassObject_Proxy( 
    IClassActivator __RPC_FAR * This,
    /* [in] */ REFCLSID rclsid,
    /* [in] */ DWORD dwClassContext,
    /* [in] */ LCID locale,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IClassActivator_GetClassObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IClassActivator_INTERFACE_DEFINED__ */


#ifndef __IRpcOptions_INTERFACE_DEFINED__
#define __IRpcOptions_INTERFACE_DEFINED__

/* interface IRpcOptions */
/* [uuid][local][object] */ 


EXTERN_C const IID IID_IRpcOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000144-0000-0000-C000-000000000046")
    IRpcOptions : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Set( 
            /* [in] */ IUnknown __RPC_FAR *pPrx,
            /* [in] */ DWORD dwProperty,
            /* [in] */ ULONG dwValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Query( 
            /* [in] */ IUnknown __RPC_FAR *pPrx,
            /* [in] */ DWORD dwProperty,
            /* [out] */ ULONG __RPC_FAR *pdwValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRpcOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IRpcOptions __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IRpcOptions __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IRpcOptions __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Set )( 
            IRpcOptions __RPC_FAR * This,
            /* [in] */ IUnknown __RPC_FAR *pPrx,
            /* [in] */ DWORD dwProperty,
            /* [in] */ ULONG dwValue);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Query )( 
            IRpcOptions __RPC_FAR * This,
            /* [in] */ IUnknown __RPC_FAR *pPrx,
            /* [in] */ DWORD dwProperty,
            /* [out] */ ULONG __RPC_FAR *pdwValue);
        
        END_INTERFACE
    } IRpcOptionsVtbl;

    interface IRpcOptions
    {
        CONST_VTBL struct IRpcOptionsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRpcOptions_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRpcOptions_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRpcOptions_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRpcOptions_Set(This,pPrx,dwProperty,dwValue)	\
    (This)->lpVtbl -> Set(This,pPrx,dwProperty,dwValue)

#define IRpcOptions_Query(This,pPrx,dwProperty,pdwValue)	\
    (This)->lpVtbl -> Query(This,pPrx,dwProperty,pdwValue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IRpcOptions_Set_Proxy( 
    IRpcOptions __RPC_FAR * This,
    /* [in] */ IUnknown __RPC_FAR *pPrx,
    /* [in] */ DWORD dwProperty,
    /* [in] */ ULONG dwValue);


void __RPC_STUB IRpcOptions_Set_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRpcOptions_Query_Proxy( 
    IRpcOptions __RPC_FAR * This,
    /* [in] */ IUnknown __RPC_FAR *pPrx,
    /* [in] */ DWORD dwProperty,
    /* [out] */ ULONG __RPC_FAR *pdwValue);


void __RPC_STUB IRpcOptions_Query_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRpcOptions_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_objidl_0048 */
/* [local] */ 


enum __MIDL___MIDL_itf_objidl_0048_0001
    {	COMBND_RPCTIMEOUT	= 0x1
    };
#endif //DCOM


extern RPC_IF_HANDLE __MIDL_itf_objidl_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0048_v0_0_s_ifspec;

#ifndef __IFillLockBytes_INTERFACE_DEFINED__
#define __IFillLockBytes_INTERFACE_DEFINED__

/* interface IFillLockBytes */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IFillLockBytes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("99caf010-415e-11cf-8814-00aa00b569f5")
    IFillLockBytes : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE FillAppend( 
            /* [size_is][in] */ const void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbWritten) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE FillAt( 
            /* [in] */ ULARGE_INTEGER ulOffset,
            /* [size_is][in] */ const void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbWritten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetFillSize( 
            /* [in] */ ULARGE_INTEGER ulSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Terminate( 
            /* [in] */ BOOL bCanceled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFillLockBytesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IFillLockBytes __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IFillLockBytes __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IFillLockBytes __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FillAppend )( 
            IFillLockBytes __RPC_FAR * This,
            /* [size_is][in] */ const void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbWritten);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FillAt )( 
            IFillLockBytes __RPC_FAR * This,
            /* [in] */ ULARGE_INTEGER ulOffset,
            /* [size_is][in] */ const void __RPC_FAR *pv,
            /* [in] */ ULONG cb,
            /* [out] */ ULONG __RPC_FAR *pcbWritten);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetFillSize )( 
            IFillLockBytes __RPC_FAR * This,
            /* [in] */ ULARGE_INTEGER ulSize);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Terminate )( 
            IFillLockBytes __RPC_FAR * This,
            /* [in] */ BOOL bCanceled);
        
        END_INTERFACE
    } IFillLockBytesVtbl;

    interface IFillLockBytes
    {
        CONST_VTBL struct IFillLockBytesVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFillLockBytes_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IFillLockBytes_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IFillLockBytes_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IFillLockBytes_FillAppend(This,pv,cb,pcbWritten)	\
    (This)->lpVtbl -> FillAppend(This,pv,cb,pcbWritten)

#define IFillLockBytes_FillAt(This,ulOffset,pv,cb,pcbWritten)	\
    (This)->lpVtbl -> FillAt(This,ulOffset,pv,cb,pcbWritten)

#define IFillLockBytes_SetFillSize(This,ulSize)	\
    (This)->lpVtbl -> SetFillSize(This,ulSize)

#define IFillLockBytes_Terminate(This,bCanceled)	\
    (This)->lpVtbl -> Terminate(This,bCanceled)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IFillLockBytes_RemoteFillAppend_Proxy( 
    IFillLockBytes __RPC_FAR * This,
    /* [size_is][in] */ const byte __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbWritten);


void __RPC_STUB IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IFillLockBytes_RemoteFillAt_Proxy( 
    IFillLockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER ulOffset,
    /* [size_is][in] */ const byte __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbWritten);


void __RPC_STUB IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFillLockBytes_SetFillSize_Proxy( 
    IFillLockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER ulSize);


void __RPC_STUB IFillLockBytes_SetFillSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFillLockBytes_Terminate_Proxy( 
    IFillLockBytes __RPC_FAR * This,
    /* [in] */ BOOL bCanceled);


void __RPC_STUB IFillLockBytes_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IFillLockBytes_INTERFACE_DEFINED__ */


#ifndef __IProgressNotify_INTERFACE_DEFINED__
#define __IProgressNotify_INTERFACE_DEFINED__

/* interface IProgressNotify */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IProgressNotify;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a9d758a0-4617-11cf-95fc-00aa00680db4")
    IProgressNotify : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnProgress( 
            /* [in] */ DWORD dwProgressCurrent,
            /* [in] */ DWORD dwProgressMaximum,
            /* [in] */ BOOL fAccurate,
            /* [in] */ BOOL fOwner) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProgressNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IProgressNotify __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IProgressNotify __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IProgressNotify __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnProgress )( 
            IProgressNotify __RPC_FAR * This,
            /* [in] */ DWORD dwProgressCurrent,
            /* [in] */ DWORD dwProgressMaximum,
            /* [in] */ BOOL fAccurate,
            /* [in] */ BOOL fOwner);
        
        END_INTERFACE
    } IProgressNotifyVtbl;

    interface IProgressNotify
    {
        CONST_VTBL struct IProgressNotifyVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProgressNotify_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IProgressNotify_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IProgressNotify_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IProgressNotify_OnProgress(This,dwProgressCurrent,dwProgressMaximum,fAccurate,fOwner)	\
    (This)->lpVtbl -> OnProgress(This,dwProgressCurrent,dwProgressMaximum,fAccurate,fOwner)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IProgressNotify_OnProgress_Proxy( 
    IProgressNotify __RPC_FAR * This,
    /* [in] */ DWORD dwProgressCurrent,
    /* [in] */ DWORD dwProgressMaximum,
    /* [in] */ BOOL fAccurate,
    /* [in] */ BOOL fOwner);


void __RPC_STUB IProgressNotify_OnProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IProgressNotify_INTERFACE_DEFINED__ */


#ifndef __ILayoutStorage_INTERFACE_DEFINED__
#define __ILayoutStorage_INTERFACE_DEFINED__

/* interface ILayoutStorage */
/* [unique][uuid][object][local] */ 

typedef struct tagStorageLayout
    {
    DWORD LayoutType;
    OLECHAR __RPC_FAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
    }	StorageLayout;


EXTERN_C const IID IID_ILayoutStorage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0e6d4d90-6738-11cf-9608-00aa00680db4")
    ILayoutStorage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE LayoutScript( 
            /* [in] */ StorageLayout __RPC_FAR *pStorageLayout,
            /* [in] */ DWORD nEntries,
            /* [in] */ DWORD glfInterleavedFlag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BeginMonitor( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndMonitor( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReLayoutDocfile( 
            /* [in] */ OLECHAR __RPC_FAR *pwcsNewDfName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReLayoutDocfileOnILockBytes( 
            /* [in] */ ILockBytes __RPC_FAR *pILockBytes) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILayoutStorageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ILayoutStorage __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ILayoutStorage __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ILayoutStorage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LayoutScript )( 
            ILayoutStorage __RPC_FAR * This,
            /* [in] */ StorageLayout __RPC_FAR *pStorageLayout,
            /* [in] */ DWORD nEntries,
            /* [in] */ DWORD glfInterleavedFlag);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *BeginMonitor )( 
            ILayoutStorage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EndMonitor )( 
            ILayoutStorage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ReLayoutDocfile )( 
            ILayoutStorage __RPC_FAR * This,
            /* [in] */ OLECHAR __RPC_FAR *pwcsNewDfName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ReLayoutDocfileOnILockBytes )( 
            ILayoutStorage __RPC_FAR * This,
            /* [in] */ ILockBytes __RPC_FAR *pILockBytes);
        
        END_INTERFACE
    } ILayoutStorageVtbl;

    interface ILayoutStorage
    {
        CONST_VTBL struct ILayoutStorageVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILayoutStorage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ILayoutStorage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ILayoutStorage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ILayoutStorage_LayoutScript(This,pStorageLayout,nEntries,glfInterleavedFlag)	\
    (This)->lpVtbl -> LayoutScript(This,pStorageLayout,nEntries,glfInterleavedFlag)

#define ILayoutStorage_BeginMonitor(This)	\
    (This)->lpVtbl -> BeginMonitor(This)

#define ILayoutStorage_EndMonitor(This)	\
    (This)->lpVtbl -> EndMonitor(This)

#define ILayoutStorage_ReLayoutDocfile(This,pwcsNewDfName)	\
    (This)->lpVtbl -> ReLayoutDocfile(This,pwcsNewDfName)

#define ILayoutStorage_ReLayoutDocfileOnILockBytes(This,pILockBytes)	\
    (This)->lpVtbl -> ReLayoutDocfileOnILockBytes(This,pILockBytes)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ILayoutStorage_LayoutScript_Proxy( 
    ILayoutStorage __RPC_FAR * This,
    /* [in] */ StorageLayout __RPC_FAR *pStorageLayout,
    /* [in] */ DWORD nEntries,
    /* [in] */ DWORD glfInterleavedFlag);


void __RPC_STUB ILayoutStorage_LayoutScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ILayoutStorage_BeginMonitor_Proxy( 
    ILayoutStorage __RPC_FAR * This);


void __RPC_STUB ILayoutStorage_BeginMonitor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ILayoutStorage_EndMonitor_Proxy( 
    ILayoutStorage __RPC_FAR * This);


void __RPC_STUB ILayoutStorage_EndMonitor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ILayoutStorage_ReLayoutDocfile_Proxy( 
    ILayoutStorage __RPC_FAR * This,
    /* [in] */ OLECHAR __RPC_FAR *pwcsNewDfName);


void __RPC_STUB ILayoutStorage_ReLayoutDocfile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy( 
    ILayoutStorage __RPC_FAR * This,
    /* [in] */ ILockBytes __RPC_FAR *pILockBytes);


void __RPC_STUB ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ILayoutStorage_INTERFACE_DEFINED__ */


#ifndef __ISurrogate_INTERFACE_DEFINED__
#define __ISurrogate_INTERFACE_DEFINED__

/* interface ISurrogate */
/* [object][unique][version][uuid] */ 

typedef /* [unique] */ ISurrogate __RPC_FAR *LPSURROGATE;


EXTERN_C const IID IID_ISurrogate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000022-0000-0000-C000-000000000046")
    ISurrogate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE LoadDllServer( 
            /* [in] */ REFCLSID Clsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FreeSurrogate( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISurrogateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISurrogate __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISurrogate __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISurrogate __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LoadDllServer )( 
            ISurrogate __RPC_FAR * This,
            /* [in] */ REFCLSID Clsid);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FreeSurrogate )( 
            ISurrogate __RPC_FAR * This);
        
        END_INTERFACE
    } ISurrogateVtbl;

    interface ISurrogate
    {
        CONST_VTBL struct ISurrogateVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISurrogate_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISurrogate_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISurrogate_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISurrogate_LoadDllServer(This,Clsid)	\
    (This)->lpVtbl -> LoadDllServer(This,Clsid)

#define ISurrogate_FreeSurrogate(This)	\
    (This)->lpVtbl -> FreeSurrogate(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ISurrogate_LoadDllServer_Proxy( 
    ISurrogate __RPC_FAR * This,
    /* [in] */ REFCLSID Clsid);


void __RPC_STUB ISurrogate_LoadDllServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ISurrogate_FreeSurrogate_Proxy( 
    ISurrogate __RPC_FAR * This);


void __RPC_STUB ISurrogate_FreeSurrogate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISurrogate_INTERFACE_DEFINED__ */


#ifndef __IGlobalInterfaceTable_INTERFACE_DEFINED__
#define __IGlobalInterfaceTable_INTERFACE_DEFINED__

/* interface IGlobalInterfaceTable */
/* [uuid][object][local] */ 

typedef /* [unique] */ IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;


EXTERN_C const IID IID_IGlobalInterfaceTable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000146-0000-0000-C000-000000000046")
    IGlobalInterfaceTable : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RegisterInterfaceInGlobal( 
            /* [in] */ IUnknown __RPC_FAR *pUnk,
            /* [in] */ REFIID riid,
            /* [out] */ DWORD __RPC_FAR *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RevokeInterfaceFromGlobal( 
            /* [in] */ DWORD dwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInterfaceFromGlobal( 
            /* [in] */ DWORD dwCookie,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IGlobalInterfaceTableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IGlobalInterfaceTable __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IGlobalInterfaceTable __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IGlobalInterfaceTable __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RegisterInterfaceInGlobal )( 
            IGlobalInterfaceTable __RPC_FAR * This,
            /* [in] */ IUnknown __RPC_FAR *pUnk,
            /* [in] */ REFIID riid,
            /* [out] */ DWORD __RPC_FAR *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RevokeInterfaceFromGlobal )( 
            IGlobalInterfaceTable __RPC_FAR * This,
            /* [in] */ DWORD dwCookie);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetInterfaceFromGlobal )( 
            IGlobalInterfaceTable __RPC_FAR * This,
            /* [in] */ DWORD dwCookie,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        END_INTERFACE
    } IGlobalInterfaceTableVtbl;

    interface IGlobalInterfaceTable
    {
        CONST_VTBL struct IGlobalInterfaceTableVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGlobalInterfaceTable_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IGlobalInterfaceTable_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IGlobalInterfaceTable_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IGlobalInterfaceTable_RegisterInterfaceInGlobal(This,pUnk,riid,pdwCookie)	\
    (This)->lpVtbl -> RegisterInterfaceInGlobal(This,pUnk,riid,pdwCookie)

#define IGlobalInterfaceTable_RevokeInterfaceFromGlobal(This,dwCookie)	\
    (This)->lpVtbl -> RevokeInterfaceFromGlobal(This,dwCookie)

#define IGlobalInterfaceTable_GetInterfaceFromGlobal(This,dwCookie,riid,ppv)	\
    (This)->lpVtbl -> GetInterfaceFromGlobal(This,dwCookie,riid,ppv)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy( 
    IGlobalInterfaceTable __RPC_FAR * This,
    /* [in] */ IUnknown __RPC_FAR *pUnk,
    /* [in] */ REFIID riid,
    /* [out] */ DWORD __RPC_FAR *pdwCookie);


void __RPC_STUB IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy( 
    IGlobalInterfaceTable __RPC_FAR * This,
    /* [in] */ DWORD dwCookie);


void __RPC_STUB IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy( 
    IGlobalInterfaceTable __RPC_FAR * This,
    /* [in] */ DWORD dwCookie,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IGlobalInterfaceTable_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_objidl_0053 */
/* [local] */ 


enum __MIDL___MIDL_itf_objidl_0053_0001
    {	COMBND_RPCSTRINGS	= 0x1
    };


extern RPC_IF_HANDLE __MIDL_itf_objidl_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0053_v0_0_s_ifspec;

#ifndef __IComBinding_INTERFACE_DEFINED__
#define __IComBinding_INTERFACE_DEFINED__

/* interface IComBinding */
/* [uuid][local][object] */ 


EXTERN_C const IID IID_IComBinding;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000148-0000-0000-C000-000000000046")
    IComBinding : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InitBinding( 
            /* [in] */ DWORD dwEndpointFlags,
            /* [in] */ DWORD dwNICFlags,
            /* [in] */ DWORD mbzReserved1,
            /* [in] */ DWORD mbzReserved2,
            /* [in] */ LPOLESTR pszBinding) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE QueryBinding( 
            /* [out] */ LPDWORD pdwEndpointFlags,
            /* [out] */ LPDWORD pdwNICFlags,
            /* [out] */ LPDWORD mbzReserved1,
            /* [out] */ LPDWORD mbzReserved2,
            /* [out] */ LPOLESTR __RPC_FAR *ppszBinding) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IComBindingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IComBinding __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IComBinding __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IComBinding __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InitBinding )( 
            IComBinding __RPC_FAR * This,
            /* [in] */ DWORD dwEndpointFlags,
            /* [in] */ DWORD dwNICFlags,
            /* [in] */ DWORD mbzReserved1,
            /* [in] */ DWORD mbzReserved2,
            /* [in] */ LPOLESTR pszBinding);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryBinding )( 
            IComBinding __RPC_FAR * This,
            /* [out] */ LPDWORD pdwEndpointFlags,
            /* [out] */ LPDWORD pdwNICFlags,
            /* [out] */ LPDWORD mbzReserved1,
            /* [out] */ LPDWORD mbzReserved2,
            /* [out] */ LPOLESTR __RPC_FAR *ppszBinding);
        
        END_INTERFACE
    } IComBindingVtbl;

    interface IComBinding
    {
        CONST_VTBL struct IComBindingVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IComBinding_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IComBinding_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IComBinding_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IComBinding_InitBinding(This,dwEndpointFlags,dwNICFlags,mbzReserved1,mbzReserved2,pszBinding)	\
    (This)->lpVtbl -> InitBinding(This,dwEndpointFlags,dwNICFlags,mbzReserved1,mbzReserved2,pszBinding)

#define IComBinding_QueryBinding(This,pdwEndpointFlags,pdwNICFlags,mbzReserved1,mbzReserved2,ppszBinding)	\
    (This)->lpVtbl -> QueryBinding(This,pdwEndpointFlags,pdwNICFlags,mbzReserved1,mbzReserved2,ppszBinding)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IComBinding_InitBinding_Proxy( 
    IComBinding __RPC_FAR * This,
    /* [in] */ DWORD dwEndpointFlags,
    /* [in] */ DWORD dwNICFlags,
    /* [in] */ DWORD mbzReserved1,
    /* [in] */ DWORD mbzReserved2,
    /* [in] */ LPOLESTR pszBinding);


void __RPC_STUB IComBinding_InitBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IComBinding_QueryBinding_Proxy( 
    IComBinding __RPC_FAR * This,
    /* [out] */ LPDWORD pdwEndpointFlags,
    /* [out] */ LPDWORD pdwNICFlags,
    /* [out] */ LPDWORD mbzReserved1,
    /* [out] */ LPDWORD mbzReserved2,
    /* [out] */ LPOLESTR __RPC_FAR *ppszBinding);


void __RPC_STUB IComBinding_QueryBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IComBinding_INTERFACE_DEFINED__ */


#ifndef __ISynchronize_INTERFACE_DEFINED__
#define __ISynchronize_INTERFACE_DEFINED__

/* interface ISynchronize */
/* [uuid][object] */ 


EXTERN_C const IID IID_ISynchronize;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000030-0000-0000-C000-000000000046")
    ISynchronize : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Wait( 
            /* [in] */ DWORD dwFlags,
            /* [in] */ DWORD dwMilliseconds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Signal( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISynchronizeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISynchronize __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISynchronize __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISynchronize __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Wait )( 
            ISynchronize __RPC_FAR * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ DWORD dwMilliseconds);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Signal )( 
            ISynchronize __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            ISynchronize __RPC_FAR * This);
        
        END_INTERFACE
    } ISynchronizeVtbl;

    interface ISynchronize
    {
        CONST_VTBL struct ISynchronizeVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISynchronize_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISynchronize_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISynchronize_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISynchronize_Wait(This,dwFlags,dwMilliseconds)	\
    (This)->lpVtbl -> Wait(This,dwFlags,dwMilliseconds)

#define ISynchronize_Signal(This)	\
    (This)->lpVtbl -> Signal(This)

#define ISynchronize_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ISynchronize_Wait_Proxy( 
    ISynchronize __RPC_FAR * This,
    /* [in] */ DWORD dwFlags,
    /* [in] */ DWORD dwMilliseconds);


void __RPC_STUB ISynchronize_Wait_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ISynchronize_Signal_Proxy( 
    ISynchronize __RPC_FAR * This);


void __RPC_STUB ISynchronize_Signal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ISynchronize_Reset_Proxy( 
    ISynchronize __RPC_FAR * This);


void __RPC_STUB ISynchronize_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISynchronize_INTERFACE_DEFINED__ */


#ifndef __ISynchronizeHandle_INTERFACE_DEFINED__
#define __ISynchronizeHandle_INTERFACE_DEFINED__

/* interface ISynchronizeHandle */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_ISynchronizeHandle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000031-0000-0000-C000-000000000046")
    ISynchronizeHandle : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetHandle( 
            /* [out] */ HANDLE __RPC_FAR *ph) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISynchronizeHandleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISynchronizeHandle __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISynchronizeHandle __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISynchronizeHandle __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetHandle )( 
            ISynchronizeHandle __RPC_FAR * This,
            /* [out] */ HANDLE __RPC_FAR *ph);
        
        END_INTERFACE
    } ISynchronizeHandleVtbl;

    interface ISynchronizeHandle
    {
        CONST_VTBL struct ISynchronizeHandleVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISynchronizeHandle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISynchronizeHandle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISynchronizeHandle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISynchronizeHandle_GetHandle(This,ph)	\
    (This)->lpVtbl -> GetHandle(This,ph)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ISynchronizeHandle_GetHandle_Proxy( 
    ISynchronizeHandle __RPC_FAR * This,
    /* [out] */ HANDLE __RPC_FAR *ph);


void __RPC_STUB ISynchronizeHandle_GetHandle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISynchronizeHandle_INTERFACE_DEFINED__ */


#ifndef __ISynchronizeEvent_INTERFACE_DEFINED__
#define __ISynchronizeEvent_INTERFACE_DEFINED__

/* interface ISynchronizeEvent */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_ISynchronizeEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000032-0000-0000-C000-000000000046")
    ISynchronizeEvent : public ISynchronizeHandle
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetEventHandle( 
            /* [in] */ HANDLE __RPC_FAR *ph) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISynchronizeEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISynchronizeEvent __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISynchronizeEvent __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISynchronizeEvent __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetHandle )( 
            ISynchronizeEvent __RPC_FAR * This,
            /* [out] */ HANDLE __RPC_FAR *ph);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetEventHandle )( 
            ISynchronizeEvent __RPC_FAR * This,
            /* [in] */ HANDLE __RPC_FAR *ph);
        
        END_INTERFACE
    } ISynchronizeEventVtbl;

    interface ISynchronizeEvent
    {
        CONST_VTBL struct ISynchronizeEventVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISynchronizeEvent_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISynchronizeEvent_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISynchronizeEvent_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISynchronizeEvent_GetHandle(This,ph)	\
    (This)->lpVtbl -> GetHandle(This,ph)


#define ISynchronizeEvent_SetEventHandle(This,ph)	\
    (This)->lpVtbl -> SetEventHandle(This,ph)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ISynchronizeEvent_SetEventHandle_Proxy( 
    ISynchronizeEvent __RPC_FAR * This,
    /* [in] */ HANDLE __RPC_FAR *ph);


void __RPC_STUB ISynchronizeEvent_SetEventHandle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISynchronizeEvent_INTERFACE_DEFINED__ */


#ifndef __ISynchronizeContainer_INTERFACE_DEFINED__
#define __ISynchronizeContainer_INTERFACE_DEFINED__

/* interface ISynchronizeContainer */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_ISynchronizeContainer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000033-0000-0000-C000-000000000046")
    ISynchronizeContainer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddSynchronize( 
            /* [in] */ ISynchronize __RPC_FAR *pSync) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WaitMultiple( 
            /* [in] */ DWORD dwFlags,
            /* [in] */ DWORD dwTimeOut,
            /* [out] */ ISynchronize __RPC_FAR *__RPC_FAR *ppSync) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISynchronizeContainerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISynchronizeContainer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISynchronizeContainer __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISynchronizeContainer __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *AddSynchronize )( 
            ISynchronizeContainer __RPC_FAR * This,
            /* [in] */ ISynchronize __RPC_FAR *pSync);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *WaitMultiple )( 
            ISynchronizeContainer __RPC_FAR * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ DWORD dwTimeOut,
            /* [out] */ ISynchronize __RPC_FAR *__RPC_FAR *ppSync);
        
        END_INTERFACE
    } ISynchronizeContainerVtbl;

    interface ISynchronizeContainer
    {
        CONST_VTBL struct ISynchronizeContainerVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISynchronizeContainer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISynchronizeContainer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISynchronizeContainer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISynchronizeContainer_AddSynchronize(This,pSync)	\
    (This)->lpVtbl -> AddSynchronize(This,pSync)

#define ISynchronizeContainer_WaitMultiple(This,dwFlags,dwTimeOut,ppSync)	\
    (This)->lpVtbl -> WaitMultiple(This,dwFlags,dwTimeOut,ppSync)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ISynchronizeContainer_AddSynchronize_Proxy( 
    ISynchronizeContainer __RPC_FAR * This,
    /* [in] */ ISynchronize __RPC_FAR *pSync);


void __RPC_STUB ISynchronizeContainer_AddSynchronize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ISynchronizeContainer_WaitMultiple_Proxy( 
    ISynchronizeContainer __RPC_FAR * This,
    /* [in] */ DWORD dwFlags,
    /* [in] */ DWORD dwTimeOut,
    /* [out] */ ISynchronize __RPC_FAR *__RPC_FAR *ppSync);


void __RPC_STUB ISynchronizeContainer_WaitMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISynchronizeContainer_INTERFACE_DEFINED__ */


#ifndef __ISynchronizeMutex_INTERFACE_DEFINED__
#define __ISynchronizeMutex_INTERFACE_DEFINED__

/* interface ISynchronizeMutex */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_ISynchronizeMutex;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000025-0000-0000-C000-000000000046")
    ISynchronizeMutex : public ISynchronize
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ReleaseMutex( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISynchronizeMutexVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISynchronizeMutex __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISynchronizeMutex __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISynchronizeMutex __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Wait )( 
            ISynchronizeMutex __RPC_FAR * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ DWORD dwMilliseconds);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Signal )( 
            ISynchronizeMutex __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            ISynchronizeMutex __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ReleaseMutex )( 
            ISynchronizeMutex __RPC_FAR * This);
        
        END_INTERFACE
    } ISynchronizeMutexVtbl;

    interface ISynchronizeMutex
    {
        CONST_VTBL struct ISynchronizeMutexVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISynchronizeMutex_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISynchronizeMutex_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISynchronizeMutex_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISynchronizeMutex_Wait(This,dwFlags,dwMilliseconds)	\
    (This)->lpVtbl -> Wait(This,dwFlags,dwMilliseconds)

#define ISynchronizeMutex_Signal(This)	\
    (This)->lpVtbl -> Signal(This)

#define ISynchronizeMutex_Reset(This)	\
    (This)->lpVtbl -> Reset(This)


#define ISynchronizeMutex_ReleaseMutex(This)	\
    (This)->lpVtbl -> ReleaseMutex(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ISynchronizeMutex_ReleaseMutex_Proxy( 
    ISynchronizeMutex __RPC_FAR * This);


void __RPC_STUB ISynchronizeMutex_ReleaseMutex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISynchronizeMutex_INTERFACE_DEFINED__ */


#ifndef __ICancelMethodCalls_INTERFACE_DEFINED__
#define __ICancelMethodCalls_INTERFACE_DEFINED__

/* interface ICancelMethodCalls */
/* [uuid][object][local] */ 

typedef /* [unique] */ ICancelMethodCalls __RPC_FAR *LPCANCELMETHODCALLS;


EXTERN_C const IID IID_ICancelMethodCalls;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00000029-0000-0000-C000-000000000046")
    ICancelMethodCalls : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Cancel( 
            /* [in] */ ULONG ulSeconds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TestCancel( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICancelMethodCallsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ICancelMethodCalls __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ICancelMethodCalls __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ICancelMethodCalls __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Cancel )( 
            ICancelMethodCalls __RPC_FAR * This,
            /* [in] */ ULONG ulSeconds);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *TestCancel )( 
            ICancelMethodCalls __RPC_FAR * This);
        
        END_INTERFACE
    } ICancelMethodCallsVtbl;

    interface ICancelMethodCalls
    {
        CONST_VTBL struct ICancelMethodCallsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICancelMethodCalls_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ICancelMethodCalls_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ICancelMethodCalls_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ICancelMethodCalls_Cancel(This,ulSeconds)	\
    (This)->lpVtbl -> Cancel(This,ulSeconds)

#define ICancelMethodCalls_TestCancel(This)	\
    (This)->lpVtbl -> TestCancel(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ICancelMethodCalls_Cancel_Proxy( 
    ICancelMethodCalls __RPC_FAR * This,
    /* [in] */ ULONG ulSeconds);


void __RPC_STUB ICancelMethodCalls_Cancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICancelMethodCalls_TestCancel_Proxy( 
    ICancelMethodCalls __RPC_FAR * This);


void __RPC_STUB ICancelMethodCalls_TestCancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ICancelMethodCalls_INTERFACE_DEFINED__ */


#ifndef __ICallFactory_INTERFACE_DEFINED__
#define __ICallFactory_INTERFACE_DEFINED__

/* interface ICallFactory */
/* [unique][uuid][object][local] */ 


EXTERN_C const IID IID_ICallFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1c733a30-2a1c-11ce-ade5-00aa0044773d")
    ICallFactory : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateCall( 
            /* [in] */ REFIID riid,
            /* [in] */ IUnknown __RPC_FAR *pCtrlUnk,
            /* [in] */ REFIID riid2,
            /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppv) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICallFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ICallFactory __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ICallFactory __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ICallFactory __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateCall )( 
            ICallFactory __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [in] */ IUnknown __RPC_FAR *pCtrlUnk,
            /* [in] */ REFIID riid2,
            /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppv);
        
        END_INTERFACE
    } ICallFactoryVtbl;

    interface ICallFactory
    {
        CONST_VTBL struct ICallFactoryVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICallFactory_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ICallFactory_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ICallFactory_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ICallFactory_CreateCall(This,riid,pCtrlUnk,riid2,ppv)	\
    (This)->lpVtbl -> CreateCall(This,riid,pCtrlUnk,riid2,ppv)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ICallFactory_CreateCall_Proxy( 
    ICallFactory __RPC_FAR * This,
    /* [in] */ REFIID riid,
    /* [in] */ IUnknown __RPC_FAR *pCtrlUnk,
    /* [in] */ REFIID riid2,
    /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB ICallFactory_CreateCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ICallFactory_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  ASYNC_STGMEDIUM_UserSize(     unsigned long __RPC_FAR *, unsigned long            , ASYNC_STGMEDIUM __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  ASYNC_STGMEDIUM_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, ASYNC_STGMEDIUM __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  ASYNC_STGMEDIUM_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, ASYNC_STGMEDIUM __RPC_FAR * ); 
void                      __RPC_USER  ASYNC_STGMEDIUM_UserFree(     unsigned long __RPC_FAR *, ASYNC_STGMEDIUM __RPC_FAR * ); 

unsigned long             __RPC_USER  CLIPFORMAT_UserSize(     unsigned long __RPC_FAR *, unsigned long            , CLIPFORMAT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  CLIPFORMAT_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, CLIPFORMAT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  CLIPFORMAT_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, CLIPFORMAT __RPC_FAR * ); 
void                      __RPC_USER  CLIPFORMAT_UserFree(     unsigned long __RPC_FAR *, CLIPFORMAT __RPC_FAR * ); 

unsigned long             __RPC_USER  FLAG_STGMEDIUM_UserSize(     unsigned long __RPC_FAR *, unsigned long            , FLAG_STGMEDIUM __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  FLAG_STGMEDIUM_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, FLAG_STGMEDIUM __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  FLAG_STGMEDIUM_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, FLAG_STGMEDIUM __RPC_FAR * ); 
void                      __RPC_USER  FLAG_STGMEDIUM_UserFree(     unsigned long __RPC_FAR *, FLAG_STGMEDIUM __RPC_FAR * ); 

unsigned long             __RPC_USER  SNB_UserSize(     unsigned long __RPC_FAR *, unsigned long            , SNB __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  SNB_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, SNB __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  SNB_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, SNB __RPC_FAR * ); 
void                      __RPC_USER  SNB_UserFree(     unsigned long __RPC_FAR *, SNB __RPC_FAR * ); 

unsigned long             __RPC_USER  STGMEDIUM_UserSize(     unsigned long __RPC_FAR *, unsigned long            , STGMEDIUM __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  STGMEDIUM_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, STGMEDIUM __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  STGMEDIUM_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, STGMEDIUM __RPC_FAR * ); 
void                      __RPC_USER  STGMEDIUM_UserFree(     unsigned long __RPC_FAR *, STGMEDIUM __RPC_FAR * ); 

/* [local] */ HRESULT STDMETHODCALLTYPE IEnumUnknown_Next_Proxy( 
    IEnumUnknown __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumUnknown_Next_Stub( 
    IEnumUnknown __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);

/* [local] */ HRESULT STDMETHODCALLTYPE IBindCtx_SetBindOptions_Proxy( 
    IBindCtx __RPC_FAR * This,
    /* [in] */ BIND_OPTS __RPC_FAR *pbindopts);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IBindCtx_SetBindOptions_Stub( 
    IBindCtx __RPC_FAR * This,
    /* [in] */ BIND_OPTS2 __RPC_FAR *pbindopts);

/* [local] */ HRESULT STDMETHODCALLTYPE IBindCtx_GetBindOptions_Proxy( 
    IBindCtx __RPC_FAR * This,
    /* [out][in] */ BIND_OPTS __RPC_FAR *pbindopts);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IBindCtx_GetBindOptions_Stub( 
    IBindCtx __RPC_FAR * This,
    /* [out][in] */ BIND_OPTS2 __RPC_FAR *pbindopts);

/* [local] */ HRESULT STDMETHODCALLTYPE IEnumMoniker_Next_Proxy( 
    IEnumMoniker __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IMoniker __RPC_FAR *__RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumMoniker_Next_Stub( 
    IEnumMoniker __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IMoniker __RPC_FAR *__RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);

/* [local] */ BOOL STDMETHODCALLTYPE IRunnableObject_IsRunning_Proxy( 
    IRunnableObject __RPC_FAR * This);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IRunnableObject_IsRunning_Stub( 
    IRunnableObject __RPC_FAR * This);

/* [local] */ HRESULT STDMETHODCALLTYPE IMoniker_BindToObject_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
    /* [in] */ REFIID riidResult,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvResult);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMoniker_BindToObject_Stub( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
    /* [in] */ REFIID riidResult,
    /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppvResult);

/* [local] */ HRESULT STDMETHODCALLTYPE IMoniker_BindToStorage_Proxy( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObj);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMoniker_BindToStorage_Stub( 
    IMoniker __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [unique][in] */ IMoniker __RPC_FAR *pmkToLeft,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppvObj);

/* [local] */ HRESULT STDMETHODCALLTYPE IEnumString_Next_Proxy( 
    IEnumString __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ LPOLESTR __RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumString_Next_Stub( 
    IEnumString __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ LPOLESTR __RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);

/* [local] */ HRESULT STDMETHODCALLTYPE ISequentialStream_Read_Proxy( 
    ISequentialStream __RPC_FAR * This,
    /* [length_is][size_is][out] */ void __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbRead);


/* [call_as] */ HRESULT STDMETHODCALLTYPE ISequentialStream_Read_Stub( 
    ISequentialStream __RPC_FAR * This,
    /* [length_is][size_is][out] */ byte __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbRead);

/* [local] */ HRESULT STDMETHODCALLTYPE ISequentialStream_Write_Proxy( 
    ISequentialStream __RPC_FAR * This,
    /* [size_is][in] */ const void __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbWritten);


/* [call_as] */ HRESULT STDMETHODCALLTYPE ISequentialStream_Write_Stub( 
    ISequentialStream __RPC_FAR * This,
    /* [size_is][in] */ const byte __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbWritten);

/* [local] */ HRESULT STDMETHODCALLTYPE IStream_Seek_Proxy( 
    IStream __RPC_FAR * This,
    /* [in] */ LARGE_INTEGER dlibMove,
    /* [in] */ DWORD dwOrigin,
    /* [out] */ ULARGE_INTEGER __RPC_FAR *plibNewPosition);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IStream_Seek_Stub( 
    IStream __RPC_FAR * This,
    /* [in] */ LARGE_INTEGER dlibMove,
    /* [in] */ DWORD dwOrigin,
    /* [out] */ ULARGE_INTEGER __RPC_FAR *plibNewPosition);

/* [local] */ HRESULT STDMETHODCALLTYPE IStream_CopyTo_Proxy( 
    IStream __RPC_FAR * This,
    /* [unique][in] */ IStream __RPC_FAR *pstm,
    /* [in] */ ULARGE_INTEGER cb,
    /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbRead,
    /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbWritten);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IStream_CopyTo_Stub( 
    IStream __RPC_FAR * This,
    /* [unique][in] */ IStream __RPC_FAR *pstm,
    /* [in] */ ULARGE_INTEGER cb,
    /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbRead,
    /* [out] */ ULARGE_INTEGER __RPC_FAR *pcbWritten);

/* [local] */ HRESULT STDMETHODCALLTYPE IEnumSTATSTG_Next_Proxy( 
    IEnumSTATSTG __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ STATSTG __RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumSTATSTG_Next_Stub( 
    IEnumSTATSTG __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ STATSTG __RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);

/* [local] */ HRESULT STDMETHODCALLTYPE IStorage_OpenStream_Proxy( 
    IStorage __RPC_FAR * This,
    /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
    /* [unique][in] */ void __RPC_FAR *reserved1,
    /* [in] */ DWORD grfMode,
    /* [in] */ DWORD reserved2,
    /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppstm);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IStorage_OpenStream_Stub( 
    IStorage __RPC_FAR * This,
    /* [string][in] */ const OLECHAR __RPC_FAR *pwcsName,
    /* [in] */ unsigned long cbReserved1,
    /* [size_is][unique][in] */ byte __RPC_FAR *reserved1,
    /* [in] */ DWORD grfMode,
    /* [in] */ DWORD reserved2,
    /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppstm);

/* [local] */ HRESULT STDMETHODCALLTYPE IStorage_EnumElements_Proxy( 
    IStorage __RPC_FAR * This,
    /* [in] */ DWORD reserved1,
    /* [size_is][unique][in] */ void __RPC_FAR *reserved2,
    /* [in] */ DWORD reserved3,
    /* [out] */ IEnumSTATSTG __RPC_FAR *__RPC_FAR *ppenum);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IStorage_EnumElements_Stub( 
    IStorage __RPC_FAR * This,
    /* [in] */ DWORD reserved1,
    /* [in] */ unsigned long cbReserved2,
    /* [size_is][unique][in] */ byte __RPC_FAR *reserved2,
    /* [in] */ DWORD reserved3,
    /* [out] */ IEnumSTATSTG __RPC_FAR *__RPC_FAR *ppenum);

/* [local] */ HRESULT STDMETHODCALLTYPE ILockBytes_ReadAt_Proxy( 
    ILockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER ulOffset,
    /* [length_is][size_is][out] */ void __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbRead);


/* [call_as] */ HRESULT STDMETHODCALLTYPE ILockBytes_ReadAt_Stub( 
    ILockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER ulOffset,
    /* [length_is][size_is][out] */ byte __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbRead);

/* [local] */ HRESULT STDMETHODCALLTYPE ILockBytes_WriteAt_Proxy( 
    ILockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER ulOffset,
    /* [size_is][in] */ const void __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbWritten);


/* [call_as] */ HRESULT STDMETHODCALLTYPE ILockBytes_WriteAt_Stub( 
    ILockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER ulOffset,
    /* [size_is][in] */ const byte __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbWritten);

/* [local] */ HRESULT STDMETHODCALLTYPE IEnumFORMATETC_Next_Proxy( 
    IEnumFORMATETC __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ FORMATETC __RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumFORMATETC_Next_Stub( 
    IEnumFORMATETC __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ FORMATETC __RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);

/* [local] */ HRESULT STDMETHODCALLTYPE IEnumSTATDATA_Next_Proxy( 
    IEnumSTATDATA __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ STATDATA __RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumSTATDATA_Next_Stub( 
    IEnumSTATDATA __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ STATDATA __RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);

/* [local] */ void STDMETHODCALLTYPE IAdviseSink_OnDataChange_Proxy( 
    IAdviseSink __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pFormatetc,
    /* [unique][in] */ STGMEDIUM __RPC_FAR *pStgmed);


/* [async][call_as] */ void STDMETHODCALLTYPE IAdviseSink_OnDataChange_Stub( 
    IAdviseSink __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pFormatetc,
    /* [unique][in] */ ASYNC_STGMEDIUM __RPC_FAR *pStgmed);

/* [local] */ void STDMETHODCALLTYPE IAdviseSink_OnViewChange_Proxy( 
    IAdviseSink __RPC_FAR * This,
    /* [in] */ DWORD dwAspect,
    /* [in] */ LONG lindex);


/* [async][call_as] */ void STDMETHODCALLTYPE IAdviseSink_OnViewChange_Stub( 
    IAdviseSink __RPC_FAR * This,
    /* [in] */ DWORD dwAspect,
    /* [in] */ LONG lindex);

/* [local] */ void STDMETHODCALLTYPE IAdviseSink_OnRename_Proxy( 
    IAdviseSink __RPC_FAR * This,
    /* [in] */ IMoniker __RPC_FAR *pmk);


/* [async][call_as] */ void STDMETHODCALLTYPE IAdviseSink_OnRename_Stub( 
    IAdviseSink __RPC_FAR * This,
    /* [in] */ IMoniker __RPC_FAR *pmk);

/* [local] */ void STDMETHODCALLTYPE IAdviseSink_OnSave_Proxy( 
    IAdviseSink __RPC_FAR * This);


/* [async][call_as] */ void STDMETHODCALLTYPE IAdviseSink_OnSave_Stub( 
    IAdviseSink __RPC_FAR * This);

/* [local] */ void STDMETHODCALLTYPE IAdviseSink_OnClose_Proxy( 
    IAdviseSink __RPC_FAR * This);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IAdviseSink_OnClose_Stub( 
    IAdviseSink __RPC_FAR * This);

/* [local] */ void STDMETHODCALLTYPE IAdviseSink2_OnLinkSrcChange_Proxy( 
    IAdviseSink2 __RPC_FAR * This,
    /* [unique][in] */ IMoniker __RPC_FAR *pmk);


/* [async][call_as] */ void STDMETHODCALLTYPE IAdviseSink2_OnLinkSrcChange_Stub( 
    IAdviseSink2 __RPC_FAR * This,
    /* [unique][in] */ IMoniker __RPC_FAR *pmk);

/* [local] */ HRESULT STDMETHODCALLTYPE IDataObject_GetData_Proxy( 
    IDataObject __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatetcIn,
    /* [out] */ STGMEDIUM __RPC_FAR *pmedium);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IDataObject_GetData_Stub( 
    IDataObject __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatetcIn,
    /* [out] */ STGMEDIUM __RPC_FAR *pRemoteMedium);

/* [local] */ HRESULT STDMETHODCALLTYPE IDataObject_GetDataHere_Proxy( 
    IDataObject __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
    /* [out][in] */ STGMEDIUM __RPC_FAR *pmedium);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IDataObject_GetDataHere_Stub( 
    IDataObject __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
    /* [out][in] */ STGMEDIUM __RPC_FAR *pRemoteMedium);

/* [local] */ HRESULT STDMETHODCALLTYPE IDataObject_SetData_Proxy( 
    IDataObject __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
    /* [unique][in] */ STGMEDIUM __RPC_FAR *pmedium,
    /* [in] */ BOOL fRelease);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IDataObject_SetData_Stub( 
    IDataObject __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
    /* [unique][in] */ FLAG_STGMEDIUM __RPC_FAR *pmedium,
    /* [in] */ BOOL fRelease);

/* [local] */ HRESULT STDMETHODCALLTYPE IFillLockBytes_FillAppend_Proxy( 
    IFillLockBytes __RPC_FAR * This,
    /* [size_is][in] */ const void __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbWritten);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IFillLockBytes_FillAppend_Stub( 
    IFillLockBytes __RPC_FAR * This,
    /* [size_is][in] */ const byte __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbWritten);

/* [local] */ HRESULT STDMETHODCALLTYPE IFillLockBytes_FillAt_Proxy( 
    IFillLockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER ulOffset,
    /* [size_is][in] */ const void __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbWritten);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IFillLockBytes_FillAt_Stub( 
    IFillLockBytes __RPC_FAR * This,
    /* [in] */ ULARGE_INTEGER ulOffset,
    /* [size_is][in] */ const byte __RPC_FAR *pv,
    /* [in] */ ULONG cb,
    /* [out] */ ULONG __RPC_FAR *pcbWritten);



/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\ole2.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
//+---------------------------------------------------------------------------
//
//  Microsoft Windows
//
//  File:       OLE2.h
//  Contents:   Main OLE2 header; Defines Linking and Emmebbeding interfaces, and API's.
//              Also includes .h files for the compobj, and oleauto  subcomponents.
//
//----------------------------------------------------------------------------
#if !defined( _OLE2_H_ )
#define _OLE2_H_

// Set packing to 8
#include <pshpack8.h>

// Make 100% sure WIN32 is defined
#ifndef WIN32
#define WIN32    100  // 100 == NT version 1.0
#endif


// SET to remove _export from interface definitions


#include <winerror.h>

#include <objbase.h>
#include <oleauto.h>

// View OBJECT Error Codes

#define E_DRAW                  VIEW_E_DRAW

// IDataObject Error Codes
#define DATA_E_FORMATETC        DV_E_FORMATETC





// Common stuff gleamed from OLE.2,

/* verbs */
#define OLEIVERB_PRIMARY            (0L)
#define OLEIVERB_SHOW               (-1L)
#define OLEIVERB_OPEN               (-2L)
#define OLEIVERB_HIDE               (-3L)
#define OLEIVERB_UIACTIVATE         (-4L)
#define OLEIVERB_INPLACEACTIVATE    (-5L)
#define OLEIVERB_DISCARDUNDOSTATE   (-6L)

// for OleCreateEmbeddingHelper flags; roles in low word; options in high word
#define EMBDHLP_INPROC_HANDLER   0x0000L
#define EMBDHLP_INPROC_SERVER    0x0001L
#define EMBDHLP_CREATENOW    0x00000000L
#define EMBDHLP_DELAYCREATE  0x00010000L

/* extended create function flags */
#define OLECREATE_LEAVERUNNING	0x00000001

/* pull in the MIDL generated header */

#include <oleidl.h>






/****** DV APIs ***********************************************************/


WINOLEAPI CreateDataAdviseHolder(LPDATAADVISEHOLDER FAR* ppDAHolder);







/****** OLE API Prototypes ************************************************/

WINOLEAPI_(DWORD) OleBuildVersion( VOID );

/* helper functions */
WINOLEAPI ReadClassStg(LPSTORAGE pStg, CLSID FAR* pclsid);
WINOLEAPI WriteClassStg(LPSTORAGE pStg, REFCLSID rclsid);
WINOLEAPI ReadClassStm(LPSTREAM pStm, CLSID FAR* pclsid);
WINOLEAPI WriteClassStm(LPSTREAM pStm, REFCLSID rclsid);
WINOLEAPI WriteFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
WINOLEAPI ReadFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT FAR* pcf, LPOLESTR FAR* lplpszUserType);

// @CESYSGEN IF OLE32_DCOMOLE || OLE32_OLE232

/* init/term */

WINOLEAPI OleInitialize(LPVOID pvReserved);
WINOLEAPI_(void) OleUninitialize(void);



/* APIs to query whether (Embedded/Linked) object can be created from
   the data object */

WINOLEAPI  OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject);
WINOLEAPI  OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject);


/* Object creation APIs */

WINOLEAPI  OleCreate(REFCLSID rclsid, REFIID riid, DWORD renderopt,
                LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID FAR* ppvObj);

WINOLEAPI  OleCreateEx(REFCLSID rclsid, REFIID riid, DWORD dwFlags,
                DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                LPFORMATETC rgFormatEtc, IAdviseSink FAR* lpAdviseSink,
                DWORD FAR* rgdwConnection, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID FAR* ppvObj);

WINOLEAPI  OleCreateFromData(LPDATAOBJECT pSrcDataObj, REFIID riid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID FAR* ppvObj);

WINOLEAPI  OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, REFIID riid,
                DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                LPFORMATETC rgFormatEtc, IAdviseSink FAR* lpAdviseSink,
                DWORD FAR* rgdwConnection, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID FAR* ppvObj);

WINOLEAPI  OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, REFIID riid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID FAR* ppvObj);

WINOLEAPI  OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, REFIID riid,
                DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                LPFORMATETC rgFormatEtc, IAdviseSink FAR* lpAdviseSink,
                DWORD FAR* rgdwConnection, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID FAR* ppvObj);

WINOLEAPI  OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, REFIID iid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID FAR* ppvObj);


WINOLEAPI  OleCreateLink(LPMONIKER pmkLinkSrc, REFIID riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID FAR* ppvObj);

WINOLEAPI  OleCreateLinkEx(LPMONIKER pmkLinkSrc, REFIID riid,
            DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
            LPFORMATETC rgFormatEtc, IAdviseSink FAR* lpAdviseSink,
            DWORD FAR* rgdwConnection, LPOLECLIENTSITE pClientSite,
            LPSTORAGE pStg, LPVOID FAR* ppvObj);

WINOLEAPI  OleCreateLinkToFile(LPCOLESTR lpszFileName, REFIID riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID FAR* ppvObj);

WINOLEAPI  OleCreateLinkToFileEx(LPCOLESTR lpszFileName, REFIID riid,
            DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
            LPFORMATETC rgFormatEtc, IAdviseSink FAR* lpAdviseSink,
            DWORD FAR* rgdwConnection, LPOLECLIENTSITE pClientSite,
            LPSTORAGE pStg, LPVOID FAR* ppvObj);

WINOLEAPI  OleCreateFromFile(REFCLSID rclsid, LPCOLESTR lpszFileName, REFIID riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID FAR* ppvObj);

WINOLEAPI  OleCreateFromFileEx(REFCLSID rclsid, LPCOLESTR lpszFileName, REFIID riid,
            DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
            LPFORMATETC rgFormatEtc, IAdviseSink FAR* lpAdviseSink,
            DWORD FAR* rgdwConnection, LPOLECLIENTSITE pClientSite,
            LPSTORAGE pStg, LPVOID FAR* ppvObj);

WINOLEAPI  OleLoad(LPSTORAGE pStg, REFIID riid, LPOLECLIENTSITE pClientSite,
            LPVOID FAR* ppvObj);

WINOLEAPI  OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad);

WINOLEAPI  OleLoadFromStream( LPSTREAM pStm, REFIID iidInterface, LPVOID FAR* ppvObj);
WINOLEAPI  OleSaveToStream( LPPERSISTSTREAM pPStm, LPSTREAM pStm );


WINOLEAPI  OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained);
WINOLEAPI  OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible);


/* Drag/Drop APIs */

WINOLEAPI  RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget);
WINOLEAPI  RevokeDragDrop(HWND hwnd);
WINOLEAPI  DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource,
            DWORD dwOKEffects, LPDWORD pdwEffect);

/* Clipboard APIs */

WINOLEAPI  OleSetClipboard(LPDATAOBJECT pDataObj);
WINOLEAPI  OleGetClipboard(LPDATAOBJECT FAR* ppDataObj);
WINOLEAPI  OleFlushClipboard(void);
WINOLEAPI  OleIsCurrentClipboard(LPDATAOBJECT pDataObj);


/* InPlace Editing APIs */

WINOLEAPI_(HOLEMENU)   OleCreateMenuDescriptor (HMENU hmenuCombined,
                                LPOLEMENUGROUPWIDTHS lpMenuWidths);
WINOLEAPI              OleSetMenuDescriptor (HOLEMENU holemenu, HWND hwndFrame,
                                HWND hwndActiveObject,
                                LPOLEINPLACEFRAME lpFrame,
                                LPOLEINPLACEACTIVEOBJECT lpActiveObj);
WINOLEAPI              OleDestroyMenuDescriptor (HOLEMENU holemenu);

WINOLEAPI              OleTranslateAccelerator (LPOLEINPLACEFRAME lpFrame,
                            LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);


/* Helper APIs */
WINOLEAPI_(HANDLE) OleDuplicateData (HANDLE hSrc, CLIPFORMAT cfFormat,
                        UINT uiFlags);

WINOLEAPI          OleDraw (LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw,
                    LPCRECT lprcBounds);

WINOLEAPI          OleRun(LPUNKNOWN pUnknown);
WINOLEAPI_(BOOL)   OleIsRunning(LPOLEOBJECT pObject);
WINOLEAPI          OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses);
WINOLEAPI_(void)   ReleaseStgMedium(LPSTGMEDIUM);
WINOLEAPI          CreateOleAdviseHolder(LPOLEADVISEHOLDER FAR* ppOAHolder);

WINOLEAPI          OleCreateDefaultHandler(REFCLSID clsid, LPUNKNOWN pUnkOuter,
                    REFIID riid, LPVOID FAR* lplpObj);

WINOLEAPI          OleCreateEmbeddingHelper(REFCLSID clsid, LPUNKNOWN pUnkOuter,
                    DWORD flags, LPCLASSFACTORY pCF,
                                        REFIID riid, LPVOID FAR* lplpObj);

WINOLEAPI_(BOOL)   IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg,
                                        WORD FAR* lpwCmd);
/* Icon extraction Helper APIs */

WINOLEAPI_(HGLOBAL) OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel);

WINOLEAPI_(HGLOBAL) OleGetIconOfClass(REFCLSID rclsid,     LPOLESTR lpszLabel,
                                        BOOL fUseTypeAsLabel);

WINOLEAPI_(HGLOBAL) OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel,
                                        LPOLESTR lpszSourceFile, UINT iIconIndex);



/* Registration Database Helper APIs */

WINOLEAPI                  OleRegGetUserType (REFCLSID clsid, DWORD dwFormOfType,
                                        LPOLESTR FAR* pszUserType);

WINOLEAPI                  OleRegGetMiscStatus     (REFCLSID clsid, DWORD dwAspect,
                                        DWORD FAR* pdwStatus);

WINOLEAPI                  OleRegEnumFormatEtc     (REFCLSID clsid, DWORD dwDirection,
                                        LPENUMFORMATETC FAR* ppenum);

WINOLEAPI                  OleRegEnumVerbs (REFCLSID clsid, LPENUMOLEVERB FAR* ppenum);



// @CESYSGEN ENDIF


/* OLE 1.0 conversion APIS */

/***** OLE 1.0 OLESTREAM declarations *************************************/

typedef struct _OLESTREAM FAR*  LPOLESTREAM;

typedef struct _OLESTREAMVTBL
{
    DWORD (CALLBACK* Get)(LPOLESTREAM, void FAR*, DWORD);
    DWORD (CALLBACK* Put)(LPOLESTREAM, const void FAR*, DWORD);
} OLESTREAMVTBL;
typedef  OLESTREAMVTBL FAR*  LPOLESTREAMVTBL;

typedef struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
} OLESTREAM;


// @CESYSGEN IF OLE32_DCOMOLE || OLE32_OLE232

WINOLEAPI OleConvertOLESTREAMToIStorage
    (LPOLESTREAM                lpolestream,
    LPSTORAGE                   pstg,
    const DVTARGETDEVICE FAR*   ptd);

WINOLEAPI OleConvertIStorageToOLESTREAM
    (LPSTORAGE      pstg,
    LPOLESTREAM     lpolestream);

// @CESYSGEN ENDIF

// @CESYSGEN IF OLE32_DCOMOLE || OLE32_MCOMSTM || OLE32_STG

/* Storage Utility APIs */
WINOLEAPI GetHGlobalFromILockBytes (LPLOCKBYTES plkbyt, HGLOBAL FAR* phglobal);
WINOLEAPI CreateILockBytesOnHGlobal (HGLOBAL hGlobal, BOOL fDeleteOnRelease,
                                    LPLOCKBYTES FAR* pplkbyt);

WINOLEAPI GetHGlobalFromStream (LPSTREAM pstm, HGLOBAL FAR* phglobal);
WINOLEAPI CreateStreamOnHGlobal (HGLOBAL hGlobal, BOOL fDeleteOnRelease,
                                LPSTREAM FAR* ppstm);

// @CESYSGEN ENDIF

/* ConvertTo APIS */

// @CESYSGEN IF OLE32_DCOMOLE || OLE32_OLE232

WINOLEAPI OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew);
WINOLEAPI OleGetAutoConvert(REFCLSID clsidOld, LPCLSID pClsidNew);
WINOLEAPI OleSetAutoConvert(REFCLSID clsidOld, REFCLSID clsidNew);
WINOLEAPI GetConvertStg(LPSTORAGE pStg);
WINOLEAPI SetConvertStg(LPSTORAGE pStg, BOOL fConvert);


WINOLEAPI OleConvertIStorageToOLESTREAMEx
    (LPSTORAGE          pstg,
                                    // Presentation data to OLESTREAM
     CLIPFORMAT         cfFormat,   //      format
     LONG               lWidth,     //      width
     LONG               lHeight,    //      height
     DWORD              dwSize,     //      size in bytes
     LPSTGMEDIUM        pmedium,    //      bits
     LPOLESTREAM        polestm);

WINOLEAPI OleConvertOLESTREAMToIStorageEx
    (LPOLESTREAM        polestm,
     LPSTORAGE          pstg,
                                    // Presentation data from OLESTREAM
     CLIPFORMAT FAR*    pcfFormat,  //      format
     LONG FAR*          plwWidth,   //      width
     LONG FAR*          plHeight,   //      height
     DWORD FAR*         pdwSize,    //      size in bytes
     LPSTGMEDIUM        pmedium);   //      bits

// @CESYSGEN ENDIF

#ifndef RC_INVOKED
#include <poppack.h>
#endif // RC_INVOKED

#endif     // __OLE2_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\olectl.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/////////////////////////////////////////////////////////////////////////////
//
// olectl.h     OLE Control interfaces
//
//              OLE Version 2.0
//
//
/////////////////////////////////////////////////////////////////////////////


#ifndef _OLECTL_H_
#define _OLECTL_H_

#if !defined(__MKTYPLIB__) && !defined(__midl)

#if defined(_MAC)
#include <macocidl.h>
#else // not _MAC

#if !defined(RC_INVOKED)
#pragma pack(8)
#endif

#include <ocidl.h>
#endif // _MAC

#ifdef _OLEAUT32_
#define WINOLECTLAPI        STDAPI
#define WINOLECTLAPI_(type) STDAPI_(type)
#else
#define WINOLECTLAPI        EXTERN_C DECLSPEC_IMPORT HRESULT STDAPICALLTYPE
#define WINOLECTLAPI_(type) EXTERN_C DECLSPEC_IMPORT type STDAPICALLTYPE
#endif

#if !defined(INITGUID)

DEFINE_GUID(IID_IPropertyFrame,
	0xB196B28A,0xBAB4,0x101A,0xB6,0x9C,0x00,0xAA,0x00,0x34,0x1D,0x07);

//
//  Class IDs for property sheet implementations
//

DEFINE_GUID(CLSID_CFontPropPage, 
	0x0be35200,0x8f91,0x11ce,0x9d,0xe3,0x00,0xaa,0x00,0x4b,0xb8,0x51);
DEFINE_GUID(CLSID_CColorPropPage, 
	0x0be35201,0x8f91,0x11ce,0x9d,0xe3,0x00,0xaa,0x00,0x4b,0xb8,0x51);
DEFINE_GUID(CLSID_CPicturePropPage, 
	0x0be35202,0x8f91,0x11ce,0x9d,0xe3,0x00,0xaa,0x00,0x4b,0xb8,0x51);

//
//  Class IDs for persistent property set formats
//

DEFINE_GUID(CLSID_PersistPropset,
	0xfb8f0821,0x0164,0x101b,0x84,0xed,0x08,0x00,0x2b,0x2e,0xc7,0x13);
DEFINE_GUID(CLSID_ConvertVBX,
	0xfb8f0822,0x0164,0x101b,0x84,0xed,0x08,0x00,0x2b,0x2e,0xc7,0x13);

//
//  Class ID for standard implementations of IFont and IPicture

DEFINE_GUID(CLSID_StdFont, 
	0x0be35203,0x8f91,0x11ce,0x9d,0xe3,0x00,0xaa,0x00,0x4b,0xb8,0x51);
DEFINE_GUID(CLSID_StdPicture, 
	0x0be35204,0x8f91,0x11ce,0x9d,0xe3,0x00,0xaa,0x00,0x4b,0xb8,0x51);

//
//  GUIDs for standard types
//

DEFINE_GUID(GUID_HIMETRIC,
	0x66504300,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_COLOR,
	0x66504301,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_XPOSPIXEL,
	0x66504302,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_YPOSPIXEL,
	0x66504303,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_XSIZEPIXEL,
	0x66504304,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_YSIZEPIXEL,
	0x66504305,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_XPOS,
	0x66504306,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_YPOS,
	0x66504307,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_XSIZE,
	0x66504308,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_YSIZE,
	0x66504309,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);

#if !defined( __CGUID_H__ )
DEFINE_GUID(GUID_TRISTATE,
	0x6650430A,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
#endif

DEFINE_GUID(GUID_OPTIONVALUEEXCLUSIVE,
	0x6650430B,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_CHECKVALUEEXCLUSIVE,
	0x6650430C,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_FONTNAME,
	0x6650430D,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_FONTSIZE,
	0x6650430E,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_FONTBOLD,
	0x6650430F,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_FONTITALIC,
	0x66504310,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_FONTUNDERSCORE,
	0x66504311,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_FONTSTRIKETHROUGH,
	0x66504312,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);
DEFINE_GUID(GUID_HANDLE,
	0x66504313,0xBE0F,0x101A,0x8B,0xBB,0x00,0xAA,0x00,0x30,0x0C,0xAB);

#endif // INITGUID


/////////////////////////////////////////////////////////////////////////////
// OCPFIPARAMS structure - parameters for OleCreatePropertyFrameIndirect

typedef struct tagOCPFIPARAMS
{
    ULONG cbStructSize;
    HWND hWndOwner;
    int x;
    int y;
    LPCOLESTR lpszCaption;
    ULONG cObjects;
    LPUNKNOWN FAR* lplpUnk;
    ULONG cPages;
    CLSID FAR* lpPages;
    LCID lcid;
    DISPID dispidInitialProperty;

} OCPFIPARAMS, FAR* LPOCPFIPARAMS;


/////////////////////////////////////////////////////////////////////////////
// FONTDESC structure

#define FONTSIZE(n) { n##0000, 0 }

typedef struct tagFONTDESC
{
    UINT cbSizeofstruct;
    LPOLESTR lpstrName;
    CY cySize;
    SHORT sWeight;
    SHORT sCharset;
    BOOL fItalic;
    BOOL fUnderline;
    BOOL fStrikethrough;

} FONTDESC, FAR* LPFONTDESC;


/////////////////////////////////////////////////////////////////////////////
// PICTDESC structure

#define PICTYPE_UNINITIALIZED (-1)
#define PICTYPE_NONE            0
#define PICTYPE_BITMAP          1
#define PICTYPE_METAFILE        2
#define PICTYPE_ICON            3
#ifdef _WIN32
#define PICTYPE_ENHMETAFILE     4
#endif

typedef struct tagPICTDESC
{
    UINT cbSizeofstruct;
    UINT picType;
    union
    {
        struct
        {
            HBITMAP   hbitmap;        // Bitmap
            HPALETTE  hpal;           // Accompanying palette
        } bmp;

        struct
        {
            HMETAFILE hmeta;          // Metafile
            int       xExt;
            int       yExt;           // Extent
        } wmf;

        struct
        {
            HICON hicon;              // Icon
        } icon;

#ifdef _WIN32
        struct
        {
            HENHMETAFILE hemf;        // Enhanced Metafile
        } emf;
#endif
    };

} PICTDESC, FAR* LPPICTDESC;


/////////////////////////////////////////////////////////////////////////////
// Typedefs for standard scalar types

typedef long OLE_XPOS_PIXELS;
typedef long OLE_YPOS_PIXELS;
typedef long OLE_XSIZE_PIXELS;
typedef long OLE_YSIZE_PIXELS;
typedef float OLE_XPOS_CONTAINER;
typedef float OLE_YPOS_CONTAINER;
typedef float OLE_XSIZE_CONTAINER;
typedef float OLE_YSIZE_CONTAINER;
typedef enum { triUnchecked = 0, triChecked = 1, triGray = 2 } OLE_TRISTATE;
typedef VARIANT_BOOL OLE_OPTEXCLUSIVE;
typedef VARIANT_BOOL OLE_CANCELBOOL;
typedef VARIANT_BOOL OLE_ENABLEDEFAULTBOOL;

/////////////////////////////////////////////////////////////////////////////
// FACILITY_CONTROL status codes

#ifndef FACILITY_CONTROL
#define FACILITY_CONTROL 0xa
#endif

#define STD_CTL_SCODE(n) MAKE_SCODE(SEVERITY_ERROR, FACILITY_CONTROL, n)
#define CTL_E_ILLEGALFUNCTIONCALL       STD_CTL_SCODE(5)
#define CTL_E_OVERFLOW                  STD_CTL_SCODE(6)
#define CTL_E_OUTOFMEMORY               STD_CTL_SCODE(7)
#define CTL_E_DIVISIONBYZERO            STD_CTL_SCODE(11)
#define CTL_E_OUTOFSTRINGSPACE          STD_CTL_SCODE(14)
#define CTL_E_OUTOFSTACKSPACE           STD_CTL_SCODE(28)
#define CTL_E_BADFILENAMEORNUMBER       STD_CTL_SCODE(52)
#define CTL_E_FILENOTFOUND              STD_CTL_SCODE(53)
#define CTL_E_BADFILEMODE               STD_CTL_SCODE(54)
#define CTL_E_FILEALREADYOPEN           STD_CTL_SCODE(55)
#define CTL_E_DEVICEIOERROR             STD_CTL_SCODE(57)
#define CTL_E_FILEALREADYEXISTS         STD_CTL_SCODE(58)
#define CTL_E_BADRECORDLENGTH           STD_CTL_SCODE(59)
#define CTL_E_DISKFULL                  STD_CTL_SCODE(61)
#define CTL_E_BADRECORDNUMBER           STD_CTL_SCODE(63)
#define CTL_E_BADFILENAME               STD_CTL_SCODE(64)
#define CTL_E_TOOMANYFILES              STD_CTL_SCODE(67)
#define CTL_E_DEVICEUNAVAILABLE         STD_CTL_SCODE(68)
#define CTL_E_PERMISSIONDENIED          STD_CTL_SCODE(70)
#define CTL_E_DISKNOTREADY              STD_CTL_SCODE(71)
#define CTL_E_PATHFILEACCESSERROR       STD_CTL_SCODE(75)
#define CTL_E_PATHNOTFOUND              STD_CTL_SCODE(76)
#define CTL_E_INVALIDPATTERNSTRING      STD_CTL_SCODE(93)
#define CTL_E_INVALIDUSEOFNULL          STD_CTL_SCODE(94)
#define CTL_E_INVALIDFILEFORMAT         STD_CTL_SCODE(321)
#define CTL_E_INVALIDPROPERTYVALUE      STD_CTL_SCODE(380)
#define CTL_E_INVALIDPROPERTYARRAYINDEX STD_CTL_SCODE(381)
#define CTL_E_SETNOTSUPPORTEDATRUNTIME  STD_CTL_SCODE(382)
#define CTL_E_SETNOTSUPPORTED           STD_CTL_SCODE(383)
#define CTL_E_NEEDPROPERTYARRAYINDEX    STD_CTL_SCODE(385)
#define CTL_E_SETNOTPERMITTED           STD_CTL_SCODE(387)
#define CTL_E_GETNOTSUPPORTEDATRUNTIME  STD_CTL_SCODE(393)
#define CTL_E_GETNOTSUPPORTED           STD_CTL_SCODE(394)
#define CTL_E_PROPERTYNOTFOUND          STD_CTL_SCODE(422)
#define CTL_E_INVALIDCLIPBOARDFORMAT    STD_CTL_SCODE(460)
#define CTL_E_INVALIDPICTURE            STD_CTL_SCODE(481)
#define CTL_E_PRINTERERROR              STD_CTL_SCODE(482)
#define CTL_E_CANTSAVEFILETOTEMP        STD_CTL_SCODE(735)
#define CTL_E_SEARCHTEXTNOTFOUND        STD_CTL_SCODE(744)
#define CTL_E_REPLACEMENTSTOOLONG       STD_CTL_SCODE(746)

#define CUSTOM_CTL_SCODE(n) MAKE_SCODE(SEVERITY_ERROR, FACILITY_CONTROL, n)
#define CTL_E_CUSTOM_FIRST              CUSTOM_CTL_SCODE(600)


/////////////////////////////////////////////////////////////////////////////
// IClassFactory2 status codes

#if ! defined (CLASS_E_NOTLICENSED)
#define CLASS_E_NOTLICENSED         (CLASSFACTORY_E_FIRST+2)
// class is not licensed for use
#endif

/////////////////////////////////////////////////////////////////////////////
// IConnectionPoint status codes

#define CONNECT_E_FIRST    MAKE_SCODE(SEVERITY_ERROR,   FACILITY_ITF, 0x0200)
#define CONNECT_E_LAST     MAKE_SCODE(SEVERITY_ERROR,   FACILITY_ITF, 0x020F)
#define CONNECT_S_FIRST    MAKE_SCODE(SEVERITY_SUCCESS, FACILITY_ITF, 0x0200)
#define CONNECT_S_LAST     MAKE_SCODE(SEVERITY_SUCCESS, FACILITY_ITF, 0x020F)

#define CONNECT_E_NOCONNECTION      (CONNECT_E_FIRST+0)
// there is no connection for this connection id

#define CONNECT_E_ADVISELIMIT       (CONNECT_E_FIRST+1)
// this implementation's limit for advisory connections has been reached

#define CONNECT_E_CANNOTCONNECT     (CONNECT_E_FIRST+2)
// connection attempt failed

#define CONNECT_E_OVERRIDDEN        (CONNECT_E_FIRST+3)
// must use a derived interface to connect


/////////////////////////////////////////////////////////////////////////////
// DllRegisterServer/DllUnregisterServer status codes

#define SELFREG_E_FIRST    MAKE_SCODE(SEVERITY_ERROR,   FACILITY_ITF, 0x0200)
#define SELFREG_E_LAST     MAKE_SCODE(SEVERITY_ERROR,   FACILITY_ITF, 0x020F)
#define SELFREG_S_FIRST    MAKE_SCODE(SEVERITY_SUCCESS, FACILITY_ITF, 0x0200)
#define SELFREG_S_LAST     MAKE_SCODE(SEVERITY_SUCCESS, FACILITY_ITF, 0x020F)

#define SELFREG_E_TYPELIB           (SELFREG_E_FIRST+0)
// failed to register/unregister type library

#define SELFREG_E_CLASS             (SELFREG_E_FIRST+1)
// failed to register/unregister class


/////////////////////////////////////////////////////////////////////////////
// IPerPropertyBrowsing status codes

#define PERPROP_E_FIRST    MAKE_SCODE(SEVERITY_ERROR,   FACILITY_ITF, 0x0200)
#define PERPROP_E_LAST     MAKE_SCODE(SEVERITY_ERROR,   FACILITY_ITF, 0x020F)
#define PERPROP_S_FIRST    MAKE_SCODE(SEVERITY_SUCCESS, FACILITY_ITF, 0x0200)
#define PERPROP_S_LAST     MAKE_SCODE(SEVERITY_SUCCESS, FACILITY_ITF, 0x020F)

#define PERPROP_E_NOPAGEAVAILABLE   (PERPROP_E_FIRST+0)
// no page available for requested property


/////////////////////////////////////////////////////////////////////////////
// OLEMISC_ constants (they are also defined in the latest oleidl.h)

#define OLEMISC_INVISIBLEATRUNTIME  0x00000400L
#define OLEMISC_ALWAYSRUN           0x00000800L
#define OLEMISC_ACTSLIKEBUTTON      0x00001000L
#define OLEMISC_ACTSLIKELABEL       0x00002000L
#define OLEMISC_NOUIACTIVATE        0x00004000L
#define OLEMISC_ALIGNABLE           0x00008000L
#define OLEMISC_SIMPLEFRAME         0x00010000L
#define OLEMISC_SETCLIENTSITEFIRST  0x00020000L
#define OLEMISC_IMEMODE             0x00040000L
#define OLEMISC_WANTSTOMENUMERGE    0x00080000L


/////////////////////////////////////////////////////////////////////////////
// OLEIVERB_ constants

#ifndef OLEIVERB_PROPERTIES
#define OLEIVERB_PROPERTIES (-7L)
#endif


/////////////////////////////////////////////////////////////////////////////
// Variant type (VT_) tags for property sets

#define VT_STREAMED_PROPSET 73  //       [P]  Stream contains a property set
#define VT_STORED_PROPSET   74  //       [P]  Storage contains a property set
#define VT_BLOB_PROPSET     75  //       [P]  Blob contains a property set
#define VT_VERBOSE_ENUM     76  //       [P]  Enum value with text string


/////////////////////////////////////////////////////////////////////////////
// Variant type (VT_) tags that are just aliases for others

#define VT_COLOR            VT_I4
#define VT_XPOS_PIXELS      VT_I4
#define VT_YPOS_PIXELS      VT_I4
#define VT_XSIZE_PIXELS     VT_I4
#define VT_YSIZE_PIXELS     VT_I4
#define VT_XPOS_HIMETRIC    VT_I4
#define VT_YPOS_HIMETRIC    VT_I4
#define VT_XSIZE_HIMETRIC   VT_I4
#define VT_YSIZE_HIMETRIC   VT_I4
#define VT_TRISTATE         VT_I2
#define VT_OPTEXCLUSIVE     VT_BOOL
#define VT_FONT             VT_DISPATCH
#define VT_PICTURE          VT_DISPATCH

#ifdef _WIN32
#define VT_HANDLE           VT_I4
#else
#define VT_HANDLE           VT_I2
#endif


/////////////////////////////////////////////////////////////////////////////
// Reflected Window Message IDs

#define OCM__BASE           (WM_USER+0x1c00)
#define OCM_COMMAND         (OCM__BASE + WM_COMMAND)

#ifdef _WIN32
#define OCM_CTLCOLORBTN     (OCM__BASE + WM_CTLCOLORBTN)
#define OCM_CTLCOLOREDIT    (OCM__BASE + WM_CTLCOLOREDIT)
#define OCM_CTLCOLORDLG     (OCM__BASE + WM_CTLCOLORDLG)
#define OCM_CTLCOLORLISTBOX (OCM__BASE + WM_CTLCOLORLISTBOX)
#define OCM_CTLCOLORMSGBOX  (OCM__BASE + WM_CTLCOLORMSGBOX)
#define OCM_CTLCOLORSCROLLBAR   (OCM__BASE + WM_CTLCOLORSCROLLBAR)
#define OCM_CTLCOLORSTATIC  (OCM__BASE + WM_CTLCOLORSTATIC)
#else
#define OCM_CTLCOLOR        (OCM__BASE + WM_CTLCOLOR)
#endif

#define OCM_DRAWITEM        (OCM__BASE + WM_DRAWITEM)
#define OCM_MEASUREITEM     (OCM__BASE + WM_MEASUREITEM)
#define OCM_DELETEITEM      (OCM__BASE + WM_DELETEITEM)
#define OCM_VKEYTOITEM      (OCM__BASE + WM_VKEYTOITEM)
#define OCM_CHARTOITEM      (OCM__BASE + WM_CHARTOITEM)
#define OCM_COMPAREITEM     (OCM__BASE + WM_COMPAREITEM)
#define OCM_HSCROLL         (OCM__BASE + WM_HSCROLL)
#define OCM_VSCROLL         (OCM__BASE + WM_VSCROLL)
#define OCM_PARENTNOTIFY    (OCM__BASE + WM_PARENTNOTIFY)

#if (WINVER >= 0x0400)
#define OCM_NOTIFY            (OCM__BASE + WM_NOTIFY)
#endif


/////////////////////////////////////////////////////////////////////////////
// Self-registration APIs (to be implemented by server DLL)

STDAPI DllRegisterServer(void);
STDAPI DllUnregisterServer(void);


/////////////////////////////////////////////////////////////////////////////
// Property frame APIs

WINOLECTLAPI OleCreatePropertyFrame(HWND hwndOwner, UINT x, UINT y,
    LPCOLESTR lpszCaption, ULONG cObjects, LPUNKNOWN FAR* ppUnk, ULONG cPages,
    LPCLSID pPageClsID, LCID lcid, DWORD dwReserved, LPVOID pvReserved);

WINOLECTLAPI OleCreatePropertyFrameIndirect(LPOCPFIPARAMS lpParams);


/////////////////////////////////////////////////////////////////////////////
// Standard type APIs

WINOLECTLAPI OleTranslateColor(OLE_COLOR clr, HPALETTE hpal,
    COLORREF* lpcolorref);

WINOLECTLAPI OleCreateFontIndirect(LPFONTDESC lpFontDesc, REFIID riid,
    LPVOID FAR* lplpvObj);

WINOLECTLAPI OleCreatePictureIndirect(LPPICTDESC lpPictDesc, REFIID riid,
    BOOL fOwn, LPVOID FAR* lplpvObj);

WINOLECTLAPI OleLoadPicture(LPSTREAM lpstream, LONG lSize, BOOL fRunmode,
    REFIID riid, LPVOID FAR* lplpvObj);

WINOLECTLAPI OleLoadPictureFile(VARIANT varFileName,
    LPDISPATCH* lplpdispPicture);

WINOLECTLAPI OleSavePictureFile(LPDISPATCH lpdispPicture,
    BSTR bstrFileName);

WINOLECTLAPI OleLoadPicturePath(LPOLESTR szUrl, LPUNKNOWN punkCaller,
    DWORD dwFlags, OLE_COLOR clrBackgnd, REFIID, LPVOID * );

#define OPCTPATH_DEFAULTS     0 // SYNC | AUTHORTIME | OPAQUE
#define OPCTPATH_ASYNCHRONOUS 1
#define OPCTPATH_RUNTIME      2
#define OPCTPATH_RESERVED1    4

WINOLECTLAPI_(HCURSOR) OleIconToCursor(HINSTANCE hinstExe, HICON hIcon);


#if !defined(_MAC) && !defined(RC_INVOKED)
#pragma pack()
#endif

#endif // !(defined(__MKTYPLIB__) && !defined(__midl))

/////////////////////////////////////////////////////////////////////////////
//  Standard dispatch ID constants

#define DISPID_AUTOSIZE                 (-500)
#define DISPID_BACKCOLOR                (-501)
#define DISPID_BACKSTYLE                (-502)
#define DISPID_BORDERCOLOR              (-503)
#define DISPID_BORDERSTYLE              (-504)
#define DISPID_BORDERWIDTH              (-505)
#define DISPID_DRAWMODE                 (-507)
#define DISPID_DRAWSTYLE                (-508)
#define DISPID_DRAWWIDTH                (-509)
#define DISPID_FILLCOLOR                (-510)
#define DISPID_FILLSTYLE                (-511)
#define DISPID_FONT                     (-512)
#define DISPID_FORECOLOR                (-513)
#define DISPID_ENABLED                  (-514)
#define DISPID_HWND                     (-515)
#define DISPID_TABSTOP                  (-516)
#define DISPID_TEXT                     (-517)
#define DISPID_CAPTION                  (-518)
#define DISPID_BORDERVISIBLE            (-519)
#define DISPID_APPEARANCE               (-520)
#define DISPID_MOUSEPOINTER             (-521)
#define DISPID_MOUSEICON                (-522)
#define DISPID_PICTURE                  (-523)
#define DISPID_VALID                    (-524)
#define DISPID_READYSTATE               (-525)

#define DISPID_REFRESH                  (-550)
#define DISPID_DOCLICK                  (-551)
#define DISPID_ABOUTBOX                 (-552)

#define DISPID_CLICK                    (-600)
#define DISPID_DBLCLICK                 (-601)
#define DISPID_KEYDOWN                  (-602)
#define DISPID_KEYPRESS                 (-603)
#define DISPID_KEYUP                    (-604)
#define DISPID_MOUSEDOWN                (-605)
#define DISPID_MOUSEMOVE                (-606)
#define DISPID_MOUSEUP                  (-607)
#define DISPID_ERROREVENT               (-608)
#define DISPID_READYSTATECHANGE         (-609)

#define DISPID_AMBIENT_BACKCOLOR        (-701)
#define DISPID_AMBIENT_DISPLAYNAME      (-702)
#define DISPID_AMBIENT_FONT             (-703)
#define DISPID_AMBIENT_FORECOLOR        (-704)
#define DISPID_AMBIENT_LOCALEID         (-705)
#define DISPID_AMBIENT_MESSAGEREFLECT   (-706)
#define DISPID_AMBIENT_SCALEUNITS       (-707)
#define DISPID_AMBIENT_TEXTALIGN        (-708)
#define DISPID_AMBIENT_USERMODE         (-709)
#define DISPID_AMBIENT_UIDEAD           (-710)
#define DISPID_AMBIENT_SHOWGRABHANDLES  (-711)
#define DISPID_AMBIENT_SHOWHATCHING     (-712)
#define DISPID_AMBIENT_DISPLAYASDEFAULT (-713)
#define DISPID_AMBIENT_SUPPORTSMNEMONICS (-714)
#define DISPID_AMBIENT_AUTOCLIP         (-715)
#define DISPID_AMBIENT_APPEARANCE       (-716)
#define DISPID_AMBIENT_PALETTE          (-726)
#define DISPID_AMBIENT_TRANSFERPRIORITY (-728)

#define DISPID_Name                     (-800)
#define DISPID_Delete                   (-801)
#define DISPID_Object                   (-802)
#define DISPID_Parent                   (-803)

/////////////////////////////////////////////////////////////////////////////
// Dispatch ID constants for font and picture types

#define DISPID_FONT_NAME    0
#define DISPID_FONT_SIZE    2
#define DISPID_FONT_BOLD    3
#define DISPID_FONT_ITALIC  4
#define DISPID_FONT_UNDER   5
#define DISPID_FONT_STRIKE  6
#define DISPID_FONT_WEIGHT  7
#define DISPID_FONT_CHARSET 8

#define DISPID_PICT_HANDLE  0
#define DISPID_PICT_HPAL    2
#define DISPID_PICT_TYPE    3
#define DISPID_PICT_WIDTH   4
#define DISPID_PICT_HEIGHT  5
#define DISPID_PICT_RENDER  6


#if defined(__MKTYPLIB__) || defined(__midl)

/////////////////////////////////////////////////////////////////////////////
// Names of modules containing type libraries for standard types

#define STDOLE_TLB "stdole32.tlb"
#define STDTYPE_TLB "stdole2.tlb"

#endif // defined(__MKTYPLIB__) || defined(__midl)

#endif // _OLECTL_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\objsafe.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//

#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 5.03.0286 */
/* at Mon Jan 22 12:15:13 2007
 */
/* Compiler settings for ..\objsafe.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32 (32b run), ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __objsafe_h__
#define __objsafe_h__

/* Forward Declarations */ 

#ifndef __IObjectSafety_FWD_DEFINED__
#define __IObjectSafety_FWD_DEFINED__
typedef interface IObjectSafety IObjectSafety;
#endif 	/* __IObjectSafety_FWD_DEFINED__ */


/* header files for imported files */
#include "unknwn.h"

#ifdef __cplusplus
extern "C"{
#endif 

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/* interface __MIDL_itf_objsafe_0000 */
/* [local] */ 

//=--------------------------------------------------------------------------=
// ObjSafe.h
//=--------------------------------------------------------------------------=
// (C) Copyright 1995-1998 Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=

#pragma comment(lib,"uuid.lib")

//---------------------------------------------------------------------------=
// Object Safety Interfaces.

//+--------------------------------------------------------------------------=
//
//  Contents:   IObjectSafety definition
//
//
//  IObjectSafety should be implemented by objects that have interfaces which
//      support "untrusted" clients (for example, scripts). It allows the owner of
//      the object to specify which interfaces need to be protected from untrusted
//      use. Examples of interfaces that might be protected in this way are:
//
//      IID_IDispatch           - "Safe for automating with untrusted automation client or script"
//      IID_IPersist*           - "Safe for initializing with untrusted data"
//      IID_IActiveScript       - "Safe for running untrusted scripts"
//
//---------------------------------------------------------------------------=
#ifndef _LPSAFEOBJECT_DEFINED
#define _LPSAFEOBJECT_DEFINED

// Option bit definitions for IObjectSafety:
#define	INTERFACESAFE_FOR_UNTRUSTED_CALLER	0x00000001	// Caller of interface may be untrusted
#define	INTERFACESAFE_FOR_UNTRUSTED_DATA	0x00000002	// Data passed into interface may be untrusted
#define	INTERFACE_USES_DISPEX	            0x00000004	// Object knows to use IDispatchEx
#define	INTERFACE_USES_SECURITY_MANAGER	    0x00000008	// Object knows to use IInternetHostSecurityManager

// {CB5BDC81-93C1-11cf-8F20-00805F2CD064}
DEFINE_GUID(IID_IObjectSafety, 0xcb5bdc81, 0x93c1, 0x11cf, 0x8f, 0x20, 0x0, 0x80, 0x5f, 0x2c, 0xd0, 0x64);
EXTERN_C GUID CATID_SafeForScripting;
EXTERN_C GUID CATID_SafeForInitializing;



extern RPC_IF_HANDLE __MIDL_itf_objsafe_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objsafe_0000_v0_0_s_ifspec;

#ifndef __IObjectSafety_INTERFACE_DEFINED__
#define __IObjectSafety_INTERFACE_DEFINED__

/* interface IObjectSafety */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IObjectSafety;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CB5BDC81-93C1-11cf-8F20-00805F2CD064")
    IObjectSafety : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInterfaceSafetyOptions( 
            /* [in] */ REFIID riid,
            /* [out] */ DWORD __RPC_FAR *pdwSupportedOptions,
            /* [out] */ DWORD __RPC_FAR *pdwEnabledOptions) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetInterfaceSafetyOptions( 
            /* [in] */ REFIID riid,
            /* [in] */ DWORD dwOptionSetMask,
            /* [in] */ DWORD dwEnabledOptions) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IObjectSafetyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IObjectSafety __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IObjectSafety __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IObjectSafety __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetInterfaceSafetyOptions )( 
            IObjectSafety __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [out] */ DWORD __RPC_FAR *pdwSupportedOptions,
            /* [out] */ DWORD __RPC_FAR *pdwEnabledOptions);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetInterfaceSafetyOptions )( 
            IObjectSafety __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [in] */ DWORD dwOptionSetMask,
            /* [in] */ DWORD dwEnabledOptions);
        
        END_INTERFACE
    } IObjectSafetyVtbl;

    interface IObjectSafety
    {
        CONST_VTBL struct IObjectSafetyVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IObjectSafety_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IObjectSafety_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IObjectSafety_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IObjectSafety_GetInterfaceSafetyOptions(This,riid,pdwSupportedOptions,pdwEnabledOptions)	\
    (This)->lpVtbl -> GetInterfaceSafetyOptions(This,riid,pdwSupportedOptions,pdwEnabledOptions)

#define IObjectSafety_SetInterfaceSafetyOptions(This,riid,dwOptionSetMask,dwEnabledOptions)	\
    (This)->lpVtbl -> SetInterfaceSafetyOptions(This,riid,dwOptionSetMask,dwEnabledOptions)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IObjectSafety_GetInterfaceSafetyOptions_Proxy( 
    IObjectSafety __RPC_FAR * This,
    /* [in] */ REFIID riid,
    /* [out] */ DWORD __RPC_FAR *pdwSupportedOptions,
    /* [out] */ DWORD __RPC_FAR *pdwEnabledOptions);


void __RPC_STUB IObjectSafety_GetInterfaceSafetyOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IObjectSafety_SetInterfaceSafetyOptions_Proxy( 
    IObjectSafety __RPC_FAR * This,
    /* [in] */ REFIID riid,
    /* [in] */ DWORD dwOptionSetMask,
    /* [in] */ DWORD dwEnabledOptions);


void __RPC_STUB IObjectSafety_SetInterfaceSafetyOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IObjectSafety_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_objsafe_0008 */
/* [local] */ 

typedef /* [unique] */ IObjectSafety __RPC_FAR *LPOBJECTSAFETY;

#endif


extern RPC_IF_HANDLE __MIDL_itf_objsafe_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objsafe_0008_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\ocidl.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//

#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 5.03.0286 */
/* at Wed Mar 14 15:54:45 2007
 */
/* Compiler settings for ..\ocidl.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32 (32b run), ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __ocidl_h__
#define __ocidl_h__

/* Forward Declarations */ 

#ifndef __IEnumConnections_FWD_DEFINED__
#define __IEnumConnections_FWD_DEFINED__
typedef interface IEnumConnections IEnumConnections;
#endif 	/* __IEnumConnections_FWD_DEFINED__ */


#ifndef __IConnectionPoint_FWD_DEFINED__
#define __IConnectionPoint_FWD_DEFINED__
typedef interface IConnectionPoint IConnectionPoint;
#endif 	/* __IConnectionPoint_FWD_DEFINED__ */


#ifndef __IEnumConnectionPoints_FWD_DEFINED__
#define __IEnumConnectionPoints_FWD_DEFINED__
typedef interface IEnumConnectionPoints IEnumConnectionPoints;
#endif 	/* __IEnumConnectionPoints_FWD_DEFINED__ */


#ifndef __IConnectionPointContainer_FWD_DEFINED__
#define __IConnectionPointContainer_FWD_DEFINED__
typedef interface IConnectionPointContainer IConnectionPointContainer;
#endif 	/* __IConnectionPointContainer_FWD_DEFINED__ */


#ifndef __IClassFactory2_FWD_DEFINED__
#define __IClassFactory2_FWD_DEFINED__
typedef interface IClassFactory2 IClassFactory2;
#endif 	/* __IClassFactory2_FWD_DEFINED__ */


#ifndef __IProvideClassInfo_FWD_DEFINED__
#define __IProvideClassInfo_FWD_DEFINED__
typedef interface IProvideClassInfo IProvideClassInfo;
#endif 	/* __IProvideClassInfo_FWD_DEFINED__ */


#ifndef __IProvideClassInfo2_FWD_DEFINED__
#define __IProvideClassInfo2_FWD_DEFINED__
typedef interface IProvideClassInfo2 IProvideClassInfo2;
#endif 	/* __IProvideClassInfo2_FWD_DEFINED__ */


#ifndef __IProvideMultipleClassInfo_FWD_DEFINED__
#define __IProvideMultipleClassInfo_FWD_DEFINED__
typedef interface IProvideMultipleClassInfo IProvideMultipleClassInfo;
#endif 	/* __IProvideMultipleClassInfo_FWD_DEFINED__ */


#ifndef __IOleControl_FWD_DEFINED__
#define __IOleControl_FWD_DEFINED__
typedef interface IOleControl IOleControl;
#endif 	/* __IOleControl_FWD_DEFINED__ */


#ifndef __IOleControlNavigation_FWD_DEFINED__
#define __IOleControlNavigation_FWD_DEFINED__
typedef interface IOleControlNavigation IOleControlNavigation;
#endif 	/* __IOleControlNavigation_FWD_DEFINED__ */


#ifndef __IOleControlSite_FWD_DEFINED__
#define __IOleControlSite_FWD_DEFINED__
typedef interface IOleControlSite IOleControlSite;
#endif 	/* __IOleControlSite_FWD_DEFINED__ */


#ifndef __IPropertyPage_FWD_DEFINED__
#define __IPropertyPage_FWD_DEFINED__
typedef interface IPropertyPage IPropertyPage;
#endif 	/* __IPropertyPage_FWD_DEFINED__ */


#ifndef __IPropertyPage2_FWD_DEFINED__
#define __IPropertyPage2_FWD_DEFINED__
typedef interface IPropertyPage2 IPropertyPage2;
#endif 	/* __IPropertyPage2_FWD_DEFINED__ */


#ifndef __IPropertyPageSite_FWD_DEFINED__
#define __IPropertyPageSite_FWD_DEFINED__
typedef interface IPropertyPageSite IPropertyPageSite;
#endif 	/* __IPropertyPageSite_FWD_DEFINED__ */


#ifndef __IPropertyNotifySink_FWD_DEFINED__
#define __IPropertyNotifySink_FWD_DEFINED__
typedef interface IPropertyNotifySink IPropertyNotifySink;
#endif 	/* __IPropertyNotifySink_FWD_DEFINED__ */


#ifndef __ISpecifyPropertyPages_FWD_DEFINED__
#define __ISpecifyPropertyPages_FWD_DEFINED__
typedef interface ISpecifyPropertyPages ISpecifyPropertyPages;
#endif 	/* __ISpecifyPropertyPages_FWD_DEFINED__ */


#ifndef __IPersistMemory_FWD_DEFINED__
#define __IPersistMemory_FWD_DEFINED__
typedef interface IPersistMemory IPersistMemory;
#endif 	/* __IPersistMemory_FWD_DEFINED__ */


#ifndef __IPersistStreamInit_FWD_DEFINED__
#define __IPersistStreamInit_FWD_DEFINED__
typedef interface IPersistStreamInit IPersistStreamInit;
#endif 	/* __IPersistStreamInit_FWD_DEFINED__ */


#ifndef __IPersistPropertyBag_FWD_DEFINED__
#define __IPersistPropertyBag_FWD_DEFINED__
typedef interface IPersistPropertyBag IPersistPropertyBag;
#endif 	/* __IPersistPropertyBag_FWD_DEFINED__ */


#ifndef __ISimpleFrameSite_FWD_DEFINED__
#define __ISimpleFrameSite_FWD_DEFINED__
typedef interface ISimpleFrameSite ISimpleFrameSite;
#endif 	/* __ISimpleFrameSite_FWD_DEFINED__ */


#ifndef __IFont_FWD_DEFINED__
#define __IFont_FWD_DEFINED__
typedef interface IFont IFont;
#endif 	/* __IFont_FWD_DEFINED__ */


#ifndef __IPicture_FWD_DEFINED__
#define __IPicture_FWD_DEFINED__
typedef interface IPicture IPicture;
#endif 	/* __IPicture_FWD_DEFINED__ */


#ifndef __IFontDisp_FWD_DEFINED__
#define __IFontDisp_FWD_DEFINED__
typedef interface IFontDisp IFontDisp;
#endif 	/* __IFontDisp_FWD_DEFINED__ */


#ifndef __IPictureDisp_FWD_DEFINED__
#define __IPictureDisp_FWD_DEFINED__
typedef interface IPictureDisp IPictureDisp;
#endif 	/* __IPictureDisp_FWD_DEFINED__ */


#ifndef __IAdviseSinkEx_FWD_DEFINED__
#define __IAdviseSinkEx_FWD_DEFINED__
typedef interface IAdviseSinkEx IAdviseSinkEx;
#endif 	/* __IAdviseSinkEx_FWD_DEFINED__ */


#ifndef __IOleInPlaceObjectWindowless_FWD_DEFINED__
#define __IOleInPlaceObjectWindowless_FWD_DEFINED__
typedef interface IOleInPlaceObjectWindowless IOleInPlaceObjectWindowless;
#endif 	/* __IOleInPlaceObjectWindowless_FWD_DEFINED__ */


#ifndef __IOleInPlaceSiteEx_FWD_DEFINED__
#define __IOleInPlaceSiteEx_FWD_DEFINED__
typedef interface IOleInPlaceSiteEx IOleInPlaceSiteEx;
#endif 	/* __IOleInPlaceSiteEx_FWD_DEFINED__ */


#ifndef __IOleInPlaceSiteWindowless_FWD_DEFINED__
#define __IOleInPlaceSiteWindowless_FWD_DEFINED__
typedef interface IOleInPlaceSiteWindowless IOleInPlaceSiteWindowless;
#endif 	/* __IOleInPlaceSiteWindowless_FWD_DEFINED__ */


#ifndef __IViewObjectEx_FWD_DEFINED__
#define __IViewObjectEx_FWD_DEFINED__
typedef interface IViewObjectEx IViewObjectEx;
#endif 	/* __IViewObjectEx_FWD_DEFINED__ */


#ifndef __IOleUndoUnit_FWD_DEFINED__
#define __IOleUndoUnit_FWD_DEFINED__
typedef interface IOleUndoUnit IOleUndoUnit;
#endif 	/* __IOleUndoUnit_FWD_DEFINED__ */


#ifndef __IOleParentUndoUnit_FWD_DEFINED__
#define __IOleParentUndoUnit_FWD_DEFINED__
typedef interface IOleParentUndoUnit IOleParentUndoUnit;
#endif 	/* __IOleParentUndoUnit_FWD_DEFINED__ */


#ifndef __IEnumOleUndoUnits_FWD_DEFINED__
#define __IEnumOleUndoUnits_FWD_DEFINED__
typedef interface IEnumOleUndoUnits IEnumOleUndoUnits;
#endif 	/* __IEnumOleUndoUnits_FWD_DEFINED__ */


#ifndef __IOleUndoManager_FWD_DEFINED__
#define __IOleUndoManager_FWD_DEFINED__
typedef interface IOleUndoManager IOleUndoManager;
#endif 	/* __IOleUndoManager_FWD_DEFINED__ */


#ifndef __IQuickActivate_FWD_DEFINED__
#define __IQuickActivate_FWD_DEFINED__
typedef interface IQuickActivate IQuickActivate;
#endif 	/* __IQuickActivate_FWD_DEFINED__ */


#ifndef __IPointerInactive_FWD_DEFINED__
#define __IPointerInactive_FWD_DEFINED__
typedef interface IPointerInactive IPointerInactive;
#endif 	/* __IPointerInactive_FWD_DEFINED__ */


#ifndef __IObjectWithSite_FWD_DEFINED__
#define __IObjectWithSite_FWD_DEFINED__
typedef interface IObjectWithSite IObjectWithSite;
#endif 	/* __IObjectWithSite_FWD_DEFINED__ */


#ifndef __IErrorLog_FWD_DEFINED__
#define __IErrorLog_FWD_DEFINED__
typedef interface IErrorLog IErrorLog;
#endif 	/* __IErrorLog_FWD_DEFINED__ */


#ifndef __IPropertyBag_FWD_DEFINED__
#define __IPropertyBag_FWD_DEFINED__
typedef interface IPropertyBag IPropertyBag;
#endif 	/* __IPropertyBag_FWD_DEFINED__ */


#ifndef __IPerPropertyBrowsing_FWD_DEFINED__
#define __IPerPropertyBrowsing_FWD_DEFINED__
typedef interface IPerPropertyBrowsing IPerPropertyBrowsing;
#endif 	/* __IPerPropertyBrowsing_FWD_DEFINED__ */


#ifndef __IPropertyBag2_FWD_DEFINED__
#define __IPropertyBag2_FWD_DEFINED__
typedef interface IPropertyBag2 IPropertyBag2;
#endif 	/* __IPropertyBag2_FWD_DEFINED__ */


#ifndef __IPersistPropertyBag2_FWD_DEFINED__
#define __IPersistPropertyBag2_FWD_DEFINED__
typedef interface IPersistPropertyBag2 IPersistPropertyBag2;
#endif 	/* __IPersistPropertyBag2_FWD_DEFINED__ */


/* header files for imported files */
#include "oleidl.h"
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/* interface __MIDL_itf_ocidl_0000 */
/* [local] */ 

//
//










































extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_v0_0_s_ifspec;

#ifndef __IOleControlTypes_INTERFACE_DEFINED__
#define __IOleControlTypes_INTERFACE_DEFINED__

/* interface IOleControlTypes */
/* [auto_handle][unique][version] */ 

typedef /* [v1_enum] */ 
enum tagUASFLAGS
    {	UAS_NORMAL	= 0,
	UAS_BLOCKED	= 0x1,
	UAS_NOPARENTENABLE	= 0x2,
	UAS_MASK	= 0x3
    }	UASFLAGS;

/* State values for the DISPID_READYSTATE property */
typedef /* [v1_enum] */ 
enum tagREADYSTATE
    {	READYSTATE_UNINITIALIZED	= 0,
	READYSTATE_LOADING	= 1,
	READYSTATE_LOADED	= 2,
	READYSTATE_INTERACTIVE	= 3,
	READYSTATE_COMPLETE	= 4
    }	READYSTATE;



extern RPC_IF_HANDLE IOleControlTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleControlTypes_v1_0_s_ifspec;
#endif /* __IOleControlTypes_INTERFACE_DEFINED__ */

#ifndef __IEnumConnections_INTERFACE_DEFINED__
#define __IEnumConnections_INTERFACE_DEFINED__

/* interface IEnumConnections */
/* [unique][uuid][object] */ 

typedef IEnumConnections __RPC_FAR *PENUMCONNECTIONS;

typedef IEnumConnections __RPC_FAR *LPENUMCONNECTIONS;

typedef struct tagCONNECTDATA
    {
    IUnknown __RPC_FAR *pUnk;
    DWORD dwCookie;
    }	CONNECTDATA;

typedef struct tagCONNECTDATA __RPC_FAR *PCONNECTDATA;

typedef struct tagCONNECTDATA __RPC_FAR *LPCONNECTDATA;


EXTERN_C const IID IID_IEnumConnections;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B196B287-BAB4-101A-B69C-00AA00341D07")
    IEnumConnections : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG cConnections,
            /* [length_is][size_is][out] */ LPCONNECTDATA rgcd,
            /* [out] */ ULONG __RPC_FAR *pcFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG cConnections) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumConnections __RPC_FAR *__RPC_FAR *ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumConnectionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IEnumConnections __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IEnumConnections __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IEnumConnections __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Next )( 
            IEnumConnections __RPC_FAR * This,
            /* [in] */ ULONG cConnections,
            /* [length_is][size_is][out] */ LPCONNECTDATA rgcd,
            /* [out] */ ULONG __RPC_FAR *pcFetched);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Skip )( 
            IEnumConnections __RPC_FAR * This,
            /* [in] */ ULONG cConnections);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            IEnumConnections __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IEnumConnections __RPC_FAR * This,
            /* [out] */ IEnumConnections __RPC_FAR *__RPC_FAR *ppEnum);
        
        END_INTERFACE
    } IEnumConnectionsVtbl;

    interface IEnumConnections
    {
        CONST_VTBL struct IEnumConnectionsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumConnections_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumConnections_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumConnections_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumConnections_Next(This,cConnections,rgcd,pcFetched)	\
    (This)->lpVtbl -> Next(This,cConnections,rgcd,pcFetched)

#define IEnumConnections_Skip(This,cConnections)	\
    (This)->lpVtbl -> Skip(This,cConnections)

#define IEnumConnections_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumConnections_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumConnections_RemoteNext_Proxy( 
    IEnumConnections __RPC_FAR * This,
    /* [in] */ ULONG cConnections,
    /* [length_is][size_is][out] */ LPCONNECTDATA rgcd,
    /* [out] */ ULONG __RPC_FAR *pcFetched);


void __RPC_STUB IEnumConnections_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumConnections_Skip_Proxy( 
    IEnumConnections __RPC_FAR * This,
    /* [in] */ ULONG cConnections);


void __RPC_STUB IEnumConnections_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumConnections_Reset_Proxy( 
    IEnumConnections __RPC_FAR * This);


void __RPC_STUB IEnumConnections_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumConnections_Clone_Proxy( 
    IEnumConnections __RPC_FAR * This,
    /* [out] */ IEnumConnections __RPC_FAR *__RPC_FAR *ppEnum);


void __RPC_STUB IEnumConnections_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumConnections_INTERFACE_DEFINED__ */


#ifndef __IConnectionPoint_INTERFACE_DEFINED__
#define __IConnectionPoint_INTERFACE_DEFINED__

/* interface IConnectionPoint */
/* [unique][uuid][object] */ 

typedef IConnectionPoint __RPC_FAR *PCONNECTIONPOINT;

typedef IConnectionPoint __RPC_FAR *LPCONNECTIONPOINT;


EXTERN_C const IID IID_IConnectionPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B196B286-BAB4-101A-B69C-00AA00341D07")
    IConnectionPoint : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetConnectionInterface( 
            /* [out] */ IID __RPC_FAR *pIID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetConnectionPointContainer( 
            /* [out] */ IConnectionPointContainer __RPC_FAR *__RPC_FAR *ppCPC) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Advise( 
            /* [in] */ IUnknown __RPC_FAR *pUnkSink,
            /* [out] */ DWORD __RPC_FAR *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unadvise( 
            /* [in] */ DWORD dwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumConnections( 
            /* [out] */ IEnumConnections __RPC_FAR *__RPC_FAR *ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IConnectionPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IConnectionPoint __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IConnectionPoint __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IConnectionPoint __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetConnectionInterface )( 
            IConnectionPoint __RPC_FAR * This,
            /* [out] */ IID __RPC_FAR *pIID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetConnectionPointContainer )( 
            IConnectionPoint __RPC_FAR * This,
            /* [out] */ IConnectionPointContainer __RPC_FAR *__RPC_FAR *ppCPC);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Advise )( 
            IConnectionPoint __RPC_FAR * This,
            /* [in] */ IUnknown __RPC_FAR *pUnkSink,
            /* [out] */ DWORD __RPC_FAR *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Unadvise )( 
            IConnectionPoint __RPC_FAR * This,
            /* [in] */ DWORD dwCookie);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumConnections )( 
            IConnectionPoint __RPC_FAR * This,
            /* [out] */ IEnumConnections __RPC_FAR *__RPC_FAR *ppEnum);
        
        END_INTERFACE
    } IConnectionPointVtbl;

    interface IConnectionPoint
    {
        CONST_VTBL struct IConnectionPointVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IConnectionPoint_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IConnectionPoint_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IConnectionPoint_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IConnectionPoint_GetConnectionInterface(This,pIID)	\
    (This)->lpVtbl -> GetConnectionInterface(This,pIID)

#define IConnectionPoint_GetConnectionPointContainer(This,ppCPC)	\
    (This)->lpVtbl -> GetConnectionPointContainer(This,ppCPC)

#define IConnectionPoint_Advise(This,pUnkSink,pdwCookie)	\
    (This)->lpVtbl -> Advise(This,pUnkSink,pdwCookie)

#define IConnectionPoint_Unadvise(This,dwCookie)	\
    (This)->lpVtbl -> Unadvise(This,dwCookie)

#define IConnectionPoint_EnumConnections(This,ppEnum)	\
    (This)->lpVtbl -> EnumConnections(This,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IConnectionPoint_GetConnectionInterface_Proxy( 
    IConnectionPoint __RPC_FAR * This,
    /* [out] */ IID __RPC_FAR *pIID);


void __RPC_STUB IConnectionPoint_GetConnectionInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IConnectionPoint_GetConnectionPointContainer_Proxy( 
    IConnectionPoint __RPC_FAR * This,
    /* [out] */ IConnectionPointContainer __RPC_FAR *__RPC_FAR *ppCPC);


void __RPC_STUB IConnectionPoint_GetConnectionPointContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IConnectionPoint_Advise_Proxy( 
    IConnectionPoint __RPC_FAR * This,
    /* [in] */ IUnknown __RPC_FAR *pUnkSink,
    /* [out] */ DWORD __RPC_FAR *pdwCookie);


void __RPC_STUB IConnectionPoint_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IConnectionPoint_Unadvise_Proxy( 
    IConnectionPoint __RPC_FAR * This,
    /* [in] */ DWORD dwCookie);


void __RPC_STUB IConnectionPoint_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IConnectionPoint_EnumConnections_Proxy( 
    IConnectionPoint __RPC_FAR * This,
    /* [out] */ IEnumConnections __RPC_FAR *__RPC_FAR *ppEnum);


void __RPC_STUB IConnectionPoint_EnumConnections_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IConnectionPoint_INTERFACE_DEFINED__ */


#ifndef __IEnumConnectionPoints_INTERFACE_DEFINED__
#define __IEnumConnectionPoints_INTERFACE_DEFINED__

/* interface IEnumConnectionPoints */
/* [unique][uuid][object] */ 

typedef IEnumConnectionPoints __RPC_FAR *PENUMCONNECTIONPOINTS;

typedef IEnumConnectionPoints __RPC_FAR *LPENUMCONNECTIONPOINTS;


EXTERN_C const IID IID_IEnumConnectionPoints;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B196B285-BAB4-101A-B69C-00AA00341D07")
    IEnumConnectionPoints : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG cConnections,
            /* [length_is][size_is][out] */ LPCONNECTIONPOINT __RPC_FAR *ppCP,
            /* [out] */ ULONG __RPC_FAR *pcFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG cConnections) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumConnectionPoints __RPC_FAR *__RPC_FAR *ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumConnectionPointsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IEnumConnectionPoints __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IEnumConnectionPoints __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IEnumConnectionPoints __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Next )( 
            IEnumConnectionPoints __RPC_FAR * This,
            /* [in] */ ULONG cConnections,
            /* [length_is][size_is][out] */ LPCONNECTIONPOINT __RPC_FAR *ppCP,
            /* [out] */ ULONG __RPC_FAR *pcFetched);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Skip )( 
            IEnumConnectionPoints __RPC_FAR * This,
            /* [in] */ ULONG cConnections);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            IEnumConnectionPoints __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IEnumConnectionPoints __RPC_FAR * This,
            /* [out] */ IEnumConnectionPoints __RPC_FAR *__RPC_FAR *ppEnum);
        
        END_INTERFACE
    } IEnumConnectionPointsVtbl;

    interface IEnumConnectionPoints
    {
        CONST_VTBL struct IEnumConnectionPointsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumConnectionPoints_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumConnectionPoints_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumConnectionPoints_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumConnectionPoints_Next(This,cConnections,ppCP,pcFetched)	\
    (This)->lpVtbl -> Next(This,cConnections,ppCP,pcFetched)

#define IEnumConnectionPoints_Skip(This,cConnections)	\
    (This)->lpVtbl -> Skip(This,cConnections)

#define IEnumConnectionPoints_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumConnectionPoints_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_RemoteNext_Proxy( 
    IEnumConnectionPoints __RPC_FAR * This,
    /* [in] */ ULONG cConnections,
    /* [length_is][size_is][out] */ LPCONNECTIONPOINT __RPC_FAR *ppCP,
    /* [out] */ ULONG __RPC_FAR *pcFetched);


void __RPC_STUB IEnumConnectionPoints_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Skip_Proxy( 
    IEnumConnectionPoints __RPC_FAR * This,
    /* [in] */ ULONG cConnections);


void __RPC_STUB IEnumConnectionPoints_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Reset_Proxy( 
    IEnumConnectionPoints __RPC_FAR * This);


void __RPC_STUB IEnumConnectionPoints_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Clone_Proxy( 
    IEnumConnectionPoints __RPC_FAR * This,
    /* [out] */ IEnumConnectionPoints __RPC_FAR *__RPC_FAR *ppEnum);


void __RPC_STUB IEnumConnectionPoints_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumConnectionPoints_INTERFACE_DEFINED__ */


#ifndef __IConnectionPointContainer_INTERFACE_DEFINED__
#define __IConnectionPointContainer_INTERFACE_DEFINED__

/* interface IConnectionPointContainer */
/* [unique][uuid][object] */ 

typedef IConnectionPointContainer __RPC_FAR *PCONNECTIONPOINTCONTAINER;

typedef IConnectionPointContainer __RPC_FAR *LPCONNECTIONPOINTCONTAINER;


EXTERN_C const IID IID_IConnectionPointContainer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B196B284-BAB4-101A-B69C-00AA00341D07")
    IConnectionPointContainer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumConnectionPoints( 
            /* [out] */ IEnumConnectionPoints __RPC_FAR *__RPC_FAR *ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindConnectionPoint( 
            /* [in] */ REFIID riid,
            /* [out] */ IConnectionPoint __RPC_FAR *__RPC_FAR *ppCP) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IConnectionPointContainerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IConnectionPointContainer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IConnectionPointContainer __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IConnectionPointContainer __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumConnectionPoints )( 
            IConnectionPointContainer __RPC_FAR * This,
            /* [out] */ IEnumConnectionPoints __RPC_FAR *__RPC_FAR *ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FindConnectionPoint )( 
            IConnectionPointContainer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [out] */ IConnectionPoint __RPC_FAR *__RPC_FAR *ppCP);
        
        END_INTERFACE
    } IConnectionPointContainerVtbl;

    interface IConnectionPointContainer
    {
        CONST_VTBL struct IConnectionPointContainerVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IConnectionPointContainer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IConnectionPointContainer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IConnectionPointContainer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IConnectionPointContainer_EnumConnectionPoints(This,ppEnum)	\
    (This)->lpVtbl -> EnumConnectionPoints(This,ppEnum)

#define IConnectionPointContainer_FindConnectionPoint(This,riid,ppCP)	\
    (This)->lpVtbl -> FindConnectionPoint(This,riid,ppCP)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IConnectionPointContainer_EnumConnectionPoints_Proxy( 
    IConnectionPointContainer __RPC_FAR * This,
    /* [out] */ IEnumConnectionPoints __RPC_FAR *__RPC_FAR *ppEnum);


void __RPC_STUB IConnectionPointContainer_EnumConnectionPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IConnectionPointContainer_FindConnectionPoint_Proxy( 
    IConnectionPointContainer __RPC_FAR * This,
    /* [in] */ REFIID riid,
    /* [out] */ IConnectionPoint __RPC_FAR *__RPC_FAR *ppCP);


void __RPC_STUB IConnectionPointContainer_FindConnectionPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IConnectionPointContainer_INTERFACE_DEFINED__ */


#ifndef __IClassFactory2_INTERFACE_DEFINED__
#define __IClassFactory2_INTERFACE_DEFINED__

/* interface IClassFactory2 */
/* [unique][uuid][object] */ 

typedef IClassFactory2 __RPC_FAR *LPCLASSFACTORY2;

typedef struct tagLICINFO
    {
    LONG cbLicInfo;
    BOOL fRuntimeKeyAvail;
    BOOL fLicVerified;
    }	LICINFO;

typedef struct tagLICINFO __RPC_FAR *LPLICINFO;


EXTERN_C const IID IID_IClassFactory2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B196B28F-BAB4-101A-B69C-00AA00341D07")
    IClassFactory2 : public IClassFactory
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLicInfo( 
            /* [out] */ LICINFO __RPC_FAR *pLicInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RequestLicKey( 
            /* [in] */ DWORD dwReserved,
            /* [out] */ BSTR __RPC_FAR *pBstrKey) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE CreateInstanceLic( 
            /* [in] */ IUnknown __RPC_FAR *pUnkOuter,
            /* [in] */ IUnknown __RPC_FAR *pUnkReserved,
            /* [in] */ REFIID riid,
            /* [in] */ BSTR bstrKey,
            /* [iid_is][out] */ PVOID __RPC_FAR *ppvObj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IClassFactory2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IClassFactory2 __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IClassFactory2 __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IClassFactory2 __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateInstance )( 
            IClassFactory2 __RPC_FAR * This,
            /* [unique][in] */ IUnknown __RPC_FAR *pUnkOuter,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LockServer )( 
            IClassFactory2 __RPC_FAR * This,
            /* [in] */ BOOL fLock);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetLicInfo )( 
            IClassFactory2 __RPC_FAR * This,
            /* [out] */ LICINFO __RPC_FAR *pLicInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RequestLicKey )( 
            IClassFactory2 __RPC_FAR * This,
            /* [in] */ DWORD dwReserved,
            /* [out] */ BSTR __RPC_FAR *pBstrKey);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateInstanceLic )( 
            IClassFactory2 __RPC_FAR * This,
            /* [in] */ IUnknown __RPC_FAR *pUnkOuter,
            /* [in] */ IUnknown __RPC_FAR *pUnkReserved,
            /* [in] */ REFIID riid,
            /* [in] */ BSTR bstrKey,
            /* [iid_is][out] */ PVOID __RPC_FAR *ppvObj);
        
        END_INTERFACE
    } IClassFactory2Vtbl;

    interface IClassFactory2
    {
        CONST_VTBL struct IClassFactory2Vtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IClassFactory2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IClassFactory2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IClassFactory2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IClassFactory2_CreateInstance(This,pUnkOuter,riid,ppvObject)	\
    (This)->lpVtbl -> CreateInstance(This,pUnkOuter,riid,ppvObject)

#define IClassFactory2_LockServer(This,fLock)	\
    (This)->lpVtbl -> LockServer(This,fLock)


#define IClassFactory2_GetLicInfo(This,pLicInfo)	\
    (This)->lpVtbl -> GetLicInfo(This,pLicInfo)

#define IClassFactory2_RequestLicKey(This,dwReserved,pBstrKey)	\
    (This)->lpVtbl -> RequestLicKey(This,dwReserved,pBstrKey)

#define IClassFactory2_CreateInstanceLic(This,pUnkOuter,pUnkReserved,riid,bstrKey,ppvObj)	\
    (This)->lpVtbl -> CreateInstanceLic(This,pUnkOuter,pUnkReserved,riid,bstrKey,ppvObj)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IClassFactory2_GetLicInfo_Proxy( 
    IClassFactory2 __RPC_FAR * This,
    /* [out] */ LICINFO __RPC_FAR *pLicInfo);


void __RPC_STUB IClassFactory2_GetLicInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IClassFactory2_RequestLicKey_Proxy( 
    IClassFactory2 __RPC_FAR * This,
    /* [in] */ DWORD dwReserved,
    /* [out] */ BSTR __RPC_FAR *pBstrKey);


void __RPC_STUB IClassFactory2_RequestLicKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IClassFactory2_RemoteCreateInstanceLic_Proxy( 
    IClassFactory2 __RPC_FAR * This,
    /* [in] */ REFIID riid,
    /* [in] */ BSTR bstrKey,
    /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppvObj);


void __RPC_STUB IClassFactory2_RemoteCreateInstanceLic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IClassFactory2_INTERFACE_DEFINED__ */


#ifndef __IProvideClassInfo_INTERFACE_DEFINED__
#define __IProvideClassInfo_INTERFACE_DEFINED__

/* interface IProvideClassInfo */
/* [unique][uuid][object] */ 

typedef IProvideClassInfo __RPC_FAR *LPPROVIDECLASSINFO;


EXTERN_C const IID IID_IProvideClassInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B196B283-BAB4-101A-B69C-00AA00341D07")
    IProvideClassInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetClassInfo( 
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTI) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProvideClassInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IProvideClassInfo __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IProvideClassInfo __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IProvideClassInfo __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassInfo )( 
            IProvideClassInfo __RPC_FAR * This,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTI);
        
        END_INTERFACE
    } IProvideClassInfoVtbl;

    interface IProvideClassInfo
    {
        CONST_VTBL struct IProvideClassInfoVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProvideClassInfo_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IProvideClassInfo_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IProvideClassInfo_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IProvideClassInfo_GetClassInfo(This,ppTI)	\
    (This)->lpVtbl -> GetClassInfo(This,ppTI)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IProvideClassInfo_GetClassInfo_Proxy( 
    IProvideClassInfo __RPC_FAR * This,
    /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTI);


void __RPC_STUB IProvideClassInfo_GetClassInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IProvideClassInfo_INTERFACE_DEFINED__ */


#ifndef __IProvideClassInfo2_INTERFACE_DEFINED__
#define __IProvideClassInfo2_INTERFACE_DEFINED__

/* interface IProvideClassInfo2 */
/* [unique][uuid][object] */ 

typedef IProvideClassInfo2 __RPC_FAR *LPPROVIDECLASSINFO2;

typedef 
enum tagGUIDKIND
    {	GUIDKIND_DEFAULT_SOURCE_DISP_IID	= 1
    }	GUIDKIND;


EXTERN_C const IID IID_IProvideClassInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A6BC3AC0-DBAA-11CE-9DE3-00AA004BB851")
    IProvideClassInfo2 : public IProvideClassInfo
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetGUID( 
            /* [in] */ DWORD dwGuidKind,
            /* [out] */ GUID __RPC_FAR *pGUID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProvideClassInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IProvideClassInfo2 __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IProvideClassInfo2 __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IProvideClassInfo2 __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassInfo )( 
            IProvideClassInfo2 __RPC_FAR * This,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTI);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetGUID )( 
            IProvideClassInfo2 __RPC_FAR * This,
            /* [in] */ DWORD dwGuidKind,
            /* [out] */ GUID __RPC_FAR *pGUID);
        
        END_INTERFACE
    } IProvideClassInfo2Vtbl;

    interface IProvideClassInfo2
    {
        CONST_VTBL struct IProvideClassInfo2Vtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProvideClassInfo2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IProvideClassInfo2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IProvideClassInfo2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IProvideClassInfo2_GetClassInfo(This,ppTI)	\
    (This)->lpVtbl -> GetClassInfo(This,ppTI)


#define IProvideClassInfo2_GetGUID(This,dwGuidKind,pGUID)	\
    (This)->lpVtbl -> GetGUID(This,dwGuidKind,pGUID)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IProvideClassInfo2_GetGUID_Proxy( 
    IProvideClassInfo2 __RPC_FAR * This,
    /* [in] */ DWORD dwGuidKind,
    /* [out] */ GUID __RPC_FAR *pGUID);


void __RPC_STUB IProvideClassInfo2_GetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IProvideClassInfo2_INTERFACE_DEFINED__ */


#ifndef __IProvideMultipleClassInfo_INTERFACE_DEFINED__
#define __IProvideMultipleClassInfo_INTERFACE_DEFINED__

/* interface IProvideMultipleClassInfo */
/* [unique][uuid][object] */ 

#define MULTICLASSINFO_GETTYPEINFO           0x00000001
#define MULTICLASSINFO_GETNUMRESERVEDDISPIDS 0x00000002
#define MULTICLASSINFO_GETIIDPRIMARY         0x00000004
#define MULTICLASSINFO_GETIIDSOURCE          0x00000008
#define TIFLAGS_EXTENDDISPATCHONLY           0x00000001
typedef IProvideMultipleClassInfo __RPC_FAR *LPPROVIDEMULTIPLECLASSINFO;


EXTERN_C const IID IID_IProvideMultipleClassInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A7ABA9C1-8983-11cf-8F20-00805F2CD064")
    IProvideMultipleClassInfo : public IProvideClassInfo2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMultiTypeInfoCount( 
            /* [out] */ ULONG __RPC_FAR *pcti) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInfoOfIndex( 
            /* [in] */ ULONG iti,
            /* [in] */ DWORD dwFlags,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *pptiCoClass,
            /* [out] */ DWORD __RPC_FAR *pdwTIFlags,
            /* [out] */ ULONG __RPC_FAR *pcdispidReserved,
            /* [out] */ IID __RPC_FAR *piidPrimary,
            /* [out] */ IID __RPC_FAR *piidSource) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProvideMultipleClassInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IProvideMultipleClassInfo __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IProvideMultipleClassInfo __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IProvideMultipleClassInfo __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassInfo )( 
            IProvideMultipleClassInfo __RPC_FAR * This,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTI);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetGUID )( 
            IProvideMultipleClassInfo __RPC_FAR * This,
            /* [in] */ DWORD dwGuidKind,
            /* [out] */ GUID __RPC_FAR *pGUID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetMultiTypeInfoCount )( 
            IProvideMultipleClassInfo __RPC_FAR * This,
            /* [out] */ ULONG __RPC_FAR *pcti);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetInfoOfIndex )( 
            IProvideMultipleClassInfo __RPC_FAR * This,
            /* [in] */ ULONG iti,
            /* [in] */ DWORD dwFlags,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *pptiCoClass,
            /* [out] */ DWORD __RPC_FAR *pdwTIFlags,
            /* [out] */ ULONG __RPC_FAR *pcdispidReserved,
            /* [out] */ IID __RPC_FAR *piidPrimary,
            /* [out] */ IID __RPC_FAR *piidSource);
        
        END_INTERFACE
    } IProvideMultipleClassInfoVtbl;

    interface IProvideMultipleClassInfo
    {
        CONST_VTBL struct IProvideMultipleClassInfoVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProvideMultipleClassInfo_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IProvideMultipleClassInfo_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IProvideMultipleClassInfo_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IProvideMultipleClassInfo_GetClassInfo(This,ppTI)	\
    (This)->lpVtbl -> GetClassInfo(This,ppTI)


#define IProvideMultipleClassInfo_GetGUID(This,dwGuidKind,pGUID)	\
    (This)->lpVtbl -> GetGUID(This,dwGuidKind,pGUID)


#define IProvideMultipleClassInfo_GetMultiTypeInfoCount(This,pcti)	\
    (This)->lpVtbl -> GetMultiTypeInfoCount(This,pcti)

#define IProvideMultipleClassInfo_GetInfoOfIndex(This,iti,dwFlags,pptiCoClass,pdwTIFlags,pcdispidReserved,piidPrimary,piidSource)	\
    (This)->lpVtbl -> GetInfoOfIndex(This,iti,dwFlags,pptiCoClass,pdwTIFlags,pcdispidReserved,piidPrimary,piidSource)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IProvideMultipleClassInfo_GetMultiTypeInfoCount_Proxy( 
    IProvideMultipleClassInfo __RPC_FAR * This,
    /* [out] */ ULONG __RPC_FAR *pcti);


void __RPC_STUB IProvideMultipleClassInfo_GetMultiTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IProvideMultipleClassInfo_GetInfoOfIndex_Proxy( 
    IProvideMultipleClassInfo __RPC_FAR * This,
    /* [in] */ ULONG iti,
    /* [in] */ DWORD dwFlags,
    /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *pptiCoClass,
    /* [out] */ DWORD __RPC_FAR *pdwTIFlags,
    /* [out] */ ULONG __RPC_FAR *pcdispidReserved,
    /* [out] */ IID __RPC_FAR *piidPrimary,
    /* [out] */ IID __RPC_FAR *piidSource);


void __RPC_STUB IProvideMultipleClassInfo_GetInfoOfIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IProvideMultipleClassInfo_INTERFACE_DEFINED__ */


#ifndef __IOleControl_INTERFACE_DEFINED__
#define __IOleControl_INTERFACE_DEFINED__

/* interface IOleControl */
/* [unique][uuid][object] */ 

typedef IOleControl __RPC_FAR *LPOLECONTROL;

typedef struct tagCONTROLINFO
    {
    ULONG cb;
    HACCEL hAccel;
    USHORT cAccel;
    DWORD dwFlags;
    }	CONTROLINFO;

typedef struct tagCONTROLINFO __RPC_FAR *LPCONTROLINFO;

typedef 
enum tagCTRLINFO
    {	CTRLINFO_EATS_RETURN	= 1,
	CTRLINFO_EATS_ESCAPE	= 2
    }	CTRLINFO;


EXTERN_C const IID IID_IOleControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B196B288-BAB4-101A-B69C-00AA00341D07")
    IOleControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetControlInfo( 
            /* [out] */ CONTROLINFO __RPC_FAR *pCI) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnMnemonic( 
            /* [in] */ MSG __RPC_FAR *pMsg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnAmbientPropertyChange( 
            /* [in] */ DISPID dispID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FreezeEvents( 
            /* [in] */ BOOL bFreeze) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleControl __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleControl __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleControl __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetControlInfo )( 
            IOleControl __RPC_FAR * This,
            /* [out] */ CONTROLINFO __RPC_FAR *pCI);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnMnemonic )( 
            IOleControl __RPC_FAR * This,
            /* [in] */ MSG __RPC_FAR *pMsg);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnAmbientPropertyChange )( 
            IOleControl __RPC_FAR * This,
            /* [in] */ DISPID dispID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FreezeEvents )( 
            IOleControl __RPC_FAR * This,
            /* [in] */ BOOL bFreeze);
        
        END_INTERFACE
    } IOleControlVtbl;

    interface IOleControl
    {
        CONST_VTBL struct IOleControlVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleControl_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleControl_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleControl_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleControl_GetControlInfo(This,pCI)	\
    (This)->lpVtbl -> GetControlInfo(This,pCI)

#define IOleControl_OnMnemonic(This,pMsg)	\
    (This)->lpVtbl -> OnMnemonic(This,pMsg)

#define IOleControl_OnAmbientPropertyChange(This,dispID)	\
    (This)->lpVtbl -> OnAmbientPropertyChange(This,dispID)

#define IOleControl_FreezeEvents(This,bFreeze)	\
    (This)->lpVtbl -> FreezeEvents(This,bFreeze)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleControl_GetControlInfo_Proxy( 
    IOleControl __RPC_FAR * This,
    /* [out] */ CONTROLINFO __RPC_FAR *pCI);


void __RPC_STUB IOleControl_GetControlInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControl_OnMnemonic_Proxy( 
    IOleControl __RPC_FAR * This,
    /* [in] */ MSG __RPC_FAR *pMsg);


void __RPC_STUB IOleControl_OnMnemonic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControl_OnAmbientPropertyChange_Proxy( 
    IOleControl __RPC_FAR * This,
    /* [in] */ DISPID dispID);


void __RPC_STUB IOleControl_OnAmbientPropertyChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControl_FreezeEvents_Proxy( 
    IOleControl __RPC_FAR * This,
    /* [in] */ BOOL bFreeze);


void __RPC_STUB IOleControl_FreezeEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleControl_INTERFACE_DEFINED__ */


#ifndef __IOleControlNavigation_INTERFACE_DEFINED__
#define __IOleControlNavigation_INTERFACE_DEFINED__

/* interface IOleControlNavigation */
/* [unique][uuid][object] */ 

typedef IOleControlNavigation __RPC_FAR *LPOLECONTROLNAVIGATION;


EXTERN_C const IID IID_IOleControlNavigation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("213b8a0a-bc38-11d2-977c-00c04fb6be66")
    IOleControlNavigation : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCurrentRect( 
            /* [out] */ RECT __RPC_FAR *prcCurrent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNavigationRectCount( 
            /* [out] */ DWORD __RPC_FAR *pdwRectCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNavigationRects( 
            /* [in] */ DWORD dwRectCount,
            /* [size_is][out] */ RECT __RPC_FAR lpRects[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scroll( 
            /* [in] */ DWORD dwDirection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ActivateRect( 
            /* [in] */ DWORD dwRectToActivate) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleControlNavigationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleControlNavigation __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleControlNavigation __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleControlNavigation __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCurrentRect )( 
            IOleControlNavigation __RPC_FAR * This,
            /* [out] */ RECT __RPC_FAR *prcCurrent);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetNavigationRectCount )( 
            IOleControlNavigation __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwRectCount);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetNavigationRects )( 
            IOleControlNavigation __RPC_FAR * This,
            /* [in] */ DWORD dwRectCount,
            /* [size_is][out] */ RECT __RPC_FAR lpRects[  ]);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Scroll )( 
            IOleControlNavigation __RPC_FAR * This,
            /* [in] */ DWORD dwDirection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ActivateRect )( 
            IOleControlNavigation __RPC_FAR * This,
            /* [in] */ DWORD dwRectToActivate);
        
        END_INTERFACE
    } IOleControlNavigationVtbl;

    interface IOleControlNavigation
    {
        CONST_VTBL struct IOleControlNavigationVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleControlNavigation_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleControlNavigation_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleControlNavigation_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleControlNavigation_GetCurrentRect(This,prcCurrent)	\
    (This)->lpVtbl -> GetCurrentRect(This,prcCurrent)

#define IOleControlNavigation_GetNavigationRectCount(This,pdwRectCount)	\
    (This)->lpVtbl -> GetNavigationRectCount(This,pdwRectCount)

#define IOleControlNavigation_GetNavigationRects(This,dwRectCount,lpRects)	\
    (This)->lpVtbl -> GetNavigationRects(This,dwRectCount,lpRects)

#define IOleControlNavigation_Scroll(This,dwDirection)	\
    (This)->lpVtbl -> Scroll(This,dwDirection)

#define IOleControlNavigation_ActivateRect(This,dwRectToActivate)	\
    (This)->lpVtbl -> ActivateRect(This,dwRectToActivate)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleControlNavigation_GetCurrentRect_Proxy( 
    IOleControlNavigation __RPC_FAR * This,
    /* [out] */ RECT __RPC_FAR *prcCurrent);


void __RPC_STUB IOleControlNavigation_GetCurrentRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControlNavigation_GetNavigationRectCount_Proxy( 
    IOleControlNavigation __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwRectCount);


void __RPC_STUB IOleControlNavigation_GetNavigationRectCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControlNavigation_GetNavigationRects_Proxy( 
    IOleControlNavigation __RPC_FAR * This,
    /* [in] */ DWORD dwRectCount,
    /* [size_is][out] */ RECT __RPC_FAR lpRects[  ]);


void __RPC_STUB IOleControlNavigation_GetNavigationRects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControlNavigation_Scroll_Proxy( 
    IOleControlNavigation __RPC_FAR * This,
    /* [in] */ DWORD dwDirection);


void __RPC_STUB IOleControlNavigation_Scroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControlNavigation_ActivateRect_Proxy( 
    IOleControlNavigation __RPC_FAR * This,
    /* [in] */ DWORD dwRectToActivate);


void __RPC_STUB IOleControlNavigation_ActivateRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleControlNavigation_INTERFACE_DEFINED__ */


#ifndef __IOleControlSite_INTERFACE_DEFINED__
#define __IOleControlSite_INTERFACE_DEFINED__

/* interface IOleControlSite */
/* [unique][uuid][object] */ 

typedef IOleControlSite __RPC_FAR *LPOLECONTROLSITE;

typedef struct tagPOINTF
    {
    FLOAT x;
    FLOAT y;
    }	POINTF;

typedef struct tagPOINTF __RPC_FAR *LPPOINTF;

typedef 
enum tagXFORMCOORDS
    {	XFORMCOORDS_POSITION	= 0x1,
	XFORMCOORDS_SIZE	= 0x2,
	XFORMCOORDS_HIMETRICTOCONTAINER	= 0x4,
	XFORMCOORDS_CONTAINERTOHIMETRIC	= 0x8
    }	XFORMCOORDS;


EXTERN_C const IID IID_IOleControlSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B196B289-BAB4-101A-B69C-00AA00341D07")
    IOleControlSite : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnControlInfoChanged( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LockInPlaceActive( 
            /* [in] */ BOOL fLock) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExtendedControl( 
            /* [out] */ IDispatch __RPC_FAR *__RPC_FAR *ppDisp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TransformCoords( 
            /* [out][in] */ POINTL __RPC_FAR *pPtlHimetric,
            /* [out][in] */ POINTF __RPC_FAR *pPtfContainer,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TranslateAccelerator( 
            /* [in] */ MSG __RPC_FAR *pMsg,
            /* [in] */ DWORD grfModifiers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnFocus( 
            /* [in] */ BOOL fGotFocus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShowPropertyFrame( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleControlSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleControlSite __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleControlSite __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleControlSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnControlInfoChanged )( 
            IOleControlSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LockInPlaceActive )( 
            IOleControlSite __RPC_FAR * This,
            /* [in] */ BOOL fLock);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetExtendedControl )( 
            IOleControlSite __RPC_FAR * This,
            /* [out] */ IDispatch __RPC_FAR *__RPC_FAR *ppDisp);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *TransformCoords )( 
            IOleControlSite __RPC_FAR * This,
            /* [out][in] */ POINTL __RPC_FAR *pPtlHimetric,
            /* [out][in] */ POINTF __RPC_FAR *pPtfContainer,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *TranslateAccelerator )( 
            IOleControlSite __RPC_FAR * This,
            /* [in] */ MSG __RPC_FAR *pMsg,
            /* [in] */ DWORD grfModifiers);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnFocus )( 
            IOleControlSite __RPC_FAR * This,
            /* [in] */ BOOL fGotFocus);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ShowPropertyFrame )( 
            IOleControlSite __RPC_FAR * This);
        
        END_INTERFACE
    } IOleControlSiteVtbl;

    interface IOleControlSite
    {
        CONST_VTBL struct IOleControlSiteVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleControlSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleControlSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleControlSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleControlSite_OnControlInfoChanged(This)	\
    (This)->lpVtbl -> OnControlInfoChanged(This)

#define IOleControlSite_LockInPlaceActive(This,fLock)	\
    (This)->lpVtbl -> LockInPlaceActive(This,fLock)

#define IOleControlSite_GetExtendedControl(This,ppDisp)	\
    (This)->lpVtbl -> GetExtendedControl(This,ppDisp)

#define IOleControlSite_TransformCoords(This,pPtlHimetric,pPtfContainer,dwFlags)	\
    (This)->lpVtbl -> TransformCoords(This,pPtlHimetric,pPtfContainer,dwFlags)

#define IOleControlSite_TranslateAccelerator(This,pMsg,grfModifiers)	\
    (This)->lpVtbl -> TranslateAccelerator(This,pMsg,grfModifiers)

#define IOleControlSite_OnFocus(This,fGotFocus)	\
    (This)->lpVtbl -> OnFocus(This,fGotFocus)

#define IOleControlSite_ShowPropertyFrame(This)	\
    (This)->lpVtbl -> ShowPropertyFrame(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleControlSite_OnControlInfoChanged_Proxy( 
    IOleControlSite __RPC_FAR * This);


void __RPC_STUB IOleControlSite_OnControlInfoChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControlSite_LockInPlaceActive_Proxy( 
    IOleControlSite __RPC_FAR * This,
    /* [in] */ BOOL fLock);


void __RPC_STUB IOleControlSite_LockInPlaceActive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControlSite_GetExtendedControl_Proxy( 
    IOleControlSite __RPC_FAR * This,
    /* [out] */ IDispatch __RPC_FAR *__RPC_FAR *ppDisp);


void __RPC_STUB IOleControlSite_GetExtendedControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControlSite_TransformCoords_Proxy( 
    IOleControlSite __RPC_FAR * This,
    /* [out][in] */ POINTL __RPC_FAR *pPtlHimetric,
    /* [out][in] */ POINTF __RPC_FAR *pPtfContainer,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IOleControlSite_TransformCoords_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControlSite_TranslateAccelerator_Proxy( 
    IOleControlSite __RPC_FAR * This,
    /* [in] */ MSG __RPC_FAR *pMsg,
    /* [in] */ DWORD grfModifiers);


void __RPC_STUB IOleControlSite_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControlSite_OnFocus_Proxy( 
    IOleControlSite __RPC_FAR * This,
    /* [in] */ BOOL fGotFocus);


void __RPC_STUB IOleControlSite_OnFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleControlSite_ShowPropertyFrame_Proxy( 
    IOleControlSite __RPC_FAR * This);


void __RPC_STUB IOleControlSite_ShowPropertyFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleControlSite_INTERFACE_DEFINED__ */


#ifndef __IPropertyPage_INTERFACE_DEFINED__
#define __IPropertyPage_INTERFACE_DEFINED__

/* interface IPropertyPage */
/* [unique][uuid][object] */ 

typedef IPropertyPage __RPC_FAR *LPPROPERTYPAGE;

typedef struct tagPROPPAGEINFO
    {
    ULONG cb;
    LPOLESTR pszTitle;
    SIZE size;
    LPOLESTR pszDocString;
    LPOLESTR pszHelpFile;
    DWORD dwHelpContext;
    }	PROPPAGEINFO;

typedef struct tagPROPPAGEINFO __RPC_FAR *LPPROPPAGEINFO;


EXTERN_C const IID IID_IPropertyPage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B196B28D-BAB4-101A-B69C-00AA00341D07")
    IPropertyPage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetPageSite( 
            /* [in] */ IPropertyPageSite __RPC_FAR *pPageSite) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Activate( 
            /* [in] */ HWND hWndParent,
            /* [in] */ LPCRECT pRect,
            /* [in] */ BOOL bModal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Deactivate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPageInfo( 
            /* [out] */ PROPPAGEINFO __RPC_FAR *pPageInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetObjects( 
            /* [in] */ ULONG cObjects,
            /* [size_is][in] */ IUnknown __RPC_FAR *__RPC_FAR *ppUnk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Show( 
            /* [in] */ UINT nCmdShow) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Move( 
            /* [in] */ LPCRECT pRect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsPageDirty( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Apply( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Help( 
            /* [in] */ LPCOLESTR pszHelpDir) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TranslateAccelerator( 
            /* [in] */ MSG __RPC_FAR *pMsg) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyPageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyPage __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyPage __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyPage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetPageSite )( 
            IPropertyPage __RPC_FAR * This,
            /* [in] */ IPropertyPageSite __RPC_FAR *pPageSite);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Activate )( 
            IPropertyPage __RPC_FAR * This,
            /* [in] */ HWND hWndParent,
            /* [in] */ LPCRECT pRect,
            /* [in] */ BOOL bModal);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Deactivate )( 
            IPropertyPage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPageInfo )( 
            IPropertyPage __RPC_FAR * This,
            /* [out] */ PROPPAGEINFO __RPC_FAR *pPageInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetObjects )( 
            IPropertyPage __RPC_FAR * This,
            /* [in] */ ULONG cObjects,
            /* [size_is][in] */ IUnknown __RPC_FAR *__RPC_FAR *ppUnk);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Show )( 
            IPropertyPage __RPC_FAR * This,
            /* [in] */ UINT nCmdShow);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Move )( 
            IPropertyPage __RPC_FAR * This,
            /* [in] */ LPCRECT pRect);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsPageDirty )( 
            IPropertyPage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Apply )( 
            IPropertyPage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Help )( 
            IPropertyPage __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszHelpDir);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *TranslateAccelerator )( 
            IPropertyPage __RPC_FAR * This,
            /* [in] */ MSG __RPC_FAR *pMsg);
        
        END_INTERFACE
    } IPropertyPageVtbl;

    interface IPropertyPage
    {
        CONST_VTBL struct IPropertyPageVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyPage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyPage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyPage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyPage_SetPageSite(This,pPageSite)	\
    (This)->lpVtbl -> SetPageSite(This,pPageSite)

#define IPropertyPage_Activate(This,hWndParent,pRect,bModal)	\
    (This)->lpVtbl -> Activate(This,hWndParent,pRect,bModal)

#define IPropertyPage_Deactivate(This)	\
    (This)->lpVtbl -> Deactivate(This)

#define IPropertyPage_GetPageInfo(This,pPageInfo)	\
    (This)->lpVtbl -> GetPageInfo(This,pPageInfo)

#define IPropertyPage_SetObjects(This,cObjects,ppUnk)	\
    (This)->lpVtbl -> SetObjects(This,cObjects,ppUnk)

#define IPropertyPage_Show(This,nCmdShow)	\
    (This)->lpVtbl -> Show(This,nCmdShow)

#define IPropertyPage_Move(This,pRect)	\
    (This)->lpVtbl -> Move(This,pRect)

#define IPropertyPage_IsPageDirty(This)	\
    (This)->lpVtbl -> IsPageDirty(This)

#define IPropertyPage_Apply(This)	\
    (This)->lpVtbl -> Apply(This)

#define IPropertyPage_Help(This,pszHelpDir)	\
    (This)->lpVtbl -> Help(This,pszHelpDir)

#define IPropertyPage_TranslateAccelerator(This,pMsg)	\
    (This)->lpVtbl -> TranslateAccelerator(This,pMsg)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyPage_SetPageSite_Proxy( 
    IPropertyPage __RPC_FAR * This,
    /* [in] */ IPropertyPageSite __RPC_FAR *pPageSite);


void __RPC_STUB IPropertyPage_SetPageSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPage_Activate_Proxy( 
    IPropertyPage __RPC_FAR * This,
    /* [in] */ HWND hWndParent,
    /* [in] */ LPCRECT pRect,
    /* [in] */ BOOL bModal);


void __RPC_STUB IPropertyPage_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPage_Deactivate_Proxy( 
    IPropertyPage __RPC_FAR * This);


void __RPC_STUB IPropertyPage_Deactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPage_GetPageInfo_Proxy( 
    IPropertyPage __RPC_FAR * This,
    /* [out] */ PROPPAGEINFO __RPC_FAR *pPageInfo);


void __RPC_STUB IPropertyPage_GetPageInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPage_SetObjects_Proxy( 
    IPropertyPage __RPC_FAR * This,
    /* [in] */ ULONG cObjects,
    /* [size_is][in] */ IUnknown __RPC_FAR *__RPC_FAR *ppUnk);


void __RPC_STUB IPropertyPage_SetObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPage_Show_Proxy( 
    IPropertyPage __RPC_FAR * This,
    /* [in] */ UINT nCmdShow);


void __RPC_STUB IPropertyPage_Show_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPage_Move_Proxy( 
    IPropertyPage __RPC_FAR * This,
    /* [in] */ LPCRECT pRect);


void __RPC_STUB IPropertyPage_Move_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPage_IsPageDirty_Proxy( 
    IPropertyPage __RPC_FAR * This);


void __RPC_STUB IPropertyPage_IsPageDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPage_Apply_Proxy( 
    IPropertyPage __RPC_FAR * This);


void __RPC_STUB IPropertyPage_Apply_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPage_Help_Proxy( 
    IPropertyPage __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszHelpDir);


void __RPC_STUB IPropertyPage_Help_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPage_TranslateAccelerator_Proxy( 
    IPropertyPage __RPC_FAR * This,
    /* [in] */ MSG __RPC_FAR *pMsg);


void __RPC_STUB IPropertyPage_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyPage_INTERFACE_DEFINED__ */


#ifndef __IPropertyPage2_INTERFACE_DEFINED__
#define __IPropertyPage2_INTERFACE_DEFINED__

/* interface IPropertyPage2 */
/* [unique][uuid][object] */ 

typedef IPropertyPage2 __RPC_FAR *LPPROPERTYPAGE2;


EXTERN_C const IID IID_IPropertyPage2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01E44665-24AC-101B-84ED-08002B2EC713")
    IPropertyPage2 : public IPropertyPage
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EditProperty( 
            /* [in] */ DISPID dispID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyPage2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyPage2 __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyPage2 __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyPage2 __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetPageSite )( 
            IPropertyPage2 __RPC_FAR * This,
            /* [in] */ IPropertyPageSite __RPC_FAR *pPageSite);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Activate )( 
            IPropertyPage2 __RPC_FAR * This,
            /* [in] */ HWND hWndParent,
            /* [in] */ LPCRECT pRect,
            /* [in] */ BOOL bModal);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Deactivate )( 
            IPropertyPage2 __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPageInfo )( 
            IPropertyPage2 __RPC_FAR * This,
            /* [out] */ PROPPAGEINFO __RPC_FAR *pPageInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetObjects )( 
            IPropertyPage2 __RPC_FAR * This,
            /* [in] */ ULONG cObjects,
            /* [size_is][in] */ IUnknown __RPC_FAR *__RPC_FAR *ppUnk);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Show )( 
            IPropertyPage2 __RPC_FAR * This,
            /* [in] */ UINT nCmdShow);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Move )( 
            IPropertyPage2 __RPC_FAR * This,
            /* [in] */ LPCRECT pRect);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsPageDirty )( 
            IPropertyPage2 __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Apply )( 
            IPropertyPage2 __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Help )( 
            IPropertyPage2 __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszHelpDir);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *TranslateAccelerator )( 
            IPropertyPage2 __RPC_FAR * This,
            /* [in] */ MSG __RPC_FAR *pMsg);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EditProperty )( 
            IPropertyPage2 __RPC_FAR * This,
            /* [in] */ DISPID dispID);
        
        END_INTERFACE
    } IPropertyPage2Vtbl;

    interface IPropertyPage2
    {
        CONST_VTBL struct IPropertyPage2Vtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyPage2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyPage2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyPage2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyPage2_SetPageSite(This,pPageSite)	\
    (This)->lpVtbl -> SetPageSite(This,pPageSite)

#define IPropertyPage2_Activate(This,hWndParent,pRect,bModal)	\
    (This)->lpVtbl -> Activate(This,hWndParent,pRect,bModal)

#define IPropertyPage2_Deactivate(This)	\
    (This)->lpVtbl -> Deactivate(This)

#define IPropertyPage2_GetPageInfo(This,pPageInfo)	\
    (This)->lpVtbl -> GetPageInfo(This,pPageInfo)

#define IPropertyPage2_SetObjects(This,cObjects,ppUnk)	\
    (This)->lpVtbl -> SetObjects(This,cObjects,ppUnk)

#define IPropertyPage2_Show(This,nCmdShow)	\
    (This)->lpVtbl -> Show(This,nCmdShow)

#define IPropertyPage2_Move(This,pRect)	\
    (This)->lpVtbl -> Move(This,pRect)

#define IPropertyPage2_IsPageDirty(This)	\
    (This)->lpVtbl -> IsPageDirty(This)

#define IPropertyPage2_Apply(This)	\
    (This)->lpVtbl -> Apply(This)

#define IPropertyPage2_Help(This,pszHelpDir)	\
    (This)->lpVtbl -> Help(This,pszHelpDir)

#define IPropertyPage2_TranslateAccelerator(This,pMsg)	\
    (This)->lpVtbl -> TranslateAccelerator(This,pMsg)


#define IPropertyPage2_EditProperty(This,dispID)	\
    (This)->lpVtbl -> EditProperty(This,dispID)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyPage2_EditProperty_Proxy( 
    IPropertyPage2 __RPC_FAR * This,
    /* [in] */ DISPID dispID);


void __RPC_STUB IPropertyPage2_EditProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyPage2_INTERFACE_DEFINED__ */


#ifndef __IPropertyPageSite_INTERFACE_DEFINED__
#define __IPropertyPageSite_INTERFACE_DEFINED__

/* interface IPropertyPageSite */
/* [unique][uuid][object] */ 

typedef IPropertyPageSite __RPC_FAR *LPPROPERTYPAGESITE;

typedef 
enum tagPROPPAGESTATUS
    {	PROPPAGESTATUS_DIRTY	= 0x1,
	PROPPAGESTATUS_VALIDATE	= 0x2,
	PROPPAGESTATUS_CLEAN	= 0x4
    }	PROPPAGESTATUS;


EXTERN_C const IID IID_IPropertyPageSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B196B28C-BAB4-101A-B69C-00AA00341D07")
    IPropertyPageSite : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnStatusChange( 
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLocaleID( 
            /* [out] */ LCID __RPC_FAR *pLocaleID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPageContainer( 
            /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *ppUnk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TranslateAccelerator( 
            /* [in] */ MSG __RPC_FAR *pMsg) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyPageSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyPageSite __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyPageSite __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyPageSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnStatusChange )( 
            IPropertyPageSite __RPC_FAR * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetLocaleID )( 
            IPropertyPageSite __RPC_FAR * This,
            /* [out] */ LCID __RPC_FAR *pLocaleID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPageContainer )( 
            IPropertyPageSite __RPC_FAR * This,
            /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *ppUnk);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *TranslateAccelerator )( 
            IPropertyPageSite __RPC_FAR * This,
            /* [in] */ MSG __RPC_FAR *pMsg);
        
        END_INTERFACE
    } IPropertyPageSiteVtbl;

    interface IPropertyPageSite
    {
        CONST_VTBL struct IPropertyPageSiteVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyPageSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyPageSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyPageSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyPageSite_OnStatusChange(This,dwFlags)	\
    (This)->lpVtbl -> OnStatusChange(This,dwFlags)

#define IPropertyPageSite_GetLocaleID(This,pLocaleID)	\
    (This)->lpVtbl -> GetLocaleID(This,pLocaleID)

#define IPropertyPageSite_GetPageContainer(This,ppUnk)	\
    (This)->lpVtbl -> GetPageContainer(This,ppUnk)

#define IPropertyPageSite_TranslateAccelerator(This,pMsg)	\
    (This)->lpVtbl -> TranslateAccelerator(This,pMsg)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyPageSite_OnStatusChange_Proxy( 
    IPropertyPageSite __RPC_FAR * This,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IPropertyPageSite_OnStatusChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPageSite_GetLocaleID_Proxy( 
    IPropertyPageSite __RPC_FAR * This,
    /* [out] */ LCID __RPC_FAR *pLocaleID);


void __RPC_STUB IPropertyPageSite_GetLocaleID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPageSite_GetPageContainer_Proxy( 
    IPropertyPageSite __RPC_FAR * This,
    /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *ppUnk);


void __RPC_STUB IPropertyPageSite_GetPageContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyPageSite_TranslateAccelerator_Proxy( 
    IPropertyPageSite __RPC_FAR * This,
    /* [in] */ MSG __RPC_FAR *pMsg);


void __RPC_STUB IPropertyPageSite_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyPageSite_INTERFACE_DEFINED__ */


#ifndef __IPropertyNotifySink_INTERFACE_DEFINED__
#define __IPropertyNotifySink_INTERFACE_DEFINED__

/* interface IPropertyNotifySink */
/* [unique][uuid][object] */ 

typedef IPropertyNotifySink __RPC_FAR *LPPROPERTYNOTIFYSINK;


EXTERN_C const IID IID_IPropertyNotifySink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9BFBBC02-EFF1-101A-84ED-00AA00341D07")
    IPropertyNotifySink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnChanged( 
            /* [in] */ DISPID dispID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnRequestEdit( 
            /* [in] */ DISPID dispID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyNotifySinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyNotifySink __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyNotifySink __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyNotifySink __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnChanged )( 
            IPropertyNotifySink __RPC_FAR * This,
            /* [in] */ DISPID dispID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnRequestEdit )( 
            IPropertyNotifySink __RPC_FAR * This,
            /* [in] */ DISPID dispID);
        
        END_INTERFACE
    } IPropertyNotifySinkVtbl;

    interface IPropertyNotifySink
    {
        CONST_VTBL struct IPropertyNotifySinkVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyNotifySink_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyNotifySink_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyNotifySink_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyNotifySink_OnChanged(This,dispID)	\
    (This)->lpVtbl -> OnChanged(This,dispID)

#define IPropertyNotifySink_OnRequestEdit(This,dispID)	\
    (This)->lpVtbl -> OnRequestEdit(This,dispID)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyNotifySink_OnChanged_Proxy( 
    IPropertyNotifySink __RPC_FAR * This,
    /* [in] */ DISPID dispID);


void __RPC_STUB IPropertyNotifySink_OnChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyNotifySink_OnRequestEdit_Proxy( 
    IPropertyNotifySink __RPC_FAR * This,
    /* [in] */ DISPID dispID);


void __RPC_STUB IPropertyNotifySink_OnRequestEdit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyNotifySink_INTERFACE_DEFINED__ */


#ifndef __ISpecifyPropertyPages_INTERFACE_DEFINED__
#define __ISpecifyPropertyPages_INTERFACE_DEFINED__

/* interface ISpecifyPropertyPages */
/* [unique][uuid][object] */ 

typedef ISpecifyPropertyPages __RPC_FAR *LPSPECIFYPROPERTYPAGES;

typedef struct tagCAUUID
    {
    ULONG cElems;
    /* [size_is] */ GUID __RPC_FAR *pElems;
    }	CAUUID;

typedef struct tagCAUUID __RPC_FAR *LPCAUUID;


EXTERN_C const IID IID_ISpecifyPropertyPages;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B196B28B-BAB4-101A-B69C-00AA00341D07")
    ISpecifyPropertyPages : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPages( 
            /* [out] */ CAUUID __RPC_FAR *pPages) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISpecifyPropertyPagesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISpecifyPropertyPages __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISpecifyPropertyPages __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISpecifyPropertyPages __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPages )( 
            ISpecifyPropertyPages __RPC_FAR * This,
            /* [out] */ CAUUID __RPC_FAR *pPages);
        
        END_INTERFACE
    } ISpecifyPropertyPagesVtbl;

    interface ISpecifyPropertyPages
    {
        CONST_VTBL struct ISpecifyPropertyPagesVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISpecifyPropertyPages_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISpecifyPropertyPages_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISpecifyPropertyPages_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISpecifyPropertyPages_GetPages(This,pPages)	\
    (This)->lpVtbl -> GetPages(This,pPages)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ISpecifyPropertyPages_GetPages_Proxy( 
    ISpecifyPropertyPages __RPC_FAR * This,
    /* [out] */ CAUUID __RPC_FAR *pPages);


void __RPC_STUB ISpecifyPropertyPages_GetPages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISpecifyPropertyPages_INTERFACE_DEFINED__ */


#ifndef __IPersistMemory_INTERFACE_DEFINED__
#define __IPersistMemory_INTERFACE_DEFINED__

/* interface IPersistMemory */
/* [unique][uuid][object] */ 

typedef IPersistMemory __RPC_FAR *LPPERSISTMEMORY;


EXTERN_C const IID IID_IPersistMemory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BD1AE5E0-A6AE-11CE-BD37-504200C10000")
    IPersistMemory : public IPersist
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsDirty( void) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Load( 
            /* [size_is][in] */ LPVOID pMem,
            /* [in] */ ULONG cbSize) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [size_is][in] */ LPVOID pMem,
            /* [in] */ BOOL fClearDirty,
            /* [in] */ ULONG cbSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSizeMax( 
            /* [out] */ ULONG __RPC_FAR *pCbSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InitNew( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPersistMemoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPersistMemory __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPersistMemory __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPersistMemory __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassID )( 
            IPersistMemory __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClassID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsDirty )( 
            IPersistMemory __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Load )( 
            IPersistMemory __RPC_FAR * This,
            /* [size_is][in] */ LPVOID pMem,
            /* [in] */ ULONG cbSize);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Save )( 
            IPersistMemory __RPC_FAR * This,
            /* [size_is][in] */ LPVOID pMem,
            /* [in] */ BOOL fClearDirty,
            /* [in] */ ULONG cbSize);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSizeMax )( 
            IPersistMemory __RPC_FAR * This,
            /* [out] */ ULONG __RPC_FAR *pCbSize);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InitNew )( 
            IPersistMemory __RPC_FAR * This);
        
        END_INTERFACE
    } IPersistMemoryVtbl;

    interface IPersistMemory
    {
        CONST_VTBL struct IPersistMemoryVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPersistMemory_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPersistMemory_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPersistMemory_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPersistMemory_GetClassID(This,pClassID)	\
    (This)->lpVtbl -> GetClassID(This,pClassID)


#define IPersistMemory_IsDirty(This)	\
    (This)->lpVtbl -> IsDirty(This)

#define IPersistMemory_Load(This,pMem,cbSize)	\
    (This)->lpVtbl -> Load(This,pMem,cbSize)

#define IPersistMemory_Save(This,pMem,fClearDirty,cbSize)	\
    (This)->lpVtbl -> Save(This,pMem,fClearDirty,cbSize)

#define IPersistMemory_GetSizeMax(This,pCbSize)	\
    (This)->lpVtbl -> GetSizeMax(This,pCbSize)

#define IPersistMemory_InitNew(This)	\
    (This)->lpVtbl -> InitNew(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPersistMemory_IsDirty_Proxy( 
    IPersistMemory __RPC_FAR * This);


void __RPC_STUB IPersistMemory_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPersistMemory_RemoteLoad_Proxy( 
    IPersistMemory __RPC_FAR * This,
    /* [size_is][in] */ BYTE __RPC_FAR *pMem,
    /* [in] */ ULONG cbSize);


void __RPC_STUB IPersistMemory_RemoteLoad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPersistMemory_RemoteSave_Proxy( 
    IPersistMemory __RPC_FAR * This,
    /* [size_is][in] */ BYTE __RPC_FAR *pMem,
    /* [in] */ BOOL fClearDirty,
    /* [in] */ ULONG cbSize);


void __RPC_STUB IPersistMemory_RemoteSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistMemory_GetSizeMax_Proxy( 
    IPersistMemory __RPC_FAR * This,
    /* [out] */ ULONG __RPC_FAR *pCbSize);


void __RPC_STUB IPersistMemory_GetSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistMemory_InitNew_Proxy( 
    IPersistMemory __RPC_FAR * This);


void __RPC_STUB IPersistMemory_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPersistMemory_INTERFACE_DEFINED__ */


#ifndef __IPersistStreamInit_INTERFACE_DEFINED__
#define __IPersistStreamInit_INTERFACE_DEFINED__

/* interface IPersistStreamInit */
/* [unique][uuid][object] */ 

typedef IPersistStreamInit __RPC_FAR *LPPERSISTSTREAMINIT;


EXTERN_C const IID IID_IPersistStreamInit;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7FD52380-4E07-101B-AE2D-08002B2EC713")
    IPersistStreamInit : public IPersist
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsDirty( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Load( 
            /* [in] */ LPSTREAM pStm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( 
            /* [in] */ LPSTREAM pStm,
            /* [in] */ BOOL fClearDirty) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSizeMax( 
            /* [out] */ ULARGE_INTEGER __RPC_FAR *pCbSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InitNew( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPersistStreamInitVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPersistStreamInit __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPersistStreamInit __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPersistStreamInit __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassID )( 
            IPersistStreamInit __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClassID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsDirty )( 
            IPersistStreamInit __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Load )( 
            IPersistStreamInit __RPC_FAR * This,
            /* [in] */ LPSTREAM pStm);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Save )( 
            IPersistStreamInit __RPC_FAR * This,
            /* [in] */ LPSTREAM pStm,
            /* [in] */ BOOL fClearDirty);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSizeMax )( 
            IPersistStreamInit __RPC_FAR * This,
            /* [out] */ ULARGE_INTEGER __RPC_FAR *pCbSize);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InitNew )( 
            IPersistStreamInit __RPC_FAR * This);
        
        END_INTERFACE
    } IPersistStreamInitVtbl;

    interface IPersistStreamInit
    {
        CONST_VTBL struct IPersistStreamInitVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPersistStreamInit_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPersistStreamInit_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPersistStreamInit_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPersistStreamInit_GetClassID(This,pClassID)	\
    (This)->lpVtbl -> GetClassID(This,pClassID)


#define IPersistStreamInit_IsDirty(This)	\
    (This)->lpVtbl -> IsDirty(This)

#define IPersistStreamInit_Load(This,pStm)	\
    (This)->lpVtbl -> Load(This,pStm)

#define IPersistStreamInit_Save(This,pStm,fClearDirty)	\
    (This)->lpVtbl -> Save(This,pStm,fClearDirty)

#define IPersistStreamInit_GetSizeMax(This,pCbSize)	\
    (This)->lpVtbl -> GetSizeMax(This,pCbSize)

#define IPersistStreamInit_InitNew(This)	\
    (This)->lpVtbl -> InitNew(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPersistStreamInit_IsDirty_Proxy( 
    IPersistStreamInit __RPC_FAR * This);


void __RPC_STUB IPersistStreamInit_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistStreamInit_Load_Proxy( 
    IPersistStreamInit __RPC_FAR * This,
    /* [in] */ LPSTREAM pStm);


void __RPC_STUB IPersistStreamInit_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistStreamInit_Save_Proxy( 
    IPersistStreamInit __RPC_FAR * This,
    /* [in] */ LPSTREAM pStm,
    /* [in] */ BOOL fClearDirty);


void __RPC_STUB IPersistStreamInit_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistStreamInit_GetSizeMax_Proxy( 
    IPersistStreamInit __RPC_FAR * This,
    /* [out] */ ULARGE_INTEGER __RPC_FAR *pCbSize);


void __RPC_STUB IPersistStreamInit_GetSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistStreamInit_InitNew_Proxy( 
    IPersistStreamInit __RPC_FAR * This);


void __RPC_STUB IPersistStreamInit_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPersistStreamInit_INTERFACE_DEFINED__ */


#ifndef __IPersistPropertyBag_INTERFACE_DEFINED__
#define __IPersistPropertyBag_INTERFACE_DEFINED__

/* interface IPersistPropertyBag */
/* [unique][uuid][object] */ 

typedef IPersistPropertyBag __RPC_FAR *LPPERSISTPROPERTYBAG;


EXTERN_C const IID IID_IPersistPropertyBag;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37D84F60-42CB-11CE-8135-00AA004BB851")
    IPersistPropertyBag : public IPersist
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InitNew( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Load( 
            /* [in] */ IPropertyBag __RPC_FAR *pPropBag,
            /* [in] */ IErrorLog __RPC_FAR *pErrorLog) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( 
            /* [in] */ IPropertyBag __RPC_FAR *pPropBag,
            /* [in] */ BOOL fClearDirty,
            /* [in] */ BOOL fSaveAllProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPersistPropertyBagVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPersistPropertyBag __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPersistPropertyBag __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPersistPropertyBag __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassID )( 
            IPersistPropertyBag __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClassID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InitNew )( 
            IPersistPropertyBag __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Load )( 
            IPersistPropertyBag __RPC_FAR * This,
            /* [in] */ IPropertyBag __RPC_FAR *pPropBag,
            /* [in] */ IErrorLog __RPC_FAR *pErrorLog);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Save )( 
            IPersistPropertyBag __RPC_FAR * This,
            /* [in] */ IPropertyBag __RPC_FAR *pPropBag,
            /* [in] */ BOOL fClearDirty,
            /* [in] */ BOOL fSaveAllProperties);
        
        END_INTERFACE
    } IPersistPropertyBagVtbl;

    interface IPersistPropertyBag
    {
        CONST_VTBL struct IPersistPropertyBagVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPersistPropertyBag_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPersistPropertyBag_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPersistPropertyBag_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPersistPropertyBag_GetClassID(This,pClassID)	\
    (This)->lpVtbl -> GetClassID(This,pClassID)


#define IPersistPropertyBag_InitNew(This)	\
    (This)->lpVtbl -> InitNew(This)

#define IPersistPropertyBag_Load(This,pPropBag,pErrorLog)	\
    (This)->lpVtbl -> Load(This,pPropBag,pErrorLog)

#define IPersistPropertyBag_Save(This,pPropBag,fClearDirty,fSaveAllProperties)	\
    (This)->lpVtbl -> Save(This,pPropBag,fClearDirty,fSaveAllProperties)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPersistPropertyBag_InitNew_Proxy( 
    IPersistPropertyBag __RPC_FAR * This);


void __RPC_STUB IPersistPropertyBag_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistPropertyBag_Load_Proxy( 
    IPersistPropertyBag __RPC_FAR * This,
    /* [in] */ IPropertyBag __RPC_FAR *pPropBag,
    /* [in] */ IErrorLog __RPC_FAR *pErrorLog);


void __RPC_STUB IPersistPropertyBag_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistPropertyBag_Save_Proxy( 
    IPersistPropertyBag __RPC_FAR * This,
    /* [in] */ IPropertyBag __RPC_FAR *pPropBag,
    /* [in] */ BOOL fClearDirty,
    /* [in] */ BOOL fSaveAllProperties);


void __RPC_STUB IPersistPropertyBag_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPersistPropertyBag_INTERFACE_DEFINED__ */


#ifndef __ISimpleFrameSite_INTERFACE_DEFINED__
#define __ISimpleFrameSite_INTERFACE_DEFINED__

/* interface ISimpleFrameSite */
/* [unique][uuid][object] */ 

typedef ISimpleFrameSite __RPC_FAR *LPSIMPLEFRAMESITE;


EXTERN_C const IID IID_ISimpleFrameSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("742B0E01-14E6-101B-914E-00AA00300CAB")
    ISimpleFrameSite : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE PreMessageFilter( 
            /* [in] */ HWND hWnd,
            /* [in] */ UINT msg,
            /* [in] */ WPARAM wp,
            /* [in] */ LPARAM lp,
            /* [out] */ LRESULT __RPC_FAR *plResult,
            /* [out] */ DWORD __RPC_FAR *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PostMessageFilter( 
            /* [in] */ HWND hWnd,
            /* [in] */ UINT msg,
            /* [in] */ WPARAM wp,
            /* [in] */ LPARAM lp,
            /* [out] */ LRESULT __RPC_FAR *plResult,
            /* [in] */ DWORD dwCookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISimpleFrameSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISimpleFrameSite __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISimpleFrameSite __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISimpleFrameSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *PreMessageFilter )( 
            ISimpleFrameSite __RPC_FAR * This,
            /* [in] */ HWND hWnd,
            /* [in] */ UINT msg,
            /* [in] */ WPARAM wp,
            /* [in] */ LPARAM lp,
            /* [out] */ LRESULT __RPC_FAR *plResult,
            /* [out] */ DWORD __RPC_FAR *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *PostMessageFilter )( 
            ISimpleFrameSite __RPC_FAR * This,
            /* [in] */ HWND hWnd,
            /* [in] */ UINT msg,
            /* [in] */ WPARAM wp,
            /* [in] */ LPARAM lp,
            /* [out] */ LRESULT __RPC_FAR *plResult,
            /* [in] */ DWORD dwCookie);
        
        END_INTERFACE
    } ISimpleFrameSiteVtbl;

    interface ISimpleFrameSite
    {
        CONST_VTBL struct ISimpleFrameSiteVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISimpleFrameSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISimpleFrameSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISimpleFrameSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISimpleFrameSite_PreMessageFilter(This,hWnd,msg,wp,lp,plResult,pdwCookie)	\
    (This)->lpVtbl -> PreMessageFilter(This,hWnd,msg,wp,lp,plResult,pdwCookie)

#define ISimpleFrameSite_PostMessageFilter(This,hWnd,msg,wp,lp,plResult,dwCookie)	\
    (This)->lpVtbl -> PostMessageFilter(This,hWnd,msg,wp,lp,plResult,dwCookie)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ISimpleFrameSite_PreMessageFilter_Proxy( 
    ISimpleFrameSite __RPC_FAR * This,
    /* [in] */ HWND hWnd,
    /* [in] */ UINT msg,
    /* [in] */ WPARAM wp,
    /* [in] */ LPARAM lp,
    /* [out] */ LRESULT __RPC_FAR *plResult,
    /* [out] */ DWORD __RPC_FAR *pdwCookie);


void __RPC_STUB ISimpleFrameSite_PreMessageFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ISimpleFrameSite_PostMessageFilter_Proxy( 
    ISimpleFrameSite __RPC_FAR * This,
    /* [in] */ HWND hWnd,
    /* [in] */ UINT msg,
    /* [in] */ WPARAM wp,
    /* [in] */ LPARAM lp,
    /* [out] */ LRESULT __RPC_FAR *plResult,
    /* [in] */ DWORD dwCookie);


void __RPC_STUB ISimpleFrameSite_PostMessageFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISimpleFrameSite_INTERFACE_DEFINED__ */


#ifndef __IFont_INTERFACE_DEFINED__
#define __IFont_INTERFACE_DEFINED__

/* interface IFont */
/* [unique][uuid][object] */ 

typedef IFont __RPC_FAR *LPFONT;

#if defined(_WIN32) && !defined(OLE2ANSI)
typedef TEXTMETRICW TEXTMETRICOLE;

#else
typedef TEXTMETRIC TEXTMETRICOLE;
#endif
typedef TEXTMETRICOLE __RPC_FAR *LPTEXTMETRICOLE;


EXTERN_C const IID IID_IFont;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BEF6E002-A874-101A-8BBA-00AA00300CAB")
    IFont : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE get_Name( 
            /* [out] */ BSTR __RPC_FAR *pName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Size( 
            /* [out] */ CY __RPC_FAR *pSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE put_Size( 
            /* [in] */ CY size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Bold( 
            /* [out] */ BOOL __RPC_FAR *pBold) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE put_Bold( 
            /* [in] */ BOOL bold) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Italic( 
            /* [out] */ BOOL __RPC_FAR *pItalic) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE put_Italic( 
            /* [in] */ BOOL italic) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Underline( 
            /* [out] */ BOOL __RPC_FAR *pUnderline) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE put_Underline( 
            /* [in] */ BOOL underline) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Strikethrough( 
            /* [out] */ BOOL __RPC_FAR *pStrikethrough) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE put_Strikethrough( 
            /* [in] */ BOOL strikethrough) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Weight( 
            /* [out] */ SHORT __RPC_FAR *pWeight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE put_Weight( 
            /* [in] */ SHORT weight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Charset( 
            /* [out] */ SHORT __RPC_FAR *pCharset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE put_Charset( 
            /* [in] */ SHORT charset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_hFont( 
            /* [out] */ HFONT __RPC_FAR *phFont) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IFont __RPC_FAR *__RPC_FAR *ppFont) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsEqual( 
            /* [in] */ IFont __RPC_FAR *pFontOther) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRatio( 
            /* [in] */ LONG cyLogical,
            /* [in] */ LONG cyHimetric) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE QueryTextMetrics( 
            /* [out] */ TEXTMETRICOLE __RPC_FAR *pTM) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddRefHfont( 
            /* [in] */ HFONT hFont) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReleaseHfont( 
            /* [in] */ HFONT hFont) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetHdc( 
            /* [in] */ HDC hDC) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFontVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IFont __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IFont __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IFont __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Name )( 
            IFont __RPC_FAR * This,
            /* [out] */ BSTR __RPC_FAR *pName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Name )( 
            IFont __RPC_FAR * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Size )( 
            IFont __RPC_FAR * This,
            /* [out] */ CY __RPC_FAR *pSize);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Size )( 
            IFont __RPC_FAR * This,
            /* [in] */ CY size);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Bold )( 
            IFont __RPC_FAR * This,
            /* [out] */ BOOL __RPC_FAR *pBold);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Bold )( 
            IFont __RPC_FAR * This,
            /* [in] */ BOOL bold);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Italic )( 
            IFont __RPC_FAR * This,
            /* [out] */ BOOL __RPC_FAR *pItalic);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Italic )( 
            IFont __RPC_FAR * This,
            /* [in] */ BOOL italic);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Underline )( 
            IFont __RPC_FAR * This,
            /* [out] */ BOOL __RPC_FAR *pUnderline);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Underline )( 
            IFont __RPC_FAR * This,
            /* [in] */ BOOL underline);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Strikethrough )( 
            IFont __RPC_FAR * This,
            /* [out] */ BOOL __RPC_FAR *pStrikethrough);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Strikethrough )( 
            IFont __RPC_FAR * This,
            /* [in] */ BOOL strikethrough);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Weight )( 
            IFont __RPC_FAR * This,
            /* [out] */ SHORT __RPC_FAR *pWeight);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Weight )( 
            IFont __RPC_FAR * This,
            /* [in] */ SHORT weight);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Charset )( 
            IFont __RPC_FAR * This,
            /* [out] */ SHORT __RPC_FAR *pCharset);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Charset )( 
            IFont __RPC_FAR * This,
            /* [in] */ SHORT charset);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_hFont )( 
            IFont __RPC_FAR * This,
            /* [out] */ HFONT __RPC_FAR *phFont);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IFont __RPC_FAR * This,
            /* [out] */ IFont __RPC_FAR *__RPC_FAR *ppFont);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsEqual )( 
            IFont __RPC_FAR * This,
            /* [in] */ IFont __RPC_FAR *pFontOther);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetRatio )( 
            IFont __RPC_FAR * This,
            /* [in] */ LONG cyLogical,
            /* [in] */ LONG cyHimetric);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryTextMetrics )( 
            IFont __RPC_FAR * This,
            /* [out] */ TEXTMETRICOLE __RPC_FAR *pTM);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *AddRefHfont )( 
            IFont __RPC_FAR * This,
            /* [in] */ HFONT hFont);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ReleaseHfont )( 
            IFont __RPC_FAR * This,
            /* [in] */ HFONT hFont);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetHdc )( 
            IFont __RPC_FAR * This,
            /* [in] */ HDC hDC);
        
        END_INTERFACE
    } IFontVtbl;

    interface IFont
    {
        CONST_VTBL struct IFontVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFont_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IFont_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IFont_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IFont_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define IFont_put_Name(This,name)	\
    (This)->lpVtbl -> put_Name(This,name)

#define IFont_get_Size(This,pSize)	\
    (This)->lpVtbl -> get_Size(This,pSize)

#define IFont_put_Size(This,size)	\
    (This)->lpVtbl -> put_Size(This,size)

#define IFont_get_Bold(This,pBold)	\
    (This)->lpVtbl -> get_Bold(This,pBold)

#define IFont_put_Bold(This,bold)	\
    (This)->lpVtbl -> put_Bold(This,bold)

#define IFont_get_Italic(This,pItalic)	\
    (This)->lpVtbl -> get_Italic(This,pItalic)

#define IFont_put_Italic(This,italic)	\
    (This)->lpVtbl -> put_Italic(This,italic)

#define IFont_get_Underline(This,pUnderline)	\
    (This)->lpVtbl -> get_Underline(This,pUnderline)

#define IFont_put_Underline(This,underline)	\
    (This)->lpVtbl -> put_Underline(This,underline)

#define IFont_get_Strikethrough(This,pStrikethrough)	\
    (This)->lpVtbl -> get_Strikethrough(This,pStrikethrough)

#define IFont_put_Strikethrough(This,strikethrough)	\
    (This)->lpVtbl -> put_Strikethrough(This,strikethrough)

#define IFont_get_Weight(This,pWeight)	\
    (This)->lpVtbl -> get_Weight(This,pWeight)

#define IFont_put_Weight(This,weight)	\
    (This)->lpVtbl -> put_Weight(This,weight)

#define IFont_get_Charset(This,pCharset)	\
    (This)->lpVtbl -> get_Charset(This,pCharset)

#define IFont_put_Charset(This,charset)	\
    (This)->lpVtbl -> put_Charset(This,charset)

#define IFont_get_hFont(This,phFont)	\
    (This)->lpVtbl -> get_hFont(This,phFont)

#define IFont_Clone(This,ppFont)	\
    (This)->lpVtbl -> Clone(This,ppFont)

#define IFont_IsEqual(This,pFontOther)	\
    (This)->lpVtbl -> IsEqual(This,pFontOther)

#define IFont_SetRatio(This,cyLogical,cyHimetric)	\
    (This)->lpVtbl -> SetRatio(This,cyLogical,cyHimetric)

#define IFont_QueryTextMetrics(This,pTM)	\
    (This)->lpVtbl -> QueryTextMetrics(This,pTM)

#define IFont_AddRefHfont(This,hFont)	\
    (This)->lpVtbl -> AddRefHfont(This,hFont)

#define IFont_ReleaseHfont(This,hFont)	\
    (This)->lpVtbl -> ReleaseHfont(This,hFont)

#define IFont_SetHdc(This,hDC)	\
    (This)->lpVtbl -> SetHdc(This,hDC)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IFont_get_Name_Proxy( 
    IFont __RPC_FAR * This,
    /* [out] */ BSTR __RPC_FAR *pName);


void __RPC_STUB IFont_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_put_Name_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ BSTR name);


void __RPC_STUB IFont_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_get_Size_Proxy( 
    IFont __RPC_FAR * This,
    /* [out] */ CY __RPC_FAR *pSize);


void __RPC_STUB IFont_get_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_put_Size_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ CY size);


void __RPC_STUB IFont_put_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_get_Bold_Proxy( 
    IFont __RPC_FAR * This,
    /* [out] */ BOOL __RPC_FAR *pBold);


void __RPC_STUB IFont_get_Bold_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_put_Bold_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ BOOL bold);


void __RPC_STUB IFont_put_Bold_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_get_Italic_Proxy( 
    IFont __RPC_FAR * This,
    /* [out] */ BOOL __RPC_FAR *pItalic);


void __RPC_STUB IFont_get_Italic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_put_Italic_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ BOOL italic);


void __RPC_STUB IFont_put_Italic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_get_Underline_Proxy( 
    IFont __RPC_FAR * This,
    /* [out] */ BOOL __RPC_FAR *pUnderline);


void __RPC_STUB IFont_get_Underline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_put_Underline_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ BOOL underline);


void __RPC_STUB IFont_put_Underline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_get_Strikethrough_Proxy( 
    IFont __RPC_FAR * This,
    /* [out] */ BOOL __RPC_FAR *pStrikethrough);


void __RPC_STUB IFont_get_Strikethrough_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_put_Strikethrough_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ BOOL strikethrough);


void __RPC_STUB IFont_put_Strikethrough_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_get_Weight_Proxy( 
    IFont __RPC_FAR * This,
    /* [out] */ SHORT __RPC_FAR *pWeight);


void __RPC_STUB IFont_get_Weight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_put_Weight_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ SHORT weight);


void __RPC_STUB IFont_put_Weight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_get_Charset_Proxy( 
    IFont __RPC_FAR * This,
    /* [out] */ SHORT __RPC_FAR *pCharset);


void __RPC_STUB IFont_get_Charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_put_Charset_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ SHORT charset);


void __RPC_STUB IFont_put_Charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_get_hFont_Proxy( 
    IFont __RPC_FAR * This,
    /* [out] */ HFONT __RPC_FAR *phFont);


void __RPC_STUB IFont_get_hFont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_Clone_Proxy( 
    IFont __RPC_FAR * This,
    /* [out] */ IFont __RPC_FAR *__RPC_FAR *ppFont);


void __RPC_STUB IFont_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_IsEqual_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ IFont __RPC_FAR *pFontOther);


void __RPC_STUB IFont_IsEqual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_SetRatio_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ LONG cyLogical,
    /* [in] */ LONG cyHimetric);


void __RPC_STUB IFont_SetRatio_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_QueryTextMetrics_Proxy( 
    IFont __RPC_FAR * This,
    /* [out] */ TEXTMETRICOLE __RPC_FAR *pTM);


void __RPC_STUB IFont_QueryTextMetrics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_AddRefHfont_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ HFONT hFont);


void __RPC_STUB IFont_AddRefHfont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_ReleaseHfont_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ HFONT hFont);


void __RPC_STUB IFont_ReleaseHfont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IFont_SetHdc_Proxy( 
    IFont __RPC_FAR * This,
    /* [in] */ HDC hDC);


void __RPC_STUB IFont_SetHdc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IFont_INTERFACE_DEFINED__ */


#ifndef __IPicture_INTERFACE_DEFINED__
#define __IPicture_INTERFACE_DEFINED__

/* interface IPicture */
/* [unique][uuid][object] */ 

typedef IPicture __RPC_FAR *LPPICTURE;

typedef 
enum tagPictureAttributes
    {	PICTURE_SCALABLE	= 0x1,
	PICTURE_TRANSPARENT	= 0x2
    }	PICTUREATTRIBUTES;

typedef UINT OLE_HANDLE;

typedef LONG OLE_XPOS_HIMETRIC;

typedef LONG OLE_YPOS_HIMETRIC;

typedef LONG OLE_XSIZE_HIMETRIC;

typedef LONG OLE_YSIZE_HIMETRIC;


EXTERN_C const IID IID_IPicture;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7BF80980-BF32-101A-8BBB-00AA00300CAB")
    IPicture : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [out] */ OLE_HANDLE __RPC_FAR *pHandle) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_hPal( 
            /* [out] */ OLE_HANDLE __RPC_FAR *phPal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Type( 
            /* [out] */ SHORT __RPC_FAR *pType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Width( 
            /* [out] */ OLE_XSIZE_HIMETRIC __RPC_FAR *pWidth) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Height( 
            /* [out] */ OLE_YSIZE_HIMETRIC __RPC_FAR *pHeight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Render( 
            /* [in] */ HDC hDC,
            /* [in] */ LONG x,
            /* [in] */ LONG y,
            /* [in] */ LONG cx,
            /* [in] */ LONG cy,
            /* [in] */ OLE_XPOS_HIMETRIC xSrc,
            /* [in] */ OLE_YPOS_HIMETRIC ySrc,
            /* [in] */ OLE_XSIZE_HIMETRIC cxSrc,
            /* [in] */ OLE_YSIZE_HIMETRIC cySrc,
            /* [in] */ LPCRECT pRcWBounds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE set_hPal( 
            /* [in] */ OLE_HANDLE hPal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_CurDC( 
            /* [out] */ HDC __RPC_FAR *phDC) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SelectPicture( 
            /* [in] */ HDC hDCIn,
            /* [out] */ HDC __RPC_FAR *phDCOut,
            /* [out] */ OLE_HANDLE __RPC_FAR *phBmpOut) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_KeepOriginalFormat( 
            /* [out] */ BOOL __RPC_FAR *pKeep) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE put_KeepOriginalFormat( 
            /* [in] */ BOOL keep) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PictureChanged( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SaveAsFile( 
            /* [in] */ LPSTREAM pStream,
            /* [in] */ BOOL fSaveMemCopy,
            /* [out] */ LONG __RPC_FAR *pCbSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [out] */ DWORD __RPC_FAR *pDwAttr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPictureVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPicture __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPicture __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPicture __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Handle )( 
            IPicture __RPC_FAR * This,
            /* [out] */ OLE_HANDLE __RPC_FAR *pHandle);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_hPal )( 
            IPicture __RPC_FAR * This,
            /* [out] */ OLE_HANDLE __RPC_FAR *phPal);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Type )( 
            IPicture __RPC_FAR * This,
            /* [out] */ SHORT __RPC_FAR *pType);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Width )( 
            IPicture __RPC_FAR * This,
            /* [out] */ OLE_XSIZE_HIMETRIC __RPC_FAR *pWidth);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Height )( 
            IPicture __RPC_FAR * This,
            /* [out] */ OLE_YSIZE_HIMETRIC __RPC_FAR *pHeight);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Render )( 
            IPicture __RPC_FAR * This,
            /* [in] */ HDC hDC,
            /* [in] */ LONG x,
            /* [in] */ LONG y,
            /* [in] */ LONG cx,
            /* [in] */ LONG cy,
            /* [in] */ OLE_XPOS_HIMETRIC xSrc,
            /* [in] */ OLE_YPOS_HIMETRIC ySrc,
            /* [in] */ OLE_XSIZE_HIMETRIC cxSrc,
            /* [in] */ OLE_YSIZE_HIMETRIC cySrc,
            /* [in] */ LPCRECT pRcWBounds);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *set_hPal )( 
            IPicture __RPC_FAR * This,
            /* [in] */ OLE_HANDLE hPal);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_CurDC )( 
            IPicture __RPC_FAR * This,
            /* [out] */ HDC __RPC_FAR *phDC);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SelectPicture )( 
            IPicture __RPC_FAR * This,
            /* [in] */ HDC hDCIn,
            /* [out] */ HDC __RPC_FAR *phDCOut,
            /* [out] */ OLE_HANDLE __RPC_FAR *phBmpOut);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_KeepOriginalFormat )( 
            IPicture __RPC_FAR * This,
            /* [out] */ BOOL __RPC_FAR *pKeep);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_KeepOriginalFormat )( 
            IPicture __RPC_FAR * This,
            /* [in] */ BOOL keep);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *PictureChanged )( 
            IPicture __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SaveAsFile )( 
            IPicture __RPC_FAR * This,
            /* [in] */ LPSTREAM pStream,
            /* [in] */ BOOL fSaveMemCopy,
            /* [out] */ LONG __RPC_FAR *pCbSize);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Attributes )( 
            IPicture __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pDwAttr);
        
        END_INTERFACE
    } IPictureVtbl;

    interface IPicture
    {
        CONST_VTBL struct IPictureVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPicture_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPicture_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPicture_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPicture_get_Handle(This,pHandle)	\
    (This)->lpVtbl -> get_Handle(This,pHandle)

#define IPicture_get_hPal(This,phPal)	\
    (This)->lpVtbl -> get_hPal(This,phPal)

#define IPicture_get_Type(This,pType)	\
    (This)->lpVtbl -> get_Type(This,pType)

#define IPicture_get_Width(This,pWidth)	\
    (This)->lpVtbl -> get_Width(This,pWidth)

#define IPicture_get_Height(This,pHeight)	\
    (This)->lpVtbl -> get_Height(This,pHeight)

#define IPicture_Render(This,hDC,x,y,cx,cy,xSrc,ySrc,cxSrc,cySrc,pRcWBounds)	\
    (This)->lpVtbl -> Render(This,hDC,x,y,cx,cy,xSrc,ySrc,cxSrc,cySrc,pRcWBounds)

#define IPicture_set_hPal(This,hPal)	\
    (This)->lpVtbl -> set_hPal(This,hPal)

#define IPicture_get_CurDC(This,phDC)	\
    (This)->lpVtbl -> get_CurDC(This,phDC)

#define IPicture_SelectPicture(This,hDCIn,phDCOut,phBmpOut)	\
    (This)->lpVtbl -> SelectPicture(This,hDCIn,phDCOut,phBmpOut)

#define IPicture_get_KeepOriginalFormat(This,pKeep)	\
    (This)->lpVtbl -> get_KeepOriginalFormat(This,pKeep)

#define IPicture_put_KeepOriginalFormat(This,keep)	\
    (This)->lpVtbl -> put_KeepOriginalFormat(This,keep)

#define IPicture_PictureChanged(This)	\
    (This)->lpVtbl -> PictureChanged(This)

#define IPicture_SaveAsFile(This,pStream,fSaveMemCopy,pCbSize)	\
    (This)->lpVtbl -> SaveAsFile(This,pStream,fSaveMemCopy,pCbSize)

#define IPicture_get_Attributes(This,pDwAttr)	\
    (This)->lpVtbl -> get_Attributes(This,pDwAttr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPicture_get_Handle_Proxy( 
    IPicture __RPC_FAR * This,
    /* [out] */ OLE_HANDLE __RPC_FAR *pHandle);


void __RPC_STUB IPicture_get_Handle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_get_hPal_Proxy( 
    IPicture __RPC_FAR * This,
    /* [out] */ OLE_HANDLE __RPC_FAR *phPal);


void __RPC_STUB IPicture_get_hPal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_get_Type_Proxy( 
    IPicture __RPC_FAR * This,
    /* [out] */ SHORT __RPC_FAR *pType);


void __RPC_STUB IPicture_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_get_Width_Proxy( 
    IPicture __RPC_FAR * This,
    /* [out] */ OLE_XSIZE_HIMETRIC __RPC_FAR *pWidth);


void __RPC_STUB IPicture_get_Width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_get_Height_Proxy( 
    IPicture __RPC_FAR * This,
    /* [out] */ OLE_YSIZE_HIMETRIC __RPC_FAR *pHeight);


void __RPC_STUB IPicture_get_Height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_Render_Proxy( 
    IPicture __RPC_FAR * This,
    /* [in] */ HDC hDC,
    /* [in] */ LONG x,
    /* [in] */ LONG y,
    /* [in] */ LONG cx,
    /* [in] */ LONG cy,
    /* [in] */ OLE_XPOS_HIMETRIC xSrc,
    /* [in] */ OLE_YPOS_HIMETRIC ySrc,
    /* [in] */ OLE_XSIZE_HIMETRIC cxSrc,
    /* [in] */ OLE_YSIZE_HIMETRIC cySrc,
    /* [in] */ LPCRECT pRcWBounds);


void __RPC_STUB IPicture_Render_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_set_hPal_Proxy( 
    IPicture __RPC_FAR * This,
    /* [in] */ OLE_HANDLE hPal);


void __RPC_STUB IPicture_set_hPal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_get_CurDC_Proxy( 
    IPicture __RPC_FAR * This,
    /* [out] */ HDC __RPC_FAR *phDC);


void __RPC_STUB IPicture_get_CurDC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_SelectPicture_Proxy( 
    IPicture __RPC_FAR * This,
    /* [in] */ HDC hDCIn,
    /* [out] */ HDC __RPC_FAR *phDCOut,
    /* [out] */ OLE_HANDLE __RPC_FAR *phBmpOut);


void __RPC_STUB IPicture_SelectPicture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_get_KeepOriginalFormat_Proxy( 
    IPicture __RPC_FAR * This,
    /* [out] */ BOOL __RPC_FAR *pKeep);


void __RPC_STUB IPicture_get_KeepOriginalFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_put_KeepOriginalFormat_Proxy( 
    IPicture __RPC_FAR * This,
    /* [in] */ BOOL keep);


void __RPC_STUB IPicture_put_KeepOriginalFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_PictureChanged_Proxy( 
    IPicture __RPC_FAR * This);


void __RPC_STUB IPicture_PictureChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_SaveAsFile_Proxy( 
    IPicture __RPC_FAR * This,
    /* [in] */ LPSTREAM pStream,
    /* [in] */ BOOL fSaveMemCopy,
    /* [out] */ LONG __RPC_FAR *pCbSize);


void __RPC_STUB IPicture_SaveAsFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPicture_get_Attributes_Proxy( 
    IPicture __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pDwAttr);


void __RPC_STUB IPicture_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPicture_INTERFACE_DEFINED__ */


#ifndef __IFontDisp_INTERFACE_DEFINED__
#define __IFontDisp_INTERFACE_DEFINED__

/* interface IFontDisp */
/* [unique][uuid][object] */ 

typedef IFontDisp __RPC_FAR *LPFONTDISP;


EXTERN_C const IID IID_IFontDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BEF6E003-A874-101A-8BBA-00AA00300CAB")
    IFontDisp : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IFontDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IFontDisp __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IFontDisp __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IFontDisp __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IFontDisp __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IFontDisp __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IFontDisp __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IFontDisp __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } IFontDispVtbl;

    interface IFontDisp
    {
        CONST_VTBL struct IFontDispVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFontDisp_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IFontDisp_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IFontDisp_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IFontDisp_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IFontDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IFontDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IFontDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFontDisp_INTERFACE_DEFINED__ */


#ifndef __IPictureDisp_INTERFACE_DEFINED__
#define __IPictureDisp_INTERFACE_DEFINED__

/* interface IPictureDisp */
/* [unique][uuid][object] */ 

typedef IPictureDisp __RPC_FAR *LPPICTUREDISP;


EXTERN_C const IID IID_IPictureDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7BF80981-BF32-101A-8BBB-00AA00300CAB")
    IPictureDisp : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IPictureDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPictureDisp __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPictureDisp __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPictureDisp __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IPictureDisp __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IPictureDisp __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IPictureDisp __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IPictureDisp __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } IPictureDispVtbl;

    interface IPictureDisp
    {
        CONST_VTBL struct IPictureDispVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPictureDisp_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPictureDisp_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPictureDisp_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPictureDisp_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IPictureDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IPictureDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IPictureDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPictureDisp_INTERFACE_DEFINED__ */


#ifndef __IAdviseSinkEx_INTERFACE_DEFINED__
#define __IAdviseSinkEx_INTERFACE_DEFINED__

/* interface IAdviseSinkEx */
/* [uuid][unique][object] */ 

typedef IAdviseSinkEx __RPC_FAR *LPADVISESINKEX;


EXTERN_C const IID IID_IAdviseSinkEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3AF24290-0C96-11CE-A0CF-00AA00600AB8")
    IAdviseSinkEx : public IAdviseSink
    {
    public:
        virtual /* [local] */ void STDMETHODCALLTYPE OnViewStatusChange( 
            /* [in] */ DWORD dwViewStatus) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAdviseSinkExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IAdviseSinkEx __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IAdviseSinkEx __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IAdviseSinkEx __RPC_FAR * This);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnDataChange )( 
            IAdviseSinkEx __RPC_FAR * This,
            /* [unique][in] */ FORMATETC __RPC_FAR *pFormatetc,
            /* [unique][in] */ STGMEDIUM __RPC_FAR *pStgmed);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnViewChange )( 
            IAdviseSinkEx __RPC_FAR * This,
            /* [in] */ DWORD dwAspect,
            /* [in] */ LONG lindex);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnRename )( 
            IAdviseSinkEx __RPC_FAR * This,
            /* [in] */ IMoniker __RPC_FAR *pmk);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnSave )( 
            IAdviseSinkEx __RPC_FAR * This);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnClose )( 
            IAdviseSinkEx __RPC_FAR * This);
        
        /* [local] */ void ( STDMETHODCALLTYPE __RPC_FAR *OnViewStatusChange )( 
            IAdviseSinkEx __RPC_FAR * This,
            /* [in] */ DWORD dwViewStatus);
        
        END_INTERFACE
    } IAdviseSinkExVtbl;

    interface IAdviseSinkEx
    {
        CONST_VTBL struct IAdviseSinkExVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAdviseSinkEx_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAdviseSinkEx_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAdviseSinkEx_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAdviseSinkEx_OnDataChange(This,pFormatetc,pStgmed)	\
    (This)->lpVtbl -> OnDataChange(This,pFormatetc,pStgmed)

#define IAdviseSinkEx_OnViewChange(This,dwAspect,lindex)	\
    (This)->lpVtbl -> OnViewChange(This,dwAspect,lindex)

#define IAdviseSinkEx_OnRename(This,pmk)	\
    (This)->lpVtbl -> OnRename(This,pmk)

#define IAdviseSinkEx_OnSave(This)	\
    (This)->lpVtbl -> OnSave(This)

#define IAdviseSinkEx_OnClose(This)	\
    (This)->lpVtbl -> OnClose(This)


#define IAdviseSinkEx_OnViewStatusChange(This,dwViewStatus)	\
    (This)->lpVtbl -> OnViewStatusChange(This,dwViewStatus)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [async][call_as] */ void STDMETHODCALLTYPE IAdviseSinkEx_RemoteOnViewStatusChange_Proxy( 
    IAdviseSinkEx __RPC_FAR * This,
    /* [in] */ DWORD dwViewStatus);


void __RPC_STUB IAdviseSinkEx_RemoteOnViewStatusChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAdviseSinkEx_INTERFACE_DEFINED__ */


#ifndef __IOleInPlaceObjectWindowless_INTERFACE_DEFINED__
#define __IOleInPlaceObjectWindowless_INTERFACE_DEFINED__

/* interface IOleInPlaceObjectWindowless */
/* [uuid][unique][object][local] */ 

typedef IOleInPlaceObjectWindowless __RPC_FAR *LPOLEINPLACEOBJECTWINDOWLESS;


EXTERN_C const IID IID_IOleInPlaceObjectWindowless;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1C2056CC-5EF4-101B-8BC8-00AA003E3B29")
    IOleInPlaceObjectWindowless : public IOleInPlaceObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnWindowMessage( 
            /* [in] */ UINT msg,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ LRESULT __RPC_FAR *plResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDropTarget( 
            /* [out] */ IDropTarget __RPC_FAR *__RPC_FAR *ppDropTarget) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleInPlaceObjectWindowlessVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleInPlaceObjectWindowless __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleInPlaceObjectWindowless __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleInPlaceObjectWindowless __RPC_FAR * This);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetWindow )( 
            IOleInPlaceObjectWindowless __RPC_FAR * This,
            /* [out] */ HWND __RPC_FAR *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ContextSensitiveHelp )( 
            IOleInPlaceObjectWindowless __RPC_FAR * This,
            /* [in] */ BOOL fEnterMode);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InPlaceDeactivate )( 
            IOleInPlaceObjectWindowless __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UIDeactivate )( 
            IOleInPlaceObjectWindowless __RPC_FAR * This);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetObjectRects )( 
            IOleInPlaceObjectWindowless __RPC_FAR * This,
            /* [in] */ LPCRECT lprcPosRect,
            /* [in] */ LPCRECT lprcClipRect);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ReactivateAndUndo )( 
            IOleInPlaceObjectWindowless __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnWindowMessage )( 
            IOleInPlaceObjectWindowless __RPC_FAR * This,
            /* [in] */ UINT msg,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ LRESULT __RPC_FAR *plResult);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDropTarget )( 
            IOleInPlaceObjectWindowless __RPC_FAR * This,
            /* [out] */ IDropTarget __RPC_FAR *__RPC_FAR *ppDropTarget);
        
        END_INTERFACE
    } IOleInPlaceObjectWindowlessVtbl;

    interface IOleInPlaceObjectWindowless
    {
        CONST_VTBL struct IOleInPlaceObjectWindowlessVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleInPlaceObjectWindowless_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleInPlaceObjectWindowless_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleInPlaceObjectWindowless_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleInPlaceObjectWindowless_GetWindow(This,phwnd)	\
    (This)->lpVtbl -> GetWindow(This,phwnd)

#define IOleInPlaceObjectWindowless_ContextSensitiveHelp(This,fEnterMode)	\
    (This)->lpVtbl -> ContextSensitiveHelp(This,fEnterMode)


#define IOleInPlaceObjectWindowless_InPlaceDeactivate(This)	\
    (This)->lpVtbl -> InPlaceDeactivate(This)

#define IOleInPlaceObjectWindowless_UIDeactivate(This)	\
    (This)->lpVtbl -> UIDeactivate(This)

#define IOleInPlaceObjectWindowless_SetObjectRects(This,lprcPosRect,lprcClipRect)	\
    (This)->lpVtbl -> SetObjectRects(This,lprcPosRect,lprcClipRect)

#define IOleInPlaceObjectWindowless_ReactivateAndUndo(This)	\
    (This)->lpVtbl -> ReactivateAndUndo(This)


#define IOleInPlaceObjectWindowless_OnWindowMessage(This,msg,wParam,lParam,plResult)	\
    (This)->lpVtbl -> OnWindowMessage(This,msg,wParam,lParam,plResult)

#define IOleInPlaceObjectWindowless_GetDropTarget(This,ppDropTarget)	\
    (This)->lpVtbl -> GetDropTarget(This,ppDropTarget)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleInPlaceObjectWindowless_OnWindowMessage_Proxy( 
    IOleInPlaceObjectWindowless __RPC_FAR * This,
    /* [in] */ UINT msg,
    /* [in] */ WPARAM wParam,
    /* [in] */ LPARAM lParam,
    /* [out] */ LRESULT __RPC_FAR *plResult);


void __RPC_STUB IOleInPlaceObjectWindowless_OnWindowMessage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceObjectWindowless_GetDropTarget_Proxy( 
    IOleInPlaceObjectWindowless __RPC_FAR * This,
    /* [out] */ IDropTarget __RPC_FAR *__RPC_FAR *ppDropTarget);


void __RPC_STUB IOleInPlaceObjectWindowless_GetDropTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleInPlaceObjectWindowless_INTERFACE_DEFINED__ */


#ifndef __IOleInPlaceSiteEx_INTERFACE_DEFINED__
#define __IOleInPlaceSiteEx_INTERFACE_DEFINED__

/* interface IOleInPlaceSiteEx */
/* [uuid][unique][object] */ 

typedef IOleInPlaceSiteEx __RPC_FAR *LPOLEINPLACESITEEX;

typedef /* [v1_enum] */ 
enum tagACTIVATEFLAGS
    {	ACTIVATE_WINDOWLESS	= 1
    }	ACTIVATEFLAGS;


EXTERN_C const IID IID_IOleInPlaceSiteEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9C2CAD80-3424-11CF-B670-00AA004CD6D8")
    IOleInPlaceSiteEx : public IOleInPlaceSite
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnInPlaceActivateEx( 
            /* [out] */ BOOL __RPC_FAR *pfNoRedraw,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnInPlaceDeactivateEx( 
            /* [in] */ BOOL fNoRedraw) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RequestUIActivate( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleInPlaceSiteExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleInPlaceSiteEx __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleInPlaceSiteEx __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleInPlaceSiteEx __RPC_FAR * This);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetWindow )( 
            IOleInPlaceSiteEx __RPC_FAR * This,
            /* [out] */ HWND __RPC_FAR *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ContextSensitiveHelp )( 
            IOleInPlaceSiteEx __RPC_FAR * This,
            /* [in] */ BOOL fEnterMode);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CanInPlaceActivate )( 
            IOleInPlaceSiteEx __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnInPlaceActivate )( 
            IOleInPlaceSiteEx __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnUIActivate )( 
            IOleInPlaceSiteEx __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetWindowContext )( 
            IOleInPlaceSiteEx __RPC_FAR * This,
            /* [out] */ IOleInPlaceFrame __RPC_FAR *__RPC_FAR *ppFrame,
            /* [out] */ IOleInPlaceUIWindow __RPC_FAR *__RPC_FAR *ppDoc,
            /* [out] */ LPRECT lprcPosRect,
            /* [out] */ LPRECT lprcClipRect,
            /* [out][in] */ LPOLEINPLACEFRAMEINFO lpFrameInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Scroll )( 
            IOleInPlaceSiteEx __RPC_FAR * This,
            /* [in] */ SIZE scrollExtant);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnUIDeactivate )( 
            IOleInPlaceSiteEx __RPC_FAR * This,
            /* [in] */ BOOL fUndoable);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnInPlaceDeactivate )( 
            IOleInPlaceSiteEx __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DiscardUndoState )( 
            IOleInPlaceSiteEx __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DeactivateAndUndo )( 
            IOleInPlaceSiteEx __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnPosRectChange )( 
            IOleInPlaceSiteEx __RPC_FAR * This,
            /* [in] */ LPCRECT lprcPosRect);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnInPlaceActivateEx )( 
            IOleInPlaceSiteEx __RPC_FAR * This,
            /* [out] */ BOOL __RPC_FAR *pfNoRedraw,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnInPlaceDeactivateEx )( 
            IOleInPlaceSiteEx __RPC_FAR * This,
            /* [in] */ BOOL fNoRedraw);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RequestUIActivate )( 
            IOleInPlaceSiteEx __RPC_FAR * This);
        
        END_INTERFACE
    } IOleInPlaceSiteExVtbl;

    interface IOleInPlaceSiteEx
    {
        CONST_VTBL struct IOleInPlaceSiteExVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleInPlaceSiteEx_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleInPlaceSiteEx_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleInPlaceSiteEx_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleInPlaceSiteEx_GetWindow(This,phwnd)	\
    (This)->lpVtbl -> GetWindow(This,phwnd)

#define IOleInPlaceSiteEx_ContextSensitiveHelp(This,fEnterMode)	\
    (This)->lpVtbl -> ContextSensitiveHelp(This,fEnterMode)


#define IOleInPlaceSiteEx_CanInPlaceActivate(This)	\
    (This)->lpVtbl -> CanInPlaceActivate(This)

#define IOleInPlaceSiteEx_OnInPlaceActivate(This)	\
    (This)->lpVtbl -> OnInPlaceActivate(This)

#define IOleInPlaceSiteEx_OnUIActivate(This)	\
    (This)->lpVtbl -> OnUIActivate(This)

#define IOleInPlaceSiteEx_GetWindowContext(This,ppFrame,ppDoc,lprcPosRect,lprcClipRect,lpFrameInfo)	\
    (This)->lpVtbl -> GetWindowContext(This,ppFrame,ppDoc,lprcPosRect,lprcClipRect,lpFrameInfo)

#define IOleInPlaceSiteEx_Scroll(This,scrollExtant)	\
    (This)->lpVtbl -> Scroll(This,scrollExtant)

#define IOleInPlaceSiteEx_OnUIDeactivate(This,fUndoable)	\
    (This)->lpVtbl -> OnUIDeactivate(This,fUndoable)

#define IOleInPlaceSiteEx_OnInPlaceDeactivate(This)	\
    (This)->lpVtbl -> OnInPlaceDeactivate(This)

#define IOleInPlaceSiteEx_DiscardUndoState(This)	\
    (This)->lpVtbl -> DiscardUndoState(This)

#define IOleInPlaceSiteEx_DeactivateAndUndo(This)	\
    (This)->lpVtbl -> DeactivateAndUndo(This)

#define IOleInPlaceSiteEx_OnPosRectChange(This,lprcPosRect)	\
    (This)->lpVtbl -> OnPosRectChange(This,lprcPosRect)


#define IOleInPlaceSiteEx_OnInPlaceActivateEx(This,pfNoRedraw,dwFlags)	\
    (This)->lpVtbl -> OnInPlaceActivateEx(This,pfNoRedraw,dwFlags)

#define IOleInPlaceSiteEx_OnInPlaceDeactivateEx(This,fNoRedraw)	\
    (This)->lpVtbl -> OnInPlaceDeactivateEx(This,fNoRedraw)

#define IOleInPlaceSiteEx_RequestUIActivate(This)	\
    (This)->lpVtbl -> RequestUIActivate(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleInPlaceSiteEx_OnInPlaceActivateEx_Proxy( 
    IOleInPlaceSiteEx __RPC_FAR * This,
    /* [out] */ BOOL __RPC_FAR *pfNoRedraw,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IOleInPlaceSiteEx_OnInPlaceActivateEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteEx_OnInPlaceDeactivateEx_Proxy( 
    IOleInPlaceSiteEx __RPC_FAR * This,
    /* [in] */ BOOL fNoRedraw);


void __RPC_STUB IOleInPlaceSiteEx_OnInPlaceDeactivateEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteEx_RequestUIActivate_Proxy( 
    IOleInPlaceSiteEx __RPC_FAR * This);


void __RPC_STUB IOleInPlaceSiteEx_RequestUIActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleInPlaceSiteEx_INTERFACE_DEFINED__ */


#ifndef __IOleInPlaceSiteWindowless_INTERFACE_DEFINED__
#define __IOleInPlaceSiteWindowless_INTERFACE_DEFINED__

/* interface IOleInPlaceSiteWindowless */
/* [uuid][unique][object][local] */ 

typedef IOleInPlaceSiteWindowless __RPC_FAR *LPOLEINPLACESITEWINDOWLESS;

typedef /* [v1_enum] */ 
enum tagOLEDCFLAGS
    {	OLEDC_NODRAW	= 0x1,
	OLEDC_PAINTBKGND	= 0x2,
	OLEDC_OFFSCREEN	= 0x4
    }	OLEDCFLAGS;


EXTERN_C const IID IID_IOleInPlaceSiteWindowless;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("922EADA0-3424-11CF-B670-00AA004CD6D8")
    IOleInPlaceSiteWindowless : public IOleInPlaceSiteEx
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CanWindowlessActivate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCapture( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCapture( 
            /* [in] */ BOOL fCapture) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFocus( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetFocus( 
            /* [in] */ BOOL fFocus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDC( 
            /* [in] */ LPCRECT pRect,
            /* [in] */ DWORD grfFlags,
            /* [out] */ HDC __RPC_FAR *phDC) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReleaseDC( 
            /* [in] */ HDC hDC) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InvalidateRect( 
            /* [in] */ LPCRECT pRect,
            /* [in] */ BOOL fErase) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InvalidateRgn( 
            /* [in] */ HRGN hRGN,
            /* [in] */ BOOL fErase) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ScrollRect( 
            /* [in] */ INT dx,
            /* [in] */ INT dy,
            /* [in] */ LPCRECT pRectScroll,
            /* [in] */ LPCRECT pRectClip) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AdjustRect( 
            /* [out][in] */ LPRECT prc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnDefWindowMessage( 
            /* [in] */ UINT msg,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ LRESULT __RPC_FAR *plResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleInPlaceSiteWindowlessVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetWindow )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [out] */ HWND __RPC_FAR *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ContextSensitiveHelp )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ BOOL fEnterMode);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CanInPlaceActivate )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnInPlaceActivate )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnUIActivate )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetWindowContext )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [out] */ IOleInPlaceFrame __RPC_FAR *__RPC_FAR *ppFrame,
            /* [out] */ IOleInPlaceUIWindow __RPC_FAR *__RPC_FAR *ppDoc,
            /* [out] */ LPRECT lprcPosRect,
            /* [out] */ LPRECT lprcClipRect,
            /* [out][in] */ LPOLEINPLACEFRAMEINFO lpFrameInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Scroll )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ SIZE scrollExtant);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnUIDeactivate )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ BOOL fUndoable);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnInPlaceDeactivate )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DiscardUndoState )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DeactivateAndUndo )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnPosRectChange )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ LPCRECT lprcPosRect);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnInPlaceActivateEx )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [out] */ BOOL __RPC_FAR *pfNoRedraw,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnInPlaceDeactivateEx )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ BOOL fNoRedraw);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RequestUIActivate )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CanWindowlessActivate )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCapture )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetCapture )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ BOOL fCapture);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetFocus )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetFocus )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ BOOL fFocus);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDC )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ LPCRECT pRect,
            /* [in] */ DWORD grfFlags,
            /* [out] */ HDC __RPC_FAR *phDC);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ReleaseDC )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ HDC hDC);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InvalidateRect )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ LPCRECT pRect,
            /* [in] */ BOOL fErase);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InvalidateRgn )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ HRGN hRGN,
            /* [in] */ BOOL fErase);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ScrollRect )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ INT dx,
            /* [in] */ INT dy,
            /* [in] */ LPCRECT pRectScroll,
            /* [in] */ LPCRECT pRectClip);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *AdjustRect )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [out][in] */ LPRECT prc);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnDefWindowMessage )( 
            IOleInPlaceSiteWindowless __RPC_FAR * This,
            /* [in] */ UINT msg,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ LRESULT __RPC_FAR *plResult);
        
        END_INTERFACE
    } IOleInPlaceSiteWindowlessVtbl;

    interface IOleInPlaceSiteWindowless
    {
        CONST_VTBL struct IOleInPlaceSiteWindowlessVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleInPlaceSiteWindowless_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleInPlaceSiteWindowless_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleInPlaceSiteWindowless_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleInPlaceSiteWindowless_GetWindow(This,phwnd)	\
    (This)->lpVtbl -> GetWindow(This,phwnd)

#define IOleInPlaceSiteWindowless_ContextSensitiveHelp(This,fEnterMode)	\
    (This)->lpVtbl -> ContextSensitiveHelp(This,fEnterMode)


#define IOleInPlaceSiteWindowless_CanInPlaceActivate(This)	\
    (This)->lpVtbl -> CanInPlaceActivate(This)

#define IOleInPlaceSiteWindowless_OnInPlaceActivate(This)	\
    (This)->lpVtbl -> OnInPlaceActivate(This)

#define IOleInPlaceSiteWindowless_OnUIActivate(This)	\
    (This)->lpVtbl -> OnUIActivate(This)

#define IOleInPlaceSiteWindowless_GetWindowContext(This,ppFrame,ppDoc,lprcPosRect,lprcClipRect,lpFrameInfo)	\
    (This)->lpVtbl -> GetWindowContext(This,ppFrame,ppDoc,lprcPosRect,lprcClipRect,lpFrameInfo)

#define IOleInPlaceSiteWindowless_Scroll(This,scrollExtant)	\
    (This)->lpVtbl -> Scroll(This,scrollExtant)

#define IOleInPlaceSiteWindowless_OnUIDeactivate(This,fUndoable)	\
    (This)->lpVtbl -> OnUIDeactivate(This,fUndoable)

#define IOleInPlaceSiteWindowless_OnInPlaceDeactivate(This)	\
    (This)->lpVtbl -> OnInPlaceDeactivate(This)

#define IOleInPlaceSiteWindowless_DiscardUndoState(This)	\
    (This)->lpVtbl -> DiscardUndoState(This)

#define IOleInPlaceSiteWindowless_DeactivateAndUndo(This)	\
    (This)->lpVtbl -> DeactivateAndUndo(This)

#define IOleInPlaceSiteWindowless_OnPosRectChange(This,lprcPosRect)	\
    (This)->lpVtbl -> OnPosRectChange(This,lprcPosRect)


#define IOleInPlaceSiteWindowless_OnInPlaceActivateEx(This,pfNoRedraw,dwFlags)	\
    (This)->lpVtbl -> OnInPlaceActivateEx(This,pfNoRedraw,dwFlags)

#define IOleInPlaceSiteWindowless_OnInPlaceDeactivateEx(This,fNoRedraw)	\
    (This)->lpVtbl -> OnInPlaceDeactivateEx(This,fNoRedraw)

#define IOleInPlaceSiteWindowless_RequestUIActivate(This)	\
    (This)->lpVtbl -> RequestUIActivate(This)


#define IOleInPlaceSiteWindowless_CanWindowlessActivate(This)	\
    (This)->lpVtbl -> CanWindowlessActivate(This)

#define IOleInPlaceSiteWindowless_GetCapture(This)	\
    (This)->lpVtbl -> GetCapture(This)

#define IOleInPlaceSiteWindowless_SetCapture(This,fCapture)	\
    (This)->lpVtbl -> SetCapture(This,fCapture)

#define IOleInPlaceSiteWindowless_GetFocus(This)	\
    (This)->lpVtbl -> GetFocus(This)

#define IOleInPlaceSiteWindowless_SetFocus(This,fFocus)	\
    (This)->lpVtbl -> SetFocus(This,fFocus)

#define IOleInPlaceSiteWindowless_GetDC(This,pRect,grfFlags,phDC)	\
    (This)->lpVtbl -> GetDC(This,pRect,grfFlags,phDC)

#define IOleInPlaceSiteWindowless_ReleaseDC(This,hDC)	\
    (This)->lpVtbl -> ReleaseDC(This,hDC)

#define IOleInPlaceSiteWindowless_InvalidateRect(This,pRect,fErase)	\
    (This)->lpVtbl -> InvalidateRect(This,pRect,fErase)

#define IOleInPlaceSiteWindowless_InvalidateRgn(This,hRGN,fErase)	\
    (This)->lpVtbl -> InvalidateRgn(This,hRGN,fErase)

#define IOleInPlaceSiteWindowless_ScrollRect(This,dx,dy,pRectScroll,pRectClip)	\
    (This)->lpVtbl -> ScrollRect(This,dx,dy,pRectScroll,pRectClip)

#define IOleInPlaceSiteWindowless_AdjustRect(This,prc)	\
    (This)->lpVtbl -> AdjustRect(This,prc)

#define IOleInPlaceSiteWindowless_OnDefWindowMessage(This,msg,wParam,lParam,plResult)	\
    (This)->lpVtbl -> OnDefWindowMessage(This,msg,wParam,lParam,plResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleInPlaceSiteWindowless_CanWindowlessActivate_Proxy( 
    IOleInPlaceSiteWindowless __RPC_FAR * This);


void __RPC_STUB IOleInPlaceSiteWindowless_CanWindowlessActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteWindowless_GetCapture_Proxy( 
    IOleInPlaceSiteWindowless __RPC_FAR * This);


void __RPC_STUB IOleInPlaceSiteWindowless_GetCapture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteWindowless_SetCapture_Proxy( 
    IOleInPlaceSiteWindowless __RPC_FAR * This,
    /* [in] */ BOOL fCapture);


void __RPC_STUB IOleInPlaceSiteWindowless_SetCapture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteWindowless_GetFocus_Proxy( 
    IOleInPlaceSiteWindowless __RPC_FAR * This);


void __RPC_STUB IOleInPlaceSiteWindowless_GetFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteWindowless_SetFocus_Proxy( 
    IOleInPlaceSiteWindowless __RPC_FAR * This,
    /* [in] */ BOOL fFocus);


void __RPC_STUB IOleInPlaceSiteWindowless_SetFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteWindowless_GetDC_Proxy( 
    IOleInPlaceSiteWindowless __RPC_FAR * This,
    /* [in] */ LPCRECT pRect,
    /* [in] */ DWORD grfFlags,
    /* [out] */ HDC __RPC_FAR *phDC);


void __RPC_STUB IOleInPlaceSiteWindowless_GetDC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteWindowless_ReleaseDC_Proxy( 
    IOleInPlaceSiteWindowless __RPC_FAR * This,
    /* [in] */ HDC hDC);


void __RPC_STUB IOleInPlaceSiteWindowless_ReleaseDC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteWindowless_InvalidateRect_Proxy( 
    IOleInPlaceSiteWindowless __RPC_FAR * This,
    /* [in] */ LPCRECT pRect,
    /* [in] */ BOOL fErase);


void __RPC_STUB IOleInPlaceSiteWindowless_InvalidateRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteWindowless_InvalidateRgn_Proxy( 
    IOleInPlaceSiteWindowless __RPC_FAR * This,
    /* [in] */ HRGN hRGN,
    /* [in] */ BOOL fErase);


void __RPC_STUB IOleInPlaceSiteWindowless_InvalidateRgn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteWindowless_ScrollRect_Proxy( 
    IOleInPlaceSiteWindowless __RPC_FAR * This,
    /* [in] */ INT dx,
    /* [in] */ INT dy,
    /* [in] */ LPCRECT pRectScroll,
    /* [in] */ LPCRECT pRectClip);


void __RPC_STUB IOleInPlaceSiteWindowless_ScrollRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteWindowless_AdjustRect_Proxy( 
    IOleInPlaceSiteWindowless __RPC_FAR * This,
    /* [out][in] */ LPRECT prc);


void __RPC_STUB IOleInPlaceSiteWindowless_AdjustRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSiteWindowless_OnDefWindowMessage_Proxy( 
    IOleInPlaceSiteWindowless __RPC_FAR * This,
    /* [in] */ UINT msg,
    /* [in] */ WPARAM wParam,
    /* [in] */ LPARAM lParam,
    /* [out] */ LRESULT __RPC_FAR *plResult);


void __RPC_STUB IOleInPlaceSiteWindowless_OnDefWindowMessage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleInPlaceSiteWindowless_INTERFACE_DEFINED__ */


#ifndef __IViewObjectEx_INTERFACE_DEFINED__
#define __IViewObjectEx_INTERFACE_DEFINED__

/* interface IViewObjectEx */
/* [uuid][unique][object][local] */ 

typedef IViewObjectEx __RPC_FAR *LPVIEWOBJECTEX;

typedef /* [v1_enum] */ 
enum tagVIEWSTATUS
    {	VIEWSTATUS_OPAQUE	= 1,
	VIEWSTATUS_SOLIDBKGND	= 2,
	VIEWSTATUS_DVASPECTOPAQUE	= 4,
	VIEWSTATUS_DVASPECTTRANSPARENT	= 8
    }	VIEWSTATUS;

typedef /* [v1_enum] */ 
enum tagHITRESULT
    {	HITRESULT_OUTSIDE	= 0,
	HITRESULT_TRANSPARENT	= 1,
	HITRESULT_CLOSE	= 2,
	HITRESULT_HIT	= 3
    }	HITRESULT;

typedef /* [v1_enum] */ 
enum tagDVASPECT2
    {	DVASPECT_OPAQUE	= 16,
	DVASPECT_TRANSPARENT	= 32
    }	DVASPECT2;

typedef struct tagExtentInfo
    {
    ULONG cb;
    DWORD dwExtentMode;
    SIZEL sizelProposed;
    }	DVEXTENTINFO;

typedef /* [v1_enum] */ 
enum tagExtentMode
    {	DVEXTENT_CONTENT	= 0,
	DVEXTENT_INTEGRAL	= DVEXTENT_CONTENT + 1
    }	DVEXTENTMODE;

typedef /* [v1_enum] */ 
enum tagAspectInfoFlag
    {	DVASPECTINFOFLAG_CANOPTIMIZE	= 1
    }	DVASPECTINFOFLAG;

typedef struct tagAspectInfo
    {
    ULONG cb;
    DWORD dwFlags;
    }	DVASPECTINFO;


EXTERN_C const IID IID_IViewObjectEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3AF24292-0C96-11CE-A0CF-00AA00600AB8")
    IViewObjectEx : public IViewObject2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRect( 
            /* [in] */ DWORD dwAspect,
            /* [out] */ LPRECTL pRect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetViewStatus( 
            /* [out] */ DWORD __RPC_FAR *pdwStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE QueryHitPoint( 
            /* [in] */ DWORD dwAspect,
            /* [in] */ LPCRECT pRectBounds,
            /* [in] */ POINT ptlLoc,
            /* [in] */ LONG lCloseHint,
            /* [out] */ DWORD __RPC_FAR *pHitResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE QueryHitRect( 
            /* [in] */ DWORD dwAspect,
            /* [in] */ LPCRECT pRectBounds,
            /* [in] */ LPCRECT pRectLoc,
            /* [in] */ LONG lCloseHint,
            /* [out] */ DWORD __RPC_FAR *pHitResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNaturalExtent( 
            /* [in] */ DWORD dwAspect,
            /* [in] */ LONG lindex,
            /* [in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [in] */ HDC hicTargetDev,
            /* [in] */ DVEXTENTINFO __RPC_FAR *pExtentInfo,
            /* [out] */ LPSIZEL pSizel) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IViewObjectExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IViewObjectEx __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IViewObjectEx __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IViewObjectEx __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Draw )( 
            IViewObjectEx __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ void __RPC_FAR *pvAspect,
            /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [in] */ HDC hdcTargetDev,
            /* [in] */ HDC hdcDraw,
            /* [in] */ LPCRECTL lprcBounds,
            /* [unique][in] */ LPCRECTL lprcWBounds,
            /* [in] */ BOOL ( STDMETHODCALLTYPE __RPC_FAR *pfnContinue )( 
                DWORD dwContinue),
            /* [in] */ DWORD dwContinue);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetColorSet )( 
            IViewObjectEx __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ void __RPC_FAR *pvAspect,
            /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [in] */ HDC hicTargetDev,
            /* [out] */ LOGPALETTE __RPC_FAR *__RPC_FAR *ppColorSet);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Freeze )( 
            IViewObjectEx __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ void __RPC_FAR *pvAspect,
            /* [out] */ DWORD __RPC_FAR *pdwFreeze);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Unfreeze )( 
            IViewObjectEx __RPC_FAR * This,
            /* [in] */ DWORD dwFreeze);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetAdvise )( 
            IViewObjectEx __RPC_FAR * This,
            /* [in] */ DWORD aspects,
            /* [in] */ DWORD advf,
            /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvSink);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAdvise )( 
            IViewObjectEx __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pAspects,
            /* [out] */ DWORD __RPC_FAR *pAdvf,
            /* [out] */ IAdviseSink __RPC_FAR *__RPC_FAR *ppAdvSink);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetExtent )( 
            IViewObjectEx __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [out] */ LPSIZEL lpsizel);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetRect )( 
            IViewObjectEx __RPC_FAR * This,
            /* [in] */ DWORD dwAspect,
            /* [out] */ LPRECTL pRect);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetViewStatus )( 
            IViewObjectEx __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryHitPoint )( 
            IViewObjectEx __RPC_FAR * This,
            /* [in] */ DWORD dwAspect,
            /* [in] */ LPCRECT pRectBounds,
            /* [in] */ POINT ptlLoc,
            /* [in] */ LONG lCloseHint,
            /* [out] */ DWORD __RPC_FAR *pHitResult);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryHitRect )( 
            IViewObjectEx __RPC_FAR * This,
            /* [in] */ DWORD dwAspect,
            /* [in] */ LPCRECT pRectBounds,
            /* [in] */ LPCRECT pRectLoc,
            /* [in] */ LONG lCloseHint,
            /* [out] */ DWORD __RPC_FAR *pHitResult);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetNaturalExtent )( 
            IViewObjectEx __RPC_FAR * This,
            /* [in] */ DWORD dwAspect,
            /* [in] */ LONG lindex,
            /* [in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [in] */ HDC hicTargetDev,
            /* [in] */ DVEXTENTINFO __RPC_FAR *pExtentInfo,
            /* [out] */ LPSIZEL pSizel);
        
        END_INTERFACE
    } IViewObjectExVtbl;

    interface IViewObjectEx
    {
        CONST_VTBL struct IViewObjectExVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IViewObjectEx_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IViewObjectEx_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IViewObjectEx_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IViewObjectEx_Draw(This,dwDrawAspect,lindex,pvAspect,ptd,hdcTargetDev,hdcDraw,lprcBounds,lprcWBounds,pfnContinue,dwContinue)	\
    (This)->lpVtbl -> Draw(This,dwDrawAspect,lindex,pvAspect,ptd,hdcTargetDev,hdcDraw,lprcBounds,lprcWBounds,pfnContinue,dwContinue)

#define IViewObjectEx_GetColorSet(This,dwDrawAspect,lindex,pvAspect,ptd,hicTargetDev,ppColorSet)	\
    (This)->lpVtbl -> GetColorSet(This,dwDrawAspect,lindex,pvAspect,ptd,hicTargetDev,ppColorSet)

#define IViewObjectEx_Freeze(This,dwDrawAspect,lindex,pvAspect,pdwFreeze)	\
    (This)->lpVtbl -> Freeze(This,dwDrawAspect,lindex,pvAspect,pdwFreeze)

#define IViewObjectEx_Unfreeze(This,dwFreeze)	\
    (This)->lpVtbl -> Unfreeze(This,dwFreeze)

#define IViewObjectEx_SetAdvise(This,aspects,advf,pAdvSink)	\
    (This)->lpVtbl -> SetAdvise(This,aspects,advf,pAdvSink)

#define IViewObjectEx_GetAdvise(This,pAspects,pAdvf,ppAdvSink)	\
    (This)->lpVtbl -> GetAdvise(This,pAspects,pAdvf,ppAdvSink)


#define IViewObjectEx_GetExtent(This,dwDrawAspect,lindex,ptd,lpsizel)	\
    (This)->lpVtbl -> GetExtent(This,dwDrawAspect,lindex,ptd,lpsizel)


#define IViewObjectEx_GetRect(This,dwAspect,pRect)	\
    (This)->lpVtbl -> GetRect(This,dwAspect,pRect)

#define IViewObjectEx_GetViewStatus(This,pdwStatus)	\
    (This)->lpVtbl -> GetViewStatus(This,pdwStatus)

#define IViewObjectEx_QueryHitPoint(This,dwAspect,pRectBounds,ptlLoc,lCloseHint,pHitResult)	\
    (This)->lpVtbl -> QueryHitPoint(This,dwAspect,pRectBounds,ptlLoc,lCloseHint,pHitResult)

#define IViewObjectEx_QueryHitRect(This,dwAspect,pRectBounds,pRectLoc,lCloseHint,pHitResult)	\
    (This)->lpVtbl -> QueryHitRect(This,dwAspect,pRectBounds,pRectLoc,lCloseHint,pHitResult)

#define IViewObjectEx_GetNaturalExtent(This,dwAspect,lindex,ptd,hicTargetDev,pExtentInfo,pSizel)	\
    (This)->lpVtbl -> GetNaturalExtent(This,dwAspect,lindex,ptd,hicTargetDev,pExtentInfo,pSizel)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IViewObjectEx_GetRect_Proxy( 
    IViewObjectEx __RPC_FAR * This,
    /* [in] */ DWORD dwAspect,
    /* [out] */ LPRECTL pRect);


void __RPC_STUB IViewObjectEx_GetRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IViewObjectEx_GetViewStatus_Proxy( 
    IViewObjectEx __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwStatus);


void __RPC_STUB IViewObjectEx_GetViewStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IViewObjectEx_QueryHitPoint_Proxy( 
    IViewObjectEx __RPC_FAR * This,
    /* [in] */ DWORD dwAspect,
    /* [in] */ LPCRECT pRectBounds,
    /* [in] */ POINT ptlLoc,
    /* [in] */ LONG lCloseHint,
    /* [out] */ DWORD __RPC_FAR *pHitResult);


void __RPC_STUB IViewObjectEx_QueryHitPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IViewObjectEx_QueryHitRect_Proxy( 
    IViewObjectEx __RPC_FAR * This,
    /* [in] */ DWORD dwAspect,
    /* [in] */ LPCRECT pRectBounds,
    /* [in] */ LPCRECT pRectLoc,
    /* [in] */ LONG lCloseHint,
    /* [out] */ DWORD __RPC_FAR *pHitResult);


void __RPC_STUB IViewObjectEx_QueryHitRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IViewObjectEx_GetNaturalExtent_Proxy( 
    IViewObjectEx __RPC_FAR * This,
    /* [in] */ DWORD dwAspect,
    /* [in] */ LONG lindex,
    /* [in] */ DVTARGETDEVICE __RPC_FAR *ptd,
    /* [in] */ HDC hicTargetDev,
    /* [in] */ DVEXTENTINFO __RPC_FAR *pExtentInfo,
    /* [out] */ LPSIZEL pSizel);


void __RPC_STUB IViewObjectEx_GetNaturalExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IViewObjectEx_INTERFACE_DEFINED__ */


#ifndef __IOleUndoUnit_INTERFACE_DEFINED__
#define __IOleUndoUnit_INTERFACE_DEFINED__

/* interface IOleUndoUnit */
/* [uuid][unique][object] */ 

typedef IOleUndoUnit __RPC_FAR *LPOLEUNDOUNIT;


EXTERN_C const IID IID_IOleUndoUnit;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("894AD3B0-EF97-11CE-9BC9-00AA00608E01")
    IOleUndoUnit : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Do( 
            /* [in] */ IOleUndoManager __RPC_FAR *pUndoManager) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDescription( 
            /* [out] */ BSTR __RPC_FAR *pBstr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUnitType( 
            /* [out] */ CLSID __RPC_FAR *pClsid,
            /* [out] */ LONG __RPC_FAR *plID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnNextAdd( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleUndoUnitVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleUndoUnit __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleUndoUnit __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleUndoUnit __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Do )( 
            IOleUndoUnit __RPC_FAR * This,
            /* [in] */ IOleUndoManager __RPC_FAR *pUndoManager);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDescription )( 
            IOleUndoUnit __RPC_FAR * This,
            /* [out] */ BSTR __RPC_FAR *pBstr);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetUnitType )( 
            IOleUndoUnit __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClsid,
            /* [out] */ LONG __RPC_FAR *plID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnNextAdd )( 
            IOleUndoUnit __RPC_FAR * This);
        
        END_INTERFACE
    } IOleUndoUnitVtbl;

    interface IOleUndoUnit
    {
        CONST_VTBL struct IOleUndoUnitVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleUndoUnit_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleUndoUnit_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleUndoUnit_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleUndoUnit_Do(This,pUndoManager)	\
    (This)->lpVtbl -> Do(This,pUndoManager)

#define IOleUndoUnit_GetDescription(This,pBstr)	\
    (This)->lpVtbl -> GetDescription(This,pBstr)

#define IOleUndoUnit_GetUnitType(This,pClsid,plID)	\
    (This)->lpVtbl -> GetUnitType(This,pClsid,plID)

#define IOleUndoUnit_OnNextAdd(This)	\
    (This)->lpVtbl -> OnNextAdd(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleUndoUnit_Do_Proxy( 
    IOleUndoUnit __RPC_FAR * This,
    /* [in] */ IOleUndoManager __RPC_FAR *pUndoManager);


void __RPC_STUB IOleUndoUnit_Do_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoUnit_GetDescription_Proxy( 
    IOleUndoUnit __RPC_FAR * This,
    /* [out] */ BSTR __RPC_FAR *pBstr);


void __RPC_STUB IOleUndoUnit_GetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoUnit_GetUnitType_Proxy( 
    IOleUndoUnit __RPC_FAR * This,
    /* [out] */ CLSID __RPC_FAR *pClsid,
    /* [out] */ LONG __RPC_FAR *plID);


void __RPC_STUB IOleUndoUnit_GetUnitType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoUnit_OnNextAdd_Proxy( 
    IOleUndoUnit __RPC_FAR * This);


void __RPC_STUB IOleUndoUnit_OnNextAdd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleUndoUnit_INTERFACE_DEFINED__ */


#ifndef __IOleParentUndoUnit_INTERFACE_DEFINED__
#define __IOleParentUndoUnit_INTERFACE_DEFINED__

/* interface IOleParentUndoUnit */
/* [uuid][unique][object] */ 

typedef IOleParentUndoUnit __RPC_FAR *LPOLEPARENTUNDOUNIT;


EXTERN_C const IID IID_IOleParentUndoUnit;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A1FAF330-EF97-11CE-9BC9-00AA00608E01")
    IOleParentUndoUnit : public IOleUndoUnit
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ IOleParentUndoUnit __RPC_FAR *pPUU) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( 
            /* [in] */ IOleParentUndoUnit __RPC_FAR *pPUU,
            /* [in] */ BOOL fCommit) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IOleUndoUnit __RPC_FAR *pUU) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindUnit( 
            /* [in] */ IOleUndoUnit __RPC_FAR *pUU) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParentState( 
            /* [out] */ DWORD __RPC_FAR *pdwState) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleParentUndoUnitVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleParentUndoUnit __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleParentUndoUnit __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleParentUndoUnit __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Do )( 
            IOleParentUndoUnit __RPC_FAR * This,
            /* [in] */ IOleUndoManager __RPC_FAR *pUndoManager);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDescription )( 
            IOleParentUndoUnit __RPC_FAR * This,
            /* [out] */ BSTR __RPC_FAR *pBstr);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetUnitType )( 
            IOleParentUndoUnit __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClsid,
            /* [out] */ LONG __RPC_FAR *plID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnNextAdd )( 
            IOleParentUndoUnit __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Open )( 
            IOleParentUndoUnit __RPC_FAR * This,
            /* [in] */ IOleParentUndoUnit __RPC_FAR *pPUU);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Close )( 
            IOleParentUndoUnit __RPC_FAR * This,
            /* [in] */ IOleParentUndoUnit __RPC_FAR *pPUU,
            /* [in] */ BOOL fCommit);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Add )( 
            IOleParentUndoUnit __RPC_FAR * This,
            /* [in] */ IOleUndoUnit __RPC_FAR *pUU);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FindUnit )( 
            IOleParentUndoUnit __RPC_FAR * This,
            /* [in] */ IOleUndoUnit __RPC_FAR *pUU);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetParentState )( 
            IOleParentUndoUnit __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwState);
        
        END_INTERFACE
    } IOleParentUndoUnitVtbl;

    interface IOleParentUndoUnit
    {
        CONST_VTBL struct IOleParentUndoUnitVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleParentUndoUnit_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleParentUndoUnit_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleParentUndoUnit_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleParentUndoUnit_Do(This,pUndoManager)	\
    (This)->lpVtbl -> Do(This,pUndoManager)

#define IOleParentUndoUnit_GetDescription(This,pBstr)	\
    (This)->lpVtbl -> GetDescription(This,pBstr)

#define IOleParentUndoUnit_GetUnitType(This,pClsid,plID)	\
    (This)->lpVtbl -> GetUnitType(This,pClsid,plID)

#define IOleParentUndoUnit_OnNextAdd(This)	\
    (This)->lpVtbl -> OnNextAdd(This)


#define IOleParentUndoUnit_Open(This,pPUU)	\
    (This)->lpVtbl -> Open(This,pPUU)

#define IOleParentUndoUnit_Close(This,pPUU,fCommit)	\
    (This)->lpVtbl -> Close(This,pPUU,fCommit)

#define IOleParentUndoUnit_Add(This,pUU)	\
    (This)->lpVtbl -> Add(This,pUU)

#define IOleParentUndoUnit_FindUnit(This,pUU)	\
    (This)->lpVtbl -> FindUnit(This,pUU)

#define IOleParentUndoUnit_GetParentState(This,pdwState)	\
    (This)->lpVtbl -> GetParentState(This,pdwState)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleParentUndoUnit_Open_Proxy( 
    IOleParentUndoUnit __RPC_FAR * This,
    /* [in] */ IOleParentUndoUnit __RPC_FAR *pPUU);


void __RPC_STUB IOleParentUndoUnit_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleParentUndoUnit_Close_Proxy( 
    IOleParentUndoUnit __RPC_FAR * This,
    /* [in] */ IOleParentUndoUnit __RPC_FAR *pPUU,
    /* [in] */ BOOL fCommit);


void __RPC_STUB IOleParentUndoUnit_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleParentUndoUnit_Add_Proxy( 
    IOleParentUndoUnit __RPC_FAR * This,
    /* [in] */ IOleUndoUnit __RPC_FAR *pUU);


void __RPC_STUB IOleParentUndoUnit_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleParentUndoUnit_FindUnit_Proxy( 
    IOleParentUndoUnit __RPC_FAR * This,
    /* [in] */ IOleUndoUnit __RPC_FAR *pUU);


void __RPC_STUB IOleParentUndoUnit_FindUnit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleParentUndoUnit_GetParentState_Proxy( 
    IOleParentUndoUnit __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwState);


void __RPC_STUB IOleParentUndoUnit_GetParentState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleParentUndoUnit_INTERFACE_DEFINED__ */


#ifndef __IEnumOleUndoUnits_INTERFACE_DEFINED__
#define __IEnumOleUndoUnits_INTERFACE_DEFINED__

/* interface IEnumOleUndoUnits */
/* [uuid][unique][object] */ 

typedef IEnumOleUndoUnits __RPC_FAR *LPENUMOLEUNDOUNITS;


EXTERN_C const IID IID_IEnumOleUndoUnits;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B3E7C340-EF97-11CE-9BC9-00AA00608E01")
    IEnumOleUndoUnits : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG cElt,
            /* [length_is][size_is][out] */ IOleUndoUnit __RPC_FAR *__RPC_FAR *rgElt,
            /* [out] */ ULONG __RPC_FAR *pcEltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG cElt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumOleUndoUnits __RPC_FAR *__RPC_FAR *ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumOleUndoUnitsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IEnumOleUndoUnits __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IEnumOleUndoUnits __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IEnumOleUndoUnits __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Next )( 
            IEnumOleUndoUnits __RPC_FAR * This,
            /* [in] */ ULONG cElt,
            /* [length_is][size_is][out] */ IOleUndoUnit __RPC_FAR *__RPC_FAR *rgElt,
            /* [out] */ ULONG __RPC_FAR *pcEltFetched);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Skip )( 
            IEnumOleUndoUnits __RPC_FAR * This,
            /* [in] */ ULONG cElt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            IEnumOleUndoUnits __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IEnumOleUndoUnits __RPC_FAR * This,
            /* [out] */ IEnumOleUndoUnits __RPC_FAR *__RPC_FAR *ppEnum);
        
        END_INTERFACE
    } IEnumOleUndoUnitsVtbl;

    interface IEnumOleUndoUnits
    {
        CONST_VTBL struct IEnumOleUndoUnitsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumOleUndoUnits_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumOleUndoUnits_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumOleUndoUnits_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumOleUndoUnits_Next(This,cElt,rgElt,pcEltFetched)	\
    (This)->lpVtbl -> Next(This,cElt,rgElt,pcEltFetched)

#define IEnumOleUndoUnits_Skip(This,cElt)	\
    (This)->lpVtbl -> Skip(This,cElt)

#define IEnumOleUndoUnits_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumOleUndoUnits_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumOleUndoUnits_RemoteNext_Proxy( 
    IEnumOleUndoUnits __RPC_FAR * This,
    /* [in] */ ULONG cElt,
    /* [length_is][size_is][out] */ IOleUndoUnit __RPC_FAR *__RPC_FAR *rgElt,
    /* [out] */ ULONG __RPC_FAR *pcEltFetched);


void __RPC_STUB IEnumOleUndoUnits_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumOleUndoUnits_Skip_Proxy( 
    IEnumOleUndoUnits __RPC_FAR * This,
    /* [in] */ ULONG cElt);


void __RPC_STUB IEnumOleUndoUnits_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumOleUndoUnits_Reset_Proxy( 
    IEnumOleUndoUnits __RPC_FAR * This);


void __RPC_STUB IEnumOleUndoUnits_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumOleUndoUnits_Clone_Proxy( 
    IEnumOleUndoUnits __RPC_FAR * This,
    /* [out] */ IEnumOleUndoUnits __RPC_FAR *__RPC_FAR *ppEnum);


void __RPC_STUB IEnumOleUndoUnits_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumOleUndoUnits_INTERFACE_DEFINED__ */


#ifndef __IOleUndoManager_INTERFACE_DEFINED__
#define __IOleUndoManager_INTERFACE_DEFINED__

/* interface IOleUndoManager */
/* [uuid][unique][object] */ 

#define SID_SOleUndoManager IID_IOleUndoManager
typedef IOleUndoManager __RPC_FAR *LPOLEUNDOMANAGER;


EXTERN_C const IID IID_IOleUndoManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D001F200-EF97-11CE-9BC9-00AA00608E01")
    IOleUndoManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ IOleParentUndoUnit __RPC_FAR *pPUU) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( 
            /* [in] */ IOleParentUndoUnit __RPC_FAR *pPUU,
            /* [in] */ BOOL fCommit) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IOleUndoUnit __RPC_FAR *pUU) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOpenParentState( 
            /* [out] */ DWORD __RPC_FAR *pdwState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DiscardFrom( 
            /* [in] */ IOleUndoUnit __RPC_FAR *pUU) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UndoTo( 
            /* [in] */ IOleUndoUnit __RPC_FAR *pUU) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RedoTo( 
            /* [in] */ IOleUndoUnit __RPC_FAR *pUU) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumUndoable( 
            /* [out] */ IEnumOleUndoUnits __RPC_FAR *__RPC_FAR *ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumRedoable( 
            /* [out] */ IEnumOleUndoUnits __RPC_FAR *__RPC_FAR *ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLastUndoDescription( 
            /* [out] */ BSTR __RPC_FAR *pBstr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLastRedoDescription( 
            /* [out] */ BSTR __RPC_FAR *pBstr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Enable( 
            /* [in] */ BOOL fEnable) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleUndoManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleUndoManager __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleUndoManager __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleUndoManager __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Open )( 
            IOleUndoManager __RPC_FAR * This,
            /* [in] */ IOleParentUndoUnit __RPC_FAR *pPUU);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Close )( 
            IOleUndoManager __RPC_FAR * This,
            /* [in] */ IOleParentUndoUnit __RPC_FAR *pPUU,
            /* [in] */ BOOL fCommit);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Add )( 
            IOleUndoManager __RPC_FAR * This,
            /* [in] */ IOleUndoUnit __RPC_FAR *pUU);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetOpenParentState )( 
            IOleUndoManager __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwState);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DiscardFrom )( 
            IOleUndoManager __RPC_FAR * This,
            /* [in] */ IOleUndoUnit __RPC_FAR *pUU);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UndoTo )( 
            IOleUndoManager __RPC_FAR * This,
            /* [in] */ IOleUndoUnit __RPC_FAR *pUU);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RedoTo )( 
            IOleUndoManager __RPC_FAR * This,
            /* [in] */ IOleUndoUnit __RPC_FAR *pUU);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumUndoable )( 
            IOleUndoManager __RPC_FAR * This,
            /* [out] */ IEnumOleUndoUnits __RPC_FAR *__RPC_FAR *ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumRedoable )( 
            IOleUndoManager __RPC_FAR * This,
            /* [out] */ IEnumOleUndoUnits __RPC_FAR *__RPC_FAR *ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetLastUndoDescription )( 
            IOleUndoManager __RPC_FAR * This,
            /* [out] */ BSTR __RPC_FAR *pBstr);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetLastRedoDescription )( 
            IOleUndoManager __RPC_FAR * This,
            /* [out] */ BSTR __RPC_FAR *pBstr);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Enable )( 
            IOleUndoManager __RPC_FAR * This,
            /* [in] */ BOOL fEnable);
        
        END_INTERFACE
    } IOleUndoManagerVtbl;

    interface IOleUndoManager
    {
        CONST_VTBL struct IOleUndoManagerVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleUndoManager_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleUndoManager_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleUndoManager_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleUndoManager_Open(This,pPUU)	\
    (This)->lpVtbl -> Open(This,pPUU)

#define IOleUndoManager_Close(This,pPUU,fCommit)	\
    (This)->lpVtbl -> Close(This,pPUU,fCommit)

#define IOleUndoManager_Add(This,pUU)	\
    (This)->lpVtbl -> Add(This,pUU)

#define IOleUndoManager_GetOpenParentState(This,pdwState)	\
    (This)->lpVtbl -> GetOpenParentState(This,pdwState)

#define IOleUndoManager_DiscardFrom(This,pUU)	\
    (This)->lpVtbl -> DiscardFrom(This,pUU)

#define IOleUndoManager_UndoTo(This,pUU)	\
    (This)->lpVtbl -> UndoTo(This,pUU)

#define IOleUndoManager_RedoTo(This,pUU)	\
    (This)->lpVtbl -> RedoTo(This,pUU)

#define IOleUndoManager_EnumUndoable(This,ppEnum)	\
    (This)->lpVtbl -> EnumUndoable(This,ppEnum)

#define IOleUndoManager_EnumRedoable(This,ppEnum)	\
    (This)->lpVtbl -> EnumRedoable(This,ppEnum)

#define IOleUndoManager_GetLastUndoDescription(This,pBstr)	\
    (This)->lpVtbl -> GetLastUndoDescription(This,pBstr)

#define IOleUndoManager_GetLastRedoDescription(This,pBstr)	\
    (This)->lpVtbl -> GetLastRedoDescription(This,pBstr)

#define IOleUndoManager_Enable(This,fEnable)	\
    (This)->lpVtbl -> Enable(This,fEnable)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleUndoManager_Open_Proxy( 
    IOleUndoManager __RPC_FAR * This,
    /* [in] */ IOleParentUndoUnit __RPC_FAR *pPUU);


void __RPC_STUB IOleUndoManager_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoManager_Close_Proxy( 
    IOleUndoManager __RPC_FAR * This,
    /* [in] */ IOleParentUndoUnit __RPC_FAR *pPUU,
    /* [in] */ BOOL fCommit);


void __RPC_STUB IOleUndoManager_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoManager_Add_Proxy( 
    IOleUndoManager __RPC_FAR * This,
    /* [in] */ IOleUndoUnit __RPC_FAR *pUU);


void __RPC_STUB IOleUndoManager_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoManager_GetOpenParentState_Proxy( 
    IOleUndoManager __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwState);


void __RPC_STUB IOleUndoManager_GetOpenParentState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoManager_DiscardFrom_Proxy( 
    IOleUndoManager __RPC_FAR * This,
    /* [in] */ IOleUndoUnit __RPC_FAR *pUU);


void __RPC_STUB IOleUndoManager_DiscardFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoManager_UndoTo_Proxy( 
    IOleUndoManager __RPC_FAR * This,
    /* [in] */ IOleUndoUnit __RPC_FAR *pUU);


void __RPC_STUB IOleUndoManager_UndoTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoManager_RedoTo_Proxy( 
    IOleUndoManager __RPC_FAR * This,
    /* [in] */ IOleUndoUnit __RPC_FAR *pUU);


void __RPC_STUB IOleUndoManager_RedoTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoManager_EnumUndoable_Proxy( 
    IOleUndoManager __RPC_FAR * This,
    /* [out] */ IEnumOleUndoUnits __RPC_FAR *__RPC_FAR *ppEnum);


void __RPC_STUB IOleUndoManager_EnumUndoable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoManager_EnumRedoable_Proxy( 
    IOleUndoManager __RPC_FAR * This,
    /* [out] */ IEnumOleUndoUnits __RPC_FAR *__RPC_FAR *ppEnum);


void __RPC_STUB IOleUndoManager_EnumRedoable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoManager_GetLastUndoDescription_Proxy( 
    IOleUndoManager __RPC_FAR * This,
    /* [out] */ BSTR __RPC_FAR *pBstr);


void __RPC_STUB IOleUndoManager_GetLastUndoDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoManager_GetLastRedoDescription_Proxy( 
    IOleUndoManager __RPC_FAR * This,
    /* [out] */ BSTR __RPC_FAR *pBstr);


void __RPC_STUB IOleUndoManager_GetLastRedoDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleUndoManager_Enable_Proxy( 
    IOleUndoManager __RPC_FAR * This,
    /* [in] */ BOOL fEnable);


void __RPC_STUB IOleUndoManager_Enable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleUndoManager_INTERFACE_DEFINED__ */


#ifndef __IQuickActivate_INTERFACE_DEFINED__
#define __IQuickActivate_INTERFACE_DEFINED__

/* interface IQuickActivate */
/* [uuid][unique][object][local] */ 

typedef IQuickActivate __RPC_FAR *LPQUICKACTIVATE;

typedef /* [v1_enum] */ 
enum tagQACONTAINERFLAGS
    {	QACONTAINER_SHOWHATCHING	= 0x1,
	QACONTAINER_SHOWGRABHANDLES	= 0x2,
	QACONTAINER_USERMODE	= 0x4,
	QACONTAINER_DISPLAYASDEFAULT	= 0x8,
	QACONTAINER_UIDEAD	= 0x10,
	QACONTAINER_AUTOCLIP	= 0x20,
	QACONTAINER_MESSAGEREFLECT	= 0x40,
	QACONTAINER_SUPPORTSMNEMONICS	= 0x80
    }	QACONTAINERFLAGS;

typedef DWORD OLE_COLOR;

typedef struct tagQACONTAINER
    {
    ULONG cbSize;
    IOleClientSite __RPC_FAR *pClientSite;
    IAdviseSinkEx __RPC_FAR *pAdviseSink;
    IPropertyNotifySink __RPC_FAR *pPropertyNotifySink;
    IUnknown __RPC_FAR *pUnkEventSink;
    DWORD dwAmbientFlags;
    OLE_COLOR colorFore;
    OLE_COLOR colorBack;
    IFont __RPC_FAR *pFont;
    IOleUndoManager __RPC_FAR *pUndoMgr;
    DWORD dwAppearance;
    LONG lcid;
    HPALETTE hpal;
    struct IBindHost __RPC_FAR *pBindHost;
    }	QACONTAINER;

typedef struct tagQACONTROL
    {
    ULONG cbSize;
    DWORD dwMiscStatus;
    DWORD dwViewStatus;
    DWORD dwEventCookie;
    DWORD dwPropNotifyCookie;
    DWORD dwPointerActivationPolicy;
    }	QACONTROL;


EXTERN_C const IID IID_IQuickActivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CF51ED10-62FE-11CF-BF86-00A0C9034836")
    IQuickActivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QuickActivate( 
            /* [in] */ QACONTAINER __RPC_FAR *pQaContainer,
            /* [out] */ QACONTROL __RPC_FAR *pQaControl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetContentExtent( 
            LPSIZEL pSizel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContentExtent( 
            LPSIZEL pSizel) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IQuickActivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IQuickActivate __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IQuickActivate __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IQuickActivate __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QuickActivate )( 
            IQuickActivate __RPC_FAR * This,
            /* [in] */ QACONTAINER __RPC_FAR *pQaContainer,
            /* [out] */ QACONTROL __RPC_FAR *pQaControl);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetContentExtent )( 
            IQuickActivate __RPC_FAR * This,
            LPSIZEL pSizel);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetContentExtent )( 
            IQuickActivate __RPC_FAR * This,
            LPSIZEL pSizel);
        
        END_INTERFACE
    } IQuickActivateVtbl;

    interface IQuickActivate
    {
        CONST_VTBL struct IQuickActivateVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IQuickActivate_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IQuickActivate_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IQuickActivate_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IQuickActivate_QuickActivate(This,pQaContainer,pQaControl)	\
    (This)->lpVtbl -> QuickActivate(This,pQaContainer,pQaControl)

#define IQuickActivate_SetContentExtent(This,pSizel)	\
    (This)->lpVtbl -> SetContentExtent(This,pSizel)

#define IQuickActivate_GetContentExtent(This,pSizel)	\
    (This)->lpVtbl -> GetContentExtent(This,pSizel)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IQuickActivate_QuickActivate_Proxy( 
    IQuickActivate __RPC_FAR * This,
    /* [in] */ QACONTAINER __RPC_FAR *pQaContainer,
    /* [out] */ QACONTROL __RPC_FAR *pQaControl);


void __RPC_STUB IQuickActivate_QuickActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IQuickActivate_SetContentExtent_Proxy( 
    IQuickActivate __RPC_FAR * This,
    LPSIZEL pSizel);


void __RPC_STUB IQuickActivate_SetContentExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IQuickActivate_GetContentExtent_Proxy( 
    IQuickActivate __RPC_FAR * This,
    LPSIZEL pSizel);


void __RPC_STUB IQuickActivate_GetContentExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IQuickActivate_INTERFACE_DEFINED__ */


#ifndef __IPointerInactive_INTERFACE_DEFINED__
#define __IPointerInactive_INTERFACE_DEFINED__

/* interface IPointerInactive */
/* [uuid][unique][object] */ 

typedef IPointerInactive __RPC_FAR *LPPOINTERINACTIVE;

typedef /* [v1_enum] */ 
enum tagPOINTERINACTIVE
    {	POINTERINACTIVE_ACTIVATEONENTRY	= 1,
	POINTERINACTIVE_DEACTIVATEONLEAVE	= 2,
	POINTERINACTIVE_ACTIVATEONDRAG	= 4
    }	POINTERINACTIVE;


EXTERN_C const IID IID_IPointerInactive;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("55980BA0-35AA-11CF-B671-00AA004CD6D8")
    IPointerInactive : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetActivationPolicy( 
            /* [out] */ DWORD __RPC_FAR *pdwPolicy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnInactiveMouseMove( 
            /* [in] */ LPCRECT pRectBounds,
            /* [in] */ LONG x,
            /* [in] */ LONG y,
            /* [in] */ DWORD grfKeyState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnInactiveSetCursor( 
            /* [in] */ LPCRECT pRectBounds,
            /* [in] */ LONG x,
            /* [in] */ LONG y,
            /* [in] */ DWORD dwMouseMsg,
            /* [in] */ BOOL fSetAlways) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPointerInactiveVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPointerInactive __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPointerInactive __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPointerInactive __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetActivationPolicy )( 
            IPointerInactive __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwPolicy);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnInactiveMouseMove )( 
            IPointerInactive __RPC_FAR * This,
            /* [in] */ LPCRECT pRectBounds,
            /* [in] */ LONG x,
            /* [in] */ LONG y,
            /* [in] */ DWORD grfKeyState);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnInactiveSetCursor )( 
            IPointerInactive __RPC_FAR * This,
            /* [in] */ LPCRECT pRectBounds,
            /* [in] */ LONG x,
            /* [in] */ LONG y,
            /* [in] */ DWORD dwMouseMsg,
            /* [in] */ BOOL fSetAlways);
        
        END_INTERFACE
    } IPointerInactiveVtbl;

    interface IPointerInactive
    {
        CONST_VTBL struct IPointerInactiveVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPointerInactive_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPointerInactive_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPointerInactive_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPointerInactive_GetActivationPolicy(This,pdwPolicy)	\
    (This)->lpVtbl -> GetActivationPolicy(This,pdwPolicy)

#define IPointerInactive_OnInactiveMouseMove(This,pRectBounds,x,y,grfKeyState)	\
    (This)->lpVtbl -> OnInactiveMouseMove(This,pRectBounds,x,y,grfKeyState)

#define IPointerInactive_OnInactiveSetCursor(This,pRectBounds,x,y,dwMouseMsg,fSetAlways)	\
    (This)->lpVtbl -> OnInactiveSetCursor(This,pRectBounds,x,y,dwMouseMsg,fSetAlways)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPointerInactive_GetActivationPolicy_Proxy( 
    IPointerInactive __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwPolicy);


void __RPC_STUB IPointerInactive_GetActivationPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPointerInactive_OnInactiveMouseMove_Proxy( 
    IPointerInactive __RPC_FAR * This,
    /* [in] */ LPCRECT pRectBounds,
    /* [in] */ LONG x,
    /* [in] */ LONG y,
    /* [in] */ DWORD grfKeyState);


void __RPC_STUB IPointerInactive_OnInactiveMouseMove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPointerInactive_OnInactiveSetCursor_Proxy( 
    IPointerInactive __RPC_FAR * This,
    /* [in] */ LPCRECT pRectBounds,
    /* [in] */ LONG x,
    /* [in] */ LONG y,
    /* [in] */ DWORD dwMouseMsg,
    /* [in] */ BOOL fSetAlways);


void __RPC_STUB IPointerInactive_OnInactiveSetCursor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPointerInactive_INTERFACE_DEFINED__ */


#ifndef __IObjectWithSite_INTERFACE_DEFINED__
#define __IObjectWithSite_INTERFACE_DEFINED__

/* interface IObjectWithSite */
/* [unique][uuid][object] */ 

typedef IObjectWithSite __RPC_FAR *LPOBJECTWITHSITE;


EXTERN_C const IID IID_IObjectWithSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FC4801A3-2BA9-11CF-A229-00AA003D7352")
    IObjectWithSite : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetSite( 
            /* [in] */ IUnknown __RPC_FAR *pUnkSite) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSite( 
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvSite) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IObjectWithSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IObjectWithSite __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IObjectWithSite __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IObjectWithSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetSite )( 
            IObjectWithSite __RPC_FAR * This,
            /* [in] */ IUnknown __RPC_FAR *pUnkSite);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSite )( 
            IObjectWithSite __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvSite);
        
        END_INTERFACE
    } IObjectWithSiteVtbl;

    interface IObjectWithSite
    {
        CONST_VTBL struct IObjectWithSiteVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IObjectWithSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IObjectWithSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IObjectWithSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IObjectWithSite_SetSite(This,pUnkSite)	\
    (This)->lpVtbl -> SetSite(This,pUnkSite)

#define IObjectWithSite_GetSite(This,riid,ppvSite)	\
    (This)->lpVtbl -> GetSite(This,riid,ppvSite)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IObjectWithSite_SetSite_Proxy( 
    IObjectWithSite __RPC_FAR * This,
    /* [in] */ IUnknown __RPC_FAR *pUnkSite);


void __RPC_STUB IObjectWithSite_SetSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IObjectWithSite_GetSite_Proxy( 
    IObjectWithSite __RPC_FAR * This,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvSite);


void __RPC_STUB IObjectWithSite_GetSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IObjectWithSite_INTERFACE_DEFINED__ */


#ifndef __IErrorLog_INTERFACE_DEFINED__
#define __IErrorLog_INTERFACE_DEFINED__

/* interface IErrorLog */
/* [unique][uuid][object] */ 

typedef IErrorLog __RPC_FAR *LPERRORLOG;


EXTERN_C const IID IID_IErrorLog;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3127CA40-446E-11CE-8135-00AA004BB851")
    IErrorLog : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddError( 
            /* [in] */ LPCOLESTR pszPropName,
            /* [in] */ EXCEPINFO __RPC_FAR *pExcepInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IErrorLogVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IErrorLog __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IErrorLog __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IErrorLog __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *AddError )( 
            IErrorLog __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszPropName,
            /* [in] */ EXCEPINFO __RPC_FAR *pExcepInfo);
        
        END_INTERFACE
    } IErrorLogVtbl;

    interface IErrorLog
    {
        CONST_VTBL struct IErrorLogVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IErrorLog_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IErrorLog_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IErrorLog_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IErrorLog_AddError(This,pszPropName,pExcepInfo)	\
    (This)->lpVtbl -> AddError(This,pszPropName,pExcepInfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IErrorLog_AddError_Proxy( 
    IErrorLog __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszPropName,
    /* [in] */ EXCEPINFO __RPC_FAR *pExcepInfo);


void __RPC_STUB IErrorLog_AddError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IErrorLog_INTERFACE_DEFINED__ */


#ifndef __IPropertyBag_INTERFACE_DEFINED__
#define __IPropertyBag_INTERFACE_DEFINED__

/* interface IPropertyBag */
/* [unique][uuid][object] */ 

typedef IPropertyBag __RPC_FAR *LPPROPERTYBAG;


EXTERN_C const IID IID_IPropertyBag;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("55272A00-42CB-11CE-8135-00AA004BB851")
    IPropertyBag : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Read( 
            /* [in] */ LPCOLESTR pszPropName,
            /* [out][in] */ VARIANT __RPC_FAR *pVar,
            /* [in] */ IErrorLog __RPC_FAR *pErrorLog) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Write( 
            /* [in] */ LPCOLESTR pszPropName,
            /* [in] */ VARIANT __RPC_FAR *pVar) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyBagVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyBag __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyBag __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyBag __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Read )( 
            IPropertyBag __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszPropName,
            /* [out][in] */ VARIANT __RPC_FAR *pVar,
            /* [in] */ IErrorLog __RPC_FAR *pErrorLog);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Write )( 
            IPropertyBag __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszPropName,
            /* [in] */ VARIANT __RPC_FAR *pVar);
        
        END_INTERFACE
    } IPropertyBagVtbl;

    interface IPropertyBag
    {
        CONST_VTBL struct IPropertyBagVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyBag_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyBag_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyBag_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyBag_Read(This,pszPropName,pVar,pErrorLog)	\
    (This)->lpVtbl -> Read(This,pszPropName,pVar,pErrorLog)

#define IPropertyBag_Write(This,pszPropName,pVar)	\
    (This)->lpVtbl -> Write(This,pszPropName,pVar)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IPropertyBag_RemoteRead_Proxy( 
    IPropertyBag __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszPropName,
    /* [out] */ VARIANT __RPC_FAR *pVar,
    /* [in] */ IErrorLog __RPC_FAR *pErrorLog,
    /* [in] */ DWORD varType,
    /* [in] */ IUnknown __RPC_FAR *pUnkObj);


void __RPC_STUB IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyBag_Write_Proxy( 
    IPropertyBag __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszPropName,
    /* [in] */ VARIANT __RPC_FAR *pVar);


void __RPC_STUB IPropertyBag_Write_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyBag_INTERFACE_DEFINED__ */


#ifndef __IPerPropertyBrowsing_INTERFACE_DEFINED__
#define __IPerPropertyBrowsing_INTERFACE_DEFINED__

/* interface IPerPropertyBrowsing */
/* [unique][uuid][object] */ 

typedef IPerPropertyBrowsing __RPC_FAR *LPPERPROPERTYBROWSING;

typedef struct tagCALPOLESTR
    {
    ULONG cElems;
    /* [size_is] */ LPOLESTR __RPC_FAR *pElems;
    }	CALPOLESTR;

typedef struct tagCALPOLESTR __RPC_FAR *LPCALPOLESTR;

typedef struct tagCADWORD
    {
    ULONG cElems;
    /* [size_is] */ DWORD __RPC_FAR *pElems;
    }	CADWORD;

typedef struct tagCADWORD __RPC_FAR *LPCADWORD;


EXTERN_C const IID IID_IPerPropertyBrowsing;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("376BD3AA-3845-101B-84ED-08002B2EC713")
    IPerPropertyBrowsing : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDisplayString( 
            /* [in] */ DISPID dispID,
            /* [out] */ BSTR __RPC_FAR *pBstr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MapPropertyToPage( 
            /* [in] */ DISPID dispID,
            /* [out] */ CLSID __RPC_FAR *pClsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPredefinedStrings( 
            /* [in] */ DISPID dispID,
            /* [out] */ CALPOLESTR __RPC_FAR *pCaStringsOut,
            /* [out] */ CADWORD __RPC_FAR *pCaCookiesOut) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPredefinedValue( 
            /* [in] */ DISPID dispID,
            /* [in] */ DWORD dwCookie,
            /* [out] */ VARIANT __RPC_FAR *pVarOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPerPropertyBrowsingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPerPropertyBrowsing __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPerPropertyBrowsing __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPerPropertyBrowsing __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDisplayString )( 
            IPerPropertyBrowsing __RPC_FAR * This,
            /* [in] */ DISPID dispID,
            /* [out] */ BSTR __RPC_FAR *pBstr);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *MapPropertyToPage )( 
            IPerPropertyBrowsing __RPC_FAR * This,
            /* [in] */ DISPID dispID,
            /* [out] */ CLSID __RPC_FAR *pClsid);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPredefinedStrings )( 
            IPerPropertyBrowsing __RPC_FAR * This,
            /* [in] */ DISPID dispID,
            /* [out] */ CALPOLESTR __RPC_FAR *pCaStringsOut,
            /* [out] */ CADWORD __RPC_FAR *pCaCookiesOut);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPredefinedValue )( 
            IPerPropertyBrowsing __RPC_FAR * This,
            /* [in] */ DISPID dispID,
            /* [in] */ DWORD dwCookie,
            /* [out] */ VARIANT __RPC_FAR *pVarOut);
        
        END_INTERFACE
    } IPerPropertyBrowsingVtbl;

    interface IPerPropertyBrowsing
    {
        CONST_VTBL struct IPerPropertyBrowsingVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPerPropertyBrowsing_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPerPropertyBrowsing_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPerPropertyBrowsing_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPerPropertyBrowsing_GetDisplayString(This,dispID,pBstr)	\
    (This)->lpVtbl -> GetDisplayString(This,dispID,pBstr)

#define IPerPropertyBrowsing_MapPropertyToPage(This,dispID,pClsid)	\
    (This)->lpVtbl -> MapPropertyToPage(This,dispID,pClsid)

#define IPerPropertyBrowsing_GetPredefinedStrings(This,dispID,pCaStringsOut,pCaCookiesOut)	\
    (This)->lpVtbl -> GetPredefinedStrings(This,dispID,pCaStringsOut,pCaCookiesOut)

#define IPerPropertyBrowsing_GetPredefinedValue(This,dispID,dwCookie,pVarOut)	\
    (This)->lpVtbl -> GetPredefinedValue(This,dispID,dwCookie,pVarOut)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPerPropertyBrowsing_GetDisplayString_Proxy( 
    IPerPropertyBrowsing __RPC_FAR * This,
    /* [in] */ DISPID dispID,
    /* [out] */ BSTR __RPC_FAR *pBstr);


void __RPC_STUB IPerPropertyBrowsing_GetDisplayString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPerPropertyBrowsing_MapPropertyToPage_Proxy( 
    IPerPropertyBrowsing __RPC_FAR * This,
    /* [in] */ DISPID dispID,
    /* [out] */ CLSID __RPC_FAR *pClsid);


void __RPC_STUB IPerPropertyBrowsing_MapPropertyToPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPerPropertyBrowsing_GetPredefinedStrings_Proxy( 
    IPerPropertyBrowsing __RPC_FAR * This,
    /* [in] */ DISPID dispID,
    /* [out] */ CALPOLESTR __RPC_FAR *pCaStringsOut,
    /* [out] */ CADWORD __RPC_FAR *pCaCookiesOut);


void __RPC_STUB IPerPropertyBrowsing_GetPredefinedStrings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPerPropertyBrowsing_GetPredefinedValue_Proxy( 
    IPerPropertyBrowsing __RPC_FAR * This,
    /* [in] */ DISPID dispID,
    /* [in] */ DWORD dwCookie,
    /* [out] */ VARIANT __RPC_FAR *pVarOut);


void __RPC_STUB IPerPropertyBrowsing_GetPredefinedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPerPropertyBrowsing_INTERFACE_DEFINED__ */


#ifndef __IPropertyBag2_INTERFACE_DEFINED__
#define __IPropertyBag2_INTERFACE_DEFINED__

/* interface IPropertyBag2 */
/* [unique][uuid][object] */ 

typedef IPropertyBag2 __RPC_FAR *LPPROPERTYBAG2;

typedef /* [v1_enum] */ 
enum tagPROPBAG2_TYPE
    {	PROPBAG2_TYPE_UNDEFINED	= 0,
	PROPBAG2_TYPE_DATA	= 1,
	PROPBAG2_TYPE_URL	= 2,
	PROPBAG2_TYPE_OBJECT	= 3,
	PROPBAG2_TYPE_STREAM	= 4,
	PROPBAG2_TYPE_STORAGE	= 5,
	PROPBAG2_TYPE_MONIKER	= 6
    }	PROPBAG2_TYPE;

typedef struct tagPROPBAG2
    {
    DWORD dwType;
    VARTYPE vt;
    CLIPFORMAT cfType;
    DWORD dwHint;
    LPOLESTR pstrName;
    CLSID clsid;
    }	PROPBAG2;


EXTERN_C const IID IID_IPropertyBag2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("22F55882-280B-11d0-A8A9-00A0C90C2004")
    IPropertyBag2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Read( 
            /* [in] */ ULONG cProperties,
            /* [size_is][in] */ PROPBAG2 __RPC_FAR *pPropBag,
            /* [unique][in] */ IErrorLog __RPC_FAR *pErrLog,
            /* [size_is][out] */ VARIANT __RPC_FAR *pvarValue,
            /* [size_is][unique][out][in] */ HRESULT __RPC_FAR *phrError) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Write( 
            /* [in] */ ULONG cProperties,
            /* [size_is][in] */ PROPBAG2 __RPC_FAR *pPropBag,
            /* [size_is][in] */ VARIANT __RPC_FAR *pvarValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CountProperties( 
            /* [out] */ ULONG __RPC_FAR *pcProperties) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyInfo( 
            /* [in] */ ULONG iProperty,
            /* [in] */ ULONG cProperties,
            /* [size_is][out] */ PROPBAG2 __RPC_FAR *pPropBag,
            /* [out] */ ULONG __RPC_FAR *pcProperties) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LoadObject( 
            /* [in] */ LPCOLESTR pstrName,
            /* [in] */ DWORD dwHint,
            /* [in] */ IUnknown __RPC_FAR *pUnkObject,
            /* [unique][in] */ IErrorLog __RPC_FAR *pErrLog) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyBag2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyBag2 __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyBag2 __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyBag2 __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Read )( 
            IPropertyBag2 __RPC_FAR * This,
            /* [in] */ ULONG cProperties,
            /* [size_is][in] */ PROPBAG2 __RPC_FAR *pPropBag,
            /* [unique][in] */ IErrorLog __RPC_FAR *pErrLog,
            /* [size_is][out] */ VARIANT __RPC_FAR *pvarValue,
            /* [size_is][unique][out][in] */ HRESULT __RPC_FAR *phrError);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Write )( 
            IPropertyBag2 __RPC_FAR * This,
            /* [in] */ ULONG cProperties,
            /* [size_is][in] */ PROPBAG2 __RPC_FAR *pPropBag,
            /* [size_is][in] */ VARIANT __RPC_FAR *pvarValue);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CountProperties )( 
            IPropertyBag2 __RPC_FAR * This,
            /* [out] */ ULONG __RPC_FAR *pcProperties);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyInfo )( 
            IPropertyBag2 __RPC_FAR * This,
            /* [in] */ ULONG iProperty,
            /* [in] */ ULONG cProperties,
            /* [size_is][out] */ PROPBAG2 __RPC_FAR *pPropBag,
            /* [out] */ ULONG __RPC_FAR *pcProperties);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LoadObject )( 
            IPropertyBag2 __RPC_FAR * This,
            /* [in] */ LPCOLESTR pstrName,
            /* [in] */ DWORD dwHint,
            /* [in] */ IUnknown __RPC_FAR *pUnkObject,
            /* [unique][in] */ IErrorLog __RPC_FAR *pErrLog);
        
        END_INTERFACE
    } IPropertyBag2Vtbl;

    interface IPropertyBag2
    {
        CONST_VTBL struct IPropertyBag2Vtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyBag2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyBag2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyBag2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyBag2_Read(This,cProperties,pPropBag,pErrLog,pvarValue,phrError)	\
    (This)->lpVtbl -> Read(This,cProperties,pPropBag,pErrLog,pvarValue,phrError)

#define IPropertyBag2_Write(This,cProperties,pPropBag,pvarValue)	\
    (This)->lpVtbl -> Write(This,cProperties,pPropBag,pvarValue)

#define IPropertyBag2_CountProperties(This,pcProperties)	\
    (This)->lpVtbl -> CountProperties(This,pcProperties)

#define IPropertyBag2_GetPropertyInfo(This,iProperty,cProperties,pPropBag,pcProperties)	\
    (This)->lpVtbl -> GetPropertyInfo(This,iProperty,cProperties,pPropBag,pcProperties)

#define IPropertyBag2_LoadObject(This,pstrName,dwHint,pUnkObject,pErrLog)	\
    (This)->lpVtbl -> LoadObject(This,pstrName,dwHint,pUnkObject,pErrLog)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyBag2_Read_Proxy( 
    IPropertyBag2 __RPC_FAR * This,
    /* [in] */ ULONG cProperties,
    /* [size_is][in] */ PROPBAG2 __RPC_FAR *pPropBag,
    /* [unique][in] */ IErrorLog __RPC_FAR *pErrLog,
    /* [size_is][out] */ VARIANT __RPC_FAR *pvarValue,
    /* [size_is][unique][out][in] */ HRESULT __RPC_FAR *phrError);


void __RPC_STUB IPropertyBag2_Read_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyBag2_Write_Proxy( 
    IPropertyBag2 __RPC_FAR * This,
    /* [in] */ ULONG cProperties,
    /* [size_is][in] */ PROPBAG2 __RPC_FAR *pPropBag,
    /* [size_is][in] */ VARIANT __RPC_FAR *pvarValue);


void __RPC_STUB IPropertyBag2_Write_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyBag2_CountProperties_Proxy( 
    IPropertyBag2 __RPC_FAR * This,
    /* [out] */ ULONG __RPC_FAR *pcProperties);


void __RPC_STUB IPropertyBag2_CountProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyBag2_GetPropertyInfo_Proxy( 
    IPropertyBag2 __RPC_FAR * This,
    /* [in] */ ULONG iProperty,
    /* [in] */ ULONG cProperties,
    /* [size_is][out] */ PROPBAG2 __RPC_FAR *pPropBag,
    /* [out] */ ULONG __RPC_FAR *pcProperties);


void __RPC_STUB IPropertyBag2_GetPropertyInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyBag2_LoadObject_Proxy( 
    IPropertyBag2 __RPC_FAR * This,
    /* [in] */ LPCOLESTR pstrName,
    /* [in] */ DWORD dwHint,
    /* [in] */ IUnknown __RPC_FAR *pUnkObject,
    /* [unique][in] */ IErrorLog __RPC_FAR *pErrLog);


void __RPC_STUB IPropertyBag2_LoadObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyBag2_INTERFACE_DEFINED__ */


#ifndef __IPersistPropertyBag2_INTERFACE_DEFINED__
#define __IPersistPropertyBag2_INTERFACE_DEFINED__

/* interface IPersistPropertyBag2 */
/* [unique][uuid][object] */ 

typedef IPersistPropertyBag2 __RPC_FAR *LPPERSISTPROPERTYBAG2;


EXTERN_C const IID IID_IPersistPropertyBag2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("22F55881-280B-11d0-A8A9-00A0C90C2004")
    IPersistPropertyBag2 : public IPersist
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InitNew( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Load( 
            /* [in] */ IPropertyBag2 __RPC_FAR *pPropBag,
            /* [unique][in] */ IErrorLog __RPC_FAR *pErrLog) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( 
            /* [in] */ IPropertyBag2 __RPC_FAR *pPropBag,
            /* [in] */ BOOL fClearDirty,
            /* [in] */ BOOL fSaveAllProperties) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsDirty( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPersistPropertyBag2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPersistPropertyBag2 __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPersistPropertyBag2 __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPersistPropertyBag2 __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassID )( 
            IPersistPropertyBag2 __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClassID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InitNew )( 
            IPersistPropertyBag2 __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Load )( 
            IPersistPropertyBag2 __RPC_FAR * This,
            /* [in] */ IPropertyBag2 __RPC_FAR *pPropBag,
            /* [unique][in] */ IErrorLog __RPC_FAR *pErrLog);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Save )( 
            IPersistPropertyBag2 __RPC_FAR * This,
            /* [in] */ IPropertyBag2 __RPC_FAR *pPropBag,
            /* [in] */ BOOL fClearDirty,
            /* [in] */ BOOL fSaveAllProperties);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsDirty )( 
            IPersistPropertyBag2 __RPC_FAR * This);
        
        END_INTERFACE
    } IPersistPropertyBag2Vtbl;

    interface IPersistPropertyBag2
    {
        CONST_VTBL struct IPersistPropertyBag2Vtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPersistPropertyBag2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPersistPropertyBag2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPersistPropertyBag2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPersistPropertyBag2_GetClassID(This,pClassID)	\
    (This)->lpVtbl -> GetClassID(This,pClassID)


#define IPersistPropertyBag2_InitNew(This)	\
    (This)->lpVtbl -> InitNew(This)

#define IPersistPropertyBag2_Load(This,pPropBag,pErrLog)	\
    (This)->lpVtbl -> Load(This,pPropBag,pErrLog)

#define IPersistPropertyBag2_Save(This,pPropBag,fClearDirty,fSaveAllProperties)	\
    (This)->lpVtbl -> Save(This,pPropBag,fClearDirty,fSaveAllProperties)

#define IPersistPropertyBag2_IsDirty(This)	\
    (This)->lpVtbl -> IsDirty(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPersistPropertyBag2_InitNew_Proxy( 
    IPersistPropertyBag2 __RPC_FAR * This);


void __RPC_STUB IPersistPropertyBag2_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistPropertyBag2_Load_Proxy( 
    IPersistPropertyBag2 __RPC_FAR * This,
    /* [in] */ IPropertyBag2 __RPC_FAR *pPropBag,
    /* [unique][in] */ IErrorLog __RPC_FAR *pErrLog);


void __RPC_STUB IPersistPropertyBag2_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistPropertyBag2_Save_Proxy( 
    IPersistPropertyBag2 __RPC_FAR * This,
    /* [in] */ IPropertyBag2 __RPC_FAR *pPropBag,
    /* [in] */ BOOL fClearDirty,
    /* [in] */ BOOL fSaveAllProperties);


void __RPC_STUB IPersistPropertyBag2_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistPropertyBag2_IsDirty_Proxy( 
    IPersistPropertyBag2 __RPC_FAR * This);


void __RPC_STUB IPersistPropertyBag2_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPersistPropertyBag2_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long __RPC_FAR *, unsigned long            , BSTR __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  BSTR_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  BSTR_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long __RPC_FAR *, BSTR __RPC_FAR * ); 

unsigned long             __RPC_USER  CLIPFORMAT_UserSize(     unsigned long __RPC_FAR *, unsigned long            , CLIPFORMAT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  CLIPFORMAT_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, CLIPFORMAT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  CLIPFORMAT_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, CLIPFORMAT __RPC_FAR * ); 
void                      __RPC_USER  CLIPFORMAT_UserFree(     unsigned long __RPC_FAR *, CLIPFORMAT __RPC_FAR * ); 

unsigned long             __RPC_USER  HACCEL_UserSize(     unsigned long __RPC_FAR *, unsigned long            , HACCEL __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HACCEL_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HACCEL __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HACCEL_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HACCEL __RPC_FAR * ); 
void                      __RPC_USER  HACCEL_UserFree(     unsigned long __RPC_FAR *, HACCEL __RPC_FAR * ); 

unsigned long             __RPC_USER  HDC_UserSize(     unsigned long __RPC_FAR *, unsigned long            , HDC __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HDC_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HDC __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HDC_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HDC __RPC_FAR * ); 
void                      __RPC_USER  HDC_UserFree(     unsigned long __RPC_FAR *, HDC __RPC_FAR * ); 

unsigned long             __RPC_USER  HFONT_UserSize(     unsigned long __RPC_FAR *, unsigned long            , HFONT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HFONT_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HFONT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HFONT_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HFONT __RPC_FAR * ); 
void                      __RPC_USER  HFONT_UserFree(     unsigned long __RPC_FAR *, HFONT __RPC_FAR * ); 

unsigned long             __RPC_USER  HWND_UserSize(     unsigned long __RPC_FAR *, unsigned long            , HWND __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HWND_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HWND __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HWND_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HWND __RPC_FAR * ); 
void                      __RPC_USER  HWND_UserFree(     unsigned long __RPC_FAR *, HWND __RPC_FAR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long __RPC_FAR *, unsigned long            , VARIANT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  VARIANT_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, VARIANT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  VARIANT_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, VARIANT __RPC_FAR * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long __RPC_FAR *, VARIANT __RPC_FAR * ); 

/* [local] */ HRESULT STDMETHODCALLTYPE IEnumConnections_Next_Proxy( 
    IEnumConnections __RPC_FAR * This,
    /* [in] */ ULONG cConnections,
    /* [length_is][size_is][out] */ LPCONNECTDATA rgcd,
    /* [out] */ ULONG __RPC_FAR *pcFetched);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumConnections_Next_Stub( 
    IEnumConnections __RPC_FAR * This,
    /* [in] */ ULONG cConnections,
    /* [length_is][size_is][out] */ LPCONNECTDATA rgcd,
    /* [out] */ ULONG __RPC_FAR *pcFetched);

/* [local] */ HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Next_Proxy( 
    IEnumConnectionPoints __RPC_FAR * This,
    /* [in] */ ULONG cConnections,
    /* [length_is][size_is][out] */ LPCONNECTIONPOINT __RPC_FAR *ppCP,
    /* [out] */ ULONG __RPC_FAR *pcFetched);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Next_Stub( 
    IEnumConnectionPoints __RPC_FAR * This,
    /* [in] */ ULONG cConnections,
    /* [length_is][size_is][out] */ LPCONNECTIONPOINT __RPC_FAR *ppCP,
    /* [out] */ ULONG __RPC_FAR *pcFetched);

/* [local] */ HRESULT STDMETHODCALLTYPE IClassFactory2_CreateInstanceLic_Proxy( 
    IClassFactory2 __RPC_FAR * This,
    /* [in] */ IUnknown __RPC_FAR *pUnkOuter,
    /* [in] */ IUnknown __RPC_FAR *pUnkReserved,
    /* [in] */ REFIID riid,
    /* [in] */ BSTR bstrKey,
    /* [iid_is][out] */ PVOID __RPC_FAR *ppvObj);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IClassFactory2_CreateInstanceLic_Stub( 
    IClassFactory2 __RPC_FAR * This,
    /* [in] */ REFIID riid,
    /* [in] */ BSTR bstrKey,
    /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppvObj);

/* [local] */ HRESULT STDMETHODCALLTYPE IPersistMemory_Load_Proxy( 
    IPersistMemory __RPC_FAR * This,
    /* [size_is][in] */ LPVOID pMem,
    /* [in] */ ULONG cbSize);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPersistMemory_Load_Stub( 
    IPersistMemory __RPC_FAR * This,
    /* [size_is][in] */ BYTE __RPC_FAR *pMem,
    /* [in] */ ULONG cbSize);

/* [local] */ HRESULT STDMETHODCALLTYPE IPersistMemory_Save_Proxy( 
    IPersistMemory __RPC_FAR * This,
    /* [size_is][in] */ LPVOID pMem,
    /* [in] */ BOOL fClearDirty,
    /* [in] */ ULONG cbSize);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPersistMemory_Save_Stub( 
    IPersistMemory __RPC_FAR * This,
    /* [size_is][in] */ BYTE __RPC_FAR *pMem,
    /* [in] */ BOOL fClearDirty,
    /* [in] */ ULONG cbSize);

/* [local] */ void STDMETHODCALLTYPE IAdviseSinkEx_OnViewStatusChange_Proxy( 
    IAdviseSinkEx __RPC_FAR * This,
    /* [in] */ DWORD dwViewStatus);


/* [async][call_as] */ void STDMETHODCALLTYPE IAdviseSinkEx_OnViewStatusChange_Stub( 
    IAdviseSinkEx __RPC_FAR * This,
    /* [in] */ DWORD dwViewStatus);

/* [local] */ HRESULT STDMETHODCALLTYPE IEnumOleUndoUnits_Next_Proxy( 
    IEnumOleUndoUnits __RPC_FAR * This,
    /* [in] */ ULONG cElt,
    /* [length_is][size_is][out] */ IOleUndoUnit __RPC_FAR *__RPC_FAR *rgElt,
    /* [out] */ ULONG __RPC_FAR *pcEltFetched);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumOleUndoUnits_Next_Stub( 
    IEnumOleUndoUnits __RPC_FAR * This,
    /* [in] */ ULONG cElt,
    /* [length_is][size_is][out] */ IOleUndoUnit __RPC_FAR *__RPC_FAR *rgElt,
    /* [out] */ ULONG __RPC_FAR *pcEltFetched);

/* [local] */ HRESULT STDMETHODCALLTYPE IPropertyBag_Read_Proxy( 
    IPropertyBag __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszPropName,
    /* [out][in] */ VARIANT __RPC_FAR *pVar,
    /* [in] */ IErrorLog __RPC_FAR *pErrorLog);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPropertyBag_Read_Stub( 
    IPropertyBag __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszPropName,
    /* [out] */ VARIANT __RPC_FAR *pVar,
    /* [in] */ IErrorLog __RPC_FAR *pErrorLog,
    /* [in] */ DWORD varType,
    /* [in] */ IUnknown __RPC_FAR *pUnkObj);



/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\oleacc.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//
//+---------------------------------------------------------------------------

#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 5.03.0286 */
/* at Tue Mar 20 15:20:57 2007
 */
/* Compiler settings for ..\oleacc.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32 (32b run), ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __oleacc_h__
#define __oleacc_h__

/* Forward Declarations */ 

#ifndef __IAccessible_FWD_DEFINED__
#define __IAccessible_FWD_DEFINED__
typedef interface IAccessible IAccessible;
#endif 	/* __IAccessible_FWD_DEFINED__ */


#ifndef __IAccessibleHandler_FWD_DEFINED__
#define __IAccessibleHandler_FWD_DEFINED__
typedef interface IAccessibleHandler IAccessibleHandler;
#endif 	/* __IAccessibleHandler_FWD_DEFINED__ */


#ifndef __IAccIdentity_FWD_DEFINED__
#define __IAccIdentity_FWD_DEFINED__
typedef interface IAccIdentity IAccIdentity;
#endif 	/* __IAccIdentity_FWD_DEFINED__ */


#ifndef __IAccPropServer_FWD_DEFINED__
#define __IAccPropServer_FWD_DEFINED__
typedef interface IAccPropServer IAccPropServer;
#endif 	/* __IAccPropServer_FWD_DEFINED__ */


#ifndef __IAccPropServices_FWD_DEFINED__
#define __IAccPropServices_FWD_DEFINED__
typedef interface IAccPropServices IAccPropServices;
#endif 	/* __IAccPropServices_FWD_DEFINED__ */


#ifndef __IAccessible_FWD_DEFINED__
#define __IAccessible_FWD_DEFINED__
typedef interface IAccessible IAccessible;
#endif 	/* __IAccessible_FWD_DEFINED__ */


#ifndef __IAccessibleHandler_FWD_DEFINED__
#define __IAccessibleHandler_FWD_DEFINED__
typedef interface IAccessibleHandler IAccessibleHandler;
#endif 	/* __IAccessibleHandler_FWD_DEFINED__ */


#ifndef __IAccIdentity_FWD_DEFINED__
#define __IAccIdentity_FWD_DEFINED__
typedef interface IAccIdentity IAccIdentity;
#endif 	/* __IAccIdentity_FWD_DEFINED__ */


#ifndef __IAccPropServer_FWD_DEFINED__
#define __IAccPropServer_FWD_DEFINED__
typedef interface IAccPropServer IAccPropServer;
#endif 	/* __IAccPropServer_FWD_DEFINED__ */


#ifndef __IAccPropServices_FWD_DEFINED__
#define __IAccPropServices_FWD_DEFINED__
typedef interface IAccPropServices IAccPropServices;
#endif 	/* __IAccPropServices_FWD_DEFINED__ */


#ifndef __CAccPropServices_FWD_DEFINED__
#define __CAccPropServices_FWD_DEFINED__

#ifdef __cplusplus
typedef class CAccPropServices CAccPropServices;
#else
typedef struct CAccPropServices CAccPropServices;
#endif /* __cplusplus */

#endif 	/* __CAccPropServices_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/* interface __MIDL_itf_oleacc_0000 */
/* [local] */ 

//=--------------------------------------------------------------------------=
// OLEACC.H
//=--------------------------------------------------------------------------=
// (C) Copyright (c) Microsoft Corporation. All rights reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=

//=--------------------------------------------------------------------------=
// Typedefs
//=--------------------------------------------------------------------------=

typedef LRESULT (STDAPICALLTYPE *LPFNLRESULTFROMOBJECT)(REFIID riid, WPARAM wParam, LPUNKNOWN punk);
typedef HRESULT (STDAPICALLTYPE *LPFNOBJECTFROMLRESULT)(LRESULT lResult, REFIID riid, WPARAM wParam, void** ppvObject);
typedef HRESULT (STDAPICALLTYPE *LPFNACCESSIBLEOBJECTFROMWINDOW)(HWND hwnd, DWORD dwId, REFIID riid, void** ppvObject);
typedef HRESULT (STDAPICALLTYPE *LPFNACCESSIBLEOBJECTFROMPOINT)(POINT ptScreen, IAccessible** ppacc, VARIANT* pvarChild);
typedef HRESULT (STDAPICALLTYPE *LPFNCREATESTDACCESSIBLEOBJECT)(HWND hwnd, LONG idObject, REFIID riid, void** ppvObject);
typedef HRESULT (STDAPICALLTYPE *LPFNACCESSIBLECHILDREN)(IAccessible* paccContainer, LONG iChildStart,LONG cChildren,VARIANT* rgvarChildren,LONG* pcObtained);

//=--------------------------------------------------------------------------=
// GUIDs
//=--------------------------------------------------------------------------=

DEFINE_GUID(LIBID_Accessibility,     0x1ea4dbf0, 0x3c3b, 0x11cf, 0x81, 0x0c, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(IID_IAccessible,         0x618736e0, 0x3c3d, 0x11cf, 0x81, 0x0c, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(IID_IAccessibleHandler,  0x03022430, 0xABC4, 0x11d0, 0xBD, 0xE2, 0x00, 0xAA, 0x00, 0x1A, 0x19, 0x53);
DEFINE_GUID(IID_IAccIdentity,        0x7852b78d, 0x1cfd, 0x41c1, 0xa6, 0x15, 0x9c, 0x0c, 0x85, 0x96, 0x0b, 0x5f);
DEFINE_GUID(IID_IAccPropServer,      0x76c0dbbb, 0x15e0, 0x4e7b, 0xb6, 0x1b, 0x20, 0xee, 0xea, 0x20, 0x01, 0xe0);
DEFINE_GUID(IID_IAccPropServices,    0x6e26e776, 0x04f0, 0x495d, 0x80, 0xe4, 0x33, 0x30, 0x35, 0x2e, 0x31, 0x69);
DEFINE_GUID(IID_IAccPropMgrInternal, 0x2bd370a9, 0x3e7f, 0x4edd, 0x8a, 0x85, 0xf8, 0xfe, 0xd1, 0xf8, 0xe5, 0x1f);
DEFINE_GUID(CLSID_AccPropServices,   0xb5f8350b, 0x0548, 0x48b1, 0xa6, 0xee, 0x88, 0xbd, 0x00, 0xb4, 0xa5, 0xe7);
DEFINE_GUID(IIS_IsOleaccProxy,       0x902697fa, 0x80e4, 0x4560, 0x80, 0x2a, 0xa1, 0x3f, 0x22, 0xa6, 0x47, 0x09);

//=--------------------------------------------------------------------------=
// MSAA API Prototypes
//=--------------------------------------------------------------------------=

STDAPI_(LRESULT) LresultFromObject(REFIID riid, WPARAM wParam, LPUNKNOWN punk);
STDAPI          ObjectFromLresult(LRESULT lResult, REFIID riid, WPARAM wParam, void** ppvObject);
STDAPI          WindowFromAccessibleObject(IAccessible*, HWND* phwnd);
STDAPI          AccessibleObjectFromWindow(HWND hwnd, DWORD dwId, REFIID riid, void **ppvObject);
STDAPI          AccessibleObjectFromEvent(HWND hwnd, DWORD dwId, DWORD dwChildId, IAccessible** ppacc, VARIANT* pvarChild);
STDAPI          AccessibleObjectFromPoint(POINT ptScreen, IAccessible ** ppacc, VARIANT* pvarChild);
STDAPI          AccessibleChildren (IAccessible* paccContainer, LONG iChildStart,LONG cChildren, VARIANT* rgvarChildren,LONG* pcObtained);

STDAPI_(UINT)   GetRoleTextA(DWORD lRole, __out_ecount(cchRoleMax) LPSTR lpszRole, UINT cchRoleMax);
STDAPI_(UINT)   GetRoleTextW(DWORD lRole, __out_ecount(cchRoleMax) LPWSTR lpszRole, UINT cchRoleMax);

#ifdef UNICODE
#define GetRoleText     GetRoleTextW
#else
#define GetRoleText     GetRoleTextA
#endif // UNICODE

STDAPI_(UINT)   GetStateTextA(DWORD lStateBit, __out_ecount(cchState) LPSTR lpszState, UINT cchState);
STDAPI_(UINT)   GetStateTextW(DWORD lStateBit, __out_ecount(cchState) LPWSTR lpszState, UINT cchState);
#ifdef UNICODE
#define GetStateText    GetStateTextW
#else
#define GetStateText    GetStateTextA
#endif // UNICODE

STDAPI_(VOID)   GetOleaccVersionInfo(DWORD* pVer, DWORD* pBuild);

STDAPI          CreateStdAccessibleObject(HWND hwnd, LONG idObject, REFIID riid, void** ppvObject);

STDAPI          CreateStdAccessibleProxyA(HWND hwnd, LPCSTR pClassName, LONG idObject, REFIID riid, void** ppvObject);
STDAPI          CreateStdAccessibleProxyW(HWND hwnd, LPCWSTR pClassName, LONG idObject, REFIID riid, void** ppvObject);

#ifdef UNICODE
#define CreateStdAccessibleProxy     CreateStdAccessibleProxyW
#else
#define CreateStdAccessibleProxy     CreateStdAccessibleProxyA
#endif // UNICODE


// Simple Owner-Drawn Menu support...

#define MSAA_MENU_SIG 0xAA0DF00DL

// Menu's dwItemData should point to one of these structs:
// (or can point to an app-defined struct containing this as the first member)
typedef struct tagMSAAMENUINFO {
    DWORD   dwMSAASignature; // Must be MSAA_MENU_SIG
    DWORD   cchWText;        // Length of text, in Unicode characters, excluding terminating NUL
    LPWSTR  pszWText;        // NUL-terminated text, in Unicode
} MSAAMENUINFO, *LPMSAAMENUINFO;


//=--------------------------------------------------------------------------=
// Property GUIDs (used by annotation interfaces)
//=--------------------------------------------------------------------------=

DEFINE_GUID( PROPID_ACC_NAME             , 0x608d3df8, 0x8128, 0x4aa7, 0xa4, 0x28, 0xf5, 0x5e, 0x49, 0x26, 0x72, 0x91);
DEFINE_GUID( PROPID_ACC_VALUE            , 0x123fe443, 0x211a, 0x4615, 0x95, 0x27, 0xc4, 0x5a, 0x7e, 0x93, 0x71, 0x7a);
DEFINE_GUID( PROPID_ACC_DESCRIPTION      , 0x4d48dfe4, 0xbd3f, 0x491f, 0xa6, 0x48, 0x49, 0x2d, 0x6f, 0x20, 0xc5, 0x88);
DEFINE_GUID( PROPID_ACC_ROLE             , 0xcb905ff2, 0x7bd1, 0x4c05, 0xb3, 0xc8, 0xe6, 0xc2, 0x41, 0x36, 0x4d, 0x70);
DEFINE_GUID( PROPID_ACC_STATE            , 0xa8d4d5b0, 0x0a21, 0x42d0, 0xa5, 0xc0, 0x51, 0x4e, 0x98, 0x4f, 0x45, 0x7b);
DEFINE_GUID( PROPID_ACC_HELP             , 0xc831e11f, 0x44db, 0x4a99, 0x97, 0x68, 0xcb, 0x8f, 0x97, 0x8b, 0x72, 0x31);
DEFINE_GUID( PROPID_ACC_KEYBOARDSHORTCUT , 0x7d9bceee, 0x7d1e, 0x4979, 0x93, 0x82, 0x51, 0x80, 0xf4, 0x17, 0x2c, 0x34);
DEFINE_GUID( PROPID_ACC_DEFAULTACTION    , 0x180c072b, 0xc27f, 0x43c7, 0x99, 0x22, 0xf6, 0x35, 0x62, 0xa4, 0x63, 0x2b);

DEFINE_GUID( PROPID_ACC_HELPTOPIC        , 0x787d1379, 0x8ede, 0x440b, 0x8a, 0xec, 0x11, 0xf7, 0xbf, 0x90, 0x30, 0xb3);
DEFINE_GUID( PROPID_ACC_FOCUS            , 0x6eb335df, 0x1c29, 0x4127, 0xb1, 0x2c, 0xde, 0xe9, 0xfd, 0x15, 0x7f, 0x2b);
DEFINE_GUID( PROPID_ACC_SELECTION        , 0xb99d073c, 0xd731, 0x405b, 0x90, 0x61, 0xd9, 0x5e, 0x8f, 0x84, 0x29, 0x84);
DEFINE_GUID( PROPID_ACC_PARENT           , 0x474c22b6, 0xffc2, 0x467a, 0xb1, 0xb5, 0xe9, 0x58, 0xb4, 0x65, 0x73, 0x30);

DEFINE_GUID( PROPID_ACC_NAV_UP           , 0x016e1a2b, 0x1a4e, 0x4767, 0x86, 0x12, 0x33, 0x86, 0xf6, 0x69, 0x35, 0xec);
DEFINE_GUID( PROPID_ACC_NAV_DOWN         , 0x031670ed, 0x3cdf, 0x48d2, 0x96, 0x13, 0x13, 0x8f, 0x2d, 0xd8, 0xa6, 0x68);
DEFINE_GUID( PROPID_ACC_NAV_LEFT         , 0x228086cb, 0x82f1, 0x4a39, 0x87, 0x05, 0xdc, 0xdc, 0x0f, 0xff, 0x92, 0xf5);
DEFINE_GUID( PROPID_ACC_NAV_RIGHT        , 0xcd211d9f, 0xe1cb, 0x4fe5, 0xa7, 0x7c, 0x92, 0x0b, 0x88, 0x4d, 0x09, 0x5b);
DEFINE_GUID( PROPID_ACC_NAV_PREV         , 0x776d3891, 0xc73b, 0x4480, 0xb3, 0xf6, 0x07, 0x6a, 0x16, 0xa1, 0x5a, 0xf6);
DEFINE_GUID( PROPID_ACC_NAV_NEXT         , 0x1cdc5455, 0x8cd9, 0x4c92, 0xa3, 0x71, 0x39, 0x39, 0xa2, 0xfe, 0x3e, 0xee);
DEFINE_GUID( PROPID_ACC_NAV_FIRSTCHILD   , 0xcfd02558, 0x557b, 0x4c67, 0x84, 0xf9, 0x2a, 0x09, 0xfc, 0xe4, 0x07, 0x49);
DEFINE_GUID( PROPID_ACC_NAV_LASTCHILD    , 0x302ecaa5, 0x48d5, 0x4f8d, 0xb6, 0x71, 0x1a, 0x8d, 0x20, 0xa7, 0x78, 0x32);

// Value map, used by sliders and other controls...
DEFINE_GUID( PROPID_ACC_ROLEMAP          , 0xf79acda2, 0x140d, 0x4fe6, 0x89, 0x14, 0x20, 0x84, 0x76, 0x32, 0x82, 0x69);
DEFINE_GUID( PROPID_ACC_VALUEMAP         , 0xda1c3d79, 0xfc5c, 0x420e, 0xb3, 0x99, 0x9d, 0x15, 0x33, 0x54, 0x9e, 0x75);
DEFINE_GUID( PROPID_ACC_STATEMAP         , 0x43946c5e, 0x0ac0, 0x4042, 0xb5, 0x25, 0x07, 0xbb, 0xdb, 0xe1, 0x7f, 0xa7);
DEFINE_GUID( PROPID_ACC_DESCRIPTIONMAP   , 0x1ff1435f, 0x8a14, 0x477b, 0xb2, 0x26, 0xa0, 0xab, 0xe2, 0x79, 0x97, 0x5d);

DEFINE_GUID( PROPID_ACC_DODEFAULTACTION  , 0x1ba09523, 0x2e3b, 0x49a6, 0xa0, 0x59, 0x59, 0x68, 0x2a, 0x3c, 0x48, 0xfd);

//=--------------------------------------------------------------------------=
// Interface Definitions
//=--------------------------------------------------------------------------=



extern RPC_IF_HANDLE __MIDL_itf_oleacc_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleacc_0000_v0_0_s_ifspec;

#ifndef __IAccessible_INTERFACE_DEFINED__
#define __IAccessible_INTERFACE_DEFINED__

/* interface IAccessible */
/* [unique][dual][hidden][uuid][object] */ 

#define	DISPID_ACC_PARENT	( -5000 )

#define	DISPID_ACC_CHILDCOUNT	( -5001 )

#define	DISPID_ACC_CHILD	( -5002 )

#define	DISPID_ACC_NAME	( -5003 )

#define	DISPID_ACC_VALUE	( -5004 )

#define	DISPID_ACC_DESCRIPTION	( -5005 )

#define	DISPID_ACC_ROLE	( -5006 )

#define	DISPID_ACC_STATE	( -5007 )

#define	DISPID_ACC_HELP	( -5008 )

#define	DISPID_ACC_HELPTOPIC	( -5009 )

#define	DISPID_ACC_KEYBOARDSHORTCUT	( -5010 )

#define	DISPID_ACC_FOCUS	( -5011 )

#define	DISPID_ACC_SELECTION	( -5012 )

#define	DISPID_ACC_DEFAULTACTION	( -5013 )

#define	DISPID_ACC_SELECT	( -5014 )

#define	DISPID_ACC_LOCATION	( -5015 )

#define	DISPID_ACC_NAVIGATE	( -5016 )

#define	DISPID_ACC_HITTEST	( -5017 )

#define	DISPID_ACC_DODEFAULTACTION	( -5018 )

typedef /* [unique] */ IAccessible __RPC_FAR *LPACCESSIBLE;

#define	NAVDIR_MIN	( 0 )

#define	NAVDIR_UP	( 0x1 )

#define	NAVDIR_DOWN	( 0x2 )

#define	NAVDIR_LEFT	( 0x3 )

#define	NAVDIR_RIGHT	( 0x4 )

#define	NAVDIR_NEXT	( 0x5 )

#define	NAVDIR_PREVIOUS	( 0x6 )

#define	NAVDIR_FIRSTCHILD	( 0x7 )

#define	NAVDIR_LASTCHILD	( 0x8 )

#define	NAVDIR_MAX	( 0x9 )

#define	SELFLAG_NONE	( 0 )

#define	SELFLAG_TAKEFOCUS	( 0x1 )

#define	SELFLAG_TAKESELECTION	( 0x2 )

#define	SELFLAG_EXTENDSELECTION	( 0x4 )

#define	SELFLAG_ADDSELECTION	( 0x8 )

#define	SELFLAG_REMOVESELECTION	( 0x10 )

#define	SELFLAG_VALID	( 0x1f )

#ifndef STATE_SYSTEM_UNAVAILABLE
#define	STATE_SYSTEM_NORMAL	( 0 )

#define	STATE_SYSTEM_UNAVAILABLE	( 0x1 )

#define	STATE_SYSTEM_SELECTED	( 0x2 )

#define	STATE_SYSTEM_FOCUSED	( 0x4 )

#define	STATE_SYSTEM_PRESSED	( 0x8 )

#define	STATE_SYSTEM_CHECKED	( 0x10 )

#define	STATE_SYSTEM_MIXED	( 0x20 )

#define	STATE_SYSTEM_INDETERMINATE	( STATE_SYSTEM_MIXED )

#define	STATE_SYSTEM_READONLY	( 0x40 )

#define	STATE_SYSTEM_HOTTRACKED	( 0x80 )

#define	STATE_SYSTEM_DEFAULT	( 0x100 )

#define	STATE_SYSTEM_EXPANDED	( 0x200 )

#define	STATE_SYSTEM_COLLAPSED	( 0x400 )

#define	STATE_SYSTEM_BUSY	( 0x800 )

#define	STATE_SYSTEM_FLOATING	( 0x1000 )

#define	STATE_SYSTEM_MARQUEED	( 0x2000 )

#define	STATE_SYSTEM_ANIMATED	( 0x4000 )

#define	STATE_SYSTEM_INVISIBLE	( 0x8000 )

#define	STATE_SYSTEM_OFFSCREEN	( 0x10000 )

#define	STATE_SYSTEM_SIZEABLE	( 0x20000 )

#define	STATE_SYSTEM_MOVEABLE	( 0x40000 )

#define	STATE_SYSTEM_SELFVOICING	( 0x80000 )

#define	STATE_SYSTEM_FOCUSABLE	( 0x100000 )

#define	STATE_SYSTEM_SELECTABLE	( 0x200000 )

#define	STATE_SYSTEM_LINKED	( 0x400000 )

#define	STATE_SYSTEM_TRAVERSED	( 0x800000 )

#define	STATE_SYSTEM_MULTISELECTABLE	( 0x1000000 )

#define	STATE_SYSTEM_EXTSELECTABLE	( 0x2000000 )

#define	STATE_SYSTEM_ALERT_LOW	( 0x4000000 )

#define	STATE_SYSTEM_ALERT_MEDIUM	( 0x8000000 )

#define	STATE_SYSTEM_ALERT_HIGH	( 0x10000000 )

#define	STATE_SYSTEM_PROTECTED	( 0x20000000 )

#define	STATE_SYSTEM_VALID	( 0x7fffffff )

#endif //STATE_SYSTEM_UNAVAILABLE
#ifndef STATE_SYSTEM_HASPOPUP
#define	STATE_SYSTEM_HASPOPUP	( 0x40000000 )

#endif //STATE_SYSTEM_HASPOPUP
#define	ROLE_SYSTEM_TITLEBAR	( 0x1 )

#define	ROLE_SYSTEM_MENUBAR	( 0x2 )

#define	ROLE_SYSTEM_SCROLLBAR	( 0x3 )

#define	ROLE_SYSTEM_GRIP	( 0x4 )

#define	ROLE_SYSTEM_SOUND	( 0x5 )

#define	ROLE_SYSTEM_CURSOR	( 0x6 )

#define	ROLE_SYSTEM_CARET	( 0x7 )

#define	ROLE_SYSTEM_ALERT	( 0x8 )

#define	ROLE_SYSTEM_WINDOW	( 0x9 )

#define	ROLE_SYSTEM_CLIENT	( 0xa )

#define	ROLE_SYSTEM_MENUPOPUP	( 0xb )

#define	ROLE_SYSTEM_MENUITEM	( 0xc )

#define	ROLE_SYSTEM_TOOLTIP	( 0xd )

#define	ROLE_SYSTEM_APPLICATION	( 0xe )

#define	ROLE_SYSTEM_DOCUMENT	( 0xf )

#define	ROLE_SYSTEM_PANE	( 0x10 )

#define	ROLE_SYSTEM_CHART	( 0x11 )

#define	ROLE_SYSTEM_DIALOG	( 0x12 )

#define	ROLE_SYSTEM_BORDER	( 0x13 )

#define	ROLE_SYSTEM_GROUPING	( 0x14 )

#define	ROLE_SYSTEM_SEPARATOR	( 0x15 )

#define	ROLE_SYSTEM_TOOLBAR	( 0x16 )

#define	ROLE_SYSTEM_STATUSBAR	( 0x17 )

#define	ROLE_SYSTEM_TABLE	( 0x18 )

#define	ROLE_SYSTEM_COLUMNHEADER	( 0x19 )

#define	ROLE_SYSTEM_ROWHEADER	( 0x1a )

#define	ROLE_SYSTEM_COLUMN	( 0x1b )

#define	ROLE_SYSTEM_ROW	( 0x1c )

#define	ROLE_SYSTEM_CELL	( 0x1d )

#define	ROLE_SYSTEM_LINK	( 0x1e )

#define	ROLE_SYSTEM_HELPBALLOON	( 0x1f )

#define	ROLE_SYSTEM_CHARACTER	( 0x20 )

#define	ROLE_SYSTEM_LIST	( 0x21 )

#define	ROLE_SYSTEM_LISTITEM	( 0x22 )

#define	ROLE_SYSTEM_OUTLINE	( 0x23 )

#define	ROLE_SYSTEM_OUTLINEITEM	( 0x24 )

#define	ROLE_SYSTEM_PAGETAB	( 0x25 )

#define	ROLE_SYSTEM_PROPERTYPAGE	( 0x26 )

#define	ROLE_SYSTEM_INDICATOR	( 0x27 )

#define	ROLE_SYSTEM_GRAPHIC	( 0x28 )

#define	ROLE_SYSTEM_STATICTEXT	( 0x29 )

#define	ROLE_SYSTEM_TEXT	( 0x2a )

#define	ROLE_SYSTEM_PUSHBUTTON	( 0x2b )

#define	ROLE_SYSTEM_CHECKBUTTON	( 0x2c )

#define	ROLE_SYSTEM_RADIOBUTTON	( 0x2d )

#define	ROLE_SYSTEM_COMBOBOX	( 0x2e )

#define	ROLE_SYSTEM_DROPLIST	( 0x2f )

#define	ROLE_SYSTEM_PROGRESSBAR	( 0x30 )

#define	ROLE_SYSTEM_DIAL	( 0x31 )

#define	ROLE_SYSTEM_HOTKEYFIELD	( 0x32 )

#define	ROLE_SYSTEM_SLIDER	( 0x33 )

#define	ROLE_SYSTEM_SPINBUTTON	( 0x34 )

#define	ROLE_SYSTEM_DIAGRAM	( 0x35 )

#define	ROLE_SYSTEM_ANIMATION	( 0x36 )

#define	ROLE_SYSTEM_EQUATION	( 0x37 )

#define	ROLE_SYSTEM_BUTTONDROPDOWN	( 0x38 )

#define	ROLE_SYSTEM_BUTTONMENU	( 0x39 )

#define	ROLE_SYSTEM_BUTTONDROPDOWNGRID	( 0x3a )

#define	ROLE_SYSTEM_WHITESPACE	( 0x3b )

#define	ROLE_SYSTEM_PAGETABLIST	( 0x3c )

#define	ROLE_SYSTEM_CLOCK	( 0x3d )

#define	ROLE_SYSTEM_SPLITBUTTON	( 0x3e )

#define	ROLE_SYSTEM_IPADDRESS	( 0x3f )

#define	ROLE_SYSTEM_OUTLINEBUTTON	( 0x40 )


EXTERN_C const IID IID_IAccessible;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("618736e0-3c3d-11cf-810c-00aa00389b71")
    IAccessible : public IDispatch
    {
    public:
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accParent( 
            /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppdispParent) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accChildCount( 
            /* [retval][out] */ long __RPC_FAR *pcountChildren) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accChild( 
            /* [in] */ VARIANT varChild,
            /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppdispChild) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accName( 
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR __RPC_FAR *pszName) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accValue( 
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR __RPC_FAR *pszValue) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accDescription( 
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR __RPC_FAR *pszDescription) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accRole( 
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarRole) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accState( 
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarState) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accHelp( 
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR __RPC_FAR *pszHelp) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accHelpTopic( 
            /* [out] */ BSTR __RPC_FAR *pszHelpFile,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ long __RPC_FAR *pidTopic) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accKeyboardShortcut( 
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR __RPC_FAR *pszKeyboardShortcut) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accFocus( 
            /* [retval][out] */ VARIANT __RPC_FAR *pvarChild) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accSelection( 
            /* [retval][out] */ VARIANT __RPC_FAR *pvarChildren) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_accDefaultAction( 
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR __RPC_FAR *pszDefaultAction) = 0;
        
        virtual /* [id][hidden] */ HRESULT STDMETHODCALLTYPE accSelect( 
            /* [in] */ long flagsSelect,
            /* [optional][in] */ VARIANT varChild) = 0;
        
        virtual /* [id][hidden] */ HRESULT STDMETHODCALLTYPE accLocation( 
            /* [out] */ long __RPC_FAR *pxLeft,
            /* [out] */ long __RPC_FAR *pyTop,
            /* [out] */ long __RPC_FAR *pcxWidth,
            /* [out] */ long __RPC_FAR *pcyHeight,
            /* [optional][in] */ VARIANT varChild) = 0;
        
        virtual /* [id][hidden] */ HRESULT STDMETHODCALLTYPE accNavigate( 
            /* [in] */ long navDir,
            /* [optional][in] */ VARIANT varStart,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarEndUpAt) = 0;
        
        virtual /* [id][hidden] */ HRESULT STDMETHODCALLTYPE accHitTest( 
            /* [in] */ long xLeft,
            /* [in] */ long yTop,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarChild) = 0;
        
        virtual /* [id][hidden] */ HRESULT STDMETHODCALLTYPE accDoDefaultAction( 
            /* [optional][in] */ VARIANT varChild) = 0;
        
        virtual /* [id][propput][hidden] */ HRESULT STDMETHODCALLTYPE put_accName( 
            /* [optional][in] */ VARIANT varChild,
            /* [in] */ BSTR szName) = 0;
        
        virtual /* [id][propput][hidden] */ HRESULT STDMETHODCALLTYPE put_accValue( 
            /* [optional][in] */ VARIANT varChild,
            /* [in] */ BSTR szValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAccessibleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IAccessible __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IAccessible __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IAccessible __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IAccessible __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IAccessible __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IAccessible __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IAccessible __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accParent )( 
            IAccessible __RPC_FAR * This,
            /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppdispParent);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accChildCount )( 
            IAccessible __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *pcountChildren);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accChild )( 
            IAccessible __RPC_FAR * This,
            /* [in] */ VARIANT varChild,
            /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppdispChild);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accName )( 
            IAccessible __RPC_FAR * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR __RPC_FAR *pszName);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accValue )( 
            IAccessible __RPC_FAR * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR __RPC_FAR *pszValue);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accDescription )( 
            IAccessible __RPC_FAR * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR __RPC_FAR *pszDescription);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accRole )( 
            IAccessible __RPC_FAR * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarRole);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accState )( 
            IAccessible __RPC_FAR * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarState);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accHelp )( 
            IAccessible __RPC_FAR * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR __RPC_FAR *pszHelp);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accHelpTopic )( 
            IAccessible __RPC_FAR * This,
            /* [out] */ BSTR __RPC_FAR *pszHelpFile,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ long __RPC_FAR *pidTopic);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accKeyboardShortcut )( 
            IAccessible __RPC_FAR * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR __RPC_FAR *pszKeyboardShortcut);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accFocus )( 
            IAccessible __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarChild);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accSelection )( 
            IAccessible __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarChildren);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accDefaultAction )( 
            IAccessible __RPC_FAR * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR __RPC_FAR *pszDefaultAction);
        
        /* [id][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *accSelect )( 
            IAccessible __RPC_FAR * This,
            /* [in] */ long flagsSelect,
            /* [optional][in] */ VARIANT varChild);
        
        /* [id][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *accLocation )( 
            IAccessible __RPC_FAR * This,
            /* [out] */ long __RPC_FAR *pxLeft,
            /* [out] */ long __RPC_FAR *pyTop,
            /* [out] */ long __RPC_FAR *pcxWidth,
            /* [out] */ long __RPC_FAR *pcyHeight,
            /* [optional][in] */ VARIANT varChild);
        
        /* [id][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *accNavigate )( 
            IAccessible __RPC_FAR * This,
            /* [in] */ long navDir,
            /* [optional][in] */ VARIANT varStart,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarEndUpAt);
        
        /* [id][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *accHitTest )( 
            IAccessible __RPC_FAR * This,
            /* [in] */ long xLeft,
            /* [in] */ long yTop,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarChild);
        
        /* [id][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *accDoDefaultAction )( 
            IAccessible __RPC_FAR * This,
            /* [optional][in] */ VARIANT varChild);
        
        /* [id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_accName )( 
            IAccessible __RPC_FAR * This,
            /* [optional][in] */ VARIANT varChild,
            /* [in] */ BSTR szName);
        
        /* [id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_accValue )( 
            IAccessible __RPC_FAR * This,
            /* [optional][in] */ VARIANT varChild,
            /* [in] */ BSTR szValue);
        
        END_INTERFACE
    } IAccessibleVtbl;

    interface IAccessible
    {
        CONST_VTBL struct IAccessibleVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAccessible_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAccessible_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAccessible_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAccessible_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IAccessible_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IAccessible_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IAccessible_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IAccessible_get_accParent(This,ppdispParent)	\
    (This)->lpVtbl -> get_accParent(This,ppdispParent)

#define IAccessible_get_accChildCount(This,pcountChildren)	\
    (This)->lpVtbl -> get_accChildCount(This,pcountChildren)

#define IAccessible_get_accChild(This,varChild,ppdispChild)	\
    (This)->lpVtbl -> get_accChild(This,varChild,ppdispChild)

#define IAccessible_get_accName(This,varChild,pszName)	\
    (This)->lpVtbl -> get_accName(This,varChild,pszName)

#define IAccessible_get_accValue(This,varChild,pszValue)	\
    (This)->lpVtbl -> get_accValue(This,varChild,pszValue)

#define IAccessible_get_accDescription(This,varChild,pszDescription)	\
    (This)->lpVtbl -> get_accDescription(This,varChild,pszDescription)

#define IAccessible_get_accRole(This,varChild,pvarRole)	\
    (This)->lpVtbl -> get_accRole(This,varChild,pvarRole)

#define IAccessible_get_accState(This,varChild,pvarState)	\
    (This)->lpVtbl -> get_accState(This,varChild,pvarState)

#define IAccessible_get_accHelp(This,varChild,pszHelp)	\
    (This)->lpVtbl -> get_accHelp(This,varChild,pszHelp)

#define IAccessible_get_accHelpTopic(This,pszHelpFile,varChild,pidTopic)	\
    (This)->lpVtbl -> get_accHelpTopic(This,pszHelpFile,varChild,pidTopic)

#define IAccessible_get_accKeyboardShortcut(This,varChild,pszKeyboardShortcut)	\
    (This)->lpVtbl -> get_accKeyboardShortcut(This,varChild,pszKeyboardShortcut)

#define IAccessible_get_accFocus(This,pvarChild)	\
    (This)->lpVtbl -> get_accFocus(This,pvarChild)

#define IAccessible_get_accSelection(This,pvarChildren)	\
    (This)->lpVtbl -> get_accSelection(This,pvarChildren)

#define IAccessible_get_accDefaultAction(This,varChild,pszDefaultAction)	\
    (This)->lpVtbl -> get_accDefaultAction(This,varChild,pszDefaultAction)

#define IAccessible_accSelect(This,flagsSelect,varChild)	\
    (This)->lpVtbl -> accSelect(This,flagsSelect,varChild)

#define IAccessible_accLocation(This,pxLeft,pyTop,pcxWidth,pcyHeight,varChild)	\
    (This)->lpVtbl -> accLocation(This,pxLeft,pyTop,pcxWidth,pcyHeight,varChild)

#define IAccessible_accNavigate(This,navDir,varStart,pvarEndUpAt)	\
    (This)->lpVtbl -> accNavigate(This,navDir,varStart,pvarEndUpAt)

#define IAccessible_accHitTest(This,xLeft,yTop,pvarChild)	\
    (This)->lpVtbl -> accHitTest(This,xLeft,yTop,pvarChild)

#define IAccessible_accDoDefaultAction(This,varChild)	\
    (This)->lpVtbl -> accDoDefaultAction(This,varChild)

#define IAccessible_put_accName(This,varChild,szName)	\
    (This)->lpVtbl -> put_accName(This,varChild,szName)

#define IAccessible_put_accValue(This,varChild,szValue)	\
    (This)->lpVtbl -> put_accValue(This,varChild,szValue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accParent_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppdispParent);


void __RPC_STUB IAccessible_get_accParent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accChildCount_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *pcountChildren);


void __RPC_STUB IAccessible_get_accChildCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accChild_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [in] */ VARIANT varChild,
    /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppdispChild);


void __RPC_STUB IAccessible_get_accChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accName_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [optional][in] */ VARIANT varChild,
    /* [retval][out] */ BSTR __RPC_FAR *pszName);


void __RPC_STUB IAccessible_get_accName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accValue_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [optional][in] */ VARIANT varChild,
    /* [retval][out] */ BSTR __RPC_FAR *pszValue);


void __RPC_STUB IAccessible_get_accValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accDescription_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [optional][in] */ VARIANT varChild,
    /* [retval][out] */ BSTR __RPC_FAR *pszDescription);


void __RPC_STUB IAccessible_get_accDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accRole_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [optional][in] */ VARIANT varChild,
    /* [retval][out] */ VARIANT __RPC_FAR *pvarRole);


void __RPC_STUB IAccessible_get_accRole_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accState_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [optional][in] */ VARIANT varChild,
    /* [retval][out] */ VARIANT __RPC_FAR *pvarState);


void __RPC_STUB IAccessible_get_accState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accHelp_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [optional][in] */ VARIANT varChild,
    /* [retval][out] */ BSTR __RPC_FAR *pszHelp);


void __RPC_STUB IAccessible_get_accHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accHelpTopic_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [out] */ BSTR __RPC_FAR *pszHelpFile,
    /* [optional][in] */ VARIANT varChild,
    /* [retval][out] */ long __RPC_FAR *pidTopic);


void __RPC_STUB IAccessible_get_accHelpTopic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accKeyboardShortcut_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [optional][in] */ VARIANT varChild,
    /* [retval][out] */ BSTR __RPC_FAR *pszKeyboardShortcut);


void __RPC_STUB IAccessible_get_accKeyboardShortcut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accFocus_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pvarChild);


void __RPC_STUB IAccessible_get_accFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accSelection_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pvarChildren);


void __RPC_STUB IAccessible_get_accSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_get_accDefaultAction_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [optional][in] */ VARIANT varChild,
    /* [retval][out] */ BSTR __RPC_FAR *pszDefaultAction);


void __RPC_STUB IAccessible_get_accDefaultAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_accSelect_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [in] */ long flagsSelect,
    /* [optional][in] */ VARIANT varChild);


void __RPC_STUB IAccessible_accSelect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_accLocation_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [out] */ long __RPC_FAR *pxLeft,
    /* [out] */ long __RPC_FAR *pyTop,
    /* [out] */ long __RPC_FAR *pcxWidth,
    /* [out] */ long __RPC_FAR *pcyHeight,
    /* [optional][in] */ VARIANT varChild);


void __RPC_STUB IAccessible_accLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_accNavigate_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [in] */ long navDir,
    /* [optional][in] */ VARIANT varStart,
    /* [retval][out] */ VARIANT __RPC_FAR *pvarEndUpAt);


void __RPC_STUB IAccessible_accNavigate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_accHitTest_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [in] */ long xLeft,
    /* [in] */ long yTop,
    /* [retval][out] */ VARIANT __RPC_FAR *pvarChild);


void __RPC_STUB IAccessible_accHitTest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_accDoDefaultAction_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [optional][in] */ VARIANT varChild);


void __RPC_STUB IAccessible_accDoDefaultAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_put_accName_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [optional][in] */ VARIANT varChild,
    /* [in] */ BSTR szName);


void __RPC_STUB IAccessible_put_accName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput][hidden] */ HRESULT STDMETHODCALLTYPE IAccessible_put_accValue_Proxy( 
    IAccessible __RPC_FAR * This,
    /* [optional][in] */ VARIANT varChild,
    /* [in] */ BSTR szValue);


void __RPC_STUB IAccessible_put_accValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAccessible_INTERFACE_DEFINED__ */


#ifndef __IAccessibleHandler_INTERFACE_DEFINED__
#define __IAccessibleHandler_INTERFACE_DEFINED__

/* interface IAccessibleHandler */
/* [unique][oleautomation][hidden][uuid][object] */ 

typedef /* [unique] */ IAccessibleHandler __RPC_FAR *LPACCESSIBLEHANDLER;


EXTERN_C const IID IID_IAccessibleHandler;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("03022430-ABC4-11d0-BDE2-00AA001A1953")
    IAccessibleHandler : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AccessibleObjectFromID( 
            /* [in] */ long hwnd,
            /* [in] */ long lObjectID,
            /* [out] */ LPACCESSIBLE __RPC_FAR *pIAccessible) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAccessibleHandlerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IAccessibleHandler __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IAccessibleHandler __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IAccessibleHandler __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *AccessibleObjectFromID )( 
            IAccessibleHandler __RPC_FAR * This,
            /* [in] */ long hwnd,
            /* [in] */ long lObjectID,
            /* [out] */ LPACCESSIBLE __RPC_FAR *pIAccessible);
        
        END_INTERFACE
    } IAccessibleHandlerVtbl;

    interface IAccessibleHandler
    {
        CONST_VTBL struct IAccessibleHandlerVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAccessibleHandler_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAccessibleHandler_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAccessibleHandler_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAccessibleHandler_AccessibleObjectFromID(This,hwnd,lObjectID,pIAccessible)	\
    (This)->lpVtbl -> AccessibleObjectFromID(This,hwnd,lObjectID,pIAccessible)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IAccessibleHandler_AccessibleObjectFromID_Proxy( 
    IAccessibleHandler __RPC_FAR * This,
    /* [in] */ long hwnd,
    /* [in] */ long lObjectID,
    /* [out] */ LPACCESSIBLE __RPC_FAR *pIAccessible);


void __RPC_STUB IAccessibleHandler_AccessibleObjectFromID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAccessibleHandler_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_oleacc_0089 */
/* [local] */ 

typedef 
enum AnnoScope
    {	ANNO_THIS	= 0,
	ANNO_CONTAINER	= 1
    }	AnnoScope;

typedef GUID MSAAPROPID;



extern RPC_IF_HANDLE __MIDL_itf_oleacc_0089_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleacc_0089_v0_0_s_ifspec;

#ifndef __IAccIdentity_INTERFACE_DEFINED__
#define __IAccIdentity_INTERFACE_DEFINED__

/* interface IAccIdentity */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAccIdentity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7852b78d-1cfd-41c1-a615-9c0c85960b5f")
    IAccIdentity : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetIdentityString( 
            /* [in] */ DWORD dwIDChild,
            /* [size_is][size_is][out] */ BYTE __RPC_FAR *__RPC_FAR *ppIDString,
            /* [out] */ DWORD __RPC_FAR *pdwIDStringLen) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAccIdentityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IAccIdentity __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IAccIdentity __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IAccIdentity __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIdentityString )( 
            IAccIdentity __RPC_FAR * This,
            /* [in] */ DWORD dwIDChild,
            /* [size_is][size_is][out] */ BYTE __RPC_FAR *__RPC_FAR *ppIDString,
            /* [out] */ DWORD __RPC_FAR *pdwIDStringLen);
        
        END_INTERFACE
    } IAccIdentityVtbl;

    interface IAccIdentity
    {
        CONST_VTBL struct IAccIdentityVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAccIdentity_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAccIdentity_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAccIdentity_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAccIdentity_GetIdentityString(This,dwIDChild,ppIDString,pdwIDStringLen)	\
    (This)->lpVtbl -> GetIdentityString(This,dwIDChild,ppIDString,pdwIDStringLen)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IAccIdentity_GetIdentityString_Proxy( 
    IAccIdentity __RPC_FAR * This,
    /* [in] */ DWORD dwIDChild,
    /* [size_is][size_is][out] */ BYTE __RPC_FAR *__RPC_FAR *ppIDString,
    /* [out] */ DWORD __RPC_FAR *pdwIDStringLen);


void __RPC_STUB IAccIdentity_GetIdentityString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAccIdentity_INTERFACE_DEFINED__ */


#ifndef __IAccPropServer_INTERFACE_DEFINED__
#define __IAccPropServer_INTERFACE_DEFINED__

/* interface IAccPropServer */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAccPropServer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("76c0dbbb-15e0-4e7b-b61b-20eeea2001e0")
    IAccPropServer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPropValue( 
            /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
            /* [in] */ DWORD dwIDStringLen,
            /* [in] */ MSAAPROPID idProp,
            /* [out] */ VARIANT __RPC_FAR *pvarValue,
            /* [out] */ BOOL __RPC_FAR *pfHasProp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAccPropServerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IAccPropServer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IAccPropServer __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IAccPropServer __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropValue )( 
            IAccPropServer __RPC_FAR * This,
            /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
            /* [in] */ DWORD dwIDStringLen,
            /* [in] */ MSAAPROPID idProp,
            /* [out] */ VARIANT __RPC_FAR *pvarValue,
            /* [out] */ BOOL __RPC_FAR *pfHasProp);
        
        END_INTERFACE
    } IAccPropServerVtbl;

    interface IAccPropServer
    {
        CONST_VTBL struct IAccPropServerVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAccPropServer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAccPropServer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAccPropServer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAccPropServer_GetPropValue(This,pIDString,dwIDStringLen,idProp,pvarValue,pfHasProp)	\
    (This)->lpVtbl -> GetPropValue(This,pIDString,dwIDStringLen,idProp,pvarValue,pfHasProp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IAccPropServer_GetPropValue_Proxy( 
    IAccPropServer __RPC_FAR * This,
    /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
    /* [in] */ DWORD dwIDStringLen,
    /* [in] */ MSAAPROPID idProp,
    /* [out] */ VARIANT __RPC_FAR *pvarValue,
    /* [out] */ BOOL __RPC_FAR *pfHasProp);


void __RPC_STUB IAccPropServer_GetPropValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAccPropServer_INTERFACE_DEFINED__ */


#ifndef __IAccPropServices_INTERFACE_DEFINED__
#define __IAccPropServices_INTERFACE_DEFINED__

/* interface IAccPropServices */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAccPropServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6e26e776-04f0-495d-80e4-3330352e3169")
    IAccPropServices : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetPropValue( 
            /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
            /* [in] */ DWORD dwIDStringLen,
            /* [in] */ MSAAPROPID idProp,
            /* [in] */ VARIANT var) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPropServer( 
            /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
            /* [in] */ DWORD dwIDStringLen,
            /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
            /* [in] */ int cProps,
            /* [in] */ IAccPropServer __RPC_FAR *pServer,
            /* [in] */ AnnoScope annoScope) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClearProps( 
            /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
            /* [in] */ DWORD dwIDStringLen,
            /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
            /* [in] */ int cProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetHwndProp( 
            /* [in] */ HWND hwnd,
            /* [in] */ DWORD idObject,
            /* [in] */ DWORD idChild,
            /* [in] */ MSAAPROPID idProp,
            /* [in] */ VARIANT var) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetHwndPropStr( 
            /* [in] */ HWND hwnd,
            /* [in] */ DWORD idObject,
            /* [in] */ DWORD idChild,
            /* [in] */ MSAAPROPID idProp,
            /* [string][in] */ LPCWSTR str) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetHwndPropServer( 
            /* [in] */ HWND hwnd,
            /* [in] */ DWORD idObject,
            /* [in] */ DWORD idChild,
            /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
            /* [in] */ int cProps,
            /* [in] */ IAccPropServer __RPC_FAR *pServer,
            /* [in] */ AnnoScope annoScope) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClearHwndProps( 
            /* [in] */ HWND hwnd,
            /* [in] */ DWORD idObject,
            /* [in] */ DWORD idChild,
            /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
            /* [in] */ int cProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ComposeHwndIdentityString( 
            /* [in] */ HWND hwnd,
            /* [in] */ DWORD idObject,
            /* [in] */ DWORD idChild,
            /* [size_is][size_is][out] */ BYTE __RPC_FAR *__RPC_FAR *ppIDString,
            /* [out] */ DWORD __RPC_FAR *pdwIDStringLen) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DecomposeHwndIdentityString( 
            /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
            /* [in] */ DWORD dwIDStringLen,
            /* [out] */ HWND __RPC_FAR *phwnd,
            /* [out] */ DWORD __RPC_FAR *pidObject,
            /* [out] */ DWORD __RPC_FAR *pidChild) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetHmenuProp( 
            /* [in] */ HMENU hmenu,
            /* [in] */ DWORD idChild,
            /* [in] */ MSAAPROPID idProp,
            /* [in] */ VARIANT var) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetHmenuPropStr( 
            /* [in] */ HMENU hmenu,
            /* [in] */ DWORD idChild,
            /* [in] */ MSAAPROPID idProp,
            /* [string][in] */ LPCWSTR str) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetHmenuPropServer( 
            /* [in] */ HMENU hmenu,
            /* [in] */ DWORD idChild,
            /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
            /* [in] */ int cProps,
            /* [in] */ IAccPropServer __RPC_FAR *pServer,
            /* [in] */ AnnoScope annoScope) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClearHmenuProps( 
            /* [in] */ HMENU hmenu,
            /* [in] */ DWORD idChild,
            /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
            /* [in] */ int cProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ComposeHmenuIdentityString( 
            /* [in] */ HMENU hmenu,
            /* [in] */ DWORD idChild,
            /* [size_is][size_is][out] */ BYTE __RPC_FAR *__RPC_FAR *ppIDString,
            /* [out] */ DWORD __RPC_FAR *pdwIDStringLen) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DecomposeHmenuIdentityString( 
            /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
            /* [in] */ DWORD dwIDStringLen,
            /* [out] */ HMENU __RPC_FAR *phmenu,
            /* [out] */ DWORD __RPC_FAR *pidChild) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAccPropServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IAccPropServices __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IAccPropServices __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IAccPropServices __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetPropValue )( 
            IAccPropServices __RPC_FAR * This,
            /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
            /* [in] */ DWORD dwIDStringLen,
            /* [in] */ MSAAPROPID idProp,
            /* [in] */ VARIANT var);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetPropServer )( 
            IAccPropServices __RPC_FAR * This,
            /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
            /* [in] */ DWORD dwIDStringLen,
            /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
            /* [in] */ int cProps,
            /* [in] */ IAccPropServer __RPC_FAR *pServer,
            /* [in] */ AnnoScope annoScope);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ClearProps )( 
            IAccPropServices __RPC_FAR * This,
            /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
            /* [in] */ DWORD dwIDStringLen,
            /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
            /* [in] */ int cProps);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetHwndProp )( 
            IAccPropServices __RPC_FAR * This,
            /* [in] */ HWND hwnd,
            /* [in] */ DWORD idObject,
            /* [in] */ DWORD idChild,
            /* [in] */ MSAAPROPID idProp,
            /* [in] */ VARIANT var);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetHwndPropStr )( 
            IAccPropServices __RPC_FAR * This,
            /* [in] */ HWND hwnd,
            /* [in] */ DWORD idObject,
            /* [in] */ DWORD idChild,
            /* [in] */ MSAAPROPID idProp,
            /* [string][in] */ LPCWSTR str);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetHwndPropServer )( 
            IAccPropServices __RPC_FAR * This,
            /* [in] */ HWND hwnd,
            /* [in] */ DWORD idObject,
            /* [in] */ DWORD idChild,
            /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
            /* [in] */ int cProps,
            /* [in] */ IAccPropServer __RPC_FAR *pServer,
            /* [in] */ AnnoScope annoScope);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ClearHwndProps )( 
            IAccPropServices __RPC_FAR * This,
            /* [in] */ HWND hwnd,
            /* [in] */ DWORD idObject,
            /* [in] */ DWORD idChild,
            /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
            /* [in] */ int cProps);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ComposeHwndIdentityString )( 
            IAccPropServices __RPC_FAR * This,
            /* [in] */ HWND hwnd,
            /* [in] */ DWORD idObject,
            /* [in] */ DWORD idChild,
            /* [size_is][size_is][out] */ BYTE __RPC_FAR *__RPC_FAR *ppIDString,
            /* [out] */ DWORD __RPC_FAR *pdwIDStringLen);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DecomposeHwndIdentityString )( 
            IAccPropServices __RPC_FAR * This,
            /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
            /* [in] */ DWORD dwIDStringLen,
            /* [out] */ HWND __RPC_FAR *phwnd,
            /* [out] */ DWORD __RPC_FAR *pidObject,
            /* [out] */ DWORD __RPC_FAR *pidChild);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetHmenuProp )( 
            IAccPropServices __RPC_FAR * This,
            /* [in] */ HMENU hmenu,
            /* [in] */ DWORD idChild,
            /* [in] */ MSAAPROPID idProp,
            /* [in] */ VARIANT var);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetHmenuPropStr )( 
            IAccPropServices __RPC_FAR * This,
            /* [in] */ HMENU hmenu,
            /* [in] */ DWORD idChild,
            /* [in] */ MSAAPROPID idProp,
            /* [string][in] */ LPCWSTR str);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetHmenuPropServer )( 
            IAccPropServices __RPC_FAR * This,
            /* [in] */ HMENU hmenu,
            /* [in] */ DWORD idChild,
            /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
            /* [in] */ int cProps,
            /* [in] */ IAccPropServer __RPC_FAR *pServer,
            /* [in] */ AnnoScope annoScope);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ClearHmenuProps )( 
            IAccPropServices __RPC_FAR * This,
            /* [in] */ HMENU hmenu,
            /* [in] */ DWORD idChild,
            /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
            /* [in] */ int cProps);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ComposeHmenuIdentityString )( 
            IAccPropServices __RPC_FAR * This,
            /* [in] */ HMENU hmenu,
            /* [in] */ DWORD idChild,
            /* [size_is][size_is][out] */ BYTE __RPC_FAR *__RPC_FAR *ppIDString,
            /* [out] */ DWORD __RPC_FAR *pdwIDStringLen);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DecomposeHmenuIdentityString )( 
            IAccPropServices __RPC_FAR * This,
            /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
            /* [in] */ DWORD dwIDStringLen,
            /* [out] */ HMENU __RPC_FAR *phmenu,
            /* [out] */ DWORD __RPC_FAR *pidChild);
        
        END_INTERFACE
    } IAccPropServicesVtbl;

    interface IAccPropServices
    {
        CONST_VTBL struct IAccPropServicesVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAccPropServices_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAccPropServices_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAccPropServices_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAccPropServices_SetPropValue(This,pIDString,dwIDStringLen,idProp,var)	\
    (This)->lpVtbl -> SetPropValue(This,pIDString,dwIDStringLen,idProp,var)

#define IAccPropServices_SetPropServer(This,pIDString,dwIDStringLen,paProps,cProps,pServer,annoScope)	\
    (This)->lpVtbl -> SetPropServer(This,pIDString,dwIDStringLen,paProps,cProps,pServer,annoScope)

#define IAccPropServices_ClearProps(This,pIDString,dwIDStringLen,paProps,cProps)	\
    (This)->lpVtbl -> ClearProps(This,pIDString,dwIDStringLen,paProps,cProps)

#define IAccPropServices_SetHwndProp(This,hwnd,idObject,idChild,idProp,var)	\
    (This)->lpVtbl -> SetHwndProp(This,hwnd,idObject,idChild,idProp,var)

#define IAccPropServices_SetHwndPropStr(This,hwnd,idObject,idChild,idProp,str)	\
    (This)->lpVtbl -> SetHwndPropStr(This,hwnd,idObject,idChild,idProp,str)

#define IAccPropServices_SetHwndPropServer(This,hwnd,idObject,idChild,paProps,cProps,pServer,annoScope)	\
    (This)->lpVtbl -> SetHwndPropServer(This,hwnd,idObject,idChild,paProps,cProps,pServer,annoScope)

#define IAccPropServices_ClearHwndProps(This,hwnd,idObject,idChild,paProps,cProps)	\
    (This)->lpVtbl -> ClearHwndProps(This,hwnd,idObject,idChild,paProps,cProps)

#define IAccPropServices_ComposeHwndIdentityString(This,hwnd,idObject,idChild,ppIDString,pdwIDStringLen)	\
    (This)->lpVtbl -> ComposeHwndIdentityString(This,hwnd,idObject,idChild,ppIDString,pdwIDStringLen)

#define IAccPropServices_DecomposeHwndIdentityString(This,pIDString,dwIDStringLen,phwnd,pidObject,pidChild)	\
    (This)->lpVtbl -> DecomposeHwndIdentityString(This,pIDString,dwIDStringLen,phwnd,pidObject,pidChild)

#define IAccPropServices_SetHmenuProp(This,hmenu,idChild,idProp,var)	\
    (This)->lpVtbl -> SetHmenuProp(This,hmenu,idChild,idProp,var)

#define IAccPropServices_SetHmenuPropStr(This,hmenu,idChild,idProp,str)	\
    (This)->lpVtbl -> SetHmenuPropStr(This,hmenu,idChild,idProp,str)

#define IAccPropServices_SetHmenuPropServer(This,hmenu,idChild,paProps,cProps,pServer,annoScope)	\
    (This)->lpVtbl -> SetHmenuPropServer(This,hmenu,idChild,paProps,cProps,pServer,annoScope)

#define IAccPropServices_ClearHmenuProps(This,hmenu,idChild,paProps,cProps)	\
    (This)->lpVtbl -> ClearHmenuProps(This,hmenu,idChild,paProps,cProps)

#define IAccPropServices_ComposeHmenuIdentityString(This,hmenu,idChild,ppIDString,pdwIDStringLen)	\
    (This)->lpVtbl -> ComposeHmenuIdentityString(This,hmenu,idChild,ppIDString,pdwIDStringLen)

#define IAccPropServices_DecomposeHmenuIdentityString(This,pIDString,dwIDStringLen,phmenu,pidChild)	\
    (This)->lpVtbl -> DecomposeHmenuIdentityString(This,pIDString,dwIDStringLen,phmenu,pidChild)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IAccPropServices_SetPropValue_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
    /* [in] */ DWORD dwIDStringLen,
    /* [in] */ MSAAPROPID idProp,
    /* [in] */ VARIANT var);


void __RPC_STUB IAccPropServices_SetPropValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_SetPropServer_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
    /* [in] */ DWORD dwIDStringLen,
    /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
    /* [in] */ int cProps,
    /* [in] */ IAccPropServer __RPC_FAR *pServer,
    /* [in] */ AnnoScope annoScope);


void __RPC_STUB IAccPropServices_SetPropServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_ClearProps_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
    /* [in] */ DWORD dwIDStringLen,
    /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
    /* [in] */ int cProps);


void __RPC_STUB IAccPropServices_ClearProps_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_SetHwndProp_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [in] */ HWND hwnd,
    /* [in] */ DWORD idObject,
    /* [in] */ DWORD idChild,
    /* [in] */ MSAAPROPID idProp,
    /* [in] */ VARIANT var);


void __RPC_STUB IAccPropServices_SetHwndProp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_SetHwndPropStr_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [in] */ HWND hwnd,
    /* [in] */ DWORD idObject,
    /* [in] */ DWORD idChild,
    /* [in] */ MSAAPROPID idProp,
    /* [string][in] */ LPCWSTR str);


void __RPC_STUB IAccPropServices_SetHwndPropStr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_SetHwndPropServer_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [in] */ HWND hwnd,
    /* [in] */ DWORD idObject,
    /* [in] */ DWORD idChild,
    /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
    /* [in] */ int cProps,
    /* [in] */ IAccPropServer __RPC_FAR *pServer,
    /* [in] */ AnnoScope annoScope);


void __RPC_STUB IAccPropServices_SetHwndPropServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_ClearHwndProps_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [in] */ HWND hwnd,
    /* [in] */ DWORD idObject,
    /* [in] */ DWORD idChild,
    /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
    /* [in] */ int cProps);


void __RPC_STUB IAccPropServices_ClearHwndProps_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_ComposeHwndIdentityString_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [in] */ HWND hwnd,
    /* [in] */ DWORD idObject,
    /* [in] */ DWORD idChild,
    /* [size_is][size_is][out] */ BYTE __RPC_FAR *__RPC_FAR *ppIDString,
    /* [out] */ DWORD __RPC_FAR *pdwIDStringLen);


void __RPC_STUB IAccPropServices_ComposeHwndIdentityString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_DecomposeHwndIdentityString_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
    /* [in] */ DWORD dwIDStringLen,
    /* [out] */ HWND __RPC_FAR *phwnd,
    /* [out] */ DWORD __RPC_FAR *pidObject,
    /* [out] */ DWORD __RPC_FAR *pidChild);


void __RPC_STUB IAccPropServices_DecomposeHwndIdentityString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_SetHmenuProp_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [in] */ HMENU hmenu,
    /* [in] */ DWORD idChild,
    /* [in] */ MSAAPROPID idProp,
    /* [in] */ VARIANT var);


void __RPC_STUB IAccPropServices_SetHmenuProp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_SetHmenuPropStr_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [in] */ HMENU hmenu,
    /* [in] */ DWORD idChild,
    /* [in] */ MSAAPROPID idProp,
    /* [string][in] */ LPCWSTR str);


void __RPC_STUB IAccPropServices_SetHmenuPropStr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_SetHmenuPropServer_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [in] */ HMENU hmenu,
    /* [in] */ DWORD idChild,
    /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
    /* [in] */ int cProps,
    /* [in] */ IAccPropServer __RPC_FAR *pServer,
    /* [in] */ AnnoScope annoScope);


void __RPC_STUB IAccPropServices_SetHmenuPropServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_ClearHmenuProps_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [in] */ HMENU hmenu,
    /* [in] */ DWORD idChild,
    /* [size_is][in] */ const MSAAPROPID __RPC_FAR *paProps,
    /* [in] */ int cProps);


void __RPC_STUB IAccPropServices_ClearHmenuProps_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_ComposeHmenuIdentityString_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [in] */ HMENU hmenu,
    /* [in] */ DWORD idChild,
    /* [size_is][size_is][out] */ BYTE __RPC_FAR *__RPC_FAR *ppIDString,
    /* [out] */ DWORD __RPC_FAR *pdwIDStringLen);


void __RPC_STUB IAccPropServices_ComposeHmenuIdentityString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAccPropServices_DecomposeHmenuIdentityString_Proxy( 
    IAccPropServices __RPC_FAR * This,
    /* [size_is][in] */ const BYTE __RPC_FAR *pIDString,
    /* [in] */ DWORD dwIDStringLen,
    /* [out] */ HMENU __RPC_FAR *phmenu,
    /* [out] */ DWORD __RPC_FAR *pidChild);


void __RPC_STUB IAccPropServices_DecomposeHmenuIdentityString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAccPropServices_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_oleacc_0092 */
/* [local] */ 


//=--------------------------------------------------------------------------=
// Type Library Definitions
//=--------------------------------------------------------------------------=



extern RPC_IF_HANDLE __MIDL_itf_oleacc_0092_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleacc_0092_v0_0_s_ifspec;


#ifndef __Accessibility_LIBRARY_DEFINED__
#define __Accessibility_LIBRARY_DEFINED__

/* library Accessibility */
/* [hidden][version][lcid][uuid] */ 







EXTERN_C const IID LIBID_Accessibility;

EXTERN_C const CLSID CLSID_CAccPropServices;

#ifdef __cplusplus

class DECLSPEC_UUID("b5f8350b-0548-48b1-a6ee-88bd00b4a5e7")
CAccPropServices;
#endif
#endif /* __Accessibility_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long __RPC_FAR *, unsigned long            , BSTR __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  BSTR_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  BSTR_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long __RPC_FAR *, BSTR __RPC_FAR * ); 

unsigned long             __RPC_USER  HMENU_UserSize(     unsigned long __RPC_FAR *, unsigned long            , HMENU __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HMENU_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HMENU __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HMENU_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HMENU __RPC_FAR * ); 
void                      __RPC_USER  HMENU_UserFree(     unsigned long __RPC_FAR *, HMENU __RPC_FAR * ); 

unsigned long             __RPC_USER  HWND_UserSize(     unsigned long __RPC_FAR *, unsigned long            , HWND __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HWND_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HWND __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HWND_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HWND __RPC_FAR * ); 
void                      __RPC_USER  HWND_UserFree(     unsigned long __RPC_FAR *, HWND __RPC_FAR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long __RPC_FAR *, unsigned long            , VARIANT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  VARIANT_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, VARIANT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  VARIANT_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, VARIANT __RPC_FAR * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long __RPC_FAR *, VARIANT __RPC_FAR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\oleauto.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
//+---------------------------------------------------------------------------
//
//  Microsoft Windows
//
//  File:       oleauto.h
//
//  Contents:   Defines Ole Automation support function prototypes, constants
//
//----------------------------------------------------------------------------

#if !defined( _OLEAUTO_H_ )
#define _OLEAUTO_H_

// Set packing to 8 for ISV, and Win95 support
#ifndef RC_INVOKED
#include <pshpack8.h>
#endif // RC_INVOKED

//  Definition of the OLE Automation APIs, and macros.

#ifdef _OLEAUT32_
#define WINOLEAUTAPI        STDAPI
#define WINOLEAUTAPI_(type) STDAPI_(type)
#else
#define WINOLEAUTAPI        EXTERN_C DECLSPEC_IMPORT HRESULT STDAPICALLTYPE
#define WINOLEAUTAPI_(type) EXTERN_C DECLSPEC_IMPORT type STDAPICALLTYPE
#endif

EXTERN_C const IID IID_StdOle;

#define STDOLE_MAJORVERNUM  0x1
#define STDOLE_MINORVERNUM  0x0
#define STDOLE_LCID         0x0000

// Version # of stdole2.tlb
#define STDOLE2_MAJORVERNUM 0x2
#define STDOLE2_MINORVERNUM 0x0
#define STDOLE2_LCID        0x0000

/* if not already picked up from olenls.h */
#ifndef _LCID_DEFINED
typedef DWORD LCID;
# define _LCID_DEFINED
#endif

#ifndef BEGIN_INTERFACE
#define BEGIN_INTERFACE
#define END_INTERFACE
#endif

/* pull in the MIDL generated header */
#include <oaidl.h>


/*---------------------------------------------------------------------*/
/*                            BSTR API                                 */
/*---------------------------------------------------------------------*/

WINOLEAUTAPI_(BSTR) SysAllocString(const OLECHAR *);
WINOLEAUTAPI_(INT)  SysReAllocString(BSTR *, const OLECHAR *);
WINOLEAUTAPI_(BSTR) SysAllocStringLen(const OLECHAR *, UINT len);
WINOLEAUTAPI_(INT)  SysReAllocStringLen(BSTR *, const OLECHAR *, UINT);
WINOLEAUTAPI_(void) SysFreeString(BSTR);
WINOLEAUTAPI_(UINT) SysStringLen(BSTR);

#ifdef _WIN32
WINOLEAUTAPI_(UINT) SysStringByteLen(BSTR bstr);
WINOLEAUTAPI_(BSTR) SysAllocStringByteLen( LPCSTR psz, UINT len);
#endif

// @CESYSGEN IF DCOM_MODULES_OLEAUT32

/*---------------------------------------------------------------------*/
/*                            Time API                                 */
/*---------------------------------------------------------------------*/

WINOLEAUTAPI_(INT) DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE * pvtime);

WINOLEAUTAPI_(INT) VariantTimeToDosDateTime(DOUBLE vtime, USHORT * pwDosDate, USHORT * pwDosTime);

#ifdef _WIN32
WINOLEAUTAPI_(INT) SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime);
WINOLEAUTAPI_(INT) VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime);
#endif


/*---------------------------------------------------------------------*/
/*                          SafeArray API                              */
/*---------------------------------------------------------------------*/

WINOLEAUTAPI SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY ** ppsaOut);
WINOLEAUTAPI SafeArrayAllocData(SAFEARRAY * psa);
WINOLEAUTAPI_(SAFEARRAY *) SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound);
WINOLEAUTAPI_(SAFEARRAY *) SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements);
WINOLEAUTAPI SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget);
WINOLEAUTAPI SafeArrayDestroyDescriptor(SAFEARRAY * psa);
WINOLEAUTAPI SafeArrayDestroyData(SAFEARRAY * psa);
WINOLEAUTAPI SafeArrayDestroy(SAFEARRAY * psa);
WINOLEAUTAPI SafeArrayRedim(SAFEARRAY * psa, SAFEARRAYBOUND * psaboundNew);
WINOLEAUTAPI_(UINT) SafeArrayGetDim(SAFEARRAY * psa);
WINOLEAUTAPI_(UINT) SafeArrayGetElemsize(SAFEARRAY * psa);
WINOLEAUTAPI SafeArrayGetUBound(SAFEARRAY * psa, UINT nDim, LONG * plUbound);
WINOLEAUTAPI SafeArrayGetLBound(SAFEARRAY * psa, UINT nDim, LONG * plLbound);
WINOLEAUTAPI SafeArrayLock(SAFEARRAY * psa);
WINOLEAUTAPI SafeArrayUnlock(SAFEARRAY * psa);
WINOLEAUTAPI SafeArrayAccessData(SAFEARRAY * psa, void HUGEP** ppvData);
WINOLEAUTAPI SafeArrayUnaccessData(SAFEARRAY * psa);
WINOLEAUTAPI SafeArrayGetElement(SAFEARRAY * psa, LONG * rgIndices, void * pv);
WINOLEAUTAPI SafeArrayPutElement(SAFEARRAY * psa, LONG * rgIndices, void * pv);
WINOLEAUTAPI SafeArrayCopy(SAFEARRAY * psa, SAFEARRAY ** ppsaOut);
WINOLEAUTAPI SafeArrayPtrOfIndex(SAFEARRAY * psa, LONG * rgIndices, void ** ppvData);


/*---------------------------------------------------------------------*/
/*                           VARIANT API                               */
/*---------------------------------------------------------------------*/

WINOLEAUTAPI_(void) VariantInit(VARIANTARG * pvarg);
WINOLEAUTAPI VariantClear(VARIANTARG * pvarg);
WINOLEAUTAPI VariantCopy(VARIANTARG * pvargDest, VARIANTARG * pvargSrc);
WINOLEAUTAPI VariantCopyInd(VARIANT * pvarDest, VARIANTARG * pvargSrc);
WINOLEAUTAPI VariantChangeType(VARIANTARG * pvargDest,
                VARIANTARG * pvarSrc, USHORT wFlags, VARTYPE vt);
WINOLEAUTAPI VariantChangeTypeEx(VARIANTARG * pvargDest,
                VARIANTARG * pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);

// @CESYSGEN ENDIF

// Flags for VariantChangeType/VariantChangeTypeEx
#define VARIANT_NOVALUEPROP 0x1
#define VARIANT_ALPHABOOL   0x2 // For VT_BOOL to VT_BSTR conversions,
                                // convert to "True"/"False" instead of
                                // "-1"/"0"
#define VARIANT_NOUSEROVERRIDE   0x4	// For conversions to/from VT_BSTR,
					// passes LOCALE_NOUSEROVERRIDE
					// to core coercion routines


// @CESYSGEN IF DCOM_MODULES_OLEAUT32

/*---------------------------------------------------------------------*/
/*                Vector <-> Bstr conversion APIs                      */
/*---------------------------------------------------------------------*/

WINOLEAUTAPI VectorFromBstr (BSTR bstr, SAFEARRAY ** ppsa);
WINOLEAUTAPI BstrFromVector (SAFEARRAY *psa, BSTR *pbstr);

// @CESYSGEN ENDIF

/*---------------------------------------------------------------------*/
/*                     VARTYPE Coercion API                            */
/*---------------------------------------------------------------------*/

/* Note: The routines that convert *from* a string are defined
 * to take a OLECHAR* rather than a BSTR because no allocation is
 * required, and this makes the routines a bit more generic.
 * They may of course still be passed a BSTR as the strIn param.
 */

/* Any of the coersion functions that converts either from or to a string
 * takes an additional lcid and dwFlags arguments. The lcid argument allows
 * locale specific parsing to occur.  The dwFlags allow additional function
 * specific condition to occur.  All function that accept the dwFlags argument
 * can include either 0 or LOCALE_NOUSEROVERRIDE flag. In addition, the
 * VarDateFromStr functions also accepts the VAR_TIMEVALUEONLY and
 * VAR_DATEVALUEONLY flags
 */

#define VAR_TIMEVALUEONLY   ((DWORD)0x00000001)    /* return time value */
#define VAR_DATEVALUEONLY   ((DWORD)0x00000002)    /* return date value */

// @CESYSGEN IF DCOM_MODULES_OLEAUT32

WINOLEAUTAPI VarUI1FromI2(SHORT sIn, BYTE * pbOut);
WINOLEAUTAPI VarUI1FromI4(LONG lIn, BYTE * pbOut);
WINOLEAUTAPI VarUI1FromR4(FLOAT fltIn, BYTE * pbOut);
WINOLEAUTAPI VarUI1FromR8(DOUBLE dblIn, BYTE * pbOut);
WINOLEAUTAPI VarUI1FromCy(CY cyIn, BYTE * pbOut);
WINOLEAUTAPI VarUI1FromDate(DATE dateIn, BYTE * pbOut);
WINOLEAUTAPI VarUI1FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, BYTE * pbOut);
WINOLEAUTAPI VarUI1FromDisp(IDispatch * pdispIn, LCID lcid, BYTE * pbOut);
WINOLEAUTAPI VarUI1FromBool(VARIANT_BOOL boolIn, BYTE * pbOut);
WINOLEAUTAPI VarUI1FromI1(CHAR cIn, BYTE *pbOut);
WINOLEAUTAPI VarUI1FromUI2(USHORT uiIn, BYTE *pbOut);
WINOLEAUTAPI VarUI1FromUI4(ULONG ulIn, BYTE *pbOut);
WINOLEAUTAPI VarUI1FromDec(DECIMAL *pdecIn, BYTE *pbOut);

WINOLEAUTAPI VarI2FromUI1(BYTE bIn, SHORT * psOut);
WINOLEAUTAPI VarI2FromI4(LONG lIn, SHORT * psOut);
WINOLEAUTAPI VarI2FromR4(FLOAT fltIn, SHORT * psOut);
WINOLEAUTAPI VarI2FromR8(DOUBLE dblIn, SHORT * psOut);
WINOLEAUTAPI VarI2FromCy(CY cyIn, SHORT * psOut);
WINOLEAUTAPI VarI2FromDate(DATE dateIn, SHORT * psOut);
WINOLEAUTAPI VarI2FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, SHORT * psOut);
WINOLEAUTAPI VarI2FromDisp(IDispatch * pdispIn, LCID lcid, SHORT * psOut);
WINOLEAUTAPI VarI2FromBool(VARIANT_BOOL boolIn, SHORT * psOut);
WINOLEAUTAPI VarI2FromI1(CHAR cIn, SHORT *psOut);
WINOLEAUTAPI VarI2FromUI2(USHORT uiIn, SHORT *psOut);
WINOLEAUTAPI VarI2FromUI4(ULONG ulIn, SHORT *psOut);
WINOLEAUTAPI VarI2FromDec(DECIMAL *pdecIn, SHORT *psOut);

WINOLEAUTAPI VarI4FromUI1(BYTE bIn, LONG * plOut);
WINOLEAUTAPI VarI4FromI2(SHORT sIn, LONG * plOut);
WINOLEAUTAPI VarI4FromR4(FLOAT fltIn, LONG * plOut);
WINOLEAUTAPI VarI4FromR8(DOUBLE dblIn, LONG * plOut);
WINOLEAUTAPI VarI4FromCy(CY cyIn, LONG * plOut);
WINOLEAUTAPI VarI4FromDate(DATE dateIn, LONG * plOut);
WINOLEAUTAPI VarI4FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, LONG * plOut);
WINOLEAUTAPI VarI4FromDisp(IDispatch * pdispIn, LCID lcid, LONG * plOut);
WINOLEAUTAPI VarI4FromBool(VARIANT_BOOL boolIn, LONG * plOut);
WINOLEAUTAPI VarI4FromI1(CHAR cIn, LONG *plOut);
WINOLEAUTAPI VarI4FromUI2(USHORT uiIn, LONG *plOut);
WINOLEAUTAPI VarI4FromUI4(ULONG ulIn, LONG *plOut);
WINOLEAUTAPI VarI4FromDec(DECIMAL *pdecIn, LONG *plOut);
WINOLEAUTAPI VarI4FromInt(INT intIn, LONG *plOut);

WINOLEAUTAPI VarR4FromUI1(BYTE bIn, FLOAT * pfltOut);
WINOLEAUTAPI VarR4FromI2(SHORT sIn, FLOAT * pfltOut);
WINOLEAUTAPI VarR4FromI4(LONG lIn, FLOAT * pfltOut);
WINOLEAUTAPI VarR4FromR8(DOUBLE dblIn, FLOAT * pfltOut);
WINOLEAUTAPI VarR4FromCy(CY cyIn, FLOAT * pfltOut);
WINOLEAUTAPI VarR4FromDate(DATE dateIn, FLOAT * pfltOut);
WINOLEAUTAPI VarR4FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut);
WINOLEAUTAPI VarR4FromDisp(IDispatch * pdispIn, LCID lcid, FLOAT * pfltOut);
WINOLEAUTAPI VarR4FromBool(VARIANT_BOOL boolIn, FLOAT * pfltOut);
WINOLEAUTAPI VarR4FromI1(CHAR cIn, FLOAT *pfltOut);
WINOLEAUTAPI VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut);
WINOLEAUTAPI VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut);
WINOLEAUTAPI VarR4FromDec(DECIMAL *pdecIn, FLOAT *pfltOut);

WINOLEAUTAPI VarR8FromUI1(BYTE bIn, DOUBLE * pdblOut);
WINOLEAUTAPI VarR8FromI2(SHORT sIn, DOUBLE * pdblOut);
WINOLEAUTAPI VarR8FromI4(LONG lIn, DOUBLE * pdblOut);
WINOLEAUTAPI VarR8FromR4(FLOAT fltIn, DOUBLE * pdblOut);
WINOLEAUTAPI VarR8FromCy(CY cyIn, DOUBLE * pdblOut);
WINOLEAUTAPI VarR8FromDate(DATE dateIn, DOUBLE * pdblOut);
WINOLEAUTAPI VarR8FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut);
WINOLEAUTAPI VarR8FromDisp(IDispatch * pdispIn, LCID lcid, DOUBLE * pdblOut);
WINOLEAUTAPI VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE * pdblOut);
WINOLEAUTAPI VarR8FromI1(CHAR cIn, DOUBLE *pdblOut);
WINOLEAUTAPI VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut);
WINOLEAUTAPI VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut);
WINOLEAUTAPI VarR8FromDec(DECIMAL *pdecIn, DOUBLE *pdblOut);

WINOLEAUTAPI VarDateFromUI1(BYTE bIn, DATE * pdateOut);
WINOLEAUTAPI VarDateFromI2(SHORT sIn, DATE * pdateOut);
WINOLEAUTAPI VarDateFromI4(LONG lIn, DATE * pdateOut);
WINOLEAUTAPI VarDateFromR4(FLOAT fltIn, DATE * pdateOut);
WINOLEAUTAPI VarDateFromR8(DOUBLE dblIn, DATE * pdateOut);
WINOLEAUTAPI VarDateFromCy(CY cyIn, DATE * pdateOut);
WINOLEAUTAPI VarDateFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
WINOLEAUTAPI VarDateFromDisp(IDispatch * pdispIn, LCID lcid, DATE * pdateOut);
WINOLEAUTAPI VarDateFromBool(VARIANT_BOOL boolIn, DATE * pdateOut);
WINOLEAUTAPI VarDateFromI1(CHAR cIn, DATE *pdateOut);
WINOLEAUTAPI VarDateFromUI2(USHORT uiIn, DATE *pdateOut);
WINOLEAUTAPI VarDateFromUI4(ULONG ulIn, DATE *pdateOut);
WINOLEAUTAPI VarDateFromDec(DECIMAL *pdecIn, DATE *pdateOut);

WINOLEAUTAPI VarCyFromUI1(BYTE bIn, CY * pcyOut);
WINOLEAUTAPI VarCyFromI2(SHORT sIn, CY * pcyOut);
WINOLEAUTAPI VarCyFromI4(LONG lIn, CY * pcyOut);
WINOLEAUTAPI VarCyFromR4(FLOAT fltIn, CY * pcyOut);
WINOLEAUTAPI VarCyFromR8(DOUBLE dblIn, CY * pcyOut);
WINOLEAUTAPI VarCyFromDate(DATE dateIn, CY * pcyOut);
WINOLEAUTAPI VarCyFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, CY * pcyOut);
WINOLEAUTAPI VarCyFromDisp(IDispatch * pdispIn, LCID lcid, CY * pcyOut);
WINOLEAUTAPI VarCyFromBool(VARIANT_BOOL boolIn, CY * pcyOut);
WINOLEAUTAPI VarCyFromI1(CHAR cIn, CY *pcyOut);
WINOLEAUTAPI VarCyFromUI2(USHORT uiIn, CY *pcyOut);
WINOLEAUTAPI VarCyFromUI4(ULONG ulIn, CY *pcyOut);
WINOLEAUTAPI VarCyFromDec(DECIMAL *pdecIn, CY *pcyOut);

WINOLEAUTAPI VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
WINOLEAUTAPI VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
WINOLEAUTAPI VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
WINOLEAUTAPI VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
WINOLEAUTAPI VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
WINOLEAUTAPI VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
WINOLEAUTAPI VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
WINOLEAUTAPI VarBstrFromDisp(IDispatch * pdispIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
WINOLEAUTAPI VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
WINOLEAUTAPI VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
WINOLEAUTAPI VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
WINOLEAUTAPI VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
WINOLEAUTAPI VarBstrFromDec(DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);

WINOLEAUTAPI VarBoolFromUI1(BYTE bIn, VARIANT_BOOL * pboolOut);
WINOLEAUTAPI VarBoolFromI2(SHORT sIn, VARIANT_BOOL * pboolOut);
WINOLEAUTAPI VarBoolFromI4(LONG lIn, VARIANT_BOOL * pboolOut);
WINOLEAUTAPI VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL * pboolOut);
WINOLEAUTAPI VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL * pboolOut);
WINOLEAUTAPI VarBoolFromDate(DATE dateIn, VARIANT_BOOL * pboolOut);
WINOLEAUTAPI VarBoolFromCy(CY cyIn, VARIANT_BOOL * pboolOut);
WINOLEAUTAPI VarBoolFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL * pboolOut);
WINOLEAUTAPI VarBoolFromDisp(IDispatch * pdispIn, LCID lcid, VARIANT_BOOL * pboolOut);
WINOLEAUTAPI VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut);
WINOLEAUTAPI VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut);
WINOLEAUTAPI VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut);
WINOLEAUTAPI VarBoolFromDec(DECIMAL *pdecIn, VARIANT_BOOL *pboolOut);

WINOLEAUTAPI VarI1FromUI1(BYTE bIn, CHAR *pcOut);
WINOLEAUTAPI VarI1FromI2(SHORT uiIn, CHAR *pcOut);
WINOLEAUTAPI VarI1FromI4(LONG lIn, CHAR *pcOut);
WINOLEAUTAPI VarI1FromR4(FLOAT fltIn, CHAR *pcOut);
WINOLEAUTAPI VarI1FromR8(DOUBLE dblIn, CHAR *pcOut);
WINOLEAUTAPI VarI1FromDate(DATE dateIn, CHAR *pcOut);
WINOLEAUTAPI VarI1FromCy(CY cyIn, CHAR *pcOut);
WINOLEAUTAPI VarI1FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut);
WINOLEAUTAPI VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut);
WINOLEAUTAPI VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut);
WINOLEAUTAPI VarI1FromUI2(USHORT uiIn, CHAR *pcOut);
WINOLEAUTAPI VarI1FromUI4(ULONG ulIn, CHAR *pcOut);
WINOLEAUTAPI VarI1FromDec(DECIMAL *pdecIn, CHAR *pcOut);

WINOLEAUTAPI VarUI2FromUI1(BYTE bIn, USHORT *puiOut);
WINOLEAUTAPI VarUI2FromI2(SHORT uiIn, USHORT *puiOut);
WINOLEAUTAPI VarUI2FromI4(LONG lIn, USHORT *puiOut);
WINOLEAUTAPI VarUI2FromR4(FLOAT fltIn, USHORT *puiOut);
WINOLEAUTAPI VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut);
WINOLEAUTAPI VarUI2FromDate(DATE dateIn, USHORT *puiOut);
WINOLEAUTAPI VarUI2FromCy(CY cyIn, USHORT *puiOut);
WINOLEAUTAPI VarUI2FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut);
WINOLEAUTAPI VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut);
WINOLEAUTAPI VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut);
WINOLEAUTAPI VarUI2FromI1(CHAR cIn, USHORT *puiOut);
WINOLEAUTAPI VarUI2FromUI4(ULONG ulIn, USHORT *puiOut);
WINOLEAUTAPI VarUI2FromDec(DECIMAL *pdecIn, USHORT *puiOut);

WINOLEAUTAPI VarUI4FromUI1(BYTE bIn, ULONG *pulOut);
WINOLEAUTAPI VarUI4FromI2(SHORT uiIn, ULONG *pulOut);
WINOLEAUTAPI VarUI4FromI4(LONG lIn, ULONG *pulOut);
WINOLEAUTAPI VarUI4FromR4(FLOAT fltIn, ULONG *pulOut);
WINOLEAUTAPI VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut);
WINOLEAUTAPI VarUI4FromDate(DATE dateIn, ULONG *pulOut);
WINOLEAUTAPI VarUI4FromCy(CY cyIn, ULONG *pulOut);
WINOLEAUTAPI VarUI4FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut);
WINOLEAUTAPI VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut);
WINOLEAUTAPI VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut);
WINOLEAUTAPI VarUI4FromI1(CHAR cIn, ULONG *pulOut);
WINOLEAUTAPI VarUI4FromUI2(USHORT uiIn, ULONG *pulOut);
WINOLEAUTAPI VarUI4FromDec(DECIMAL *pdecIn, ULONG *pulOut);

WINOLEAUTAPI VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut);
WINOLEAUTAPI VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut);
WINOLEAUTAPI VarDecFromI4(LONG lIn, DECIMAL *pdecOut);
WINOLEAUTAPI VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut);
WINOLEAUTAPI VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut);
WINOLEAUTAPI VarDecFromDate(DATE dateIn, DECIMAL *pdecOut);
WINOLEAUTAPI VarDecFromCy(CY cyIn, DECIMAL *pdecOut);
WINOLEAUTAPI VarDecFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut);
WINOLEAUTAPI VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut);
WINOLEAUTAPI VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut);
WINOLEAUTAPI VarDecFromI1(CHAR cIn, DECIMAL *pdecOut);
WINOLEAUTAPI VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut);
WINOLEAUTAPI VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut);

// @CESYSGEN ENDIF

#define VarUI4FromUI4(in, pOut) (*(pOut) = (in))
#define VarI4FromI4(in, pOut)   (*(pOut) = (in))

#define VarUI1FromInt       VarUI1FromI4
#define VarUI1FromUint      VarUI1FromUI4
#define VarI2FromInt        VarI2FromI4
#define VarI2FromUint       VarI2FromUI4
#define VarI4FromInt        VarI4FromI4
#define VarI4FromUint       VarI4FromUI4
#define VarR4FromInt        VarR4FromI4
#define VarR4FromUint       VarR4FromUI4
#define VarR8FromInt        VarR8FromI4
#define VarR8FromUint       VarR8FromUI4
#define VarDateFromInt      VarDateFromI4
#define VarDateFromUint     VarDateFromUI4
#define VarCyFromInt        VarCyFromI4
#define VarCyFromUint       VarCyFromUI4
#define VarBstrFromInt      VarBstrFromI4
#define VarBstrFromUint     VarBstrFromUI4
#define VarBoolFromInt      VarBoolFromI4
#define VarBoolFromUint     VarBoolFromUI4
#define VarI1FromInt        VarI1FromI4
#define VarI1FromUint       VarI1FromUI4
#define VarUI2FromInt       VarUI2FromI4
#define VarUI2FromUint      VarUI2FromUI4
#define VarUI4FromInt       VarUI4FromI4
#define VarUI4FromUint      VarUI4FromUI4
#define VarDecFromInt       VarDecFromI4
#define VarDecFromUint      VarDecFromUI4
#define VarIntFromUI1       VarI4FromUI1
#define VarIntFromI2        VarI4FromI2
#define VarIntFromI4        VarI4FromI4
#define VarIntFromR4        VarI4FromR4
#define VarIntFromR8        VarI4FromR8
#define VarIntFromDate      VarI4FromDate
#define VarIntFromCy        VarI4FromCy
#define VarIntFromStr       VarI4FromStr
#define VarIntFromDisp      VarI4FromDisp
#define VarIntFromBool      VarI4FromBool
#define VarIntFromI1        VarI4FromI1
#define VarIntFromUI2       VarI4FromUI2
#define VarIntFromUI4       VarI4FromUI4
#define VarIntFromDec       VarI4FromDec
#define VarIntFromUint      VarI4FromUI4
#define VarUintFromUI1      VarUI4FromUI1
#define VarUintFromI2       VarUI4FromI2
#define VarUintFromI4       VarUI4FromI4
#define VarUintFromR4       VarUI4FromR4
#define VarUintFromR8       VarUI4FromR8
#define VarUintFromDate     VarUI4FromDate
#define VarUintFromCy       VarUI4FromCy
#define VarUintFromStr      VarUI4FromStr
#define VarUintFromDisp     VarUI4FromDisp
#define VarUintFromBool     VarUI4FromBool
#define VarUintFromI1       VarUI4FromI1
#define VarUintFromUI2      VarUI4FromUI2
#define VarUintFromUI4      VarUI4FromUI4
#define VarUintFromDec      VarUI4FromDec
#define VarUintFromInt      VarUI4FromI4

/* Mac Note: On the Mac, the coersion functions support the
 * Symantec C++ calling convention for float/double. To support
 * float/double arguments compiled with the MPW C compiler,
 * use the following APIs to move MPW float/double values into
 * a VARIANT.
 */

/*---------------------------------------------------------------------*/
/*            New VARIANT <-> string parsing functions                 */
/*---------------------------------------------------------------------*/

typedef struct {
    INT   cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT   cchUsed;
    INT   nBaseShift;
    INT   nPwr10;
} NUMPARSE;

/* flags used by both dwInFlags and dwOutFlags:
 */
#define NUMPRS_LEADING_WHITE    0x0001
#define NUMPRS_TRAILING_WHITE   0x0002
#define NUMPRS_LEADING_PLUS     0x0004
#define NUMPRS_TRAILING_PLUS    0x0008
#define NUMPRS_LEADING_MINUS    0x0010
#define NUMPRS_TRAILING_MINUS   0x0020
#define NUMPRS_HEX_OCT          0x0040
#define NUMPRS_PARENS           0x0080
#define NUMPRS_DECIMAL          0x0100
#define NUMPRS_THOUSANDS        0x0200
#define NUMPRS_CURRENCY         0x0400
#define NUMPRS_EXPONENT         0x0800
#define NUMPRS_USE_ALL          0x1000
#define NUMPRS_STD              0x1FFF

/* flags used by dwOutFlags only:
 */
#define NUMPRS_NEG              0x10000
#define NUMPRS_INEXACT          0x20000

/* flags used by VarNumFromParseNum to indicate acceptable result types:
 */
#define VTBIT_I1        (1 << VT_I1)
#define VTBIT_UI1       (1 << VT_UI1)
#define VTBIT_I2        (1 << VT_I2)
#define VTBIT_UI2       (1 << VT_UI2)
#define VTBIT_I4        (1 << VT_I4)
#define VTBIT_UI4       (1 << VT_UI4)
#define VTBIT_R4        (1 << VT_R4)
#define VTBIT_R8        (1 << VT_R8)
#define VTBIT_CY        (1 << VT_CY)
#define VTBIT_DECIMAL   (1 << VT_DECIMAL)

// @CESYSGEN IF DCOM_MODULES_OLEAUT32

WINOLEAUTAPI VarParseNumFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags,
            NUMPARSE * pnumprs, BYTE * rgbDig);

WINOLEAUTAPI VarNumFromParseNum(NUMPARSE * pnumprs, BYTE * rgbDig,
            ULONG dwVtBits, VARIANT * pvar);


// @CESYSGEN ENDIF

/*---------------------------------------------------------------------*/
/*                   New date functions                                */
/*---------------------------------------------------------------------*/

#define VAR_VALIDDATE       0x0004    /* VarDateFromUdate() only */
#define VAR_CALENDAR_HIJRI  0x0008    /* use Hijri calender */
#define VARIANT_CALENDAR_HIJRI VAR_CALENDAR_HIJRI

/* The UDATE structure is used with VarDateFromUdate() and VarUdateFromDate().
 * It represents an "unpacked date".
 */
typedef struct {
    SYSTEMTIME st;
    USHORT  wDayOfYear;
} UDATE;

// @CESYSGEN IF DCOM_MODULES_OLEAUT32

/* APIs to "pack" and "unpack" dates.
 */
WINOLEAUTAPI VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut);

WINOLEAUTAPI VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut);

/* API to retrieve the secondary(altername) month names
   Useful for Hijri, Polish and Russian alternate month names
*/   
WINOLEAUTAPI GetAltMonthNames(LCID lcid, LPOLESTR * * prgp);

// @CESYSGEN ENDIF


/*---------------------------------------------------------------------*/
/*                 ITypeLib                                            */
/*---------------------------------------------------------------------*/

typedef ITypeLib * LPTYPELIB;


/*---------------------------------------------------------------------*/
/*                ITypeInfo                                            */
/*---------------------------------------------------------------------*/


typedef LONG DISPID;
typedef DISPID MEMBERID;

#define MEMBERID_NIL DISPID_UNKNOWN
#define ID_DEFAULTINST  -2


/* Flags for IDispatch::Invoke */
#define DISPATCH_METHOD         0x1
#define DISPATCH_PROPERTYGET    0x2
#define DISPATCH_PROPERTYPUT    0x4
#define DISPATCH_PROPERTYPUTREF 0x8

typedef ITypeInfo * LPTYPEINFO;


/*---------------------------------------------------------------------*/
/*                ITypeComp                                            */
/*---------------------------------------------------------------------*/

typedef ITypeComp * LPTYPECOMP;


/*---------------------------------------------------------------------*/
/*             ICreateTypeLib                                          */
/*---------------------------------------------------------------------*/

typedef ICreateTypeLib * LPCREATETYPELIB;

typedef ICreateTypeInfo * LPCREATETYPEINFO;

/*---------------------------------------------------------------------*/
/*             TypeInfo API                                            */
/*---------------------------------------------------------------------*/

/* compute a 16bit hash value for the given name
 */
#ifdef _WIN32
WINOLEAUTAPI_(ULONG) LHashValOfNameSysA(SYSKIND syskind, LCID lcid,
            LPCSTR szName);
#endif

WINOLEAUTAPI_(ULONG)
LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR * szName);

#define LHashValOfName(lcid, szName) \
            LHashValOfNameSys(SYS_WIN32, lcid, szName)

#define WHashValOfLHashVal(lhashval) \
            ((USHORT) (0x0000ffff & (lhashval)))

#define IsHashValCompatible(lhashval1, lhashval2) \
            ((BOOL) ((0x00ff0000 & (lhashval1)) == (0x00ff0000 & (lhashval2))))

/* load the typelib from the file with the given filename
 */
WINOLEAUTAPI LoadTypeLib(const OLECHAR  *szFile, ITypeLib ** pptlib);

/* Control how a type library is registered
 */
typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;

// @CESYSGEN IF DCOM_MODULES_OLEAUT32

WINOLEAUTAPI LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind,
            ITypeLib ** pptlib);

/* load registered typelib
 */
WINOLEAUTAPI LoadRegTypeLib(REFGUID rguid, WORD wVerMajor, WORD wVerMinor,
            LCID lcid, ITypeLib ** pptlib);

/* get path to registered typelib
 */
WINOLEAUTAPI QueryPathOfRegTypeLib(REFGUID guid, USHORT wMaj, USHORT wMin,
            LCID lcid, LPBSTR lpbstrPathName);

/* add typelib to registry
 */
WINOLEAUTAPI RegisterTypeLib(ITypeLib * ptlib, OLECHAR  *szFullPath,
            OLECHAR  *szHelpDir);

/* remove typelib from registry
 */

WINOLEAUTAPI UnRegisterTypeLib(REFGUID libID, WORD wVerMajor,
            WORD wVerMinor, LCID lcid, SYSKIND syskind);

WINOLEAUTAPI CreateTypeLib(SYSKIND syskind, const OLECHAR  *szFile,
            ICreateTypeLib ** ppctlib);

WINOLEAUTAPI CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib2 **ppctlib);


// @CESYSGEN ENDIF

/*---------------------------------------------------------------------*/
/*           IDispatch implementation support                          */
/*---------------------------------------------------------------------*/

typedef IDispatch * LPDISPATCH;

typedef struct tagPARAMDATA {
    OLECHAR * szName;   /* parameter name */
    VARTYPE vt;         /* parameter type */
} PARAMDATA, * LPPARAMDATA;

typedef struct tagMETHODDATA {
    OLECHAR * szName;   /* method name */
    PARAMDATA * ppdata; /* pointer to an array of PARAMDATAs */
    DISPID dispid;      /* method ID */
    UINT iMeth;         /* method index */
    CALLCONV cc;        /* calling convention */
    UINT cArgs;         /* count of arguments */
    WORD wFlags;        /* same wFlags as on IDispatch::Invoke() */
    VARTYPE vtReturn;
} METHODDATA, * LPMETHODDATA;

typedef struct tagINTERFACEDATA {
    METHODDATA * pmethdata;  /* pointer to an array of METHODDATAs */
    UINT cMembers;      /* count of members */
} INTERFACEDATA, * LPINTERFACEDATA;


// @CESYSGEN IF DCOM_MODULES_OLEAUT32

/* Locate the parameter indicated by the given position, and
 * return it coerced to the given target VARTYPE (vtTarg).
 */
WINOLEAUTAPI DispGetParam(DISPPARAMS * pdispparams, UINT position,
            VARTYPE vtTarg, VARIANT * pvarResult, UINT * puArgErr);

/* Automatic TypeInfo driven implementation of IDispatch::GetIDsOfNames()
 */
WINOLEAUTAPI DispGetIDsOfNames(ITypeInfo * ptinfo, OLECHAR ** rgszNames,
            UINT cNames, DISPID * rgdispid);

/* Automatic TypeInfo driven implementation of IDispatch::Invoke()
 */
WINOLEAUTAPI DispInvoke(void * _this, ITypeInfo * ptinfo, DISPID dispidMember,
            WORD wFlags, DISPPARAMS * pparams, VARIANT * pvarResult,
            EXCEPINFO * pexcepinfo, UINT * puArgErr);

/* Construct a TypeInfo from an interface data description
 */
WINOLEAUTAPI CreateDispTypeInfo(INTERFACEDATA * pidata, LCID lcid,
            ITypeInfo ** pptinfo);

/* Create an instance of the standard TypeInfo driven IDispatch
 * implementation.
 */
WINOLEAUTAPI CreateStdDispatch(IUnknown * punkOuter, void * pvThis,
            ITypeInfo * ptinfo, IUnknown ** ppunkStdDisp);

/* Low-level helper for IDispatch::Invoke() provides machine independence
 * for customized Invoke().
 */
WINOLEAUTAPI DispCallFunc(void * pvInstance, ULONG oVft, CALLCONV cc,
            VARTYPE vtReturn, UINT  cActuals, VARTYPE * prgvt,
            VARIANTARG ** prgpvarg, VARIANT * pvargResult);


// @CESYSGEN ENDIF

/*---------------------------------------------------------------------*/
/*            Active Object Registration API                           */
/*---------------------------------------------------------------------*/

/* flags for RegisterActiveObject */
#define ACTIVEOBJECT_STRONG 0x0
#define ACTIVEOBJECT_WEAK 0x1

// @CESYSGEN IF DCOM_MODULES_OLEAUT32

#ifndef UNDER_CE
// Unsupported on WinCE, even in the DCOM configuration.
WINOLEAUTAPI RegisterActiveObject(IUnknown * punk, REFCLSID rclsid,
            DWORD dwFlags, DWORD * pdwRegister);

WINOLEAUTAPI RevokeActiveObject(DWORD dwRegister, void * pvReserved);

WINOLEAUTAPI GetActiveObject(REFCLSID rclsid, void * pvReserved,
            IUnknown ** ppunk);

#endif

/*---------------------------------------------------------------------*/
/*                           ErrorInfo API                             */
/*---------------------------------------------------------------------*/

WINOLEAUTAPI SetErrorInfo(ULONG dwReserved, IErrorInfo * perrinfo);
WINOLEAUTAPI GetErrorInfo(ULONG dwReserved, IErrorInfo ** pperrinfo);
WINOLEAUTAPI CreateErrorInfo(ICreateErrorInfo ** pperrinfo);

/*---------------------------------------------------------------------*/
/*                           MISC API                                  */
/*---------------------------------------------------------------------*/

WINOLEAUTAPI_(ULONG) OaBuildVersion(void);

WINOLEAUTAPI_(void) ClearCustData(LPCUSTDATA pCustData);

// @CESYSGEN ENDIF

// Declare variant access functions.

#if __STDC__ || defined(NONAMELESSUNION)
#define V_UNION(X, Y)   ((X)->n1.n2.n3.Y)
#define V_VT(X)         ((X)->n1.n2.vt)
#else
#define V_UNION(X, Y)   ((X)->Y)
#define V_VT(X)         ((X)->vt)
#endif

/* Variant access macros
 */
#define V_ISBYREF(X)     (V_VT(X)&VT_BYREF)
#define V_ISARRAY(X)     (V_VT(X)&VT_ARRAY)
#define V_ISVECTOR(X)    (V_VT(X)&VT_VECTOR)
#define V_NONE(X)        V_I2(X)

#define V_UI1(X)         V_UNION(X, bVal)
#define V_UI1REF(X)      V_UNION(X, pbVal)
#define V_I2(X)          V_UNION(X, iVal)
#define V_I2REF(X)       V_UNION(X, piVal)
#define V_I4(X)          V_UNION(X, lVal)
#define V_I4REF(X)       V_UNION(X, plVal)
#define V_I8(X)          V_UNION(X, llVal)
#define V_I8REF(X)       V_UNION(X, pllVal)
#define V_R4(X)          V_UNION(X, fltVal)
#define V_R4REF(X)       V_UNION(X, pfltVal)
#define V_R8(X)          V_UNION(X, dblVal)
#define V_R8REF(X)       V_UNION(X, pdblVal)
#define V_I1(X)          V_UNION(X, cVal)
#define V_I1REF(X)       V_UNION(X, pcVal)
#define V_UI2(X)         V_UNION(X, uiVal)
#define V_UI2REF(X)      V_UNION(X, puiVal)
#define V_UI4(X)         V_UNION(X, ulVal)
#define V_UI4REF(X)      V_UNION(X, pulVal)
#define V_INT(X)         V_UNION(X, intVal)
#define V_INTREF(X)      V_UNION(X, pintVal)
#define V_UINT(X)        V_UNION(X, uintVal)
#define V_UINTREF(X)     V_UNION(X, puintVal)
#define V_CY(X)          V_UNION(X, cyVal)
#define V_CYREF(X)       V_UNION(X, pcyVal)
#define V_DATE(X)        V_UNION(X, date)
#define V_DATEREF(X)     V_UNION(X, pdate)
#define V_BSTR(X)        V_UNION(X, bstrVal)
#define V_BSTRREF(X)     V_UNION(X, pbstrVal)
#define V_DISPATCH(X)    V_UNION(X, pdispVal)
#define V_DISPATCHREF(X) V_UNION(X, ppdispVal)
#define V_ERROR(X)       V_UNION(X, scode)
#define V_ERRORREF(X)    V_UNION(X, pscode)
#define V_BOOL(X)        V_UNION(X, boolVal)
#define V_BOOLREF(X)     V_UNION(X, pboolVal)
#define V_UNKNOWN(X)     V_UNION(X, punkVal)
#define V_UNKNOWNREF(X)  V_UNION(X, ppunkVal)
#define V_VARIANTREF(X)  V_UNION(X, pvarVal)
#define V_ARRAY(X)       V_UNION(X, parray)
#define V_ARRAYREF(X)    V_UNION(X, pparray)
#define V_BYREF(X)       V_UNION(X, byref)

#define V_DECIMAL(X)     V_UNION(X, decVal)
#define V_DECIMALREF(X)  V_UNION(X, pdecVal)

#ifndef RC_INVOKED
#include <poppack.h>
#endif // RC_INVOKED

#endif     // __OLEAUTO_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\oleidl.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


/* File created by MIDL compiler version 3.02.88 */
/* at Tue Nov 16 19:00:23 1999
 */
/* Compiler settings for .\oleidl.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32, ms_ext, c_ext
    error checks: none
*/
//@@MIDL_FILE_HEADING(  )
#include "rpc.h"
#include "rpcndr.h"
#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __oleidl_h__
#define __oleidl_h__

#ifdef __cplusplus
extern "C"{
#endif 

/* Forward Declarations */ 

#ifndef __IOleAdviseHolder_FWD_DEFINED__
#define __IOleAdviseHolder_FWD_DEFINED__
typedef interface IOleAdviseHolder IOleAdviseHolder;
#endif 	/* __IOleAdviseHolder_FWD_DEFINED__ */


#ifndef __IOleCache_FWD_DEFINED__
#define __IOleCache_FWD_DEFINED__
typedef interface IOleCache IOleCache;
#endif 	/* __IOleCache_FWD_DEFINED__ */


#ifndef __IOleCache2_FWD_DEFINED__
#define __IOleCache2_FWD_DEFINED__
typedef interface IOleCache2 IOleCache2;
#endif 	/* __IOleCache2_FWD_DEFINED__ */


#ifndef __IOleCacheControl_FWD_DEFINED__
#define __IOleCacheControl_FWD_DEFINED__
typedef interface IOleCacheControl IOleCacheControl;
#endif 	/* __IOleCacheControl_FWD_DEFINED__ */


#ifndef __IParseDisplayName_FWD_DEFINED__
#define __IParseDisplayName_FWD_DEFINED__
typedef interface IParseDisplayName IParseDisplayName;
#endif 	/* __IParseDisplayName_FWD_DEFINED__ */


#ifndef __IOleContainer_FWD_DEFINED__
#define __IOleContainer_FWD_DEFINED__
typedef interface IOleContainer IOleContainer;
#endif 	/* __IOleContainer_FWD_DEFINED__ */


#ifndef __IOleClientSite_FWD_DEFINED__
#define __IOleClientSite_FWD_DEFINED__
typedef interface IOleClientSite IOleClientSite;
#endif 	/* __IOleClientSite_FWD_DEFINED__ */


#ifndef __IOleObject_FWD_DEFINED__
#define __IOleObject_FWD_DEFINED__
typedef interface IOleObject IOleObject;
#endif 	/* __IOleObject_FWD_DEFINED__ */


#ifndef __IOleWindow_FWD_DEFINED__
#define __IOleWindow_FWD_DEFINED__
typedef interface IOleWindow IOleWindow;
#endif 	/* __IOleWindow_FWD_DEFINED__ */


#ifndef __IOleLink_FWD_DEFINED__
#define __IOleLink_FWD_DEFINED__
typedef interface IOleLink IOleLink;
#endif 	/* __IOleLink_FWD_DEFINED__ */


#ifndef __IOleItemContainer_FWD_DEFINED__
#define __IOleItemContainer_FWD_DEFINED__
typedef interface IOleItemContainer IOleItemContainer;
#endif 	/* __IOleItemContainer_FWD_DEFINED__ */


#ifndef __IOleInPlaceUIWindow_FWD_DEFINED__
#define __IOleInPlaceUIWindow_FWD_DEFINED__
typedef interface IOleInPlaceUIWindow IOleInPlaceUIWindow;
#endif 	/* __IOleInPlaceUIWindow_FWD_DEFINED__ */


#ifndef __IOleInPlaceActiveObject_FWD_DEFINED__
#define __IOleInPlaceActiveObject_FWD_DEFINED__
typedef interface IOleInPlaceActiveObject IOleInPlaceActiveObject;
#endif 	/* __IOleInPlaceActiveObject_FWD_DEFINED__ */


#ifndef __IOleInPlaceFrame_FWD_DEFINED__
#define __IOleInPlaceFrame_FWD_DEFINED__
typedef interface IOleInPlaceFrame IOleInPlaceFrame;
#endif 	/* __IOleInPlaceFrame_FWD_DEFINED__ */


#ifndef __IOleInPlaceObject_FWD_DEFINED__
#define __IOleInPlaceObject_FWD_DEFINED__
typedef interface IOleInPlaceObject IOleInPlaceObject;
#endif 	/* __IOleInPlaceObject_FWD_DEFINED__ */


#ifndef __IOleInPlaceSite_FWD_DEFINED__
#define __IOleInPlaceSite_FWD_DEFINED__
typedef interface IOleInPlaceSite IOleInPlaceSite;
#endif 	/* __IOleInPlaceSite_FWD_DEFINED__ */


#ifndef __IContinue_FWD_DEFINED__
#define __IContinue_FWD_DEFINED__
typedef interface IContinue IContinue;
#endif 	/* __IContinue_FWD_DEFINED__ */


#ifndef __IViewObject_FWD_DEFINED__
#define __IViewObject_FWD_DEFINED__
typedef interface IViewObject IViewObject;
#endif 	/* __IViewObject_FWD_DEFINED__ */


#ifndef __IViewObject2_FWD_DEFINED__
#define __IViewObject2_FWD_DEFINED__
typedef interface IViewObject2 IViewObject2;
#endif 	/* __IViewObject2_FWD_DEFINED__ */


#ifndef __IDropSource_FWD_DEFINED__
#define __IDropSource_FWD_DEFINED__
typedef interface IDropSource IDropSource;
#endif 	/* __IDropSource_FWD_DEFINED__ */


#ifndef __IDropTarget_FWD_DEFINED__
#define __IDropTarget_FWD_DEFINED__
typedef interface IDropTarget IDropTarget;
#endif 	/* __IDropTarget_FWD_DEFINED__ */


#ifndef __IEnumOLEVERB_FWD_DEFINED__
#define __IEnumOLEVERB_FWD_DEFINED__
typedef interface IEnumOLEVERB IEnumOLEVERB;
#endif 	/* __IEnumOLEVERB_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/****************************************
 * Generated header for interface: __MIDL_itf_oleidl_0000
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [local] */ 


//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//
//--------------------------------------------------------------------------




extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_s_ifspec;

#ifndef __IOleAdviseHolder_INTERFACE_DEFINED__
#define __IOleAdviseHolder_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleAdviseHolder
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [uuid][object][local] */ 


typedef /* [unique] */ IOleAdviseHolder __RPC_FAR *LPOLEADVISEHOLDER;


EXTERN_C const IID IID_IOleAdviseHolder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000111-0000-0000-C000-000000000046")
    IOleAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Advise( 
            /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvise,
            /* [out] */ DWORD __RPC_FAR *pdwConnection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unadvise( 
            /* [in] */ DWORD dwConnection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumAdvise( 
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumAdvise) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendOnRename( 
            /* [unique][in] */ IMoniker __RPC_FAR *pmk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendOnSave( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendOnClose( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleAdviseHolderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleAdviseHolder __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleAdviseHolder __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleAdviseHolder __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Advise )( 
            IOleAdviseHolder __RPC_FAR * This,
            /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvise,
            /* [out] */ DWORD __RPC_FAR *pdwConnection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Unadvise )( 
            IOleAdviseHolder __RPC_FAR * This,
            /* [in] */ DWORD dwConnection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumAdvise )( 
            IOleAdviseHolder __RPC_FAR * This,
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumAdvise);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SendOnRename )( 
            IOleAdviseHolder __RPC_FAR * This,
            /* [unique][in] */ IMoniker __RPC_FAR *pmk);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SendOnSave )( 
            IOleAdviseHolder __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SendOnClose )( 
            IOleAdviseHolder __RPC_FAR * This);
        
        END_INTERFACE
    } IOleAdviseHolderVtbl;

    interface IOleAdviseHolder
    {
        CONST_VTBL struct IOleAdviseHolderVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleAdviseHolder_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleAdviseHolder_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleAdviseHolder_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleAdviseHolder_Advise(This,pAdvise,pdwConnection)	\
    (This)->lpVtbl -> Advise(This,pAdvise,pdwConnection)

#define IOleAdviseHolder_Unadvise(This,dwConnection)	\
    (This)->lpVtbl -> Unadvise(This,dwConnection)

#define IOleAdviseHolder_EnumAdvise(This,ppenumAdvise)	\
    (This)->lpVtbl -> EnumAdvise(This,ppenumAdvise)

#define IOleAdviseHolder_SendOnRename(This,pmk)	\
    (This)->lpVtbl -> SendOnRename(This,pmk)

#define IOleAdviseHolder_SendOnSave(This)	\
    (This)->lpVtbl -> SendOnSave(This)

#define IOleAdviseHolder_SendOnClose(This)	\
    (This)->lpVtbl -> SendOnClose(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleAdviseHolder_Advise_Proxy( 
    IOleAdviseHolder __RPC_FAR * This,
    /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvise,
    /* [out] */ DWORD __RPC_FAR *pdwConnection);


void __RPC_STUB IOleAdviseHolder_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleAdviseHolder_Unadvise_Proxy( 
    IOleAdviseHolder __RPC_FAR * This,
    /* [in] */ DWORD dwConnection);


void __RPC_STUB IOleAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleAdviseHolder_EnumAdvise_Proxy( 
    IOleAdviseHolder __RPC_FAR * This,
    /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumAdvise);


void __RPC_STUB IOleAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleAdviseHolder_SendOnRename_Proxy( 
    IOleAdviseHolder __RPC_FAR * This,
    /* [unique][in] */ IMoniker __RPC_FAR *pmk);


void __RPC_STUB IOleAdviseHolder_SendOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleAdviseHolder_SendOnSave_Proxy( 
    IOleAdviseHolder __RPC_FAR * This);


void __RPC_STUB IOleAdviseHolder_SendOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleAdviseHolder_SendOnClose_Proxy( 
    IOleAdviseHolder __RPC_FAR * This);


void __RPC_STUB IOleAdviseHolder_SendOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleAdviseHolder_INTERFACE_DEFINED__ */


#ifndef __IOleCache_INTERFACE_DEFINED__
#define __IOleCache_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleCache
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IOleCache __RPC_FAR *LPOLECACHE;


EXTERN_C const IID IID_IOleCache;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("0000011e-0000-0000-C000-000000000046")
    IOleCache : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Cache( 
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
            /* [in] */ DWORD advf,
            /* [out] */ DWORD __RPC_FAR *pdwConnection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Uncache( 
            /* [in] */ DWORD dwConnection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumCache( 
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumSTATDATA) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InitCache( 
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetData( 
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
            /* [unique][in] */ STGMEDIUM __RPC_FAR *pmedium,
            /* [in] */ BOOL fRelease) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleCacheVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleCache __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleCache __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleCache __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Cache )( 
            IOleCache __RPC_FAR * This,
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
            /* [in] */ DWORD advf,
            /* [out] */ DWORD __RPC_FAR *pdwConnection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Uncache )( 
            IOleCache __RPC_FAR * This,
            /* [in] */ DWORD dwConnection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumCache )( 
            IOleCache __RPC_FAR * This,
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumSTATDATA);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InitCache )( 
            IOleCache __RPC_FAR * This,
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObject);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetData )( 
            IOleCache __RPC_FAR * This,
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
            /* [unique][in] */ STGMEDIUM __RPC_FAR *pmedium,
            /* [in] */ BOOL fRelease);
        
        END_INTERFACE
    } IOleCacheVtbl;

    interface IOleCache
    {
        CONST_VTBL struct IOleCacheVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleCache_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleCache_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleCache_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleCache_Cache(This,pformatetc,advf,pdwConnection)	\
    (This)->lpVtbl -> Cache(This,pformatetc,advf,pdwConnection)

#define IOleCache_Uncache(This,dwConnection)	\
    (This)->lpVtbl -> Uncache(This,dwConnection)

#define IOleCache_EnumCache(This,ppenumSTATDATA)	\
    (This)->lpVtbl -> EnumCache(This,ppenumSTATDATA)

#define IOleCache_InitCache(This,pDataObject)	\
    (This)->lpVtbl -> InitCache(This,pDataObject)

#define IOleCache_SetData(This,pformatetc,pmedium,fRelease)	\
    (This)->lpVtbl -> SetData(This,pformatetc,pmedium,fRelease)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleCache_Cache_Proxy( 
    IOleCache __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
    /* [in] */ DWORD advf,
    /* [out] */ DWORD __RPC_FAR *pdwConnection);


void __RPC_STUB IOleCache_Cache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleCache_Uncache_Proxy( 
    IOleCache __RPC_FAR * This,
    /* [in] */ DWORD dwConnection);


void __RPC_STUB IOleCache_Uncache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleCache_EnumCache_Proxy( 
    IOleCache __RPC_FAR * This,
    /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumSTATDATA);


void __RPC_STUB IOleCache_EnumCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleCache_InitCache_Proxy( 
    IOleCache __RPC_FAR * This,
    /* [unique][in] */ IDataObject __RPC_FAR *pDataObject);


void __RPC_STUB IOleCache_InitCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleCache_SetData_Proxy( 
    IOleCache __RPC_FAR * This,
    /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
    /* [unique][in] */ STGMEDIUM __RPC_FAR *pmedium,
    /* [in] */ BOOL fRelease);


void __RPC_STUB IOleCache_SetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleCache_INTERFACE_DEFINED__ */


#ifndef __IOleCache2_INTERFACE_DEFINED__
#define __IOleCache2_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleCache2
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IOleCache2 __RPC_FAR *LPOLECACHE2;

#define	UPDFCACHE_NODATACACHE	( 0x1 )

#define	UPDFCACHE_ONSAVECACHE	( 0x2 )

#define	UPDFCACHE_ONSTOPCACHE	( 0x4 )

#define	UPDFCACHE_NORMALCACHE	( 0x8 )

#define	UPDFCACHE_IFBLANK	( 0x10 )

#define	UPDFCACHE_ONLYIFBLANK	( 0x80000000 )

#define	UPDFCACHE_IFBLANKORONSAVECACHE	( UPDFCACHE_IFBLANK | UPDFCACHE_ONSAVECACHE )

#define	UPDFCACHE_ALL	( ( DWORD  )~UPDFCACHE_ONLYIFBLANK )

#define	UPDFCACHE_ALLBUTNODATACACHE	( UPDFCACHE_ALL & ( DWORD  )~UPDFCACHE_NODATACACHE )

typedef /* [v1_enum] */ 
enum tagDISCARDCACHE
    {	DISCARDCACHE_SAVEIFDIRTY	= 0,
	DISCARDCACHE_NOSAVE	= 1
    }	DISCARDCACHE;


EXTERN_C const IID IID_IOleCache2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000128-0000-0000-C000-000000000046")
    IOleCache2 : public IOleCache
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE UpdateCache( 
            /* [in] */ LPDATAOBJECT pDataObject,
            /* [in] */ DWORD grfUpdf,
            /* [in] */ LPVOID pReserved) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DiscardCache( 
            /* [in] */ DWORD dwDiscardOptions) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleCache2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleCache2 __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleCache2 __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleCache2 __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Cache )( 
            IOleCache2 __RPC_FAR * This,
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
            /* [in] */ DWORD advf,
            /* [out] */ DWORD __RPC_FAR *pdwConnection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Uncache )( 
            IOleCache2 __RPC_FAR * This,
            /* [in] */ DWORD dwConnection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumCache )( 
            IOleCache2 __RPC_FAR * This,
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumSTATDATA);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InitCache )( 
            IOleCache2 __RPC_FAR * This,
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObject);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetData )( 
            IOleCache2 __RPC_FAR * This,
            /* [unique][in] */ FORMATETC __RPC_FAR *pformatetc,
            /* [unique][in] */ STGMEDIUM __RPC_FAR *pmedium,
            /* [in] */ BOOL fRelease);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UpdateCache )( 
            IOleCache2 __RPC_FAR * This,
            /* [in] */ LPDATAOBJECT pDataObject,
            /* [in] */ DWORD grfUpdf,
            /* [in] */ LPVOID pReserved);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DiscardCache )( 
            IOleCache2 __RPC_FAR * This,
            /* [in] */ DWORD dwDiscardOptions);
        
        END_INTERFACE
    } IOleCache2Vtbl;

    interface IOleCache2
    {
        CONST_VTBL struct IOleCache2Vtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleCache2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleCache2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleCache2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleCache2_Cache(This,pformatetc,advf,pdwConnection)	\
    (This)->lpVtbl -> Cache(This,pformatetc,advf,pdwConnection)

#define IOleCache2_Uncache(This,dwConnection)	\
    (This)->lpVtbl -> Uncache(This,dwConnection)

#define IOleCache2_EnumCache(This,ppenumSTATDATA)	\
    (This)->lpVtbl -> EnumCache(This,ppenumSTATDATA)

#define IOleCache2_InitCache(This,pDataObject)	\
    (This)->lpVtbl -> InitCache(This,pDataObject)

#define IOleCache2_SetData(This,pformatetc,pmedium,fRelease)	\
    (This)->lpVtbl -> SetData(This,pformatetc,pmedium,fRelease)


#define IOleCache2_UpdateCache(This,pDataObject,grfUpdf,pReserved)	\
    (This)->lpVtbl -> UpdateCache(This,pDataObject,grfUpdf,pReserved)

#define IOleCache2_DiscardCache(This,dwDiscardOptions)	\
    (This)->lpVtbl -> DiscardCache(This,dwDiscardOptions)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IOleCache2_RemoteUpdateCache_Proxy( 
    IOleCache2 __RPC_FAR * This,
    /* [in] */ LPDATAOBJECT pDataObject,
    /* [in] */ DWORD grfUpdf,
    /* [in] */ DWORD pReserved);


void __RPC_STUB IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleCache2_DiscardCache_Proxy( 
    IOleCache2 __RPC_FAR * This,
    /* [in] */ DWORD dwDiscardOptions);


void __RPC_STUB IOleCache2_DiscardCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleCache2_INTERFACE_DEFINED__ */


#ifndef __IOleCacheControl_INTERFACE_DEFINED__
#define __IOleCacheControl_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleCacheControl
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [uuid][object] */ 


typedef /* [unique] */ IOleCacheControl __RPC_FAR *LPOLECACHECONTROL;


EXTERN_C const IID IID_IOleCacheControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000129-0000-0000-C000-000000000046")
    IOleCacheControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnRun( 
            LPDATAOBJECT pDataObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnStop( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleCacheControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleCacheControl __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleCacheControl __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleCacheControl __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnRun )( 
            IOleCacheControl __RPC_FAR * This,
            LPDATAOBJECT pDataObject);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnStop )( 
            IOleCacheControl __RPC_FAR * This);
        
        END_INTERFACE
    } IOleCacheControlVtbl;

    interface IOleCacheControl
    {
        CONST_VTBL struct IOleCacheControlVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleCacheControl_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleCacheControl_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleCacheControl_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleCacheControl_OnRun(This,pDataObject)	\
    (This)->lpVtbl -> OnRun(This,pDataObject)

#define IOleCacheControl_OnStop(This)	\
    (This)->lpVtbl -> OnStop(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleCacheControl_OnRun_Proxy( 
    IOleCacheControl __RPC_FAR * This,
    LPDATAOBJECT pDataObject);


void __RPC_STUB IOleCacheControl_OnRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleCacheControl_OnStop_Proxy( 
    IOleCacheControl __RPC_FAR * This);


void __RPC_STUB IOleCacheControl_OnStop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleCacheControl_INTERFACE_DEFINED__ */


#ifndef __IParseDisplayName_INTERFACE_DEFINED__
#define __IParseDisplayName_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IParseDisplayName
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IParseDisplayName __RPC_FAR *LPPARSEDISPLAYNAME;


EXTERN_C const IID IID_IParseDisplayName;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("0000011a-0000-0000-C000-000000000046")
    IParseDisplayName : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ParseDisplayName( 
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [in] */ LPOLESTR pszDisplayName,
            /* [out] */ ULONG __RPC_FAR *pchEaten,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IParseDisplayNameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IParseDisplayName __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IParseDisplayName __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IParseDisplayName __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ParseDisplayName )( 
            IParseDisplayName __RPC_FAR * This,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [in] */ LPOLESTR pszDisplayName,
            /* [out] */ ULONG __RPC_FAR *pchEaten,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkOut);
        
        END_INTERFACE
    } IParseDisplayNameVtbl;

    interface IParseDisplayName
    {
        CONST_VTBL struct IParseDisplayNameVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IParseDisplayName_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IParseDisplayName_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IParseDisplayName_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IParseDisplayName_ParseDisplayName(This,pbc,pszDisplayName,pchEaten,ppmkOut)	\
    (This)->lpVtbl -> ParseDisplayName(This,pbc,pszDisplayName,pchEaten,ppmkOut)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IParseDisplayName_ParseDisplayName_Proxy( 
    IParseDisplayName __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [in] */ LPOLESTR pszDisplayName,
    /* [out] */ ULONG __RPC_FAR *pchEaten,
    /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkOut);


void __RPC_STUB IParseDisplayName_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IParseDisplayName_INTERFACE_DEFINED__ */


#ifndef __IOleContainer_INTERFACE_DEFINED__
#define __IOleContainer_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleContainer
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IOleContainer __RPC_FAR *LPOLECONTAINER;


EXTERN_C const IID IID_IOleContainer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("0000011b-0000-0000-C000-000000000046")
    IOleContainer : public IParseDisplayName
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumObjects( 
            /* [in] */ DWORD grfFlags,
            /* [out] */ IEnumUnknown __RPC_FAR *__RPC_FAR *ppenum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LockContainer( 
            /* [in] */ BOOL fLock) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleContainerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleContainer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleContainer __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleContainer __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ParseDisplayName )( 
            IOleContainer __RPC_FAR * This,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [in] */ LPOLESTR pszDisplayName,
            /* [out] */ ULONG __RPC_FAR *pchEaten,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkOut);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumObjects )( 
            IOleContainer __RPC_FAR * This,
            /* [in] */ DWORD grfFlags,
            /* [out] */ IEnumUnknown __RPC_FAR *__RPC_FAR *ppenum);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LockContainer )( 
            IOleContainer __RPC_FAR * This,
            /* [in] */ BOOL fLock);
        
        END_INTERFACE
    } IOleContainerVtbl;

    interface IOleContainer
    {
        CONST_VTBL struct IOleContainerVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleContainer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleContainer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleContainer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleContainer_ParseDisplayName(This,pbc,pszDisplayName,pchEaten,ppmkOut)	\
    (This)->lpVtbl -> ParseDisplayName(This,pbc,pszDisplayName,pchEaten,ppmkOut)


#define IOleContainer_EnumObjects(This,grfFlags,ppenum)	\
    (This)->lpVtbl -> EnumObjects(This,grfFlags,ppenum)

#define IOleContainer_LockContainer(This,fLock)	\
    (This)->lpVtbl -> LockContainer(This,fLock)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleContainer_EnumObjects_Proxy( 
    IOleContainer __RPC_FAR * This,
    /* [in] */ DWORD grfFlags,
    /* [out] */ IEnumUnknown __RPC_FAR *__RPC_FAR *ppenum);


void __RPC_STUB IOleContainer_EnumObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleContainer_LockContainer_Proxy( 
    IOleContainer __RPC_FAR * This,
    /* [in] */ BOOL fLock);


void __RPC_STUB IOleContainer_LockContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleContainer_INTERFACE_DEFINED__ */


#ifndef __IOleClientSite_INTERFACE_DEFINED__
#define __IOleClientSite_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleClientSite
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IOleClientSite __RPC_FAR *LPOLECLIENTSITE;


EXTERN_C const IID IID_IOleClientSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000118-0000-0000-C000-000000000046")
    IOleClientSite : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SaveObject( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMoniker( 
            /* [in] */ DWORD dwAssign,
            /* [in] */ DWORD dwWhichMoniker,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContainer( 
            /* [out] */ IOleContainer __RPC_FAR *__RPC_FAR *ppContainer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShowObject( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnShowWindow( 
            /* [in] */ BOOL fShow) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RequestNewObjectLayout( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleClientSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleClientSite __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleClientSite __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleClientSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SaveObject )( 
            IOleClientSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetMoniker )( 
            IOleClientSite __RPC_FAR * This,
            /* [in] */ DWORD dwAssign,
            /* [in] */ DWORD dwWhichMoniker,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmk);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetContainer )( 
            IOleClientSite __RPC_FAR * This,
            /* [out] */ IOleContainer __RPC_FAR *__RPC_FAR *ppContainer);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ShowObject )( 
            IOleClientSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnShowWindow )( 
            IOleClientSite __RPC_FAR * This,
            /* [in] */ BOOL fShow);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RequestNewObjectLayout )( 
            IOleClientSite __RPC_FAR * This);
        
        END_INTERFACE
    } IOleClientSiteVtbl;

    interface IOleClientSite
    {
        CONST_VTBL struct IOleClientSiteVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleClientSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleClientSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleClientSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleClientSite_SaveObject(This)	\
    (This)->lpVtbl -> SaveObject(This)

#define IOleClientSite_GetMoniker(This,dwAssign,dwWhichMoniker,ppmk)	\
    (This)->lpVtbl -> GetMoniker(This,dwAssign,dwWhichMoniker,ppmk)

#define IOleClientSite_GetContainer(This,ppContainer)	\
    (This)->lpVtbl -> GetContainer(This,ppContainer)

#define IOleClientSite_ShowObject(This)	\
    (This)->lpVtbl -> ShowObject(This)

#define IOleClientSite_OnShowWindow(This,fShow)	\
    (This)->lpVtbl -> OnShowWindow(This,fShow)

#define IOleClientSite_RequestNewObjectLayout(This)	\
    (This)->lpVtbl -> RequestNewObjectLayout(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleClientSite_SaveObject_Proxy( 
    IOleClientSite __RPC_FAR * This);


void __RPC_STUB IOleClientSite_SaveObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleClientSite_GetMoniker_Proxy( 
    IOleClientSite __RPC_FAR * This,
    /* [in] */ DWORD dwAssign,
    /* [in] */ DWORD dwWhichMoniker,
    /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmk);


void __RPC_STUB IOleClientSite_GetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleClientSite_GetContainer_Proxy( 
    IOleClientSite __RPC_FAR * This,
    /* [out] */ IOleContainer __RPC_FAR *__RPC_FAR *ppContainer);


void __RPC_STUB IOleClientSite_GetContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleClientSite_ShowObject_Proxy( 
    IOleClientSite __RPC_FAR * This);


void __RPC_STUB IOleClientSite_ShowObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleClientSite_OnShowWindow_Proxy( 
    IOleClientSite __RPC_FAR * This,
    /* [in] */ BOOL fShow);


void __RPC_STUB IOleClientSite_OnShowWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleClientSite_RequestNewObjectLayout_Proxy( 
    IOleClientSite __RPC_FAR * This);


void __RPC_STUB IOleClientSite_RequestNewObjectLayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleClientSite_INTERFACE_DEFINED__ */


#ifndef __IOleObject_INTERFACE_DEFINED__
#define __IOleObject_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleObject
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IOleObject __RPC_FAR *LPOLEOBJECT;

typedef 
enum tagOLEGETMONIKER
    {	OLEGETMONIKER_ONLYIFTHERE	= 1,
	OLEGETMONIKER_FORCEASSIGN	= 2,
	OLEGETMONIKER_UNASSIGN	= 3,
	OLEGETMONIKER_TEMPFORUSER	= 4
    }	OLEGETMONIKER;

typedef 
enum tagOLEWHICHMK
    {	OLEWHICHMK_CONTAINER	= 1,
	OLEWHICHMK_OBJREL	= 2,
	OLEWHICHMK_OBJFULL	= 3
    }	OLEWHICHMK;

typedef 
enum tagUSERCLASSTYPE
    {	USERCLASSTYPE_FULL	= 1,
	USERCLASSTYPE_SHORT	= 2,
	USERCLASSTYPE_APPNAME	= 3
    }	USERCLASSTYPE;

typedef 
enum tagOLEMISC
    {	OLEMISC_RECOMPOSEONRESIZE	= 0x1,
	OLEMISC_ONLYICONIC	= 0x2,
	OLEMISC_INSERTNOTREPLACE	= 0x4,
	OLEMISC_STATIC	= 0x8,
	OLEMISC_CANTLINKINSIDE	= 0x10,
	OLEMISC_CANLINKBYOLE1	= 0x20,
	OLEMISC_ISLINKOBJECT	= 0x40,
	OLEMISC_INSIDEOUT	= 0x80,
	OLEMISC_ACTIVATEWHENVISIBLE	= 0x100,
	OLEMISC_RENDERINGISDEVICEINDEPENDENT	= 0x200,
	OLEMISC_INVISIBLEATRUNTIME	= 0x400,
	OLEMISC_ALWAYSRUN	= 0x800,
	OLEMISC_ACTSLIKEBUTTON	= 0x1000,
	OLEMISC_ACTSLIKELABEL	= 0x2000,
	OLEMISC_NOUIACTIVATE	= 0x4000,
	OLEMISC_ALIGNABLE	= 0x8000,
	OLEMISC_SIMPLEFRAME	= 0x10000,
	OLEMISC_SETCLIENTSITEFIRST	= 0x20000,
	OLEMISC_IMEMODE	= 0x40000,
	OLEMISC_IGNOREACTIVATEWHENVISIBLE	= 0x80000,
	OLEMISC_WANTSTOMENUMERGE	= 0x100000,
	OLEMISC_SUPPORTSMULTILEVELUNDO	= 0x200000
    }	OLEMISC;

typedef 
enum tagOLECLOSE
    {	OLECLOSE_SAVEIFDIRTY	= 0,
	OLECLOSE_NOSAVE	= 1,
	OLECLOSE_PROMPTSAVE	= 2
    }	OLECLOSE;


EXTERN_C const IID IID_IOleObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000112-0000-0000-C000-000000000046")
    IOleObject : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetClientSite( 
            /* [unique][in] */ IOleClientSite __RPC_FAR *pClientSite) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetClientSite( 
            /* [out] */ IOleClientSite __RPC_FAR *__RPC_FAR *ppClientSite) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetHostNames( 
            /* [in] */ LPCOLESTR szContainerApp,
            /* [unique][in] */ LPCOLESTR szContainerObj) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( 
            /* [in] */ DWORD dwSaveOption) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMoniker( 
            /* [in] */ DWORD dwWhichMoniker,
            /* [unique][in] */ IMoniker __RPC_FAR *pmk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMoniker( 
            /* [in] */ DWORD dwAssign,
            /* [in] */ DWORD dwWhichMoniker,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InitFromData( 
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObject,
            /* [in] */ BOOL fCreation,
            /* [in] */ DWORD dwReserved) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetClipboardData( 
            /* [in] */ DWORD dwReserved,
            /* [out] */ IDataObject __RPC_FAR *__RPC_FAR *ppDataObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DoVerb( 
            /* [in] */ LONG iVerb,
            /* [unique][in] */ LPMSG lpmsg,
            /* [unique][in] */ IOleClientSite __RPC_FAR *pActiveSite,
            /* [in] */ LONG lindex,
            /* [in] */ HWND hwndParent,
            /* [unique][in] */ LPCRECT lprcPosRect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumVerbs( 
            /* [out] */ IEnumOLEVERB __RPC_FAR *__RPC_FAR *ppEnumOleVerb) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsUpToDate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserClassID( 
            /* [out] */ CLSID __RPC_FAR *pClsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserType( 
            /* [in] */ DWORD dwFormOfType,
            /* [out] */ LPOLESTR __RPC_FAR *pszUserType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetExtent( 
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ SIZEL __RPC_FAR *psizel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExtent( 
            /* [in] */ DWORD dwDrawAspect,
            /* [out] */ SIZEL __RPC_FAR *psizel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Advise( 
            /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvSink,
            /* [out] */ DWORD __RPC_FAR *pdwConnection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unadvise( 
            /* [in] */ DWORD dwConnection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumAdvise( 
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumAdvise) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMiscStatus( 
            /* [in] */ DWORD dwAspect,
            /* [out] */ DWORD __RPC_FAR *pdwStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetColorScheme( 
            /* [in] */ LOGPALETTE __RPC_FAR *pLogpal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleObject __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleObject __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetClientSite )( 
            IOleObject __RPC_FAR * This,
            /* [unique][in] */ IOleClientSite __RPC_FAR *pClientSite);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClientSite )( 
            IOleObject __RPC_FAR * This,
            /* [out] */ IOleClientSite __RPC_FAR *__RPC_FAR *ppClientSite);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetHostNames )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ LPCOLESTR szContainerApp,
            /* [unique][in] */ LPCOLESTR szContainerObj);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Close )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ DWORD dwSaveOption);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetMoniker )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ DWORD dwWhichMoniker,
            /* [unique][in] */ IMoniker __RPC_FAR *pmk);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetMoniker )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ DWORD dwAssign,
            /* [in] */ DWORD dwWhichMoniker,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmk);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InitFromData )( 
            IOleObject __RPC_FAR * This,
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObject,
            /* [in] */ BOOL fCreation,
            /* [in] */ DWORD dwReserved);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClipboardData )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ DWORD dwReserved,
            /* [out] */ IDataObject __RPC_FAR *__RPC_FAR *ppDataObject);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DoVerb )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ LONG iVerb,
            /* [unique][in] */ LPMSG lpmsg,
            /* [unique][in] */ IOleClientSite __RPC_FAR *pActiveSite,
            /* [in] */ LONG lindex,
            /* [in] */ HWND hwndParent,
            /* [unique][in] */ LPCRECT lprcPosRect);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumVerbs )( 
            IOleObject __RPC_FAR * This,
            /* [out] */ IEnumOLEVERB __RPC_FAR *__RPC_FAR *ppEnumOleVerb);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Update )( 
            IOleObject __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsUpToDate )( 
            IOleObject __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetUserClassID )( 
            IOleObject __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClsid);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetUserType )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ DWORD dwFormOfType,
            /* [out] */ LPOLESTR __RPC_FAR *pszUserType);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetExtent )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ SIZEL __RPC_FAR *psizel);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetExtent )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [out] */ SIZEL __RPC_FAR *psizel);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Advise )( 
            IOleObject __RPC_FAR * This,
            /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvSink,
            /* [out] */ DWORD __RPC_FAR *pdwConnection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Unadvise )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ DWORD dwConnection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumAdvise )( 
            IOleObject __RPC_FAR * This,
            /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumAdvise);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetMiscStatus )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ DWORD dwAspect,
            /* [out] */ DWORD __RPC_FAR *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetColorScheme )( 
            IOleObject __RPC_FAR * This,
            /* [in] */ LOGPALETTE __RPC_FAR *pLogpal);
        
        END_INTERFACE
    } IOleObjectVtbl;

    interface IOleObject
    {
        CONST_VTBL struct IOleObjectVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleObject_SetClientSite(This,pClientSite)	\
    (This)->lpVtbl -> SetClientSite(This,pClientSite)

#define IOleObject_GetClientSite(This,ppClientSite)	\
    (This)->lpVtbl -> GetClientSite(This,ppClientSite)

#define IOleObject_SetHostNames(This,szContainerApp,szContainerObj)	\
    (This)->lpVtbl -> SetHostNames(This,szContainerApp,szContainerObj)

#define IOleObject_Close(This,dwSaveOption)	\
    (This)->lpVtbl -> Close(This,dwSaveOption)

#define IOleObject_SetMoniker(This,dwWhichMoniker,pmk)	\
    (This)->lpVtbl -> SetMoniker(This,dwWhichMoniker,pmk)

#define IOleObject_GetMoniker(This,dwAssign,dwWhichMoniker,ppmk)	\
    (This)->lpVtbl -> GetMoniker(This,dwAssign,dwWhichMoniker,ppmk)

#define IOleObject_InitFromData(This,pDataObject,fCreation,dwReserved)	\
    (This)->lpVtbl -> InitFromData(This,pDataObject,fCreation,dwReserved)

#define IOleObject_GetClipboardData(This,dwReserved,ppDataObject)	\
    (This)->lpVtbl -> GetClipboardData(This,dwReserved,ppDataObject)

#define IOleObject_DoVerb(This,iVerb,lpmsg,pActiveSite,lindex,hwndParent,lprcPosRect)	\
    (This)->lpVtbl -> DoVerb(This,iVerb,lpmsg,pActiveSite,lindex,hwndParent,lprcPosRect)

#define IOleObject_EnumVerbs(This,ppEnumOleVerb)	\
    (This)->lpVtbl -> EnumVerbs(This,ppEnumOleVerb)

#define IOleObject_Update(This)	\
    (This)->lpVtbl -> Update(This)

#define IOleObject_IsUpToDate(This)	\
    (This)->lpVtbl -> IsUpToDate(This)

#define IOleObject_GetUserClassID(This,pClsid)	\
    (This)->lpVtbl -> GetUserClassID(This,pClsid)

#define IOleObject_GetUserType(This,dwFormOfType,pszUserType)	\
    (This)->lpVtbl -> GetUserType(This,dwFormOfType,pszUserType)

#define IOleObject_SetExtent(This,dwDrawAspect,psizel)	\
    (This)->lpVtbl -> SetExtent(This,dwDrawAspect,psizel)

#define IOleObject_GetExtent(This,dwDrawAspect,psizel)	\
    (This)->lpVtbl -> GetExtent(This,dwDrawAspect,psizel)

#define IOleObject_Advise(This,pAdvSink,pdwConnection)	\
    (This)->lpVtbl -> Advise(This,pAdvSink,pdwConnection)

#define IOleObject_Unadvise(This,dwConnection)	\
    (This)->lpVtbl -> Unadvise(This,dwConnection)

#define IOleObject_EnumAdvise(This,ppenumAdvise)	\
    (This)->lpVtbl -> EnumAdvise(This,ppenumAdvise)

#define IOleObject_GetMiscStatus(This,dwAspect,pdwStatus)	\
    (This)->lpVtbl -> GetMiscStatus(This,dwAspect,pdwStatus)

#define IOleObject_SetColorScheme(This,pLogpal)	\
    (This)->lpVtbl -> SetColorScheme(This,pLogpal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleObject_SetClientSite_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [unique][in] */ IOleClientSite __RPC_FAR *pClientSite);


void __RPC_STUB IOleObject_SetClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_GetClientSite_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [out] */ IOleClientSite __RPC_FAR *__RPC_FAR *ppClientSite);


void __RPC_STUB IOleObject_GetClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_SetHostNames_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [in] */ LPCOLESTR szContainerApp,
    /* [unique][in] */ LPCOLESTR szContainerObj);


void __RPC_STUB IOleObject_SetHostNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_Close_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [in] */ DWORD dwSaveOption);


void __RPC_STUB IOleObject_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_SetMoniker_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [in] */ DWORD dwWhichMoniker,
    /* [unique][in] */ IMoniker __RPC_FAR *pmk);


void __RPC_STUB IOleObject_SetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_GetMoniker_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [in] */ DWORD dwAssign,
    /* [in] */ DWORD dwWhichMoniker,
    /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmk);


void __RPC_STUB IOleObject_GetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_InitFromData_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [unique][in] */ IDataObject __RPC_FAR *pDataObject,
    /* [in] */ BOOL fCreation,
    /* [in] */ DWORD dwReserved);


void __RPC_STUB IOleObject_InitFromData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_GetClipboardData_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [in] */ DWORD dwReserved,
    /* [out] */ IDataObject __RPC_FAR *__RPC_FAR *ppDataObject);


void __RPC_STUB IOleObject_GetClipboardData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_DoVerb_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [in] */ LONG iVerb,
    /* [unique][in] */ LPMSG lpmsg,
    /* [unique][in] */ IOleClientSite __RPC_FAR *pActiveSite,
    /* [in] */ LONG lindex,
    /* [in] */ HWND hwndParent,
    /* [unique][in] */ LPCRECT lprcPosRect);


void __RPC_STUB IOleObject_DoVerb_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_EnumVerbs_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [out] */ IEnumOLEVERB __RPC_FAR *__RPC_FAR *ppEnumOleVerb);


void __RPC_STUB IOleObject_EnumVerbs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_Update_Proxy( 
    IOleObject __RPC_FAR * This);


void __RPC_STUB IOleObject_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_IsUpToDate_Proxy( 
    IOleObject __RPC_FAR * This);


void __RPC_STUB IOleObject_IsUpToDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_GetUserClassID_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [out] */ CLSID __RPC_FAR *pClsid);


void __RPC_STUB IOleObject_GetUserClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_GetUserType_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [in] */ DWORD dwFormOfType,
    /* [out] */ LPOLESTR __RPC_FAR *pszUserType);


void __RPC_STUB IOleObject_GetUserType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_SetExtent_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [in] */ DWORD dwDrawAspect,
    /* [in] */ SIZEL __RPC_FAR *psizel);


void __RPC_STUB IOleObject_SetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_GetExtent_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [in] */ DWORD dwDrawAspect,
    /* [out] */ SIZEL __RPC_FAR *psizel);


void __RPC_STUB IOleObject_GetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_Advise_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvSink,
    /* [out] */ DWORD __RPC_FAR *pdwConnection);


void __RPC_STUB IOleObject_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_Unadvise_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [in] */ DWORD dwConnection);


void __RPC_STUB IOleObject_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_EnumAdvise_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [out] */ IEnumSTATDATA __RPC_FAR *__RPC_FAR *ppenumAdvise);


void __RPC_STUB IOleObject_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_GetMiscStatus_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [in] */ DWORD dwAspect,
    /* [out] */ DWORD __RPC_FAR *pdwStatus);


void __RPC_STUB IOleObject_GetMiscStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleObject_SetColorScheme_Proxy( 
    IOleObject __RPC_FAR * This,
    /* [in] */ LOGPALETTE __RPC_FAR *pLogpal);


void __RPC_STUB IOleObject_SetColorScheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleObject_INTERFACE_DEFINED__ */


#ifndef __IOLETypes_INTERFACE_DEFINED__
#define __IOLETypes_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOLETypes
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [auto_handle][uuid] */ 


typedef 
enum tagOLERENDER
    {	OLERENDER_NONE	= 0,
	OLERENDER_DRAW	= 1,
	OLERENDER_FORMAT	= 2,
	OLERENDER_ASIS	= 3
    }	OLERENDER;

typedef OLERENDER __RPC_FAR *LPOLERENDER;

typedef struct  tagOBJECTDESCRIPTOR
    {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
    }	OBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR __RPC_FAR *POBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR __RPC_FAR *LPOBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR __RPC_FAR *PLINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR __RPC_FAR *LPLINKSRCDESCRIPTOR;



extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
#endif /* __IOLETypes_INTERFACE_DEFINED__ */

#ifndef __IOleWindow_INTERFACE_DEFINED__
#define __IOleWindow_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleWindow
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IOleWindow __RPC_FAR *LPOLEWINDOW;


EXTERN_C const IID IID_IOleWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000114-0000-0000-C000-000000000046")
    IOleWindow : public IUnknown
    {
    public:
        virtual /* [input_sync] */ HRESULT STDMETHODCALLTYPE GetWindow( 
            /* [out] */ HWND __RPC_FAR *phwnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ContextSensitiveHelp( 
            /* [in] */ BOOL fEnterMode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleWindow __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleWindow __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleWindow __RPC_FAR * This);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetWindow )( 
            IOleWindow __RPC_FAR * This,
            /* [out] */ HWND __RPC_FAR *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ContextSensitiveHelp )( 
            IOleWindow __RPC_FAR * This,
            /* [in] */ BOOL fEnterMode);
        
        END_INTERFACE
    } IOleWindowVtbl;

    interface IOleWindow
    {
        CONST_VTBL struct IOleWindowVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleWindow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleWindow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleWindow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleWindow_GetWindow(This,phwnd)	\
    (This)->lpVtbl -> GetWindow(This,phwnd)

#define IOleWindow_ContextSensitiveHelp(This,fEnterMode)	\
    (This)->lpVtbl -> ContextSensitiveHelp(This,fEnterMode)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [input_sync] */ HRESULT STDMETHODCALLTYPE IOleWindow_GetWindow_Proxy( 
    IOleWindow __RPC_FAR * This,
    /* [out] */ HWND __RPC_FAR *phwnd);


void __RPC_STUB IOleWindow_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleWindow_ContextSensitiveHelp_Proxy( 
    IOleWindow __RPC_FAR * This,
    /* [in] */ BOOL fEnterMode);


void __RPC_STUB IOleWindow_ContextSensitiveHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleWindow_INTERFACE_DEFINED__ */


#ifndef __IOleLink_INTERFACE_DEFINED__
#define __IOleLink_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleLink
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [uuid][object] */ 


typedef /* [unique] */ IOleLink __RPC_FAR *LPOLELINK;

typedef 
enum tagOLEUPDATE
    {	OLEUPDATE_ALWAYS	= 1,
	OLEUPDATE_ONCALL	= 3
    }	OLEUPDATE;

typedef OLEUPDATE __RPC_FAR *LPOLEUPDATE;

typedef OLEUPDATE __RPC_FAR *POLEUPDATE;

typedef 
enum tagOLELINKBIND
    {	OLELINKBIND_EVENIFCLASSDIFF	= 1
    }	OLELINKBIND;


EXTERN_C const IID IID_IOleLink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("0000011d-0000-0000-C000-000000000046")
    IOleLink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetUpdateOptions( 
            /* [in] */ DWORD dwUpdateOpt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUpdateOptions( 
            /* [out] */ DWORD __RPC_FAR *pdwUpdateOpt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSourceMoniker( 
            /* [unique][in] */ IMoniker __RPC_FAR *pmk,
            /* [in] */ REFCLSID rclsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceMoniker( 
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSourceDisplayName( 
            /* [in] */ LPCOLESTR pszStatusText) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceDisplayName( 
            /* [out] */ LPOLESTR __RPC_FAR *ppszDisplayName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BindToSource( 
            /* [in] */ DWORD bindflags,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BindIfRunning( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBoundSource( 
            /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *ppunk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnbindSource( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Update( 
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleLinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleLink __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleLink __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleLink __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetUpdateOptions )( 
            IOleLink __RPC_FAR * This,
            /* [in] */ DWORD dwUpdateOpt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetUpdateOptions )( 
            IOleLink __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwUpdateOpt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetSourceMoniker )( 
            IOleLink __RPC_FAR * This,
            /* [unique][in] */ IMoniker __RPC_FAR *pmk,
            /* [in] */ REFCLSID rclsid);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSourceMoniker )( 
            IOleLink __RPC_FAR * This,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmk);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetSourceDisplayName )( 
            IOleLink __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszStatusText);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSourceDisplayName )( 
            IOleLink __RPC_FAR * This,
            /* [out] */ LPOLESTR __RPC_FAR *ppszDisplayName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *BindToSource )( 
            IOleLink __RPC_FAR * This,
            /* [in] */ DWORD bindflags,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *BindIfRunning )( 
            IOleLink __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetBoundSource )( 
            IOleLink __RPC_FAR * This,
            /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *ppunk);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UnbindSource )( 
            IOleLink __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Update )( 
            IOleLink __RPC_FAR * This,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc);
        
        END_INTERFACE
    } IOleLinkVtbl;

    interface IOleLink
    {
        CONST_VTBL struct IOleLinkVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleLink_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleLink_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleLink_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleLink_SetUpdateOptions(This,dwUpdateOpt)	\
    (This)->lpVtbl -> SetUpdateOptions(This,dwUpdateOpt)

#define IOleLink_GetUpdateOptions(This,pdwUpdateOpt)	\
    (This)->lpVtbl -> GetUpdateOptions(This,pdwUpdateOpt)

#define IOleLink_SetSourceMoniker(This,pmk,rclsid)	\
    (This)->lpVtbl -> SetSourceMoniker(This,pmk,rclsid)

#define IOleLink_GetSourceMoniker(This,ppmk)	\
    (This)->lpVtbl -> GetSourceMoniker(This,ppmk)

#define IOleLink_SetSourceDisplayName(This,pszStatusText)	\
    (This)->lpVtbl -> SetSourceDisplayName(This,pszStatusText)

#define IOleLink_GetSourceDisplayName(This,ppszDisplayName)	\
    (This)->lpVtbl -> GetSourceDisplayName(This,ppszDisplayName)

#define IOleLink_BindToSource(This,bindflags,pbc)	\
    (This)->lpVtbl -> BindToSource(This,bindflags,pbc)

#define IOleLink_BindIfRunning(This)	\
    (This)->lpVtbl -> BindIfRunning(This)

#define IOleLink_GetBoundSource(This,ppunk)	\
    (This)->lpVtbl -> GetBoundSource(This,ppunk)

#define IOleLink_UnbindSource(This)	\
    (This)->lpVtbl -> UnbindSource(This)

#define IOleLink_Update(This,pbc)	\
    (This)->lpVtbl -> Update(This,pbc)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleLink_SetUpdateOptions_Proxy( 
    IOleLink __RPC_FAR * This,
    /* [in] */ DWORD dwUpdateOpt);


void __RPC_STUB IOleLink_SetUpdateOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleLink_GetUpdateOptions_Proxy( 
    IOleLink __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwUpdateOpt);


void __RPC_STUB IOleLink_GetUpdateOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleLink_SetSourceMoniker_Proxy( 
    IOleLink __RPC_FAR * This,
    /* [unique][in] */ IMoniker __RPC_FAR *pmk,
    /* [in] */ REFCLSID rclsid);


void __RPC_STUB IOleLink_SetSourceMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleLink_GetSourceMoniker_Proxy( 
    IOleLink __RPC_FAR * This,
    /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmk);


void __RPC_STUB IOleLink_GetSourceMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleLink_SetSourceDisplayName_Proxy( 
    IOleLink __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszStatusText);


void __RPC_STUB IOleLink_SetSourceDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleLink_GetSourceDisplayName_Proxy( 
    IOleLink __RPC_FAR * This,
    /* [out] */ LPOLESTR __RPC_FAR *ppszDisplayName);


void __RPC_STUB IOleLink_GetSourceDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleLink_BindToSource_Proxy( 
    IOleLink __RPC_FAR * This,
    /* [in] */ DWORD bindflags,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc);


void __RPC_STUB IOleLink_BindToSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleLink_BindIfRunning_Proxy( 
    IOleLink __RPC_FAR * This);


void __RPC_STUB IOleLink_BindIfRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleLink_GetBoundSource_Proxy( 
    IOleLink __RPC_FAR * This,
    /* [out] */ IUnknown __RPC_FAR *__RPC_FAR *ppunk);


void __RPC_STUB IOleLink_GetBoundSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleLink_UnbindSource_Proxy( 
    IOleLink __RPC_FAR * This);


void __RPC_STUB IOleLink_UnbindSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleLink_Update_Proxy( 
    IOleLink __RPC_FAR * This,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc);


void __RPC_STUB IOleLink_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleLink_INTERFACE_DEFINED__ */


#ifndef __IOleItemContainer_INTERFACE_DEFINED__
#define __IOleItemContainer_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleItemContainer
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IOleItemContainer __RPC_FAR *LPOLEITEMCONTAINER;

typedef 
enum tagBINDSPEED
    {	BINDSPEED_INDEFINITE	= 1,
	BINDSPEED_MODERATE	= 2,
	BINDSPEED_IMMEDIATE	= 3
    }	BINDSPEED;

typedef /* [v1_enum] */ 
enum tagOLECONTF
    {	OLECONTF_EMBEDDINGS	= 1,
	OLECONTF_LINKS	= 2,
	OLECONTF_OTHERS	= 4,
	OLECONTF_ONLYUSER	= 8,
	OLECONTF_ONLYIFRUNNING	= 16
    }	OLECONTF;


EXTERN_C const IID IID_IOleItemContainer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("0000011c-0000-0000-C000-000000000046")
    IOleItemContainer : public IOleContainer
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ LPOLESTR pszItem,
            /* [in] */ DWORD dwSpeedNeeded,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetObjectStorage( 
            /* [in] */ LPOLESTR pszItem,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvStorage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsRunning( 
            /* [in] */ LPOLESTR pszItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleItemContainerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleItemContainer __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleItemContainer __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleItemContainer __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ParseDisplayName )( 
            IOleItemContainer __RPC_FAR * This,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [in] */ LPOLESTR pszDisplayName,
            /* [out] */ ULONG __RPC_FAR *pchEaten,
            /* [out] */ IMoniker __RPC_FAR *__RPC_FAR *ppmkOut);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumObjects )( 
            IOleItemContainer __RPC_FAR * This,
            /* [in] */ DWORD grfFlags,
            /* [out] */ IEnumUnknown __RPC_FAR *__RPC_FAR *ppenum);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LockContainer )( 
            IOleItemContainer __RPC_FAR * This,
            /* [in] */ BOOL fLock);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetObject )( 
            IOleItemContainer __RPC_FAR * This,
            /* [in] */ LPOLESTR pszItem,
            /* [in] */ DWORD dwSpeedNeeded,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetObjectStorage )( 
            IOleItemContainer __RPC_FAR * This,
            /* [in] */ LPOLESTR pszItem,
            /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvStorage);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsRunning )( 
            IOleItemContainer __RPC_FAR * This,
            /* [in] */ LPOLESTR pszItem);
        
        END_INTERFACE
    } IOleItemContainerVtbl;

    interface IOleItemContainer
    {
        CONST_VTBL struct IOleItemContainerVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleItemContainer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleItemContainer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleItemContainer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleItemContainer_ParseDisplayName(This,pbc,pszDisplayName,pchEaten,ppmkOut)	\
    (This)->lpVtbl -> ParseDisplayName(This,pbc,pszDisplayName,pchEaten,ppmkOut)


#define IOleItemContainer_EnumObjects(This,grfFlags,ppenum)	\
    (This)->lpVtbl -> EnumObjects(This,grfFlags,ppenum)

#define IOleItemContainer_LockContainer(This,fLock)	\
    (This)->lpVtbl -> LockContainer(This,fLock)


#define IOleItemContainer_GetObject(This,pszItem,dwSpeedNeeded,pbc,riid,ppvObject)	\
    (This)->lpVtbl -> GetObject(This,pszItem,dwSpeedNeeded,pbc,riid,ppvObject)

#define IOleItemContainer_GetObjectStorage(This,pszItem,pbc,riid,ppvStorage)	\
    (This)->lpVtbl -> GetObjectStorage(This,pszItem,pbc,riid,ppvStorage)

#define IOleItemContainer_IsRunning(This,pszItem)	\
    (This)->lpVtbl -> IsRunning(This,pszItem)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IOleItemContainer_RemoteGetObject_Proxy( 
    IOleItemContainer __RPC_FAR * This,
    /* [in] */ LPOLESTR pszItem,
    /* [in] */ DWORD dwSpeedNeeded,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppvObject);


void __RPC_STUB IOleItemContainer_RemoteGetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IOleItemContainer_RemoteGetObjectStorage_Proxy( 
    IOleItemContainer __RPC_FAR * This,
    /* [in] */ LPOLESTR pszItem,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppvStorage);


void __RPC_STUB IOleItemContainer_RemoteGetObjectStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleItemContainer_IsRunning_Proxy( 
    IOleItemContainer __RPC_FAR * This,
    /* [in] */ LPOLESTR pszItem);


void __RPC_STUB IOleItemContainer_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleItemContainer_INTERFACE_DEFINED__ */


#ifndef __IOleInPlaceUIWindow_INTERFACE_DEFINED__
#define __IOleInPlaceUIWindow_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleInPlaceUIWindow
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IOleInPlaceUIWindow __RPC_FAR *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;


EXTERN_C const IID IID_IOleInPlaceUIWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000115-0000-0000-C000-000000000046")
    IOleInPlaceUIWindow : public IOleWindow
    {
    public:
        virtual /* [input_sync] */ HRESULT STDMETHODCALLTYPE GetBorder( 
            /* [out] */ LPRECT lprectBorder) = 0;
        
        virtual /* [input_sync] */ HRESULT STDMETHODCALLTYPE RequestBorderSpace( 
            /* [unique][in] */ LPCBORDERWIDTHS pborderwidths) = 0;
        
        virtual /* [input_sync] */ HRESULT STDMETHODCALLTYPE SetBorderSpace( 
            /* [unique][in] */ LPCBORDERWIDTHS pborderwidths) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetActiveObject( 
            /* [unique][in] */ IOleInPlaceActiveObject __RPC_FAR *pActiveObject,
            /* [unique][string][in] */ LPCOLESTR pszObjName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleInPlaceUIWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleInPlaceUIWindow __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleInPlaceUIWindow __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleInPlaceUIWindow __RPC_FAR * This);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetWindow )( 
            IOleInPlaceUIWindow __RPC_FAR * This,
            /* [out] */ HWND __RPC_FAR *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ContextSensitiveHelp )( 
            IOleInPlaceUIWindow __RPC_FAR * This,
            /* [in] */ BOOL fEnterMode);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetBorder )( 
            IOleInPlaceUIWindow __RPC_FAR * This,
            /* [out] */ LPRECT lprectBorder);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RequestBorderSpace )( 
            IOleInPlaceUIWindow __RPC_FAR * This,
            /* [unique][in] */ LPCBORDERWIDTHS pborderwidths);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetBorderSpace )( 
            IOleInPlaceUIWindow __RPC_FAR * This,
            /* [unique][in] */ LPCBORDERWIDTHS pborderwidths);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetActiveObject )( 
            IOleInPlaceUIWindow __RPC_FAR * This,
            /* [unique][in] */ IOleInPlaceActiveObject __RPC_FAR *pActiveObject,
            /* [unique][string][in] */ LPCOLESTR pszObjName);
        
        END_INTERFACE
    } IOleInPlaceUIWindowVtbl;

    interface IOleInPlaceUIWindow
    {
        CONST_VTBL struct IOleInPlaceUIWindowVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleInPlaceUIWindow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleInPlaceUIWindow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleInPlaceUIWindow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleInPlaceUIWindow_GetWindow(This,phwnd)	\
    (This)->lpVtbl -> GetWindow(This,phwnd)

#define IOleInPlaceUIWindow_ContextSensitiveHelp(This,fEnterMode)	\
    (This)->lpVtbl -> ContextSensitiveHelp(This,fEnterMode)


#define IOleInPlaceUIWindow_GetBorder(This,lprectBorder)	\
    (This)->lpVtbl -> GetBorder(This,lprectBorder)

#define IOleInPlaceUIWindow_RequestBorderSpace(This,pborderwidths)	\
    (This)->lpVtbl -> RequestBorderSpace(This,pborderwidths)

#define IOleInPlaceUIWindow_SetBorderSpace(This,pborderwidths)	\
    (This)->lpVtbl -> SetBorderSpace(This,pborderwidths)

#define IOleInPlaceUIWindow_SetActiveObject(This,pActiveObject,pszObjName)	\
    (This)->lpVtbl -> SetActiveObject(This,pActiveObject,pszObjName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [input_sync] */ HRESULT STDMETHODCALLTYPE IOleInPlaceUIWindow_GetBorder_Proxy( 
    IOleInPlaceUIWindow __RPC_FAR * This,
    /* [out] */ LPRECT lprectBorder);


void __RPC_STUB IOleInPlaceUIWindow_GetBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [input_sync] */ HRESULT STDMETHODCALLTYPE IOleInPlaceUIWindow_RequestBorderSpace_Proxy( 
    IOleInPlaceUIWindow __RPC_FAR * This,
    /* [unique][in] */ LPCBORDERWIDTHS pborderwidths);


void __RPC_STUB IOleInPlaceUIWindow_RequestBorderSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [input_sync] */ HRESULT STDMETHODCALLTYPE IOleInPlaceUIWindow_SetBorderSpace_Proxy( 
    IOleInPlaceUIWindow __RPC_FAR * This,
    /* [unique][in] */ LPCBORDERWIDTHS pborderwidths);


void __RPC_STUB IOleInPlaceUIWindow_SetBorderSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceUIWindow_SetActiveObject_Proxy( 
    IOleInPlaceUIWindow __RPC_FAR * This,
    /* [unique][in] */ IOleInPlaceActiveObject __RPC_FAR *pActiveObject,
    /* [unique][string][in] */ LPCOLESTR pszObjName);


void __RPC_STUB IOleInPlaceUIWindow_SetActiveObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleInPlaceUIWindow_INTERFACE_DEFINED__ */


#ifndef __IOleInPlaceActiveObject_INTERFACE_DEFINED__
#define __IOleInPlaceActiveObject_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleInPlaceActiveObject
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [uuid][object] */ 


typedef /* [unique] */ IOleInPlaceActiveObject __RPC_FAR *LPOLEINPLACEACTIVEOBJECT;


EXTERN_C const IID IID_IOleInPlaceActiveObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000117-0000-0000-C000-000000000046")
    IOleInPlaceActiveObject : public IOleWindow
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE TranslateAccelerator( 
            /* [in] */ LPMSG lpmsg) = 0;
        
        virtual /* [input_sync] */ HRESULT STDMETHODCALLTYPE OnFrameWindowActivate( 
            /* [in] */ BOOL fActivate) = 0;
        
        virtual /* [input_sync] */ HRESULT STDMETHODCALLTYPE OnDocWindowActivate( 
            /* [in] */ BOOL fActivate) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE ResizeBorder( 
            /* [in] */ LPCRECT prcBorder,
            /* [unique][in] */ IOleInPlaceUIWindow __RPC_FAR *pUIWindow,
            /* [in] */ BOOL fFrameWindow) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnableModeless( 
            /* [in] */ BOOL fEnable) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleInPlaceActiveObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleInPlaceActiveObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleInPlaceActiveObject __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleInPlaceActiveObject __RPC_FAR * This);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetWindow )( 
            IOleInPlaceActiveObject __RPC_FAR * This,
            /* [out] */ HWND __RPC_FAR *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ContextSensitiveHelp )( 
            IOleInPlaceActiveObject __RPC_FAR * This,
            /* [in] */ BOOL fEnterMode);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *TranslateAccelerator )( 
            IOleInPlaceActiveObject __RPC_FAR * This,
            /* [in] */ LPMSG lpmsg);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnFrameWindowActivate )( 
            IOleInPlaceActiveObject __RPC_FAR * This,
            /* [in] */ BOOL fActivate);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnDocWindowActivate )( 
            IOleInPlaceActiveObject __RPC_FAR * This,
            /* [in] */ BOOL fActivate);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ResizeBorder )( 
            IOleInPlaceActiveObject __RPC_FAR * This,
            /* [in] */ LPCRECT prcBorder,
            /* [unique][in] */ IOleInPlaceUIWindow __RPC_FAR *pUIWindow,
            /* [in] */ BOOL fFrameWindow);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnableModeless )( 
            IOleInPlaceActiveObject __RPC_FAR * This,
            /* [in] */ BOOL fEnable);
        
        END_INTERFACE
    } IOleInPlaceActiveObjectVtbl;

    interface IOleInPlaceActiveObject
    {
        CONST_VTBL struct IOleInPlaceActiveObjectVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleInPlaceActiveObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleInPlaceActiveObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleInPlaceActiveObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleInPlaceActiveObject_GetWindow(This,phwnd)	\
    (This)->lpVtbl -> GetWindow(This,phwnd)

#define IOleInPlaceActiveObject_ContextSensitiveHelp(This,fEnterMode)	\
    (This)->lpVtbl -> ContextSensitiveHelp(This,fEnterMode)


#define IOleInPlaceActiveObject_TranslateAccelerator(This,lpmsg)	\
    (This)->lpVtbl -> TranslateAccelerator(This,lpmsg)

#define IOleInPlaceActiveObject_OnFrameWindowActivate(This,fActivate)	\
    (This)->lpVtbl -> OnFrameWindowActivate(This,fActivate)

#define IOleInPlaceActiveObject_OnDocWindowActivate(This,fActivate)	\
    (This)->lpVtbl -> OnDocWindowActivate(This,fActivate)

#define IOleInPlaceActiveObject_ResizeBorder(This,prcBorder,pUIWindow,fFrameWindow)	\
    (This)->lpVtbl -> ResizeBorder(This,prcBorder,pUIWindow,fFrameWindow)

#define IOleInPlaceActiveObject_EnableModeless(This,fEnable)	\
    (This)->lpVtbl -> EnableModeless(This,fEnable)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy( 
    IOleInPlaceActiveObject __RPC_FAR * This);


void __RPC_STUB IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [input_sync] */ HRESULT STDMETHODCALLTYPE IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy( 
    IOleInPlaceActiveObject __RPC_FAR * This,
    /* [in] */ BOOL fActivate);


void __RPC_STUB IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [input_sync] */ HRESULT STDMETHODCALLTYPE IOleInPlaceActiveObject_OnDocWindowActivate_Proxy( 
    IOleInPlaceActiveObject __RPC_FAR * This,
    /* [in] */ BOOL fActivate);


void __RPC_STUB IOleInPlaceActiveObject_OnDocWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [input_sync][call_as] */ HRESULT STDMETHODCALLTYPE IOleInPlaceActiveObject_RemoteResizeBorder_Proxy( 
    IOleInPlaceActiveObject __RPC_FAR * This,
    /* [in] */ LPCRECT prcBorder,
    /* [in] */ REFIID riid,
    /* [iid_is][unique][in] */ IOleInPlaceUIWindow __RPC_FAR *pUIWindow,
    /* [in] */ BOOL fFrameWindow);


void __RPC_STUB IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceActiveObject_EnableModeless_Proxy( 
    IOleInPlaceActiveObject __RPC_FAR * This,
    /* [in] */ BOOL fEnable);


void __RPC_STUB IOleInPlaceActiveObject_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleInPlaceActiveObject_INTERFACE_DEFINED__ */


#ifndef __IOleInPlaceFrame_INTERFACE_DEFINED__
#define __IOleInPlaceFrame_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleInPlaceFrame
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IOleInPlaceFrame __RPC_FAR *LPOLEINPLACEFRAME;

typedef struct  tagOIFI
    {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
    }	OLEINPLACEFRAMEINFO;

typedef struct tagOIFI __RPC_FAR *LPOLEINPLACEFRAMEINFO;

typedef struct  tagOleMenuGroupWidths
    {
    LONG width[ 6 ];
    }	OLEMENUGROUPWIDTHS;

typedef struct tagOleMenuGroupWidths __RPC_FAR *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;


EXTERN_C const IID IID_IOleInPlaceFrame;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000116-0000-0000-C000-000000000046")
    IOleInPlaceFrame : public IOleInPlaceUIWindow
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InsertMenus( 
            /* [in] */ HMENU hmenuShared,
            /* [out][in] */ LPOLEMENUGROUPWIDTHS lpMenuWidths) = 0;
        
        virtual /* [input_sync] */ HRESULT STDMETHODCALLTYPE SetMenu( 
            /* [in] */ HMENU hmenuShared,
            /* [in] */ HOLEMENU holemenu,
            /* [in] */ HWND hwndActiveObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveMenus( 
            /* [in] */ HMENU hmenuShared) = 0;
        
        virtual /* [input_sync] */ HRESULT STDMETHODCALLTYPE SetStatusText( 
            /* [in] */ LPCOLESTR pszStatusText) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnableModeless( 
            /* [in] */ BOOL fEnable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TranslateAccelerator( 
            /* [in] */ LPMSG lpmsg,
            /* [in] */ WORD wID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleInPlaceFrameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleInPlaceFrame __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleInPlaceFrame __RPC_FAR * This);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetWindow )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [out] */ HWND __RPC_FAR *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ContextSensitiveHelp )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [in] */ BOOL fEnterMode);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetBorder )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [out] */ LPRECT lprectBorder);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RequestBorderSpace )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [unique][in] */ LPCBORDERWIDTHS pborderwidths);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetBorderSpace )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [unique][in] */ LPCBORDERWIDTHS pborderwidths);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetActiveObject )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [unique][in] */ IOleInPlaceActiveObject __RPC_FAR *pActiveObject,
            /* [unique][string][in] */ LPCOLESTR pszObjName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InsertMenus )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [in] */ HMENU hmenuShared,
            /* [out][in] */ LPOLEMENUGROUPWIDTHS lpMenuWidths);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetMenu )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [in] */ HMENU hmenuShared,
            /* [in] */ HOLEMENU holemenu,
            /* [in] */ HWND hwndActiveObject);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RemoveMenus )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [in] */ HMENU hmenuShared);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetStatusText )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszStatusText);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnableModeless )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [in] */ BOOL fEnable);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *TranslateAccelerator )( 
            IOleInPlaceFrame __RPC_FAR * This,
            /* [in] */ LPMSG lpmsg,
            /* [in] */ WORD wID);
        
        END_INTERFACE
    } IOleInPlaceFrameVtbl;

    interface IOleInPlaceFrame
    {
        CONST_VTBL struct IOleInPlaceFrameVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleInPlaceFrame_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleInPlaceFrame_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleInPlaceFrame_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleInPlaceFrame_GetWindow(This,phwnd)	\
    (This)->lpVtbl -> GetWindow(This,phwnd)

#define IOleInPlaceFrame_ContextSensitiveHelp(This,fEnterMode)	\
    (This)->lpVtbl -> ContextSensitiveHelp(This,fEnterMode)


#define IOleInPlaceFrame_GetBorder(This,lprectBorder)	\
    (This)->lpVtbl -> GetBorder(This,lprectBorder)

#define IOleInPlaceFrame_RequestBorderSpace(This,pborderwidths)	\
    (This)->lpVtbl -> RequestBorderSpace(This,pborderwidths)

#define IOleInPlaceFrame_SetBorderSpace(This,pborderwidths)	\
    (This)->lpVtbl -> SetBorderSpace(This,pborderwidths)

#define IOleInPlaceFrame_SetActiveObject(This,pActiveObject,pszObjName)	\
    (This)->lpVtbl -> SetActiveObject(This,pActiveObject,pszObjName)


#define IOleInPlaceFrame_InsertMenus(This,hmenuShared,lpMenuWidths)	\
    (This)->lpVtbl -> InsertMenus(This,hmenuShared,lpMenuWidths)

#define IOleInPlaceFrame_SetMenu(This,hmenuShared,holemenu,hwndActiveObject)	\
    (This)->lpVtbl -> SetMenu(This,hmenuShared,holemenu,hwndActiveObject)

#define IOleInPlaceFrame_RemoveMenus(This,hmenuShared)	\
    (This)->lpVtbl -> RemoveMenus(This,hmenuShared)

#define IOleInPlaceFrame_SetStatusText(This,pszStatusText)	\
    (This)->lpVtbl -> SetStatusText(This,pszStatusText)

#define IOleInPlaceFrame_EnableModeless(This,fEnable)	\
    (This)->lpVtbl -> EnableModeless(This,fEnable)

#define IOleInPlaceFrame_TranslateAccelerator(This,lpmsg,wID)	\
    (This)->lpVtbl -> TranslateAccelerator(This,lpmsg,wID)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleInPlaceFrame_InsertMenus_Proxy( 
    IOleInPlaceFrame __RPC_FAR * This,
    /* [in] */ HMENU hmenuShared,
    /* [out][in] */ LPOLEMENUGROUPWIDTHS lpMenuWidths);


void __RPC_STUB IOleInPlaceFrame_InsertMenus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [input_sync] */ HRESULT STDMETHODCALLTYPE IOleInPlaceFrame_SetMenu_Proxy( 
    IOleInPlaceFrame __RPC_FAR * This,
    /* [in] */ HMENU hmenuShared,
    /* [in] */ HOLEMENU holemenu,
    /* [in] */ HWND hwndActiveObject);


void __RPC_STUB IOleInPlaceFrame_SetMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceFrame_RemoveMenus_Proxy( 
    IOleInPlaceFrame __RPC_FAR * This,
    /* [in] */ HMENU hmenuShared);


void __RPC_STUB IOleInPlaceFrame_RemoveMenus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [input_sync] */ HRESULT STDMETHODCALLTYPE IOleInPlaceFrame_SetStatusText_Proxy( 
    IOleInPlaceFrame __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszStatusText);


void __RPC_STUB IOleInPlaceFrame_SetStatusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceFrame_EnableModeless_Proxy( 
    IOleInPlaceFrame __RPC_FAR * This,
    /* [in] */ BOOL fEnable);


void __RPC_STUB IOleInPlaceFrame_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceFrame_TranslateAccelerator_Proxy( 
    IOleInPlaceFrame __RPC_FAR * This,
    /* [in] */ LPMSG lpmsg,
    /* [in] */ WORD wID);


void __RPC_STUB IOleInPlaceFrame_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleInPlaceFrame_INTERFACE_DEFINED__ */


#ifndef __IOleInPlaceObject_INTERFACE_DEFINED__
#define __IOleInPlaceObject_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleInPlaceObject
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IOleInPlaceObject __RPC_FAR *LPOLEINPLACEOBJECT;


EXTERN_C const IID IID_IOleInPlaceObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000113-0000-0000-C000-000000000046")
    IOleInPlaceObject : public IOleWindow
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InPlaceDeactivate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UIDeactivate( void) = 0;
        
        virtual /* [input_sync] */ HRESULT STDMETHODCALLTYPE SetObjectRects( 
            /* [in] */ LPCRECT lprcPosRect,
            /* [in] */ LPCRECT lprcClipRect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReactivateAndUndo( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleInPlaceObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleInPlaceObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleInPlaceObject __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleInPlaceObject __RPC_FAR * This);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetWindow )( 
            IOleInPlaceObject __RPC_FAR * This,
            /* [out] */ HWND __RPC_FAR *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ContextSensitiveHelp )( 
            IOleInPlaceObject __RPC_FAR * This,
            /* [in] */ BOOL fEnterMode);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InPlaceDeactivate )( 
            IOleInPlaceObject __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UIDeactivate )( 
            IOleInPlaceObject __RPC_FAR * This);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetObjectRects )( 
            IOleInPlaceObject __RPC_FAR * This,
            /* [in] */ LPCRECT lprcPosRect,
            /* [in] */ LPCRECT lprcClipRect);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ReactivateAndUndo )( 
            IOleInPlaceObject __RPC_FAR * This);
        
        END_INTERFACE
    } IOleInPlaceObjectVtbl;

    interface IOleInPlaceObject
    {
        CONST_VTBL struct IOleInPlaceObjectVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleInPlaceObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleInPlaceObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleInPlaceObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleInPlaceObject_GetWindow(This,phwnd)	\
    (This)->lpVtbl -> GetWindow(This,phwnd)

#define IOleInPlaceObject_ContextSensitiveHelp(This,fEnterMode)	\
    (This)->lpVtbl -> ContextSensitiveHelp(This,fEnterMode)


#define IOleInPlaceObject_InPlaceDeactivate(This)	\
    (This)->lpVtbl -> InPlaceDeactivate(This)

#define IOleInPlaceObject_UIDeactivate(This)	\
    (This)->lpVtbl -> UIDeactivate(This)

#define IOleInPlaceObject_SetObjectRects(This,lprcPosRect,lprcClipRect)	\
    (This)->lpVtbl -> SetObjectRects(This,lprcPosRect,lprcClipRect)

#define IOleInPlaceObject_ReactivateAndUndo(This)	\
    (This)->lpVtbl -> ReactivateAndUndo(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleInPlaceObject_InPlaceDeactivate_Proxy( 
    IOleInPlaceObject __RPC_FAR * This);


void __RPC_STUB IOleInPlaceObject_InPlaceDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceObject_UIDeactivate_Proxy( 
    IOleInPlaceObject __RPC_FAR * This);


void __RPC_STUB IOleInPlaceObject_UIDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [input_sync] */ HRESULT STDMETHODCALLTYPE IOleInPlaceObject_SetObjectRects_Proxy( 
    IOleInPlaceObject __RPC_FAR * This,
    /* [in] */ LPCRECT lprcPosRect,
    /* [in] */ LPCRECT lprcClipRect);


void __RPC_STUB IOleInPlaceObject_SetObjectRects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceObject_ReactivateAndUndo_Proxy( 
    IOleInPlaceObject __RPC_FAR * This);


void __RPC_STUB IOleInPlaceObject_ReactivateAndUndo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleInPlaceObject_INTERFACE_DEFINED__ */


#ifndef __IOleInPlaceSite_INTERFACE_DEFINED__
#define __IOleInPlaceSite_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOleInPlaceSite
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IOleInPlaceSite __RPC_FAR *LPOLEINPLACESITE;


EXTERN_C const IID IID_IOleInPlaceSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000119-0000-0000-C000-000000000046")
    IOleInPlaceSite : public IOleWindow
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CanInPlaceActivate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnInPlaceActivate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnUIActivate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetWindowContext( 
            /* [out] */ IOleInPlaceFrame __RPC_FAR *__RPC_FAR *ppFrame,
            /* [out] */ IOleInPlaceUIWindow __RPC_FAR *__RPC_FAR *ppDoc,
            /* [out] */ LPRECT lprcPosRect,
            /* [out] */ LPRECT lprcClipRect,
            /* [out][in] */ LPOLEINPLACEFRAMEINFO lpFrameInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scroll( 
            /* [in] */ SIZE scrollExtant) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnUIDeactivate( 
            /* [in] */ BOOL fUndoable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnInPlaceDeactivate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DiscardUndoState( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeactivateAndUndo( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnPosRectChange( 
            /* [in] */ LPCRECT lprcPosRect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOleInPlaceSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOleInPlaceSite __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOleInPlaceSite __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOleInPlaceSite __RPC_FAR * This);
        
        /* [input_sync] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetWindow )( 
            IOleInPlaceSite __RPC_FAR * This,
            /* [out] */ HWND __RPC_FAR *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ContextSensitiveHelp )( 
            IOleInPlaceSite __RPC_FAR * This,
            /* [in] */ BOOL fEnterMode);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CanInPlaceActivate )( 
            IOleInPlaceSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnInPlaceActivate )( 
            IOleInPlaceSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnUIActivate )( 
            IOleInPlaceSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetWindowContext )( 
            IOleInPlaceSite __RPC_FAR * This,
            /* [out] */ IOleInPlaceFrame __RPC_FAR *__RPC_FAR *ppFrame,
            /* [out] */ IOleInPlaceUIWindow __RPC_FAR *__RPC_FAR *ppDoc,
            /* [out] */ LPRECT lprcPosRect,
            /* [out] */ LPRECT lprcClipRect,
            /* [out][in] */ LPOLEINPLACEFRAMEINFO lpFrameInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Scroll )( 
            IOleInPlaceSite __RPC_FAR * This,
            /* [in] */ SIZE scrollExtant);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnUIDeactivate )( 
            IOleInPlaceSite __RPC_FAR * This,
            /* [in] */ BOOL fUndoable);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnInPlaceDeactivate )( 
            IOleInPlaceSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DiscardUndoState )( 
            IOleInPlaceSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DeactivateAndUndo )( 
            IOleInPlaceSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *OnPosRectChange )( 
            IOleInPlaceSite __RPC_FAR * This,
            /* [in] */ LPCRECT lprcPosRect);
        
        END_INTERFACE
    } IOleInPlaceSiteVtbl;

    interface IOleInPlaceSite
    {
        CONST_VTBL struct IOleInPlaceSiteVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOleInPlaceSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOleInPlaceSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOleInPlaceSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOleInPlaceSite_GetWindow(This,phwnd)	\
    (This)->lpVtbl -> GetWindow(This,phwnd)

#define IOleInPlaceSite_ContextSensitiveHelp(This,fEnterMode)	\
    (This)->lpVtbl -> ContextSensitiveHelp(This,fEnterMode)


#define IOleInPlaceSite_CanInPlaceActivate(This)	\
    (This)->lpVtbl -> CanInPlaceActivate(This)

#define IOleInPlaceSite_OnInPlaceActivate(This)	\
    (This)->lpVtbl -> OnInPlaceActivate(This)

#define IOleInPlaceSite_OnUIActivate(This)	\
    (This)->lpVtbl -> OnUIActivate(This)

#define IOleInPlaceSite_GetWindowContext(This,ppFrame,ppDoc,lprcPosRect,lprcClipRect,lpFrameInfo)	\
    (This)->lpVtbl -> GetWindowContext(This,ppFrame,ppDoc,lprcPosRect,lprcClipRect,lpFrameInfo)

#define IOleInPlaceSite_Scroll(This,scrollExtant)	\
    (This)->lpVtbl -> Scroll(This,scrollExtant)

#define IOleInPlaceSite_OnUIDeactivate(This,fUndoable)	\
    (This)->lpVtbl -> OnUIDeactivate(This,fUndoable)

#define IOleInPlaceSite_OnInPlaceDeactivate(This)	\
    (This)->lpVtbl -> OnInPlaceDeactivate(This)

#define IOleInPlaceSite_DiscardUndoState(This)	\
    (This)->lpVtbl -> DiscardUndoState(This)

#define IOleInPlaceSite_DeactivateAndUndo(This)	\
    (This)->lpVtbl -> DeactivateAndUndo(This)

#define IOleInPlaceSite_OnPosRectChange(This,lprcPosRect)	\
    (This)->lpVtbl -> OnPosRectChange(This,lprcPosRect)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOleInPlaceSite_CanInPlaceActivate_Proxy( 
    IOleInPlaceSite __RPC_FAR * This);


void __RPC_STUB IOleInPlaceSite_CanInPlaceActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSite_OnInPlaceActivate_Proxy( 
    IOleInPlaceSite __RPC_FAR * This);


void __RPC_STUB IOleInPlaceSite_OnInPlaceActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSite_OnUIActivate_Proxy( 
    IOleInPlaceSite __RPC_FAR * This);


void __RPC_STUB IOleInPlaceSite_OnUIActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSite_GetWindowContext_Proxy( 
    IOleInPlaceSite __RPC_FAR * This,
    /* [out] */ IOleInPlaceFrame __RPC_FAR *__RPC_FAR *ppFrame,
    /* [out] */ IOleInPlaceUIWindow __RPC_FAR *__RPC_FAR *ppDoc,
    /* [out] */ LPRECT lprcPosRect,
    /* [out] */ LPRECT lprcClipRect,
    /* [out][in] */ LPOLEINPLACEFRAMEINFO lpFrameInfo);


void __RPC_STUB IOleInPlaceSite_GetWindowContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSite_Scroll_Proxy( 
    IOleInPlaceSite __RPC_FAR * This,
    /* [in] */ SIZE scrollExtant);


void __RPC_STUB IOleInPlaceSite_Scroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSite_OnUIDeactivate_Proxy( 
    IOleInPlaceSite __RPC_FAR * This,
    /* [in] */ BOOL fUndoable);


void __RPC_STUB IOleInPlaceSite_OnUIDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSite_OnInPlaceDeactivate_Proxy( 
    IOleInPlaceSite __RPC_FAR * This);


void __RPC_STUB IOleInPlaceSite_OnInPlaceDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSite_DiscardUndoState_Proxy( 
    IOleInPlaceSite __RPC_FAR * This);


void __RPC_STUB IOleInPlaceSite_DiscardUndoState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSite_DeactivateAndUndo_Proxy( 
    IOleInPlaceSite __RPC_FAR * This);


void __RPC_STUB IOleInPlaceSite_DeactivateAndUndo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOleInPlaceSite_OnPosRectChange_Proxy( 
    IOleInPlaceSite __RPC_FAR * This,
    /* [in] */ LPCRECT lprcPosRect);


void __RPC_STUB IOleInPlaceSite_OnPosRectChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOleInPlaceSite_INTERFACE_DEFINED__ */


#ifndef __IContinue_INTERFACE_DEFINED__
#define __IContinue_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IContinue
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [uuid][object] */ 



EXTERN_C const IID IID_IContinue;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("0000012a-0000-0000-C000-000000000046")
    IContinue : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE FContinue( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContinueVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IContinue __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IContinue __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IContinue __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FContinue )( 
            IContinue __RPC_FAR * This);
        
        END_INTERFACE
    } IContinueVtbl;

    interface IContinue
    {
        CONST_VTBL struct IContinueVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContinue_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IContinue_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IContinue_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IContinue_FContinue(This)	\
    (This)->lpVtbl -> FContinue(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IContinue_FContinue_Proxy( 
    IContinue __RPC_FAR * This);


void __RPC_STUB IContinue_FContinue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IContinue_INTERFACE_DEFINED__ */


#ifndef __IViewObject_INTERFACE_DEFINED__
#define __IViewObject_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IViewObject
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [uuid][object] */ 


typedef /* [unique] */ IViewObject __RPC_FAR *LPVIEWOBJECT;


EXTERN_C const IID IID_IViewObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("0000010d-0000-0000-C000-000000000046")
    IViewObject : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Draw( 
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ void __RPC_FAR *pvAspect,
            /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [in] */ HDC hdcTargetDev,
            /* [in] */ HDC hdcDraw,
            /* [in] */ LPCRECTL lprcBounds,
            /* [unique][in] */ LPCRECTL lprcWBounds,
            /* [in] */ BOOL ( STDMETHODCALLTYPE __RPC_FAR *pfnContinue )( 
                DWORD dwContinue),
            /* [in] */ DWORD dwContinue) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetColorSet( 
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ void __RPC_FAR *pvAspect,
            /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [in] */ HDC hicTargetDev,
            /* [out] */ LOGPALETTE __RPC_FAR *__RPC_FAR *ppColorSet) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Freeze( 
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ void __RPC_FAR *pvAspect,
            /* [out] */ DWORD __RPC_FAR *pdwFreeze) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unfreeze( 
            /* [in] */ DWORD dwFreeze) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAdvise( 
            /* [in] */ DWORD aspects,
            /* [in] */ DWORD advf,
            /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvSink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAdvise( 
            /* [out] */ DWORD __RPC_FAR *pAspects,
            /* [out] */ DWORD __RPC_FAR *pAdvf,
            /* [out] */ IAdviseSink __RPC_FAR *__RPC_FAR *ppAdvSink) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IViewObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IViewObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IViewObject __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IViewObject __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Draw )( 
            IViewObject __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ void __RPC_FAR *pvAspect,
            /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [in] */ HDC hdcTargetDev,
            /* [in] */ HDC hdcDraw,
            /* [in] */ LPCRECTL lprcBounds,
            /* [unique][in] */ LPCRECTL lprcWBounds,
            /* [in] */ BOOL ( STDMETHODCALLTYPE __RPC_FAR *pfnContinue )( 
                DWORD dwContinue),
            /* [in] */ DWORD dwContinue);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetColorSet )( 
            IViewObject __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ void __RPC_FAR *pvAspect,
            /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [in] */ HDC hicTargetDev,
            /* [out] */ LOGPALETTE __RPC_FAR *__RPC_FAR *ppColorSet);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Freeze )( 
            IViewObject __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ void __RPC_FAR *pvAspect,
            /* [out] */ DWORD __RPC_FAR *pdwFreeze);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Unfreeze )( 
            IViewObject __RPC_FAR * This,
            /* [in] */ DWORD dwFreeze);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetAdvise )( 
            IViewObject __RPC_FAR * This,
            /* [in] */ DWORD aspects,
            /* [in] */ DWORD advf,
            /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvSink);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAdvise )( 
            IViewObject __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pAspects,
            /* [out] */ DWORD __RPC_FAR *pAdvf,
            /* [out] */ IAdviseSink __RPC_FAR *__RPC_FAR *ppAdvSink);
        
        END_INTERFACE
    } IViewObjectVtbl;

    interface IViewObject
    {
        CONST_VTBL struct IViewObjectVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IViewObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IViewObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IViewObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IViewObject_Draw(This,dwDrawAspect,lindex,pvAspect,ptd,hdcTargetDev,hdcDraw,lprcBounds,lprcWBounds,pfnContinue,dwContinue)	\
    (This)->lpVtbl -> Draw(This,dwDrawAspect,lindex,pvAspect,ptd,hdcTargetDev,hdcDraw,lprcBounds,lprcWBounds,pfnContinue,dwContinue)

#define IViewObject_GetColorSet(This,dwDrawAspect,lindex,pvAspect,ptd,hicTargetDev,ppColorSet)	\
    (This)->lpVtbl -> GetColorSet(This,dwDrawAspect,lindex,pvAspect,ptd,hicTargetDev,ppColorSet)

#define IViewObject_Freeze(This,dwDrawAspect,lindex,pvAspect,pdwFreeze)	\
    (This)->lpVtbl -> Freeze(This,dwDrawAspect,lindex,pvAspect,pdwFreeze)

#define IViewObject_Unfreeze(This,dwFreeze)	\
    (This)->lpVtbl -> Unfreeze(This,dwFreeze)

#define IViewObject_SetAdvise(This,aspects,advf,pAdvSink)	\
    (This)->lpVtbl -> SetAdvise(This,aspects,advf,pAdvSink)

#define IViewObject_GetAdvise(This,pAspects,pAdvf,ppAdvSink)	\
    (This)->lpVtbl -> GetAdvise(This,pAspects,pAdvf,ppAdvSink)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IViewObject_RemoteDraw_Proxy( 
    IViewObject __RPC_FAR * This,
    /* [in] */ DWORD dwDrawAspect,
    /* [in] */ LONG lindex,
    /* [in] */ DWORD pvAspect,
    /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
    /* [in] */ DWORD hdcTargetDev,
    /* [in] */ DWORD hdcDraw,
    /* [in] */ LPCRECTL lprcBounds,
    /* [unique][in] */ LPCRECTL lprcWBounds,
    /* [in] */ IContinue __RPC_FAR *pContinue);


void __RPC_STUB IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IViewObject_RemoteGetColorSet_Proxy( 
    IViewObject __RPC_FAR * This,
    /* [in] */ DWORD dwDrawAspect,
    /* [in] */ LONG lindex,
    /* [in] */ DWORD pvAspect,
    /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
    /* [in] */ DWORD hicTargetDev,
    /* [out] */ LOGPALETTE __RPC_FAR *__RPC_FAR *ppColorSet);


void __RPC_STUB IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IViewObject_RemoteFreeze_Proxy( 
    IViewObject __RPC_FAR * This,
    /* [in] */ DWORD dwDrawAspect,
    /* [in] */ LONG lindex,
    /* [in] */ DWORD pvAspect,
    /* [out] */ DWORD __RPC_FAR *pdwFreeze);


void __RPC_STUB IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IViewObject_Unfreeze_Proxy( 
    IViewObject __RPC_FAR * This,
    /* [in] */ DWORD dwFreeze);


void __RPC_STUB IViewObject_Unfreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IViewObject_SetAdvise_Proxy( 
    IViewObject __RPC_FAR * This,
    /* [in] */ DWORD aspects,
    /* [in] */ DWORD advf,
    /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvSink);


void __RPC_STUB IViewObject_SetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IViewObject_GetAdvise_Proxy( 
    IViewObject __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pAspects,
    /* [out] */ DWORD __RPC_FAR *pAdvf,
    /* [out] */ IAdviseSink __RPC_FAR *__RPC_FAR *ppAdvSink);


void __RPC_STUB IViewObject_GetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IViewObject_INTERFACE_DEFINED__ */


#ifndef __IViewObject2_INTERFACE_DEFINED__
#define __IViewObject2_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IViewObject2
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [uuid][object] */ 


typedef /* [unique] */ IViewObject2 __RPC_FAR *LPVIEWOBJECT2;


EXTERN_C const IID IID_IViewObject2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000127-0000-0000-C000-000000000046")
    IViewObject2 : public IViewObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetExtent( 
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [out] */ LPSIZEL lpsizel) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IViewObject2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IViewObject2 __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IViewObject2 __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IViewObject2 __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Draw )( 
            IViewObject2 __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ void __RPC_FAR *pvAspect,
            /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [in] */ HDC hdcTargetDev,
            /* [in] */ HDC hdcDraw,
            /* [in] */ LPCRECTL lprcBounds,
            /* [unique][in] */ LPCRECTL lprcWBounds,
            /* [in] */ BOOL ( STDMETHODCALLTYPE __RPC_FAR *pfnContinue )( 
                DWORD dwContinue),
            /* [in] */ DWORD dwContinue);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetColorSet )( 
            IViewObject2 __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ void __RPC_FAR *pvAspect,
            /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [in] */ HDC hicTargetDev,
            /* [out] */ LOGPALETTE __RPC_FAR *__RPC_FAR *ppColorSet);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Freeze )( 
            IViewObject2 __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ void __RPC_FAR *pvAspect,
            /* [out] */ DWORD __RPC_FAR *pdwFreeze);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Unfreeze )( 
            IViewObject2 __RPC_FAR * This,
            /* [in] */ DWORD dwFreeze);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetAdvise )( 
            IViewObject2 __RPC_FAR * This,
            /* [in] */ DWORD aspects,
            /* [in] */ DWORD advf,
            /* [unique][in] */ IAdviseSink __RPC_FAR *pAdvSink);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAdvise )( 
            IViewObject2 __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pAspects,
            /* [out] */ DWORD __RPC_FAR *pAdvf,
            /* [out] */ IAdviseSink __RPC_FAR *__RPC_FAR *ppAdvSink);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetExtent )( 
            IViewObject2 __RPC_FAR * This,
            /* [in] */ DWORD dwDrawAspect,
            /* [in] */ LONG lindex,
            /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
            /* [out] */ LPSIZEL lpsizel);
        
        END_INTERFACE
    } IViewObject2Vtbl;

    interface IViewObject2
    {
        CONST_VTBL struct IViewObject2Vtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IViewObject2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IViewObject2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IViewObject2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IViewObject2_Draw(This,dwDrawAspect,lindex,pvAspect,ptd,hdcTargetDev,hdcDraw,lprcBounds,lprcWBounds,pfnContinue,dwContinue)	\
    (This)->lpVtbl -> Draw(This,dwDrawAspect,lindex,pvAspect,ptd,hdcTargetDev,hdcDraw,lprcBounds,lprcWBounds,pfnContinue,dwContinue)

#define IViewObject2_GetColorSet(This,dwDrawAspect,lindex,pvAspect,ptd,hicTargetDev,ppColorSet)	\
    (This)->lpVtbl -> GetColorSet(This,dwDrawAspect,lindex,pvAspect,ptd,hicTargetDev,ppColorSet)

#define IViewObject2_Freeze(This,dwDrawAspect,lindex,pvAspect,pdwFreeze)	\
    (This)->lpVtbl -> Freeze(This,dwDrawAspect,lindex,pvAspect,pdwFreeze)

#define IViewObject2_Unfreeze(This,dwFreeze)	\
    (This)->lpVtbl -> Unfreeze(This,dwFreeze)

#define IViewObject2_SetAdvise(This,aspects,advf,pAdvSink)	\
    (This)->lpVtbl -> SetAdvise(This,aspects,advf,pAdvSink)

#define IViewObject2_GetAdvise(This,pAspects,pAdvf,ppAdvSink)	\
    (This)->lpVtbl -> GetAdvise(This,pAspects,pAdvf,ppAdvSink)


#define IViewObject2_GetExtent(This,dwDrawAspect,lindex,ptd,lpsizel)	\
    (This)->lpVtbl -> GetExtent(This,dwDrawAspect,lindex,ptd,lpsizel)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IViewObject2_GetExtent_Proxy( 
    IViewObject2 __RPC_FAR * This,
    /* [in] */ DWORD dwDrawAspect,
    /* [in] */ LONG lindex,
    /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
    /* [out] */ LPSIZEL lpsizel);


void __RPC_STUB IViewObject2_GetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IViewObject2_INTERFACE_DEFINED__ */


#ifndef __IDropSource_INTERFACE_DEFINED__
#define __IDropSource_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IDropSource
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [uuid][object][local] */ 


typedef /* [unique] */ IDropSource __RPC_FAR *LPDROPSOURCE;


EXTERN_C const IID IID_IDropSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000121-0000-0000-C000-000000000046")
    IDropSource : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QueryContinueDrag( 
            /* [in] */ BOOL fEscapePressed,
            /* [in] */ DWORD grfKeyState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GiveFeedback( 
            /* [in] */ DWORD dwEffect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDropSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDropSource __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDropSource __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDropSource __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryContinueDrag )( 
            IDropSource __RPC_FAR * This,
            /* [in] */ BOOL fEscapePressed,
            /* [in] */ DWORD grfKeyState);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GiveFeedback )( 
            IDropSource __RPC_FAR * This,
            /* [in] */ DWORD dwEffect);
        
        END_INTERFACE
    } IDropSourceVtbl;

    interface IDropSource
    {
        CONST_VTBL struct IDropSourceVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDropSource_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDropSource_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDropSource_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDropSource_QueryContinueDrag(This,fEscapePressed,grfKeyState)	\
    (This)->lpVtbl -> QueryContinueDrag(This,fEscapePressed,grfKeyState)

#define IDropSource_GiveFeedback(This,dwEffect)	\
    (This)->lpVtbl -> GiveFeedback(This,dwEffect)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDropSource_QueryContinueDrag_Proxy( 
    IDropSource __RPC_FAR * This,
    /* [in] */ BOOL fEscapePressed,
    /* [in] */ DWORD grfKeyState);


void __RPC_STUB IDropSource_QueryContinueDrag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDropSource_GiveFeedback_Proxy( 
    IDropSource __RPC_FAR * This,
    /* [in] */ DWORD dwEffect);


void __RPC_STUB IDropSource_GiveFeedback_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDropSource_INTERFACE_DEFINED__ */


#ifndef __IDropTarget_INTERFACE_DEFINED__
#define __IDropTarget_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IDropTarget
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IDropTarget __RPC_FAR *LPDROPTARGET;

#define	MK_ALT	( 0x20 )

#define	DROPEFFECT_NONE	( 0 )

#define	DROPEFFECT_COPY	( 1 )

#define	DROPEFFECT_MOVE	( 2 )

#define	DROPEFFECT_LINK	( 4 )

#define	DROPEFFECT_SCROLL	( 0x80000000 )

// default inset-width of the hot zone, in pixels
//   typical use: GetProfileInt("windows","DragScrollInset",DD_DEFSCROLLINSET)
#define	DD_DEFSCROLLINSET	( 11 )

// default delay before scrolling, in milliseconds
//   typical use: GetProfileInt("windows","DragScrollDelay",DD_DEFSCROLLDELAY)
#define	DD_DEFSCROLLDELAY	( 50 )

// default scroll interval, in milliseconds
//   typical use: GetProfileInt("windows","DragScrollInterval", DD_DEFSCROLLINTERVAL)
#define	DD_DEFSCROLLINTERVAL	( 50 )

// default delay before dragging should start, in milliseconds
//   typical use: GetProfileInt("windows", "DragDelay", DD_DEFDRAGDELAY)
#define	DD_DEFDRAGDELAY	( 200 )

// default minimum distance (radius) before dragging should start, in pixels
//   typical use: GetProfileInt("windows", "DragMinDist", DD_DEFDRAGMINDIST)
#define	DD_DEFDRAGMINDIST	( 2 )


EXTERN_C const IID IID_IDropTarget;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000122-0000-0000-C000-000000000046")
    IDropTarget : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE DragEnter( 
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObj,
            /* [in] */ DWORD grfKeyState,
            /* [in] */ POINTL pt,
            /* [out][in] */ DWORD __RPC_FAR *pdwEffect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DragOver( 
            /* [in] */ DWORD grfKeyState,
            /* [in] */ POINTL pt,
            /* [out][in] */ DWORD __RPC_FAR *pdwEffect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DragLeave( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Drop( 
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObj,
            /* [in] */ DWORD grfKeyState,
            /* [in] */ POINTL pt,
            /* [out][in] */ DWORD __RPC_FAR *pdwEffect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDropTargetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDropTarget __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDropTarget __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDropTarget __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DragEnter )( 
            IDropTarget __RPC_FAR * This,
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObj,
            /* [in] */ DWORD grfKeyState,
            /* [in] */ POINTL pt,
            /* [out][in] */ DWORD __RPC_FAR *pdwEffect);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DragOver )( 
            IDropTarget __RPC_FAR * This,
            /* [in] */ DWORD grfKeyState,
            /* [in] */ POINTL pt,
            /* [out][in] */ DWORD __RPC_FAR *pdwEffect);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DragLeave )( 
            IDropTarget __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Drop )( 
            IDropTarget __RPC_FAR * This,
            /* [unique][in] */ IDataObject __RPC_FAR *pDataObj,
            /* [in] */ DWORD grfKeyState,
            /* [in] */ POINTL pt,
            /* [out][in] */ DWORD __RPC_FAR *pdwEffect);
        
        END_INTERFACE
    } IDropTargetVtbl;

    interface IDropTarget
    {
        CONST_VTBL struct IDropTargetVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDropTarget_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDropTarget_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDropTarget_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDropTarget_DragEnter(This,pDataObj,grfKeyState,pt,pdwEffect)	\
    (This)->lpVtbl -> DragEnter(This,pDataObj,grfKeyState,pt,pdwEffect)

#define IDropTarget_DragOver(This,grfKeyState,pt,pdwEffect)	\
    (This)->lpVtbl -> DragOver(This,grfKeyState,pt,pdwEffect)

#define IDropTarget_DragLeave(This)	\
    (This)->lpVtbl -> DragLeave(This)

#define IDropTarget_Drop(This,pDataObj,grfKeyState,pt,pdwEffect)	\
    (This)->lpVtbl -> Drop(This,pDataObj,grfKeyState,pt,pdwEffect)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDropTarget_DragEnter_Proxy( 
    IDropTarget __RPC_FAR * This,
    /* [unique][in] */ IDataObject __RPC_FAR *pDataObj,
    /* [in] */ DWORD grfKeyState,
    /* [in] */ POINTL pt,
    /* [out][in] */ DWORD __RPC_FAR *pdwEffect);


void __RPC_STUB IDropTarget_DragEnter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDropTarget_DragOver_Proxy( 
    IDropTarget __RPC_FAR * This,
    /* [in] */ DWORD grfKeyState,
    /* [in] */ POINTL pt,
    /* [out][in] */ DWORD __RPC_FAR *pdwEffect);


void __RPC_STUB IDropTarget_DragOver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDropTarget_DragLeave_Proxy( 
    IDropTarget __RPC_FAR * This);


void __RPC_STUB IDropTarget_DragLeave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDropTarget_Drop_Proxy( 
    IDropTarget __RPC_FAR * This,
    /* [unique][in] */ IDataObject __RPC_FAR *pDataObj,
    /* [in] */ DWORD grfKeyState,
    /* [in] */ POINTL pt,
    /* [out][in] */ DWORD __RPC_FAR *pdwEffect);


void __RPC_STUB IDropTarget_Drop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDropTarget_INTERFACE_DEFINED__ */


#ifndef __IEnumOLEVERB_INTERFACE_DEFINED__
#define __IEnumOLEVERB_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IEnumOLEVERB
 * at Tue Nov 16 19:00:23 1999
 * using MIDL 3.02.88
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IEnumOLEVERB __RPC_FAR *LPENUMOLEVERB;

typedef struct  tagOLEVERB
    {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
    }	OLEVERB;

typedef struct tagOLEVERB __RPC_FAR *LPOLEVERB;

typedef /* [v1_enum] */ 
enum tagOLEVERBATTRIB
    {	OLEVERBATTRIB_NEVERDIRTIES	= 1,
	OLEVERBATTRIB_ONCONTAINERMENU	= 2
    }	OLEVERBATTRIB;


EXTERN_C const IID IID_IEnumOLEVERB;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("00000104-0000-0000-C000-000000000046")
    IEnumOLEVERB : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ LPOLEVERB rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumOLEVERB __RPC_FAR *__RPC_FAR *ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumOLEVERBVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IEnumOLEVERB __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IEnumOLEVERB __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IEnumOLEVERB __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Next )( 
            IEnumOLEVERB __RPC_FAR * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ LPOLEVERB rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Skip )( 
            IEnumOLEVERB __RPC_FAR * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            IEnumOLEVERB __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IEnumOLEVERB __RPC_FAR * This,
            /* [out] */ IEnumOLEVERB __RPC_FAR *__RPC_FAR *ppenum);
        
        END_INTERFACE
    } IEnumOLEVERBVtbl;

    interface IEnumOLEVERB
    {
        CONST_VTBL struct IEnumOLEVERBVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumOLEVERB_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumOLEVERB_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumOLEVERB_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumOLEVERB_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumOLEVERB_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumOLEVERB_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumOLEVERB_Clone(This,ppenum)	\
    (This)->lpVtbl -> Clone(This,ppenum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumOLEVERB_RemoteNext_Proxy( 
    IEnumOLEVERB __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ LPOLEVERB rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


void __RPC_STUB IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumOLEVERB_Skip_Proxy( 
    IEnumOLEVERB __RPC_FAR * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumOLEVERB_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumOLEVERB_Reset_Proxy( 
    IEnumOLEVERB __RPC_FAR * This);


void __RPC_STUB IEnumOLEVERB_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumOLEVERB_Clone_Proxy( 
    IEnumOLEVERB __RPC_FAR * This,
    /* [out] */ IEnumOLEVERB __RPC_FAR *__RPC_FAR *ppenum);


void __RPC_STUB IEnumOLEVERB_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumOLEVERB_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  CLIPFORMAT_UserSize(     unsigned long __RPC_FAR *, unsigned long            , CLIPFORMAT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  CLIPFORMAT_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, CLIPFORMAT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  CLIPFORMAT_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, CLIPFORMAT __RPC_FAR * ); 
void                      __RPC_USER  CLIPFORMAT_UserFree(     unsigned long __RPC_FAR *, CLIPFORMAT __RPC_FAR * ); 

unsigned long             __RPC_USER  HACCEL_UserSize(     unsigned long __RPC_FAR *, unsigned long            , HACCEL __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HACCEL_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HACCEL __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HACCEL_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HACCEL __RPC_FAR * ); 
void                      __RPC_USER  HACCEL_UserFree(     unsigned long __RPC_FAR *, HACCEL __RPC_FAR * ); 

unsigned long             __RPC_USER  HGLOBAL_UserSize(     unsigned long __RPC_FAR *, unsigned long            , HGLOBAL __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HGLOBAL_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HGLOBAL __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HGLOBAL_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HGLOBAL __RPC_FAR * ); 
void                      __RPC_USER  HGLOBAL_UserFree(     unsigned long __RPC_FAR *, HGLOBAL __RPC_FAR * ); 

unsigned long             __RPC_USER  HMENU_UserSize(     unsigned long __RPC_FAR *, unsigned long            , HMENU __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HMENU_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HMENU __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HMENU_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HMENU __RPC_FAR * ); 
void                      __RPC_USER  HMENU_UserFree(     unsigned long __RPC_FAR *, HMENU __RPC_FAR * ); 

unsigned long             __RPC_USER  HWND_UserSize(     unsigned long __RPC_FAR *, unsigned long            , HWND __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HWND_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HWND __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HWND_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HWND __RPC_FAR * ); 
void                      __RPC_USER  HWND_UserFree(     unsigned long __RPC_FAR *, HWND __RPC_FAR * ); 

unsigned long             __RPC_USER  STGMEDIUM_UserSize(     unsigned long __RPC_FAR *, unsigned long            , STGMEDIUM __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  STGMEDIUM_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, STGMEDIUM __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  STGMEDIUM_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, STGMEDIUM __RPC_FAR * ); 
void                      __RPC_USER  STGMEDIUM_UserFree(     unsigned long __RPC_FAR *, STGMEDIUM __RPC_FAR * ); 

/* [local] */ HRESULT STDMETHODCALLTYPE IOleCache2_UpdateCache_Proxy( 
    IOleCache2 __RPC_FAR * This,
    /* [in] */ LPDATAOBJECT pDataObject,
    /* [in] */ DWORD grfUpdf,
    /* [in] */ LPVOID pReserved);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IOleCache2_UpdateCache_Stub( 
    IOleCache2 __RPC_FAR * This,
    /* [in] */ LPDATAOBJECT pDataObject,
    /* [in] */ DWORD grfUpdf,
    /* [in] */ DWORD pReserved);

/* [local] */ HRESULT STDMETHODCALLTYPE IOleItemContainer_GetObject_Proxy( 
    IOleItemContainer __RPC_FAR * This,
    /* [in] */ LPOLESTR pszItem,
    /* [in] */ DWORD dwSpeedNeeded,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IOleItemContainer_GetObject_Stub( 
    IOleItemContainer __RPC_FAR * This,
    /* [in] */ LPOLESTR pszItem,
    /* [in] */ DWORD dwSpeedNeeded,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppvObject);

/* [local] */ HRESULT STDMETHODCALLTYPE IOleItemContainer_GetObjectStorage_Proxy( 
    IOleItemContainer __RPC_FAR * This,
    /* [in] */ LPOLESTR pszItem,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvStorage);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IOleItemContainer_GetObjectStorage_Stub( 
    IOleItemContainer __RPC_FAR * This,
    /* [in] */ LPOLESTR pszItem,
    /* [unique][in] */ IBindCtx __RPC_FAR *pbc,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ IUnknown __RPC_FAR *__RPC_FAR *ppvStorage);

/* [local] */ HRESULT STDMETHODCALLTYPE IOleInPlaceActiveObject_TranslateAccelerator_Proxy( 
    IOleInPlaceActiveObject __RPC_FAR * This,
    /* [in] */ LPMSG lpmsg);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IOleInPlaceActiveObject_TranslateAccelerator_Stub( 
    IOleInPlaceActiveObject __RPC_FAR * This);

/* [local] */ HRESULT STDMETHODCALLTYPE IOleInPlaceActiveObject_ResizeBorder_Proxy( 
    IOleInPlaceActiveObject __RPC_FAR * This,
    /* [in] */ LPCRECT prcBorder,
    /* [unique][in] */ IOleInPlaceUIWindow __RPC_FAR *pUIWindow,
    /* [in] */ BOOL fFrameWindow);


/* [input_sync][call_as] */ HRESULT STDMETHODCALLTYPE IOleInPlaceActiveObject_ResizeBorder_Stub( 
    IOleInPlaceActiveObject __RPC_FAR * This,
    /* [in] */ LPCRECT prcBorder,
    /* [in] */ REFIID riid,
    /* [iid_is][unique][in] */ IOleInPlaceUIWindow __RPC_FAR *pUIWindow,
    /* [in] */ BOOL fFrameWindow);

/* [local] */ HRESULT STDMETHODCALLTYPE IViewObject_Draw_Proxy( 
    IViewObject __RPC_FAR * This,
    /* [in] */ DWORD dwDrawAspect,
    /* [in] */ LONG lindex,
    /* [unique][in] */ void __RPC_FAR *pvAspect,
    /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
    /* [in] */ HDC hdcTargetDev,
    /* [in] */ HDC hdcDraw,
    /* [in] */ LPCRECTL lprcBounds,
    /* [unique][in] */ LPCRECTL lprcWBounds,
    /* [in] */ BOOL ( STDMETHODCALLTYPE __RPC_FAR *pfnContinue )( 
        DWORD dwContinue),
    /* [in] */ DWORD dwContinue);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IViewObject_Draw_Stub( 
    IViewObject __RPC_FAR * This,
    /* [in] */ DWORD dwDrawAspect,
    /* [in] */ LONG lindex,
    /* [in] */ DWORD pvAspect,
    /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
    /* [in] */ DWORD hdcTargetDev,
    /* [in] */ DWORD hdcDraw,
    /* [in] */ LPCRECTL lprcBounds,
    /* [unique][in] */ LPCRECTL lprcWBounds,
    /* [in] */ IContinue __RPC_FAR *pContinue);

/* [local] */ HRESULT STDMETHODCALLTYPE IViewObject_GetColorSet_Proxy( 
    IViewObject __RPC_FAR * This,
    /* [in] */ DWORD dwDrawAspect,
    /* [in] */ LONG lindex,
    /* [unique][in] */ void __RPC_FAR *pvAspect,
    /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
    /* [in] */ HDC hicTargetDev,
    /* [out] */ LOGPALETTE __RPC_FAR *__RPC_FAR *ppColorSet);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IViewObject_GetColorSet_Stub( 
    IViewObject __RPC_FAR * This,
    /* [in] */ DWORD dwDrawAspect,
    /* [in] */ LONG lindex,
    /* [in] */ DWORD pvAspect,
    /* [unique][in] */ DVTARGETDEVICE __RPC_FAR *ptd,
    /* [in] */ DWORD hicTargetDev,
    /* [out] */ LOGPALETTE __RPC_FAR *__RPC_FAR *ppColorSet);

/* [local] */ HRESULT STDMETHODCALLTYPE IViewObject_Freeze_Proxy( 
    IViewObject __RPC_FAR * This,
    /* [in] */ DWORD dwDrawAspect,
    /* [in] */ LONG lindex,
    /* [unique][in] */ void __RPC_FAR *pvAspect,
    /* [out] */ DWORD __RPC_FAR *pdwFreeze);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IViewObject_Freeze_Stub( 
    IViewObject __RPC_FAR * This,
    /* [in] */ DWORD dwDrawAspect,
    /* [in] */ LONG lindex,
    /* [in] */ DWORD pvAspect,
    /* [out] */ DWORD __RPC_FAR *pdwFreeze);

/* [local] */ HRESULT STDMETHODCALLTYPE IEnumOLEVERB_Next_Proxy( 
    IEnumOLEVERB __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ LPOLEVERB rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IEnumOLEVERB_Next_Stub( 
    IEnumOLEVERB __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ LPOLEVERB rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);



/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\packon.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/*++


Module Name:

    packon.h

Abstract:

    This file turns packing of structures on.  (That is, it disables
    automatic alignment of structure fields.)  An include file is needed
    because various compilers do this in different ways.

    The file packoff.h is the complement to this file.

--*/

#if ! (defined(lint) || defined(_lint))

#ifndef VXD
#if i386 || defined(UNDER_CE)
#pragma warning(disable:4103)
#endif // i386
#endif // VXD
#pragma pack(1)                 // x86, MS compiler; MIPS, MIPS compiler
#endif // ! (defined(lint) || defined(_lint))
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\packageversion.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//

#pragma once


// version information for a System File
typedef struct _PackageVersion
{
    WORD wMajor;
    WORD wMinor;
    WORD wQFELevel;
    WORD wBuildNumber;
} PackageVersion;

extern "C" 
{
/// <summary>
/// GetPackageVersionOfFile
/// </summary>
/// <param name="szFileName">name of the file to get the version of.</param>
/// <param name="psfv">pointer to a VersionInfo struct that will receive the version information</param>
/// <returns>
/// S_OK means that the file was found in ROM.  S_FALSE means that the file was not found.  
/// E_INVALIDARG is returned if either the parameters are NULL
/// E_FAIL is return in all other failures.
/// </returns>
/// <remarks>
/// </remarks>
HRESULT GetPackageVersionOfFile(__in LPCTSTR szFileName, __out PackageVersion* psfv);

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\paneldetector.h ===
#ifndef __paneldetector_h__
#define __paneldetector_h__

/* Forward Declarations */

struct ENUMDESC;

#ifndef __IHTMLElementCollection_FWD_DEFINED__
#define __IHTMLElementCollection_FWD_DEFINED__
typedef interface IHTMLElementCollection IHTMLElementCollection;
#endif     /* __IHTMLElementCollection_FWD_DEFINED__ */

#ifndef __IPanelDetector_FWD_DEFINED__
#define __IPanelDetector_FWD_DEFINED__
typedef interface IPanelDetector IPanelDetector;
#endif     /* __IPanelDetector_FWD_DEFINED__ */

#ifndef __IPanelDetector_INTERFACE_DEFINED__

#define __IPanelDetector_INTERFACE_DEFINED__

EXTERN_C const IID IID_IPanelDetector;


MIDL_INTERFACE("43FE164B-53BF-4dbc-BC26-3915E7541DC5")
IPanelDetector : public IUnknown
{
public:
    virtual HRESULT STDMETHODCALLTYPE getAllPanels(
            /* [out] */ IHTMLElementCollection** ppIEC,/* [out] */ DWORD* pVersion) = 0;

    virtual HRESULT STDMETHODCALLTYPE getContentPanels(
            /* [out] */ IHTMLElementCollection** ppIEC,/* [out] */ DWORD* pVersion) = 0;

    virtual HRESULT STDMETHODCALLTYPE isDirty(
            /* [in] */ DWORD version,/* [out] */ BOOL* pDirty) = 0;

};

#endif     /* __IPanelDetector_INTERFACE_DEFINED__ */



#endif /*__paneldetector_h__*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\omp.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/***
*
*Purpose:
*        This file has declarations of OpenMP 2.0 API 
****/

#pragma once

#if defined(__cplusplus)
extern "C" {
#endif

#define _OMPAPI     __cdecl

#if !defined(_OMP_LOCK_T)
#define _OMP_LOCK_T
typedef void * omp_lock_t;
#endif

#if !defined(_OMP_NEST_LOCK_T)
#define _OMP_NEST_LOCK_T
typedef void * omp_nest_lock_t;
#endif

#if !defined(_OPENMP)

#if defined(_DEBUG)
    #pragma comment(lib, "vcompd")
#else   // _DEBUG
    #pragma comment(lib, "vcomp")
#endif  // _DEBUG

#endif // _OPENMP


#if !defined(_OMPIMP)
#define _OMPIMP
#endif

_OMPIMP void _OMPAPI
omp_set_num_threads(
    int _Num_threads
    );

_OMPIMP int _OMPAPI
omp_get_num_threads(
    void
    );

_OMPIMP int _OMPAPI
omp_get_max_threads(
    void
    );

_OMPIMP int _OMPAPI
omp_get_thread_num(
    void
    );

_OMPIMP int _OMPAPI
omp_get_num_procs(
    void
    );

_OMPIMP void _OMPAPI
omp_set_dynamic(
    int _Dynamic_threads
    );

_OMPIMP int _OMPAPI
omp_get_dynamic(
    void
    );

_OMPIMP int _OMPAPI
omp_in_parallel(
    void
    );

_OMPIMP void _OMPAPI
omp_set_nested(
    int _Nested
    );

_OMPIMP int _OMPAPI
omp_get_nested(
    void
    );

_OMPIMP void _OMPAPI
omp_init_lock(
    omp_lock_t * _Lock
    );

_OMPIMP void _OMPAPI
omp_destroy_lock(
    omp_lock_t * _Lock
    );

_OMPIMP void _OMPAPI
omp_set_lock(
    omp_lock_t * _Lock
    );

_OMPIMP void _OMPAPI
omp_unset_lock(
    omp_lock_t * _Lock
    );

_OMPIMP int _OMPAPI
omp_test_lock(
    omp_lock_t * _Lock
    );

_OMPIMP void _OMPAPI
omp_init_nest_lock(
    omp_nest_lock_t * _Lock
    );

_OMPIMP void _OMPAPI
omp_destroy_nest_lock(
    omp_nest_lock_t * _Lock
    );

_OMPIMP void _OMPAPI
omp_set_nest_lock(
    omp_nest_lock_t * _Lock
    );

_OMPIMP void _OMPAPI
omp_unset_nest_lock(
    omp_nest_lock_t * _Lock
    );

_OMPIMP int _OMPAPI
omp_test_nest_lock(
    omp_nest_lock_t * _Lock
    );

_OMPIMP double _OMPAPI
omp_get_wtime(
    void
    );

_OMPIMP double _OMPAPI
omp_get_wtick(
    void
    );

#if defined(__cplusplus)
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\optary.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//

#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 5.03.0286 */
/* at Mon Jan 22 12:15:32 2007
 */
/* Compiler settings for ..\optary.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32 (32b run), ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __optary_h__
#define __optary_h__

/* Forward Declarations */ 

#ifndef __IOptionArray_FWD_DEFINED__
#define __IOptionArray_FWD_DEFINED__
typedef interface IOptionArray IOptionArray;
#endif 	/* __IOptionArray_FWD_DEFINED__ */


#ifndef __IHtmlLoadOptions_FWD_DEFINED__
#define __IHtmlLoadOptions_FWD_DEFINED__
typedef interface IHtmlLoadOptions IHtmlLoadOptions;
#endif 	/* __IHtmlLoadOptions_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"
#include "oleidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/* interface __MIDL_itf_optary_0000 */
/* [local] */ 

//=--------------------------------------------------------------------------=
// optary.h
//=--------------------------------------------------------------------------=
// (C) Copyright 1995-1998 Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=

#pragma comment(lib,"uuid.lib")

//---------------------------------------------------------------------------=
// IOptionArray Interface.


#ifndef _LPOPTIONARRAY_DEFINED
#define _LPOPTIONARRAY_DEFINED


extern RPC_IF_HANDLE __MIDL_itf_optary_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_optary_0000_v0_0_s_ifspec;

#ifndef __IOptionArray_INTERFACE_DEFINED__
#define __IOptionArray_INTERFACE_DEFINED__

/* interface IOptionArray */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IOptionArray __RPC_FAR *LPOPTIONARRAY;


EXTERN_C const IID IID_IOptionArray;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("22b6d492-0f88-11d1-ba19-00c04fd912d0")
    IOptionArray : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QueryOption( 
            /* [in] */ DWORD dwOption,
            /* [size_is][out] */ BYTE __RPC_FAR *pBuffer,
            /* [out][in] */ ULONG __RPC_FAR *pcbBuf) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetOption( 
            /* [in] */ DWORD dwOption,
            /* [size_is][in] */ BYTE __RPC_FAR *pBuffer,
            /* [in] */ ULONG cbBuf) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOptionArrayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOptionArray __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOptionArray __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOptionArray __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryOption )( 
            IOptionArray __RPC_FAR * This,
            /* [in] */ DWORD dwOption,
            /* [size_is][out] */ BYTE __RPC_FAR *pBuffer,
            /* [out][in] */ ULONG __RPC_FAR *pcbBuf);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetOption )( 
            IOptionArray __RPC_FAR * This,
            /* [in] */ DWORD dwOption,
            /* [size_is][in] */ BYTE __RPC_FAR *pBuffer,
            /* [in] */ ULONG cbBuf);
        
        END_INTERFACE
    } IOptionArrayVtbl;

    interface IOptionArray
    {
        CONST_VTBL struct IOptionArrayVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOptionArray_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOptionArray_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOptionArray_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOptionArray_QueryOption(This,dwOption,pBuffer,pcbBuf)	\
    (This)->lpVtbl -> QueryOption(This,dwOption,pBuffer,pcbBuf)

#define IOptionArray_SetOption(This,dwOption,pBuffer,cbBuf)	\
    (This)->lpVtbl -> SetOption(This,dwOption,pBuffer,cbBuf)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IOptionArray_QueryOption_Proxy( 
    IOptionArray __RPC_FAR * This,
    /* [in] */ DWORD dwOption,
    /* [size_is][out] */ BYTE __RPC_FAR *pBuffer,
    /* [out][in] */ ULONG __RPC_FAR *pcbBuf);


void __RPC_STUB IOptionArray_QueryOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IOptionArray_SetOption_Proxy( 
    IOptionArray __RPC_FAR * This,
    /* [in] */ DWORD dwOption,
    /* [size_is][in] */ BYTE __RPC_FAR *pBuffer,
    /* [in] */ ULONG cbBuf);


void __RPC_STUB IOptionArray_SetOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOptionArray_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_optary_0082 */
/* [local] */ 

// HTMLLoadOptions CLSID
EXTERN_C const CLSID CLSID_HTMLLoadOptions; // {18845040-0fa5-11d1-ba19-00c04fd912d0}


extern RPC_IF_HANDLE __MIDL_itf_optary_0082_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_optary_0082_v0_0_s_ifspec;

#ifndef __IHtmlLoadOptions_INTERFACE_DEFINED__
#define __IHtmlLoadOptions_INTERFACE_DEFINED__

/* interface IHtmlLoadOptions */
/* [unique][uuid][object] */ 

typedef /* [public] */ 
enum __MIDL_IHtmlLoadOptions_0001
    {	HTMLLOADOPTION_CODEPAGE	= 0,
	HTMLLOADOPTION_INETSHORTCUTPATH	= 0x1,
	HTMLLOADOPTION_HYPERLINK	= 0x2,
	HTMLLOADOPTION_FRAMELOAD	= 0x3,
	HTMLLOADOPTION_NEWWINDOWFLAGS	= 0x4,
	HTMLLOADOPTION_CONTEXTURL	= 0x5,
	HTMLLOADOPTION_USERACTIONID	= 0x6,
	HTMLLOADOPTION_OVERRIDE_FLAGS	= 0x7,
	HTMLLOADOPTION_NAVIGATION_FLAGS	= 0x8,
	HTMLLOADOPTION_DELEGATION_FLAGS	= 0x10
    }	HTMLLOADOPTION;


EXTERN_C const IID IID_IHtmlLoadOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a71a0808-0f88-11d1-ba19-00c04fd912d0")
    IHtmlLoadOptions : public IOptionArray
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IHtmlLoadOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IHtmlLoadOptions __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IHtmlLoadOptions __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IHtmlLoadOptions __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryOption )( 
            IHtmlLoadOptions __RPC_FAR * This,
            /* [in] */ DWORD dwOption,
            /* [size_is][out] */ BYTE __RPC_FAR *pBuffer,
            /* [out][in] */ ULONG __RPC_FAR *pcbBuf);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetOption )( 
            IHtmlLoadOptions __RPC_FAR * This,
            /* [in] */ DWORD dwOption,
            /* [size_is][in] */ BYTE __RPC_FAR *pBuffer,
            /* [in] */ ULONG cbBuf);
        
        END_INTERFACE
    } IHtmlLoadOptionsVtbl;

    interface IHtmlLoadOptions
    {
        CONST_VTBL struct IHtmlLoadOptionsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHtmlLoadOptions_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHtmlLoadOptions_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHtmlLoadOptions_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHtmlLoadOptions_QueryOption(This,dwOption,pBuffer,pcbBuf)	\
    (This)->lpVtbl -> QueryOption(This,dwOption,pBuffer,pcbBuf)

#define IHtmlLoadOptions_SetOption(This,dwOption,pBuffer,cbBuf)	\
    (This)->lpVtbl -> SetOption(This,dwOption,pBuffer,cbBuf)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHtmlLoadOptions_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_optary_0083 */
/* [local] */ 

#endif


extern RPC_IF_HANDLE __MIDL_itf_optary_0083_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_optary_0083_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\outputq.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this source code is subject to the terms of the Microsoft
// premium shared source license agreement under which you licensed
// this source code. If you did not accept the terms of the license
// agreement, you are not authorized to use this source code.
// For the terms of the license, please see the license agreement
// signed by you and Microsoft.
// THE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//
//--------------------------------------------------------------------------;

//
//  outputq.h
//
//  Defines the COutputQueue class
//
//  Makes a queue of samples and sends them
//  to an output pin
//
//  The class will optionally send the samples to the pin directly
//
//

#ifndef _OUTPUTQ_H_
#define _OUTPUTQ_H_

#if (_MSC_VER >= 1000)
#pragma once
#endif // (_MSC_VER >= 1000)

typedef CGenericList<IMediaSample> CSampleList;

class COutputQueue : public CCritSec
{
public:
    //  Constructor
    COutputQueue(IPin      *pInputPin,          //  Pin to send stuff to
                 HRESULT   *phr,                //  'Return code'
                 BOOL       bAuto = TRUE,       //  Ask pin if blocks
                 BOOL       bQueue = TRUE,      //  Send through queue (ignored if
                                                //  bAuto set)
                 LONG       lBatchSize = 1,     //  Batch
                 BOOL       bBatchExact = FALSE,//  Batch exactly to BatchSize
                 LONG       lListSize =         //  Likely number in the list
                                DEFAULTCACHE,
                 DWORD      dwPriority =        //  Priority of thread to create
                                THREAD_PRIORITY_NORMAL
                );
    ~COutputQueue();

    // enter flush state - discard all data
    void BeginFlush();      // Begin flushing samples

    // re-enable receives (pass this downstream)
    void EndFlush();        // Complete flush of samples - downstream
                            // pin guaranteed not to block at this stage

    void EOS();             // Call this on End of stream

    void SendAnyway();      // Send batched samples anyway (if bBatchExact set)

    void NewSegment(
            REFERENCE_TIME tStart,
            REFERENCE_TIME tStop,
            double dRate);

    HRESULT Receive(IMediaSample *pSample);

    // do something with these media samples
    HRESULT ReceiveMultiple (
        IMediaSample **pSamples,
        long nSamples,
        long *nSamplesProcessed);

    void Reset();           // Reset m_hr ready for more data

    //  See if its idle or not
    BOOL IsIdle();

protected:
    static DWORD WINAPI InitialThreadProc(LPVOID pv);
    DWORD ThreadProc();
    BOOL  IsQueued()
    {
        return m_List != NULL;
    };

    //  The critical section MUST be held when this is called
    void QueueSample(IMediaSample *pSample);

    BOOL IsSpecialSample(IMediaSample *pSample)
    {
        return (DWORD_PTR)pSample > (DWORD_PTR)(LONG_PTR)(-16);
    };

    //  Remove and Release() batched and queued samples
    void FreeSamples();

    //  Notify the thread there is something to do
    void NotifyThread();


protected:
    //  Queue 'messages'
    #define SEND_PACKET      ((IMediaSample *)(LONG_PTR)(-2))  // Send batch
    #define EOS_PACKET       ((IMediaSample *)(LONG_PTR)(-3))  // End of stream
    #define RESET_PACKET     ((IMediaSample *)(LONG_PTR)(-4))  // Reset m_hr
    #define NEW_SEGMENT      ((IMediaSample *)(LONG_PTR)(-5))  // send NewSegment

    // new segment packet is always followed by one of these
    struct NewSegmentPacket {
        REFERENCE_TIME tStart;
        REFERENCE_TIME tStop;
        double dRate;
    };

    // Remember input stuff
    IPin          * const m_pPin;
    IMemInputPin  *       m_pInputPin;
    BOOL            const m_bBatchExact;
    LONG            const m_lBatchSize;

    CSampleList   *       m_List;
    HANDLE                m_hSem;
    CAMEvent                m_evFlushComplete;
    HANDLE                m_hThread;
    IMediaSample  **      m_ppSamples;
    LONG                  m_nBatched;

    //  Wait optimization
    LONG                  m_lWaiting;
    //  Flush synchronization
    BOOL                  m_bFlushing;
    BOOL                  m_bFlushed;

    //  Terminate now
    BOOL                  m_bTerminate;

    //  Send anyway flag for batching
    BOOL                  m_bSendAnyway;

    //  Deferred 'return code'
    HRESULT volatile      m_hr;
};

#endif // _OUTPUTQ_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\packoff.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/*++


Module Name:

    packoff.h

Abstract:

    This file turns packing of structures off.  (That is, it enables
    automatic alignment of structure fields.)  An include file is needed
    because various compilers do this in different ways.

    packoff.h is the complement to packon.h.  An inclusion of packoff.h
    MUST ALWAYS be preceded by an inclusion of packon.h, in one-to-one
    correspondence.

--*/

#if ! (defined(lint) || defined(_lint))

#ifndef VXD
#if i386 || defined(UNDER_CE)
#pragma warning(disable:4103)
#endif
#endif
#pragma pack()                  // x86, MS compiler; MIPS, MIPS compiler
#endif // ! (defined(lint) || defined(_lint))
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\perhist.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//

#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 5.03.0286 */
/* at Mon Jan 22 12:15:34 2007
 */
/* Compiler settings for ..\perhist.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32 (32b run), ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __perhist_h__
#define __perhist_h__

/* Forward Declarations */ 

#ifndef __IPersistHistory_FWD_DEFINED__
#define __IPersistHistory_FWD_DEFINED__
typedef interface IPersistHistory IPersistHistory;
#endif 	/* __IPersistHistory_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"
#include "oleidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/* interface __MIDL_itf_perhist_0000 */
/* [local] */ 

//=--------------------------------------------------------------------------=
// perhist.h
//=--------------------------------------------------------------------------=
// (C) Copyright 1995-1998 Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=

#pragma comment(lib,"uuid.lib")

//---------------------------------------------------------------------------=
// IPersistHistory Interface.


#ifndef _LPPERSISTHISTORY_DEFINED
#define _LPPERSISTHISTORY_DEFINED


extern RPC_IF_HANDLE __MIDL_itf_perhist_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_perhist_0000_v0_0_s_ifspec;

#ifndef __IPersistHistory_INTERFACE_DEFINED__
#define __IPersistHistory_INTERFACE_DEFINED__

/* interface IPersistHistory */
/* [unique][uuid][object] */ 

typedef /* [unique] */ IPersistHistory __RPC_FAR *LPPERSISTHISTORY;


EXTERN_C const IID IID_IPersistHistory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91A565C1-E38F-11d0-94BF-00A0C9055CBF")
    IPersistHistory : public IPersist
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE LoadHistory( 
            /* [in] */ IStream __RPC_FAR *pStream,
            /* [in] */ IBindCtx __RPC_FAR *pbc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SaveHistory( 
            /* [in] */ IStream __RPC_FAR *pStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPositionCookie( 
            /* [in] */ DWORD dwPositioncookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPositionCookie( 
            /* [out] */ DWORD __RPC_FAR *pdwPositioncookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPersistHistoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPersistHistory __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPersistHistory __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPersistHistory __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetClassID )( 
            IPersistHistory __RPC_FAR * This,
            /* [out] */ CLSID __RPC_FAR *pClassID);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *LoadHistory )( 
            IPersistHistory __RPC_FAR * This,
            /* [in] */ IStream __RPC_FAR *pStream,
            /* [in] */ IBindCtx __RPC_FAR *pbc);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SaveHistory )( 
            IPersistHistory __RPC_FAR * This,
            /* [in] */ IStream __RPC_FAR *pStream);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetPositionCookie )( 
            IPersistHistory __RPC_FAR * This,
            /* [in] */ DWORD dwPositioncookie);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPositionCookie )( 
            IPersistHistory __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwPositioncookie);
        
        END_INTERFACE
    } IPersistHistoryVtbl;

    interface IPersistHistory
    {
        CONST_VTBL struct IPersistHistoryVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPersistHistory_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPersistHistory_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPersistHistory_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPersistHistory_GetClassID(This,pClassID)	\
    (This)->lpVtbl -> GetClassID(This,pClassID)


#define IPersistHistory_LoadHistory(This,pStream,pbc)	\
    (This)->lpVtbl -> LoadHistory(This,pStream,pbc)

#define IPersistHistory_SaveHistory(This,pStream)	\
    (This)->lpVtbl -> SaveHistory(This,pStream)

#define IPersistHistory_SetPositionCookie(This,dwPositioncookie)	\
    (This)->lpVtbl -> SetPositionCookie(This,dwPositioncookie)

#define IPersistHistory_GetPositionCookie(This,pdwPositioncookie)	\
    (This)->lpVtbl -> GetPositionCookie(This,pdwPositioncookie)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPersistHistory_LoadHistory_Proxy( 
    IPersistHistory __RPC_FAR * This,
    /* [in] */ IStream __RPC_FAR *pStream,
    /* [in] */ IBindCtx __RPC_FAR *pbc);


void __RPC_STUB IPersistHistory_LoadHistory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistHistory_SaveHistory_Proxy( 
    IPersistHistory __RPC_FAR * This,
    /* [in] */ IStream __RPC_FAR *pStream);


void __RPC_STUB IPersistHistory_SaveHistory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistHistory_SetPositionCookie_Proxy( 
    IPersistHistory __RPC_FAR * This,
    /* [in] */ DWORD dwPositioncookie);


void __RPC_STUB IPersistHistory_SetPositionCookie_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistHistory_GetPositionCookie_Proxy( 
    IPersistHistory __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwPositioncookie);


void __RPC_STUB IPersistHistory_GetPositionCookie_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPersistHistory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_perhist_0082 */
/* [local] */ 

#endif


extern RPC_IF_HANDLE __MIDL_itf_perhist_0082_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_perhist_0082_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\perftags.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//
//+------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (C) Microsoft Corporation, 1997-1998
//
//  File:       perftags.h
//
//  Contents:   External include file for perftags.dll
//
//-------------------------------------------------------------------------

#ifdef PERFTAGS

typedef int  PERFTAG;
int PerfRegister(
    __in PSTR szTag,
    __in PSTR szOwner,
    __in PSTR szDescrip
    );
void __cdecl PerfLogFn(int tag, void * pvObj, const char * pchFmt, ...);
void         PerfDump();
void         PerfClear();
void         PerfTags();
#define      IsPerfEnabled(tag) (*(BOOL *)tag)
#define      PerfTag(tag, szOwner, szDescrip) PERFTAG tag(PerfRegister(#tag, szOwner, szDescrip));
#define      PerfExtern(tag) extern PERFTAG tag;
#define      PerfLog(tag,pv,f) IsPerfEnabled(tag) ? PerfLogFn(tag,pv,f) : 0
#define      PerfLog1(tag,pv,f,a1) IsPerfEnabled(tag) ? PerfLogFn(tag,pv,f,a1) : 0
#define      PerfLog2(tag,pv,f,a1,a2) IsPerfEnabled(tag) ? PerfLogFn(tag,pv,f,a1,a2) : 0
#define      PerfLog3(tag,pv,f,a1,a2,a3) IsPerfEnabled(tag) ? PerfLogFn(tag,pv,f,a1,a2,a3) : 0
#define      PerfLog4(tag,pv,f,a1,a2,a3,a4) IsPerfEnabled(tag) ? PerfLogFn(tag,pv,f,a1,a2,a3,a4) : 0
#define      PerfLog5(tag,pv,f,a1,a2,a3,a4,a5) IsPerfEnabled(tag) ? PerfLogFn(tag,pv,f,a1,a2,a3,a4,a5) : 0
#define      PerfLog6(tag,pv,f,a1,a2,a3,a4,a5,a6) IsPerfEnabled(tag) ? PerfLogFn(tag,pv,f,a1,a2,a3,a4,a5,a6) : 0
#define      PerfLog7(tag,pv,f,a1,a2,a3,a4,a5,a6,a7) IsPerfEnabled(tag) ? PerfLogFn(tag,pv,f,a1,a2,a3,a4,a5,a6,a7) : 0
#define      PerfLog8(tag,pv,f,a1,a2,a3,a4,a5,a6,a7,a8) IsPerfEnabled(tag) ? PerfLogFn(tag,pv,f,a1,a2,a3,a4,a5,a6,a7,a8) : 0
#define      PerfLog9(tag,pv,f,a1,a2,a3,a4,a5,a6,a7,a8,a9) IsPerfEnabled(tag) ? PerfLogFn(tag,pv,f,a1,a2,a3,a4,a5,a6,a7,a8,a9) : 0

#else

#define      PerfTags()
#define      PerfTag(tag, szOwner, szDescrip)
#define      PerfExtern(tag)
#define      PerfDump()
#define      PerfClear()
#define      IsPerfEnabled(tag) FALSE
#define      PerfLog(tag,pv,f)
#define      PerfLog1(tag,pv,f,a1)
#define      PerfLog2(tag,pv,f,a1,a2)
#define      PerfLog3(tag,pv,f,a1,a2,a3)
#define      PerfLog4(tag,pv,f,a1,a2,a3,a4)
#define      PerfLog5(tag,pv,f,a1,a2,a3,a4,a5)
#define      PerfLog6(tag,pv,f,a1,a2,a3,a4,a5,a6)
#define      PerfLog7(tag,pv,f,a1,a2,a3,a4,a5,a6,a7)
#define      PerfLog8(tag,pv,f,a1,a2,a3,a4,a5,a6,a7,a8)
#define      PerfLog9(tag,pv,f,a1,a2,a3,a4,a5,a6,a7,a8,a9)

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\permdlg.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//

#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 5.03.0286 */
/* at Mon Jan 22 12:15:36 2007
 */
/* Compiler settings for ..\permdlg.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32 (32b run), ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __permdlg_h__
#define __permdlg_h__

/* Forward Declarations */ 

#ifndef __IJavaZonePermissionEditor_FWD_DEFINED__
#define __IJavaZonePermissionEditor_FWD_DEFINED__
typedef interface IJavaZonePermissionEditor IJavaZonePermissionEditor;
#endif 	/* __IJavaZonePermissionEditor_FWD_DEFINED__ */


#ifndef __JavaRuntimeConfiguration_FWD_DEFINED__
#define __JavaRuntimeConfiguration_FWD_DEFINED__

#ifdef __cplusplus
typedef class JavaRuntimeConfiguration JavaRuntimeConfiguration;
#else
typedef struct JavaRuntimeConfiguration JavaRuntimeConfiguration;
#endif /* __cplusplus */

#endif 	/* __JavaRuntimeConfiguration_FWD_DEFINED__ */


/* header files for imported files */
#include "urlmon.h"

#ifdef __cplusplus
extern "C"{
#endif 

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/* interface __MIDL_itf_permdlg_0000 */
/* [local] */ 

EXTERN_C const CLSID CLSID_JavaRuntimeConfiguration;


extern RPC_IF_HANDLE __MIDL_itf_permdlg_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_permdlg_0000_v0_0_s_ifspec;

#ifndef __IJavaZonePermissionEditor_INTERFACE_DEFINED__
#define __IJavaZonePermissionEditor_INTERFACE_DEFINED__

/* interface IJavaZonePermissionEditor */
/* [unique][uuid][object] */ 

typedef 
enum _JAVADISPLAYMODES
    {	JAVADISPLAY_DEFAULT	= 0,
	JAVADISPLAY_FULL	= 1,
	JAVAEDIT	= 2
    }	JAVADISPLAYMODES;


EXTERN_C const IID IID_IJavaZonePermissionEditor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("85347F8A-C8B7-11d0-8823-00C04FB67C84")
    IJavaZonePermissionEditor : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ShowUI( 
            /* [in] */ HWND phwnd,
            /* [in] */ DWORD dwFlags,
            /* [in] */ DWORD dwMode,
            /* [in] */ URLZONEREG urlZoneReg,
            /* [in] */ DWORD dwZone,
            /* [in] */ DWORD dwPerms,
            /* [in] */ IUnknown __RPC_FAR *pManager) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IJavaZonePermissionEditorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IJavaZonePermissionEditor __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IJavaZonePermissionEditor __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IJavaZonePermissionEditor __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ShowUI )( 
            IJavaZonePermissionEditor __RPC_FAR * This,
            /* [in] */ HWND phwnd,
            /* [in] */ DWORD dwFlags,
            /* [in] */ DWORD dwMode,
            /* [in] */ URLZONEREG urlZoneReg,
            /* [in] */ DWORD dwZone,
            /* [in] */ DWORD dwPerms,
            /* [in] */ IUnknown __RPC_FAR *pManager);
        
        END_INTERFACE
    } IJavaZonePermissionEditorVtbl;

    interface IJavaZonePermissionEditor
    {
        CONST_VTBL struct IJavaZonePermissionEditorVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IJavaZonePermissionEditor_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IJavaZonePermissionEditor_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IJavaZonePermissionEditor_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IJavaZonePermissionEditor_ShowUI(This,phwnd,dwFlags,dwMode,urlZoneReg,dwZone,dwPerms,pManager)	\
    (This)->lpVtbl -> ShowUI(This,phwnd,dwFlags,dwMode,urlZoneReg,dwZone,dwPerms,pManager)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IJavaZonePermissionEditor_ShowUI_Proxy( 
    IJavaZonePermissionEditor __RPC_FAR * This,
    /* [in] */ HWND phwnd,
    /* [in] */ DWORD dwFlags,
    /* [in] */ DWORD dwMode,
    /* [in] */ URLZONEREG urlZoneReg,
    /* [in] */ DWORD dwZone,
    /* [in] */ DWORD dwPerms,
    /* [in] */ IUnknown __RPC_FAR *pManager);


void __RPC_STUB IJavaZonePermissionEditor_ShowUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IJavaZonePermissionEditor_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  HWND_UserSize(     unsigned long __RPC_FAR *, unsigned long            , HWND __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HWND_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HWND __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  HWND_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, HWND __RPC_FAR * ); 
void                      __RPC_USER  HWND_UserFree(     unsigned long __RPC_FAR *, HWND __RPC_FAR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\pciprop.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/*++

Copyright (c) 2005 Microsoft Corporation

Module Name:

    pciprop.h

Abstract:

    This file contains custom property definitions for a PCI root bus and a PCI
    device.

--*/

#pragma once

#ifndef _PCIPROP_
#define _PCIPROP_

//
// The GUID {D817FC28-793E-4b9e-9970-469D8BE63073} is a seed for all properties
// defined for a root bus.
//

#define DEFINE_PCI_ROOT_BUS_DEVPKEY(_DevPkeyName, _Pid) \
    DEFINE_DEVPROPKEY((_DevPkeyName), 0xd817fc28, 0x793e, 0x4b9e, 0x99, 0x70, 0x46, 0x9d, 0x8b, 0xe6, 0x30, 0x73, (_Pid))

//
// This property describes the secondary side characteristics of a root bus.
// The values for this property field are interpreted as below:
//

#define DevProp_PciRootBus_SecondaryInterface_PciConventional       0
#define DevProp_PciRootBus_SecondaryInterface_PciXMode1             1
#define DevProp_PciRootBus_SecondaryInterface_PciXMode2             2
#define DevProp_PciRootBus_SecondaryInterface_PciExpress            3

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_SecondaryInterface, 1); //DEVPROP_TYPE_UINT32

//
// This field is valid for conventional PCI and PCI-X host bridges.
// The values for this property field are interpreted as below:
//

#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_Conventional_33Mhz           0
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_Conventional_66Mhz           1
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_66Mhz                2
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_100Mhz               3
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_133Mhz               4
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_66Mhz            5
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_100Mhz           6
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_133Mhz           7
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_66Mhz            8
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_100Mhz           9
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_133Mhz          10
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_66Mhz           11
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_100Mhz          12
#define DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_133Mhz          13

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_CurrentSpeedAndMode, 2); //DEVPROP_TYPE_UINT32

//
// This field is valid for conventional PCI and PCI-X host bridges.
// The values for this property field are interpreted as below:
//

#define DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_Conventional_33Mhz       1
#define DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_Conventional_66Mhz       2
#define DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_66Mhz                  4
#define DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_133Mhz                 8
#define DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_266Mhz                16
#define DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_533Mhz                32

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_SupportedSpeedsAndModes, 3); //DEVPROP_TYPE_UINT32

//
// This is boolean indicating if the host bridge is capable of forwarding
// Device ID Message transactions.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_DeviceIDMessagingCapable, 4); // DEVPROP_TYPE_BOOLEAN

//
// Provides the width of a root bus interface.
//

#define DevProp_PciRootBus_BusWidth_32Bits      0
#define DevProp_PciRootBus_BusWidth_64Bits      1

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_SecondaryBusWidth, 5); //DEVPROP_TYPE_UINT32

//
// This is a boolean indicating that an extended config space is available
// on the secondary side of the root bus.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_ExtendedConfigAvailable, 6); // DEVPROP_TYPE_BOOLEAN

//
// This is a boolean indicating an operating system support for an extended
// PCI config op region.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport, 7); // DEVPROP_TYPE_BOOLEAN

//
// This is a boolean indicating an operating system support for ASPM.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_ASPMSupport, 8); // DEVPROP_TYPE_BOOLEAN

//
// This is a boolean indicating an operating system support for clock power
// management.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_ClockPowerManagementSupport, 9); // DEVPROP_TYPE_BOOLEAN

//
// This is a boolean indicating an operating system support for PCI Segments.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_PCISegmentGroupsSupport, 10); // DEVPROP_TYPE_BOOLEAN

//
// This is a boolean indicating an operating system support for Message
// Signaled Interrupts.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_MSISupport, 11); // DEVPROP_TYPE_BOOLEAN

//
// This is a boolean indicating that the firmware has granted control of native
// hot plug interrupts to the operating system.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl, 12);  // DEVPROP_TYPE_BOOLEAN

//
// This is a boolean indicating that the firmware has granted control of native
// SHPC to the operating system.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_SHPCNativeHotPlugControl, 13);   // DEVPROP_TYPE_BOOLEAN

//
// This is a boolean indicating that the firmware has granted control over
// native PME interrupts to the operating system.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_PCIExpressNativePMEControl, 14); // DEVPROP_TYPE_BOOLEAN

//
// This is a boolean indicating that the firmware has granted control over
// AER to the operating system.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_PCIExpressAERControl, 15); // DEVPROP_TYPE_BOOLEAN

//
// This is a boolean indicating that the firmware has granted control over the
// PCI Express capability to the operating system.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_PCIExpressCapabilityControl, 16); // DEVPROP_TYPE_BOOLEAN

//
// This is a boolean indicating that the operating system is controlling PCI
// Express features natively.  Generally this will be a reflection of the
// individual feature controls granted by the firmware and exposed by properties
// above, but the operating system might override the firmware.  The final
// control disposition is reflected here.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_NativePciExpressControl, 17); // DEVPROP_TYPE_BOOLEAN

//
// This is a boolean indicating that the system is configured to support MSI.
// If this is FALSE no message-signaled interrupts will be allocated to devices
// on this system, even if the operating system supports MSI.
//

DEFINE_PCI_ROOT_BUS_DEVPKEY(DEVPKEY_PciRootBus_SystemMsiSupport, 18); // DEVPROP_TYPE_BOOLEAN


//
// The GUID {3AB22E31-8264-4b4e-9AF5-A8D2D8E33E62} is a seed for all properties
// defined for a PCI device.
//

#define DEFINE_PCI_DEVICE_DEVPKEY(_DevPkeyName, _Pid) \
   DEFINE_DEVPROPKEY((_DevPkeyName), 0x3ab22e31, 0x8264, 0x4b4e, 0x9a, 0xf5, 0xa8, 0xd2, 0xd8, 0xe3, 0x3e, 0x62, (_Pid))

//
// This property is defined to display the type of PCI device. The possible
// values are shown below.
//

#define DevProp_PciDevice_DeviceType_PciConventional                            0
#define DevProp_PciDevice_DeviceType_PciX                                       1
#define DevProp_PciDevice_DeviceType_PciExpressEndpoint                         2
#define DevProp_PciDevice_DeviceType_PciExpressLegacyEndpoint                   3
#define DevProp_PciDevice_DeviceType_PciExpressRootComplexIntegratedEndpoint    4
#define DevProp_PciDevice_DeviceType_PciExpressTreatedAsPci                     5

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_DeviceType, 1);

//
// This property is valid for conventional PCI or PCI-X devices.
// For conventional PCI devices, the speed/mode is described by the following
// fields.
//

#define DevProp_PciDevice_CurrentSpeedAndMode_Pci_Conventional_33MHz        0
#define DevProp_PciDevice_CurrentSpeedAndMode_Pci_Conventional_66MHz        1

//
// For PCI-X devices, the speed/mode is encoded in the following fashion.
//

#define DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode_Conventional_Pci  0x0
#define DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_66Mhz            0x1
#define DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_100Mhz           0x2
#define DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_133MHZ           0x3
#define DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_66MHz        0x9
#define DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_100MHz       0xA
#define DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_133MHz       0xB
#define DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_66MHz        0xD
#define DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_100MHz       0xE
#define DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_133MHz       0xF

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_CurrentSpeedAndMode, 2);

//
// The BaseClass, SubClass and ProgIf fields are valid for all PCI devices.
//

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_BaseClass, 3);

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_SubClass, 4);

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_ProgIf, 5);

//
// This property describes the current payload size in the transaction layer
// for a PCI Express device. The encodings for this field are described below.
//

#define DevProp_PciExpressDevice_PayloadOrRequestSize_128Bytes          0
#define DevProp_PciExpressDevice_PayloadOrRequestSize_256Bytes          1
#define DevProp_PciExpressDevice_PayloadOrRequestSize_512Bytes          2
#define DevProp_PciExpressDevice_PayloadOrRequestSize_1024Bytes         3
#define DevProp_PciExpressDevice_PayloadOrRequestSize_2048Bytes         4
#define DevProp_PciExpressDevice_PayloadOrRequestSize_4096Bytes         5

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_CurrentPayloadSize, 6);

//
// This property describes the maximum payload size supported by an express
// device/function. The encodings are described above.
//

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_MaxPayloadSize, 7);

//
// This property describes the maximum read request size for an express device.
// The encoding for this field are given above.
//

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_MaxReadRequestSize, 8);

//
// This property is applicable to an express device with an express link. It
// describes the current link speed for the device. The encodings are defined
// as follows.
//

#define DevProp_PciExpressDevice_LinkSpeed_TwoAndHalf_Gbps      1

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_CurrentLinkSpeed, 9);

//
// This property is applicable to an express device with an express link. It
// describes the current link width whose encoding is as follows.
//

#define DevProp_PciExpressDevice_LinkWidth_By_1             1
#define DevProp_PciExpressDevice_LinkWidth_By_2             2
#define DevProp_PciExpressDevice_LinkWidth_By_4             4
#define DevProp_PciExpressDevice_LinkWidth_By_8             8
#define DevProp_PciExpressDevice_LinkWidth_By_12           12
#define DevProp_PciExpressDevice_LinkWidth_By_16           16
#define DevProp_PciExpressDevice_LinkWidth_By_32           32

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_CurrentLinkWidth, 10);

//
// This property describes the maximum link speed of an express link for an
// express device. The encodings for this field are:
//

#define DevProp_PciExpressDevice_LinkSpeed_TwoAndHalf_Gbps      1

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_MaxLinkSpeed, 11);

//
// This property describes the maximum link width implemented by an express
// link for an express devce. The encodings are same as described above.
//

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_MaxLinkWidth, 12);

//
// This property describes the specification version to which an express device
// was built.  The encodings for this field are:
//

#define DevProp_PciExpressDevice_Spec_Version_10        1
#define DevProp_PciExpressDevice_Spec_Version_11        2

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_ExpressSpecVersion, 13);

//
// This property describes the hardware support for interrupts on the device.
// It is a bitmask of supported interrupt types, with the following values:
//

#define DevProp_PciDevice_InterruptType_LineBased       1
#define DevProp_PciDevice_InterruptType_Msi             2
#define DevProp_PciDevice_InterruptType_MsiX            4

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_InterruptSupport, 14);

//
// This property describes the number of message interrupts a device supports
// in hardware.  This property is only valid if the device supports message
// interrupts.
//

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_InterruptMessageMaximum, 15);

//
// This property describes the number of Base Address Registers of various types
// supported by the device hardware.  The property data is a 32 bit value
// interpreted by the following macros:
//

#define DevProp_PciDevice_IoBarCount(_PropertyData)                             ((_PropertyData) & 0xFF)
#define DevProp_PciDevice_NonPrefetchable_MemoryBarCount(_PropertyData)         (((_PropertyData) >> 8) & 0xFF)
#define DevProp_PciDevice_32BitPrefetchable_MemoryBarCount(_PropertyData)       (((_PropertyData) >> 16) & 0xFF)
#define DevProp_PciDevice_64BitPrefetchable_MemoryBarCount(_PropertyData)       (((_PropertyData) >> 24) & 0xFF)

DEFINE_PCI_DEVICE_DEVPKEY(DEVPKEY_PciDevice_BarTypes, 16);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\pcibus.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/* File:    PCIbus.h
 *
 * Purpose: PCIbus driver definitions
 *
 */

#ifndef _PCIBUS_H_
#define _PCIBUS_H_

#include <PCIrsrc.h>

#define MAX_LOAD_ORDER 255

#define PCI_MAX_REG_NAME 256    // Maximum length of a registry naem
#define PCI_MAX_REG_DATA 512    // Maximum length of registry data value

#define PCI_MAX_REG_LIST 16     // Maximum list size for multi_sz registry value

#define PCIBUS_INSTANCE_KEYNAME TEXT("Instance")
#define PCIBUS_TEMPLATE_KEYNAME TEXT("Template")

#define PCIBUS_CLASS_VALNAME TEXT("Class")
#define PCIBUS_CLASS_VALTYPE REG_DWORD

#define PCIBUS_SUBCLASS_VALNAME TEXT("SubClass")
#define PCIBUS_SUBCLASS_VALTYPE REG_DWORD

#define PCIBUS_PROGIF_VALNAME TEXT("ProgIF")
#define PCIBUS_PROGIF_VALTYPE REG_DWORD

#define PCIBUS_VENDORID_VALNAME TEXT("VendorID")
#define PCIBUS_VENDORID_VALTYPE REG_DWORD

#define PCIBUS_DEVICEID_VALNAME TEXT("DeviceID")
#define PCIBUS_DEVICEID_VALTYPE REG_DWORD

#define PCIBUS_REVISIONID_VALNAME TEXT("RevisionID")
#define PCIBUS_REVISIONID_VALTYPE REG_DWORD

#define PCIBUS_SUBVENDORID_VALNAME TEXT("SubVendorID")
#define PCIBUS_SUBVENDORID_VALTYPE REG_DWORD

#define PCIBUS_SUBSYSTEMID_VALNAME TEXT("SubSystemID")
#define PCIBUS_SUBSYSTEMID_VALTYPE REG_DWORD

#define PCIBUS_IFCTYPE_VALNAME TEXT("InterfaceType")
#define PCIBUS_IFCTYPE_VALTYPE REG_DWORD

#define PCIBUS_BUSNUMBER_VALNAME TEXT("BusNumber")
#define PCIBUS_BUSNUMBER_VALTYPE REG_DWORD

#define PCIBUS_DEVICENUMBER_VALNAME TEXT("DeviceNumber")
#define PCIBUS_DEVICENUMBER_VALTYPE REG_DWORD

#define PCIBUS_FUNCTIONNUMBER_VALNAME TEXT("FunctionNumber")
#define PCIBUS_FUNCTIONNUMBER_VALTYPE REG_DWORD

#define PCIBUS_LOGICALLOC_VALNAME TEXT("LogicalLoc")
#define PCIBUS_LOGICALLOC_VALTYPE REG_BINARY

#define PCIBUS_PHYSICALLOC_VALNAME TEXT("PhysicalLoc")
#define PCIBUS_PHYSICALLOC_VALTYPE REG_BINARY

#define PCIBUS_MEMBASE_VALNAME TEXT("MemBase")
#define PCIBUS_MEMBASE_VALTYPE REG_DWORD

#define PCIBUS_MEMLEN_VALNAME TEXT("MemLen")
#define PCIBUS_MEMLEN_VALTYPE REG_DWORD

#define PCIBUS_IOBASE_VALNAME TEXT("IoBase")
#define PCIBUS_IOBASE_VALTYPE REG_DWORD

#define PCIBUS_IOLEN_VALNAME TEXT("IoLen")
#define PCIBUS_IOLEN_VALTYPE REG_DWORD

#define PCIBUS_IRQ_VALNAME TEXT("Irq")
#define PCIBUS_IRQ_VALTYPE REG_DWORD

#define PCIBUS_SYSINTR_VALNAME TEXT("SysIntr")
#define PCIBUS_SYSINTR_VALTYPE REG_DWORD

#define PCIBUS_INSTANCEINDEX_VALNAME TEXT("InstanceIndex")
#define PCIBUS_INSTANCEINDEX_VALTYPE REG_DWORD

#define PCIBUS_NOCONFIG_VALNAME TEXT("NoConfig")
#define PCIBUS_NOCONFIG_VALTYPE REG_DWORD

#define PCIBUS_CONFIGENTRY_VALNAME TEXT("ConfigEntry")
#define PCIBUS_CONFIGENTRY_VALTYPE REG_SZ

#define PCIBUS_CONFIGDLL_VALNAME TEXT("ConfigDll")
#define PCIBUS_CONFIGDLL_VALTYPE REG_SZ

#define PCIBUS_COMMAND_VALNAME TEXT("Command")
#define PCIBUS_COMMAND_VALTYPE REG_DWORD

#define PCIBUS_BRIDGECONTROL_VALNAME TEXT("BridgeControl")
#define PCIBUS_BRIDGECONTROL_VALTYPE REG_DWORD

#define PCIBUS_LATENCY_VALNAME TEXT("Latency")
#define PCIBUS_LATENCY_VALTYPE REG_DWORD

#define PCIBUS_SECONDARYLATENCY_VALNAME TEXT("SecondaryLatency")
#define PCIBUS_SECONDARYLATENCY_VALTYPE REG_DWORD

#define PCIBUS_MATCH_NONE 0
#define PCIBUS_MATCH_ALL 8

//
// Type definitions
//
typedef struct _PCI_RSRC_LIST {
    DWORD Num;
    DWORD Reg[PCI_TYPE0_ADDRESSES];
} PCI_RSRC_LIST, *PPCI_RSRC_LIST;

typedef struct _PCI_PHYSICAL_LOC {
    DWORD Depth;
    BYTE Tree[PCI_MAX_BUS + 1];
} PCI_PHYSICAL_LOC, *PPCI_PHYSICAL_LOC;

typedef struct _PCI_DEV_INFO {
    WCHAR RegPath[DEVKEY_LEN];
    DWORD Bus;
    DWORD Device;
    DWORD Function;
    PPCI_COMMON_CONFIG Cfg;
    PCI_RSRC_LIST MemBase;
    PCI_RSRC_LIST MemLen;
    PCI_RSRC_LIST IoBase;
    PCI_RSRC_LIST IoLen;
    BOOL Matched;
    BOOL Configure;
    BOOL ConfigEntry;
    WCHAR ConfigEntryName[DEVENTRY_LEN];
    WCHAR ConfigDllName[DEVDLL_LEN];
    WCHAR DllName[DEVDLL_LEN];
    DWORD DevFlags;
    PPCI_CFG_INFO ConfigInfo;
    DWORD Command;
    DWORD BridgeControl;
    DWORD Latency;
    DWORD SecondaryLatency;
} PCI_DEV_INFO, *PPCI_DEV_INFO; 

//
// Prototype for optional ConfigEntry entry point
//
typedef DWORD (*PFN_CONFIGENTRY)(DWORD, struct _PCI_DEV_INFO *, PPCI_RSRC, PPCI_RSRC, PDWORD, PDWORD);

#endif // _PCIBUS_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\phkeypad.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//

#ifndef _PHKEYPAD_H_
#define _PHKEYPAD_H_

#if (_MSC_VER >= 1000)
#pragma once
#endif

#include <objbase.h>

#ifdef __cplusplus
extern "C" {
#endif

/// <file_topic_scope tref="Dial_Pad" />
/// <topic name="Dial_Pad" displayname="Dial Pad">
///   <topic_scope tref="Phone" />
///   <summary>
///     Sim Security, Call Progress, and Smartdial all host an on-screen dial pad
///     control on touch devices.  This describes the extensibility support for
///     overriding the dialpad in one or more locations with a custom dial pad.
///   </summary>
/// </topic>

/// <summary>
///   Represents which application is hosting the
///   DialPad. Based on this enum value, <see cref="IDialPadCanvas" /> 
///   implementation can provide customization of the dialpad,
///   on an app by app basis. An example would be that the
///   <see cref="IDialPadCanvas" /> customization can show round buttons 
///   layed out in a circular fashion in dialer, but basic square 
///   buttons layed out in a rectangular fashion
///   in callprogress for entering dtmf or in the sim security 
///   pin entry screen.
/// </summary>
/// <seealso cref="IDialPadCanvas" /> 
/// <seealso cref="IDialPadHost" />
typedef enum DIALPAD_HOST
{
    /// <summary>
    ///   Non phone application is initiating the dialpad.
    /// </summary>
    DIALPAD_HOST_UNKNOWN = 0,

    /// <summary>
    ///   Sim security screen is initiating the dialpad.
    /// </summary>
    DIALPAD_HOST_SIMSEC = 1,

    /// <summary>
    ///   Dialer is initiating the dialpad.
    /// </summary>
    DIALPAD_HOST_DIALER = 2,

    /// <summary>
    ///   Call progress screen is initiating the dialpad.
    /// </summary>
    DIALPAD_HOST_CALLPROGRESS = 3,

    /// <summary>
    ///   The dialpad is initiated during an emergency call.
    /// </summary>
    /// <remarks>
    ///   The emergency dialpad cannot be replaced.
    /// </remarks>
    DIALPAD_HOST_EMERGENCY = 4,

} DIALPAD_HOST;

#undef INTERFACE
#define INTERFACE IDialPadHost

/// <summary>
///   Adapter between the phone application and
///   dialpad UI, converting dialpad virtual keys
///   to keystrokes.  A DialPadCanvas is given a pointer
///   to the host during Initialization, which they
///   can then use to interact with the hosting application.
/// </summary>
DECLARE_INTERFACE_IID(IDialPadHost, "2B275E15-C9C7-47ea-B979-97DB6CDC926E")
{
    // *** IUnknown methods ***
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, __deref_out LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    
    /// <summary>
    ///  This method is called by the <see cref="IDialPadCanvas" />
    ///  implementation to simulate a keystroke or a virtual key. 
    ///  The key event is sent to the phone application that is hosting
    ///  the keypad.
    /// </summary>
    /// <param name="bVK">
    ///    Byte containing the virtual key code of the key to simulate.
    /// </param>
    /// <param name="dwFlags">
    /// Specifies the state of the key. The following are the possible values.
    /// These values can be used in combination.
    /// </param>
    /// <para>
    /// KEYEVENTF_KEYUP
    /// </para>
    /// <para>
    /// KEYEVENTF_SILENT
    /// </para>
    /// <returns>
    ///   <para>S_OK on success</para>
    ///   <para>E_FAIL otherwise</para>
    /// </returns>
    STDMETHOD(SendVirtualKey)(THIS_ BYTE bVK, DWORD dwFlags) PURE;

};

#undef INTERFACE
#define INTERFACE IDialPadCanvas

/// <summary>
///   Provides UI for the dialpad.  A custom implementation of this class can
///   be registered for one or more areas of the UI.
/// </summary>
DECLARE_INTERFACE_IID(IDialPadCanvas, "28E43963-E21C-4760-82C7-D80E49FCB123")
{
    // *** IUnknown methods ***
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS)  PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;
    
    /// <summary>
    ///  This method is called by the DialPad host when it 
    ///  creates the dialpad component.
    /// </summary>
    /// <param name="host">Tells the keypad instance where in the UI it is being hosted</param>
    /// <param name="hwndParent">Handle to which the dialpad window should be parented</param>
    /// <param name="prcHostArea">A pointer to a RECT that specifies the maximum area the keypad should occupy.</param>
    /// <param name="pIDialPadHost">A pointer to the host, which can be used to send virtual key presses.</param>
    /// <remarks>
    ///   Dialpad UI should be created in this function.
    ///   It should be made a child of the hwndParent.
    ///   Dialpad UI should be shown only when Show()
    ///   is called by the DialPad host.
    /// </remarks>
    STDMETHOD(Initialize)(THIS_ DIALPAD_HOST host,
                          HWND hwndParent, 
                          __in const RECT * prcHostArea, 
                          __in IDialPadHost * pIDialPadHost
                          ) PURE;

    /// <summary>
    ///   Tells the dialpad to show itself.
    /// </summary>
    /// <remarks>
    ///   This method is called when the device is unlocked and
    //    the dialpad needs to be displayed.
    //
    //    The WS_EX_ABOVESTARTUP extended window style should
    //    be disabled.
    /// </remarks>
    STDMETHOD(Show)(THIS) PURE;

    /// <summary>
    ///   Tells the dialpad to show itself with the extended
    ///   style WS_EX_ABOVESTARTUP applied.
    /// </summary>
    /// <remarks>
    ///   This method is called when the device is locked and
    ///   the dialpad is being requested to be displayed.
    ///
    ///   Enabling the WS_EX_ABOVESTARTUP extended window style
    ///   allows the dialpad to be accessible when the phone is 
    ///   locked. 
    ///
    ///   If this behavior is not desirable then this
    ///   method should simply call the Show() method. In this
    ///   case the dialpad will be displayed, but, will not be
    ///   able to be manipulated when the device is locked.
    /// </remarks>
    STDMETHOD(ShowAboveStartup)(THIS) PURE;

    /// <summary>
    ///   Tells the dialpad to hide itself.
    /// </summary>
    STDMETHOD(Hide)(THIS) PURE;

    /// <summary>
    ///   Tells the dialpad that system settings (such as orientation) have changed.
    /// </summary>
    /// <param name="prcHostArea">A pointer to a RECT that specifies the maximum area the keypad should occupy.</param>
    STDMETHOD(OnSettingsChange)(THIS_ __in const RECT * prcHostArea) PURE;

    /// <summary>
    ///   Gets the location and size of the dialpad.
    /// </summary>
    /// <param name="prcDialPadArea">A pointer to a RECT that receives the current location and size of the dialpad in hwndParent's client coordinates</param>
    STDMETHOD(GetCurrentBoundingRect)(THIS_ __out RECT *prcDialPadArea) PURE;

    /// <summary>
    ///   This method is called by the dialpad host prior to releasing the dialpad.
    /// </summary>
    STDMETHOD(Uninitialize)(THIS) PURE;
};

#ifdef __cplusplus
}
#endif // _PHKEYPAD_H_


#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\pcirsrc.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/*++

Module Name:

    PCIrsrc.h
--*/

#ifndef _PCIRSRC_H_
#define _PCIRSRC_H_




//
// ConfigEntry commands
//
#define PCIBUS_CONFIG_RSRC 0
#define PCIBUS_CONFIG_SET 1
#define PCIBUS_CONFIG_SIZE 2
#define PCIBUS_CONFIG_INIT 3

typedef struct _PCI_CFG_INFO {
    HMODULE hDll;
    PVOID ConfigEntryFn;
    struct _PCI_CFG_INFO *Next;
} PCI_CFG_INFO, *PPCI_CFG_INFO;

typedef struct _PCI_RSRC {
    DWORD Bus;
    DWORD Device;
    DWORD Function;
    DWORD Offset;
    DWORD Base;
    DWORD Size;
    BOOL Bridge;
    DWORD SecBus;
    BOOL Placed;
    PPCI_CFG_INFO ConfigInfo;
    struct _PCI_RSRC *Next;
    struct _PCI_RSRC *Prev;
} PCI_RSRC, *PPCI_RSRC;

#ifdef __cplusplus
extern "C" {
#endif
//
// Function prototypes
//

PPCI_RSRC
PCIRsrc_New(
    DWORD Bus,
    DWORD Device,
    DWORD Function,
    DWORD Offset,
    DWORD Base,
    DWORD Size,
    BOOL Bridge,
    DWORD SecBus,
    BOOL Placed,
    PPCI_CFG_INFO ConfigInfo
    );

void
PCIRsrc_Add(
    PPCI_RSRC Head,
    PPCI_RSRC Rsrc
    );

PPCI_RSRC
PCIRsrc_GetNext(
    PPCI_RSRC Head,
    DWORD Bus
    );

BOOL
PCIRsrc_Place(
    PPCI_RSRC Head,
    PPCI_RSRC Rsrc
    );

void
PCIRsrc_DelList(
    PPCI_RSRC Head
    );

void
PCIRsrc_PrintList(
    PPCI_RSRC Head
    );

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // _PCIRSRC_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\phone.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
#ifndef _PHONE_H_
#define _PHONE_H_

#if (_MSC_VER >= 1000)
#pragma once
#endif
#include <windows.h>
#include <phonecallserviceprov.h>
#include <pimstore.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WINCEOEM
#include <phonep.h>
#endif


typedef enum
{
    CALLERIDTYPE_UNAVAILABLE,
    CALLERIDTYPE_BLOCKED,
    CALLERIDTYPE_AVAILABLE
} CALLERIDTYPE;

typedef enum
{
    IOM_MISSED,
    IOM_INCOMING,
    IOM_OUTGOING
} IOM;

typedef enum
{ 
    CALLLOGSEEK_BEGINNING= 2,
    CALLLOGSEEK_END = 4
} CALLLOGSEEK;    

typedef struct
{
    DWORD cbSize;  // sizeof CALLLOGENTRY
    FILETIME ftStartTime;
    FILETIME ftEndTime;
    IOM iom;
    BOOL fOutgoing:1;        // direction of call.  (Missed calls are incoming.)
    BOOL fConnected:1;     // Did the call connect? (as opposed to busy, no answer)
    BOOL fEnded:1;        // Was the call ended? (as opposed to dropped)
    BOOL fRoam:1;        // Roaming (vs. local)
    CALLERIDTYPE cidt;
    PTSTR pszNumber;
    PTSTR pszName;
    PTSTR pszNameType;    // "w" for work tel, "h" for home tel, for example
    PTSTR pszNote;    // filename of associated Notes file
} CALLLOGENTRY, *PCALLLOGENTRY;

// Open the call log and set the seek pointer to the beginning.
HRESULT PhoneOpenCallLog (HANDLE *ph);

// PhoneGetCallLogEntry returns one call log entry and advances the seek 
// pointer.  
// pentry->cbSize must be set to "sizeof CALLLOGENTRY" before this function is 
// called.
// The entries are returned in order of start time, the most recent call first.
// It is the responsibility of the caller to LocalFree any strings 
// which are returned.
// A return value of S_FALSE indicates there are no more entries.
HRESULT PhoneGetCallLogEntry (HANDLE h, PCALLLOGENTRY pentry);

// PhoneSeekCallLog seeks to a record in the call log.  
// iRecord is the zero-based index of the  record, starting at the beginning 
// if seek == CALLLOGSEEK_BEGINNING, at the end if CALLLOGSEEK_END.  
// piRecord returns the zero-based index (from the beginning) of the seek 
// pointer after the seek is performed.
// PhoneSeekCallLog(h, CALLLOGSEEK_END, 0, &count) will return the number of 
// records.
HRESULT PhoneSeekCallLog (HANDLE hdb, CALLLOGSEEK seek, DWORD iRecord, LPDWORD piRecord);

// Close the call log
HRESULT PhoneCloseCallLog (HANDLE h);


// The Call Log application supports the context menu extensibility mechanism.
// The Context name is "Phone" and the Class name is "Log".
// The IUnknown pointer passed to the context menu handler supports IPropertyBag,
// and the set of properties supported is as follows:
//
// property name:   type:   value:
// --------------   -----   ------
// PropSet          BSTR    "CallLog"
// Number           BSTR    the phone number of the other person on the call
// NumberType       BSTR    the type of phone number (e.g. "h" for home)
// Name             BSTR    person's name 
// Year             I2      the year of the beginning time of the call
// Month            I2      the month of the beginning time of the call
// Day              I2      the day of the beginning time of the call
// Hour             I2      the hour of the beginning time of the call  
// Minute           I2      the minute of the beginning time of the call
// Second           I2      the second of the beginning time of the call
// DayOfWeek        I2      the day of the week of the beginning time of the call
// Duration         UI4     the duration of the call in seconds
// CallerIDType     UI4     a CALLERIDTYPE value (see above)
// Connected        BOOL    Did the call connect? (as opposed to busy, no answer)
// Ended            BOOL    Was the call ended? (as opposed to dropped)
// Outgoing         BOOL    Was the call outgoing?  (Missed calls are incoming.)
// Roaming          BOOL    Roaming?
// IOM              UI4     an IOM value (see above)







// PhoneShowCallLog
//
// Show the Call Log, and filter it

typedef enum
{
    CALLLOGFILTER_ALL_CALLS,
    CALLLOGFILTER_MISSED,
    CALLLOGFILTER_INCOMING,
    CALLLOGFILTER_OUTGOING
} CALLLOGFILTER;

HRESULT PhoneShowCallLog(CALLLOGFILTER iCallLogFilter);









//++++++
//
//  PhoneMakeCall
//
//       Dials a number

typedef struct tagPHONEMAKECALLINFO
{
    DWORD cbSize;
    DWORD dwFlags;
    
    //Params to tapiRequestMakeCall
    PCWSTR pszDestAddress;
    PCWSTR pszAppName;
    PCWSTR pszCalledParty;
    PCWSTR pszComment;

    // owner window for dialog box that appears when the PMCF_EDITBEFORECALLING flag is passed into PhoneMakeCall
    HWND hwndOwner;
} PHONEMAKECALLINFO, *PPHONEMAKECALLINFO;

// PhoneMakeCall flags
#define PMCF_DEFAULT                0x00000001
#define PMCF_PROMPTBEFORECALLING    0x00000002
#define PMCF_EDITBEFORECALLING      0x00000020

LONG PhoneMakeCall(PHONEMAKECALLINFO *ppmci);

//
// End PhoneMakeCall
//
//------




//++++++
//
//  PhoneAddSpeedDial
//
//       adds a speed dial entry
//
// dwFlags - currently unused, set to 0
//
// piKey - in/out: the key sequence which will invoke the speed dial. 
//           currently an entry between 2 and 99 (inclusive) is valid. 
//            the API will cause existing entries to be overwritten
//
// pszDisplayName - the non-empty display name for the speed dial
//
// pszTelNumber - the non-empty tel# to be dialed
//

HRESULT PhoneAddSpeedDial(DWORD dwFlags, DWORD* piKey, const TCHAR* pszDisplayName, const TCHAR* pszTelNumber);

//
// End PhoneAddSpeedDial
//
//------




//++++++
//
//  PhoneSendDTMFStart
//
//  Allows an application to begin sending a DTMF tone using the 
//  current phone call.
//
//  Parameters:
//    chDTMF - DTMF character to send. Must be '0'-'9', 
//             'A'-'D', '*', or '#'.
//
//  Return Value:
//    -----------------------------------------------------------
//    Value                        Description
//    ------------------------------------------------------------
//    S_OK                         The operation completed successfully.
//    E_FAIL                       An unknown error occurred.
//    E_INVALIDARG                 chDTMF is invalid.
//    E_NOTIMPL                    No phone is present on the device, the 
//                                 phone service is not running, or no 
//                                 calls are currently active.
//    
//    Other custom failure codes where the facility code is
//    FACILITY_WINDOWS_CE may be retrieved using the HRESULT_CODE
//    macro:
//    -----------------------------------------------------------
//    Error Code                   Description
//    ------------------------------------------------------------
//    ERROR_DEVICE_NOT_CONNECTED   No phone is present on the device, 
//                                 the phone service is not running, or 
//                                 no calls are currently active.
//
//  Remarks:
//    Caller must call PhoneSendDTMFStop to stop the DTMF tone.
//
//    This function will fail if no phone is present on the 
//    device, the phone service is not running, or no calls are  
//    currently active. If a subsequent call to this API is made 
//    by the caller or any other application before the DTMF tone  
//    is finished the original DTMF tone will cease and the new 
//    DTMF will be sent.
//

HRESULT PhoneSendDTMFStart(TCHAR chDTMF);

//
// End PhoneSendDTMFStart
//
//------




//++++++
//
//  PhoneSendDTMFStop
//
//  Stops an existing DTMF tone.
//
//  Remarks:
//    This function stops all DTMF tones. Applications 
//    may use PhoneSendDTMFStart to begin a DTMF tone.
//

void PhoneSendDTMFStop();

//
// End PhoneSendDTMFStop
//
//------


//++++++
//
//  PhoneIsEmergencyNumber
//
//  Determines if a string contains an emergency phone number.
//
//  Parameters:
//    fTailMatchOnly
//        [in] If this argument is set to TRUE, the function only 
//        attempts to match emergency numbers at the end of 
//        pszNumber. If this value is FALSE, the function attempts 
//        to match the emergency string with the full pszNumber 
///       argument exactly.
//    pszNumber
//        [in] String to match. If this pointer is NULL or points 
//        to an empty string, the function returns FALSE.
//    ppszEmergencyNumber
//        [out] On success, constant pointer to the emergency phone 
//        number matched in pszNumber. Caller must not free. On 
//        failure, this pointer is undefined. Optional, may be NULL.
//
//  Return Value:
//    TRUE if pszNumber contains an emergency number; otherwise FALSE.
//
//  Remarks:
//    The system merges the list of emergency phone numbers from 
//    the registry and the SIM, if available. The list of emergency 
//    numbers can vary by device.
//

BOOL PhoneIsEmergencyNumber(BOOL fTailMatchOnly, __in LPCTSTR pszNumber, __deref_opt_out LPCTSTR* ppszEmergencyNumber);

//
// End PhoneIsEmergencyNumber
//
//------





/// <file_topic_scope tref="Phone_Call_APIs"/>

/// <topic name="Phone_Call_APIs" displayname="Phone Call Control APIs">
///   <topic_scope tref="Phone" />
///   <summary>
///       <para>
///         These are set of APIs that allow the clients to programmatically make
///         a new call , control an existing call or querying for the status of
///         the existing calls. Users of these APIs must call PhoneAPIInitialize in order to use the API set
///       </para>
///   </summary>
/// </topic>

/// <topic name="Terminology" displayname="Terminology">
///   <topic_scope tref="Phone_Call_APIs" />
///     <summary>
///         <list type="table">
///             <listheader>
///                 <term>Name</term>
///                 <term>Meaning</term>
///             </listheader>
///             <item>
///                 <term>Phone Service</term>
///                 <term> 
///                     A singleton service in the device that handles 
///                     making a phone call, manipulating existing phone calls.
///                 </term>
///             </item>
///             <item>
///                 <term>Phone System</term>
///                 <term> 
///                     Same as Phone Service.
///                 </term>
///             </item>
///             <item>
///                 <term>Call State Provider</term>
///                 <term> 
///                     These are drivers/software that actually makes technology specific
///                     calls, such as GSM calls, CDMA calls, VOIP calls etc.
///                 </term>
///             </item>
///             <item>
///                 <term>Active Call</term>
///                 <term> 
///                     Any call that is not ended in the system is considered
///                     an active call. So all calls that don't have callstate
///                     PH_CALLSTATE_IDLE are active calls.
///                 </term>
///             </item>
///             <item>
///                 <term>Talking Call</term>
///                 <term>
///                     Any call that has callstate as PH_CALLSTATE_TALKING is considered a
///                     talking call. This is the call that the user is talking
///                     to.
///                 </term>
///             </item>
///             <item>
///                 <term>Held Call</term>
///                 <term>
///                     Any call that has callstate as PH_CALLSTATE_HOLD is considered a
///                     held call. This is the call that the user has put on hold.
///                 </term>
///             </item>
///             <item>
///                 <term>Transferring Call</term>
///                 <term>
///                     Any call that is currently undergoing a transfer is a
///                     transferring call. This category includes calls with callstate
///                     PH_CALLSTATE_TRANSFERRING. 
///                 </term>
///             </item>
///             <item>
///                 <term>Ambiguous Call</term>
///                 <term>
///                     Any call that is in callstate PH_CALLSTATE_AMBIGUOUS is an
///                     ambiguous call. Generally this happens in a CDMA device
///                     when a call is flashed. The state of the call itself
///                     can't be predicted (such as whether the call is on hold etc)
///                     when in this state.
///                 </term>
///             </item>
///             <item>
///                 <term>Busy Call</term>
///                 <term>
///                     Any call that has callstate PH_CALLSTATE_BUSY is a busy call.
///                     These are technically ended calls, but will allow the user
///                     to explicitly end a call. So they are counted as an active 
///                     call.
///                 </term>
///             </item>
///             <item>
///                 <term>Ended Call</term>
///                 <term>
///                     Any call that has callstate PH_CALLSTATE_IDLE is an ended call.
///                 </term>
///             </item>
///             <item>
///                 <term>Incoming Call</term>
///                 <term>
///                     Any call that has callstate PH_CALLSTATE_INCOMING is an incoming call.
///                     These are calls that are currently ringing in the system and 
///                     are not yet accepted or rejected.
///                 </term>
///             </item>
///             <item>
///                 <term>Outgoing Call</term>
///                 <term>
///                     Any call that has callstate PH_CALLSTATE_OUTGOING is an outgoing call.
///                     These are calls that are in dialing state and not yet connected.
///                 </term>
///             </item>
///             <item>
///                 <term>Conference Call</term>
///                 <term>
///                     Conference calls are group of calls connected and act like a single
///                     entity. Each call in the conference can communicate with other calls
///                     in the conference. Conference call has calltype as PH_CALLTYPE_CONFERENCE.
///                     The calls that make up the conference will still have calltype as 
///                     PH_CALLTYPE_SINGLE.
///                 </term>
///             </item>
///         </list>
///     </summary>
/// </topic>

/// <topic name="API_Categories" displayname="API Categories">
///   <topic_scope tref="Phone_Call_APIs" />
/// <summary>
///  There are three categories of phone call APIs. They are the following:
///  <list type="bullet">
///    <item>
///     <description>Call Control APIs: These are the set of APIs that allow the clients
///                  to either make a new call or modify/control an existing call.
///     </description>
///    </item>
///    <item>
///     <description>Status APIs: These are the set of APIs that allow the clients to
///                  query for various info about the calls in the phone system.
///     </description>
///    </item>
///    <item>
///     <description>Notification APIs: These are the set of APIs that allow the
///                  clients to register for various notifications that represent
///                  a state change.
///     </description>
///    </item>
/// </list>
/// </summary>
/// </topic>

/// <topic name="Data_Types" displayname="Data Types">
/// <topic_scope tref="Phone_Call_APIs" />
/// </topic>

/// <topic name="Types_Enumerations" displayname="Enumerations">
/// <topic_scope tref="Data_Types" />
/// </topic>

/// <topic name="Types_Structures" displayname="Structures">
/// <topic_scope tref="Data_Types" />
/// </topic>

/// <topic name="Call_Control_APIs" displayname="Call Control APIs">
/// <topic_scope tref="API_Categories" />
/// </topic>

/// <topic name="Using_Call_Control_APis" displayname="General Usage">
/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
///  Call control APIs allow the clients to either make a new call or
///  perform actions on an existing call. Most of the control apis
///  take an optional call handle as a parameter. If the API allows
///  an optional call handle and the client passes NULL, 
///  then the phone system automatically determines the right call handle to 
///  perform the particular action on. Clients can also ahead of time 
///  determine whether a particular action is valid to be performed
///  by calling <see cref="PhoneGetAvailableActions" /> API.
///  Clients need to call <see cref="PhoneAPIInitialize" /> API to use this set of APIs.
/// </summary>
/// </topic>

/// <topic name="Call_Status_APIs" displayname="Status APIs">
/// <topic_scope tref="API_Categories" />
/// </topic>

/// <topic name="Call_Notification_APIs" displayname="Notification APIs">
/// <topic_scope tref="API_Categories" />
/// </topic>

/// <topic name="Call_Service_Provider_Info_APIs" displayname="Call Service Providers Information APIs">
/// <topic_scope tref="API_Categories" />
/// <summary>
///  The Call Service Provider Information APIs are a set of read-only APIs that allow clients to get
///  information about the state of the call service providers installed on the device.
/// </summary>
/// </topic>

// error codes
#define FACILITY_PHAPI 0x400
#define E_ACTIONUNAVAILABLE (MAKE_HRESULT(SEVERITY_ERROR, FACILITY_PHAPI, 0x100))
#define E_NOTFOUND          HRESULT_FROM_WIN32(ERROR_NOT_FOUND)

DECLARE_HANDLE(HPHONELISTENER);

#define INVALID_HPHONELISTENER  ((HPHONELISTENER)-1)

/// <topic_scope tref="Types_Enumerations" />
/// <summary>
/// <para>
/// Represents various types of
/// actions that can be performed on the phone system.
/// </para>
/// </summary>
typedef enum PH_ACTION
{
    /// <summary>
    /// A Call can be made.
    /// </summary>
    PH_ACTION_MAKECALL = 0,
    /// <summary>
    /// There is a valid call in the phone service that can be held.
    /// </summary>
    PH_ACTION_HOLD = 1,
    /// <summary>
    /// There is at least one held call in the phone service that can be unheld.
    /// </summary>    
    PH_ACTION_UNHOLD = 2,
    /// <summary>
    /// Flash can be performed.
    /// </summary>
    PH_ACTION_FLASH = 3,
    /// <summary>
    /// Device supports Mute and it can be muted.
    /// </summary>
    PH_ACTION_MUTEON = 4,
    /// <summary>
    /// Device supports Mute and it can be unmuted.
    /// </summary>
    PH_ACTION_MUTEOFF = 5,
    /// <summary>
    /// Device supports SpeakerPhone and it can be turned on.
    /// </summary>
    PH_ACTION_SPEAKERON = 6,
    /// <summary>
    /// Device supports SpeakerPhone and it can be turned off.
    /// </summary>
    PH_ACTION_SPEAKEROFF = 7,
    /// <summary>
    /// There are at least 2 valid calls in the phone system that can be swapped.
    /// </summary>
    PH_ACTION_SWAP = 8,
    /// <summary>
    /// There is a conference call in the phone service and calls can be
    /// removed from that conference.
    /// </summary>
    PH_ACTION_PRIVATE = 9,
    /// <summary>
    /// There are calls in the phone system that can be conferenced.
    /// </summary>
    PH_ACTION_CONFERENCE = 10,
    /// <summary>
    /// Device supports Bluetooth Headset and can be turned on.
    /// </summary>
    PH_ACTION_BLUETOOTHHANDSFREEON = 11,
    /// <summary>
    /// Device supports Bluetooth Headset and can be turned off.
    /// </summary>
    PH_ACTION_BLUETOOTHHANDSFREEOFF = 12,
    /// <summary>
    /// There are calls in the system that can be ended.
    /// </summary>
    PH_ACTION_END = 13,
    /// <summary>
    /// There is a call in the phone service that can accept dtmf.
    /// </summary>
    PH_ACTION_SENDDTMF = 14,
    /// <summary>
    /// There is an incoming call in the phone service that can be accepted.
    /// </summary>
    PH_ACTION_ACCEPTINCOMING = 15,
    /// <summary>
    /// There is an incoming call in the phone service that can be rejected.
    /// </summary>
    PH_ACTION_REJECTINCOMING = 16,
    /// <summary>
    /// There is a call in the phone service that can be forwarded.
    /// </summary>
    PH_ACTION_REDIRECTINCOMING = 17,
    /// <summary>
    /// There are calls in the phone service that can be dropped and
    /// accepted.
    /// </summary>
    PH_ACTION_DROPACCEPT = 18,
    /// <summary>
    /// There are calls in the phone service that can be blind transferred.
    /// </summary>
    PH_ACTION_BLINDTRANSFER = 19,
    /// <summary>
    /// Total number of Actions.
    /// </summary>
    PH_ACTION_COUNT = 20
}PH_ACTION;


/// <topic_scope tref="Types_Enumerations" />
/// <summary>
/// Represents different change events that
/// can trigger a notification.
/// <seealso cref="Terminology" />
/// <seealso cref="PhoneAddListener" />
/// </summary>
typedef enum PH_CHANGEEVENT
{
    /// <summary>
    /// Special value used in <see cref="PhoneAddListener" />.This allows the API to
    /// register for all events. If using this option, please
    /// note that new notifications may be added in future releases.
    /// So, client code should ignore the notifications that it doesn't
    /// expect.
    /// </summary>
    PH_CHANGEEVENT_ALL = 0,
    /// <summary>
    /// Indicates something in the phone state changed.
    /// Use <see cref="PhoneGetState" /> to get the full state info
    /// </summary>
    PH_CHANGEEVENT_PHONESTATE = 1,
    /// <summary>
    /// Indicates there is a change in the global actions that are
    /// available in the phone system. Use <see cref="PhoneGetAvailableActions" />.
    /// </summary>
    PH_CHANGEEVENT_ACTIONAVAILABILITY = 2,
    /// <summary>
    /// Indicates there is a change in the mute state.
    /// Use <see cref="PhoneGetMute" />
    /// </summary>
    PH_CHANGEEVENT_MUTE = 3,
    /// <summary>
    /// Indicates there is a change in the state of the 
    /// speakerphone. Use <see cref="PhoneGetSpeaker" />.
    /// </summary>
    PH_CHANGEEVENT_SPEAKER = 4,
    /// <summary>
    /// Indicates there is a change in the enabled state of BluetoothHandsFree.
    /// Use <see cref="PhoneGetBluetoothHandsFreeState" />
    /// </summary>
    PH_CHANGEEVENT_BLUETOOTHHANDSFREE = 5,
    /// <summary>
    /// Indicates there is a change to call service provider general info.
    /// Use <see cref="PhoneGetProviderGeneralInfo" />
    /// </summary>
    PH_CHANGEEVENT_PROVIDERGENERALINFO = 6,
    /// <summary>
    /// Indicates there is a change to provider line service info.
    /// Use <see cref="PhoneGetProviderLineServiceInfo" />
    /// </summary>
    PH_CHANGEEVENT_PROVIDERLINESERVICEINFO  = 7,
    /// <summary>
    /// Indicates there is a change in provider line info (non-service related).
    /// Use <see cref="PhoneGetProviderLineInfo" />
    /// </summary>
    PH_CHANGEEVENT_PROVIDERLINEINFO = 8,
    /// <summary>
    /// Indicates there is a change in provider signal strength.
    /// </summary>
    PH_CHANGEEVENT_PROVIDERSIGNALSTRENGTH = 9,
    /// <summary>
    /// Sent whenever there is some sort of asynchronous error in the
    /// phone system. <see cref="PH_ERROR" /> parameter of the callback function contains
    /// the actual error.
    /// </summary>
    PH_CHANGEEVENT_ERROR = 10,
}PH_CHANGEEVENT;

/// <topic_scope tref="Types_Enumerations" />
/// <summary>
/// Represents the status of a contact or callhistory lookup
/// for a call.
/// </summary>
typedef enum PH_FINDSTATUS
{
    /// <summary>
    /// Find operation hasn't started.
    /// </summary>
    PH_FINDSTATUS_NOTSTARTED = 0,
    /// <summary>
    /// Find operation has started.
    /// </summary>
    PH_FINDSTATUS_STARTED = 1,
    /// <summary>
    /// Find operation succeeded.
    /// </summary>
    PH_FINDSTATUS_SUCCEEDED = 2,
    /// <summary>
    /// Find operation failed.
    /// </summary>
    PH_FINDSTATUS_FAILED = 3
}PH_FINDSTATUS;

/// <topic_scope tref="Types_Enumerations" />
/// <summary>
/// Represents the type of a call.
/// <seealso cref="Terminology" />
/// </summary>
typedef enum PH_CALLTYPE
{
    /// <summary>
    /// Call corresponds to an individual call
    /// </summary>
    PH_CALLTYPE_SINGLE = 0,    
    /// <summary>
    /// Call is a conference call.
    /// </summary>
    PH_CALLTYPE_CONFERENCE = 1
}PH_CALLTYPE;

/// <topic_scope tref="Types_Enumerations" />
/// <summary>
/// Call Flags to use with <see cref="PhoneDial" />.
/// The flags can be combined together.
/// </summary>
typedef enum PH_CALLFLAGS
{
    /// <summary>
    ///  Default DialFlags to use.
    /// </summary>
    PH_CALLFLAGS_NORMAL = 0x0,
    /// <summary>
    /// Phone System will not pop up the callprogress UI for this flag.
    /// If the user invoked call progress UI, they will see the call.
    /// The call will also be browsable from call history.
    /// </summary>
    PH_CALLFLAGS_HIDEUI = 0x01,
    /// <summary>
    /// Brings up UI that can allow the user to edit the number before
    /// calling.
    /// </summary>
    PH_CALLFLAGS_EDITBEFORECALLING = 0x02,
    /// <summary>
    /// Brings up UI that can prompts the user before calling.
    /// </summary>
    PH_CALLFLAGS_PROMPTBEFORECALLING = 0x04,
    /// <summary>
    /// No call data will be written to the call log for this call
    /// </summary>
    PH_CALLFLAGS_NOLOGENTRY = 0x08,
    /// <summary>
    /// No caller id lookup will be performed for this call.
    /// </summary>
    PH_CALLFLAGS_NOCALLERIDLOOKUP = 0x10,
    /// <summary>
    /// Phone System will show call progress with the keypad raised when 
    /// the call connects. Only supported on touch devices.
    /// </summary>
    PH_CALLFLAGS_SHOWKEYPADONCALL = 0x20
}PH_CALLFLAGS;


/// <topic_scope tref="Types_Enumerations" />
/// <summary>
///  Asynchronous Errors resulting from API calls or change in call state.
///  These are received by clients who register for PH_CHANGEEVENT_ERROR notifications
/// <see cref="PH_CHANGEEVENT" />
/// </summary>
/// <seealso cref="PhoneAddListener" />
typedef enum PH_ERROR
{
    /// <summary>
    /// No error occured.
    /// </summary>
    PH_ERROR_NONE = 0,
    /// <summary>
    /// The call was ended by the remote party
    /// </summary>
    PH_ERROR_CALLDROPPED = 1,             
    /// <summary>
    /// The call was dropped by the network. 
    /// </summary>
    PH_ERROR_NETWORKDROPPED = 2,                                        
    /// <summary>
    /// Conference failed
    /// </summary>
    PH_ERROR_CONFERENCEFAILED = 3,
    /// <summary>
    /// There was an error ending the call
    /// </summary>
    PH_ERROR_END = 4,
    /// <summary>
    /// There was an error removing a call from a conference
    /// </summary>
    PH_ERROR_PRIVATE = 5,
    /// <summary>
    /// There was an error answering a call
    /// </summary>
    PH_ERROR_ANSWER = 6,
    /// <summary>
    /// There was an error redirecting a call
    /// </summary>
    PH_ERROR_REDIRECT = 7,
    /// <summary>
    /// There was an error sending flash to the network
    /// </summary>
    PH_ERROR_FLASH = 8,
    /// <summary>
    /// There was an error when attempting to hold a call
    /// </summary>
    PH_ERROR_HOLD = 9,
    /// <summary>
    /// There was an error when attempting to swap two calls
    /// </summary>
    PH_ERROR_SWAP = 10,
    /// <summary>
    /// There was an error when attempting to unhold a call
    /// </summary>
    PH_ERROR_UNHOLD = 11,
    /// <summary>
    /// Was unable to mute the device during a call
    /// </summary>
    PH_ERROR_MUTE = 12,
    /// <summary>
    /// Was unable to unmute the device during a call
    /// </summary>
    PH_ERROR_UNMUTE = 13,
    /// <summary>
    /// There was an error while making a dial attempt
    /// </summary>
    PH_ERROR_DIAL = 14,
    /// <summary>
    /// The number dialed is an invalid phone number
    /// </summary>
    PH_ERROR_BADADDRESS = 15,
    /// <summary>
    /// There is an invalid sim card in the device
    /// </summary>
    PH_ERROR_INVALIDSIM = 16,
    /// <summary>
    /// The current request failed because there is no network service
    /// </summary>
    PH_ERROR_NETWORKSERVICENOTAVAILABLE = 17,
    /// <summary>
    /// The device can only make emergency calls at this time
    /// </summary>
    PH_ERROR_EMERGENCYONLY = 18,
    /// <summary>
    /// The current request failed because service is off
    /// </summary>
    PH_ERROR_SERVICEOFF = 19,
    /// <summary>
    /// There was an unspecified error
    /// </summary>
    PH_ERROR_OPERATIONFAILED = 20,
    /// <summary>
    /// Cannot make an outgoing call because all the outgoing lines are busy
    /// </summary>
    PH_ERROR_OUTGOINGCALLNOFREELINES = 21,     
    /// <summary>
    /// There was an error when attempting to transfer a call
    /// </summary>
    PH_ERROR_TRANSFER = 22, 
    /// <summary>
    /// The number dialed has been barred by the radio
    /// </summary>
    PH_ERROR_DESTINATIONBARRED = 23,
    /// <summary>
    /// The number dialed has been restricted as per the Fixed Dialing Number restriction table
    /// </summary>
    PH_ERROR_FDNRESTRICT = 24,
    /// <summary>
    /// There was an error sending DTMF across the network
    /// </summary>
    PH_ERROR_SENDDTMF = 25,
    /// <summary>
    /// There was an error trying to execute <see cref="PhoneDropAccept" />
    /// </summary>
    PH_ERROR_DROPACCEPT = 26,
    /// <summary>
    /// Count of phone errors
    /// </summary>
    PH_ERROR_COUNT = 27,
}PH_ERROR;


/// <topic_scope tref="Call_Notification_APIs" />
/// <summary>
/// Callback function to be used with PhoneAddListener.
/// </summary>
typedef UINT (*PH_CHANGE_EVENT_NOTIFY_FUNCTION)(HPHONELISTENER hListener,
                                                DWORD_PTR dwUserData, 
                                                PH_CHANGEEVENT changeevent, 
                                                PH_ERROR error);

#define PH_CCH_DISPLAY_NAME 80
#define PH_CCH_DISPLAY_NUMBER 64
#define PH_CCH_DISPLAY_COMPANY_NAME 80
#define PH_CCH_DISPLAY_TITLE 80
#define PH_CCH_DISPLAY_METHOD 10

/// <topic_scope tref="Types_Structures" />
/// <summary>
/// This structure contains info about
/// a call.
/// </summary>
typedef struct PH_CALL_INFO
{
    /// <summary>
    /// Caller ID name displayed (if available).
    /// </summary>
    WCHAR szDisplayName[PH_CCH_DISPLAY_NAME];
    /// <summary>
    /// Number (if available).
    /// Undefined if the calltype is PH_CALLTYPE_CONFERENCE (Conference call).
    /// </summary>
    WCHAR szDisplayNumber[PH_CCH_DISPLAY_NUMBER];
    /// <summary>
    /// Number the user dialed (if available and this is an outgoing call).
    /// Undefined if the calltype is PH_CALLTYPE_CONFERENCE (Conference call).
    /// </summary>
    WCHAR szDialedNumber[PH_CCH_DISPLAY_NUMBER];
    /// <summary>
    /// The dialed characters included when the Flash verb is executed.
    /// Undefined when callstate is not PH_CALLSTATE_AMBIGUOUS.
    /// Use in conjunction with ftLastFlashed.
    /// </summary>
    WCHAR szFlashedNumber[PH_CCH_DISPLAY_NUMBER];
    /// <summary>
    /// Company name (if available)
    /// Undefined if the calltype is PH_CALLTYPE_CONFERENCE (Conference call).
    /// </summary>
    WCHAR szDisplayCompanyName[PH_CCH_DISPLAY_COMPANY_NAME];
    /// <summary>
    /// Title.
    /// Undefined if the calltype is PH_CALLTYPE_CONFERENCE (Conference call).
    /// </summary>
    WCHAR szDisplayTitle[PH_CCH_DISPLAY_TITLE];   
    /// <summary>
    /// Method of calling e.g work, mobile etc.
    /// Undefined if the calltype is PH_CALLTYPE_CONFERENCE (Conference call).
    /// </summary>
    WCHAR szDisplayMethod[PH_CCH_DISPLAY_METHOD]; 
    /// <summary>
    /// Path to the ringtone file.
    /// Undefined if the calltype is PH_CALLTYPE_CONFERENCE (Conference call).
    /// </summary>    
    WCHAR szRingTone[MAX_PATH];   
    /// <summary>
    /// Soundtype of the ringtone. Valid values are SND_SOUNDTYPE_FILE if the szRingtone field points to a valid ringtone,
    /// SND_SOUNDTYPE_VIBRATE for vibrate instead of playing the ringtone, and SND_SOUNDTYPE_NONE for a silent incoming call ringtone
    /// </summary> 
    SND_SOUNDTYPE sndtypeRingTone;
    /// <summary>
    /// Contact oid (if any) from POOM database. 
    /// Undefined if the calltype is PH_CALLTYPE_CONFERENCE (Conference call).
    /// </summary>                                                  
    CEOID oidContact;                             
    /// <summary>
    /// Property ID of the method.  Corresponds to szDisplayMethod.
    /// </summary>                                                  
    CEPROPID pidContactMethod;                    
    /// <summary>
    /// Time when the call started in UTC format.
    /// Will be 0 until the call connects.
    /// </summary>
    FILETIME ftStart;                             
    /// <summary>
    /// Time when the call ended in UTC format. 
    /// 0 if the call is not yet ended.
    /// </summary>
    FILETIME ftEnd;                               
    /// <summary>
    /// The time at which the last Flash command was executed on this call.
    /// Undefined if the callstate is not PH_CALLSTATE_AMBIGUOUS.
    /// </summary>
    FILETIME ftLastFlashed;
    /// <summary>
    /// State of the call, whether talking, held etc.
    /// </summary>
    PH_CALLSTATE callstate;    
    /// <summary>
    /// On an ended call, this indicates the reason for
    /// disconnect.
    /// </summary>    
    PH_CALLSTATEREASON callstatereason; 
    /// <summary>
    /// Direction of the call, whether this was a incoming or
    /// an outgoing call.
    /// </summary>    
    PH_CALLDIRECTION direction;
    /// <summary>
    /// Type of the call, whether it is a conference (grouped call) or
    /// a single call. Please note that calls that are a member of 
    /// a conference are still single calls. It is the conference call
    /// itself that is of type conference.
    /// </summary>    
    PH_CALLTYPE type;
    /// <summary>
    /// Status of a lookup of a contact , callhistory item etc that
    /// represents the call.
    /// </summary>    
    PH_FINDSTATUS findstatus;
    /// <summary>
    /// State of the caller id.
    /// </summary>    
    PH_CALLERID cidstate; 
    /// <summary>
    /// Transport of this call, e.g. Cellular or Data (VoIP).
    /// </summary>    
    PH_CALLTRANSPORT calltransport; 
    /// <summary>
    /// line ID that this call came 
    /// in on (for phones that support 
    /// multiple phone numbers)
    /// </summary>    
    UINT iLineNum;                             
    /// <summary>
    /// Handle of this call.
    /// </summary>                                                 
    HPHONECALL hCall;        
    /// <summary>
    /// Handle to the conference call,if hCall is part of a conference.
    /// if this call is the conference, then hCall == hConference.
    /// </summary>    
    HPHONECALL hConference;                      
    /// <summary>
    /// Any user defined flags that was used while creating the call.
    /// Always 0 for a conference call.
    /// </summary>                                                 
    DWORD dwUserFlags;                           
    /// <summary>
    /// Call flags that were used during dialing or set by the Phone System
    /// Can be a combination of <see cref="PH_CALLFLAGS" /> values.
    /// </summary>                                                 
    DWORD dwCallFlags;                           
    /// <summary>
    /// Id of the provider this call belongs to.
    /// </summary>    
    GUID guidProviderId;     
    /// <summary>
    /// If dwCallFlags contains PH_DIALFLAGS_EDITBEFORECALL,
    /// then this parameter represents the window handle that the
    /// Edit Before Call dialog should be parented to.
    /// </summary>                                
    HWND hwndEditBeforeCallParent;
    /// <summary>
    /// The ID of the call note associated with this call, if one exists.
    /// </summary>
    OLITEMID olItemIdCallNote;
    /// <summary>
    /// Reserved dword.
    /// </summary>
    DWORD dwReserved;
} PH_CALL_INFO;

/// <topic_scope tref="Types_Structures" />
/// <summary>
/// This structure contains the count
/// of different calls in the phone system that exist
/// at the time of executing PhoneGetCallCounts API.
/// <seealso cref="Terminology" />
/// </summary>
typedef struct PH_PHONE_CALL_COUNTS
{
    /// <summary>
    /// Number of talking calls
    /// </summary>
    UINT cTalking;    
    /// <summary>
    /// Number of held calls.
    /// </summary>
    UINT cHeld;       
    /// <summary>
    /// Number of busy calls.
    /// </summary>
    UINT cBusy;       
    /// <summary>
    /// Number of incoming calls.
    /// </summary>
    UINT cIncoming;   
    /// <summary>
    /// Number of outgoing calls.
    /// </summary>
    UINT cOutgoing;   
    /// <summary>
    /// Number of ambiguous calls.
    /// </summary>
    UINT cAmbiguous;  
    /// <summary>
    /// Number of transferring calls.
    /// </summary>
    UINT cTransferring;
    /// <summary>
    /// Number of connected calls. (cTalking + cHeld + cAmbiguous + cTransferring)
    /// </summary>
    UINT cConnected;  
    /// <summary>
    /// Number of conference calls.
    /// </summary>
    UINT cConference; 
    /// <summary>
    /// Number of ended calls.
    /// </summary>
    UINT cEnded;      
    /// <summary>
    /// Total number of calls in the system.(cConnected + cEnded + cIncoming + cOutgoing + cBusy).
    /// </summary>
    UINT cTotal;      
}PH_PHONE_CALL_COUNTS;

/// <topic_scope tref="Types_Structures" />
/// <summary>
/// Parameters to make a call. Used in
/// <see cref="PhoneDial" />, <see cref="PhoneRedirectIncoming" />,
/// <see cref="PhoneBlindTransfer" />
/// </summary>
typedef struct PH_DIAL_PARAMETERS
{
    /// <summary>
    /// Call Flags to use. Can be a combination of <see cref="PH_CALLFLAGS" /> values.
    /// </summary>    
    DWORD dwCallFlags;          
    /// <summary>
    /// Custom flags defined by
    /// the caller. The phone system ignores these flags.
    /// This is returned as dwUserFlags of <see cref="PH_CALL_INFO" />.
    /// </summary>    
    DWORD dwUserFlags;          
    /// <summary>
    /// Number to dial.
    /// </summary>                                
    LPCWSTR pszDialNumber;      
    /// <summary>
    /// [Optional] caller contact name.
    /// </summary>    
    LPCWSTR pszCalledParty;     
    /// <summary>
    /// [Optional] Pointer to caller contact item ID. If this 
    /// parameter is provided, pszCalledParty will be ignored.
    /// </summary>    
    const OLITEMID* polItemIdContact;       
    /// <summary>
    /// [Optional] contact method to use.  If pszDialNumber
    /// is specified, this field will be ignored.
    /// This field is required if polItemIdContact is specified.
    /// </summary>                                
    CEPROPID pidContactNumber;  
    /// <summary>
    /// [Optional] text 
    /// that gets sent to the receiver. This
    /// data can be used to qualify the call
    /// such as 'Urgent'.
    /// </summary>                                
    LPCWSTR pszCallAnnotation;  
    /// <summary>
    /// [Optional] Id of the 
    /// provider to make this call. If the 
    /// input is NULL, then the phone system determines
    /// the right provider to use for this call.
    /// </summary>                                
    const GUID* pguidProviderId;
    /// <summary>
    /// [Optional] Line num to be used
    /// to make the call. If the input is PH_INVALID_LINE_ID, then the
    /// phone system chooses the correct line number
    /// </summary>                                
    UINT iLineNum;            
    /// <summary>
    /// If pbProviderData is not NULL
    /// this parameter specifies the number of bytes in pbProviderData.
    /// This parameter is ignored if pbProviderData is NULL.
    /// </summary>                                
    UINT cbProviderData;        
    /// <summary>
    /// [Optional] Additional
    /// data that is passed along to the provider. 
    /// It is assumed that the provider knows how to interpret
    /// this byte stream.
    /// </summary>                                
    BYTE * pbProviderData;      
}PH_DIAL_PARAMETERS;

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Initialize the Phone API set. Clients of the Phone Call Control APIs must call this API before
/// calling any of the other Phone Call Control APIs
/// </summary>
/// <returns> 
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_FAIL - Failure
/// </para>
/// </returns>
/// <seealso cref="PhoneAPIUninitialize" />
HRESULT PhoneAPIInitialize();

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Uninitialize the Phone API set. Clients of the Phone Call Control APIs should call this to clean up.
/// </summary>
/// <returns> 
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_FAIL - Failure
/// </para>
/// </returns>
/// <seealso cref="PhoneAPIInitialize" />
HRESULT PhoneAPIUninitialize();

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// API to get the default outgoing line used to make calls.
/// </summary>
/// <param name="pguidProvider">[Out] Pointer to receive GUID of the default
///   outgoing provider.
/// </param>
/// <param name="piLine">[Out] Pointer to receive default outgoing line number.
/// </param>
/// <returns> 
/// <para>
/// E_POINTER - NULL pguidProvider or piLine
/// </para>
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_FAIL -other
/// </para>
/// </returns>
HRESULT PhoneGetDefaultOutgoingLine(__out GUID *pguidProvider, 
                                    __out UINT *piLine);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// API to set the default outgoing line to the next available line.
/// </summary>
/// <returns> 
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_NOTFOUND - There are no available lines.
/// </para>
/// <para>
/// E_FAIL - other
/// </para>
/// </returns>
/// <remarks>
///   Callers can use this function to cycle the default outgoing line to the
///   next available line, e.g. on a device with Cell_1, Cell_2, and 1 VoIP lines,
///   repeatedly calling this API can change Cell_1 to Cell_2 to VoIP then back to Cell_1.
/// </remarks>
HRESULT PhoneSelectNextAvailableLine();

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// API to set the default outgoing line used to make calls.
/// </summary>
/// <param name="guidProvider">[In] GUID of the default
///   outgoing provider.
/// </param>
/// <param name="iLine">[In] Default outgoing line number.
/// </param>
/// <returns> 
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_NOTFOUND - Provider and or line number specified could not be found.
/// </para>
/// <para>
/// E_FAIL - other
/// </para>
/// </returns>
HRESULT PhoneSetDefaultOutgoingLine(REFGUID guidProvider, 
                                    UINT iLine);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// API to make a call using a dial string
/// </summary>
/// <param name="pdialParams">[In] DialString parameters
/// </param>
/// <param name="phCallNew">[Out, Optional] Optional pointer
/// to handle to the newly created call filled by the phone
/// system. In some circumstances such as dialing in-call 
/// codes there will not be a call handle associated with 
/// those calls.
/// </param>
/// <returns> 
/// <para>
/// E_INVALIDARG - pdialParams inputs
/// </para>
/// <para>
/// E_POINTER - NULL pdialParams 
/// </para>
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_FAIL -other
/// </para>
/// </returns>
/// <example>
/// Following example demonstrates making a call to some
/// number using default call state provider and on default line
/// <code>
/// void SomeFunction(WCHAR * pszNumberToDial)
/// {
///     PH_DIAL_PARAMETERS dialParams;
///     ZeroMemory(&dialParams, sizeof(dialParams));
///     dialParams.pszDialNumber = pszNumberToDial;
///     PhoneDial(&dialParams, NULL);
/// }
/// </code>
/// </example>
/// <seealso cref = "PH_DIAL_PARAMETERS" />
HRESULT PhoneDial(__in const PH_DIAL_PARAMETERS * pdialParams,
                  __out_opt HPHONECALL * phCallNew);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// End a given call in the system
/// </summary>
/// <param name="hCall">[In,Optional] handle to the phone call.
/// If the input is NULL then phone system picks the call
/// to end.</param>
/// <returns> 
/// <para>
/// E_INVALIDARG - Invalid inputs
/// </para>
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
///                         (e.g) No calls.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneEnd(__in_opt HPHONECALL hCall);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Swap a talking call with a held call.
/// </summary>
/// <param name="hCallTalking">[In,Optional] handle to the talking call
/// to be swapped. If the input is non NULL,handle should point to
/// a talking call.If the input is NULL, phone system decides the
/// right call to be swapped.
/// </param>
/// <param name="hCallHeld">[In,Optional] handle to the held call to
/// be swapped.If the input is not NULL, the handle should point to
/// a held call.If the input is NULL the phone system decides the
/// right call to be swapped.</param>
/// <returns> 
/// <para>
/// E_INVALIDARG - Invalid inputs
/// </para>
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
///                         (e.g) No calls.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneSwap(__in_opt HPHONECALL hCallTalking,
                  __in_opt HPHONECALL hCallHeld);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Hold or Unhold the current call
/// </summary>
/// <param name="hCall">[In,Optional] Handle to the phone call to 
/// hold or unhold. If the handle is NULL, phone system will choose
/// an appropriate call.</param>
/// <param name="fHold">[In] Whether to hold or unhold the call</param>
/// <returns> 
/// <para>
/// E_INVALIDARG - Invalid inputs
/// </para>
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
///                         (e.g) No calls.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneSetHold(__in_opt HPHONECALL hCall,
                     BOOL fHold);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Flash
/// </summary>
/// <param name="pszDigits">[In,Optional] digits to dial 
/// such as DTMF in a CDMA phone.</param>
/// <returns> 
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
///                         (e.g) No calls.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneFlash(__in_opt const WCHAR * pszDigits);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Conference calls
/// </summary>
/// <param name="hCall1">One of the two calls to be conferenced. This can
/// either be another conference call or a single call.
/// Can be NULL if hCall2 is also NULL. </param>
/// <param name="hCall2">Second call of the two calls to be conferenced.This can
/// either be another conference call or a single call.
/// Can be NULL if hCall1 is also NULL. </param>
/// <returns> 
/// <para>
/// E_INVALIDARG - Invalid inputs
/// </para>
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
///                         (e.g) there are not at least 2 calls to conference.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <remarks>Only succeeds if there are at least two 
/// calls in the system to conference. hCall1 and hCall2 when not NULL
/// should belong to the same underlying provider.</remarks>
HRESULT PhoneConference(__in_opt HPHONECALL hCall1, 
                        __in_opt HPHONECALL hCall2);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Take a particular call out of conference
/// </summary>
/// <param name="hCall">[In] handle to the call to take out</param>
/// <returns> 
/// <para>
/// E_INVALIDARG - Invalid inputs
/// </para>
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <remarks>Only succeeds if the call was in conference</remarks>
HRESULT PhonePrivate(__in HPHONECALL hCall);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Mute phone system
/// </summary>
/// <param name="fMute">[In] whether to mute or unmute</param>
/// <returns> 
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
///                       (e.g) The phone is already muted and API is called with
///                       TRUE.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneSetMute(BOOL fMute);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Turn on/off speakerphone.
/// </summary>
/// <param name="fSpeakerOn">[In] whether to turn 
/// on/off the speakerphone</param>
/// <returns> 
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
///                       (e.g) The phone is already on speaker and API is called with
///                       TRUE.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneSetSpeaker(BOOL fSpeakerOn);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Enable/Disable bluetooth handsfree
/// </summary>
/// <param name="fEnable">[In] Whether to enable/disable Bluetooth HandsFree.</param>
/// <returns> 
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
///                       (e.g) The Bluetooth HandsFree is already on and API is called with
///                       TRUE.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>    
/// </returns>
HRESULT PhoneEnableBluetoothHandsFree(BOOL fEnable);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Send DTMF to the system
/// </summary>
/// <param name="hCall">[In,Optional] handle to the call, to
/// send DTMF to. If the input is non NULL, it should point
/// to the active talking call.</param>
/// <param name="pszDTMF">[In] dtmf string</param>
/// <param name="fPlayDTMFLocal">[In] whether to locally play dtmf tone as well.</param>
/// <returns> 
/// <para>
/// E_POINTER - Null <paramref name="pszDTMF" />
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="hCall"/> or 
/// <paramref name="pszDTMF" /> contains more than PH_CCH_DTMF_STRING
/// chars.
/// </para>
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <remarks>This only succeeds if there is a 
/// connected call that can accept DTMF</remarks>
HRESULT PhoneSendDTMF(__in_opt HPHONECALL hCall,
                      __in const WCHAR * pszDTMF,
                      BOOL fPlayDTMFLocal);


/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Accept incoming call specified by hCall
/// </summary>
/// <param name="hCall">[In,Optional] handle to the call</param>
/// <param name="pbProviderData">[In,Optional] Additional
/// data that is passed along to the provider. 
/// It is assumed that the provider knows how to interpret
/// this byte stream.</param>
/// <param name="cbProviderData">if <paramref name="pbProviderData"/> 
/// is not NULL this parameter specifies the number of bytes in prgProviderData.
/// This parameter is ignored if prgProviderData is NULL.
/// </param>
/// <returns> 
/// <para>
/// E_INVALIDARG - Invalid <paramref name="hCall"/>
/// </para>
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <remarks>This only succeeds if the input <paramref name="hCall"/> is
/// of direction incoming
/// </remarks>
HRESULT PhoneAcceptIncoming(__in_opt HPHONECALL hCall,
                            __in_ecount_opt(cbProviderData) BYTE * pbProviderData,
                            UINT cbProviderData);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Reject incoming call specified by hCall
/// </summary>
/// <param name="hCall">[In,Optional] handle to the call</param>
/// <param name="pbProviderData">[In,Optional] Additional
/// data that is passed along to the provider. 
/// It is assumed that the provider knows how to interpret
/// this byte stream.</param>
/// <param name="cbProviderData">if <paramref name="pbProviderData"/>  is not NULL
/// this parameter specifies the number of bytes in prgProviderData.
/// This parameter is ignored if prgProviderData is NULL.
/// </param>
/// <returns> 
/// <para>
/// E_INVALIDARG - Invalid <paramref name="hCall"/>
/// </para>
/// <para>
/// E_NOTREADY - Phone system is not ready.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <remarks>This only succeeds if the input <paramref name="hCall"/> is
/// of direction incoming
/// </remarks>
HRESULT PhoneRejectIncoming(__in_opt HPHONECALL hCall,
                            __in_ecount_opt(cbProviderData) BYTE * pbProviderData,
                            UINT cbProviderData);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Forward incoming call to a specified number
/// </summary>
/// <param name="hCall">[In,Optional] handle to the call.</param>
/// <param name="pdialParams">[In] Forwarding number details.</param>
/// <returns> 
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="pdialParams"/>
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="hCall"/> or bad data in
/// <paramref name="pdialParams" />
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>    
/// <remarks>This only succeeds if the input <paramref name="hCall"/> is
/// of direction incoming
/// </remarks>
/// <seealso cref="PH_DIAL_PARAMETERS" />
HRESULT PhoneRedirectIncoming(__in_opt HPHONECALL hCall,
                              __in const PH_DIAL_PARAMETERS * pdialParams);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// Transfer a call to a specified number blindly.
/// A blind call transfer is a call transfer without regard to 
/// whether the party to whom the call is transferred is available 
/// or willing to accept the call
/// </summary>
/// <param name="hCall">[In,Optional] handle to the call.</param>
/// <param name="pdialParams">[In] Transferring number details.</param>
/// <returns> 
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="pdialParams"/>
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="hCall"/> or bad data in
/// <paramref name="pdialParams" />
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>    
/// <seealso cref="PH_DIAL_PARAMETERS" />
HRESULT PhoneBlindTransfer(__in_opt HPHONECALL hCall,
                           __in const PH_DIAL_PARAMETERS * pdialParams);

/// <topic_scope tref="Call_Control_APIs" />
/// <summary>
/// End the active call and make the held call or incoming call active.
/// </summary>
/// <param name="hCallToDrop">[In,Optional] handle to the active call.
/// If NULL, phone system will use currently active call.</param>
/// <param name="hCallToAccept">[In,Optional] handle to the incoming call or held call.
/// If NULL, phone system will use any incoming calls available at the time.
/// If there are no incoming calls, it uses the available held call to be made active.</param>
/// <returns> 
/// <para>
/// E_INVALIDARG - Invalid inputs. <paramref name="hCallToDrop" /> points to a non active call.
/// <paramref name="hCallToAccept"/> points to a call whose state is PH_CALLSTATE_INCOMING or PH_CALLSTATE_HOLD.
/// </para>
/// <para>
/// E_ACTIONUNAVAILABLE - If the given action is not allowed on the phone system.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneDropAccept(__in_opt HPHONECALL hCallToDrop, 
                        __in_opt HPHONECALL hCallToAccept);

/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Returns the call info of a call
/// </summary>
/// <param name="hCall">[In] handle to the call</param>
/// <param name="pciInfo">[Out] pointer to PH_CALL_INFO.</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="pciInfo"/>.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <seealso cref="PH_CALL_INFO" />
HRESULT PhoneGetCallInfo(__in HPHONECALL hCall, 
                         __out PH_CALL_INFO * pciInfo);


/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Returns any provider data associated with the call
/// </summary>
/// <param name="hCall">[In] handle to the call</param>
/// <param name="ppbData">[Out] callee allocated buffer that contains
/// any provider specific data associated with the call.</param>
/// <param name="pcbData">[Out] number of bytes in <paramref name="ppbData" />
/// </param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="ppbData"/> or <paramref name="pcbData"/>
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <remarks>
/// Caller should LocalFree the array.
/// </remarks>
HRESULT PhoneGetProviderData(__in HPHONECALL hCall, 
                             __deref_out_bcount(*pcbData) BYTE ** ppbData,
                             __out UINT * pcbData);

/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Returns the call state of a call
/// </summary>
/// <param name="hCall">[In] handle to the call</param>
/// <param name="pcsCallState">[Out] state of the call.</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="hCall"/>.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="pcsCallState"/>.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <seealso cref="PH_CALLSTATE" />
HRESULT PhoneGetCallState(__in HPHONECALL hCall, 
                          __out PH_CALLSTATE * pcsCallState);

/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Returns the call type of a call
/// </summary>
/// <param name="hCall">[In] handle to the call</param>
/// <param name="pctCallType">[Out] Type of the call, whether single or
/// conference.</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="hCall"/>.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="pctCallType"/>.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <seealso cref="PH_CALLTYPE" />
HRESULT PhoneGetCallType(__in HPHONECALL hCall, 
                         __out PH_CALLTYPE * pctCallType);

/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Returns the elapsed time of a call
/// </summary>
/// <param name="hCall">[In] handle to the call</param>
/// <param name="pcmsElapsedTime">[Out] Time elapsed since the call
/// started, in msecs.</param>
/// <param name="pftStartTime">[Out,Optional] Start time of the call in UTC format
/// Will be 0 if the call is not yet connected.</param>
/// <param name="pftEndTime">[Out,Optional] End time of the call in UTC format.
/// Will be 0 if the call hasn't ended yet.</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="hCall"/>.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="pcmsElapsedTime"/>.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneGetElapsedTime(__in HPHONECALL hCall,
                            __out UINT * pcmsElapsedTime, // time in ms
                            __out_opt FILETIME * pftStartTime,
                            __out_opt FILETIME * pftEndTime);

/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Returns the speakerphone state of the system
/// </summary>
/// <param name="pfSpeakerOn">[Out] SpeakerPhone state.</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="pfSpeakerOn"/>.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneGetSpeaker(__out BOOL * pfSpeakerOn);

/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Returns whether bluetooth HF is enabled or not.
/// </summary>
/// <param name="pfEnabled">[Out] Enabled State.</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="pfEnabled"/>.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneGetBluetoothHandsFreeState(__out BOOL * pfEnabled);

/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Get a set of operations that can be 
/// done on the phone at a given instant.
/// </summary>
/// <param name="hPhoneCall">[In,Optional] Handle to the call</param>
/// <param name="prgfActions">[In] Array of length <paramref name="pcActions" />. This contains
/// the availability of the first 'n' actions represented by the <see cref="PH_ACTION" />
/// where n = *<paramref name="pcActions" />. If *<paramref name="pcActions" /> is greater than 
/// PH_ACTION_COUNT, the rest of the entries wont be modified by the phone service.</param>
/// <param name="pcActions">[In,Out] As an input, it contains the array length of 
/// <paramref name="prgfActions" />. Phone system will fill in number of entries modified in
/// <paramref name="prgfActions"/> as an output. If the input <paramref name="pcActions" />
/// is less than PH_ACTION_COUNT, then phone system 
/// will only fill in that many actions in the <paramref name="prgfActions" />.
/// In order for the phone system to return all actions that are available at that moment,
/// length of <paramref name="prgfActions" /> should at least be PH_ACTION_COUNT. 
/// </param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="hPhoneCall"/>.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="prgfActions"/> or <paramref name="pcActions"/>
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <remarks>
/// If <paramref name="hPhoneCall"/> is NULL, phone call
/// actions that are globally available in the phone system are returned 
/// in <paramref name="pcActions" />. Otherwise, only the actions that can be
/// performed on <paramref name="hPhoneCall"/> are included in 
/// <paramref name="pcActions" />.
/// If the input value of <paramref name="pcActions" /> is PH_ACTION_COUNT and 
/// output value of <paramref name="pcActions" /> is less than PH_ACTION_COUNT,
/// then the version of the client may be higher than the version of the phone service.
/// Client app should ensure their code handles this scenario if they expect to 
/// maintain backward compatibility of their app.
/// </remarks> 
/// <example>
/// If there are 2 calls in the system that can be swapped and held such as
/// following:
/// <para>
/// hCallTalking is currently a talking call.
/// </para>
/// <para>
/// hCallHeld is currently held
/// </para>
/// then the following code snippet demonstrates what actions
/// are returned for <paramref name="hPhoneCall"/> == NULL and
/// <paramref name="hPhoneCall" /> is hCallTalking, hCallHeld.
/// <code>
/// void SomeFunction(HPHONECALL hCallTalking, HPHONECALL hCallHeld)
/// {
///     BOOL rgfActions[PH_ACTION_COUNT];
///     UINT cActions = PH_ACTION_COUNT;
///     HRESULT hr = S_OK;
///     // Invoking with NULL.
///     hr = PhoneGetAvailableActions(NULL, rgfActions, &cActions);
///     if (SUCCEEDED(hr))
///     {
///         // rgfActions indexed by PH_ACTION_MAKECALL, PH_ACTION_SWAP,
///         // PH_ACTION_HOLD, PH_ACTION_END and other such actions
///         // available on the phone system are set to TRUE.
///         if(rgfActions[PH_ACTION_MAKECALL])
///         {
///             //PhoneDial();
///         }
///     }
///     // Invoking with hCallTalking
///     hr = PhoneGetAvailableActions(hCallTalking, rgfActions, &cActions);
///     if (SUCCEEDED(hr))
///     {
///         // rgfActions indexed by PH_ACTION_SWAP, PH_ACTION_HOLD, PH_ACTION_END
///         // and other actions that can be performed on this call are set to TRUE.
///         // 
///         // PH_ACTION_MUTEON, PH_ACTION_SPEAKEROFF and other actions which
///         // are independent of the call handle specified may also be set 
///         // based on the device state.
///     }
///     // Invoking with hCallHeld
///     hr = PhoneGetAvailableActions(hCallHeld, rgfActions, PH_ACTION_COUNT);
///     if (SUCCEEDED(hr))
///     {
///         // rgfActions indexed by PH_ACTION_SWAP, PH_ACTION_END
///         // and other actions that can be performed on this call are set to TRUE.
///         // e.g. rgfActions[PH_ACTION_HOLD] == 0 since the call is already held.
///         // rgfActions[PH_ACTION_SWAP] or rgfActions[PH_ACTION_UNHOLD] will be TRUE.
///         // 
///         // PH_ACTION_MUTEON, PH_ACTION_SPEAKEROFF and other actions which
///         // are independent of the call handle specified may also be set 
///         // based on the device state.
///     }
/// }
/// </code>
/// </example>
/// <seealso cref="PH_ACTION" />
HRESULT PhoneGetAvailableActions(__in_opt HPHONECALL hPhoneCall,
                                 __out_ecount(*pcActions) BOOL * prgfActions, 
                                 __inout UINT * pcActions);

/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Returns whether an action is available or not
/// based on the current phone system state.
/// E.g. PH_ACTION_SWAP is an available action if
/// there are two calls in the phone system.
/// </summary>
/// <param name="hPhoneCall">[In,Optional] Handle to the phone call.</param>
/// <param name="action">[In] one of PH_ACTION values</param>
/// <returns>
/// <para>
/// TRUE - available 
/// </para>
/// <para>
/// FALSE - not available
/// </para>
/// </returns>
/// <remarks>
/// If <paramref name="hPhoneCall"/> is NULL, then
/// this API returns TRUE, if <paramref name="action"/> is available 
/// on the phone system.
/// Otherwise this API returns TRUE if <paramref name="action"/> can be
/// performed on <paramref name="hPhoneCall" or on the phone system/>.
/// </remarks>
/// <seealso cref="PH_ACTION">PH_ACTION </seealso>
BOOL PhoneIsActionAvailable(__in_opt HPHONECALL hPhoneCall, 
                            PH_ACTION action);


/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Returns the state of the phone
/// </summary>
/// <param name="pprgciCalls">[Out] Pointer to (PH_CALL_INFO *)</param>
/// <param name="pcCalls">[Out] Number of calls in <paramref name="pprgciCalls" />
/// </param>
/// <param name="pcntCalls">[Out,Optional] Pointer to PH_PHONE_CALL_COUNTS</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="pprgciCalls"/> or <paramref name="pcCalls"/>.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns> 
/// <remarks>
/// <paramref name="pprgciCalls" /> is callee allocated and caller should LocalFree it.
/// Conference calls are treated as a single entity, so the calls within
/// the conference will not be returned by this API. Use 
/// <see cref="PhoneGetCallsInConference" /> to query for the members
/// of the conference.
/// </remarks>
/// <seealso cref="PH_CALL_INFO" />
/// <seealso cref="PH_PHONE_CALL_COUNTS" />
/// <example>
/// <code>
/// void SomeFunction()
/// {
///     HRESULT hr = S_OK;
///     PH_PHONE_CALL_COUNTS cntCalls;
///     PH_CALL_INFO *rgci = NULL;
///     UINT cCalls = 0;
///     hr = PhoneGetState(&rgci, &cCalls, &cntCalls);
///     if (SUCCEEDED (hr) && (cCalls != 0))
///     {
///        // Do something with the calls.
///        LocalFree(rgci);
///     }
/// }
/// </code>
/// </example>
HRESULT PhoneGetState(__deref_out_ecount(*pcCalls)PH_CALL_INFO ** pprgciCalls, 
                      __out UINT *pcCalls,
                      __out_opt PH_PHONE_CALL_COUNTS * pcntCalls);

/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Returns the count of the various different types/states
/// of calls in the system.
/// </summary>
/// <param name="pcntCalls">[Out] Pointer to PH_PHONE_CALL_COUNTS</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="pcntCalls"/>.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <seealso cref="PH_PHONE_CALL_COUNTS" />
HRESULT PhoneGetCallCounts(__out PH_PHONE_CALL_COUNTS * pcntCalls);

/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Returns the current mute state of the system
/// </summary>
/// <param name="pfMute">[Out] Mute state</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="pfMute"/>.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneGetMute(__out BOOL * pfMute);

/// <topic_scope tref="Call_Status_APIs" />
/// <summary>
/// Returns an array of handle of all calls in a conference.
/// </summary>
/// <param name="hConference"> [In,Optional] handle to the conference.
/// If the input is NULL the phone system will choose the right
/// conference handle.</param>
/// <param name="pprgciCalls">[Out] Pointer to PH_CALL_INFO *</param>
/// <param name="pcCalls">[Out] Number of calls in <paramref name="pprgciCalls" /> 
/// </param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="hConference"/>.
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="pprgciCalls"/> or <paramref name="pcCalls" />
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns> 
/// <remarks>
/// <paramref name="pprgciCalls" /> is callee allocated and caller should LocalFree it.
/// </remarks>
/// <seealso cref="PH_CALL_INFO" />
HRESULT PhoneGetCallsInConference(__in_opt HPHONECALL hConference,
                                  __deref_out_ecount(*pcCalls) PH_CALL_INFO ** pprgciCalls, 
                                  __out UINT *pcCalls);

/// <topic_scope tref="Call_Notification_APIs" />
/// <summary>
/// Allows the caller to specify a callback function ptr that
/// will get called when the state of phone data changes or
/// when an error occurs.
/// </summary>
/// <param name="pfnChangeEventNotify">[In] callback function pointer</param>
/// <param name="prgchangeevent">[In] Pointer to an array of PH_EVENTs</param>
/// <param name="cEvents">[In] number of elements in <paramref name="prgchangeevent" />
/// array.</param>
/// <param name="dwUserData">[In,Optional] Any caller specific data that 
/// is sent to the callback notification function.</param>
/// <param name="phListener">[Out] Pointer to the listener handle</param>
/// <example>
/// Following snippet of code registers for PH_CHANGEEVENT_PHONESTATE , 
/// PH_CHANGEEVENT_ERROR and does something with it in
/// the notification.
/// <code>
///  UINT NotifyCallback(HPHONELISTENER hListener,
///                      DWORD_PTR dwUserData, 
///                      PH_CHANGEEVENT changeevent, 
///                      PH_ERROR error)
///  {
///      HRESULT hr = S_OK;
///      PH_PHONE_CALL_COUNTS cntCalls;
///      PH_CALL_INFO *rgci = NULL;
///      UINT cCalls = 0;
///      if (changeevent == PH_CHANGEEVENT_PHONESTATE)
///      {
///         hr = PhoneGetState(&rgci, &cCalls, &cntCalls);
///         if (SUCCEEDED (hr) && (cCalls != 0))
///         {
///             // Do something with the calls.
///             LocalFree(rgci);
///         }
///      }
///      else if (changeevent == PH_ERROR)
///      {
///          // There was some error.
///          // Log it.
///          //LogError(error);
///      }
///  }
///  SomeOtherFunction()
///  {
///      HLISTENER hListener = NULL;
///      PH_CHANGEEVENT rgchangeevent[2] = {PH_CHANGEEVENT_PHONESTATE, PH_CHANGEEVENT_ERROR};
///      // Please validate the return value.
///      PhoneAddListener(NotifyCallback, rgchangeevent, 2, NULL, &hListener);
///
///      // Later when there is no need for Notifications anymore 
///      // Unregister the listener as such
///      PhoneRemoveListener(hListener);
///  }
///  
/// </code>
/// </example>
/// <remarks>
/// The callback function will be called on a different thread. All listeners
/// in the same process share this thread. So do not block this thread, if there
/// are more than 1 listener in the process.
/// </remarks>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="prgchangeevent"/> or <paramref name="cEvents"/>
/// </para>
/// <para>
/// E_POINTER - Null <paramref name="prgchangeevent"/> or <paramref name="phListener"/> or 
/// <paramref name="pfnChangeEventNotify"/>.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneAddListener(__in PH_CHANGE_EVENT_NOTIFY_FUNCTION pfnChangeEventNotify, 
                         __in_ecount(cEvents) const PH_CHANGEEVENT * prgchangeevent, 
                         UINT cEvents, 
                         DWORD_PTR dwUserData,
                         __out HPHONELISTENER * phListener);

/// <topic_scope tref="Call_Notification_APIs" />
/// <summary>
/// Removes a given listener.
/// </summary>
/// <param name="hListener">[In] The HPHONELISTENER returned by
/// PhoneAddListener in phListener</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="hListener" />.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneRemoveListener(HPHONELISTENER hListener);

#define PH_VMAIL_COUNT_UNKNOWN ((UINT)-1)

/// <topic_scope tref="Types_Structures" />
/// <summary>
/// Basic information about a particular call service provider. Used in <see cref="PhoneGetProviderGeneralInfo" />
/// </summary>
typedef struct PH_PROVIDERGENERALINFO
{
    /// <summary>
    /// id of call service provider
    /// </summary>
    GUID guidProvider;
    /// <summary>
    /// Total number of lines exposed by the call service provider
    /// </summary>
    UINT cLines;
    /// <summary>
    /// Active outgoing line of this call service provider. Line numbers are 1 based
    /// </summary>
    UINT nActiveLine;
    /// <summary>
    /// True if this is the default call service provider for outgoing calls
    /// </summary>    
    BOOL fActiveProvider;
}PH_PROVIDERGENERALINFO;

/// <topic_scope tref="Types_Structures" />
/// <summary>
/// Information about a particular line of a call service provider. Used in <see cref="PhoneGetProviderLineInfo" />
/// </summary>
typedef struct PH_PROVIDERLINEINFO
{
    /// <summary>
    /// Voicemail number
    /// </summary>
    TCHAR szVoiceMailNumber[PH_CCH_DISPLAY_NUMBER];
    /// <summary>
    /// Subscriber number
    /// </summary>
    TCHAR szSubscriberNumber[PH_CCH_DISPLAY_NUMBER];
    /// <summary>
    /// id of call service provider
    /// </summary>
    GUID guidProvider;
    /// <summary>
    /// Line number. Line numbers are 1 based
    /// </summary>
    UINT nLine;
    /// <summary>
    /// Number of voicemail messages on this line. If this is PH_VMAIL_COUNT_UNKNOWN, the count of voicemail messages is unknown
    /// </summary>
    UINT cVoicemail;
    /// <summary>
    /// TRUE if this line is the active outgoing line of the call service provider identified by guidProvider;
    /// </summary>
    BOOL fActiveProviderLine;
    /// <summary>
    /// TRUE if unconditional call forwarding is turned on for this line
    /// </summary>
    BOOL fUnconditionalCallForwarding;
    /// <summary>
    /// TRUE if this line should be hidden from the UI i.e. the user should not be able to select this line as the default outgoing line
    /// </summary>
    BOOL fHidden;
}PH_PROVIDERLINEINFO;

/// <topic_scope tref="Types_Structures" />
/// <summary>
/// Information about the status of service on a particular line of a call service provider. Used in <see cref="PhoneGetProviderLineServiceInfo" />
/// </summary>
typedef struct PH_PROVIDERLINESERVICEINFO
{
    /// <summary>
    /// Current operator name
    /// </summary>
    TCHAR szOperatorName[PH_CCH_OPERATOR];
    /// <summary>
    /// Signal strength 
    /// </summary>
    UINT uSignalStrength;
    /// <summary>
    /// Registration state of the line
    /// </summary>
    PH_REGISTRATIONSTATE registrationstate;
    /// <summary>
    /// TRUE if service is on
    /// </summary>
    BOOL fServiceOn;
}PH_PROVIDERLINESERVICEINFO;

/// <topic_scope tref="Call_Service_Provider_Info_APIs" />
/// <summary>
/// Returns the number of call service providers installed on the device
/// </summary>
/// <returns>
/// Number of call service providers installed on the device. If <see cref="PhoneAPIInitialize" /> has not been called, it will return 0
/// </returns>
UINT PhoneGetProviderCount();

/// <topic_scope tref="Call_Service_Provider_Info_APIs" />
/// <summary>
/// Used to get the id of call service provider, given the call service provider's index
/// It should be used together with <see cref="PhoneGetProviderCount" /> to enumerate the ids of all the call service providers
/// </summary>
/// <param name="index">[In] Index of the call service provider</param>
/// <param name="pguidProvider">[Out] Pointer to id of the call service provider</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="index" /> i.e. the index is greater than or equal to the value returned by <see cref="PhoneGetProviderCount" />. 
/// Call Servicer Provider indices are 0 based. Also returns this error if <paramref name="pguidProvider" /> is invalid.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
HRESULT PhoneGetProviderID(UINT index, GUID *pguidProvider);

/// <topic_scope tref="Call_Service_Provider_Info_APIs" />
/// <summary>
/// Gets general information describing the specified call service provider
/// </summary>
/// <param name="guidProvider">[In] id of the call service provider</param>
/// <param name="pprovGenInfo">[Out] pointer to <see cref="PH_PROVIDERGENERALINFO" /> into which the information about the particular call service provider is written</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_INVALIDARG - Invalid or <paramref name="pprovGenInfo" /> .
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <seealso cref="PH_PROVIDERGENERALINFO" />
HRESULT PhoneGetProviderGeneralInfo(REFGUID guidProvider, PH_PROVIDERGENERALINFO * pprovGenInfo);

/// <topic_scope tref="Call_Service_Provider_Info_APIs" />
/// <summary>
/// Gets general information about the specified line of the call service provider
/// </summary>
/// <param name="guidProvider">id of the call service provider</param>
/// <param name="nLine">[In] Line number</param>
/// <param name="pprovLineInfo">[Out] pointer to <see cref="PH_PROVIDERLINEINFO" /> into which the information about the particular line is written</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="nLine" /> or <paramref name="pprovLineInfo" />.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <seealso cref="PH_PROVIDERLINEINFO" />
HRESULT PhoneGetProviderLineInfo(REFGUID guidProvider, UINT nLine, PH_PROVIDERLINEINFO *pprovLineInfo);

/// <topic_scope tref="Call_Service_Provider_Info_APIs" />
/// <summary>
/// Gets the state of service on the specified line of the call service provider
/// </summary>
/// <param name="guidProvider">id of the call service provider</param>
/// <param name="nLine">[In] Line number</param>
/// <param name="pprovServiceInfo">[Out] pointer to <see cref="PH_PROVIDERLINESERVICEINFO" /> into which the service information of the specified line is written</param>
/// <returns>
/// <para>
/// S_OK - Success.
/// </para>
/// <para>
/// E_INVALIDARG - Invalid <paramref name="nLine" /> or <paramref name="pprovServiceInfo" />.
/// </para>
/// <para>
/// E_NOTREADY - Phone System is not ready.
/// </para>
/// <para>
/// E_FAIL - Otherwise.
/// </para>
/// </returns>
/// <seealso cref="PH_PROVIDERLINESERVICEINFO" />
HRESULT PhoneGetProviderLineServiceInfo(REFGUID guidProvider, UINT nLine, PH_PROVIDERLINESERVICEINFO* pprovServiceInfo);

#ifdef __cplusplus
}
#endif

#endif // _PHONE_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\platform.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//
//+---------------------------------------------------------------------------
//
//  Copyright (C) Microsoft Corporation, 1997-1998.
//
//  File:       platform.h
//
//  Contents:   Macros for portable access to platform dependent values.
//
//
// This file contains macros for easy cross platform developing.
// There are macros for compiler differences and platform/layer differences.
//
//----------------------------------------------------------------------------


#ifndef __PLATFORM_H_
#define __PLATFORM_H_

#ifdef __cplusplus
   // +++ Unaligned memory access templates/macros
#  include <unaligned.hpp>
#endif

////////////////////////////////////////////////////////////////////
//
// Global defines (should be moved to NT public headers)
//

#define VER_PLATFORM_WIN32_UNIX 9

////////////////////////////////////////////////////////////////////
//
// Compiler differences
//

#if !defined(_MSC_VER) && !defined(__APOGEE__)
    // For compilers lacking VC++ extensions

#   define __cdecl
#   define INLINEOP      /* Inline operators not available IEUNIX */

#   ifdef UNIX
        // Unix specific compiler problems
#       define UNSIZED_ARRAY 1
#   else
#       define UNSIZED_ARRAY
#   endif // UNIX

#else // !_MSC_VER

    // VC++ compilers

#   define INLINEOP inline
#   define UNSIZED_ARRAY

#endif

#define EMPTY_SIZE UNSIZED_ARRAY

////////////////////////////////////////////////////////////////////
//
// Platform / Layer dependent sections.
//
// NOTE! #ifdefing based on WIN32 is invalid as some layers define
//       WIN32 for compatability.
//

#define ENDEXCEPT  __endexcept
#define ENDFINALLY __endfinally

#if !defined( UNIX )
#define __endexcept
#define __endfinally
#endif // UNIX

// +++ File Separators

#if defined( UNIX )
// UNIX

#  ifndef FILENAME_SEPARATOR
#  define FILENAME_SEPARATOR       '/'
#  endif

#  ifndef FILENAME_SEPARATOR_W
#  define FILENAME_SEPARATOR_W     L'/'
#  endif

#  ifndef FILENAME_SEPARATOR_STR
#  define FILENAME_SEPARATOR_STR   "/"
#  endif

#  ifndef FILENAME_SEPARATOR_STR_W
#  define FILENAME_SEPARATOR_STR_W L"/"
#  endif

#  ifndef PATH_SEPARATOR
#  define PATH_SEPARATOR           ':'
#  endif

#  ifndef PATH_SEPARATOR_W
#  define PATH_SEPARATOR_W         L':'
#  endif

#  ifndef PATH_SEPARATOR_STR
#  define PATH_SEPARATOR_STR       ":"
#  endif

#  ifndef PATH_SEPARATOR_STR_W
#  define PATH_SEPARATOR_STR_W     L":"
#  endif

#  ifndef LINE_SEPARATOR_STR
#  define LINE_SEPARATOR_STR       "\n"
#  endif

#  ifndef LINE_SEPARATOR_STR_W
#  define LINE_SEPARATOR_STR_W     L"\n"
#  endif

#else // UNIX

// Windows / MAC

#  ifndef FILENAME_SEPARATOR
#  define FILENAME_SEPARATOR       '\\'
#  endif

#  ifndef FILENAME_SEPARATOR_W
#  define FILENAME_SEPARATOR_W     L'\\'
#  endif

#  ifndef FILENAME_SEPARATOR_STR
#  define FILENAME_SEPARATOR_STR   "\\"
#  endif

#  ifndef FILENAME_SEPARATOR_STR_W
#  define FILENAME_SEPARATOR_STR_W L"\\"
#  endif

#  ifndef PATH_SEPARATOR
#  define PATH_SEPARATOR           ';'
#  endif

#  ifndef PATH_SEPARATOR_W
#  define PATH_SEPARATOR_W         L';'
#  endif

#  ifndef PATH_SEPARATOR_STR
#  define PATH_SEPARATOR_STR       ";"
#  endif

#  ifndef PATH_SEPARATOR_STR_W
#  define PATH_SEPARATOR_STR_W     L";"
#  endif

#  ifndef LINE_SEPARATOR_STR
#  define LINE_SEPARATOR_STR       "\r\n"
#  endif

#  ifndef LINE_SEPARATOR_STR_W
#  define LINE_SEPARATOR_STR_W     L"\r\n"
#  endif

#endif // Windows / MAC



#ifdef UNIX


#  define PLATFORM_ACCEL_KEY ALT
#  define PLATFORM_ACCEL_STR "Alt"  // --  Look in rc.sed files
#  define FACCELKEY FALT

#define VK_OEM_SLASH 0xBF

#else   /* UNIX  */

#define INTERFACE_PROLOGUE(a)
#define INTERFACE_EPILOGUE(a)
#define INTERFACE_PROLOGUE_(a,b)
#define INTERFACE_EPILOGUE_(a,b)


#  define PLATFORM_ACCEL_KEY CONTROL
#  define PLATFORM_ACCEL_STR "Ctrl"  // --  Look in rc.sed files
#  define FACCELKEY FCONTROL

#define VK_OEM_SLASH '/'

#endif  /* UNIX */

#define MAKELONGLONG(low,high) ((LONGLONG)(((DWORD)(low)) | ((LONGLONG)((DWORD)(high))) << 32))

#ifdef BIG_ENDIAN
#define MAKE_LI(low,high) { high, low }
#define PALETTE_ENTRY( r, g, b, f )  { f, b, g, r }
#else
#define MAKE_LI(low,high) { low, high }
#define PALETTE_ENTRY( r, g, b, f )  { r, g, b, f }
#endif

#endif // __PLATFORM_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\photosharing.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//

#ifndef __PHOTOSHARING_H__
#define __PHOTOSHARING_H__

#if (_MSC_VER >= 1000)
#pragma once
#endif

/// <summary>
///     This function should be exported by an uploading component DLL,
///     it will be called by photo sharing application to upload
///     photo files to specific web site.
/// </summary>
/// <param name="hwndParent">
///     Handle to the parent window, which will be photo sharing
///     application's UI. The uploading component can use it
///     to display its own UI.
///     Photo sharing application will never pass a NULL value for
///     this parameter.
/// </param>
/// <param name="rgpszFileName">
///    A pointer to the array of photo file name, which are the
///    files need to be uploaded.
///    Photo sharing application will never pass a NULL pointer for
///    this parameter.
/// </param>
/// <param name="cCount">
///    The length of "rgpszFileName" array, which is the number of
///    the files to be sent.
///    This parameter will always be an integer larger than or
///    equal to 1.
/// </param>
typedef HRESULT (APIENTRY *LPPHOTOSHARINGUPLOADPROC)(HWND     hwndParent,
                                                     LPCTSTR* rgpszFileName,
                                                     DWORD    cCount);

#endif // __PHOTOSHARING_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\pkgmgr.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


/* File created by MIDL compiler version 3.00.44 */
/* at Fri Jul 11 15:30:21 1997
 */
/* Compiler settings for pkgmgr.idl:
    Os (OptLev=s), W1, Zp8, env=Win32, ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
*/
//@@MIDL_FILE_HEADING(  )
#include "rpc.h"
#include "rpcndr.h"

#ifndef __pkgmgr_h__
#define __pkgmgr_h__

#ifdef __cplusplus
extern "C"{
#endif 

/* Forward Declarations */ 

#ifndef __IEnumCodeStoreDBEntry_FWD_DEFINED__
#define __IEnumCodeStoreDBEntry_FWD_DEFINED__
typedef interface IEnumCodeStoreDBEntry IEnumCodeStoreDBEntry;
#endif 	/* __IEnumCodeStoreDBEntry_FWD_DEFINED__ */


#ifndef __ICodeStoreDBEntry_FWD_DEFINED__
#define __ICodeStoreDBEntry_FWD_DEFINED__
typedef interface ICodeStoreDBEntry ICodeStoreDBEntry;
#endif 	/* __ICodeStoreDBEntry_FWD_DEFINED__ */


#ifndef __ICodeStoreDB_FWD_DEFINED__
#define __ICodeStoreDB_FWD_DEFINED__
typedef interface ICodeStoreDB ICodeStoreDB;
#endif 	/* __ICodeStoreDB_FWD_DEFINED__ */


#ifndef __IJavaPackageManager_FWD_DEFINED__
#define __IJavaPackageManager_FWD_DEFINED__
typedef interface IJavaPackageManager IJavaPackageManager;
#endif 	/* __IJavaPackageManager_FWD_DEFINED__ */


#ifndef __IJavaPackage_FWD_DEFINED__
#define __IJavaPackage_FWD_DEFINED__
typedef interface IJavaPackage IJavaPackage;
#endif 	/* __IJavaPackage_FWD_DEFINED__ */


#ifndef __ICreateJavaPackageMgr_FWD_DEFINED__
#define __ICreateJavaPackageMgr_FWD_DEFINED__
typedef interface ICreateJavaPackageMgr ICreateJavaPackageMgr;
#endif 	/* __ICreateJavaPackageMgr_FWD_DEFINED__ */


#ifndef __IJavaFile_FWD_DEFINED__
#define __IJavaFile_FWD_DEFINED__
typedef interface IJavaFile IJavaFile;
#endif 	/* __IJavaFile_FWD_DEFINED__ */


#ifndef __IEnumJavaPackage_FWD_DEFINED__
#define __IEnumJavaPackage_FWD_DEFINED__
typedef interface IEnumJavaPackage IEnumJavaPackage;
#endif 	/* __IEnumJavaPackage_FWD_DEFINED__ */


#ifndef __IEnumJavaFile_FWD_DEFINED__
#define __IEnumJavaFile_FWD_DEFINED__
typedef interface IEnumJavaFile IEnumJavaFile;
#endif 	/* __IEnumJavaFile_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/****************************************
 * Generated header for interface: __MIDL__intf_0000
 * at Fri Jul 11 15:30:21 1997
 * using MIDL 3.00.44
 ****************************************/
/* [local] */ 







typedef const BYTE __RPC_FAR *LPCBYTE;

typedef /* [public] */ 
enum __MIDL___MIDL__intf_0000_0001
    {	JPMPII_SYSTEMCLASS	= 0,
	JPMPII_NONSYSTEMCLASS	= 1,
	JPMPII_NEEDSTRUSTEDSOURCE	= 2,
	ALL_JPMPII_FLAGS	= JPMPII_SYSTEMCLASS | JPMPII_NONSYSTEMCLASS | JPMPII_NEEDSTRUSTEDSOURCE
    }	JPMPII_FLAGS;

typedef /* [public] */ 
enum __MIDL___MIDL__intf_0000_0002
    {	JPMINST_NOVERSIONCHECK	= 1,
	JPMINST_NOSIGNERCHECK	= 2,
	JPMINST_AUTODETECTPACKAGES	= 4,
	JPMINST_DELETEINPUTFILE	= 8,
	ALL_JPMINST_FLAGS	= JPMINST_NOVERSIONCHECK | JPMINST_NOSIGNERCHECK | JPMINST_AUTODETECTPACKAGES | JPMINST_DELETEINPUTFILE
    }	JPMINST_FLAGS;

typedef /* [public] */ 
enum __MIDL___MIDL__intf_0000_0003
    {	JPMINST_CAB	= 0,
	JPMINST_ZIP	= 1,
	JPMINST_JAR	= 2
    }	JPMINST_FILETYPES;

typedef struct  tagPACKAGEINSTALLINFO
    {
    DWORD cbStruct;
    LPCOLESTR pszPackageName;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwFlags;
    LPCOLESTR pszCodebaseURL;
    LPCOLESTR pszDistributionUnit;
    LPUNKNOWN pUnknown;
    HRESULT result;
    }	PACKAGEINSTALLINFO;

typedef /* [unique] */ PACKAGEINSTALLINFO __RPC_FAR *LPPACKAGEINSTALLINFO;

typedef /* [unique] */ const PACKAGEINSTALLINFO __RPC_FAR *LPCPACKAGEINSTALLINFO;

typedef struct  tagPACKAGESECURITYINFO
    {
    DWORD cbStruct;
    LPCBYTE pCapabilities;
    DWORD cbCapabilities;
    LPCBYTE pSigner;
    DWORD cbSigner;
    BOOL fAllPermissions;
    }	PACKAGESECURITYINFO;

typedef /* [unique] */ const PACKAGESECURITYINFO __RPC_FAR *LPCPACKAGESECURITYINFO;



extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_s_ifspec;


#ifndef __JPKGMGR_LIBRARY_DEFINED__
#define __JPKGMGR_LIBRARY_DEFINED__

/****************************************
 * Generated header for library: JPKGMGR
 * at Fri Jul 11 15:30:21 1997
 * using MIDL 3.00.44
 ****************************************/
/* [helpstring][version][uuid] */ 


typedef /* [public] */ 
enum __MIDL___MIDL__intf_0071_0001
    {	CRF_REMOVECHILDREN	= 1,
	CRF_REMOVEVALUESONLY	= 2,
	CRF_REMOVEEMPTYPARENTSALSO	= 4
    }	CSDB_REMOVE_FLAGS;

typedef /* [public] */ 
enum __MIDL___MIDL__intf_0071_0002
    {	CGF_FULLYQUALIFIED	= 1
    }	CSDB_GETNAME_FLAGS;

typedef /* [public] */ 
enum __MIDL___MIDL__intf_0073_0001
    {	JPMFI_NEEDS_TRUSTED_SOURCE	= 0x1,
	JPMFI_IS_STREAM	= 0x2,
	JPMFI_IS_PE_NATIVE	= 0x8,
	JPMFI_FROM_PKG_DATABASE	= 0x10,
	JPMFI_FROM_CLASSPATH	= 0x20
    }	JPM_FILEINFO_FLAGS;

typedef /* [public] */ 
enum __MIDL___MIDL__intf_0073_0002
    {	JPMGFN_SIMPLE	= 1,
	JPMGFN_FULLYQUALIFIED	= 2,
	JPMGFN_LOCALFILEPATH	= 3
    }	JPM_GETFILENAME_TYPE;


EXTERN_C const IID LIBID_JPKGMGR;

#ifndef __IEnumCodeStoreDBEntry_INTERFACE_DEFINED__
#define __IEnumCodeStoreDBEntry_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IEnumCodeStoreDBEntry
 * at Fri Jul 11 15:30:21 1997
 * using MIDL 3.00.44
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IEnumCodeStoreDBEntry __RPC_FAR *LPENUMCODESTOREDBENTRY;


EXTERN_C const IID IID_IEnumCodeStoreDBEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IEnumCodeStoreDBEntry : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumCodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumCodeStoreDBEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IEnumCodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IEnumCodeStoreDBEntry __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IEnumCodeStoreDBEntry __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Next )( 
            IEnumCodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Skip )( 
            IEnumCodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            IEnumCodeStoreDBEntry __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IEnumCodeStoreDBEntry __RPC_FAR * This,
            /* [out] */ IEnumCodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppenum);
        
        END_INTERFACE
    } IEnumCodeStoreDBEntryVtbl;

    interface IEnumCodeStoreDBEntry
    {
        CONST_VTBL struct IEnumCodeStoreDBEntryVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumCodeStoreDBEntry_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumCodeStoreDBEntry_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumCodeStoreDBEntry_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumCodeStoreDBEntry_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumCodeStoreDBEntry_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumCodeStoreDBEntry_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumCodeStoreDBEntry_Clone(This,ppenum)	\
    (This)->lpVtbl -> Clone(This,ppenum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumCodeStoreDBEntry_Next_Proxy( 
    IEnumCodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


void __RPC_STUB IEnumCodeStoreDBEntry_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumCodeStoreDBEntry_Skip_Proxy( 
    IEnumCodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumCodeStoreDBEntry_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumCodeStoreDBEntry_Reset_Proxy( 
    IEnumCodeStoreDBEntry __RPC_FAR * This);


void __RPC_STUB IEnumCodeStoreDBEntry_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumCodeStoreDBEntry_Clone_Proxy( 
    IEnumCodeStoreDBEntry __RPC_FAR * This,
    /* [out] */ IEnumCodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppenum);


void __RPC_STUB IEnumCodeStoreDBEntry_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumCodeStoreDBEntry_INTERFACE_DEFINED__ */


#ifndef __ICodeStoreDBEntry_INTERFACE_DEFINED__
#define __ICodeStoreDBEntry_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ICodeStoreDBEntry
 * at Fri Jul 11 15:30:21 1997
 * using MIDL 3.00.44
 ****************************************/
/* [unique][helpstring][uuid][object] */ 



EXTERN_C const IID IID_ICodeStoreDBEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ICodeStoreDBEntry : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ BSTR __RPC_FAR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateChild( 
            /* [in] */ LPCOLESTR pszName,
            /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveChild( 
            /* [in] */ LPCOLESTR pszName,
            DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetChild( 
            /* [in] */ LPCOLESTR pszName,
            /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumChildren( 
            /* [retval][out] */ IEnumCodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParent( 
            /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppParent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProperty( 
            /* [in] */ LPCOLESTR pszName,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarProperty) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProperty( 
            /* [in] */ LPCOLESTR pszName,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarProperty) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteProperty( 
            /* [in] */ LPCOLESTR pszName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDWORDPropertyA( 
            /* [in] */ LPCSTR pszName,
            /* [out] */ DWORD __RPC_FAR *pVal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDWORDPropertyA( 
            /* [in] */ LPCSTR pszName,
            /* [in] */ DWORD dwVal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStringPropertyA( 
            /* [in] */ LPCSTR pszName,
            /* [out] */ LPSTR pszVal,
            /* [in] */ DWORD cbVal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetStringPropertyA( 
            /* [in] */ LPCSTR pszName,
            /* [in] */ LPCSTR pszVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICodeStoreDBEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ICodeStoreDBEntry __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ICodeStoreDBEntry __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetName )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ BSTR __RPC_FAR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateChild )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszName,
            /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RemoveChild )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszName,
            DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetChild )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszName,
            /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumChildren )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [retval][out] */ IEnumCodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetParent )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppParent);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetProperty )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszName,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarProperty);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetProperty )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszName,
            /* [retval][out] */ VARIANT __RPC_FAR *pvarProperty);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *DeleteProperty )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDWORDPropertyA )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ LPCSTR pszName,
            /* [out] */ DWORD __RPC_FAR *pVal);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetDWORDPropertyA )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ LPCSTR pszName,
            /* [in] */ DWORD dwVal);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetStringPropertyA )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ LPCSTR pszName,
            /* [out] */ LPSTR pszVal,
            /* [in] */ DWORD cbVal);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetStringPropertyA )( 
            ICodeStoreDBEntry __RPC_FAR * This,
            /* [in] */ LPCSTR pszName,
            /* [in] */ LPCSTR pszVal);
        
        END_INTERFACE
    } ICodeStoreDBEntryVtbl;

    interface ICodeStoreDBEntry
    {
        CONST_VTBL struct ICodeStoreDBEntryVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICodeStoreDBEntry_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ICodeStoreDBEntry_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ICodeStoreDBEntry_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ICodeStoreDBEntry_GetName(This,dwFlags,pbstrName)	\
    (This)->lpVtbl -> GetName(This,dwFlags,pbstrName)

#define ICodeStoreDBEntry_CreateChild(This,pszName,ppEntry)	\
    (This)->lpVtbl -> CreateChild(This,pszName,ppEntry)

#define ICodeStoreDBEntry_RemoveChild(This,pszName,dwFlags)	\
    (This)->lpVtbl -> RemoveChild(This,pszName,dwFlags)

#define ICodeStoreDBEntry_GetChild(This,pszName,ppEntry)	\
    (This)->lpVtbl -> GetChild(This,pszName,ppEntry)

#define ICodeStoreDBEntry_EnumChildren(This,ppEntry)	\
    (This)->lpVtbl -> EnumChildren(This,ppEntry)

#define ICodeStoreDBEntry_GetParent(This,ppParent)	\
    (This)->lpVtbl -> GetParent(This,ppParent)

#define ICodeStoreDBEntry_GetProperty(This,pszName,pvarProperty)	\
    (This)->lpVtbl -> GetProperty(This,pszName,pvarProperty)

#define ICodeStoreDBEntry_SetProperty(This,pszName,pvarProperty)	\
    (This)->lpVtbl -> SetProperty(This,pszName,pvarProperty)

#define ICodeStoreDBEntry_DeleteProperty(This,pszName)	\
    (This)->lpVtbl -> DeleteProperty(This,pszName)

#define ICodeStoreDBEntry_GetDWORDPropertyA(This,pszName,pVal)	\
    (This)->lpVtbl -> GetDWORDPropertyA(This,pszName,pVal)

#define ICodeStoreDBEntry_SetDWORDPropertyA(This,pszName,dwVal)	\
    (This)->lpVtbl -> SetDWORDPropertyA(This,pszName,dwVal)

#define ICodeStoreDBEntry_GetStringPropertyA(This,pszName,pszVal,cbVal)	\
    (This)->lpVtbl -> GetStringPropertyA(This,pszName,pszVal,cbVal)

#define ICodeStoreDBEntry_SetStringPropertyA(This,pszName,pszVal)	\
    (This)->lpVtbl -> SetStringPropertyA(This,pszName,pszVal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_GetName_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ DWORD dwFlags,
    /* [retval][out] */ BSTR __RPC_FAR *pbstrName);


void __RPC_STUB ICodeStoreDBEntry_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_CreateChild_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszName,
    /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);


void __RPC_STUB ICodeStoreDBEntry_CreateChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_RemoveChild_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszName,
    DWORD dwFlags);


void __RPC_STUB ICodeStoreDBEntry_RemoveChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_GetChild_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszName,
    /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);


void __RPC_STUB ICodeStoreDBEntry_GetChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_EnumChildren_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [retval][out] */ IEnumCodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);


void __RPC_STUB ICodeStoreDBEntry_EnumChildren_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_GetParent_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppParent);


void __RPC_STUB ICodeStoreDBEntry_GetParent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_GetProperty_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszName,
    /* [retval][out] */ VARIANT __RPC_FAR *pvarProperty);


void __RPC_STUB ICodeStoreDBEntry_GetProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_SetProperty_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszName,
    /* [retval][out] */ VARIANT __RPC_FAR *pvarProperty);


void __RPC_STUB ICodeStoreDBEntry_SetProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_DeleteProperty_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszName);


void __RPC_STUB ICodeStoreDBEntry_DeleteProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_GetDWORDPropertyA_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ LPCSTR pszName,
    /* [out] */ DWORD __RPC_FAR *pVal);


void __RPC_STUB ICodeStoreDBEntry_GetDWORDPropertyA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_SetDWORDPropertyA_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ LPCSTR pszName,
    /* [in] */ DWORD dwVal);


void __RPC_STUB ICodeStoreDBEntry_SetDWORDPropertyA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_GetStringPropertyA_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ LPCSTR pszName,
    /* [out] */ LPSTR pszVal,
    /* [in] */ DWORD cbVal);


void __RPC_STUB ICodeStoreDBEntry_GetStringPropertyA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDBEntry_SetStringPropertyA_Proxy( 
    ICodeStoreDBEntry __RPC_FAR * This,
    /* [in] */ LPCSTR pszName,
    /* [in] */ LPCSTR pszVal);


void __RPC_STUB ICodeStoreDBEntry_SetStringPropertyA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ICodeStoreDBEntry_INTERFACE_DEFINED__ */


#ifndef __ICodeStoreDB_INTERFACE_DEFINED__
#define __ICodeStoreDB_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ICodeStoreDB
 * at Fri Jul 11 15:30:21 1997
 * using MIDL 3.00.44
 ****************************************/
/* [unique][helpstring][uuid][object] */ 



EXTERN_C const IID IID_ICodeStoreDB;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ICodeStoreDB : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateEntry( 
            /* [in] */ LPCOLESTR pszName,
            /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveEntry( 
            /* [in] */ LPCOLESTR pszName,
            DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEntry( 
            /* [in] */ LPCOLESTR pszName,
            /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumRootEntries( 
            /* [retval][out] */ IEnumCodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICodeStoreDBVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ICodeStoreDB __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ICodeStoreDB __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ICodeStoreDB __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateEntry )( 
            ICodeStoreDB __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszName,
            /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RemoveEntry )( 
            ICodeStoreDB __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszName,
            DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetEntry )( 
            ICodeStoreDB __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszName,
            /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumRootEntries )( 
            ICodeStoreDB __RPC_FAR * This,
            /* [retval][out] */ IEnumCodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);
        
        END_INTERFACE
    } ICodeStoreDBVtbl;

    interface ICodeStoreDB
    {
        CONST_VTBL struct ICodeStoreDBVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICodeStoreDB_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ICodeStoreDB_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ICodeStoreDB_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ICodeStoreDB_CreateEntry(This,pszName,ppEntry)	\
    (This)->lpVtbl -> CreateEntry(This,pszName,ppEntry)

#define ICodeStoreDB_RemoveEntry(This,pszName,dwFlags)	\
    (This)->lpVtbl -> RemoveEntry(This,pszName,dwFlags)

#define ICodeStoreDB_GetEntry(This,pszName,ppEntry)	\
    (This)->lpVtbl -> GetEntry(This,pszName,ppEntry)

#define ICodeStoreDB_EnumRootEntries(This,ppEntry)	\
    (This)->lpVtbl -> EnumRootEntries(This,ppEntry)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ICodeStoreDB_CreateEntry_Proxy( 
    ICodeStoreDB __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszName,
    /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);


void __RPC_STUB ICodeStoreDB_CreateEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDB_RemoveEntry_Proxy( 
    ICodeStoreDB __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszName,
    DWORD dwFlags);


void __RPC_STUB ICodeStoreDB_RemoveEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDB_GetEntry_Proxy( 
    ICodeStoreDB __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszName,
    /* [retval][out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);


void __RPC_STUB ICodeStoreDB_GetEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICodeStoreDB_EnumRootEntries_Proxy( 
    ICodeStoreDB __RPC_FAR * This,
    /* [retval][out] */ IEnumCodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);


void __RPC_STUB ICodeStoreDB_EnumRootEntries_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ICodeStoreDB_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CLSID_CodeStoreDB;

class CLSID_CodeStoreDB;
#endif

#ifndef __IJavaPackageManager_INTERFACE_DEFINED__
#define __IJavaPackageManager_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IJavaPackageManager
 * at Fri Jul 11 15:30:21 1997
 * using MIDL 3.00.44
 ****************************************/
/* [unique][helpstring][uuid][object] */ 



EXTERN_C const IID IID_IJavaPackageManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IJavaPackageManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InstallPackage( 
            /* [in] */ LPCOLESTR pszFileName,
            /* [in] */ LPCOLESTR pszNamespace,
            /* [in] */ DWORD dwFileType,
            /* [out][in] */ LPPACKAGEINSTALLINFO pPackageInfo,
            /* [in] */ UINT cPackages,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPCPACKAGESECURITYINFO pSecurityInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UninstallPackage( 
            /* [in] */ LPCOLESTR pszPackageName,
            /* [in] */ LPCOLESTR pszNamespace,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumPackages( 
            /* [in] */ LPCOLESTR pszNamespace,
            /* [retval][out] */ IEnumJavaPackage __RPC_FAR *__RPC_FAR *ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPackage( 
            /* [in] */ LPCOLESTR pszPackageName,
            /* [in] */ LPCOLESTR pszNamespace,
            /* [retval][out] */ IJavaPackage __RPC_FAR *__RPC_FAR *ppPackage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFile( 
            /* [in] */ LPCOLESTR pszFileName,
            /* [in] */ LPCOLESTR pszNamespace,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IJavaFile __RPC_FAR *__RPC_FAR *ppFile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExplicitClassPath( 
            /* [out] */ BSTR __RPC_FAR *pbstrPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetExplicitClassPath( 
            /* [in] */ LPCOLESTR pszPath,
            /* [in] */ BOOL fAppend) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCurrentDirectory( 
            /* [in] */ LPCOLESTR pszDir) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IJavaPackageManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IJavaPackageManager __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IJavaPackageManager __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IJavaPackageManager __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InstallPackage )( 
            IJavaPackageManager __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszFileName,
            /* [in] */ LPCOLESTR pszNamespace,
            /* [in] */ DWORD dwFileType,
            /* [out][in] */ LPPACKAGEINSTALLINFO pPackageInfo,
            /* [in] */ UINT cPackages,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPCPACKAGESECURITYINFO pSecurityInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UninstallPackage )( 
            IJavaPackageManager __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszPackageName,
            /* [in] */ LPCOLESTR pszNamespace,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumPackages )( 
            IJavaPackageManager __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszNamespace,
            /* [retval][out] */ IEnumJavaPackage __RPC_FAR *__RPC_FAR *ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPackage )( 
            IJavaPackageManager __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszPackageName,
            /* [in] */ LPCOLESTR pszNamespace,
            /* [retval][out] */ IJavaPackage __RPC_FAR *__RPC_FAR *ppPackage);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetFile )( 
            IJavaPackageManager __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszFileName,
            /* [in] */ LPCOLESTR pszNamespace,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IJavaFile __RPC_FAR *__RPC_FAR *ppFile);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetExplicitClassPath )( 
            IJavaPackageManager __RPC_FAR * This,
            /* [out] */ BSTR __RPC_FAR *pbstrPath);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetExplicitClassPath )( 
            IJavaPackageManager __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszPath,
            /* [in] */ BOOL fAppend);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetCurrentDirectory )( 
            IJavaPackageManager __RPC_FAR * This,
            /* [in] */ LPCOLESTR pszDir);
        
        END_INTERFACE
    } IJavaPackageManagerVtbl;

    interface IJavaPackageManager
    {
        CONST_VTBL struct IJavaPackageManagerVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IJavaPackageManager_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IJavaPackageManager_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IJavaPackageManager_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IJavaPackageManager_InstallPackage(This,pszFileName,pszNamespace,dwFileType,pPackageInfo,cPackages,dwFlags,pSecurityInfo)	\
    (This)->lpVtbl -> InstallPackage(This,pszFileName,pszNamespace,dwFileType,pPackageInfo,cPackages,dwFlags,pSecurityInfo)

#define IJavaPackageManager_UninstallPackage(This,pszPackageName,pszNamespace,dwFlags)	\
    (This)->lpVtbl -> UninstallPackage(This,pszPackageName,pszNamespace,dwFlags)

#define IJavaPackageManager_EnumPackages(This,pszNamespace,ppEnum)	\
    (This)->lpVtbl -> EnumPackages(This,pszNamespace,ppEnum)

#define IJavaPackageManager_GetPackage(This,pszPackageName,pszNamespace,ppPackage)	\
    (This)->lpVtbl -> GetPackage(This,pszPackageName,pszNamespace,ppPackage)

#define IJavaPackageManager_GetFile(This,pszFileName,pszNamespace,dwFlags,ppFile)	\
    (This)->lpVtbl -> GetFile(This,pszFileName,pszNamespace,dwFlags,ppFile)

#define IJavaPackageManager_GetExplicitClassPath(This,pbstrPath)	\
    (This)->lpVtbl -> GetExplicitClassPath(This,pbstrPath)

#define IJavaPackageManager_SetExplicitClassPath(This,pszPath,fAppend)	\
    (This)->lpVtbl -> SetExplicitClassPath(This,pszPath,fAppend)

#define IJavaPackageManager_SetCurrentDirectory(This,pszDir)	\
    (This)->lpVtbl -> SetCurrentDirectory(This,pszDir)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IJavaPackageManager_InstallPackage_Proxy( 
    IJavaPackageManager __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszFileName,
    /* [in] */ LPCOLESTR pszNamespace,
    /* [in] */ DWORD dwFileType,
    /* [out][in] */ LPPACKAGEINSTALLINFO pPackageInfo,
    /* [in] */ UINT cPackages,
    /* [in] */ DWORD dwFlags,
    /* [in] */ LPCPACKAGESECURITYINFO pSecurityInfo);


void __RPC_STUB IJavaPackageManager_InstallPackage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackageManager_UninstallPackage_Proxy( 
    IJavaPackageManager __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszPackageName,
    /* [in] */ LPCOLESTR pszNamespace,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IJavaPackageManager_UninstallPackage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackageManager_EnumPackages_Proxy( 
    IJavaPackageManager __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszNamespace,
    /* [retval][out] */ IEnumJavaPackage __RPC_FAR *__RPC_FAR *ppEnum);


void __RPC_STUB IJavaPackageManager_EnumPackages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackageManager_GetPackage_Proxy( 
    IJavaPackageManager __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszPackageName,
    /* [in] */ LPCOLESTR pszNamespace,
    /* [retval][out] */ IJavaPackage __RPC_FAR *__RPC_FAR *ppPackage);


void __RPC_STUB IJavaPackageManager_GetPackage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackageManager_GetFile_Proxy( 
    IJavaPackageManager __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszFileName,
    /* [in] */ LPCOLESTR pszNamespace,
    /* [in] */ DWORD dwFlags,
    /* [out] */ IJavaFile __RPC_FAR *__RPC_FAR *ppFile);


void __RPC_STUB IJavaPackageManager_GetFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackageManager_GetExplicitClassPath_Proxy( 
    IJavaPackageManager __RPC_FAR * This,
    /* [out] */ BSTR __RPC_FAR *pbstrPath);


void __RPC_STUB IJavaPackageManager_GetExplicitClassPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackageManager_SetExplicitClassPath_Proxy( 
    IJavaPackageManager __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszPath,
    /* [in] */ BOOL fAppend);


void __RPC_STUB IJavaPackageManager_SetExplicitClassPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackageManager_SetCurrentDirectory_Proxy( 
    IJavaPackageManager __RPC_FAR * This,
    /* [in] */ LPCOLESTR pszDir);


void __RPC_STUB IJavaPackageManager_SetCurrentDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IJavaPackageManager_INTERFACE_DEFINED__ */


#ifndef __IJavaPackage_INTERFACE_DEFINED__
#define __IJavaPackage_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IJavaPackage
 * at Fri Jul 11 15:30:21 1997
 * using MIDL 3.00.44
 ****************************************/
/* [unique][uuid][object] */ 



EXTERN_C const IID IID_IJavaPackage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IJavaPackage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPackageName( 
            /* [out] */ BSTR __RPC_FAR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetVersion( 
            /* [out] */ DWORD __RPC_FAR *pdwVersionMS,
            /* [out] */ DWORD __RPC_FAR *pdwVersionLS) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFilePath( 
            /* [out] */ BSTR __RPC_FAR *pbstrPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsSystemClass( 
            /* [out] */ BOOL __RPC_FAR *pfIsSystemClass) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NeedsTrustedSource( 
            /* [out] */ BOOL __RPC_FAR *pfNeedsTrustedSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCapabilities( 
            /* [out] */ LPCBYTE __RPC_FAR *ppCapabilities,
            /* [out] */ DWORD __RPC_FAR *pcbCapabilities) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSigner( 
            /* [out] */ LPCBYTE __RPC_FAR *ppSigner,
            /* [out] */ DWORD __RPC_FAR *pcbSigner) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDatabaseEntry( 
            /* [out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumFiles( 
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IEnumJavaFile __RPC_FAR *__RPC_FAR *ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFilePathA( 
            /* [out] */ LPSTR pszPath,
            /* [in] */ DWORD cbPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IJavaPackageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IJavaPackage __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IJavaPackage __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IJavaPackage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPackageName )( 
            IJavaPackage __RPC_FAR * This,
            /* [out] */ BSTR __RPC_FAR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetVersion )( 
            IJavaPackage __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwVersionMS,
            /* [out] */ DWORD __RPC_FAR *pdwVersionLS);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetFilePath )( 
            IJavaPackage __RPC_FAR * This,
            /* [out] */ BSTR __RPC_FAR *pbstrPath);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsSystemClass )( 
            IJavaPackage __RPC_FAR * This,
            /* [out] */ BOOL __RPC_FAR *pfIsSystemClass);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *NeedsTrustedSource )( 
            IJavaPackage __RPC_FAR * This,
            /* [out] */ BOOL __RPC_FAR *pfNeedsTrustedSource);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCapabilities )( 
            IJavaPackage __RPC_FAR * This,
            /* [out] */ LPCBYTE __RPC_FAR *ppCapabilities,
            /* [out] */ DWORD __RPC_FAR *pcbCapabilities);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSigner )( 
            IJavaPackage __RPC_FAR * This,
            /* [out] */ LPCBYTE __RPC_FAR *ppSigner,
            /* [out] */ DWORD __RPC_FAR *pcbSigner);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDatabaseEntry )( 
            IJavaPackage __RPC_FAR * This,
            /* [out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumFiles )( 
            IJavaPackage __RPC_FAR * This,
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IEnumJavaFile __RPC_FAR *__RPC_FAR *ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetFilePathA )( 
            IJavaPackage __RPC_FAR * This,
            /* [out] */ LPSTR pszPath,
            /* [in] */ DWORD cbPath);
        
        END_INTERFACE
    } IJavaPackageVtbl;

    interface IJavaPackage
    {
        CONST_VTBL struct IJavaPackageVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IJavaPackage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IJavaPackage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IJavaPackage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IJavaPackage_GetPackageName(This,pbstrName)	\
    (This)->lpVtbl -> GetPackageName(This,pbstrName)

#define IJavaPackage_GetVersion(This,pdwVersionMS,pdwVersionLS)	\
    (This)->lpVtbl -> GetVersion(This,pdwVersionMS,pdwVersionLS)

#define IJavaPackage_GetFilePath(This,pbstrPath)	\
    (This)->lpVtbl -> GetFilePath(This,pbstrPath)

#define IJavaPackage_IsSystemClass(This,pfIsSystemClass)	\
    (This)->lpVtbl -> IsSystemClass(This,pfIsSystemClass)

#define IJavaPackage_NeedsTrustedSource(This,pfNeedsTrustedSource)	\
    (This)->lpVtbl -> NeedsTrustedSource(This,pfNeedsTrustedSource)

#define IJavaPackage_GetCapabilities(This,ppCapabilities,pcbCapabilities)	\
    (This)->lpVtbl -> GetCapabilities(This,ppCapabilities,pcbCapabilities)

#define IJavaPackage_GetSigner(This,ppSigner,pcbSigner)	\
    (This)->lpVtbl -> GetSigner(This,ppSigner,pcbSigner)

#define IJavaPackage_GetDatabaseEntry(This,ppEntry)	\
    (This)->lpVtbl -> GetDatabaseEntry(This,ppEntry)

#define IJavaPackage_EnumFiles(This,dwFlags,ppEnum)	\
    (This)->lpVtbl -> EnumFiles(This,dwFlags,ppEnum)

#define IJavaPackage_GetFilePathA(This,pszPath,cbPath)	\
    (This)->lpVtbl -> GetFilePathA(This,pszPath,cbPath)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IJavaPackage_GetPackageName_Proxy( 
    IJavaPackage __RPC_FAR * This,
    /* [out] */ BSTR __RPC_FAR *pbstrName);


void __RPC_STUB IJavaPackage_GetPackageName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackage_GetVersion_Proxy( 
    IJavaPackage __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwVersionMS,
    /* [out] */ DWORD __RPC_FAR *pdwVersionLS);


void __RPC_STUB IJavaPackage_GetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackage_GetFilePath_Proxy( 
    IJavaPackage __RPC_FAR * This,
    /* [out] */ BSTR __RPC_FAR *pbstrPath);


void __RPC_STUB IJavaPackage_GetFilePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackage_IsSystemClass_Proxy( 
    IJavaPackage __RPC_FAR * This,
    /* [out] */ BOOL __RPC_FAR *pfIsSystemClass);


void __RPC_STUB IJavaPackage_IsSystemClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackage_NeedsTrustedSource_Proxy( 
    IJavaPackage __RPC_FAR * This,
    /* [out] */ BOOL __RPC_FAR *pfNeedsTrustedSource);


void __RPC_STUB IJavaPackage_NeedsTrustedSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackage_GetCapabilities_Proxy( 
    IJavaPackage __RPC_FAR * This,
    /* [out] */ LPCBYTE __RPC_FAR *ppCapabilities,
    /* [out] */ DWORD __RPC_FAR *pcbCapabilities);


void __RPC_STUB IJavaPackage_GetCapabilities_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackage_GetSigner_Proxy( 
    IJavaPackage __RPC_FAR * This,
    /* [out] */ LPCBYTE __RPC_FAR *ppSigner,
    /* [out] */ DWORD __RPC_FAR *pcbSigner);


void __RPC_STUB IJavaPackage_GetSigner_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackage_GetDatabaseEntry_Proxy( 
    IJavaPackage __RPC_FAR * This,
    /* [out] */ ICodeStoreDBEntry __RPC_FAR *__RPC_FAR *ppEntry);


void __RPC_STUB IJavaPackage_GetDatabaseEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackage_EnumFiles_Proxy( 
    IJavaPackage __RPC_FAR * This,
    /* [in] */ DWORD dwFlags,
    /* [retval][out] */ IEnumJavaFile __RPC_FAR *__RPC_FAR *ppEnum);


void __RPC_STUB IJavaPackage_EnumFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaPackage_GetFilePathA_Proxy( 
    IJavaPackage __RPC_FAR * This,
    /* [out] */ LPSTR pszPath,
    /* [in] */ DWORD cbPath);


void __RPC_STUB IJavaPackage_GetFilePathA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IJavaPackage_INTERFACE_DEFINED__ */


#ifndef __ICreateJavaPackageMgr_INTERFACE_DEFINED__
#define __ICreateJavaPackageMgr_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ICreateJavaPackageMgr
 * at Fri Jul 11 15:30:21 1997
 * using MIDL 3.00.44
 ****************************************/
/* [unique][uuid][object] */ 



EXTERN_C const IID IID_ICreateJavaPackageMgr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ICreateJavaPackageMgr : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPackageManager( 
            /* [out] */ IJavaPackageManager __RPC_FAR *__RPC_FAR *ppPackageMgr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICreateJavaPackageMgrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ICreateJavaPackageMgr __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ICreateJavaPackageMgr __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ICreateJavaPackageMgr __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPackageManager )( 
            ICreateJavaPackageMgr __RPC_FAR * This,
            /* [out] */ IJavaPackageManager __RPC_FAR *__RPC_FAR *ppPackageMgr);
        
        END_INTERFACE
    } ICreateJavaPackageMgrVtbl;

    interface ICreateJavaPackageMgr
    {
        CONST_VTBL struct ICreateJavaPackageMgrVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICreateJavaPackageMgr_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ICreateJavaPackageMgr_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ICreateJavaPackageMgr_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ICreateJavaPackageMgr_GetPackageManager(This,ppPackageMgr)	\
    (This)->lpVtbl -> GetPackageManager(This,ppPackageMgr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ICreateJavaPackageMgr_GetPackageManager_Proxy( 
    ICreateJavaPackageMgr __RPC_FAR * This,
    /* [out] */ IJavaPackageManager __RPC_FAR *__RPC_FAR *ppPackageMgr);


void __RPC_STUB ICreateJavaPackageMgr_GetPackageManager_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ICreateJavaPackageMgr_INTERFACE_DEFINED__ */


#ifndef __IJavaFile_INTERFACE_DEFINED__
#define __IJavaFile_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IJavaFile
 * at Fri Jul 11 15:30:21 1997
 * using MIDL 3.00.44
 ****************************************/
/* [unique][uuid][object] */ 



EXTERN_C const IID IID_IJavaFile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IJavaFile : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [in] */ DWORD dwType,
            /* [out] */ BSTR __RPC_FAR *pbstrName) = 0;
        
        virtual DWORD STDMETHODCALLTYPE GetFlags( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFileStream( 
            /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPENativePath( 
            /* [out] */ BSTR __RPC_FAR *pbstrPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPENativePathA( 
            /* [out] */ LPSTR pszPath,
            /* [in] */ DWORD cbPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTimestamp( 
            /* [out] */ DWORD __RPC_FAR *pdwTimestamp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IJavaFileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IJavaFile __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IJavaFile __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IJavaFile __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetName )( 
            IJavaFile __RPC_FAR * This,
            /* [in] */ DWORD dwType,
            /* [out] */ BSTR __RPC_FAR *pbstrName);
        
        DWORD ( STDMETHODCALLTYPE __RPC_FAR *GetFlags )( 
            IJavaFile __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetFileStream )( 
            IJavaFile __RPC_FAR * This,
            /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppStream);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPENativePath )( 
            IJavaFile __RPC_FAR * This,
            /* [out] */ BSTR __RPC_FAR *pbstrPath);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPENativePathA )( 
            IJavaFile __RPC_FAR * This,
            /* [out] */ LPSTR pszPath,
            /* [in] */ DWORD cbPath);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTimestamp )( 
            IJavaFile __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwTimestamp);
        
        END_INTERFACE
    } IJavaFileVtbl;

    interface IJavaFile
    {
        CONST_VTBL struct IJavaFileVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IJavaFile_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IJavaFile_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IJavaFile_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IJavaFile_GetName(This,dwType,pbstrName)	\
    (This)->lpVtbl -> GetName(This,dwType,pbstrName)

#define IJavaFile_GetFlags(This)	\
    (This)->lpVtbl -> GetFlags(This)

#define IJavaFile_GetFileStream(This,ppStream)	\
    (This)->lpVtbl -> GetFileStream(This,ppStream)

#define IJavaFile_GetPENativePath(This,pbstrPath)	\
    (This)->lpVtbl -> GetPENativePath(This,pbstrPath)

#define IJavaFile_GetPENativePathA(This,pszPath,cbPath)	\
    (This)->lpVtbl -> GetPENativePathA(This,pszPath,cbPath)

#define IJavaFile_GetTimestamp(This,pdwTimestamp)	\
    (This)->lpVtbl -> GetTimestamp(This,pdwTimestamp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IJavaFile_GetName_Proxy( 
    IJavaFile __RPC_FAR * This,
    /* [in] */ DWORD dwType,
    /* [out] */ BSTR __RPC_FAR *pbstrName);


void __RPC_STUB IJavaFile_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD STDMETHODCALLTYPE IJavaFile_GetFlags_Proxy( 
    IJavaFile __RPC_FAR * This);


void __RPC_STUB IJavaFile_GetFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaFile_GetFileStream_Proxy( 
    IJavaFile __RPC_FAR * This,
    /* [out] */ IStream __RPC_FAR *__RPC_FAR *ppStream);


void __RPC_STUB IJavaFile_GetFileStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaFile_GetPENativePath_Proxy( 
    IJavaFile __RPC_FAR * This,
    /* [out] */ BSTR __RPC_FAR *pbstrPath);


void __RPC_STUB IJavaFile_GetPENativePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaFile_GetPENativePathA_Proxy( 
    IJavaFile __RPC_FAR * This,
    /* [out] */ LPSTR pszPath,
    /* [in] */ DWORD cbPath);


void __RPC_STUB IJavaFile_GetPENativePathA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IJavaFile_GetTimestamp_Proxy( 
    IJavaFile __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwTimestamp);


void __RPC_STUB IJavaFile_GetTimestamp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IJavaFile_INTERFACE_DEFINED__ */


#ifndef __IEnumJavaPackage_INTERFACE_DEFINED__
#define __IEnumJavaPackage_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IEnumJavaPackage
 * at Fri Jul 11 15:30:21 1997
 * using MIDL 3.00.44
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IEnumJavaPackage __RPC_FAR *LPENUMJAVAPACKAGE;


EXTERN_C const IID IID_IEnumJavaPackage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IEnumJavaPackage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IJavaPackage __RPC_FAR *__RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumJavaPackage __RPC_FAR *__RPC_FAR *ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumJavaPackageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IEnumJavaPackage __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IEnumJavaPackage __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IEnumJavaPackage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Next )( 
            IEnumJavaPackage __RPC_FAR * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IJavaPackage __RPC_FAR *__RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Skip )( 
            IEnumJavaPackage __RPC_FAR * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            IEnumJavaPackage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IEnumJavaPackage __RPC_FAR * This,
            /* [out] */ IEnumJavaPackage __RPC_FAR *__RPC_FAR *ppenum);
        
        END_INTERFACE
    } IEnumJavaPackageVtbl;

    interface IEnumJavaPackage
    {
        CONST_VTBL struct IEnumJavaPackageVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumJavaPackage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumJavaPackage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumJavaPackage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumJavaPackage_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumJavaPackage_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumJavaPackage_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumJavaPackage_Clone(This,ppenum)	\
    (This)->lpVtbl -> Clone(This,ppenum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumJavaPackage_Next_Proxy( 
    IEnumJavaPackage __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IJavaPackage __RPC_FAR *__RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


void __RPC_STUB IEnumJavaPackage_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumJavaPackage_Skip_Proxy( 
    IEnumJavaPackage __RPC_FAR * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumJavaPackage_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumJavaPackage_Reset_Proxy( 
    IEnumJavaPackage __RPC_FAR * This);


void __RPC_STUB IEnumJavaPackage_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumJavaPackage_Clone_Proxy( 
    IEnumJavaPackage __RPC_FAR * This,
    /* [out] */ IEnumJavaPackage __RPC_FAR *__RPC_FAR *ppenum);


void __RPC_STUB IEnumJavaPackage_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumJavaPackage_INTERFACE_DEFINED__ */


#ifndef __IEnumJavaFile_INTERFACE_DEFINED__
#define __IEnumJavaFile_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IEnumJavaFile
 * at Fri Jul 11 15:30:21 1997
 * using MIDL 3.00.44
 ****************************************/
/* [unique][uuid][object] */ 


typedef /* [unique] */ IEnumJavaFile __RPC_FAR *LPENUMJAVAFILE;


EXTERN_C const IID IID_IEnumJavaFile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IEnumJavaFile : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IJavaFile __RPC_FAR *__RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumJavaFile __RPC_FAR *__RPC_FAR *ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumJavaFileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IEnumJavaFile __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IEnumJavaFile __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IEnumJavaFile __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Next )( 
            IEnumJavaFile __RPC_FAR * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IJavaFile __RPC_FAR *__RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Skip )( 
            IEnumJavaFile __RPC_FAR * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Reset )( 
            IEnumJavaFile __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Clone )( 
            IEnumJavaFile __RPC_FAR * This,
            /* [out] */ IEnumJavaFile __RPC_FAR *__RPC_FAR *ppenum);
        
        END_INTERFACE
    } IEnumJavaFileVtbl;

    interface IEnumJavaFile
    {
        CONST_VTBL struct IEnumJavaFileVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumJavaFile_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumJavaFile_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumJavaFile_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumJavaFile_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumJavaFile_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumJavaFile_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumJavaFile_Clone(This,ppenum)	\
    (This)->lpVtbl -> Clone(This,ppenum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumJavaFile_Next_Proxy( 
    IEnumJavaFile __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IJavaFile __RPC_FAR *__RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


void __RPC_STUB IEnumJavaFile_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumJavaFile_Skip_Proxy( 
    IEnumJavaFile __RPC_FAR * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumJavaFile_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumJavaFile_Reset_Proxy( 
    IEnumJavaFile __RPC_FAR * This);


void __RPC_STUB IEnumJavaFile_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumJavaFile_Clone_Proxy( 
    IEnumJavaFile __RPC_FAR * This,
    /* [out] */ IEnumJavaFile __RPC_FAR *__RPC_FAR *ppenum);


void __RPC_STUB IEnumJavaFile_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumJavaFile_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CLSID_JavaPackageManager;

class CLSID_JavaPackageManager;
#endif
#endif /* __JPKGMGR_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\pkgguid.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//
/*++

Copyright (c) 1996-1998  Microsoft Corporation

Module Name:

    pkgguid.h

--*/

#ifndef __PKGGUID_H__
#define __PKGGUID_H__

// {D2073C40-AB4F-11d0-A732-00A0C9082637}
DEFINE_GUID(IID_ICodeStoreDBEntry,
0xD2073C40, 0xAB4F, 0x11d0, 0xA7, 0x32, 0x00, 0xA0, 0xC9, 0x08, 0x26, 0x37);

// {DF3D9C22-AB4E-11d0-A732-00A0C9082637}
DEFINE_GUID(IID_ICodeStoreDB,
0xDF3D9C22, 0xAB4E, 0x11d0, 0xA7, 0x32, 0x00, 0xA0, 0xC9, 0x08, 0x26, 0x37);

// {DF3D9C23-AB4E-11d0-A732-00A0C9082637}
DEFINE_GUID(CLSID_CodeStoreDB,
0xDF3D9C23, 0xAB4E, 0x11d0, 0xA7, 0x32, 0x00, 0xA0, 0xC9, 0x08, 0x26, 0x37);

// {D2073C42-AB4F-11d0-A732-00A0C9082637}
DEFINE_GUID(IID_IEnumCodeStoreDBEntry,
0xD2073C42, 0xAB4F, 0x11d0, 0xA7, 0x32, 0x00, 0xA0, 0xC9, 0x08, 0x26, 0x37);

// {D2073C43-AB4F-11d0-A732-00A0C9082637}
DEFINE_GUID(IID_IJavaPackageManager,
0xD2073C43, 0xAB4F, 0x11d0, 0xA7, 0x32, 0x00, 0xA0, 0xC9, 0x08, 0x26, 0x37);

// {D2073C46-AB4F-11d0-A732-00A0C9082637}
DEFINE_GUID(IID_IJavaPackage,
0xD2073C46, 0xAB4F, 0x11d0, 0xA7, 0x32, 0x00, 0xA0, 0xC9, 0x08, 0x26, 0x37);

// {D2073C48-AB4F-11d0-A732-00A0C9082637}
DEFINE_GUID(IID_IJavaFile,
0xD2073C48, 0xAB4F, 0x11d0, 0xA7, 0x32, 0x00, 0xA0, 0xC9, 0x08, 0x26, 0x37);

// {D2073C47-AB4F-11d0-A732-00A0C9082637}
DEFINE_GUID(IID_ICreateJavaPackageMgr,
0xD2073C47, 0xAB4F, 0x11d0, 0xA7, 0x32, 0x00, 0xA0, 0xC9, 0x08, 0x26, 0x37);

// {D2073C44-AB4F-11d0-A732-00A0C9082637}
DEFINE_GUID(CLSID_JavaPackageManager,
0xD2073C44, 0xAB4F, 0x11d0, 0xA7, 0x32, 0x00, 0xA0, 0xC9, 0x08, 0x26, 0x37);

// {D2073C45-AB4F-11d0-A732-00A0C9082637}
DEFINE_GUID(IID_IEnumJavaPackage,
0xD2073C45, 0xAB4F, 0x11d0, 0xA7, 0x32, 0x00, 0xA0, 0xC9, 0x08, 0x26, 0x37);

// {D2073C49-AB4F-11d0-A732-00A0C9082637}
DEFINE_GUID(IID_IEnumJavaFile,
0xD2073C49, 0xAB4F, 0x11d0, 0xA7, 0x32, 0x00, 0xA0, 0xC9, 0x08, 0x26, 0x37);

#endif // __PKGGUID_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\pimstore.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0543 */
/* Compiler settings for pimstore.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __pimstore_h__
#define __pimstore_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IChangeEventSink_FWD_DEFINED__
#define __IChangeEventSink_FWD_DEFINED__
typedef interface IChangeEventSink IChangeEventSink;
#endif 	/* __IChangeEventSink_FWD_DEFINED__ */


#ifndef __ICustomEventSink_FWD_DEFINED__
#define __ICustomEventSink_FWD_DEFINED__
typedef interface ICustomEventSink ICustomEventSink;
#endif 	/* __ICustomEventSink_FWD_DEFINED__ */


#ifndef __IException_FWD_DEFINED__
#define __IException_FWD_DEFINED__
typedef interface IException IException;
#endif 	/* __IException_FWD_DEFINED__ */


#ifndef __IExceptions_FWD_DEFINED__
#define __IExceptions_FWD_DEFINED__
typedef interface IExceptions IExceptions;
#endif 	/* __IExceptions_FWD_DEFINED__ */


#ifndef __ITimeZone_FWD_DEFINED__
#define __ITimeZone_FWD_DEFINED__
typedef interface ITimeZone ITimeZone;
#endif 	/* __ITimeZone_FWD_DEFINED__ */


#ifndef __IRecurrencePattern_FWD_DEFINED__
#define __IRecurrencePattern_FWD_DEFINED__
typedef interface IRecurrencePattern IRecurrencePattern;
#endif 	/* __IRecurrencePattern_FWD_DEFINED__ */


#ifndef __IRecurrencePattern2_FWD_DEFINED__
#define __IRecurrencePattern2_FWD_DEFINED__
typedef interface IRecurrencePattern2 IRecurrencePattern2;
#endif 	/* __IRecurrencePattern2_FWD_DEFINED__ */


#ifndef __IRecipient_FWD_DEFINED__
#define __IRecipient_FWD_DEFINED__
typedef interface IRecipient IRecipient;
#endif 	/* __IRecipient_FWD_DEFINED__ */


#ifndef __IPOlRecipient_FWD_DEFINED__
#define __IPOlRecipient_FWD_DEFINED__
typedef interface IPOlRecipient IPOlRecipient;
#endif 	/* __IPOlRecipient_FWD_DEFINED__ */


#ifndef __IRecipient2_FWD_DEFINED__
#define __IRecipient2_FWD_DEFINED__
typedef interface IRecipient2 IRecipient2;
#endif 	/* __IRecipient2_FWD_DEFINED__ */


#ifndef __IRecipients_FWD_DEFINED__
#define __IRecipients_FWD_DEFINED__
typedef interface IRecipients IRecipients;
#endif 	/* __IRecipients_FWD_DEFINED__ */


#ifndef __IRecipients2_FWD_DEFINED__
#define __IRecipients2_FWD_DEFINED__
typedef interface IRecipients2 IRecipients2;
#endif 	/* __IRecipients2_FWD_DEFINED__ */


#ifndef __IPOutlookItemCollection_FWD_DEFINED__
#define __IPOutlookItemCollection_FWD_DEFINED__
typedef interface IPOutlookItemCollection IPOutlookItemCollection;
#endif 	/* __IPOutlookItemCollection_FWD_DEFINED__ */


#ifndef __IPOutlookItemCollection2_FWD_DEFINED__
#define __IPOutlookItemCollection2_FWD_DEFINED__
typedef interface IPOutlookItemCollection2 IPOutlookItemCollection2;
#endif 	/* __IPOutlookItemCollection2_FWD_DEFINED__ */


#ifndef __IPOutlookFolderCollection_FWD_DEFINED__
#define __IPOutlookFolderCollection_FWD_DEFINED__
typedef interface IPOutlookFolderCollection IPOutlookFolderCollection;
#endif 	/* __IPOutlookFolderCollection_FWD_DEFINED__ */


#ifndef __IPOutlookStoreCollection_FWD_DEFINED__
#define __IPOutlookStoreCollection_FWD_DEFINED__
typedef interface IPOutlookStoreCollection IPOutlookStoreCollection;
#endif 	/* __IPOutlookStoreCollection_FWD_DEFINED__ */


#ifndef __IPOlItems_FWD_DEFINED__
#define __IPOlItems_FWD_DEFINED__
typedef interface IPOlItems IPOlItems;
#endif 	/* __IPOlItems_FWD_DEFINED__ */


#ifndef __IContact_FWD_DEFINED__
#define __IContact_FWD_DEFINED__
typedef interface IContact IContact;
#endif 	/* __IContact_FWD_DEFINED__ */


#ifndef __IContact2_FWD_DEFINED__
#define __IContact2_FWD_DEFINED__
typedef interface IContact2 IContact2;
#endif 	/* __IContact2_FWD_DEFINED__ */


#ifndef __ITask_FWD_DEFINED__
#define __ITask_FWD_DEFINED__
typedef interface ITask ITask;
#endif 	/* __ITask_FWD_DEFINED__ */


#ifndef __ITask2_FWD_DEFINED__
#define __ITask2_FWD_DEFINED__
typedef interface ITask2 ITask2;
#endif 	/* __ITask2_FWD_DEFINED__ */


#ifndef __IAppointment_FWD_DEFINED__
#define __IAppointment_FWD_DEFINED__
typedef interface IAppointment IAppointment;
#endif 	/* __IAppointment_FWD_DEFINED__ */


#ifndef __IAppointment2_FWD_DEFINED__
#define __IAppointment2_FWD_DEFINED__
typedef interface IAppointment2 IAppointment2;
#endif 	/* __IAppointment2_FWD_DEFINED__ */


#ifndef __INote_FWD_DEFINED__
#define __INote_FWD_DEFINED__
typedef interface INote INote;
#endif 	/* __INote_FWD_DEFINED__ */


#ifndef __IMail_FWD_DEFINED__
#define __IMail_FWD_DEFINED__
typedef interface IMail IMail;
#endif 	/* __IMail_FWD_DEFINED__ */


#ifndef __ICity_FWD_DEFINED__
#define __ICity_FWD_DEFINED__
typedef interface ICity ICity;
#endif 	/* __ICity_FWD_DEFINED__ */


#ifndef __IFolder_FWD_DEFINED__
#define __IFolder_FWD_DEFINED__
typedef interface IFolder IFolder;
#endif 	/* __IFolder_FWD_DEFINED__ */


#ifndef __IFolder2_FWD_DEFINED__
#define __IFolder2_FWD_DEFINED__
typedef interface IFolder2 IFolder2;
#endif 	/* __IFolder2_FWD_DEFINED__ */


#ifndef __IPOutlookApp_FWD_DEFINED__
#define __IPOutlookApp_FWD_DEFINED__
typedef interface IPOutlookApp IPOutlookApp;
#endif 	/* __IPOutlookApp_FWD_DEFINED__ */


#ifndef __IPOutlookApp2_FWD_DEFINED__
#define __IPOutlookApp2_FWD_DEFINED__
typedef interface IPOutlookApp2 IPOutlookApp2;
#endif 	/* __IPOutlookApp2_FWD_DEFINED__ */


#ifndef __IPOutlookApp3_FWD_DEFINED__
#define __IPOutlookApp3_FWD_DEFINED__
typedef interface IPOutlookApp3 IPOutlookApp3;
#endif 	/* __IPOutlookApp3_FWD_DEFINED__ */


#ifndef __IStore_FWD_DEFINED__
#define __IStore_FWD_DEFINED__
typedef interface IStore IStore;
#endif 	/* __IStore_FWD_DEFINED__ */


#ifndef __IItem_FWD_DEFINED__
#define __IItem_FWD_DEFINED__
typedef interface IItem IItem;
#endif 	/* __IItem_FWD_DEFINED__ */


#ifndef __IItem2_FWD_DEFINED__
#define __IItem2_FWD_DEFINED__
typedef interface IItem2 IItem2;
#endif 	/* __IItem2_FWD_DEFINED__ */


#ifndef __IRecipient3_FWD_DEFINED__
#define __IRecipient3_FWD_DEFINED__
typedef interface IRecipient3 IRecipient3;
#endif 	/* __IRecipient3_FWD_DEFINED__ */


#ifndef __IRecipientTable_FWD_DEFINED__
#define __IRecipientTable_FWD_DEFINED__
typedef interface IRecipientTable IRecipientTable;
#endif 	/* __IRecipientTable_FWD_DEFINED__ */


#ifndef __IPOlItems2_FWD_DEFINED__
#define __IPOlItems2_FWD_DEFINED__
typedef interface IPOlItems2 IPOlItems2;
#endif 	/* __IPOlItems2_FWD_DEFINED__ */


#ifndef __IPimSrcContactSummaryCard_FWD_DEFINED__
#define __IPimSrcContactSummaryCard_FWD_DEFINED__
typedef interface IPimSrcContactSummaryCard IPimSrcContactSummaryCard;
#endif 	/* __IPimSrcContactSummaryCard_FWD_DEFINED__ */


#ifndef __IPimSrcContactNew_FWD_DEFINED__
#define __IPimSrcContactNew_FWD_DEFINED__
typedef interface IPimSrcContactNew IPimSrcContactNew;
#endif 	/* __IPimSrcContactNew_FWD_DEFINED__ */


#ifndef __IPimSrcContactListIcon_FWD_DEFINED__
#define __IPimSrcContactListIcon_FWD_DEFINED__
typedef interface IPimSrcContactListIcon IPimSrcContactListIcon;
#endif 	/* __IPimSrcContactListIcon_FWD_DEFINED__ */


#ifndef __Exception_FWD_DEFINED__
#define __Exception_FWD_DEFINED__

#ifdef __cplusplus
typedef class Exception Exception;
#else
typedef struct Exception Exception;
#endif /* __cplusplus */

#endif 	/* __Exception_FWD_DEFINED__ */


#ifndef __TimeZone_FWD_DEFINED__
#define __TimeZone_FWD_DEFINED__

#ifdef __cplusplus
typedef class TimeZone TimeZone;
#else
typedef struct TimeZone TimeZone;
#endif /* __cplusplus */

#endif 	/* __TimeZone_FWD_DEFINED__ */


#ifndef __RecurrencePattern_FWD_DEFINED__
#define __RecurrencePattern_FWD_DEFINED__

#ifdef __cplusplus
typedef class RecurrencePattern RecurrencePattern;
#else
typedef struct RecurrencePattern RecurrencePattern;
#endif /* __cplusplus */

#endif 	/* __RecurrencePattern_FWD_DEFINED__ */


#ifndef __Recipient_FWD_DEFINED__
#define __Recipient_FWD_DEFINED__

#ifdef __cplusplus
typedef class Recipient Recipient;
#else
typedef struct Recipient Recipient;
#endif /* __cplusplus */

#endif 	/* __Recipient_FWD_DEFINED__ */


#ifndef __Recipients_FWD_DEFINED__
#define __Recipients_FWD_DEFINED__

#ifdef __cplusplus
typedef class Recipients Recipients;
#else
typedef struct Recipients Recipients;
#endif /* __cplusplus */

#endif 	/* __Recipients_FWD_DEFINED__ */


#ifndef __Items_FWD_DEFINED__
#define __Items_FWD_DEFINED__

#ifdef __cplusplus
typedef class Items Items;
#else
typedef struct Items Items;
#endif /* __cplusplus */

#endif 	/* __Items_FWD_DEFINED__ */


#ifndef __ContactItem_FWD_DEFINED__
#define __ContactItem_FWD_DEFINED__

#ifdef __cplusplus
typedef class ContactItem ContactItem;
#else
typedef struct ContactItem ContactItem;
#endif /* __cplusplus */

#endif 	/* __ContactItem_FWD_DEFINED__ */


#ifndef __TaskItem_FWD_DEFINED__
#define __TaskItem_FWD_DEFINED__

#ifdef __cplusplus
typedef class TaskItem TaskItem;
#else
typedef struct TaskItem TaskItem;
#endif /* __cplusplus */

#endif 	/* __TaskItem_FWD_DEFINED__ */


#ifndef __AppointmentItem_FWD_DEFINED__
#define __AppointmentItem_FWD_DEFINED__

#ifdef __cplusplus
typedef class AppointmentItem AppointmentItem;
#else
typedef struct AppointmentItem AppointmentItem;
#endif /* __cplusplus */

#endif 	/* __AppointmentItem_FWD_DEFINED__ */


#ifndef __CityItem_FWD_DEFINED__
#define __CityItem_FWD_DEFINED__

#ifdef __cplusplus
typedef class CityItem CityItem;
#else
typedef struct CityItem CityItem;
#endif /* __cplusplus */

#endif 	/* __CityItem_FWD_DEFINED__ */


#ifndef __Application_FWD_DEFINED__
#define __Application_FWD_DEFINED__

#ifdef __cplusplus
typedef class Application Application;
#else
typedef struct Application Application;
#endif /* __cplusplus */

#endif 	/* __Application_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_pimstore_0000_0000 */
/* [local] */ 

#ifndef MIDL_PASS
#include <windows.h>
#include <ole2.h>
#endif
#ifdef MIDL_PASS
typedef DWORD CEPROPID;

typedef DWORD CEOID;

typedef /* [v1_enum] */ 
enum WINCONST
    {	WM_APP	= 0x8000
    } 	WINCONST;

typedef struct _TIME_ZONE_INFORMATION
    {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    } 	TIME_ZONE_INFORMATION;

typedef struct _TIME_ZONE_INFORMATION *PTIME_ZONE_INFORMATION;

typedef struct _CEBLOB
    {
    DWORD dwCount;
    BYTE *lpb;
    } 	CEBLOB;

typedef /* [v1_enum] */ 
enum CEVT_TYPE
    {	CEVT_UNSPECIFIED	= 0,
	CEVT_I2	= 0x2,
	CEVT_I4	= 0x3,
	CEVT_R8	= 0x5,
	CEVT_ERROR	= 0xa,
	CEVT_BOOL	= 0xb,
	CEVT_UI2	= 0x12,
	CEVT_UI4	= 0x13,
	CEVT_LPWSTR	= 0x1f,
	CEVT_FILETIME	= 0x40,
	CEVT_BLOB	= 0x41,
	CEVT_STREAM	= 0x64,
	CEVT_RECID	= 0x65,
	CEVT_AUTO_I4	= 0x66,
	CEVT_AUTO_I8	= 0x67
    } 	CEVT_TYPE;

typedef /* [switch_type] */ union __CEVALUNION
    {
    short iVal;
    USHORT uiVal;
    long lVal;
    ULONG ulVal;
    FILETIME filetime;
    WCHAR *lpwstr;
    CEBLOB blob;
    BOOL boolVal;
    double dblVal;
    } 	_CEVALUNION;

typedef struct _CEPROPVAL
    {
    DWORD propid;
    WORD wLenData;
    WORD wFlags;
    _CEVALUNION val;
    } 	CEPROPVAL;

#endif
#define PIMFOLDERNOTIFICATION_REMOTE    (0x01)    // Notification for changes from other processes
#define PIMFOLDERNOTIFICATION_LOCAL     (0x02)    // Notification for changes from this process
#define PIMFOLDERNOTIFICATION_ALL       (PIMFOLDERNOTIFICATION_REMOTE | PIMFOLDERNOTIFICATION_LOCAL)
typedef struct OLITEMID
    {
    BYTE data[ 12 ];
    } 	OLITEMID;

typedef struct OLITEMID *LPOLITEMID;

typedef /* [v1_enum] */ 
enum PIMITEMNOTIFICATION
    {	PIM_ITEM_CREATED_LOCAL	= ( WM_APP + 0x100 ) ,
	PIM_ITEM_DELETED_LOCAL	= ( WM_APP + 0x101 ) ,
	PIM_ITEM_CHANGED_LOCAL	= ( WM_APP + 0x102 ) ,
	PIM_ITEM_CREATED_REMOTE	= ( WM_APP + 0x105 ) ,
	PIM_ITEM_DELETED_REMOTE	= ( WM_APP + 0x106 ) ,
	PIM_ITEM_CHANGED_REMOTE	= ( WM_APP + 0x107 ) 
    } 	PIMITEMNOTIFICATION;













typedef /* [v1_enum] */ 
enum OlImportance
    {	olImportanceLow	= 0,
	olImportanceNormal	= 1,
	olImportanceHigh	= 2
    } 	OlImportance;

typedef /* [v1_enum] */ 
enum OlDefaultFolders
    {	olFolderUndefined	= 0,
	olFolderCalendar	= 9,
	olFolderContacts	= 10,
	olFolderTasks	= 13,
	olFolderNotes	= 14,
	olFolderInbox	= 15,
	olFolderCities	= 101,
	olFolderInfrared	= 102
    } 	OlDefaultFolders;

typedef /* [v1_enum] */ 
enum OlItemType
    {	olUndefinedItem	= 0,
	olAppointmentItem	= 1,
	olContactItem	= 2,
	olTaskItem	= 3,
	olNoteItem	= 4,
	olMailItem	= 5,
	olCityItem	= 102
    } 	OlItemType;

#define	OlItemMaskNone	( 0 )

#define	OlItemMaskContact	( 0x1 )

#define	OlItemMaskMail	( 0x2 )

#define	OlItemMaskAppointment	( 0x4 )

#define	OlItemMaskTask	( 0x8 )

#define	OlItemMaskNote	( 0x10 )

#define	OlItemMaskALL	( 0xffffffff )

typedef /* [v1_enum] */ 
enum OlReminderOptions
    {	olLED	= 1,
	olVibrate	= 2,
	olDialog	= 4,
	olSound	= 8,
	olRepeat	= 16
    } 	OlReminderOptions;

typedef /* [v1_enum] */ 
enum OlBusyStatus
    {	olFree	= 0,
	olTentative	= 1,
	olBusy	= 2,
	olOutOfOffice	= 3
    } 	OlBusyStatus;

typedef /* [v1_enum] */ 
enum OlMeetingStatusFlags
    {	olMeetingFlag	= 1,
	olReceivedFlag	= 2,
	olCanceledFlag	= 4,
	olForwardedFlag	= 8
    } 	OlMeetingStatusFlags;

typedef /* [v1_enum] */ 
enum OlMeetingStatus
    {	olNonMeeting	= 0,
	olMeeting	= olMeetingFlag,
	olMeetingAccepted	= ( olMeetingFlag | olReceivedFlag ) ,
	olMeetingCanceled	= ( ( olMeetingFlag | olReceivedFlag )  | olCanceledFlag ) 
    } 	OlMeetingStatus;

typedef /* [v1_enum] */ 
enum OlCurrentCity
    {	olHomeCity	= 0,
	olVisitingCity	= 1
    } 	OlCurrentCity;

typedef /* [v1_enum] */ 
enum OlRecurrenceType
    {	olRecursDaily	= 0,
	olRecursWeekly	= 1,
	olRecursMonthly	= 2,
	olRecursMonthNth	= 3,
	olRecursYearly	= 5,
	olRecursYearNth	= 6,
	olRecursOnce	= -1
    } 	OlRecurrenceType;

typedef /* [v1_enum] */ 
enum OlDaysOfWeek
    {	olSunday	= 1,
	olMonday	= 2,
	olTuesday	= 4,
	olWednesday	= 8,
	olThursday	= 16,
	olFriday	= 32,
	olSaturday	= 64
    } 	OlDaysOfWeek;

typedef /* [v1_enum] */ 
enum OlSensitivity
    {	olNormal	= 0,
	olPersonal	= 1,
	olPrivate	= 2,
	olConfidential	= 3
    } 	OlSensitivity;

typedef /* [v1_enum] */ 
enum OlObjectType
    {	olUndefinedObject	= 0,
	olStoreObject	= 1,
	olFolderObject	= 2,
	olAppointmentObject	= 3,
	olContactObject	= 4,
	olTaskObject	= 5,
	olNoteObject	= 6,
	olMailObject	= 7
    } 	OlObjectType;

typedef /* [v1_enum] */ 
enum OlEventType
    {	olEventCreated	= 0x4,
	olEventDeleted	= 0x8,
	olEventModified	= 0x10,
	olEventMoved	= 0x20,
	olEventCopied	= 0x40,
	olEventAll	= 0xffffffff
    } 	OlEventType;

typedef /* [v1_enum] */ 
enum OlEventFlags
    {	olEventFlagSynchronous	= 0x1,
	olEventFlagLocal	= 0x2,
	olEventFlagRemote	= 0x4,
	olEventFlagLostEvents	= 0x8
    } 	OlEventFlags;

typedef /* [v1_enum] */ 
enum OlRecurrenceEndType
    {	olEndTypeDate	= 0,
	olEndTypeOccurrences	= 1,
	olEndTypeNone	= 2
    } 	OlRecurrenceEndType;

typedef struct PIMEVENT
    {
    OlEventType olEventType;
    OlObjectType olObjectType;
    OLITEMID olItemId;
    OLITEMID olOldItemId;
    OLITEMID olParentId;
    OLITEMID olOldParentId;
    ULONG cProps;
    CEPROPID *rgProps;
    } 	PIMEVENT;

typedef struct PIMCUSTOMEVENT
    {
    GUID guid;
    CEBLOB blob;
    } 	PIMCUSTOMEVENT;

DEFINE_GUID(IID_IChangeEventSink, 0xc93a09c4, 0x5faf, 0x4688, 0xbf, 0xe6, 0x7d, 0x1b, 0x60, 0x92, 0xd4, 0xe9);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0000_v0_0_s_ifspec;

#ifndef __IChangeEventSink_INTERFACE_DEFINED__
#define __IChangeEventSink_INTERFACE_DEFINED__

/* interface IChangeEventSink */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IChangeEventSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c93a09c4-5faf-4688-bfe6-7d1b6092d4e9")
    IChangeEventSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnEvent( 
            /* [in] */ DWORD dwFlags,
            /* [in] */ ULONG cEvents,
            /* [size_is][in] */ const PIMEVENT *rgEvents) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IChangeEventSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IChangeEventSink * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IChangeEventSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IChangeEventSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnEvent )( 
            IChangeEventSink * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ ULONG cEvents,
            /* [size_is][in] */ const PIMEVENT *rgEvents);
        
        END_INTERFACE
    } IChangeEventSinkVtbl;

    interface IChangeEventSink
    {
        CONST_VTBL struct IChangeEventSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IChangeEventSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IChangeEventSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IChangeEventSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IChangeEventSink_OnEvent(This,dwFlags,cEvents,rgEvents)	\
    ( (This)->lpVtbl -> OnEvent(This,dwFlags,cEvents,rgEvents) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IChangeEventSink_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0001 */
/* [local] */ 

DEFINE_GUID(IID_ICustomEventSink, 0x666eceda, 0x91c1, 0x4ba5, 0xb4, 0x1c, 0x6e, 0x45, 0xb8, 0xb9, 0x37, 0x49);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0001_v0_0_s_ifspec;

#ifndef __ICustomEventSink_INTERFACE_DEFINED__
#define __ICustomEventSink_INTERFACE_DEFINED__

/* interface ICustomEventSink */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_ICustomEventSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("666ECEDA-91C1-4ba5-B41C-6E45B8B93749")
    ICustomEventSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnEvent( 
            /* [in] */ DWORD dwFlags,
            /* [in] */ ULONG cEvents,
            /* [size_is][in] */ const PIMCUSTOMEVENT *rgEvents) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICustomEventSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICustomEventSink * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICustomEventSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICustomEventSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnEvent )( 
            ICustomEventSink * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ ULONG cEvents,
            /* [size_is][in] */ const PIMCUSTOMEVENT *rgEvents);
        
        END_INTERFACE
    } ICustomEventSinkVtbl;

    interface ICustomEventSink
    {
        CONST_VTBL struct ICustomEventSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICustomEventSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICustomEventSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICustomEventSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICustomEventSink_OnEvent(This,dwFlags,cEvents,rgEvents)	\
    ( (This)->lpVtbl -> OnEvent(This,dwFlags,cEvents,rgEvents) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICustomEventSink_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0002 */
/* [local] */ 

DEFINE_GUID(IID_IException, 0xb47398d0, 0x3b73, 0x11d2, 0x8f, 0x1b, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0002_v0_0_s_ifspec;

#ifndef __IException_INTERFACE_DEFINED__
#define __IException_INTERFACE_DEFINED__

/* interface IException */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IException;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b47398d0-3b73-11d2-8f1b-0000f87a4335")
    IException : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AppointmentItem( 
            /* [retval][out] */ IAppointment **ppAppt) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OriginalDate( 
            /* [retval][out] */ DATE *pdate) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Deleted( 
            /* [retval][out] */ VARIANT_BOOL *pfDeleted) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExceptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IException * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IException * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IException * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IException * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IException * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IException * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IException * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AppointmentItem )( 
            IException * This,
            /* [retval][out] */ IAppointment **ppAppt);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginalDate )( 
            IException * This,
            /* [retval][out] */ DATE *pdate);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Deleted )( 
            IException * This,
            /* [retval][out] */ VARIANT_BOOL *pfDeleted);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IException * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        END_INTERFACE
    } IExceptionVtbl;

    interface IException
    {
        CONST_VTBL struct IExceptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IException_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IException_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IException_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IException_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IException_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IException_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IException_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IException_get_AppointmentItem(This,ppAppt)	\
    ( (This)->lpVtbl -> get_AppointmentItem(This,ppAppt) ) 

#define IException_get_OriginalDate(This,pdate)	\
    ( (This)->lpVtbl -> get_OriginalDate(This,pdate) ) 

#define IException_get_Deleted(This,pfDeleted)	\
    ( (This)->lpVtbl -> get_Deleted(This,pfDeleted) ) 

#define IException_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IException_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0003 */
/* [local] */ 

DEFINE_GUID(IID_IExceptions, 0xb47398d1, 0x3b73, 0x11d2, 0x8f, 0x1b, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0003_v0_0_s_ifspec;

#ifndef __IExceptions_INTERFACE_DEFINED__
#define __IExceptions_INTERFACE_DEFINED__

/* interface IExceptions */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IExceptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b47398d1-3b73-11d2-8f1b-0000f87a4335")
    IExceptions : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int iIndex,
            /* [retval][out] */ IException **ppException) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *pnCount) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **ppEnumerator) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExceptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExceptions * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExceptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExceptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IExceptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IExceptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IExceptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IExceptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *Item )( 
            IExceptions * This,
            /* [in] */ int iIndex,
            /* [retval][out] */ IException **ppException);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IExceptions * This,
            /* [retval][out] */ int *pnCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IExceptions * This,
            /* [retval][out] */ IUnknown **ppEnumerator);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IExceptions * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        END_INTERFACE
    } IExceptionsVtbl;

    interface IExceptions
    {
        CONST_VTBL struct IExceptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExceptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IExceptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IExceptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IExceptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IExceptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IExceptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IExceptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IExceptions_Item(This,iIndex,ppException)	\
    ( (This)->lpVtbl -> Item(This,iIndex,ppException) ) 

#define IExceptions_get_Count(This,pnCount)	\
    ( (This)->lpVtbl -> get_Count(This,pnCount) ) 

#define IExceptions_get__NewEnum(This,ppEnumerator)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumerator) ) 

#define IExceptions_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IExceptions_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0004 */
/* [local] */ 

DEFINE_GUID(IID_ITimeZone, 0x78b27290, 0x5256, 0x11d2, 0x8f, 0x1b, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0004_v0_0_s_ifspec;

#ifndef __ITimeZone_INTERFACE_DEFINED__
#define __ITimeZone_INTERFACE_DEFINED__

/* interface ITimeZone */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_ITimeZone;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("78b27290-5256-11d2-8f1b-0000f87a4335")
    ITimeZone : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Bias( 
            /* [retval][out] */ long *plBias) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SupportsDST( 
            /* [retval][out] */ VARIANT_BOOL *pfSupportsDST) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsStandardAbsoluteDate( 
            /* [retval][out] */ VARIANT_BOOL *pfAbsolute) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsDaylightAbsoluteDate( 
            /* [retval][out] */ VARIANT_BOOL *pfAbsolute) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StandardBias( 
            /* [retval][out] */ long *plBias) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StandardName( 
            /* [retval][out] */ BSTR *ppwsz) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StandardDate( 
            /* [retval][out] */ DATE *pDate) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StandardDayOfWeekMask( 
            /* [retval][out] */ long *plMask) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StandardInstance( 
            /* [retval][out] */ long *plInstance) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StandardMonthOfYear( 
            /* [retval][out] */ long *plMonth) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DaylightBias( 
            /* [retval][out] */ long *plBias) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DaylightName( 
            /* [retval][out] */ BSTR *ppwsz) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DaylightDate( 
            /* [retval][out] */ DATE *pDate) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DaylightDayOfWeekMask( 
            /* [retval][out] */ long *plMask) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DaylightInstance( 
            /* [retval][out] */ long *plInstance) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DaylightMonthOfYear( 
            /* [retval][out] */ long *plMonth) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITimeZoneVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITimeZone * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITimeZone * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITimeZone * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITimeZone * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITimeZone * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITimeZone * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITimeZone * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bias )( 
            ITimeZone * This,
            /* [retval][out] */ long *plBias);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SupportsDST )( 
            ITimeZone * This,
            /* [retval][out] */ VARIANT_BOOL *pfSupportsDST);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsStandardAbsoluteDate )( 
            ITimeZone * This,
            /* [retval][out] */ VARIANT_BOOL *pfAbsolute);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDaylightAbsoluteDate )( 
            ITimeZone * This,
            /* [retval][out] */ VARIANT_BOOL *pfAbsolute);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StandardBias )( 
            ITimeZone * This,
            /* [retval][out] */ long *plBias);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StandardName )( 
            ITimeZone * This,
            /* [retval][out] */ BSTR *ppwsz);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StandardDate )( 
            ITimeZone * This,
            /* [retval][out] */ DATE *pDate);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StandardDayOfWeekMask )( 
            ITimeZone * This,
            /* [retval][out] */ long *plMask);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StandardInstance )( 
            ITimeZone * This,
            /* [retval][out] */ long *plInstance);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StandardMonthOfYear )( 
            ITimeZone * This,
            /* [retval][out] */ long *plMonth);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DaylightBias )( 
            ITimeZone * This,
            /* [retval][out] */ long *plBias);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DaylightName )( 
            ITimeZone * This,
            /* [retval][out] */ BSTR *ppwsz);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DaylightDate )( 
            ITimeZone * This,
            /* [retval][out] */ DATE *pDate);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DaylightDayOfWeekMask )( 
            ITimeZone * This,
            /* [retval][out] */ long *plMask);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DaylightInstance )( 
            ITimeZone * This,
            /* [retval][out] */ long *plInstance);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DaylightMonthOfYear )( 
            ITimeZone * This,
            /* [retval][out] */ long *plMonth);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITimeZone * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        END_INTERFACE
    } ITimeZoneVtbl;

    interface ITimeZone
    {
        CONST_VTBL struct ITimeZoneVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITimeZone_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITimeZone_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITimeZone_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITimeZone_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITimeZone_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITimeZone_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITimeZone_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITimeZone_get_Bias(This,plBias)	\
    ( (This)->lpVtbl -> get_Bias(This,plBias) ) 

#define ITimeZone_get_SupportsDST(This,pfSupportsDST)	\
    ( (This)->lpVtbl -> get_SupportsDST(This,pfSupportsDST) ) 

#define ITimeZone_get_IsStandardAbsoluteDate(This,pfAbsolute)	\
    ( (This)->lpVtbl -> get_IsStandardAbsoluteDate(This,pfAbsolute) ) 

#define ITimeZone_get_IsDaylightAbsoluteDate(This,pfAbsolute)	\
    ( (This)->lpVtbl -> get_IsDaylightAbsoluteDate(This,pfAbsolute) ) 

#define ITimeZone_get_StandardBias(This,plBias)	\
    ( (This)->lpVtbl -> get_StandardBias(This,plBias) ) 

#define ITimeZone_get_StandardName(This,ppwsz)	\
    ( (This)->lpVtbl -> get_StandardName(This,ppwsz) ) 

#define ITimeZone_get_StandardDate(This,pDate)	\
    ( (This)->lpVtbl -> get_StandardDate(This,pDate) ) 

#define ITimeZone_get_StandardDayOfWeekMask(This,plMask)	\
    ( (This)->lpVtbl -> get_StandardDayOfWeekMask(This,plMask) ) 

#define ITimeZone_get_StandardInstance(This,plInstance)	\
    ( (This)->lpVtbl -> get_StandardInstance(This,plInstance) ) 

#define ITimeZone_get_StandardMonthOfYear(This,plMonth)	\
    ( (This)->lpVtbl -> get_StandardMonthOfYear(This,plMonth) ) 

#define ITimeZone_get_DaylightBias(This,plBias)	\
    ( (This)->lpVtbl -> get_DaylightBias(This,plBias) ) 

#define ITimeZone_get_DaylightName(This,ppwsz)	\
    ( (This)->lpVtbl -> get_DaylightName(This,ppwsz) ) 

#define ITimeZone_get_DaylightDate(This,pDate)	\
    ( (This)->lpVtbl -> get_DaylightDate(This,pDate) ) 

#define ITimeZone_get_DaylightDayOfWeekMask(This,plMask)	\
    ( (This)->lpVtbl -> get_DaylightDayOfWeekMask(This,plMask) ) 

#define ITimeZone_get_DaylightInstance(This,plInstance)	\
    ( (This)->lpVtbl -> get_DaylightInstance(This,plInstance) ) 

#define ITimeZone_get_DaylightMonthOfYear(This,plMonth)	\
    ( (This)->lpVtbl -> get_DaylightMonthOfYear(This,plMonth) ) 

#define ITimeZone_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITimeZone_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0005 */
/* [local] */ 

DEFINE_GUID(IID_IRecurrencePattern, 0x38f47300, 0x270f, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0005_v0_0_s_ifspec;

#ifndef __IRecurrencePattern_INTERFACE_DEFINED__
#define __IRecurrencePattern_INTERFACE_DEFINED__

/* interface IRecurrencePattern */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRecurrencePattern;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("38f47300-270f-11d2-8f18-0000f87a4335")
    IRecurrencePattern : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RecurrenceType( 
            /* [retval][out] */ long *plRecType) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PatternStartDate( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StartTime( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndTime( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PatternEndDate( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NoEndDate( 
            /* [retval][out] */ VARIANT_BOOL *pfNoEndDate) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Occurrences( 
            /* [retval][out] */ long *plOccurrences) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Interval( 
            /* [retval][out] */ long *plInterval) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DayOfWeekMask( 
            /* [retval][out] */ long *plMask) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DayOfMonth( 
            /* [retval][out] */ long *plDay) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Instance( 
            /* [retval][out] */ long *plInstance) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Duration( 
            /* [retval][out] */ long *plDuration) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MonthOfYear( 
            /* [retval][out] */ long *plMonth) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RecurrenceType( 
            /* [in] */ long lRecType) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PatternStartDate( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StartTime( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_EndTime( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PatternEndDate( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NoEndDate( 
            /* [in] */ VARIANT_BOOL fNoEndDate) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Occurrences( 
            /* [in] */ long lOccurrences) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Interval( 
            /* [in] */ long lInterval) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DayOfWeekMask( 
            /* [in] */ long lMask) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DayOfMonth( 
            /* [in] */ long lDay) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Instance( 
            /* [in] */ long lInstance) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Duration( 
            /* [in] */ long lDuration) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MonthOfYear( 
            /* [in] */ long lMonth) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Exceptions( 
            /* [retval][out] */ IExceptions **ppExceptions) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOccurrence( 
            /* [in] */ DATE date,
            /* [retval][out] */ IAppointment **ppAppt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRecurrencePatternVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRecurrencePattern * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRecurrencePattern * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRecurrencePattern * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRecurrencePattern * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRecurrencePattern * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRecurrencePattern * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRecurrencePattern * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecurrenceType )( 
            IRecurrencePattern * This,
            /* [retval][out] */ long *plRecType);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PatternStartDate )( 
            IRecurrencePattern * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartTime )( 
            IRecurrencePattern * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndTime )( 
            IRecurrencePattern * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PatternEndDate )( 
            IRecurrencePattern * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NoEndDate )( 
            IRecurrencePattern * This,
            /* [retval][out] */ VARIANT_BOOL *pfNoEndDate);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Occurrences )( 
            IRecurrencePattern * This,
            /* [retval][out] */ long *plOccurrences);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Interval )( 
            IRecurrencePattern * This,
            /* [retval][out] */ long *plInterval);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DayOfWeekMask )( 
            IRecurrencePattern * This,
            /* [retval][out] */ long *plMask);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DayOfMonth )( 
            IRecurrencePattern * This,
            /* [retval][out] */ long *plDay);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Instance )( 
            IRecurrencePattern * This,
            /* [retval][out] */ long *plInstance);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            IRecurrencePattern * This,
            /* [retval][out] */ long *plDuration);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonthOfYear )( 
            IRecurrencePattern * This,
            /* [retval][out] */ long *plMonth);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RecurrenceType )( 
            IRecurrencePattern * This,
            /* [in] */ long lRecType);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PatternStartDate )( 
            IRecurrencePattern * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartTime )( 
            IRecurrencePattern * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_EndTime )( 
            IRecurrencePattern * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PatternEndDate )( 
            IRecurrencePattern * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NoEndDate )( 
            IRecurrencePattern * This,
            /* [in] */ VARIANT_BOOL fNoEndDate);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Occurrences )( 
            IRecurrencePattern * This,
            /* [in] */ long lOccurrences);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Interval )( 
            IRecurrencePattern * This,
            /* [in] */ long lInterval);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DayOfWeekMask )( 
            IRecurrencePattern * This,
            /* [in] */ long lMask);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DayOfMonth )( 
            IRecurrencePattern * This,
            /* [in] */ long lDay);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Instance )( 
            IRecurrencePattern * This,
            /* [in] */ long lInstance);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Duration )( 
            IRecurrencePattern * This,
            /* [in] */ long lDuration);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MonthOfYear )( 
            IRecurrencePattern * This,
            /* [in] */ long lMonth);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Exceptions )( 
            IRecurrencePattern * This,
            /* [retval][out] */ IExceptions **ppExceptions);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRecurrencePattern * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        HRESULT ( STDMETHODCALLTYPE *GetOccurrence )( 
            IRecurrencePattern * This,
            /* [in] */ DATE date,
            /* [retval][out] */ IAppointment **ppAppt);
        
        END_INTERFACE
    } IRecurrencePatternVtbl;

    interface IRecurrencePattern
    {
        CONST_VTBL struct IRecurrencePatternVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRecurrencePattern_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRecurrencePattern_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRecurrencePattern_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRecurrencePattern_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRecurrencePattern_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRecurrencePattern_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRecurrencePattern_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRecurrencePattern_get_RecurrenceType(This,plRecType)	\
    ( (This)->lpVtbl -> get_RecurrenceType(This,plRecType) ) 

#define IRecurrencePattern_get_PatternStartDate(This,pst)	\
    ( (This)->lpVtbl -> get_PatternStartDate(This,pst) ) 

#define IRecurrencePattern_get_StartTime(This,pst)	\
    ( (This)->lpVtbl -> get_StartTime(This,pst) ) 

#define IRecurrencePattern_get_EndTime(This,pst)	\
    ( (This)->lpVtbl -> get_EndTime(This,pst) ) 

#define IRecurrencePattern_get_PatternEndDate(This,pst)	\
    ( (This)->lpVtbl -> get_PatternEndDate(This,pst) ) 

#define IRecurrencePattern_get_NoEndDate(This,pfNoEndDate)	\
    ( (This)->lpVtbl -> get_NoEndDate(This,pfNoEndDate) ) 

#define IRecurrencePattern_get_Occurrences(This,plOccurrences)	\
    ( (This)->lpVtbl -> get_Occurrences(This,plOccurrences) ) 

#define IRecurrencePattern_get_Interval(This,plInterval)	\
    ( (This)->lpVtbl -> get_Interval(This,plInterval) ) 

#define IRecurrencePattern_get_DayOfWeekMask(This,plMask)	\
    ( (This)->lpVtbl -> get_DayOfWeekMask(This,plMask) ) 

#define IRecurrencePattern_get_DayOfMonth(This,plDay)	\
    ( (This)->lpVtbl -> get_DayOfMonth(This,plDay) ) 

#define IRecurrencePattern_get_Instance(This,plInstance)	\
    ( (This)->lpVtbl -> get_Instance(This,plInstance) ) 

#define IRecurrencePattern_get_Duration(This,plDuration)	\
    ( (This)->lpVtbl -> get_Duration(This,plDuration) ) 

#define IRecurrencePattern_get_MonthOfYear(This,plMonth)	\
    ( (This)->lpVtbl -> get_MonthOfYear(This,plMonth) ) 

#define IRecurrencePattern_put_RecurrenceType(This,lRecType)	\
    ( (This)->lpVtbl -> put_RecurrenceType(This,lRecType) ) 

#define IRecurrencePattern_put_PatternStartDate(This,st)	\
    ( (This)->lpVtbl -> put_PatternStartDate(This,st) ) 

#define IRecurrencePattern_put_StartTime(This,st)	\
    ( (This)->lpVtbl -> put_StartTime(This,st) ) 

#define IRecurrencePattern_put_EndTime(This,st)	\
    ( (This)->lpVtbl -> put_EndTime(This,st) ) 

#define IRecurrencePattern_put_PatternEndDate(This,st)	\
    ( (This)->lpVtbl -> put_PatternEndDate(This,st) ) 

#define IRecurrencePattern_put_NoEndDate(This,fNoEndDate)	\
    ( (This)->lpVtbl -> put_NoEndDate(This,fNoEndDate) ) 

#define IRecurrencePattern_put_Occurrences(This,lOccurrences)	\
    ( (This)->lpVtbl -> put_Occurrences(This,lOccurrences) ) 

#define IRecurrencePattern_put_Interval(This,lInterval)	\
    ( (This)->lpVtbl -> put_Interval(This,lInterval) ) 

#define IRecurrencePattern_put_DayOfWeekMask(This,lMask)	\
    ( (This)->lpVtbl -> put_DayOfWeekMask(This,lMask) ) 

#define IRecurrencePattern_put_DayOfMonth(This,lDay)	\
    ( (This)->lpVtbl -> put_DayOfMonth(This,lDay) ) 

#define IRecurrencePattern_put_Instance(This,lInstance)	\
    ( (This)->lpVtbl -> put_Instance(This,lInstance) ) 

#define IRecurrencePattern_put_Duration(This,lDuration)	\
    ( (This)->lpVtbl -> put_Duration(This,lDuration) ) 

#define IRecurrencePattern_put_MonthOfYear(This,lMonth)	\
    ( (This)->lpVtbl -> put_MonthOfYear(This,lMonth) ) 

#define IRecurrencePattern_get_Exceptions(This,ppExceptions)	\
    ( (This)->lpVtbl -> get_Exceptions(This,ppExceptions) ) 

#define IRecurrencePattern_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#define IRecurrencePattern_GetOccurrence(This,date,ppAppt)	\
    ( (This)->lpVtbl -> GetOccurrence(This,date,ppAppt) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRecurrencePattern_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0006 */
/* [local] */ 

DEFINE_GUID(IID_IRecurrencePattern2, 0x86d50e13, 0x9c2a, 0x4e46, 0x8a, 0x90, 0xc9, 0x2e, 0x31, 0xc4, 0xc4, 0xf9);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0006_v0_0_s_ifspec;

#ifndef __IRecurrencePattern2_INTERFACE_DEFINED__
#define __IRecurrencePattern2_INTERFACE_DEFINED__

/* interface IRecurrencePattern2 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRecurrencePattern2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("86D50E13-9C2A-4e46-8A90-C92E31C4C4F9")
    IRecurrencePattern2 : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RecurrenceType( 
            /* [retval][out] */ long *plRecType) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PatternStartDate( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StartTime( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndTime( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndType( 
            /* [retval][out] */ OlRecurrenceEndType *pEndType) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PatternEndDate( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NoEndDate( 
            /* [retval][out] */ VARIANT_BOOL *pfNoEndDate) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Occurrences( 
            /* [retval][out] */ long *plOccurrences) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Interval( 
            /* [retval][out] */ long *plInterval) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DayOfWeekMask( 
            /* [retval][out] */ long *plMask) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DayOfMonth( 
            /* [retval][out] */ long *plDay) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Instance( 
            /* [retval][out] */ long *plInstance) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Duration( 
            /* [retval][out] */ long *plDuration) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MonthOfYear( 
            /* [retval][out] */ long *plMonth) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RecurrenceType( 
            /* [in] */ long lRecType) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PatternStartDate( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StartTime( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PatternEndDate( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NoEndDate( 
            /* [in] */ VARIANT_BOOL fNoEndDate) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Occurrences( 
            /* [in] */ long lOccurrences) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Interval( 
            /* [in] */ long lInterval) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DayOfWeekMask( 
            /* [in] */ long lMask) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DayOfMonth( 
            /* [in] */ long lDay) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Instance( 
            /* [in] */ long lInstance) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Duration( 
            /* [in] */ long lDuration) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MonthOfYear( 
            /* [in] */ long lMonth) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOccurrence( 
            /* [in] */ DATE date,
            /* [retval][out] */ IAppointment2 **ppAppt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOccurrenceByIndex( 
            /* [in] */ UINT uiIndex,
            /* [retval][out] */ IAppointment2 **ppAppt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HasExceptions( 
            /* [retval][out] */ VARIANT_BOOL *pfHasExceptions) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Exceptions( 
            /* [retval][out] */ IExceptions **ppExceptions) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRecurrencePattern2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRecurrencePattern2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRecurrencePattern2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRecurrencePattern2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRecurrencePattern2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRecurrencePattern2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRecurrencePattern2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRecurrencePattern2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RecurrenceType )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ long *plRecType);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PatternStartDate )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartTime )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndTime )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndType )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ OlRecurrenceEndType *pEndType);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PatternEndDate )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NoEndDate )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfNoEndDate);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Occurrences )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ long *plOccurrences);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Interval )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ long *plInterval);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DayOfWeekMask )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ long *plMask);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DayOfMonth )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ long *plDay);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Instance )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ long *plInstance);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ long *plDuration);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonthOfYear )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ long *plMonth);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RecurrenceType )( 
            IRecurrencePattern2 * This,
            /* [in] */ long lRecType);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PatternStartDate )( 
            IRecurrencePattern2 * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartTime )( 
            IRecurrencePattern2 * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PatternEndDate )( 
            IRecurrencePattern2 * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NoEndDate )( 
            IRecurrencePattern2 * This,
            /* [in] */ VARIANT_BOOL fNoEndDate);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Occurrences )( 
            IRecurrencePattern2 * This,
            /* [in] */ long lOccurrences);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Interval )( 
            IRecurrencePattern2 * This,
            /* [in] */ long lInterval);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DayOfWeekMask )( 
            IRecurrencePattern2 * This,
            /* [in] */ long lMask);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DayOfMonth )( 
            IRecurrencePattern2 * This,
            /* [in] */ long lDay);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Instance )( 
            IRecurrencePattern2 * This,
            /* [in] */ long lInstance);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Duration )( 
            IRecurrencePattern2 * This,
            /* [in] */ long lDuration);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MonthOfYear )( 
            IRecurrencePattern2 * This,
            /* [in] */ long lMonth);
        
        HRESULT ( STDMETHODCALLTYPE *GetOccurrence )( 
            IRecurrencePattern2 * This,
            /* [in] */ DATE date,
            /* [retval][out] */ IAppointment2 **ppAppt);
        
        HRESULT ( STDMETHODCALLTYPE *GetOccurrenceByIndex )( 
            IRecurrencePattern2 * This,
            /* [in] */ UINT uiIndex,
            /* [retval][out] */ IAppointment2 **ppAppt);
        
        HRESULT ( STDMETHODCALLTYPE *HasExceptions )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfHasExceptions);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Exceptions )( 
            IRecurrencePattern2 * This,
            /* [retval][out] */ IExceptions **ppExceptions);
        
        END_INTERFACE
    } IRecurrencePattern2Vtbl;

    interface IRecurrencePattern2
    {
        CONST_VTBL struct IRecurrencePattern2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRecurrencePattern2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRecurrencePattern2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRecurrencePattern2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRecurrencePattern2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRecurrencePattern2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRecurrencePattern2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRecurrencePattern2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRecurrencePattern2_get_RecurrenceType(This,plRecType)	\
    ( (This)->lpVtbl -> get_RecurrenceType(This,plRecType) ) 

#define IRecurrencePattern2_get_PatternStartDate(This,pst)	\
    ( (This)->lpVtbl -> get_PatternStartDate(This,pst) ) 

#define IRecurrencePattern2_get_StartTime(This,pst)	\
    ( (This)->lpVtbl -> get_StartTime(This,pst) ) 

#define IRecurrencePattern2_get_EndTime(This,pst)	\
    ( (This)->lpVtbl -> get_EndTime(This,pst) ) 

#define IRecurrencePattern2_get_EndType(This,pEndType)	\
    ( (This)->lpVtbl -> get_EndType(This,pEndType) ) 

#define IRecurrencePattern2_get_PatternEndDate(This,pst)	\
    ( (This)->lpVtbl -> get_PatternEndDate(This,pst) ) 

#define IRecurrencePattern2_get_NoEndDate(This,pfNoEndDate)	\
    ( (This)->lpVtbl -> get_NoEndDate(This,pfNoEndDate) ) 

#define IRecurrencePattern2_get_Occurrences(This,plOccurrences)	\
    ( (This)->lpVtbl -> get_Occurrences(This,plOccurrences) ) 

#define IRecurrencePattern2_get_Interval(This,plInterval)	\
    ( (This)->lpVtbl -> get_Interval(This,plInterval) ) 

#define IRecurrencePattern2_get_DayOfWeekMask(This,plMask)	\
    ( (This)->lpVtbl -> get_DayOfWeekMask(This,plMask) ) 

#define IRecurrencePattern2_get_DayOfMonth(This,plDay)	\
    ( (This)->lpVtbl -> get_DayOfMonth(This,plDay) ) 

#define IRecurrencePattern2_get_Instance(This,plInstance)	\
    ( (This)->lpVtbl -> get_Instance(This,plInstance) ) 

#define IRecurrencePattern2_get_Duration(This,plDuration)	\
    ( (This)->lpVtbl -> get_Duration(This,plDuration) ) 

#define IRecurrencePattern2_get_MonthOfYear(This,plMonth)	\
    ( (This)->lpVtbl -> get_MonthOfYear(This,plMonth) ) 

#define IRecurrencePattern2_put_RecurrenceType(This,lRecType)	\
    ( (This)->lpVtbl -> put_RecurrenceType(This,lRecType) ) 

#define IRecurrencePattern2_put_PatternStartDate(This,st)	\
    ( (This)->lpVtbl -> put_PatternStartDate(This,st) ) 

#define IRecurrencePattern2_put_StartTime(This,st)	\
    ( (This)->lpVtbl -> put_StartTime(This,st) ) 

#define IRecurrencePattern2_put_PatternEndDate(This,st)	\
    ( (This)->lpVtbl -> put_PatternEndDate(This,st) ) 

#define IRecurrencePattern2_put_NoEndDate(This,fNoEndDate)	\
    ( (This)->lpVtbl -> put_NoEndDate(This,fNoEndDate) ) 

#define IRecurrencePattern2_put_Occurrences(This,lOccurrences)	\
    ( (This)->lpVtbl -> put_Occurrences(This,lOccurrences) ) 

#define IRecurrencePattern2_put_Interval(This,lInterval)	\
    ( (This)->lpVtbl -> put_Interval(This,lInterval) ) 

#define IRecurrencePattern2_put_DayOfWeekMask(This,lMask)	\
    ( (This)->lpVtbl -> put_DayOfWeekMask(This,lMask) ) 

#define IRecurrencePattern2_put_DayOfMonth(This,lDay)	\
    ( (This)->lpVtbl -> put_DayOfMonth(This,lDay) ) 

#define IRecurrencePattern2_put_Instance(This,lInstance)	\
    ( (This)->lpVtbl -> put_Instance(This,lInstance) ) 

#define IRecurrencePattern2_put_Duration(This,lDuration)	\
    ( (This)->lpVtbl -> put_Duration(This,lDuration) ) 

#define IRecurrencePattern2_put_MonthOfYear(This,lMonth)	\
    ( (This)->lpVtbl -> put_MonthOfYear(This,lMonth) ) 

#define IRecurrencePattern2_GetOccurrence(This,date,ppAppt)	\
    ( (This)->lpVtbl -> GetOccurrence(This,date,ppAppt) ) 

#define IRecurrencePattern2_GetOccurrenceByIndex(This,uiIndex,ppAppt)	\
    ( (This)->lpVtbl -> GetOccurrenceByIndex(This,uiIndex,ppAppt) ) 

#define IRecurrencePattern2_HasExceptions(This,pfHasExceptions)	\
    ( (This)->lpVtbl -> HasExceptions(This,pfHasExceptions) ) 

#define IRecurrencePattern2_get_Exceptions(This,ppExceptions)	\
    ( (This)->lpVtbl -> get_Exceptions(This,ppExceptions) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRecurrencePattern2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0007 */
/* [local] */ 

DEFINE_GUID(IID_IRecipient, 0x7e136be0, 0x5240, 0x11d2, 0x8f, 0x1b, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0007_v0_0_s_ifspec;

#ifndef __IRecipient_INTERFACE_DEFINED__
#define __IRecipient_INTERFACE_DEFINED__

/* interface IRecipient */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRecipient;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7e136be0-5240-11d2-8f1b-0000f87a4335")
    IRecipient : public IDispatch
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Address( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Address( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRecipientVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRecipient * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRecipient * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRecipient * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRecipient * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRecipient * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRecipient * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRecipient * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Address )( 
            IRecipient * This,
            /* [in] */ BSTR bstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Address )( 
            IRecipient * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IRecipient * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRecipient * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        END_INTERFACE
    } IRecipientVtbl;

    interface IRecipient
    {
        CONST_VTBL struct IRecipientVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRecipient_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRecipient_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRecipient_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRecipient_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRecipient_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRecipient_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRecipient_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRecipient_put_Address(This,bstr)	\
    ( (This)->lpVtbl -> put_Address(This,bstr) ) 

#define IRecipient_get_Address(This,pbstr)	\
    ( (This)->lpVtbl -> get_Address(This,pbstr) ) 

#define IRecipient_get_Name(This,pbstr)	\
    ( (This)->lpVtbl -> get_Name(This,pbstr) ) 

#define IRecipient_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRecipient_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0008 */
/* [local] */ 

DEFINE_GUID(IID_IPOlRecipient, 0xA11C6E30, 0x51B5, 0x11d3, 0x8f, 0x39, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0008_v0_0_s_ifspec;

#ifndef __IPOlRecipient_INTERFACE_DEFINED__
#define __IPOlRecipient_INTERFACE_DEFINED__

/* interface IPOlRecipient */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPOlRecipient;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a11c6e30-51b5-11d3-8f39-0000f87a4335")
    IPOlRecipient : public IRecipient
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Resolve( 
            /* [in] */ VARIANT_BOOL fShowDialog,
            /* [retval][out] */ VARIANT_BOOL *pfResolved) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOlRecipientVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOlRecipient * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOlRecipient * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOlRecipient * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPOlRecipient * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPOlRecipient * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPOlRecipient * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPOlRecipient * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Address )( 
            IPOlRecipient * This,
            /* [in] */ BSTR bstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Address )( 
            IPOlRecipient * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IPOlRecipient * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPOlRecipient * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        HRESULT ( STDMETHODCALLTYPE *Resolve )( 
            IPOlRecipient * This,
            /* [in] */ VARIANT_BOOL fShowDialog,
            /* [retval][out] */ VARIANT_BOOL *pfResolved);
        
        END_INTERFACE
    } IPOlRecipientVtbl;

    interface IPOlRecipient
    {
        CONST_VTBL struct IPOlRecipientVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOlRecipient_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOlRecipient_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOlRecipient_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOlRecipient_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPOlRecipient_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPOlRecipient_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPOlRecipient_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPOlRecipient_put_Address(This,bstr)	\
    ( (This)->lpVtbl -> put_Address(This,bstr) ) 

#define IPOlRecipient_get_Address(This,pbstr)	\
    ( (This)->lpVtbl -> get_Address(This,pbstr) ) 

#define IPOlRecipient_get_Name(This,pbstr)	\
    ( (This)->lpVtbl -> get_Name(This,pbstr) ) 

#define IPOlRecipient_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 


#define IPOlRecipient_Resolve(This,fShowDialog,pfResolved)	\
    ( (This)->lpVtbl -> Resolve(This,fShowDialog,pfResolved) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOlRecipient_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0009 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum OlRecipientType
    {	olRecipientTypeUnknown	= 0,
	olRecipientTypeRequired	= 1,
	olRecipientTypeOptional	= 2,
	olRecipientTypeResource	= 3,
	olRecipientTypeOrganizer	= 4
    } 	OlRecipientType;

typedef /* [v1_enum] */ 
enum OlRecipientStatus
    {	olRecipientStatusUnknown	= 0,
	olRecipientStatusAccepted	= 1,
	olRecipientStatusDeclined	= 2,
	olRecipientStatusTentative	= 3,
	olRecipientStatusNoResponse	= 4
    } 	OlRecipientStatus;

DEFINE_GUID(IID_IRecipient2, 0x13a73d92, 0xc9ce, 0x4904, 0xa3, 0x48, 0xcb, 0xa3, 0x24, 0x6f, 0x2f, 0x8c);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0009_v0_0_s_ifspec;

#ifndef __IRecipient2_INTERFACE_DEFINED__
#define __IRecipient2_INTERFACE_DEFINED__

/* interface IRecipient2 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRecipient2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("13a73d92-c9ce-4904-a348-cba3246f2f8c")
    IRecipient2 : public IPOlRecipient
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ OlRecipientType rtType) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Status( 
            /* [in] */ OlRecipientStatus rtStatus) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ OlRecipientType *prtType) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ OlRecipientStatus *prtStatus) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRecipient2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRecipient2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRecipient2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRecipient2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRecipient2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRecipient2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRecipient2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRecipient2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Address )( 
            IRecipient2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Address )( 
            IRecipient2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IRecipient2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRecipient2 * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        HRESULT ( STDMETHODCALLTYPE *Resolve )( 
            IRecipient2 * This,
            /* [in] */ VARIANT_BOOL fShowDialog,
            /* [retval][out] */ VARIANT_BOOL *pfResolved);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            IRecipient2 * This,
            /* [in] */ OlRecipientType rtType);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Status )( 
            IRecipient2 * This,
            /* [in] */ OlRecipientStatus rtStatus);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IRecipient2 * This,
            /* [retval][out] */ OlRecipientType *prtType);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IRecipient2 * This,
            /* [retval][out] */ OlRecipientStatus *prtStatus);
        
        END_INTERFACE
    } IRecipient2Vtbl;

    interface IRecipient2
    {
        CONST_VTBL struct IRecipient2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRecipient2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRecipient2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRecipient2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRecipient2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRecipient2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRecipient2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRecipient2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRecipient2_put_Address(This,bstr)	\
    ( (This)->lpVtbl -> put_Address(This,bstr) ) 

#define IRecipient2_get_Address(This,pbstr)	\
    ( (This)->lpVtbl -> get_Address(This,pbstr) ) 

#define IRecipient2_get_Name(This,pbstr)	\
    ( (This)->lpVtbl -> get_Name(This,pbstr) ) 

#define IRecipient2_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 


#define IRecipient2_Resolve(This,fShowDialog,pfResolved)	\
    ( (This)->lpVtbl -> Resolve(This,fShowDialog,pfResolved) ) 


#define IRecipient2_put_Type(This,rtType)	\
    ( (This)->lpVtbl -> put_Type(This,rtType) ) 

#define IRecipient2_put_Status(This,rtStatus)	\
    ( (This)->lpVtbl -> put_Status(This,rtStatus) ) 

#define IRecipient2_get_Type(This,prtType)	\
    ( (This)->lpVtbl -> get_Type(This,prtType) ) 

#define IRecipient2_get_Status(This,prtStatus)	\
    ( (This)->lpVtbl -> get_Status(This,prtStatus) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRecipient2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0010 */
/* [local] */ 

DEFINE_GUID(IID_IRecipients, 0x76065ae0, 0x2347, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0010_v0_0_s_ifspec;

#ifndef __IRecipients_INTERFACE_DEFINED__
#define __IRecipients_INTERFACE_DEFINED__

/* interface IRecipients */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRecipients;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("76065ae0-2347-11d2-8f18-0000f87a4335")
    IRecipients : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IRecipient **ppRecipient) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int iIndex,
            /* [retval][out] */ IRecipient **ppRecipient) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ int iIndex) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *pnCount) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **ppEnumerator) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRecipientsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRecipients * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRecipients * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRecipients * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRecipients * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRecipients * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRecipients * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRecipients * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IRecipients * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IRecipient **ppRecipient);
        
        HRESULT ( STDMETHODCALLTYPE *Item )( 
            IRecipients * This,
            /* [in] */ int iIndex,
            /* [retval][out] */ IRecipient **ppRecipient);
        
        HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IRecipients * This,
            /* [in] */ int iIndex);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IRecipients * This,
            /* [retval][out] */ int *pnCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IRecipients * This,
            /* [retval][out] */ IUnknown **ppEnumerator);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRecipients * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        END_INTERFACE
    } IRecipientsVtbl;

    interface IRecipients
    {
        CONST_VTBL struct IRecipientsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRecipients_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRecipients_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRecipients_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRecipients_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRecipients_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRecipients_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRecipients_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRecipients_Add(This,bstrName,ppRecipient)	\
    ( (This)->lpVtbl -> Add(This,bstrName,ppRecipient) ) 

#define IRecipients_Item(This,iIndex,ppRecipient)	\
    ( (This)->lpVtbl -> Item(This,iIndex,ppRecipient) ) 

#define IRecipients_Remove(This,iIndex)	\
    ( (This)->lpVtbl -> Remove(This,iIndex) ) 

#define IRecipients_get_Count(This,pnCount)	\
    ( (This)->lpVtbl -> get_Count(This,pnCount) ) 

#define IRecipients_get__NewEnum(This,ppEnumerator)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumerator) ) 

#define IRecipients_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRecipients_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0011 */
/* [local] */ 

DEFINE_GUID(IID_IRecipients2, 0x463dfb6e, 0xede9, 0x48bf, 0x84, 0x5e, 0x52, 0xb1, 0xf, 0x8f, 0xba, 0x9b);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0011_v0_0_s_ifspec;

#ifndef __IRecipients2_INTERFACE_DEFINED__
#define __IRecipients2_INTERFACE_DEFINED__

/* interface IRecipients2 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRecipients2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("463DFB6E-EDE9-48bf-845E-52B10F8FBA9B")
    IRecipients2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IRecipient3 **ppRecipient) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int iIndex,
            /* [retval][out] */ IRecipient3 **ppRecipient) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ int iIndex) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *pnCount) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **ppEnumerator) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp3 **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRecipients2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRecipients2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRecipients2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRecipients2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IRecipients2 * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IRecipient3 **ppRecipient);
        
        HRESULT ( STDMETHODCALLTYPE *Item )( 
            IRecipients2 * This,
            /* [in] */ int iIndex,
            /* [retval][out] */ IRecipient3 **ppRecipient);
        
        HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IRecipients2 * This,
            /* [in] */ int iIndex);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IRecipients2 * This,
            /* [retval][out] */ int *pnCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IRecipients2 * This,
            /* [retval][out] */ IUnknown **ppEnumerator);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IRecipients2 * This,
            /* [retval][out] */ IPOutlookApp3 **polApp);
        
        END_INTERFACE
    } IRecipients2Vtbl;

    interface IRecipients2
    {
        CONST_VTBL struct IRecipients2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRecipients2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRecipients2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRecipients2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRecipients2_Add(This,bstrName,ppRecipient)	\
    ( (This)->lpVtbl -> Add(This,bstrName,ppRecipient) ) 

#define IRecipients2_Item(This,iIndex,ppRecipient)	\
    ( (This)->lpVtbl -> Item(This,iIndex,ppRecipient) ) 

#define IRecipients2_Remove(This,iIndex)	\
    ( (This)->lpVtbl -> Remove(This,iIndex) ) 

#define IRecipients2_get_Count(This,pnCount)	\
    ( (This)->lpVtbl -> get_Count(This,pnCount) ) 

#define IRecipients2_get__NewEnum(This,ppEnumerator)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumerator) ) 

#define IRecipients2_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRecipients2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0012 */
/* [local] */ 

DEFINE_GUID(IID_IPOutlookItemCollection, 0xf06748c0, 0x21a5, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0012_v0_0_s_ifspec;

#ifndef __IPOutlookItemCollection_INTERFACE_DEFINED__
#define __IPOutlookItemCollection_INTERFACE_DEFINED__

/* interface IPOutlookItemCollection */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPOutlookItemCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f06748c0-21a5-11d2-8f18-0000f87a4335")
    IPOutlookItemCollection : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Add( 
            /* [retval][out] */ IDispatch **ppolItem) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *pnCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IDispatch **ppItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindNext( 
            /* [retval][out] */ IDispatch **ppItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int index,
            /* [retval][out] */ IDispatch **polItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ int iIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Restrict( 
            /* [in] */ BSTR pwszRestriction,
            /* [retval][out] */ IPOutlookItemCollection **ppolItems) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sort( 
            /* [in] */ BSTR pwszProperty,
            /* [in] */ VARIANT_BOOL fDescending) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IncludeRecurrences( 
            /* [retval][out] */ VARIANT_BOOL *pfIncludeRecurrences) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IncludeRecurrences( 
            /* [in] */ VARIANT_BOOL fIncludeRecurrences) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **ppEnumerator) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOutlookItemCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOutlookItemCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOutlookItemCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOutlookItemCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPOutlookItemCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPOutlookItemCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPOutlookItemCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPOutlookItemCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IPOutlookItemCollection * This,
            /* [retval][out] */ IDispatch **ppolItem);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IPOutlookItemCollection * This,
            /* [retval][out] */ int *pnCount);
        
        HRESULT ( STDMETHODCALLTYPE *Find )( 
            IPOutlookItemCollection * This,
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IDispatch **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *FindNext )( 
            IPOutlookItemCollection * This,
            /* [retval][out] */ IDispatch **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *Item )( 
            IPOutlookItemCollection * This,
            /* [in] */ int index,
            /* [retval][out] */ IDispatch **polItem);
        
        HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IPOutlookItemCollection * This,
            /* [in] */ int iIndex);
        
        HRESULT ( STDMETHODCALLTYPE *Restrict )( 
            IPOutlookItemCollection * This,
            /* [in] */ BSTR pwszRestriction,
            /* [retval][out] */ IPOutlookItemCollection **ppolItems);
        
        HRESULT ( STDMETHODCALLTYPE *Sort )( 
            IPOutlookItemCollection * This,
            /* [in] */ BSTR pwszProperty,
            /* [in] */ VARIANT_BOOL fDescending);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeRecurrences )( 
            IPOutlookItemCollection * This,
            /* [retval][out] */ VARIANT_BOOL *pfIncludeRecurrences);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeRecurrences )( 
            IPOutlookItemCollection * This,
            /* [in] */ VARIANT_BOOL fIncludeRecurrences);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IPOutlookItemCollection * This,
            /* [retval][out] */ IUnknown **ppEnumerator);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPOutlookItemCollection * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        END_INTERFACE
    } IPOutlookItemCollectionVtbl;

    interface IPOutlookItemCollection
    {
        CONST_VTBL struct IPOutlookItemCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOutlookItemCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOutlookItemCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOutlookItemCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOutlookItemCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPOutlookItemCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPOutlookItemCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPOutlookItemCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPOutlookItemCollection_Add(This,ppolItem)	\
    ( (This)->lpVtbl -> Add(This,ppolItem) ) 

#define IPOutlookItemCollection_get_Count(This,pnCount)	\
    ( (This)->lpVtbl -> get_Count(This,pnCount) ) 

#define IPOutlookItemCollection_Find(This,bstrRestriction,ppItem)	\
    ( (This)->lpVtbl -> Find(This,bstrRestriction,ppItem) ) 

#define IPOutlookItemCollection_FindNext(This,ppItem)	\
    ( (This)->lpVtbl -> FindNext(This,ppItem) ) 

#define IPOutlookItemCollection_Item(This,index,polItem)	\
    ( (This)->lpVtbl -> Item(This,index,polItem) ) 

#define IPOutlookItemCollection_Remove(This,iIndex)	\
    ( (This)->lpVtbl -> Remove(This,iIndex) ) 

#define IPOutlookItemCollection_Restrict(This,pwszRestriction,ppolItems)	\
    ( (This)->lpVtbl -> Restrict(This,pwszRestriction,ppolItems) ) 

#define IPOutlookItemCollection_Sort(This,pwszProperty,fDescending)	\
    ( (This)->lpVtbl -> Sort(This,pwszProperty,fDescending) ) 

#define IPOutlookItemCollection_get_IncludeRecurrences(This,pfIncludeRecurrences)	\
    ( (This)->lpVtbl -> get_IncludeRecurrences(This,pfIncludeRecurrences) ) 

#define IPOutlookItemCollection_put_IncludeRecurrences(This,fIncludeRecurrences)	\
    ( (This)->lpVtbl -> put_IncludeRecurrences(This,fIncludeRecurrences) ) 

#define IPOutlookItemCollection_get__NewEnum(This,ppEnumerator)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumerator) ) 

#define IPOutlookItemCollection_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOutlookItemCollection_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0013 */
/* [local] */ 

DEFINE_GUID(IID_IPOutlookItemCollection2, 0xe6a4c648, 0x414c, 0x453c, 0xbe, 0x7, 0x79, 0x43, 0xb, 0x4a, 0xdc, 0xda);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0013_v0_0_s_ifspec;

#ifndef __IPOutlookItemCollection2_INTERFACE_DEFINED__
#define __IPOutlookItemCollection2_INTERFACE_DEFINED__

/* interface IPOutlookItemCollection2 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPOutlookItemCollection2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E6A4C648-414C-453c-BE07-79430B4ADCDA")
    IPOutlookItemCollection2 : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IItem2 **ppItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindNext( 
            /* [retval][out] */ IItem2 **ppItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ int index,
            /* [retval][out] */ IItem2 **ppItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ItemId( 
            /* [in] */ int index,
            /* [out] */ OLITEMID *pOlItemId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Restrict( 
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IPOutlookItemCollection2 **ppItems) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sort( 
            /* [in] */ DWORD cSorts,
            /* [in] */ BSTR *rgbstrProperty,
            /* [in] */ VARIANT_BOOL *rgfDescending) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *pnCount) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **ppEnumerator) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp3 **polApp) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IncludeRecurrences( 
            /* [retval][out] */ VARIANT_BOOL *pfIncludeRecurrences) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IncludeRecurrences( 
            /* [in] */ VARIANT_BOOL fIncludeRecurrences) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetIndexFromId( 
            /* [in] */ OLITEMID *pItemId,
            /* [out] */ DWORD *pdwIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOutlookItemCollection2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOutlookItemCollection2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOutlookItemCollection2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOutlookItemCollection2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPOutlookItemCollection2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPOutlookItemCollection2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPOutlookItemCollection2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPOutlookItemCollection2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *Find )( 
            IPOutlookItemCollection2 * This,
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IItem2 **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *FindNext )( 
            IPOutlookItemCollection2 * This,
            /* [retval][out] */ IItem2 **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *Item )( 
            IPOutlookItemCollection2 * This,
            /* [in] */ int index,
            /* [retval][out] */ IItem2 **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *ItemId )( 
            IPOutlookItemCollection2 * This,
            /* [in] */ int index,
            /* [out] */ OLITEMID *pOlItemId);
        
        HRESULT ( STDMETHODCALLTYPE *Restrict )( 
            IPOutlookItemCollection2 * This,
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IPOutlookItemCollection2 **ppItems);
        
        HRESULT ( STDMETHODCALLTYPE *Sort )( 
            IPOutlookItemCollection2 * This,
            /* [in] */ DWORD cSorts,
            /* [in] */ BSTR *rgbstrProperty,
            /* [in] */ VARIANT_BOOL *rgfDescending);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IPOutlookItemCollection2 * This,
            /* [retval][out] */ int *pnCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IPOutlookItemCollection2 * This,
            /* [retval][out] */ IUnknown **ppEnumerator);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPOutlookItemCollection2 * This,
            /* [retval][out] */ IPOutlookApp3 **polApp);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeRecurrences )( 
            IPOutlookItemCollection2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfIncludeRecurrences);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeRecurrences )( 
            IPOutlookItemCollection2 * This,
            /* [in] */ VARIANT_BOOL fIncludeRecurrences);
        
        HRESULT ( STDMETHODCALLTYPE *GetIndexFromId )( 
            IPOutlookItemCollection2 * This,
            /* [in] */ OLITEMID *pItemId,
            /* [out] */ DWORD *pdwIndex);
        
        END_INTERFACE
    } IPOutlookItemCollection2Vtbl;

    interface IPOutlookItemCollection2
    {
        CONST_VTBL struct IPOutlookItemCollection2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOutlookItemCollection2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOutlookItemCollection2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOutlookItemCollection2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOutlookItemCollection2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPOutlookItemCollection2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPOutlookItemCollection2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPOutlookItemCollection2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPOutlookItemCollection2_Find(This,bstrRestriction,ppItem)	\
    ( (This)->lpVtbl -> Find(This,bstrRestriction,ppItem) ) 

#define IPOutlookItemCollection2_FindNext(This,ppItem)	\
    ( (This)->lpVtbl -> FindNext(This,ppItem) ) 

#define IPOutlookItemCollection2_Item(This,index,ppItem)	\
    ( (This)->lpVtbl -> Item(This,index,ppItem) ) 

#define IPOutlookItemCollection2_ItemId(This,index,pOlItemId)	\
    ( (This)->lpVtbl -> ItemId(This,index,pOlItemId) ) 

#define IPOutlookItemCollection2_Restrict(This,bstrRestriction,ppItems)	\
    ( (This)->lpVtbl -> Restrict(This,bstrRestriction,ppItems) ) 

#define IPOutlookItemCollection2_Sort(This,cSorts,rgbstrProperty,rgfDescending)	\
    ( (This)->lpVtbl -> Sort(This,cSorts,rgbstrProperty,rgfDescending) ) 

#define IPOutlookItemCollection2_get_Count(This,pnCount)	\
    ( (This)->lpVtbl -> get_Count(This,pnCount) ) 

#define IPOutlookItemCollection2_get__NewEnum(This,ppEnumerator)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumerator) ) 

#define IPOutlookItemCollection2_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#define IPOutlookItemCollection2_get_IncludeRecurrences(This,pfIncludeRecurrences)	\
    ( (This)->lpVtbl -> get_IncludeRecurrences(This,pfIncludeRecurrences) ) 

#define IPOutlookItemCollection2_put_IncludeRecurrences(This,fIncludeRecurrences)	\
    ( (This)->lpVtbl -> put_IncludeRecurrences(This,fIncludeRecurrences) ) 

#define IPOutlookItemCollection2_GetIndexFromId(This,pItemId,pdwIndex)	\
    ( (This)->lpVtbl -> GetIndexFromId(This,pItemId,pdwIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOutlookItemCollection2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0014 */
/* [local] */ 

DEFINE_GUID(IID_IPOutlookFolderCollection, 0xa8235f22, 0xe980, 0x4633, 0x82, 0xec, 0x81, 0x18, 0xd8, 0xb3, 0x7c, 0xb5);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0014_v0_0_s_ifspec;

#ifndef __IPOutlookFolderCollection_INTERFACE_DEFINED__
#define __IPOutlookFolderCollection_INTERFACE_DEFINED__

/* interface IPOutlookFolderCollection */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPOutlookFolderCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A8235F22-E980-4633-82EC-8118D8B37CB5")
    IPOutlookFolderCollection : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *pnCount) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **ppEnumerator) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp3 **ppolApp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IFolder2 **ppFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindNext( 
            /* [retval][out] */ IFolder2 **ppFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFolder( 
            /* [in] */ int index,
            /* [retval][out] */ IFolder2 **ppFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Restrict( 
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IPOutlookFolderCollection **ppFolders) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sort( 
            /* [in] */ DWORD cSorts,
            /* [in] */ BSTR *rgbstrProperty,
            /* [in] */ VARIANT_BOOL *rgfDescending) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOutlookFolderCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOutlookFolderCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOutlookFolderCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOutlookFolderCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPOutlookFolderCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPOutlookFolderCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPOutlookFolderCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPOutlookFolderCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IPOutlookFolderCollection * This,
            /* [retval][out] */ int *pnCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IPOutlookFolderCollection * This,
            /* [retval][out] */ IUnknown **ppEnumerator);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPOutlookFolderCollection * This,
            /* [retval][out] */ IPOutlookApp3 **ppolApp);
        
        HRESULT ( STDMETHODCALLTYPE *Find )( 
            IPOutlookFolderCollection * This,
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IFolder2 **ppFolder);
        
        HRESULT ( STDMETHODCALLTYPE *FindNext )( 
            IPOutlookFolderCollection * This,
            /* [retval][out] */ IFolder2 **ppFolder);
        
        HRESULT ( STDMETHODCALLTYPE *GetFolder )( 
            IPOutlookFolderCollection * This,
            /* [in] */ int index,
            /* [retval][out] */ IFolder2 **ppFolder);
        
        HRESULT ( STDMETHODCALLTYPE *Restrict )( 
            IPOutlookFolderCollection * This,
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IPOutlookFolderCollection **ppFolders);
        
        HRESULT ( STDMETHODCALLTYPE *Sort )( 
            IPOutlookFolderCollection * This,
            /* [in] */ DWORD cSorts,
            /* [in] */ BSTR *rgbstrProperty,
            /* [in] */ VARIANT_BOOL *rgfDescending);
        
        END_INTERFACE
    } IPOutlookFolderCollectionVtbl;

    interface IPOutlookFolderCollection
    {
        CONST_VTBL struct IPOutlookFolderCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOutlookFolderCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOutlookFolderCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOutlookFolderCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOutlookFolderCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPOutlookFolderCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPOutlookFolderCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPOutlookFolderCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPOutlookFolderCollection_get_Count(This,pnCount)	\
    ( (This)->lpVtbl -> get_Count(This,pnCount) ) 

#define IPOutlookFolderCollection_get__NewEnum(This,ppEnumerator)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumerator) ) 

#define IPOutlookFolderCollection_get_Application(This,ppolApp)	\
    ( (This)->lpVtbl -> get_Application(This,ppolApp) ) 

#define IPOutlookFolderCollection_Find(This,bstrRestriction,ppFolder)	\
    ( (This)->lpVtbl -> Find(This,bstrRestriction,ppFolder) ) 

#define IPOutlookFolderCollection_FindNext(This,ppFolder)	\
    ( (This)->lpVtbl -> FindNext(This,ppFolder) ) 

#define IPOutlookFolderCollection_GetFolder(This,index,ppFolder)	\
    ( (This)->lpVtbl -> GetFolder(This,index,ppFolder) ) 

#define IPOutlookFolderCollection_Restrict(This,bstrRestriction,ppFolders)	\
    ( (This)->lpVtbl -> Restrict(This,bstrRestriction,ppFolders) ) 

#define IPOutlookFolderCollection_Sort(This,cSorts,rgbstrProperty,rgfDescending)	\
    ( (This)->lpVtbl -> Sort(This,cSorts,rgbstrProperty,rgfDescending) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOutlookFolderCollection_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0015 */
/* [local] */ 

DEFINE_GUID(IID_IPOutlookStoreCollection, 0xeb5200a8, 0x727b, 0x4aee, 0xb4, 0x15, 0x6c, 0xa4, 0xfb, 0x85, 0x57, 0xf7);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0015_v0_0_s_ifspec;

#ifndef __IPOutlookStoreCollection_INTERFACE_DEFINED__
#define __IPOutlookStoreCollection_INTERFACE_DEFINED__

/* interface IPOutlookStoreCollection */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPOutlookStoreCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EB5200A8-727B-4aee-B415-6CA4FB8557F7")
    IPOutlookStoreCollection : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *pnCount) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **ppEnumerator) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp3 **ppolApp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindNext( 
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStore( 
            /* [in] */ int index,
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Restrict( 
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IPOutlookStoreCollection **ppStores) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sort( 
            /* [in] */ DWORD cSorts,
            /* [in] */ BSTR *rgbstrProperty,
            /* [in] */ VARIANT_BOOL *rgfDescending) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOutlookStoreCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOutlookStoreCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOutlookStoreCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOutlookStoreCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPOutlookStoreCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPOutlookStoreCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPOutlookStoreCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPOutlookStoreCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IPOutlookStoreCollection * This,
            /* [retval][out] */ int *pnCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IPOutlookStoreCollection * This,
            /* [retval][out] */ IUnknown **ppEnumerator);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPOutlookStoreCollection * This,
            /* [retval][out] */ IPOutlookApp3 **ppolApp);
        
        HRESULT ( STDMETHODCALLTYPE *Find )( 
            IPOutlookStoreCollection * This,
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IStore **ppStore);
        
        HRESULT ( STDMETHODCALLTYPE *FindNext )( 
            IPOutlookStoreCollection * This,
            /* [retval][out] */ IStore **ppStore);
        
        HRESULT ( STDMETHODCALLTYPE *GetStore )( 
            IPOutlookStoreCollection * This,
            /* [in] */ int index,
            /* [retval][out] */ IStore **ppStore);
        
        HRESULT ( STDMETHODCALLTYPE *Restrict )( 
            IPOutlookStoreCollection * This,
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IPOutlookStoreCollection **ppStores);
        
        HRESULT ( STDMETHODCALLTYPE *Sort )( 
            IPOutlookStoreCollection * This,
            /* [in] */ DWORD cSorts,
            /* [in] */ BSTR *rgbstrProperty,
            /* [in] */ VARIANT_BOOL *rgfDescending);
        
        END_INTERFACE
    } IPOutlookStoreCollectionVtbl;

    interface IPOutlookStoreCollection
    {
        CONST_VTBL struct IPOutlookStoreCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOutlookStoreCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOutlookStoreCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOutlookStoreCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOutlookStoreCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPOutlookStoreCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPOutlookStoreCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPOutlookStoreCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPOutlookStoreCollection_get_Count(This,pnCount)	\
    ( (This)->lpVtbl -> get_Count(This,pnCount) ) 

#define IPOutlookStoreCollection_get__NewEnum(This,ppEnumerator)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumerator) ) 

#define IPOutlookStoreCollection_get_Application(This,ppolApp)	\
    ( (This)->lpVtbl -> get_Application(This,ppolApp) ) 

#define IPOutlookStoreCollection_Find(This,bstrRestriction,ppStore)	\
    ( (This)->lpVtbl -> Find(This,bstrRestriction,ppStore) ) 

#define IPOutlookStoreCollection_FindNext(This,ppStore)	\
    ( (This)->lpVtbl -> FindNext(This,ppStore) ) 

#define IPOutlookStoreCollection_GetStore(This,index,ppStore)	\
    ( (This)->lpVtbl -> GetStore(This,index,ppStore) ) 

#define IPOutlookStoreCollection_Restrict(This,bstrRestriction,ppStores)	\
    ( (This)->lpVtbl -> Restrict(This,bstrRestriction,ppStores) ) 

#define IPOutlookStoreCollection_Sort(This,cSorts,rgbstrProperty,rgfDescending)	\
    ( (This)->lpVtbl -> Sort(This,cSorts,rgbstrProperty,rgfDescending) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOutlookStoreCollection_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0016 */
/* [local] */ 

DEFINE_GUID(IID_IPOlItems, 0x6E3DBE90, 0x5411, 0x11d3, 0x8F, 0x39, 0x0, 0x0, 0xF8, 0x7A, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0016_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0016_v0_0_s_ifspec;

#ifndef __IPOlItems_INTERFACE_DEFINED__
#define __IPOlItems_INTERFACE_DEFINED__

/* interface IPOlItems */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPOlItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6e3dbe90-5411-11d3-8f39-0000f87a4335")
    IPOlItems : public IPOutlookItemCollection
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetColumns( 
            /* [in] */ BSTR bstrColumns) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOlItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOlItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOlItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOlItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPOlItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPOlItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPOlItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPOlItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IPOlItems * This,
            /* [retval][out] */ IDispatch **ppolItem);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IPOlItems * This,
            /* [retval][out] */ int *pnCount);
        
        HRESULT ( STDMETHODCALLTYPE *Find )( 
            IPOlItems * This,
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IDispatch **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *FindNext )( 
            IPOlItems * This,
            /* [retval][out] */ IDispatch **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *Item )( 
            IPOlItems * This,
            /* [in] */ int index,
            /* [retval][out] */ IDispatch **polItem);
        
        HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IPOlItems * This,
            /* [in] */ int iIndex);
        
        HRESULT ( STDMETHODCALLTYPE *Restrict )( 
            IPOlItems * This,
            /* [in] */ BSTR pwszRestriction,
            /* [retval][out] */ IPOutlookItemCollection **ppolItems);
        
        HRESULT ( STDMETHODCALLTYPE *Sort )( 
            IPOlItems * This,
            /* [in] */ BSTR pwszProperty,
            /* [in] */ VARIANT_BOOL fDescending);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeRecurrences )( 
            IPOlItems * This,
            /* [retval][out] */ VARIANT_BOOL *pfIncludeRecurrences);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeRecurrences )( 
            IPOlItems * This,
            /* [in] */ VARIANT_BOOL fIncludeRecurrences);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IPOlItems * This,
            /* [retval][out] */ IUnknown **ppEnumerator);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPOlItems * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        HRESULT ( STDMETHODCALLTYPE *SetColumns )( 
            IPOlItems * This,
            /* [in] */ BSTR bstrColumns);
        
        END_INTERFACE
    } IPOlItemsVtbl;

    interface IPOlItems
    {
        CONST_VTBL struct IPOlItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOlItems_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOlItems_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOlItems_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOlItems_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPOlItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPOlItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPOlItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPOlItems_Add(This,ppolItem)	\
    ( (This)->lpVtbl -> Add(This,ppolItem) ) 

#define IPOlItems_get_Count(This,pnCount)	\
    ( (This)->lpVtbl -> get_Count(This,pnCount) ) 

#define IPOlItems_Find(This,bstrRestriction,ppItem)	\
    ( (This)->lpVtbl -> Find(This,bstrRestriction,ppItem) ) 

#define IPOlItems_FindNext(This,ppItem)	\
    ( (This)->lpVtbl -> FindNext(This,ppItem) ) 

#define IPOlItems_Item(This,index,polItem)	\
    ( (This)->lpVtbl -> Item(This,index,polItem) ) 

#define IPOlItems_Remove(This,iIndex)	\
    ( (This)->lpVtbl -> Remove(This,iIndex) ) 

#define IPOlItems_Restrict(This,pwszRestriction,ppolItems)	\
    ( (This)->lpVtbl -> Restrict(This,pwszRestriction,ppolItems) ) 

#define IPOlItems_Sort(This,pwszProperty,fDescending)	\
    ( (This)->lpVtbl -> Sort(This,pwszProperty,fDescending) ) 

#define IPOlItems_get_IncludeRecurrences(This,pfIncludeRecurrences)	\
    ( (This)->lpVtbl -> get_IncludeRecurrences(This,pfIncludeRecurrences) ) 

#define IPOlItems_put_IncludeRecurrences(This,fIncludeRecurrences)	\
    ( (This)->lpVtbl -> put_IncludeRecurrences(This,fIncludeRecurrences) ) 

#define IPOlItems_get__NewEnum(This,ppEnumerator)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumerator) ) 

#define IPOlItems_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 


#define IPOlItems_SetColumns(This,bstrColumns)	\
    ( (This)->lpVtbl -> SetColumns(This,bstrColumns) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOlItems_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0017 */
/* [local] */ 

DEFINE_GUID(IID_IContact, 0x7f804e40, 0x2010, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0017_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0017_v0_0_s_ifspec;

#ifndef __IContact_INTERFACE_DEFINED__
#define __IContact_INTERFACE_DEFINED__

/* interface IContact */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IContact;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7f804e40-2010-11d2-8f18-0000f87a4335")
    IContact : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Birthday( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Anniversary( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessFaxNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CompanyName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Department( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Email1Address( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MobileTelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OfficeLocation( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PagerNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessTelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_JobTitle( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeTelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Email2Address( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Spouse( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Email3Address( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Home2TelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeFaxNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CarTelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AssistantName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AssistantTelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Categories( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WebPage( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Business2TelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FirstName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MiddleName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LastName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Suffix( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeAddressStreet( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeAddressCity( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeAddressState( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeAddressPostalCode( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeAddressCountry( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OtherAddressStreet( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OtherAddressCity( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OtherAddressState( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OtherAddressPostalCode( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OtherAddressCountry( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessAddressStreet( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessAddressCity( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessAddressState( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessAddressPostalCode( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessAddressCountry( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RadioTelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FileAs( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Body( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YomiCompanyName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YomiFirstName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YomiLastName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Birthday( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Anniversary( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessFaxNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CompanyName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Department( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Email1Address( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MobileTelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OfficeLocation( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PagerNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessTelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_JobTitle( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeTelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Email2Address( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Spouse( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Email3Address( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Home2TelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeFaxNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CarTelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AssistantName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AssistantTelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Children( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Categories( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_WebPage( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Business2TelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Title( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FirstName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MiddleName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LastName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Suffix( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeAddressStreet( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeAddressCity( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeAddressState( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeAddressPostalCode( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeAddressCountry( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OtherAddressStreet( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OtherAddressCity( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OtherAddressState( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OtherAddressPostalCode( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OtherAddressCountry( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessAddressStreet( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessAddressCity( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessAddressState( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessAddressPostalCode( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessAddressCountry( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RadioTelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FileAs( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Body( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_YomiCompanyName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_YomiFirstName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_YomiLastName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ IContact **ppolCopy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Display( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Oid( 
            /* [retval][out] */ long *poid) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BodyInk( 
            /* [in] */ CEBLOB *pcebl) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BodyInk( 
            /* [retval][out] */ CEBLOB *pcebl) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContactVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IContact * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IContact * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IContact * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IContact * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IContact * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IContact * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IContact * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Birthday )( 
            IContact * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Anniversary )( 
            IContact * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessFaxNumber )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompanyName )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Department )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Email1Address )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MobileTelephoneNumber )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OfficeLocation )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PagerNumber )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessTelephoneNumber )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JobTitle )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeTelephoneNumber )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Email2Address )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Spouse )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Email3Address )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Home2TelephoneNumber )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeFaxNumber )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CarTelephoneNumber )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AssistantName )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AssistantTelephoneNumber )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WebPage )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Business2TelephoneNumber )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstName )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MiddleName )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastName )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Suffix )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeAddressStreet )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeAddressCity )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeAddressState )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeAddressPostalCode )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeAddressCountry )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OtherAddressStreet )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OtherAddressCity )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OtherAddressState )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OtherAddressPostalCode )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OtherAddressCountry )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessAddressStreet )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessAddressCity )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessAddressState )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessAddressPostalCode )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessAddressCountry )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RadioTelephoneNumber )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileAs )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Body )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YomiCompanyName )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YomiFirstName )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YomiLastName )( 
            IContact * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Birthday )( 
            IContact * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Anniversary )( 
            IContact * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessFaxNumber )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CompanyName )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Department )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Email1Address )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MobileTelephoneNumber )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OfficeLocation )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PagerNumber )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessTelephoneNumber )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_JobTitle )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeTelephoneNumber )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Email2Address )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Spouse )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Email3Address )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Home2TelephoneNumber )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeFaxNumber )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CarTelephoneNumber )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AssistantName )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AssistantTelephoneNumber )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Children )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Categories )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_WebPage )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Business2TelephoneNumber )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FirstName )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MiddleName )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LastName )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Suffix )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeAddressStreet )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeAddressCity )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeAddressState )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeAddressPostalCode )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeAddressCountry )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OtherAddressStreet )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OtherAddressCity )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OtherAddressState )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OtherAddressPostalCode )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OtherAddressCountry )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessAddressStreet )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessAddressCity )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessAddressState )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessAddressPostalCode )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessAddressCountry )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RadioTelephoneNumber )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FileAs )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Body )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_YomiCompanyName )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_YomiFirstName )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_YomiLastName )( 
            IContact * This,
            /* [in] */ BSTR bstr);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            IContact * This);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IContact * This);
        
        HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IContact * This,
            /* [retval][out] */ IContact **ppolCopy);
        
        HRESULT ( STDMETHODCALLTYPE *Display )( 
            IContact * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Oid )( 
            IContact * This,
            /* [retval][out] */ long *poid);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BodyInk )( 
            IContact * This,
            /* [in] */ CEBLOB *pcebl);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BodyInk )( 
            IContact * This,
            /* [retval][out] */ CEBLOB *pcebl);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IContact * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        END_INTERFACE
    } IContactVtbl;

    interface IContact
    {
        CONST_VTBL struct IContactVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContact_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IContact_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IContact_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IContact_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IContact_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IContact_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IContact_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IContact_get_Birthday(This,pst)	\
    ( (This)->lpVtbl -> get_Birthday(This,pst) ) 

#define IContact_get_Anniversary(This,pst)	\
    ( (This)->lpVtbl -> get_Anniversary(This,pst) ) 

#define IContact_get_BusinessFaxNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessFaxNumber(This,pbstr) ) 

#define IContact_get_CompanyName(This,pbstr)	\
    ( (This)->lpVtbl -> get_CompanyName(This,pbstr) ) 

#define IContact_get_Department(This,pbstr)	\
    ( (This)->lpVtbl -> get_Department(This,pbstr) ) 

#define IContact_get_Email1Address(This,pbstr)	\
    ( (This)->lpVtbl -> get_Email1Address(This,pbstr) ) 

#define IContact_get_MobileTelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_MobileTelephoneNumber(This,pbstr) ) 

#define IContact_get_OfficeLocation(This,pbstr)	\
    ( (This)->lpVtbl -> get_OfficeLocation(This,pbstr) ) 

#define IContact_get_PagerNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_PagerNumber(This,pbstr) ) 

#define IContact_get_BusinessTelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessTelephoneNumber(This,pbstr) ) 

#define IContact_get_JobTitle(This,pbstr)	\
    ( (This)->lpVtbl -> get_JobTitle(This,pbstr) ) 

#define IContact_get_HomeTelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeTelephoneNumber(This,pbstr) ) 

#define IContact_get_Email2Address(This,pbstr)	\
    ( (This)->lpVtbl -> get_Email2Address(This,pbstr) ) 

#define IContact_get_Spouse(This,pbstr)	\
    ( (This)->lpVtbl -> get_Spouse(This,pbstr) ) 

#define IContact_get_Email3Address(This,pbstr)	\
    ( (This)->lpVtbl -> get_Email3Address(This,pbstr) ) 

#define IContact_get_Home2TelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_Home2TelephoneNumber(This,pbstr) ) 

#define IContact_get_HomeFaxNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeFaxNumber(This,pbstr) ) 

#define IContact_get_CarTelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_CarTelephoneNumber(This,pbstr) ) 

#define IContact_get_AssistantName(This,pbstr)	\
    ( (This)->lpVtbl -> get_AssistantName(This,pbstr) ) 

#define IContact_get_AssistantTelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_AssistantTelephoneNumber(This,pbstr) ) 

#define IContact_get_Children(This,pbstr)	\
    ( (This)->lpVtbl -> get_Children(This,pbstr) ) 

#define IContact_get_Categories(This,pbstr)	\
    ( (This)->lpVtbl -> get_Categories(This,pbstr) ) 

#define IContact_get_WebPage(This,pbstr)	\
    ( (This)->lpVtbl -> get_WebPage(This,pbstr) ) 

#define IContact_get_Business2TelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_Business2TelephoneNumber(This,pbstr) ) 

#define IContact_get_Title(This,pbstr)	\
    ( (This)->lpVtbl -> get_Title(This,pbstr) ) 

#define IContact_get_FirstName(This,pbstr)	\
    ( (This)->lpVtbl -> get_FirstName(This,pbstr) ) 

#define IContact_get_MiddleName(This,pbstr)	\
    ( (This)->lpVtbl -> get_MiddleName(This,pbstr) ) 

#define IContact_get_LastName(This,pbstr)	\
    ( (This)->lpVtbl -> get_LastName(This,pbstr) ) 

#define IContact_get_Suffix(This,pbstr)	\
    ( (This)->lpVtbl -> get_Suffix(This,pbstr) ) 

#define IContact_get_HomeAddressStreet(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeAddressStreet(This,pbstr) ) 

#define IContact_get_HomeAddressCity(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeAddressCity(This,pbstr) ) 

#define IContact_get_HomeAddressState(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeAddressState(This,pbstr) ) 

#define IContact_get_HomeAddressPostalCode(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeAddressPostalCode(This,pbstr) ) 

#define IContact_get_HomeAddressCountry(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeAddressCountry(This,pbstr) ) 

#define IContact_get_OtherAddressStreet(This,pbstr)	\
    ( (This)->lpVtbl -> get_OtherAddressStreet(This,pbstr) ) 

#define IContact_get_OtherAddressCity(This,pbstr)	\
    ( (This)->lpVtbl -> get_OtherAddressCity(This,pbstr) ) 

#define IContact_get_OtherAddressState(This,pbstr)	\
    ( (This)->lpVtbl -> get_OtherAddressState(This,pbstr) ) 

#define IContact_get_OtherAddressPostalCode(This,pbstr)	\
    ( (This)->lpVtbl -> get_OtherAddressPostalCode(This,pbstr) ) 

#define IContact_get_OtherAddressCountry(This,pbstr)	\
    ( (This)->lpVtbl -> get_OtherAddressCountry(This,pbstr) ) 

#define IContact_get_BusinessAddressStreet(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessAddressStreet(This,pbstr) ) 

#define IContact_get_BusinessAddressCity(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessAddressCity(This,pbstr) ) 

#define IContact_get_BusinessAddressState(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessAddressState(This,pbstr) ) 

#define IContact_get_BusinessAddressPostalCode(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessAddressPostalCode(This,pbstr) ) 

#define IContact_get_BusinessAddressCountry(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessAddressCountry(This,pbstr) ) 

#define IContact_get_RadioTelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_RadioTelephoneNumber(This,pbstr) ) 

#define IContact_get_FileAs(This,pbstr)	\
    ( (This)->lpVtbl -> get_FileAs(This,pbstr) ) 

#define IContact_get_Body(This,pbstr)	\
    ( (This)->lpVtbl -> get_Body(This,pbstr) ) 

#define IContact_get_YomiCompanyName(This,pbstr)	\
    ( (This)->lpVtbl -> get_YomiCompanyName(This,pbstr) ) 

#define IContact_get_YomiFirstName(This,pbstr)	\
    ( (This)->lpVtbl -> get_YomiFirstName(This,pbstr) ) 

#define IContact_get_YomiLastName(This,pbstr)	\
    ( (This)->lpVtbl -> get_YomiLastName(This,pbstr) ) 

#define IContact_put_Birthday(This,st)	\
    ( (This)->lpVtbl -> put_Birthday(This,st) ) 

#define IContact_put_Anniversary(This,st)	\
    ( (This)->lpVtbl -> put_Anniversary(This,st) ) 

#define IContact_put_BusinessFaxNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessFaxNumber(This,bstr) ) 

#define IContact_put_CompanyName(This,bstr)	\
    ( (This)->lpVtbl -> put_CompanyName(This,bstr) ) 

#define IContact_put_Department(This,bstr)	\
    ( (This)->lpVtbl -> put_Department(This,bstr) ) 

#define IContact_put_Email1Address(This,bstr)	\
    ( (This)->lpVtbl -> put_Email1Address(This,bstr) ) 

#define IContact_put_MobileTelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_MobileTelephoneNumber(This,bstr) ) 

#define IContact_put_OfficeLocation(This,bstr)	\
    ( (This)->lpVtbl -> put_OfficeLocation(This,bstr) ) 

#define IContact_put_PagerNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_PagerNumber(This,bstr) ) 

#define IContact_put_BusinessTelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessTelephoneNumber(This,bstr) ) 

#define IContact_put_JobTitle(This,bstr)	\
    ( (This)->lpVtbl -> put_JobTitle(This,bstr) ) 

#define IContact_put_HomeTelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeTelephoneNumber(This,bstr) ) 

#define IContact_put_Email2Address(This,bstr)	\
    ( (This)->lpVtbl -> put_Email2Address(This,bstr) ) 

#define IContact_put_Spouse(This,bstr)	\
    ( (This)->lpVtbl -> put_Spouse(This,bstr) ) 

#define IContact_put_Email3Address(This,bstr)	\
    ( (This)->lpVtbl -> put_Email3Address(This,bstr) ) 

#define IContact_put_Home2TelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_Home2TelephoneNumber(This,bstr) ) 

#define IContact_put_HomeFaxNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeFaxNumber(This,bstr) ) 

#define IContact_put_CarTelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_CarTelephoneNumber(This,bstr) ) 

#define IContact_put_AssistantName(This,bstr)	\
    ( (This)->lpVtbl -> put_AssistantName(This,bstr) ) 

#define IContact_put_AssistantTelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_AssistantTelephoneNumber(This,bstr) ) 

#define IContact_put_Children(This,bstr)	\
    ( (This)->lpVtbl -> put_Children(This,bstr) ) 

#define IContact_put_Categories(This,bstr)	\
    ( (This)->lpVtbl -> put_Categories(This,bstr) ) 

#define IContact_put_WebPage(This,bstr)	\
    ( (This)->lpVtbl -> put_WebPage(This,bstr) ) 

#define IContact_put_Business2TelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_Business2TelephoneNumber(This,bstr) ) 

#define IContact_put_Title(This,bstr)	\
    ( (This)->lpVtbl -> put_Title(This,bstr) ) 

#define IContact_put_FirstName(This,bstr)	\
    ( (This)->lpVtbl -> put_FirstName(This,bstr) ) 

#define IContact_put_MiddleName(This,bstr)	\
    ( (This)->lpVtbl -> put_MiddleName(This,bstr) ) 

#define IContact_put_LastName(This,bstr)	\
    ( (This)->lpVtbl -> put_LastName(This,bstr) ) 

#define IContact_put_Suffix(This,bstr)	\
    ( (This)->lpVtbl -> put_Suffix(This,bstr) ) 

#define IContact_put_HomeAddressStreet(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeAddressStreet(This,bstr) ) 

#define IContact_put_HomeAddressCity(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeAddressCity(This,bstr) ) 

#define IContact_put_HomeAddressState(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeAddressState(This,bstr) ) 

#define IContact_put_HomeAddressPostalCode(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeAddressPostalCode(This,bstr) ) 

#define IContact_put_HomeAddressCountry(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeAddressCountry(This,bstr) ) 

#define IContact_put_OtherAddressStreet(This,bstr)	\
    ( (This)->lpVtbl -> put_OtherAddressStreet(This,bstr) ) 

#define IContact_put_OtherAddressCity(This,bstr)	\
    ( (This)->lpVtbl -> put_OtherAddressCity(This,bstr) ) 

#define IContact_put_OtherAddressState(This,bstr)	\
    ( (This)->lpVtbl -> put_OtherAddressState(This,bstr) ) 

#define IContact_put_OtherAddressPostalCode(This,bstr)	\
    ( (This)->lpVtbl -> put_OtherAddressPostalCode(This,bstr) ) 

#define IContact_put_OtherAddressCountry(This,bstr)	\
    ( (This)->lpVtbl -> put_OtherAddressCountry(This,bstr) ) 

#define IContact_put_BusinessAddressStreet(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessAddressStreet(This,bstr) ) 

#define IContact_put_BusinessAddressCity(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessAddressCity(This,bstr) ) 

#define IContact_put_BusinessAddressState(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessAddressState(This,bstr) ) 

#define IContact_put_BusinessAddressPostalCode(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessAddressPostalCode(This,bstr) ) 

#define IContact_put_BusinessAddressCountry(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessAddressCountry(This,bstr) ) 

#define IContact_put_RadioTelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_RadioTelephoneNumber(This,bstr) ) 

#define IContact_put_FileAs(This,bstr)	\
    ( (This)->lpVtbl -> put_FileAs(This,bstr) ) 

#define IContact_put_Body(This,bstr)	\
    ( (This)->lpVtbl -> put_Body(This,bstr) ) 

#define IContact_put_YomiCompanyName(This,bstr)	\
    ( (This)->lpVtbl -> put_YomiCompanyName(This,bstr) ) 

#define IContact_put_YomiFirstName(This,bstr)	\
    ( (This)->lpVtbl -> put_YomiFirstName(This,bstr) ) 

#define IContact_put_YomiLastName(This,bstr)	\
    ( (This)->lpVtbl -> put_YomiLastName(This,bstr) ) 

#define IContact_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define IContact_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IContact_Copy(This,ppolCopy)	\
    ( (This)->lpVtbl -> Copy(This,ppolCopy) ) 

#define IContact_Display(This)	\
    ( (This)->lpVtbl -> Display(This) ) 

#define IContact_get_Oid(This,poid)	\
    ( (This)->lpVtbl -> get_Oid(This,poid) ) 

#define IContact_put_BodyInk(This,pcebl)	\
    ( (This)->lpVtbl -> put_BodyInk(This,pcebl) ) 

#define IContact_get_BodyInk(This,pcebl)	\
    ( (This)->lpVtbl -> get_BodyInk(This,pcebl) ) 

#define IContact_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IContact_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0018 */
/* [local] */ 

DEFINE_GUID(IID_IContact2, 0x0130d8d2, 0x5961, 0x4655, 0xa2, 0x9e, 0x58, 0x89, 0x5a, 0x8c, 0x2f, 0xda);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0018_v0_0_s_ifspec;

#ifndef __IContact2_INTERFACE_DEFINED__
#define __IContact2_INTERFACE_DEFINED__

/* interface IContact2 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IContact2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0130d8d2-5961-4655-a29e-58895a8c2fda")
    IContact2 : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ OLITEMID *pOlItemId) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IFolder2 **ppParent) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Store( 
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Birthday( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Anniversary( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessFaxNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CompanyName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Department( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Email1Address( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MobileTelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OfficeLocation( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PagerNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessTelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_JobTitle( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeTelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Email2Address( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Spouse( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Email3Address( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Home2TelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeFaxNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CarTelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AssistantName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AssistantTelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Categories( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WebPage( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Business2TelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FirstName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MiddleName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LastName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Suffix( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeAddressStreet( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeAddressCity( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeAddressState( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeAddressPostalCode( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeAddressCountry( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OtherAddressStreet( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OtherAddressCity( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OtherAddressState( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OtherAddressPostalCode( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OtherAddressCountry( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessAddressStreet( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessAddressCity( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessAddressState( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessAddressPostalCode( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusinessAddressCountry( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RadioTelephoneNumber( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FileAs( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Body( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YomiCompanyName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YomiFirstName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YomiLastName( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Birthday( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Anniversary( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessFaxNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CompanyName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Department( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Email1Address( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MobileTelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OfficeLocation( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PagerNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessTelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_JobTitle( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeTelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Email2Address( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Spouse( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Email3Address( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Home2TelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeFaxNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CarTelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AssistantName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AssistantTelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Children( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Categories( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_WebPage( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Business2TelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Title( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FirstName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MiddleName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LastName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Suffix( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeAddressStreet( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeAddressCity( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeAddressState( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeAddressPostalCode( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeAddressCountry( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OtherAddressStreet( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OtherAddressCity( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OtherAddressState( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OtherAddressPostalCode( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OtherAddressCountry( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessAddressStreet( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessAddressCity( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessAddressState( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessAddressPostalCode( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusinessAddressCountry( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RadioTelephoneNumber( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FileAs( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Body( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_YomiCompanyName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_YomiFirstName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_YomiLastName( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ IContact2 **ppolCopy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Display( void) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BodyInk( 
            /* [in] */ CEBLOB *pcebl) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BodyInk( 
            /* [retval][out] */ CEBLOB *pcebl) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp3 **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContact2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IContact2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IContact2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IContact2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IContact2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IContact2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IContact2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IContact2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            IContact2 * This,
            /* [retval][out] */ OLITEMID *pOlItemId);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IContact2 * This,
            /* [retval][out] */ IFolder2 **ppParent);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Store )( 
            IContact2 * This,
            /* [retval][out] */ IStore **ppStore);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Birthday )( 
            IContact2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Anniversary )( 
            IContact2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessFaxNumber )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompanyName )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Department )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Email1Address )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MobileTelephoneNumber )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OfficeLocation )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PagerNumber )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessTelephoneNumber )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JobTitle )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeTelephoneNumber )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Email2Address )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Spouse )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Email3Address )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Home2TelephoneNumber )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeFaxNumber )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CarTelephoneNumber )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AssistantName )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AssistantTelephoneNumber )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WebPage )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Business2TelephoneNumber )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstName )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MiddleName )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastName )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Suffix )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeAddressStreet )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeAddressCity )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeAddressState )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeAddressPostalCode )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeAddressCountry )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OtherAddressStreet )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OtherAddressCity )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OtherAddressState )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OtherAddressPostalCode )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OtherAddressCountry )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessAddressStreet )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessAddressCity )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessAddressState )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessAddressPostalCode )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessAddressCountry )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RadioTelephoneNumber )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileAs )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Body )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YomiCompanyName )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YomiFirstName )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YomiLastName )( 
            IContact2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Birthday )( 
            IContact2 * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Anniversary )( 
            IContact2 * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessFaxNumber )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CompanyName )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Department )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Email1Address )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MobileTelephoneNumber )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OfficeLocation )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PagerNumber )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessTelephoneNumber )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_JobTitle )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeTelephoneNumber )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Email2Address )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Spouse )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Email3Address )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Home2TelephoneNumber )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeFaxNumber )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CarTelephoneNumber )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AssistantName )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AssistantTelephoneNumber )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Children )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Categories )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_WebPage )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Business2TelephoneNumber )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FirstName )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MiddleName )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LastName )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Suffix )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeAddressStreet )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeAddressCity )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeAddressState )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeAddressPostalCode )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeAddressCountry )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OtherAddressStreet )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OtherAddressCity )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OtherAddressState )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OtherAddressPostalCode )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OtherAddressCountry )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessAddressStreet )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessAddressCity )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessAddressState )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessAddressPostalCode )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessAddressCountry )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RadioTelephoneNumber )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FileAs )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Body )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_YomiCompanyName )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_YomiFirstName )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_YomiLastName )( 
            IContact2 * This,
            /* [in] */ BSTR bstr);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            IContact2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IContact2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IContact2 * This,
            /* [retval][out] */ IContact2 **ppolCopy);
        
        HRESULT ( STDMETHODCALLTYPE *Display )( 
            IContact2 * This);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BodyInk )( 
            IContact2 * This,
            /* [in] */ CEBLOB *pcebl);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BodyInk )( 
            IContact2 * This,
            /* [retval][out] */ CEBLOB *pcebl);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IContact2 * This,
            /* [retval][out] */ IPOutlookApp3 **polApp);
        
        END_INTERFACE
    } IContact2Vtbl;

    interface IContact2
    {
        CONST_VTBL struct IContact2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContact2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IContact2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IContact2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IContact2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IContact2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IContact2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IContact2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IContact2_get_Id(This,pOlItemId)	\
    ( (This)->lpVtbl -> get_Id(This,pOlItemId) ) 

#define IContact2_get_Parent(This,ppParent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppParent) ) 

#define IContact2_get_Store(This,ppStore)	\
    ( (This)->lpVtbl -> get_Store(This,ppStore) ) 

#define IContact2_get_Birthday(This,pst)	\
    ( (This)->lpVtbl -> get_Birthday(This,pst) ) 

#define IContact2_get_Anniversary(This,pst)	\
    ( (This)->lpVtbl -> get_Anniversary(This,pst) ) 

#define IContact2_get_BusinessFaxNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessFaxNumber(This,pbstr) ) 

#define IContact2_get_CompanyName(This,pbstr)	\
    ( (This)->lpVtbl -> get_CompanyName(This,pbstr) ) 

#define IContact2_get_Department(This,pbstr)	\
    ( (This)->lpVtbl -> get_Department(This,pbstr) ) 

#define IContact2_get_Email1Address(This,pbstr)	\
    ( (This)->lpVtbl -> get_Email1Address(This,pbstr) ) 

#define IContact2_get_MobileTelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_MobileTelephoneNumber(This,pbstr) ) 

#define IContact2_get_OfficeLocation(This,pbstr)	\
    ( (This)->lpVtbl -> get_OfficeLocation(This,pbstr) ) 

#define IContact2_get_PagerNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_PagerNumber(This,pbstr) ) 

#define IContact2_get_BusinessTelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessTelephoneNumber(This,pbstr) ) 

#define IContact2_get_JobTitle(This,pbstr)	\
    ( (This)->lpVtbl -> get_JobTitle(This,pbstr) ) 

#define IContact2_get_HomeTelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeTelephoneNumber(This,pbstr) ) 

#define IContact2_get_Email2Address(This,pbstr)	\
    ( (This)->lpVtbl -> get_Email2Address(This,pbstr) ) 

#define IContact2_get_Spouse(This,pbstr)	\
    ( (This)->lpVtbl -> get_Spouse(This,pbstr) ) 

#define IContact2_get_Email3Address(This,pbstr)	\
    ( (This)->lpVtbl -> get_Email3Address(This,pbstr) ) 

#define IContact2_get_Home2TelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_Home2TelephoneNumber(This,pbstr) ) 

#define IContact2_get_HomeFaxNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeFaxNumber(This,pbstr) ) 

#define IContact2_get_CarTelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_CarTelephoneNumber(This,pbstr) ) 

#define IContact2_get_AssistantName(This,pbstr)	\
    ( (This)->lpVtbl -> get_AssistantName(This,pbstr) ) 

#define IContact2_get_AssistantTelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_AssistantTelephoneNumber(This,pbstr) ) 

#define IContact2_get_Children(This,pbstr)	\
    ( (This)->lpVtbl -> get_Children(This,pbstr) ) 

#define IContact2_get_Categories(This,pbstr)	\
    ( (This)->lpVtbl -> get_Categories(This,pbstr) ) 

#define IContact2_get_WebPage(This,pbstr)	\
    ( (This)->lpVtbl -> get_WebPage(This,pbstr) ) 

#define IContact2_get_Business2TelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_Business2TelephoneNumber(This,pbstr) ) 

#define IContact2_get_Title(This,pbstr)	\
    ( (This)->lpVtbl -> get_Title(This,pbstr) ) 

#define IContact2_get_FirstName(This,pbstr)	\
    ( (This)->lpVtbl -> get_FirstName(This,pbstr) ) 

#define IContact2_get_MiddleName(This,pbstr)	\
    ( (This)->lpVtbl -> get_MiddleName(This,pbstr) ) 

#define IContact2_get_LastName(This,pbstr)	\
    ( (This)->lpVtbl -> get_LastName(This,pbstr) ) 

#define IContact2_get_Suffix(This,pbstr)	\
    ( (This)->lpVtbl -> get_Suffix(This,pbstr) ) 

#define IContact2_get_HomeAddressStreet(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeAddressStreet(This,pbstr) ) 

#define IContact2_get_HomeAddressCity(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeAddressCity(This,pbstr) ) 

#define IContact2_get_HomeAddressState(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeAddressState(This,pbstr) ) 

#define IContact2_get_HomeAddressPostalCode(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeAddressPostalCode(This,pbstr) ) 

#define IContact2_get_HomeAddressCountry(This,pbstr)	\
    ( (This)->lpVtbl -> get_HomeAddressCountry(This,pbstr) ) 

#define IContact2_get_OtherAddressStreet(This,pbstr)	\
    ( (This)->lpVtbl -> get_OtherAddressStreet(This,pbstr) ) 

#define IContact2_get_OtherAddressCity(This,pbstr)	\
    ( (This)->lpVtbl -> get_OtherAddressCity(This,pbstr) ) 

#define IContact2_get_OtherAddressState(This,pbstr)	\
    ( (This)->lpVtbl -> get_OtherAddressState(This,pbstr) ) 

#define IContact2_get_OtherAddressPostalCode(This,pbstr)	\
    ( (This)->lpVtbl -> get_OtherAddressPostalCode(This,pbstr) ) 

#define IContact2_get_OtherAddressCountry(This,pbstr)	\
    ( (This)->lpVtbl -> get_OtherAddressCountry(This,pbstr) ) 

#define IContact2_get_BusinessAddressStreet(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessAddressStreet(This,pbstr) ) 

#define IContact2_get_BusinessAddressCity(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessAddressCity(This,pbstr) ) 

#define IContact2_get_BusinessAddressState(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessAddressState(This,pbstr) ) 

#define IContact2_get_BusinessAddressPostalCode(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessAddressPostalCode(This,pbstr) ) 

#define IContact2_get_BusinessAddressCountry(This,pbstr)	\
    ( (This)->lpVtbl -> get_BusinessAddressCountry(This,pbstr) ) 

#define IContact2_get_RadioTelephoneNumber(This,pbstr)	\
    ( (This)->lpVtbl -> get_RadioTelephoneNumber(This,pbstr) ) 

#define IContact2_get_FileAs(This,pbstr)	\
    ( (This)->lpVtbl -> get_FileAs(This,pbstr) ) 

#define IContact2_get_Body(This,pbstr)	\
    ( (This)->lpVtbl -> get_Body(This,pbstr) ) 

#define IContact2_get_YomiCompanyName(This,pbstr)	\
    ( (This)->lpVtbl -> get_YomiCompanyName(This,pbstr) ) 

#define IContact2_get_YomiFirstName(This,pbstr)	\
    ( (This)->lpVtbl -> get_YomiFirstName(This,pbstr) ) 

#define IContact2_get_YomiLastName(This,pbstr)	\
    ( (This)->lpVtbl -> get_YomiLastName(This,pbstr) ) 

#define IContact2_put_Birthday(This,st)	\
    ( (This)->lpVtbl -> put_Birthday(This,st) ) 

#define IContact2_put_Anniversary(This,st)	\
    ( (This)->lpVtbl -> put_Anniversary(This,st) ) 

#define IContact2_put_BusinessFaxNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessFaxNumber(This,bstr) ) 

#define IContact2_put_CompanyName(This,bstr)	\
    ( (This)->lpVtbl -> put_CompanyName(This,bstr) ) 

#define IContact2_put_Department(This,bstr)	\
    ( (This)->lpVtbl -> put_Department(This,bstr) ) 

#define IContact2_put_Email1Address(This,bstr)	\
    ( (This)->lpVtbl -> put_Email1Address(This,bstr) ) 

#define IContact2_put_MobileTelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_MobileTelephoneNumber(This,bstr) ) 

#define IContact2_put_OfficeLocation(This,bstr)	\
    ( (This)->lpVtbl -> put_OfficeLocation(This,bstr) ) 

#define IContact2_put_PagerNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_PagerNumber(This,bstr) ) 

#define IContact2_put_BusinessTelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessTelephoneNumber(This,bstr) ) 

#define IContact2_put_JobTitle(This,bstr)	\
    ( (This)->lpVtbl -> put_JobTitle(This,bstr) ) 

#define IContact2_put_HomeTelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeTelephoneNumber(This,bstr) ) 

#define IContact2_put_Email2Address(This,bstr)	\
    ( (This)->lpVtbl -> put_Email2Address(This,bstr) ) 

#define IContact2_put_Spouse(This,bstr)	\
    ( (This)->lpVtbl -> put_Spouse(This,bstr) ) 

#define IContact2_put_Email3Address(This,bstr)	\
    ( (This)->lpVtbl -> put_Email3Address(This,bstr) ) 

#define IContact2_put_Home2TelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_Home2TelephoneNumber(This,bstr) ) 

#define IContact2_put_HomeFaxNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeFaxNumber(This,bstr) ) 

#define IContact2_put_CarTelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_CarTelephoneNumber(This,bstr) ) 

#define IContact2_put_AssistantName(This,bstr)	\
    ( (This)->lpVtbl -> put_AssistantName(This,bstr) ) 

#define IContact2_put_AssistantTelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_AssistantTelephoneNumber(This,bstr) ) 

#define IContact2_put_Children(This,bstr)	\
    ( (This)->lpVtbl -> put_Children(This,bstr) ) 

#define IContact2_put_Categories(This,bstr)	\
    ( (This)->lpVtbl -> put_Categories(This,bstr) ) 

#define IContact2_put_WebPage(This,bstr)	\
    ( (This)->lpVtbl -> put_WebPage(This,bstr) ) 

#define IContact2_put_Business2TelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_Business2TelephoneNumber(This,bstr) ) 

#define IContact2_put_Title(This,bstr)	\
    ( (This)->lpVtbl -> put_Title(This,bstr) ) 

#define IContact2_put_FirstName(This,bstr)	\
    ( (This)->lpVtbl -> put_FirstName(This,bstr) ) 

#define IContact2_put_MiddleName(This,bstr)	\
    ( (This)->lpVtbl -> put_MiddleName(This,bstr) ) 

#define IContact2_put_LastName(This,bstr)	\
    ( (This)->lpVtbl -> put_LastName(This,bstr) ) 

#define IContact2_put_Suffix(This,bstr)	\
    ( (This)->lpVtbl -> put_Suffix(This,bstr) ) 

#define IContact2_put_HomeAddressStreet(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeAddressStreet(This,bstr) ) 

#define IContact2_put_HomeAddressCity(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeAddressCity(This,bstr) ) 

#define IContact2_put_HomeAddressState(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeAddressState(This,bstr) ) 

#define IContact2_put_HomeAddressPostalCode(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeAddressPostalCode(This,bstr) ) 

#define IContact2_put_HomeAddressCountry(This,bstr)	\
    ( (This)->lpVtbl -> put_HomeAddressCountry(This,bstr) ) 

#define IContact2_put_OtherAddressStreet(This,bstr)	\
    ( (This)->lpVtbl -> put_OtherAddressStreet(This,bstr) ) 

#define IContact2_put_OtherAddressCity(This,bstr)	\
    ( (This)->lpVtbl -> put_OtherAddressCity(This,bstr) ) 

#define IContact2_put_OtherAddressState(This,bstr)	\
    ( (This)->lpVtbl -> put_OtherAddressState(This,bstr) ) 

#define IContact2_put_OtherAddressPostalCode(This,bstr)	\
    ( (This)->lpVtbl -> put_OtherAddressPostalCode(This,bstr) ) 

#define IContact2_put_OtherAddressCountry(This,bstr)	\
    ( (This)->lpVtbl -> put_OtherAddressCountry(This,bstr) ) 

#define IContact2_put_BusinessAddressStreet(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessAddressStreet(This,bstr) ) 

#define IContact2_put_BusinessAddressCity(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessAddressCity(This,bstr) ) 

#define IContact2_put_BusinessAddressState(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessAddressState(This,bstr) ) 

#define IContact2_put_BusinessAddressPostalCode(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessAddressPostalCode(This,bstr) ) 

#define IContact2_put_BusinessAddressCountry(This,bstr)	\
    ( (This)->lpVtbl -> put_BusinessAddressCountry(This,bstr) ) 

#define IContact2_put_RadioTelephoneNumber(This,bstr)	\
    ( (This)->lpVtbl -> put_RadioTelephoneNumber(This,bstr) ) 

#define IContact2_put_FileAs(This,bstr)	\
    ( (This)->lpVtbl -> put_FileAs(This,bstr) ) 

#define IContact2_put_Body(This,bstr)	\
    ( (This)->lpVtbl -> put_Body(This,bstr) ) 

#define IContact2_put_YomiCompanyName(This,bstr)	\
    ( (This)->lpVtbl -> put_YomiCompanyName(This,bstr) ) 

#define IContact2_put_YomiFirstName(This,bstr)	\
    ( (This)->lpVtbl -> put_YomiFirstName(This,bstr) ) 

#define IContact2_put_YomiLastName(This,bstr)	\
    ( (This)->lpVtbl -> put_YomiLastName(This,bstr) ) 

#define IContact2_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define IContact2_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IContact2_Copy(This,ppolCopy)	\
    ( (This)->lpVtbl -> Copy(This,ppolCopy) ) 

#define IContact2_Display(This)	\
    ( (This)->lpVtbl -> Display(This) ) 

#define IContact2_put_BodyInk(This,pcebl)	\
    ( (This)->lpVtbl -> put_BodyInk(This,pcebl) ) 

#define IContact2_get_BodyInk(This,pcebl)	\
    ( (This)->lpVtbl -> get_BodyInk(This,pcebl) ) 

#define IContact2_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IContact2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0019 */
/* [local] */ 

DEFINE_GUID(IID_ITask, 0x37c78ce0, 0x202c, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0019_v0_0_s_ifspec;

#ifndef __ITask_INTERFACE_DEFINED__
#define __ITask_INTERFACE_DEFINED__

/* interface ITask */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_ITask;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37c78ce0-202c-11d2-8f18-0000f87a4335")
    ITask : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ClearRecurrencePattern( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRecurrencePattern( 
            /* [retval][out] */ IRecurrencePattern **ppRecPattern) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsRecurring( 
            /* [retval][out] */ VARIANT_BOOL *pfIsRecurring) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Subject( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Categories( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StartDate( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DueDate( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DateCompleted( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Importance( 
            /* [retval][out] */ long *pdwPriority) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Complete( 
            /* [retval][out] */ VARIANT_BOOL *pfCompleted) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Sensitivity( 
            /* [retval][out] */ long *plSensitivity) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TeamTask( 
            /* [retval][out] */ VARIANT_BOOL *pfTeamTask) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Body( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderSet( 
            /* [retval][out] */ VARIANT_BOOL *pfReminderSet) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderSoundFile( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderTime( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderOptions( 
            /* [retval][out] */ long *pdwOptions) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Subject( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Categories( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StartDate( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DueDate( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Importance( 
            /* [in] */ long dwPriority) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Complete( 
            /* [in] */ VARIANT_BOOL fCompleted) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Sensitivity( 
            /* [in] */ long lSensitivity) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TeamTask( 
            /* [in] */ VARIANT_BOOL fTeamTask) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Body( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderSet( 
            /* [in] */ VARIANT_BOOL fReminderSet) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderSoundFile( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderTime( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderOptions( 
            /* [in] */ long dwOptions) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SkipRecurrence( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ ITask **ppolCopy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Display( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Oid( 
            /* [retval][out] */ long *poid) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BodyInk( 
            /* [in] */ CEBLOB *pcebl) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BodyInk( 
            /* [retval][out] */ CEBLOB *pcebl) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITaskVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITask * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITask * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITask * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITask * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITask * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITask * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITask * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *ClearRecurrencePattern )( 
            ITask * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRecurrencePattern )( 
            ITask * This,
            /* [retval][out] */ IRecurrencePattern **ppRecPattern);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsRecurring )( 
            ITask * This,
            /* [retval][out] */ VARIANT_BOOL *pfIsRecurring);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Subject )( 
            ITask * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            ITask * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartDate )( 
            ITask * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DueDate )( 
            ITask * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DateCompleted )( 
            ITask * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Importance )( 
            ITask * This,
            /* [retval][out] */ long *pdwPriority);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Complete )( 
            ITask * This,
            /* [retval][out] */ VARIANT_BOOL *pfCompleted);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sensitivity )( 
            ITask * This,
            /* [retval][out] */ long *plSensitivity);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TeamTask )( 
            ITask * This,
            /* [retval][out] */ VARIANT_BOOL *pfTeamTask);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Body )( 
            ITask * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderSet )( 
            ITask * This,
            /* [retval][out] */ VARIANT_BOOL *pfReminderSet);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderSoundFile )( 
            ITask * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderTime )( 
            ITask * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderOptions )( 
            ITask * This,
            /* [retval][out] */ long *pdwOptions);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Subject )( 
            ITask * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Categories )( 
            ITask * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartDate )( 
            ITask * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DueDate )( 
            ITask * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Importance )( 
            ITask * This,
            /* [in] */ long dwPriority);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Complete )( 
            ITask * This,
            /* [in] */ VARIANT_BOOL fCompleted);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sensitivity )( 
            ITask * This,
            /* [in] */ long lSensitivity);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TeamTask )( 
            ITask * This,
            /* [in] */ VARIANT_BOOL fTeamTask);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Body )( 
            ITask * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderSet )( 
            ITask * This,
            /* [in] */ VARIANT_BOOL fReminderSet);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderSoundFile )( 
            ITask * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderTime )( 
            ITask * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderOptions )( 
            ITask * This,
            /* [in] */ long dwOptions);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            ITask * This);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ITask * This);
        
        HRESULT ( STDMETHODCALLTYPE *SkipRecurrence )( 
            ITask * This);
        
        HRESULT ( STDMETHODCALLTYPE *Copy )( 
            ITask * This,
            /* [retval][out] */ ITask **ppolCopy);
        
        HRESULT ( STDMETHODCALLTYPE *Display )( 
            ITask * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Oid )( 
            ITask * This,
            /* [retval][out] */ long *poid);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BodyInk )( 
            ITask * This,
            /* [in] */ CEBLOB *pcebl);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BodyInk )( 
            ITask * This,
            /* [retval][out] */ CEBLOB *pcebl);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITask * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        END_INTERFACE
    } ITaskVtbl;

    interface ITask
    {
        CONST_VTBL struct ITaskVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITask_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITask_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITask_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITask_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITask_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITask_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITask_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITask_ClearRecurrencePattern(This)	\
    ( (This)->lpVtbl -> ClearRecurrencePattern(This) ) 

#define ITask_GetRecurrencePattern(This,ppRecPattern)	\
    ( (This)->lpVtbl -> GetRecurrencePattern(This,ppRecPattern) ) 

#define ITask_get_IsRecurring(This,pfIsRecurring)	\
    ( (This)->lpVtbl -> get_IsRecurring(This,pfIsRecurring) ) 

#define ITask_get_Subject(This,pbstr)	\
    ( (This)->lpVtbl -> get_Subject(This,pbstr) ) 

#define ITask_get_Categories(This,pbstr)	\
    ( (This)->lpVtbl -> get_Categories(This,pbstr) ) 

#define ITask_get_StartDate(This,pst)	\
    ( (This)->lpVtbl -> get_StartDate(This,pst) ) 

#define ITask_get_DueDate(This,pst)	\
    ( (This)->lpVtbl -> get_DueDate(This,pst) ) 

#define ITask_get_DateCompleted(This,pst)	\
    ( (This)->lpVtbl -> get_DateCompleted(This,pst) ) 

#define ITask_get_Importance(This,pdwPriority)	\
    ( (This)->lpVtbl -> get_Importance(This,pdwPriority) ) 

#define ITask_get_Complete(This,pfCompleted)	\
    ( (This)->lpVtbl -> get_Complete(This,pfCompleted) ) 

#define ITask_get_Sensitivity(This,plSensitivity)	\
    ( (This)->lpVtbl -> get_Sensitivity(This,plSensitivity) ) 

#define ITask_get_TeamTask(This,pfTeamTask)	\
    ( (This)->lpVtbl -> get_TeamTask(This,pfTeamTask) ) 

#define ITask_get_Body(This,pbstr)	\
    ( (This)->lpVtbl -> get_Body(This,pbstr) ) 

#define ITask_get_ReminderSet(This,pfReminderSet)	\
    ( (This)->lpVtbl -> get_ReminderSet(This,pfReminderSet) ) 

#define ITask_get_ReminderSoundFile(This,pbstr)	\
    ( (This)->lpVtbl -> get_ReminderSoundFile(This,pbstr) ) 

#define ITask_get_ReminderTime(This,pst)	\
    ( (This)->lpVtbl -> get_ReminderTime(This,pst) ) 

#define ITask_get_ReminderOptions(This,pdwOptions)	\
    ( (This)->lpVtbl -> get_ReminderOptions(This,pdwOptions) ) 

#define ITask_put_Subject(This,bstr)	\
    ( (This)->lpVtbl -> put_Subject(This,bstr) ) 

#define ITask_put_Categories(This,bstr)	\
    ( (This)->lpVtbl -> put_Categories(This,bstr) ) 

#define ITask_put_StartDate(This,st)	\
    ( (This)->lpVtbl -> put_StartDate(This,st) ) 

#define ITask_put_DueDate(This,st)	\
    ( (This)->lpVtbl -> put_DueDate(This,st) ) 

#define ITask_put_Importance(This,dwPriority)	\
    ( (This)->lpVtbl -> put_Importance(This,dwPriority) ) 

#define ITask_put_Complete(This,fCompleted)	\
    ( (This)->lpVtbl -> put_Complete(This,fCompleted) ) 

#define ITask_put_Sensitivity(This,lSensitivity)	\
    ( (This)->lpVtbl -> put_Sensitivity(This,lSensitivity) ) 

#define ITask_put_TeamTask(This,fTeamTask)	\
    ( (This)->lpVtbl -> put_TeamTask(This,fTeamTask) ) 

#define ITask_put_Body(This,bstr)	\
    ( (This)->lpVtbl -> put_Body(This,bstr) ) 

#define ITask_put_ReminderSet(This,fReminderSet)	\
    ( (This)->lpVtbl -> put_ReminderSet(This,fReminderSet) ) 

#define ITask_put_ReminderSoundFile(This,bstr)	\
    ( (This)->lpVtbl -> put_ReminderSoundFile(This,bstr) ) 

#define ITask_put_ReminderTime(This,st)	\
    ( (This)->lpVtbl -> put_ReminderTime(This,st) ) 

#define ITask_put_ReminderOptions(This,dwOptions)	\
    ( (This)->lpVtbl -> put_ReminderOptions(This,dwOptions) ) 

#define ITask_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define ITask_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define ITask_SkipRecurrence(This)	\
    ( (This)->lpVtbl -> SkipRecurrence(This) ) 

#define ITask_Copy(This,ppolCopy)	\
    ( (This)->lpVtbl -> Copy(This,ppolCopy) ) 

#define ITask_Display(This)	\
    ( (This)->lpVtbl -> Display(This) ) 

#define ITask_get_Oid(This,poid)	\
    ( (This)->lpVtbl -> get_Oid(This,poid) ) 

#define ITask_put_BodyInk(This,pcebl)	\
    ( (This)->lpVtbl -> put_BodyInk(This,pcebl) ) 

#define ITask_get_BodyInk(This,pcebl)	\
    ( (This)->lpVtbl -> get_BodyInk(This,pcebl) ) 

#define ITask_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITask_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0020 */
/* [local] */ 

DEFINE_GUID(IID_ITask2, 0x78d1d01a, 0xf0f9, 0x4559, 0xbb, 0x0e, 0x2e, 0x72, 0x49, 0x13, 0xf3, 0xf6);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0020_v0_0_s_ifspec;

#ifndef __ITask2_INTERFACE_DEFINED__
#define __ITask2_INTERFACE_DEFINED__

/* interface ITask2 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_ITask2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("78d1d01a-f0f9-4559-bb0e-2e724913f3f6")
    ITask2 : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ OLITEMID *pOlItemId) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IFolder2 **ppParent) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Store( 
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClearRecurrencePattern( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRecurrencePattern( 
            /* [retval][out] */ IRecurrencePattern2 **ppRecPattern) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsRecurring( 
            /* [retval][out] */ VARIANT_BOOL *pfIsRecurring) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Subject( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Categories( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StartDate( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DueDate( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DateCompleted( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Importance( 
            /* [retval][out] */ long *pdwPriority) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Complete( 
            /* [retval][out] */ VARIANT_BOOL *pfCompleted) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Sensitivity( 
            /* [retval][out] */ long *plSensitivity) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TeamTask( 
            /* [retval][out] */ VARIANT_BOOL *pfTeamTask) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Body( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderSet( 
            /* [retval][out] */ VARIANT_BOOL *pfReminderSet) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderSoundFile( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderTime( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderOptions( 
            /* [retval][out] */ long *pdwOptions) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Subject( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Categories( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StartDate( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DueDate( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Importance( 
            /* [in] */ long dwPriority) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Complete( 
            /* [in] */ VARIANT_BOOL fCompleted) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Sensitivity( 
            /* [in] */ long lSensitivity) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TeamTask( 
            /* [in] */ VARIANT_BOOL fTeamTask) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Body( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderSet( 
            /* [in] */ VARIANT_BOOL fReminderSet) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderSoundFile( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderTime( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderOptions( 
            /* [in] */ long dwOptions) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SkipRecurrence( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ ITask2 **ppolCopy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Display( void) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BodyInk( 
            /* [in] */ CEBLOB *pcebl) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BodyInk( 
            /* [retval][out] */ CEBLOB *pcebl) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp3 **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITask2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITask2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITask2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITask2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITask2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITask2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITask2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITask2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            ITask2 * This,
            /* [retval][out] */ OLITEMID *pOlItemId);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ITask2 * This,
            /* [retval][out] */ IFolder2 **ppParent);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Store )( 
            ITask2 * This,
            /* [retval][out] */ IStore **ppStore);
        
        HRESULT ( STDMETHODCALLTYPE *ClearRecurrencePattern )( 
            ITask2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRecurrencePattern )( 
            ITask2 * This,
            /* [retval][out] */ IRecurrencePattern2 **ppRecPattern);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsRecurring )( 
            ITask2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfIsRecurring);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Subject )( 
            ITask2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            ITask2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartDate )( 
            ITask2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DueDate )( 
            ITask2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DateCompleted )( 
            ITask2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Importance )( 
            ITask2 * This,
            /* [retval][out] */ long *pdwPriority);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Complete )( 
            ITask2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfCompleted);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sensitivity )( 
            ITask2 * This,
            /* [retval][out] */ long *plSensitivity);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TeamTask )( 
            ITask2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfTeamTask);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Body )( 
            ITask2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderSet )( 
            ITask2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfReminderSet);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderSoundFile )( 
            ITask2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderTime )( 
            ITask2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderOptions )( 
            ITask2 * This,
            /* [retval][out] */ long *pdwOptions);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Subject )( 
            ITask2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Categories )( 
            ITask2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartDate )( 
            ITask2 * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DueDate )( 
            ITask2 * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Importance )( 
            ITask2 * This,
            /* [in] */ long dwPriority);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Complete )( 
            ITask2 * This,
            /* [in] */ VARIANT_BOOL fCompleted);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sensitivity )( 
            ITask2 * This,
            /* [in] */ long lSensitivity);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TeamTask )( 
            ITask2 * This,
            /* [in] */ VARIANT_BOOL fTeamTask);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Body )( 
            ITask2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderSet )( 
            ITask2 * This,
            /* [in] */ VARIANT_BOOL fReminderSet);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderSoundFile )( 
            ITask2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderTime )( 
            ITask2 * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderOptions )( 
            ITask2 * This,
            /* [in] */ long dwOptions);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            ITask2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ITask2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SkipRecurrence )( 
            ITask2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Copy )( 
            ITask2 * This,
            /* [retval][out] */ ITask2 **ppolCopy);
        
        HRESULT ( STDMETHODCALLTYPE *Display )( 
            ITask2 * This);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BodyInk )( 
            ITask2 * This,
            /* [in] */ CEBLOB *pcebl);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BodyInk )( 
            ITask2 * This,
            /* [retval][out] */ CEBLOB *pcebl);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ITask2 * This,
            /* [retval][out] */ IPOutlookApp3 **polApp);
        
        END_INTERFACE
    } ITask2Vtbl;

    interface ITask2
    {
        CONST_VTBL struct ITask2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITask2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITask2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITask2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITask2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITask2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITask2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITask2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITask2_get_Id(This,pOlItemId)	\
    ( (This)->lpVtbl -> get_Id(This,pOlItemId) ) 

#define ITask2_get_Parent(This,ppParent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppParent) ) 

#define ITask2_get_Store(This,ppStore)	\
    ( (This)->lpVtbl -> get_Store(This,ppStore) ) 

#define ITask2_ClearRecurrencePattern(This)	\
    ( (This)->lpVtbl -> ClearRecurrencePattern(This) ) 

#define ITask2_GetRecurrencePattern(This,ppRecPattern)	\
    ( (This)->lpVtbl -> GetRecurrencePattern(This,ppRecPattern) ) 

#define ITask2_get_IsRecurring(This,pfIsRecurring)	\
    ( (This)->lpVtbl -> get_IsRecurring(This,pfIsRecurring) ) 

#define ITask2_get_Subject(This,pbstr)	\
    ( (This)->lpVtbl -> get_Subject(This,pbstr) ) 

#define ITask2_get_Categories(This,pbstr)	\
    ( (This)->lpVtbl -> get_Categories(This,pbstr) ) 

#define ITask2_get_StartDate(This,pst)	\
    ( (This)->lpVtbl -> get_StartDate(This,pst) ) 

#define ITask2_get_DueDate(This,pst)	\
    ( (This)->lpVtbl -> get_DueDate(This,pst) ) 

#define ITask2_get_DateCompleted(This,pst)	\
    ( (This)->lpVtbl -> get_DateCompleted(This,pst) ) 

#define ITask2_get_Importance(This,pdwPriority)	\
    ( (This)->lpVtbl -> get_Importance(This,pdwPriority) ) 

#define ITask2_get_Complete(This,pfCompleted)	\
    ( (This)->lpVtbl -> get_Complete(This,pfCompleted) ) 

#define ITask2_get_Sensitivity(This,plSensitivity)	\
    ( (This)->lpVtbl -> get_Sensitivity(This,plSensitivity) ) 

#define ITask2_get_TeamTask(This,pfTeamTask)	\
    ( (This)->lpVtbl -> get_TeamTask(This,pfTeamTask) ) 

#define ITask2_get_Body(This,pbstr)	\
    ( (This)->lpVtbl -> get_Body(This,pbstr) ) 

#define ITask2_get_ReminderSet(This,pfReminderSet)	\
    ( (This)->lpVtbl -> get_ReminderSet(This,pfReminderSet) ) 

#define ITask2_get_ReminderSoundFile(This,pbstr)	\
    ( (This)->lpVtbl -> get_ReminderSoundFile(This,pbstr) ) 

#define ITask2_get_ReminderTime(This,pst)	\
    ( (This)->lpVtbl -> get_ReminderTime(This,pst) ) 

#define ITask2_get_ReminderOptions(This,pdwOptions)	\
    ( (This)->lpVtbl -> get_ReminderOptions(This,pdwOptions) ) 

#define ITask2_put_Subject(This,bstr)	\
    ( (This)->lpVtbl -> put_Subject(This,bstr) ) 

#define ITask2_put_Categories(This,bstr)	\
    ( (This)->lpVtbl -> put_Categories(This,bstr) ) 

#define ITask2_put_StartDate(This,st)	\
    ( (This)->lpVtbl -> put_StartDate(This,st) ) 

#define ITask2_put_DueDate(This,st)	\
    ( (This)->lpVtbl -> put_DueDate(This,st) ) 

#define ITask2_put_Importance(This,dwPriority)	\
    ( (This)->lpVtbl -> put_Importance(This,dwPriority) ) 

#define ITask2_put_Complete(This,fCompleted)	\
    ( (This)->lpVtbl -> put_Complete(This,fCompleted) ) 

#define ITask2_put_Sensitivity(This,lSensitivity)	\
    ( (This)->lpVtbl -> put_Sensitivity(This,lSensitivity) ) 

#define ITask2_put_TeamTask(This,fTeamTask)	\
    ( (This)->lpVtbl -> put_TeamTask(This,fTeamTask) ) 

#define ITask2_put_Body(This,bstr)	\
    ( (This)->lpVtbl -> put_Body(This,bstr) ) 

#define ITask2_put_ReminderSet(This,fReminderSet)	\
    ( (This)->lpVtbl -> put_ReminderSet(This,fReminderSet) ) 

#define ITask2_put_ReminderSoundFile(This,bstr)	\
    ( (This)->lpVtbl -> put_ReminderSoundFile(This,bstr) ) 

#define ITask2_put_ReminderTime(This,st)	\
    ( (This)->lpVtbl -> put_ReminderTime(This,st) ) 

#define ITask2_put_ReminderOptions(This,dwOptions)	\
    ( (This)->lpVtbl -> put_ReminderOptions(This,dwOptions) ) 

#define ITask2_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define ITask2_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define ITask2_SkipRecurrence(This)	\
    ( (This)->lpVtbl -> SkipRecurrence(This) ) 

#define ITask2_Copy(This,ppolCopy)	\
    ( (This)->lpVtbl -> Copy(This,ppolCopy) ) 

#define ITask2_Display(This)	\
    ( (This)->lpVtbl -> Display(This) ) 

#define ITask2_put_BodyInk(This,pcebl)	\
    ( (This)->lpVtbl -> put_BodyInk(This,pcebl) ) 

#define ITask2_get_BodyInk(This,pcebl)	\
    ( (This)->lpVtbl -> get_BodyInk(This,pcebl) ) 

#define ITask2_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITask2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0021 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum enumOlResponseType
    {	OlResponseTypeAccept	= 0,
	OlResponseTypeDecline	= 1,
	OlResponseTypeTentative	= 2
    } 	OlResponseType;

DEFINE_GUID(IID_IAppointment, 0x5b43f691, 0x202c, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0021_v0_0_s_ifspec;

#ifndef __IAppointment_INTERFACE_DEFINED__
#define __IAppointment_INTERFACE_DEFINED__

/* interface IAppointment */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IAppointment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5b43f691-202c-11d2-8f18-0000f87a4335")
    IAppointment : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ClearRecurrencePattern( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRecurrencePattern( 
            /* [retval][out] */ IRecurrencePattern **ppRecPattern) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsRecurring( 
            /* [retval][out] */ VARIANT_BOOL *pfIsRecurring) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Subject( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Categories( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Start( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Duration( 
            /* [retval][out] */ long *pnLen) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_End( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AllDayEvent( 
            /* [retval][out] */ VARIANT_BOOL *pfAllDay) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusyStatus( 
            /* [retval][out] */ long *pnState) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Sensitivity( 
            /* [retval][out] */ long *plSensitivity) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Body( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Recipients( 
            /* [retval][out] */ IRecipients **ppRecipients) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MeetingStatus( 
            /* [retval][out] */ long *pnStatus) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderSet( 
            /* [retval][out] */ VARIANT_BOOL *pfReminderSet) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderSoundFile( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderMinutesBeforeStart( 
            /* [retval][out] */ long *plMinutes) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderOptions( 
            /* [retval][out] */ long *pdwOptions) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Subject( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Location( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Categories( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Start( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Duration( 
            /* [in] */ long nLen) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_End( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AllDayEvent( 
            /* [in] */ VARIANT_BOOL fAllDay) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusyStatus( 
            /* [in] */ long nState) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Sensitivity( 
            /* [in] */ long lSensitivity) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Body( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderSet( 
            /* [in] */ VARIANT_BOOL fReminderSet) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderSoundFile( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderMinutesBeforeStart( 
            /* [in] */ long lMinutes) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderOptions( 
            /* [in] */ long dwOptions) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Send( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Cancel( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ IAppointment **ppolCopy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Display( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Oid( 
            /* [retval][out] */ long *poid) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BodyInk( 
            /* [in] */ CEBLOB *pcebl) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BodyInk( 
            /* [retval][out] */ CEBLOB *pcebl) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAppointmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAppointment * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAppointment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAppointment * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IAppointment * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IAppointment * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IAppointment * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAppointment * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *ClearRecurrencePattern )( 
            IAppointment * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRecurrencePattern )( 
            IAppointment * This,
            /* [retval][out] */ IRecurrencePattern **ppRecPattern);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsRecurring )( 
            IAppointment * This,
            /* [retval][out] */ VARIANT_BOOL *pfIsRecurring);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Subject )( 
            IAppointment * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            IAppointment * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            IAppointment * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Start )( 
            IAppointment * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            IAppointment * This,
            /* [retval][out] */ long *pnLen);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_End )( 
            IAppointment * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllDayEvent )( 
            IAppointment * This,
            /* [retval][out] */ VARIANT_BOOL *pfAllDay);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusyStatus )( 
            IAppointment * This,
            /* [retval][out] */ long *pnState);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sensitivity )( 
            IAppointment * This,
            /* [retval][out] */ long *plSensitivity);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Body )( 
            IAppointment * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Recipients )( 
            IAppointment * This,
            /* [retval][out] */ IRecipients **ppRecipients);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MeetingStatus )( 
            IAppointment * This,
            /* [retval][out] */ long *pnStatus);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderSet )( 
            IAppointment * This,
            /* [retval][out] */ VARIANT_BOOL *pfReminderSet);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderSoundFile )( 
            IAppointment * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderMinutesBeforeStart )( 
            IAppointment * This,
            /* [retval][out] */ long *plMinutes);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderOptions )( 
            IAppointment * This,
            /* [retval][out] */ long *pdwOptions);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Subject )( 
            IAppointment * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            IAppointment * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Categories )( 
            IAppointment * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Start )( 
            IAppointment * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Duration )( 
            IAppointment * This,
            /* [in] */ long nLen);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_End )( 
            IAppointment * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllDayEvent )( 
            IAppointment * This,
            /* [in] */ VARIANT_BOOL fAllDay);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusyStatus )( 
            IAppointment * This,
            /* [in] */ long nState);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sensitivity )( 
            IAppointment * This,
            /* [in] */ long lSensitivity);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Body )( 
            IAppointment * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderSet )( 
            IAppointment * This,
            /* [in] */ VARIANT_BOOL fReminderSet);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderSoundFile )( 
            IAppointment * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderMinutesBeforeStart )( 
            IAppointment * This,
            /* [in] */ long lMinutes);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderOptions )( 
            IAppointment * This,
            /* [in] */ long dwOptions);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            IAppointment * This);
        
        HRESULT ( STDMETHODCALLTYPE *Send )( 
            IAppointment * This);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IAppointment * This);
        
        HRESULT ( STDMETHODCALLTYPE *Cancel )( 
            IAppointment * This);
        
        HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IAppointment * This,
            /* [retval][out] */ IAppointment **ppolCopy);
        
        HRESULT ( STDMETHODCALLTYPE *Display )( 
            IAppointment * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Oid )( 
            IAppointment * This,
            /* [retval][out] */ long *poid);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BodyInk )( 
            IAppointment * This,
            /* [in] */ CEBLOB *pcebl);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BodyInk )( 
            IAppointment * This,
            /* [retval][out] */ CEBLOB *pcebl);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IAppointment * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        END_INTERFACE
    } IAppointmentVtbl;

    interface IAppointment
    {
        CONST_VTBL struct IAppointmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAppointment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAppointment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAppointment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAppointment_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAppointment_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAppointment_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAppointment_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAppointment_ClearRecurrencePattern(This)	\
    ( (This)->lpVtbl -> ClearRecurrencePattern(This) ) 

#define IAppointment_GetRecurrencePattern(This,ppRecPattern)	\
    ( (This)->lpVtbl -> GetRecurrencePattern(This,ppRecPattern) ) 

#define IAppointment_get_IsRecurring(This,pfIsRecurring)	\
    ( (This)->lpVtbl -> get_IsRecurring(This,pfIsRecurring) ) 

#define IAppointment_get_Subject(This,pbstr)	\
    ( (This)->lpVtbl -> get_Subject(This,pbstr) ) 

#define IAppointment_get_Location(This,pbstr)	\
    ( (This)->lpVtbl -> get_Location(This,pbstr) ) 

#define IAppointment_get_Categories(This,pbstr)	\
    ( (This)->lpVtbl -> get_Categories(This,pbstr) ) 

#define IAppointment_get_Start(This,pst)	\
    ( (This)->lpVtbl -> get_Start(This,pst) ) 

#define IAppointment_get_Duration(This,pnLen)	\
    ( (This)->lpVtbl -> get_Duration(This,pnLen) ) 

#define IAppointment_get_End(This,pst)	\
    ( (This)->lpVtbl -> get_End(This,pst) ) 

#define IAppointment_get_AllDayEvent(This,pfAllDay)	\
    ( (This)->lpVtbl -> get_AllDayEvent(This,pfAllDay) ) 

#define IAppointment_get_BusyStatus(This,pnState)	\
    ( (This)->lpVtbl -> get_BusyStatus(This,pnState) ) 

#define IAppointment_get_Sensitivity(This,plSensitivity)	\
    ( (This)->lpVtbl -> get_Sensitivity(This,plSensitivity) ) 

#define IAppointment_get_Body(This,pbstr)	\
    ( (This)->lpVtbl -> get_Body(This,pbstr) ) 

#define IAppointment_get_Recipients(This,ppRecipients)	\
    ( (This)->lpVtbl -> get_Recipients(This,ppRecipients) ) 

#define IAppointment_get_MeetingStatus(This,pnStatus)	\
    ( (This)->lpVtbl -> get_MeetingStatus(This,pnStatus) ) 

#define IAppointment_get_ReminderSet(This,pfReminderSet)	\
    ( (This)->lpVtbl -> get_ReminderSet(This,pfReminderSet) ) 

#define IAppointment_get_ReminderSoundFile(This,pbstr)	\
    ( (This)->lpVtbl -> get_ReminderSoundFile(This,pbstr) ) 

#define IAppointment_get_ReminderMinutesBeforeStart(This,plMinutes)	\
    ( (This)->lpVtbl -> get_ReminderMinutesBeforeStart(This,plMinutes) ) 

#define IAppointment_get_ReminderOptions(This,pdwOptions)	\
    ( (This)->lpVtbl -> get_ReminderOptions(This,pdwOptions) ) 

#define IAppointment_put_Subject(This,bstr)	\
    ( (This)->lpVtbl -> put_Subject(This,bstr) ) 

#define IAppointment_put_Location(This,bstr)	\
    ( (This)->lpVtbl -> put_Location(This,bstr) ) 

#define IAppointment_put_Categories(This,bstr)	\
    ( (This)->lpVtbl -> put_Categories(This,bstr) ) 

#define IAppointment_put_Start(This,st)	\
    ( (This)->lpVtbl -> put_Start(This,st) ) 

#define IAppointment_put_Duration(This,nLen)	\
    ( (This)->lpVtbl -> put_Duration(This,nLen) ) 

#define IAppointment_put_End(This,st)	\
    ( (This)->lpVtbl -> put_End(This,st) ) 

#define IAppointment_put_AllDayEvent(This,fAllDay)	\
    ( (This)->lpVtbl -> put_AllDayEvent(This,fAllDay) ) 

#define IAppointment_put_BusyStatus(This,nState)	\
    ( (This)->lpVtbl -> put_BusyStatus(This,nState) ) 

#define IAppointment_put_Sensitivity(This,lSensitivity)	\
    ( (This)->lpVtbl -> put_Sensitivity(This,lSensitivity) ) 

#define IAppointment_put_Body(This,bstr)	\
    ( (This)->lpVtbl -> put_Body(This,bstr) ) 

#define IAppointment_put_ReminderSet(This,fReminderSet)	\
    ( (This)->lpVtbl -> put_ReminderSet(This,fReminderSet) ) 

#define IAppointment_put_ReminderSoundFile(This,bstr)	\
    ( (This)->lpVtbl -> put_ReminderSoundFile(This,bstr) ) 

#define IAppointment_put_ReminderMinutesBeforeStart(This,lMinutes)	\
    ( (This)->lpVtbl -> put_ReminderMinutesBeforeStart(This,lMinutes) ) 

#define IAppointment_put_ReminderOptions(This,dwOptions)	\
    ( (This)->lpVtbl -> put_ReminderOptions(This,dwOptions) ) 

#define IAppointment_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define IAppointment_Send(This)	\
    ( (This)->lpVtbl -> Send(This) ) 

#define IAppointment_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IAppointment_Cancel(This)	\
    ( (This)->lpVtbl -> Cancel(This) ) 

#define IAppointment_Copy(This,ppolCopy)	\
    ( (This)->lpVtbl -> Copy(This,ppolCopy) ) 

#define IAppointment_Display(This)	\
    ( (This)->lpVtbl -> Display(This) ) 

#define IAppointment_get_Oid(This,poid)	\
    ( (This)->lpVtbl -> get_Oid(This,poid) ) 

#define IAppointment_put_BodyInk(This,pcebl)	\
    ( (This)->lpVtbl -> put_BodyInk(This,pcebl) ) 

#define IAppointment_get_BodyInk(This,pcebl)	\
    ( (This)->lpVtbl -> get_BodyInk(This,pcebl) ) 

#define IAppointment_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAppointment_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0022 */
/* [local] */ 

DEFINE_GUID(IID_IAppointment2, 0xaf57f7f5, 0x0503, 0x44b4, 0xbf, 0x19, 0x52, 0x1e, 0x04, 0xf6, 0xa8, 0xeb);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0022_v0_0_s_ifspec;

#ifndef __IAppointment2_INTERFACE_DEFINED__
#define __IAppointment2_INTERFACE_DEFINED__

/* interface IAppointment2 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IAppointment2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("af57f7f5-0503-44b4-bf19-521e04f6a8eb")
    IAppointment2 : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsException( 
            /* [retval][out] */ VARIANT_BOOL *pfIsException) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Respond( 
            /* [in] */ OlResponseType resp,
            /* [in] */ BSTR bstrResponseBody) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ OLITEMID *pOlItemId) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IFolder2 **ppParent) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Store( 
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NoResponseRequested( 
            /* [retval][out] */ VARIANT_BOOL *pfNoResponseRequested) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NoResponseRequested( 
            /* [in] */ VARIANT_BOOL fNoResponseRequested) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NoNewTimeProposals( 
            /* [retval][out] */ VARIANT_BOOL *pfNoNewTimeProposals) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NoNewTimeProposals( 
            /* [in] */ VARIANT_BOOL fNoNewTimeProposals) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Organizer( 
            /* [retval][out] */ BSTR *pbstrOrganizer) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Organizer( 
            /* [in] */ BSTR bstrOrganizer) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OrganizerEmail( 
            /* [retval][out] */ BSTR *pbstrOrganizerEmail) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OrganizerEmail( 
            /* [in] */ BSTR bstrOrganizerEmail) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClearRecurrencePattern( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRecurrencePattern( 
            /* [retval][out] */ IRecurrencePattern2 **ppRecPattern) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsRecurring( 
            /* [retval][out] */ VARIANT_BOOL *pfIsRecurring) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Subject( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Categories( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Start( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Duration( 
            /* [retval][out] */ long *pnLen) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_End( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AllDayEvent( 
            /* [retval][out] */ VARIANT_BOOL *pfAllDay) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BusyStatus( 
            /* [retval][out] */ long *pnState) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Sensitivity( 
            /* [retval][out] */ long *plSensitivity) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Body( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Recipients( 
            /* [retval][out] */ IRecipients2 **ppRecipients) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MeetingStatus( 
            /* [retval][out] */ long *pnStatus) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderSet( 
            /* [retval][out] */ VARIANT_BOOL *pfReminderSet) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderSoundFile( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderMinutesBeforeStart( 
            /* [retval][out] */ long *plMinutes) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReminderOptions( 
            /* [retval][out] */ long *pdwOptions) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReplyTime( 
            /* [retval][out] */ DATE *pst) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ResponseType( 
            /* [retval][out] */ OlRecipientStatus *polResponse) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Subject( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Location( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Categories( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Start( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Duration( 
            /* [in] */ long nLen) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_End( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AllDayEvent( 
            /* [in] */ VARIANT_BOOL fAllDay) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BusyStatus( 
            /* [in] */ long nState) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Sensitivity( 
            /* [in] */ long lSensitivity) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Body( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MeetingStatus( 
            /* [in] */ long nStatus) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderSet( 
            /* [in] */ VARIANT_BOOL fReminderSet) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderSoundFile( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderMinutesBeforeStart( 
            /* [in] */ long lMinutes) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReminderOptions( 
            /* [in] */ long dwOptions) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReplyTime( 
            /* [in] */ DATE st) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ResponseType( 
            /* [in] */ OlRecipientStatus olResponse) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Send( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Cancel( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ IAppointment2 **ppolCopy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Display( void) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BodyInk( 
            /* [in] */ CEBLOB *pcebl) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BodyInk( 
            /* [retval][out] */ CEBLOB *pcebl) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp3 **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAppointment2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAppointment2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAppointment2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAppointment2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IAppointment2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IAppointment2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IAppointment2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAppointment2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsException )( 
            IAppointment2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfIsException);
        
        HRESULT ( STDMETHODCALLTYPE *Respond )( 
            IAppointment2 * This,
            /* [in] */ OlResponseType resp,
            /* [in] */ BSTR bstrResponseBody);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            IAppointment2 * This,
            /* [retval][out] */ OLITEMID *pOlItemId);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IAppointment2 * This,
            /* [retval][out] */ IFolder2 **ppParent);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Store )( 
            IAppointment2 * This,
            /* [retval][out] */ IStore **ppStore);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NoResponseRequested )( 
            IAppointment2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfNoResponseRequested);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NoResponseRequested )( 
            IAppointment2 * This,
            /* [in] */ VARIANT_BOOL fNoResponseRequested);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NoNewTimeProposals )( 
            IAppointment2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfNoNewTimeProposals);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NoNewTimeProposals )( 
            IAppointment2 * This,
            /* [in] */ VARIANT_BOOL fNoNewTimeProposals);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Organizer )( 
            IAppointment2 * This,
            /* [retval][out] */ BSTR *pbstrOrganizer);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Organizer )( 
            IAppointment2 * This,
            /* [in] */ BSTR bstrOrganizer);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OrganizerEmail )( 
            IAppointment2 * This,
            /* [retval][out] */ BSTR *pbstrOrganizerEmail);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OrganizerEmail )( 
            IAppointment2 * This,
            /* [in] */ BSTR bstrOrganizerEmail);
        
        HRESULT ( STDMETHODCALLTYPE *ClearRecurrencePattern )( 
            IAppointment2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRecurrencePattern )( 
            IAppointment2 * This,
            /* [retval][out] */ IRecurrencePattern2 **ppRecPattern);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsRecurring )( 
            IAppointment2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfIsRecurring);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Subject )( 
            IAppointment2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            IAppointment2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Categories )( 
            IAppointment2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Start )( 
            IAppointment2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            IAppointment2 * This,
            /* [retval][out] */ long *pnLen);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_End )( 
            IAppointment2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllDayEvent )( 
            IAppointment2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfAllDay);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusyStatus )( 
            IAppointment2 * This,
            /* [retval][out] */ long *pnState);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sensitivity )( 
            IAppointment2 * This,
            /* [retval][out] */ long *plSensitivity);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Body )( 
            IAppointment2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Recipients )( 
            IAppointment2 * This,
            /* [retval][out] */ IRecipients2 **ppRecipients);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MeetingStatus )( 
            IAppointment2 * This,
            /* [retval][out] */ long *pnStatus);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderSet )( 
            IAppointment2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfReminderSet);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderSoundFile )( 
            IAppointment2 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderMinutesBeforeStart )( 
            IAppointment2 * This,
            /* [retval][out] */ long *plMinutes);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReminderOptions )( 
            IAppointment2 * This,
            /* [retval][out] */ long *pdwOptions);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReplyTime )( 
            IAppointment2 * This,
            /* [retval][out] */ DATE *pst);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ResponseType )( 
            IAppointment2 * This,
            /* [retval][out] */ OlRecipientStatus *polResponse);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Subject )( 
            IAppointment2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            IAppointment2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Categories )( 
            IAppointment2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Start )( 
            IAppointment2 * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Duration )( 
            IAppointment2 * This,
            /* [in] */ long nLen);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_End )( 
            IAppointment2 * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllDayEvent )( 
            IAppointment2 * This,
            /* [in] */ VARIANT_BOOL fAllDay);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusyStatus )( 
            IAppointment2 * This,
            /* [in] */ long nState);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sensitivity )( 
            IAppointment2 * This,
            /* [in] */ long lSensitivity);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Body )( 
            IAppointment2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MeetingStatus )( 
            IAppointment2 * This,
            /* [in] */ long nStatus);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderSet )( 
            IAppointment2 * This,
            /* [in] */ VARIANT_BOOL fReminderSet);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderSoundFile )( 
            IAppointment2 * This,
            /* [in] */ BSTR bstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderMinutesBeforeStart )( 
            IAppointment2 * This,
            /* [in] */ long lMinutes);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReminderOptions )( 
            IAppointment2 * This,
            /* [in] */ long dwOptions);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReplyTime )( 
            IAppointment2 * This,
            /* [in] */ DATE st);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ResponseType )( 
            IAppointment2 * This,
            /* [in] */ OlRecipientStatus olResponse);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            IAppointment2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Send )( 
            IAppointment2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IAppointment2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Cancel )( 
            IAppointment2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IAppointment2 * This,
            /* [retval][out] */ IAppointment2 **ppolCopy);
        
        HRESULT ( STDMETHODCALLTYPE *Display )( 
            IAppointment2 * This);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BodyInk )( 
            IAppointment2 * This,
            /* [in] */ CEBLOB *pcebl);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BodyInk )( 
            IAppointment2 * This,
            /* [retval][out] */ CEBLOB *pcebl);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IAppointment2 * This,
            /* [retval][out] */ IPOutlookApp3 **polApp);
        
        END_INTERFACE
    } IAppointment2Vtbl;

    interface IAppointment2
    {
        CONST_VTBL struct IAppointment2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAppointment2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAppointment2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAppointment2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAppointment2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAppointment2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAppointment2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAppointment2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAppointment2_get_IsException(This,pfIsException)	\
    ( (This)->lpVtbl -> get_IsException(This,pfIsException) ) 

#define IAppointment2_Respond(This,resp,bstrResponseBody)	\
    ( (This)->lpVtbl -> Respond(This,resp,bstrResponseBody) ) 

#define IAppointment2_get_Id(This,pOlItemId)	\
    ( (This)->lpVtbl -> get_Id(This,pOlItemId) ) 

#define IAppointment2_get_Parent(This,ppParent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppParent) ) 

#define IAppointment2_get_Store(This,ppStore)	\
    ( (This)->lpVtbl -> get_Store(This,ppStore) ) 

#define IAppointment2_get_NoResponseRequested(This,pfNoResponseRequested)	\
    ( (This)->lpVtbl -> get_NoResponseRequested(This,pfNoResponseRequested) ) 

#define IAppointment2_put_NoResponseRequested(This,fNoResponseRequested)	\
    ( (This)->lpVtbl -> put_NoResponseRequested(This,fNoResponseRequested) ) 

#define IAppointment2_get_NoNewTimeProposals(This,pfNoNewTimeProposals)	\
    ( (This)->lpVtbl -> get_NoNewTimeProposals(This,pfNoNewTimeProposals) ) 

#define IAppointment2_put_NoNewTimeProposals(This,fNoNewTimeProposals)	\
    ( (This)->lpVtbl -> put_NoNewTimeProposals(This,fNoNewTimeProposals) ) 

#define IAppointment2_get_Organizer(This,pbstrOrganizer)	\
    ( (This)->lpVtbl -> get_Organizer(This,pbstrOrganizer) ) 

#define IAppointment2_put_Organizer(This,bstrOrganizer)	\
    ( (This)->lpVtbl -> put_Organizer(This,bstrOrganizer) ) 

#define IAppointment2_get_OrganizerEmail(This,pbstrOrganizerEmail)	\
    ( (This)->lpVtbl -> get_OrganizerEmail(This,pbstrOrganizerEmail) ) 

#define IAppointment2_put_OrganizerEmail(This,bstrOrganizerEmail)	\
    ( (This)->lpVtbl -> put_OrganizerEmail(This,bstrOrganizerEmail) ) 

#define IAppointment2_ClearRecurrencePattern(This)	\
    ( (This)->lpVtbl -> ClearRecurrencePattern(This) ) 

#define IAppointment2_GetRecurrencePattern(This,ppRecPattern)	\
    ( (This)->lpVtbl -> GetRecurrencePattern(This,ppRecPattern) ) 

#define IAppointment2_get_IsRecurring(This,pfIsRecurring)	\
    ( (This)->lpVtbl -> get_IsRecurring(This,pfIsRecurring) ) 

#define IAppointment2_get_Subject(This,pbstr)	\
    ( (This)->lpVtbl -> get_Subject(This,pbstr) ) 

#define IAppointment2_get_Location(This,pbstr)	\
    ( (This)->lpVtbl -> get_Location(This,pbstr) ) 

#define IAppointment2_get_Categories(This,pbstr)	\
    ( (This)->lpVtbl -> get_Categories(This,pbstr) ) 

#define IAppointment2_get_Start(This,pst)	\
    ( (This)->lpVtbl -> get_Start(This,pst) ) 

#define IAppointment2_get_Duration(This,pnLen)	\
    ( (This)->lpVtbl -> get_Duration(This,pnLen) ) 

#define IAppointment2_get_End(This,pst)	\
    ( (This)->lpVtbl -> get_End(This,pst) ) 

#define IAppointment2_get_AllDayEvent(This,pfAllDay)	\
    ( (This)->lpVtbl -> get_AllDayEvent(This,pfAllDay) ) 

#define IAppointment2_get_BusyStatus(This,pnState)	\
    ( (This)->lpVtbl -> get_BusyStatus(This,pnState) ) 

#define IAppointment2_get_Sensitivity(This,plSensitivity)	\
    ( (This)->lpVtbl -> get_Sensitivity(This,plSensitivity) ) 

#define IAppointment2_get_Body(This,pbstr)	\
    ( (This)->lpVtbl -> get_Body(This,pbstr) ) 

#define IAppointment2_get_Recipients(This,ppRecipients)	\
    ( (This)->lpVtbl -> get_Recipients(This,ppRecipients) ) 

#define IAppointment2_get_MeetingStatus(This,pnStatus)	\
    ( (This)->lpVtbl -> get_MeetingStatus(This,pnStatus) ) 

#define IAppointment2_get_ReminderSet(This,pfReminderSet)	\
    ( (This)->lpVtbl -> get_ReminderSet(This,pfReminderSet) ) 

#define IAppointment2_get_ReminderSoundFile(This,pbstr)	\
    ( (This)->lpVtbl -> get_ReminderSoundFile(This,pbstr) ) 

#define IAppointment2_get_ReminderMinutesBeforeStart(This,plMinutes)	\
    ( (This)->lpVtbl -> get_ReminderMinutesBeforeStart(This,plMinutes) ) 

#define IAppointment2_get_ReminderOptions(This,pdwOptions)	\
    ( (This)->lpVtbl -> get_ReminderOptions(This,pdwOptions) ) 

#define IAppointment2_get_ReplyTime(This,pst)	\
    ( (This)->lpVtbl -> get_ReplyTime(This,pst) ) 

#define IAppointment2_get_ResponseType(This,polResponse)	\
    ( (This)->lpVtbl -> get_ResponseType(This,polResponse) ) 

#define IAppointment2_put_Subject(This,bstr)	\
    ( (This)->lpVtbl -> put_Subject(This,bstr) ) 

#define IAppointment2_put_Location(This,bstr)	\
    ( (This)->lpVtbl -> put_Location(This,bstr) ) 

#define IAppointment2_put_Categories(This,bstr)	\
    ( (This)->lpVtbl -> put_Categories(This,bstr) ) 

#define IAppointment2_put_Start(This,st)	\
    ( (This)->lpVtbl -> put_Start(This,st) ) 

#define IAppointment2_put_Duration(This,nLen)	\
    ( (This)->lpVtbl -> put_Duration(This,nLen) ) 

#define IAppointment2_put_End(This,st)	\
    ( (This)->lpVtbl -> put_End(This,st) ) 

#define IAppointment2_put_AllDayEvent(This,fAllDay)	\
    ( (This)->lpVtbl -> put_AllDayEvent(This,fAllDay) ) 

#define IAppointment2_put_BusyStatus(This,nState)	\
    ( (This)->lpVtbl -> put_BusyStatus(This,nState) ) 

#define IAppointment2_put_Sensitivity(This,lSensitivity)	\
    ( (This)->lpVtbl -> put_Sensitivity(This,lSensitivity) ) 

#define IAppointment2_put_Body(This,bstr)	\
    ( (This)->lpVtbl -> put_Body(This,bstr) ) 

#define IAppointment2_put_MeetingStatus(This,nStatus)	\
    ( (This)->lpVtbl -> put_MeetingStatus(This,nStatus) ) 

#define IAppointment2_put_ReminderSet(This,fReminderSet)	\
    ( (This)->lpVtbl -> put_ReminderSet(This,fReminderSet) ) 

#define IAppointment2_put_ReminderSoundFile(This,bstr)	\
    ( (This)->lpVtbl -> put_ReminderSoundFile(This,bstr) ) 

#define IAppointment2_put_ReminderMinutesBeforeStart(This,lMinutes)	\
    ( (This)->lpVtbl -> put_ReminderMinutesBeforeStart(This,lMinutes) ) 

#define IAppointment2_put_ReminderOptions(This,dwOptions)	\
    ( (This)->lpVtbl -> put_ReminderOptions(This,dwOptions) ) 

#define IAppointment2_put_ReplyTime(This,st)	\
    ( (This)->lpVtbl -> put_ReplyTime(This,st) ) 

#define IAppointment2_put_ResponseType(This,olResponse)	\
    ( (This)->lpVtbl -> put_ResponseType(This,olResponse) ) 

#define IAppointment2_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define IAppointment2_Send(This)	\
    ( (This)->lpVtbl -> Send(This) ) 

#define IAppointment2_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IAppointment2_Cancel(This)	\
    ( (This)->lpVtbl -> Cancel(This) ) 

#define IAppointment2_Copy(This,ppolCopy)	\
    ( (This)->lpVtbl -> Copy(This,ppolCopy) ) 

#define IAppointment2_Display(This)	\
    ( (This)->lpVtbl -> Display(This) ) 

#define IAppointment2_put_BodyInk(This,pcebl)	\
    ( (This)->lpVtbl -> put_BodyInk(This,pcebl) ) 

#define IAppointment2_get_BodyInk(This,pcebl)	\
    ( (This)->lpVtbl -> get_BodyInk(This,pcebl) ) 

#define IAppointment2_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAppointment2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0023 */
/* [local] */ 

DEFINE_GUID(IID_INote, 0x477694af, 0xe50e, 0x4af8, 0xaf, 0x4a, 0xae, 0xaf, 0xe3, 0x67, 0xbc, 0x8a);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0023_v0_0_s_ifspec;

#ifndef __INote_INTERFACE_DEFINED__
#define __INote_INTERFACE_DEFINED__

/* interface INote */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_INote;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("477694af-e50e-4af8-af4a-aeafe367bc8a")
    INote : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ OLITEMID *pOlItemId) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IFolder2 **ppParent) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Store( 
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ INote **ppolCopy) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp3 **ppolApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INoteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            INote * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            INote * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            INote * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            INote * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            INote * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            INote * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            INote * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            INote * This,
            /* [retval][out] */ OLITEMID *pOlItemId);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            INote * This,
            /* [retval][out] */ IFolder2 **ppParent);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Store )( 
            INote * This,
            /* [retval][out] */ IStore **ppStore);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            INote * This);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            INote * This);
        
        HRESULT ( STDMETHODCALLTYPE *Copy )( 
            INote * This,
            /* [retval][out] */ INote **ppolCopy);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            INote * This,
            /* [retval][out] */ IPOutlookApp3 **ppolApp);
        
        END_INTERFACE
    } INoteVtbl;

    interface INote
    {
        CONST_VTBL struct INoteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INote_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define INote_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define INote_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define INote_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define INote_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define INote_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define INote_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define INote_get_Id(This,pOlItemId)	\
    ( (This)->lpVtbl -> get_Id(This,pOlItemId) ) 

#define INote_get_Parent(This,ppParent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppParent) ) 

#define INote_get_Store(This,ppStore)	\
    ( (This)->lpVtbl -> get_Store(This,ppStore) ) 

#define INote_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define INote_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define INote_Copy(This,ppolCopy)	\
    ( (This)->lpVtbl -> Copy(This,ppolCopy) ) 

#define INote_get_Application(This,ppolApp)	\
    ( (This)->lpVtbl -> get_Application(This,ppolApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __INote_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0024 */
/* [local] */ 

DEFINE_GUID(IID_IMail, 0xf4f80343, 0x5120, 0x4076, 0xae, 0xaf, 0x38, 0xcb, 0xcb, 0xce, 0x55, 0x7e);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0024_v0_0_s_ifspec;

#ifndef __IMail_INTERFACE_DEFINED__
#define __IMail_INTERFACE_DEFINED__

/* interface IMail */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IMail;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F4F80343-5120-4076-AEAF-38CBCBCE557E")
    IMail : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ OLITEMID *pOlItemId) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IFolder2 **ppParent) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Store( 
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ IMail **ppolCopy) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp3 **ppolApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMailVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMail * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMail * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMail * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMail * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMail * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMail * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMail * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            IMail * This,
            /* [retval][out] */ OLITEMID *pOlItemId);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IMail * This,
            /* [retval][out] */ IFolder2 **ppParent);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Store )( 
            IMail * This,
            /* [retval][out] */ IStore **ppStore);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            IMail * This);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IMail * This);
        
        HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IMail * This,
            /* [retval][out] */ IMail **ppolCopy);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IMail * This,
            /* [retval][out] */ IPOutlookApp3 **ppolApp);
        
        END_INTERFACE
    } IMailVtbl;

    interface IMail
    {
        CONST_VTBL struct IMailVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMail_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMail_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMail_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMail_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMail_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMail_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMail_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMail_get_Id(This,pOlItemId)	\
    ( (This)->lpVtbl -> get_Id(This,pOlItemId) ) 

#define IMail_get_Parent(This,ppParent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppParent) ) 

#define IMail_get_Store(This,ppStore)	\
    ( (This)->lpVtbl -> get_Store(This,ppStore) ) 

#define IMail_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define IMail_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IMail_Copy(This,ppolCopy)	\
    ( (This)->lpVtbl -> Copy(This,ppolCopy) ) 

#define IMail_get_Application(This,ppolApp)	\
    ( (This)->lpVtbl -> get_Application(This,ppolApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMail_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0025 */
/* [local] */ 

DEFINE_GUID(IID_ICity, 0xc83c5e90, 0x3d1b, 0x11d2, 0x8f, 0x1b, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0025_v0_0_s_ifspec;

#ifndef __ICity_INTERFACE_DEFINED__
#define __ICity_INTERFACE_DEFINED__

/* interface ICity */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_ICity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c83c5e90-3d1b-11d2-8f1b-0000f87a4335")
    ICity : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Longitude( 
            /* [retval][out] */ long *pcLongitude) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Latitude( 
            /* [retval][out] */ long *pcLatitude) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TimezoneIndex( 
            /* [retval][out] */ long *pcTimezone) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AirportCode( 
            /* [retval][out] */ BSTR *pbstrAirportCode) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CountryPhoneCode( 
            /* [retval][out] */ BSTR *pbstrCountryPhoneCode) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AreaCode( 
            /* [retval][out] */ BSTR *pbstrAreaCode) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Country( 
            /* [retval][out] */ BSTR *pbstrCountry) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InROM( 
            /* [retval][out] */ VARIANT_BOOL *pfInROM) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Longitude( 
            /* [in] */ long cLongitude) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Latitude( 
            /* [in] */ long cLatitude) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TimezoneIndex( 
            /* [in] */ long cTimezone) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AirportCode( 
            /* [in] */ BSTR bstrAirportCode) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CountryPhoneCode( 
            /* [in] */ BSTR bstrCountryPhoneCode) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AreaCode( 
            /* [in] */ BSTR bstrAreaCode) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Country( 
            /* [in] */ BSTR bstrCountry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ ICity **ppolCopy) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICity * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ICity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ICity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ICity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ICity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Longitude )( 
            ICity * This,
            /* [retval][out] */ long *pcLongitude);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Latitude )( 
            ICity * This,
            /* [retval][out] */ long *pcLatitude);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimezoneIndex )( 
            ICity * This,
            /* [retval][out] */ long *pcTimezone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AirportCode )( 
            ICity * This,
            /* [retval][out] */ BSTR *pbstrAirportCode);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountryPhoneCode )( 
            ICity * This,
            /* [retval][out] */ BSTR *pbstrCountryPhoneCode);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AreaCode )( 
            ICity * This,
            /* [retval][out] */ BSTR *pbstrAreaCode);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ICity * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Country )( 
            ICity * This,
            /* [retval][out] */ BSTR *pbstrCountry);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InROM )( 
            ICity * This,
            /* [retval][out] */ VARIANT_BOOL *pfInROM);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Longitude )( 
            ICity * This,
            /* [in] */ long cLongitude);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Latitude )( 
            ICity * This,
            /* [in] */ long cLatitude);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimezoneIndex )( 
            ICity * This,
            /* [in] */ long cTimezone);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AirportCode )( 
            ICity * This,
            /* [in] */ BSTR bstrAirportCode);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CountryPhoneCode )( 
            ICity * This,
            /* [in] */ BSTR bstrCountryPhoneCode);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AreaCode )( 
            ICity * This,
            /* [in] */ BSTR bstrAreaCode);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ICity * This,
            /* [in] */ BSTR bstrName);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Country )( 
            ICity * This,
            /* [in] */ BSTR bstrCountry);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            ICity * This);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ICity * This);
        
        HRESULT ( STDMETHODCALLTYPE *Copy )( 
            ICity * This,
            /* [retval][out] */ ICity **ppolCopy);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ICity * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        END_INTERFACE
    } ICityVtbl;

    interface ICity
    {
        CONST_VTBL struct ICityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ICity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ICity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ICity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ICity_get_Longitude(This,pcLongitude)	\
    ( (This)->lpVtbl -> get_Longitude(This,pcLongitude) ) 

#define ICity_get_Latitude(This,pcLatitude)	\
    ( (This)->lpVtbl -> get_Latitude(This,pcLatitude) ) 

#define ICity_get_TimezoneIndex(This,pcTimezone)	\
    ( (This)->lpVtbl -> get_TimezoneIndex(This,pcTimezone) ) 

#define ICity_get_AirportCode(This,pbstrAirportCode)	\
    ( (This)->lpVtbl -> get_AirportCode(This,pbstrAirportCode) ) 

#define ICity_get_CountryPhoneCode(This,pbstrCountryPhoneCode)	\
    ( (This)->lpVtbl -> get_CountryPhoneCode(This,pbstrCountryPhoneCode) ) 

#define ICity_get_AreaCode(This,pbstrAreaCode)	\
    ( (This)->lpVtbl -> get_AreaCode(This,pbstrAreaCode) ) 

#define ICity_get_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrName) ) 

#define ICity_get_Country(This,pbstrCountry)	\
    ( (This)->lpVtbl -> get_Country(This,pbstrCountry) ) 

#define ICity_get_InROM(This,pfInROM)	\
    ( (This)->lpVtbl -> get_InROM(This,pfInROM) ) 

#define ICity_put_Longitude(This,cLongitude)	\
    ( (This)->lpVtbl -> put_Longitude(This,cLongitude) ) 

#define ICity_put_Latitude(This,cLatitude)	\
    ( (This)->lpVtbl -> put_Latitude(This,cLatitude) ) 

#define ICity_put_TimezoneIndex(This,cTimezone)	\
    ( (This)->lpVtbl -> put_TimezoneIndex(This,cTimezone) ) 

#define ICity_put_AirportCode(This,bstrAirportCode)	\
    ( (This)->lpVtbl -> put_AirportCode(This,bstrAirportCode) ) 

#define ICity_put_CountryPhoneCode(This,bstrCountryPhoneCode)	\
    ( (This)->lpVtbl -> put_CountryPhoneCode(This,bstrCountryPhoneCode) ) 

#define ICity_put_AreaCode(This,bstrAreaCode)	\
    ( (This)->lpVtbl -> put_AreaCode(This,bstrAreaCode) ) 

#define ICity_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define ICity_put_Country(This,bstrCountry)	\
    ( (This)->lpVtbl -> put_Country(This,bstrCountry) ) 

#define ICity_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define ICity_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define ICity_Copy(This,ppolCopy)	\
    ( (This)->lpVtbl -> Copy(This,ppolCopy) ) 

#define ICity_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICity_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0026 */
/* [local] */ 

DEFINE_GUID(IID_IFolder, 0x5058f20, 0x20be, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0026_v0_0_s_ifspec;

#ifndef __IFolder_INTERFACE_DEFINED__
#define __IFolder_INTERFACE_DEFINED__

/* interface IFolder */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IFolder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("05058f20-20be-11d2-8f18-0000f87a4335")
    IFolder : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Items( 
            /* [retval][out] */ IPOutlookItemCollection **ppolItems) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultItemType( 
            /* [retval][out] */ int *polItem) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddItemToInfraredFolder( 
            /* [in] */ int olItem,
            /* [in] */ IDispatch *polItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendToInfrared( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReceiveFromInfrared( 
            /* [retval][out] */ IPOutlookItemCollection **ppItems) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFolderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFolder * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFolder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFolder * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFolder * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFolder * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFolder * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFolder * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Items )( 
            IFolder * This,
            /* [retval][out] */ IPOutlookItemCollection **ppolItems);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultItemType )( 
            IFolder * This,
            /* [retval][out] */ int *polItem);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFolder * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        HRESULT ( STDMETHODCALLTYPE *AddItemToInfraredFolder )( 
            IFolder * This,
            /* [in] */ int olItem,
            /* [in] */ IDispatch *polItem);
        
        HRESULT ( STDMETHODCALLTYPE *SendToInfrared )( 
            IFolder * This);
        
        HRESULT ( STDMETHODCALLTYPE *ReceiveFromInfrared )( 
            IFolder * This,
            /* [retval][out] */ IPOutlookItemCollection **ppItems);
        
        END_INTERFACE
    } IFolderVtbl;

    interface IFolder
    {
        CONST_VTBL struct IFolderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFolder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFolder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFolder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFolder_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFolder_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFolder_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFolder_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFolder_get_Items(This,ppolItems)	\
    ( (This)->lpVtbl -> get_Items(This,ppolItems) ) 

#define IFolder_get_DefaultItemType(This,polItem)	\
    ( (This)->lpVtbl -> get_DefaultItemType(This,polItem) ) 

#define IFolder_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#define IFolder_AddItemToInfraredFolder(This,olItem,polItem)	\
    ( (This)->lpVtbl -> AddItemToInfraredFolder(This,olItem,polItem) ) 

#define IFolder_SendToInfrared(This)	\
    ( (This)->lpVtbl -> SendToInfrared(This) ) 

#define IFolder_ReceiveFromInfrared(This,ppItems)	\
    ( (This)->lpVtbl -> ReceiveFromInfrared(This,ppItems) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFolder_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0027 */
/* [local] */ 

DEFINE_GUID(IID_IFolder2, 0x3382bed9, 0xe18f, 0x4e32, 0xb3, 0xe6, 0x50, 0x31, 0x92, 0xc8, 0xa5, 0x8e);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0027_v0_0_s_ifspec;

#ifndef __IFolder2_INTERFACE_DEFINED__
#define __IFolder2_INTERFACE_DEFINED__

/* interface IFolder2 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IFolder2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3382BED9-E18F-4e32-B3E6-503192C8A58E")
    IFolder2 : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ OLITEMID *pItemId) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Items( 
            /* [retval][out] */ IPOutlookItemCollection2 **ppolItems) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ItemType( 
            /* [retval][out] */ OlItemType *polItem) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp3 **polApp) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IFolder2 **ppParent) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Store( 
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DisplayName( 
            /* [retval][out] */ BSTR *pbstrDisplayName) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DisplayName( 
            /* [in] */ BSTR bstrDisplayName) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Folders( 
            /* [retval][out] */ IPOutlookFolderCollection **ppFolders) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveToFolder( 
            /* [in] */ IFolder2 *pFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateFolder( 
            /* [in] */ BSTR bstrName,
            /* [in] */ OlItemType olItem,
            /* [retval][out] */ IFolder2 **ppFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateItem( 
            /* [in] */ OlItemType olItemType,
            /* [retval][out] */ IItem2 **ppItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendToInfrared( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReceiveFromInfrared( 
            /* [retval][out] */ IPOutlookItemCollection2 **ppItems) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFolder2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFolder2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFolder2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFolder2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFolder2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFolder2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFolder2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFolder2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            IFolder2 * This,
            /* [retval][out] */ OLITEMID *pItemId);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Items )( 
            IFolder2 * This,
            /* [retval][out] */ IPOutlookItemCollection2 **ppolItems);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ItemType )( 
            IFolder2 * This,
            /* [retval][out] */ OlItemType *polItem);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IFolder2 * This,
            /* [retval][out] */ IPOutlookApp3 **polApp);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IFolder2 * This,
            /* [retval][out] */ IFolder2 **ppParent);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Store )( 
            IFolder2 * This,
            /* [retval][out] */ IStore **ppStore);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IFolder2 * This,
            /* [retval][out] */ BSTR *pbstrDisplayName);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IFolder2 * This,
            /* [in] */ BSTR bstrDisplayName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Folders )( 
            IFolder2 * This,
            /* [retval][out] */ IPOutlookFolderCollection **ppFolders);
        
        HRESULT ( STDMETHODCALLTYPE *MoveToFolder )( 
            IFolder2 * This,
            /* [in] */ IFolder2 *pFolder);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFolder )( 
            IFolder2 * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ OlItemType olItem,
            /* [retval][out] */ IFolder2 **ppFolder);
        
        HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            IFolder2 * This,
            /* [in] */ OlItemType olItemType,
            /* [retval][out] */ IItem2 **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            IFolder2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IFolder2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SendToInfrared )( 
            IFolder2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ReceiveFromInfrared )( 
            IFolder2 * This,
            /* [retval][out] */ IPOutlookItemCollection2 **ppItems);
        
        END_INTERFACE
    } IFolder2Vtbl;

    interface IFolder2
    {
        CONST_VTBL struct IFolder2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFolder2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFolder2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFolder2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFolder2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IFolder2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IFolder2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IFolder2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IFolder2_get_Id(This,pItemId)	\
    ( (This)->lpVtbl -> get_Id(This,pItemId) ) 

#define IFolder2_get_Items(This,ppolItems)	\
    ( (This)->lpVtbl -> get_Items(This,ppolItems) ) 

#define IFolder2_get_ItemType(This,polItem)	\
    ( (This)->lpVtbl -> get_ItemType(This,polItem) ) 

#define IFolder2_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#define IFolder2_get_Parent(This,ppParent)	\
    ( (This)->lpVtbl -> get_Parent(This,ppParent) ) 

#define IFolder2_get_Store(This,ppStore)	\
    ( (This)->lpVtbl -> get_Store(This,ppStore) ) 

#define IFolder2_get_DisplayName(This,pbstrDisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,pbstrDisplayName) ) 

#define IFolder2_put_DisplayName(This,bstrDisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,bstrDisplayName) ) 

#define IFolder2_get_Folders(This,ppFolders)	\
    ( (This)->lpVtbl -> get_Folders(This,ppFolders) ) 

#define IFolder2_MoveToFolder(This,pFolder)	\
    ( (This)->lpVtbl -> MoveToFolder(This,pFolder) ) 

#define IFolder2_CreateFolder(This,bstrName,olItem,ppFolder)	\
    ( (This)->lpVtbl -> CreateFolder(This,bstrName,olItem,ppFolder) ) 

#define IFolder2_CreateItem(This,olItemType,ppItem)	\
    ( (This)->lpVtbl -> CreateItem(This,olItemType,ppItem) ) 

#define IFolder2_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define IFolder2_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IFolder2_SendToInfrared(This)	\
    ( (This)->lpVtbl -> SendToInfrared(This) ) 

#define IFolder2_ReceiveFromInfrared(This,ppItems)	\
    ( (This)->lpVtbl -> ReceiveFromInfrared(This,ppItems) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFolder2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0028 */
/* [local] */ 

DEFINE_GUID(IID_IPOutlookApp, 0x05058F22, 0x20BE, 0x11d2, 0x8F, 0x18, 0x00, 0x00, 0xF8, 0x7A, 0x43, 0x35);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0028_v0_0_s_ifspec;

#ifndef __IPOutlookApp_INTERFACE_DEFINED__
#define __IPOutlookApp_INTERFACE_DEFINED__

/* interface IPOutlookApp */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPOutlookApp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("05058f22-20be-11d2-8f18-0000f87a4335")
    IPOutlookApp : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Logon( 
            /* [in] */ long hWnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Logoff( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [out][retval] */ BSTR *pbstrVersion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDefaultFolder( 
            /* [in] */ int olFolder,
            /* [retval][out] */ IFolder **ppIFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateItem( 
            /* [in] */ int olItem,
            /* [retval][out] */ IDispatch **ppPOutlookItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItemFromOid( 
            /* [in] */ long oid,
            /* [retval][out] */ IDispatch **ppPOutlookItem) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HomeCity( 
            /* [retval][out] */ ICity **ppHomeCity) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HomeCity( 
            /* [in] */ ICity *pHomeCity) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VisitingCity( 
            /* [retval][out] */ ICity **ppHomeCity) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VisitingCity( 
            /* [in] */ ICity *pHomeCity) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CurrentCityIndex( 
            /* [retval][out] */ long *pnolCity) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CurrentCityIndex( 
            /* [in] */ long olCity) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReceiveFromInfrared( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OutlookCompatible( 
            /* [retval][out] */ VARIANT_BOOL *pfCompat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTimeZoneFromIndex( 
            /* [in] */ int cTimezone,
            /* [retval][out] */ ITimeZone **ppTz) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTimeZoneInformationFromIndex( 
            /* [in] */ int cTimezone,
            /* [retval][out] */ TIME_ZONE_INFORMATION *ptzInfo) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
        virtual /* [hidden] */ HRESULT STDMETHODCALLTYPE SysFreeString( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [hidden] */ HRESULT STDMETHODCALLTYPE VariantTimeToSystemTime( 
            /* [in] */ DATE date,
            /* [out] */ SYSTEMTIME *pst) = 0;
        
        virtual /* [hidden] */ HRESULT STDMETHODCALLTYPE SystemTimeToVariantTime( 
            /* [in] */ SYSTEMTIME *pst,
            /* [out] */ DATE *pdate) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOutlookAppVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOutlookApp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOutlookApp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOutlookApp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPOutlookApp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPOutlookApp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPOutlookApp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPOutlookApp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *Logon )( 
            IPOutlookApp * This,
            /* [in] */ long hWnd);
        
        HRESULT ( STDMETHODCALLTYPE *Logoff )( 
            IPOutlookApp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            IPOutlookApp * This,
            /* [out][retval] */ BSTR *pbstrVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultFolder )( 
            IPOutlookApp * This,
            /* [in] */ int olFolder,
            /* [retval][out] */ IFolder **ppIFolder);
        
        HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            IPOutlookApp * This,
            /* [in] */ int olItem,
            /* [retval][out] */ IDispatch **ppPOutlookItem);
        
        HRESULT ( STDMETHODCALLTYPE *GetItemFromOid )( 
            IPOutlookApp * This,
            /* [in] */ long oid,
            /* [retval][out] */ IDispatch **ppPOutlookItem);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeCity )( 
            IPOutlookApp * This,
            /* [retval][out] */ ICity **ppHomeCity);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeCity )( 
            IPOutlookApp * This,
            /* [in] */ ICity *pHomeCity);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VisitingCity )( 
            IPOutlookApp * This,
            /* [retval][out] */ ICity **ppHomeCity);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VisitingCity )( 
            IPOutlookApp * This,
            /* [in] */ ICity *pHomeCity);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCityIndex )( 
            IPOutlookApp * This,
            /* [retval][out] */ long *pnolCity);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentCityIndex )( 
            IPOutlookApp * This,
            /* [in] */ long olCity);
        
        HRESULT ( STDMETHODCALLTYPE *ReceiveFromInfrared )( 
            IPOutlookApp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutlookCompatible )( 
            IPOutlookApp * This,
            /* [retval][out] */ VARIANT_BOOL *pfCompat);
        
        HRESULT ( STDMETHODCALLTYPE *GetTimeZoneFromIndex )( 
            IPOutlookApp * This,
            /* [in] */ int cTimezone,
            /* [retval][out] */ ITimeZone **ppTz);
        
        HRESULT ( STDMETHODCALLTYPE *GetTimeZoneInformationFromIndex )( 
            IPOutlookApp * This,
            /* [in] */ int cTimezone,
            /* [retval][out] */ TIME_ZONE_INFORMATION *ptzInfo);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPOutlookApp * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *SysFreeString )( 
            IPOutlookApp * This,
            /* [in] */ BSTR bstr);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *VariantTimeToSystemTime )( 
            IPOutlookApp * This,
            /* [in] */ DATE date,
            /* [out] */ SYSTEMTIME *pst);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *SystemTimeToVariantTime )( 
            IPOutlookApp * This,
            /* [in] */ SYSTEMTIME *pst,
            /* [out] */ DATE *pdate);
        
        END_INTERFACE
    } IPOutlookAppVtbl;

    interface IPOutlookApp
    {
        CONST_VTBL struct IPOutlookAppVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOutlookApp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOutlookApp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOutlookApp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOutlookApp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPOutlookApp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPOutlookApp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPOutlookApp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPOutlookApp_Logon(This,hWnd)	\
    ( (This)->lpVtbl -> Logon(This,hWnd) ) 

#define IPOutlookApp_Logoff(This)	\
    ( (This)->lpVtbl -> Logoff(This) ) 

#define IPOutlookApp_get_Version(This,pbstrVersion)	\
    ( (This)->lpVtbl -> get_Version(This,pbstrVersion) ) 

#define IPOutlookApp_GetDefaultFolder(This,olFolder,ppIFolder)	\
    ( (This)->lpVtbl -> GetDefaultFolder(This,olFolder,ppIFolder) ) 

#define IPOutlookApp_CreateItem(This,olItem,ppPOutlookItem)	\
    ( (This)->lpVtbl -> CreateItem(This,olItem,ppPOutlookItem) ) 

#define IPOutlookApp_GetItemFromOid(This,oid,ppPOutlookItem)	\
    ( (This)->lpVtbl -> GetItemFromOid(This,oid,ppPOutlookItem) ) 

#define IPOutlookApp_get_HomeCity(This,ppHomeCity)	\
    ( (This)->lpVtbl -> get_HomeCity(This,ppHomeCity) ) 

#define IPOutlookApp_put_HomeCity(This,pHomeCity)	\
    ( (This)->lpVtbl -> put_HomeCity(This,pHomeCity) ) 

#define IPOutlookApp_get_VisitingCity(This,ppHomeCity)	\
    ( (This)->lpVtbl -> get_VisitingCity(This,ppHomeCity) ) 

#define IPOutlookApp_put_VisitingCity(This,pHomeCity)	\
    ( (This)->lpVtbl -> put_VisitingCity(This,pHomeCity) ) 

#define IPOutlookApp_get_CurrentCityIndex(This,pnolCity)	\
    ( (This)->lpVtbl -> get_CurrentCityIndex(This,pnolCity) ) 

#define IPOutlookApp_put_CurrentCityIndex(This,olCity)	\
    ( (This)->lpVtbl -> put_CurrentCityIndex(This,olCity) ) 

#define IPOutlookApp_ReceiveFromInfrared(This)	\
    ( (This)->lpVtbl -> ReceiveFromInfrared(This) ) 

#define IPOutlookApp_get_OutlookCompatible(This,pfCompat)	\
    ( (This)->lpVtbl -> get_OutlookCompatible(This,pfCompat) ) 

#define IPOutlookApp_GetTimeZoneFromIndex(This,cTimezone,ppTz)	\
    ( (This)->lpVtbl -> GetTimeZoneFromIndex(This,cTimezone,ppTz) ) 

#define IPOutlookApp_GetTimeZoneInformationFromIndex(This,cTimezone,ptzInfo)	\
    ( (This)->lpVtbl -> GetTimeZoneInformationFromIndex(This,cTimezone,ptzInfo) ) 

#define IPOutlookApp_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#define IPOutlookApp_SysFreeString(This,bstr)	\
    ( (This)->lpVtbl -> SysFreeString(This,bstr) ) 

#define IPOutlookApp_VariantTimeToSystemTime(This,date,pst)	\
    ( (This)->lpVtbl -> VariantTimeToSystemTime(This,date,pst) ) 

#define IPOutlookApp_SystemTimeToVariantTime(This,pst,pdate)	\
    ( (This)->lpVtbl -> SystemTimeToVariantTime(This,pst,pdate) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOutlookApp_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0029 */
/* [local] */ 

DEFINE_GUID(IID_IPOutlookApp2, 0xaf7d0dc7, 0x3d35, 0x424b, 0xaa, 0x60, 0x27, 0xa3, 0x8b, 0x8b, 0x62, 0x9e);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0029_v0_0_s_ifspec;

#ifndef __IPOutlookApp2_INTERFACE_DEFINED__
#define __IPOutlookApp2_INTERFACE_DEFINED__

/* interface IPOutlookApp2 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPOutlookApp2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("af7d0dc7-3d35-424b-aa60-27a38b8b629e")
    IPOutlookApp2 : public IPOutlookApp
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetIDsFromNames( 
            /* [in] */ ULONG cPropNames,
            /* [size_is][in] */ const LPCWSTR *rgszPropNames,
            /* [in] */ ULONG ulFlags,
            /* [size_is][retval][out] */ CEPROPID *rgPropIds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItemFromOidEx( 
            /* [in] */ ULONG oidPIM,
            /* [in] */ ULONG ulFlags,
            /* [retval][out] */ IItem **ppItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOutlookApp2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOutlookApp2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOutlookApp2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOutlookApp2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPOutlookApp2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPOutlookApp2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPOutlookApp2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPOutlookApp2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *Logon )( 
            IPOutlookApp2 * This,
            /* [in] */ long hWnd);
        
        HRESULT ( STDMETHODCALLTYPE *Logoff )( 
            IPOutlookApp2 * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            IPOutlookApp2 * This,
            /* [out][retval] */ BSTR *pbstrVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultFolder )( 
            IPOutlookApp2 * This,
            /* [in] */ int olFolder,
            /* [retval][out] */ IFolder **ppIFolder);
        
        HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            IPOutlookApp2 * This,
            /* [in] */ int olItem,
            /* [retval][out] */ IDispatch **ppPOutlookItem);
        
        HRESULT ( STDMETHODCALLTYPE *GetItemFromOid )( 
            IPOutlookApp2 * This,
            /* [in] */ long oid,
            /* [retval][out] */ IDispatch **ppPOutlookItem);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeCity )( 
            IPOutlookApp2 * This,
            /* [retval][out] */ ICity **ppHomeCity);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeCity )( 
            IPOutlookApp2 * This,
            /* [in] */ ICity *pHomeCity);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VisitingCity )( 
            IPOutlookApp2 * This,
            /* [retval][out] */ ICity **ppHomeCity);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VisitingCity )( 
            IPOutlookApp2 * This,
            /* [in] */ ICity *pHomeCity);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCityIndex )( 
            IPOutlookApp2 * This,
            /* [retval][out] */ long *pnolCity);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentCityIndex )( 
            IPOutlookApp2 * This,
            /* [in] */ long olCity);
        
        HRESULT ( STDMETHODCALLTYPE *ReceiveFromInfrared )( 
            IPOutlookApp2 * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutlookCompatible )( 
            IPOutlookApp2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfCompat);
        
        HRESULT ( STDMETHODCALLTYPE *GetTimeZoneFromIndex )( 
            IPOutlookApp2 * This,
            /* [in] */ int cTimezone,
            /* [retval][out] */ ITimeZone **ppTz);
        
        HRESULT ( STDMETHODCALLTYPE *GetTimeZoneInformationFromIndex )( 
            IPOutlookApp2 * This,
            /* [in] */ int cTimezone,
            /* [retval][out] */ TIME_ZONE_INFORMATION *ptzInfo);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPOutlookApp2 * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *SysFreeString )( 
            IPOutlookApp2 * This,
            /* [in] */ BSTR bstr);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *VariantTimeToSystemTime )( 
            IPOutlookApp2 * This,
            /* [in] */ DATE date,
            /* [out] */ SYSTEMTIME *pst);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *SystemTimeToVariantTime )( 
            IPOutlookApp2 * This,
            /* [in] */ SYSTEMTIME *pst,
            /* [out] */ DATE *pdate);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsFromNames )( 
            IPOutlookApp2 * This,
            /* [in] */ ULONG cPropNames,
            /* [size_is][in] */ const LPCWSTR *rgszPropNames,
            /* [in] */ ULONG ulFlags,
            /* [size_is][retval][out] */ CEPROPID *rgPropIds);
        
        HRESULT ( STDMETHODCALLTYPE *GetItemFromOidEx )( 
            IPOutlookApp2 * This,
            /* [in] */ ULONG oidPIM,
            /* [in] */ ULONG ulFlags,
            /* [retval][out] */ IItem **ppItem);
        
        END_INTERFACE
    } IPOutlookApp2Vtbl;

    interface IPOutlookApp2
    {
        CONST_VTBL struct IPOutlookApp2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOutlookApp2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOutlookApp2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOutlookApp2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOutlookApp2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPOutlookApp2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPOutlookApp2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPOutlookApp2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPOutlookApp2_Logon(This,hWnd)	\
    ( (This)->lpVtbl -> Logon(This,hWnd) ) 

#define IPOutlookApp2_Logoff(This)	\
    ( (This)->lpVtbl -> Logoff(This) ) 

#define IPOutlookApp2_get_Version(This,pbstrVersion)	\
    ( (This)->lpVtbl -> get_Version(This,pbstrVersion) ) 

#define IPOutlookApp2_GetDefaultFolder(This,olFolder,ppIFolder)	\
    ( (This)->lpVtbl -> GetDefaultFolder(This,olFolder,ppIFolder) ) 

#define IPOutlookApp2_CreateItem(This,olItem,ppPOutlookItem)	\
    ( (This)->lpVtbl -> CreateItem(This,olItem,ppPOutlookItem) ) 

#define IPOutlookApp2_GetItemFromOid(This,oid,ppPOutlookItem)	\
    ( (This)->lpVtbl -> GetItemFromOid(This,oid,ppPOutlookItem) ) 

#define IPOutlookApp2_get_HomeCity(This,ppHomeCity)	\
    ( (This)->lpVtbl -> get_HomeCity(This,ppHomeCity) ) 

#define IPOutlookApp2_put_HomeCity(This,pHomeCity)	\
    ( (This)->lpVtbl -> put_HomeCity(This,pHomeCity) ) 

#define IPOutlookApp2_get_VisitingCity(This,ppHomeCity)	\
    ( (This)->lpVtbl -> get_VisitingCity(This,ppHomeCity) ) 

#define IPOutlookApp2_put_VisitingCity(This,pHomeCity)	\
    ( (This)->lpVtbl -> put_VisitingCity(This,pHomeCity) ) 

#define IPOutlookApp2_get_CurrentCityIndex(This,pnolCity)	\
    ( (This)->lpVtbl -> get_CurrentCityIndex(This,pnolCity) ) 

#define IPOutlookApp2_put_CurrentCityIndex(This,olCity)	\
    ( (This)->lpVtbl -> put_CurrentCityIndex(This,olCity) ) 

#define IPOutlookApp2_ReceiveFromInfrared(This)	\
    ( (This)->lpVtbl -> ReceiveFromInfrared(This) ) 

#define IPOutlookApp2_get_OutlookCompatible(This,pfCompat)	\
    ( (This)->lpVtbl -> get_OutlookCompatible(This,pfCompat) ) 

#define IPOutlookApp2_GetTimeZoneFromIndex(This,cTimezone,ppTz)	\
    ( (This)->lpVtbl -> GetTimeZoneFromIndex(This,cTimezone,ppTz) ) 

#define IPOutlookApp2_GetTimeZoneInformationFromIndex(This,cTimezone,ptzInfo)	\
    ( (This)->lpVtbl -> GetTimeZoneInformationFromIndex(This,cTimezone,ptzInfo) ) 

#define IPOutlookApp2_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#define IPOutlookApp2_SysFreeString(This,bstr)	\
    ( (This)->lpVtbl -> SysFreeString(This,bstr) ) 

#define IPOutlookApp2_VariantTimeToSystemTime(This,date,pst)	\
    ( (This)->lpVtbl -> VariantTimeToSystemTime(This,date,pst) ) 

#define IPOutlookApp2_SystemTimeToVariantTime(This,pst,pdate)	\
    ( (This)->lpVtbl -> SystemTimeToVariantTime(This,pst,pdate) ) 


#define IPOutlookApp2_GetIDsFromNames(This,cPropNames,rgszPropNames,ulFlags,rgPropIds)	\
    ( (This)->lpVtbl -> GetIDsFromNames(This,cPropNames,rgszPropNames,ulFlags,rgPropIds) ) 

#define IPOutlookApp2_GetItemFromOidEx(This,oidPIM,ulFlags,ppItem)	\
    ( (This)->lpVtbl -> GetItemFromOidEx(This,oidPIM,ulFlags,ppItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOutlookApp2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0030 */
/* [local] */ 

DEFINE_GUID(IID_IPOutlookApp3, 0xa65ccaeb, 0x6558, 0x4656, 0xad, 0x3d, 0xec, 0xcc, 0x00, 0xd0, 0x0f, 0x0d);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0030_v0_0_s_ifspec;

#ifndef __IPOutlookApp3_INTERFACE_DEFINED__
#define __IPOutlookApp3_INTERFACE_DEFINED__

/* interface IPOutlookApp3 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPOutlookApp3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a65ccaeb-6558-4656-ad3d-eccc00d00f0d")
    IPOutlookApp3 : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Logon( 
            /* [in] */ long hWnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Logoff( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultStore( 
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultStoreId( 
            /* [out] */ OLITEMID *pStoreId) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Stores( 
            /* [retval][out] */ IPOutlookStoreCollection **ppStores) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStoreFromId( 
            /* [in] */ OLITEMID *pStoreId,
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItemFromItemId( 
            /* [in] */ OLITEMID *pItemId,
            /* [retval][out] */ IItem2 **ppItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateStore( 
            /* [in] */ BSTR bstrStoreName,
            /* [in] */ DWORD dwSupportedTypes,
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Advise( 
            /* [in] */ OlObjectType olType,
            /* [in] */ DWORD dwEventTypes,
            /* [in] */ DWORD dwEventFlags,
            /* [in] */ IChangeEventSink *pSink,
            /* [out] */ DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unadvise( 
            /* [in] */ DWORD dwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AdviseCustomEvent( 
            /* [in] */ const GUID *pGuid,
            /* [in] */ DWORD dwEventFlags,
            /* [in] */ ICustomEventSink *pSink,
            /* [out] */ DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendCustomEvent( 
            /* [in] */ const PIMCUSTOMEVENT *pEvent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetIDsFromNames( 
            /* [in] */ ULONG cPropNames,
            /* [size_is][in] */ const LPCWSTR *rgszPropNames,
            /* [in] */ ULONG ulFlags,
            /* [size_is][retval][out] */ CEPROPID *rgPropIds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FlushEvents( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOutlookApp3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOutlookApp3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOutlookApp3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOutlookApp3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPOutlookApp3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPOutlookApp3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPOutlookApp3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPOutlookApp3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *Logon )( 
            IPOutlookApp3 * This,
            /* [in] */ long hWnd);
        
        HRESULT ( STDMETHODCALLTYPE *Logoff )( 
            IPOutlookApp3 * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultStore )( 
            IPOutlookApp3 * This,
            /* [retval][out] */ IStore **ppStore);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultStoreId )( 
            IPOutlookApp3 * This,
            /* [out] */ OLITEMID *pStoreId);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Stores )( 
            IPOutlookApp3 * This,
            /* [retval][out] */ IPOutlookStoreCollection **ppStores);
        
        HRESULT ( STDMETHODCALLTYPE *GetStoreFromId )( 
            IPOutlookApp3 * This,
            /* [in] */ OLITEMID *pStoreId,
            /* [retval][out] */ IStore **ppStore);
        
        HRESULT ( STDMETHODCALLTYPE *GetItemFromItemId )( 
            IPOutlookApp3 * This,
            /* [in] */ OLITEMID *pItemId,
            /* [retval][out] */ IItem2 **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStore )( 
            IPOutlookApp3 * This,
            /* [in] */ BSTR bstrStoreName,
            /* [in] */ DWORD dwSupportedTypes,
            /* [retval][out] */ IStore **ppStore);
        
        HRESULT ( STDMETHODCALLTYPE *Advise )( 
            IPOutlookApp3 * This,
            /* [in] */ OlObjectType olType,
            /* [in] */ DWORD dwEventTypes,
            /* [in] */ DWORD dwEventFlags,
            /* [in] */ IChangeEventSink *pSink,
            /* [out] */ DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *Unadvise )( 
            IPOutlookApp3 * This,
            /* [in] */ DWORD dwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *AdviseCustomEvent )( 
            IPOutlookApp3 * This,
            /* [in] */ const GUID *pGuid,
            /* [in] */ DWORD dwEventFlags,
            /* [in] */ ICustomEventSink *pSink,
            /* [out] */ DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *SendCustomEvent )( 
            IPOutlookApp3 * This,
            /* [in] */ const PIMCUSTOMEVENT *pEvent);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsFromNames )( 
            IPOutlookApp3 * This,
            /* [in] */ ULONG cPropNames,
            /* [size_is][in] */ const LPCWSTR *rgszPropNames,
            /* [in] */ ULONG ulFlags,
            /* [size_is][retval][out] */ CEPROPID *rgPropIds);
        
        HRESULT ( STDMETHODCALLTYPE *FlushEvents )( 
            IPOutlookApp3 * This);
        
        END_INTERFACE
    } IPOutlookApp3Vtbl;

    interface IPOutlookApp3
    {
        CONST_VTBL struct IPOutlookApp3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOutlookApp3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOutlookApp3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOutlookApp3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOutlookApp3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPOutlookApp3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPOutlookApp3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPOutlookApp3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPOutlookApp3_Logon(This,hWnd)	\
    ( (This)->lpVtbl -> Logon(This,hWnd) ) 

#define IPOutlookApp3_Logoff(This)	\
    ( (This)->lpVtbl -> Logoff(This) ) 

#define IPOutlookApp3_get_DefaultStore(This,ppStore)	\
    ( (This)->lpVtbl -> get_DefaultStore(This,ppStore) ) 

#define IPOutlookApp3_get_DefaultStoreId(This,pStoreId)	\
    ( (This)->lpVtbl -> get_DefaultStoreId(This,pStoreId) ) 

#define IPOutlookApp3_get_Stores(This,ppStores)	\
    ( (This)->lpVtbl -> get_Stores(This,ppStores) ) 

#define IPOutlookApp3_GetStoreFromId(This,pStoreId,ppStore)	\
    ( (This)->lpVtbl -> GetStoreFromId(This,pStoreId,ppStore) ) 

#define IPOutlookApp3_GetItemFromItemId(This,pItemId,ppItem)	\
    ( (This)->lpVtbl -> GetItemFromItemId(This,pItemId,ppItem) ) 

#define IPOutlookApp3_CreateStore(This,bstrStoreName,dwSupportedTypes,ppStore)	\
    ( (This)->lpVtbl -> CreateStore(This,bstrStoreName,dwSupportedTypes,ppStore) ) 

#define IPOutlookApp3_Advise(This,olType,dwEventTypes,dwEventFlags,pSink,pdwCookie)	\
    ( (This)->lpVtbl -> Advise(This,olType,dwEventTypes,dwEventFlags,pSink,pdwCookie) ) 

#define IPOutlookApp3_Unadvise(This,dwCookie)	\
    ( (This)->lpVtbl -> Unadvise(This,dwCookie) ) 

#define IPOutlookApp3_AdviseCustomEvent(This,pGuid,dwEventFlags,pSink,pdwCookie)	\
    ( (This)->lpVtbl -> AdviseCustomEvent(This,pGuid,dwEventFlags,pSink,pdwCookie) ) 

#define IPOutlookApp3_SendCustomEvent(This,pEvent)	\
    ( (This)->lpVtbl -> SendCustomEvent(This,pEvent) ) 

#define IPOutlookApp3_GetIDsFromNames(This,cPropNames,rgszPropNames,ulFlags,rgPropIds)	\
    ( (This)->lpVtbl -> GetIDsFromNames(This,cPropNames,rgszPropNames,ulFlags,rgPropIds) ) 

#define IPOutlookApp3_FlushEvents(This)	\
    ( (This)->lpVtbl -> FlushEvents(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOutlookApp3_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0031 */
/* [local] */ 

DEFINE_GUID(IID_IStore, 0x1447dc2b, 0x55c3, 0x443d, 0x8c, 0x82, 0x30, 0x2e, 0x77, 0x2f, 0x58, 0x23);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0031_v0_0_s_ifspec;

#ifndef __IStore_INTERFACE_DEFINED__
#define __IStore_INTERFACE_DEFINED__

/* interface IStore */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IStore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1447DC2B-55C3-443d-8C82-302E772F5823")
    IStore : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ OLITEMID *pStoreId) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DisplayName( 
            /* [retval][out] */ BSTR *pbstrStoreName) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp3 **ppolApp) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetProps( 
            /* [size_is][in] */ const CEPROPID *rgPropID,
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][out] */ CEPROPVAL **prgVals,
            /* [out] */ ULONG *pcbBuffer,
            /* [in] */ HANDLE hHeap) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProps( 
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][in] */ CEPROPVAL *rgVals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDefaultFolder( 
            /* [in] */ OlDefaultFolders olFolder,
            /* [retval][out] */ IFolder2 **ppFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDefaultFolder( 
            /* [in] */ IFolder2 *pFolder) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Folders( 
            /* [retval][out] */ IPOutlookFolderCollection **ppFolders) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFolderFromId( 
            /* [in] */ OLITEMID *pFolderId,
            /* [retval][out] */ IFolder2 **ppFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateFolder( 
            /* [in] */ BSTR bstrFolderName,
            /* [in] */ OlItemType olItem,
            /* [retval][out] */ IFolder2 **ppFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItems( 
            /* [in] */ OlItemType olItemType,
            /* [retval][out] */ IPOutlookItemCollection2 **ppItems) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItemFromItemId( 
            /* [in] */ OLITEMID *pItemId,
            /* [retval][out] */ IItem2 **ppItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReceiveFromInfrared( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRecipientTable( 
            /* [in] */ OlItemType olItemType,
            /* [retval][out] */ IRecipientTable **ppRecipientTable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Advise( 
            /* [in] */ OlObjectType olType,
            /* [in] */ DWORD dwEventTypes,
            /* [in] */ DWORD dwEventFlags,
            /* [in] */ IChangeEventSink *pSink,
            /* [out] */ DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unadvise( 
            /* [in] */ DWORD dwCookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IStoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IStore * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IStore * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IStore * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IStore * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IStore * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IStore * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IStore * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            IStore * This,
            /* [retval][out] */ OLITEMID *pStoreId);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IStore * This,
            /* [retval][out] */ BSTR *pbstrStoreName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IStore * This,
            /* [retval][out] */ IPOutlookApp3 **ppolApp);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetProps )( 
            IStore * This,
            /* [size_is][in] */ const CEPROPID *rgPropID,
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][out] */ CEPROPVAL **prgVals,
            /* [out] */ ULONG *pcbBuffer,
            /* [in] */ HANDLE hHeap);
        
        HRESULT ( STDMETHODCALLTYPE *SetProps )( 
            IStore * This,
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][in] */ CEPROPVAL *rgVals);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultFolder )( 
            IStore * This,
            /* [in] */ OlDefaultFolders olFolder,
            /* [retval][out] */ IFolder2 **ppFolder);
        
        HRESULT ( STDMETHODCALLTYPE *SetDefaultFolder )( 
            IStore * This,
            /* [in] */ IFolder2 *pFolder);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Folders )( 
            IStore * This,
            /* [retval][out] */ IPOutlookFolderCollection **ppFolders);
        
        HRESULT ( STDMETHODCALLTYPE *GetFolderFromId )( 
            IStore * This,
            /* [in] */ OLITEMID *pFolderId,
            /* [retval][out] */ IFolder2 **ppFolder);
        
        HRESULT ( STDMETHODCALLTYPE *CreateFolder )( 
            IStore * This,
            /* [in] */ BSTR bstrFolderName,
            /* [in] */ OlItemType olItem,
            /* [retval][out] */ IFolder2 **ppFolder);
        
        HRESULT ( STDMETHODCALLTYPE *GetItems )( 
            IStore * This,
            /* [in] */ OlItemType olItemType,
            /* [retval][out] */ IPOutlookItemCollection2 **ppItems);
        
        HRESULT ( STDMETHODCALLTYPE *GetItemFromItemId )( 
            IStore * This,
            /* [in] */ OLITEMID *pItemId,
            /* [retval][out] */ IItem2 **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IStore * This);
        
        HRESULT ( STDMETHODCALLTYPE *ReceiveFromInfrared )( 
            IStore * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRecipientTable )( 
            IStore * This,
            /* [in] */ OlItemType olItemType,
            /* [retval][out] */ IRecipientTable **ppRecipientTable);
        
        HRESULT ( STDMETHODCALLTYPE *Advise )( 
            IStore * This,
            /* [in] */ OlObjectType olType,
            /* [in] */ DWORD dwEventTypes,
            /* [in] */ DWORD dwEventFlags,
            /* [in] */ IChangeEventSink *pSink,
            /* [out] */ DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *Unadvise )( 
            IStore * This,
            /* [in] */ DWORD dwCookie);
        
        END_INTERFACE
    } IStoreVtbl;

    interface IStore
    {
        CONST_VTBL struct IStoreVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IStore_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IStore_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IStore_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IStore_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IStore_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IStore_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IStore_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IStore_get_Id(This,pStoreId)	\
    ( (This)->lpVtbl -> get_Id(This,pStoreId) ) 

#define IStore_get_DisplayName(This,pbstrStoreName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,pbstrStoreName) ) 

#define IStore_get_Application(This,ppolApp)	\
    ( (This)->lpVtbl -> get_Application(This,ppolApp) ) 

#define IStore_GetProps(This,rgPropID,ulFlags,cProps,prgVals,pcbBuffer,hHeap)	\
    ( (This)->lpVtbl -> GetProps(This,rgPropID,ulFlags,cProps,prgVals,pcbBuffer,hHeap) ) 

#define IStore_SetProps(This,ulFlags,cProps,rgVals)	\
    ( (This)->lpVtbl -> SetProps(This,ulFlags,cProps,rgVals) ) 

#define IStore_GetDefaultFolder(This,olFolder,ppFolder)	\
    ( (This)->lpVtbl -> GetDefaultFolder(This,olFolder,ppFolder) ) 

#define IStore_SetDefaultFolder(This,pFolder)	\
    ( (This)->lpVtbl -> SetDefaultFolder(This,pFolder) ) 

#define IStore_get_Folders(This,ppFolders)	\
    ( (This)->lpVtbl -> get_Folders(This,ppFolders) ) 

#define IStore_GetFolderFromId(This,pFolderId,ppFolder)	\
    ( (This)->lpVtbl -> GetFolderFromId(This,pFolderId,ppFolder) ) 

#define IStore_CreateFolder(This,bstrFolderName,olItem,ppFolder)	\
    ( (This)->lpVtbl -> CreateFolder(This,bstrFolderName,olItem,ppFolder) ) 

#define IStore_GetItems(This,olItemType,ppItems)	\
    ( (This)->lpVtbl -> GetItems(This,olItemType,ppItems) ) 

#define IStore_GetItemFromItemId(This,pItemId,ppItem)	\
    ( (This)->lpVtbl -> GetItemFromItemId(This,pItemId,ppItem) ) 

#define IStore_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IStore_ReceiveFromInfrared(This)	\
    ( (This)->lpVtbl -> ReceiveFromInfrared(This) ) 

#define IStore_GetRecipientTable(This,olItemType,ppRecipientTable)	\
    ( (This)->lpVtbl -> GetRecipientTable(This,olItemType,ppRecipientTable) ) 

#define IStore_Advise(This,olType,dwEventTypes,dwEventFlags,pSink,pdwCookie)	\
    ( (This)->lpVtbl -> Advise(This,olType,dwEventTypes,dwEventFlags,pSink,pdwCookie) ) 

#define IStore_Unadvise(This,dwCookie)	\
    ( (This)->lpVtbl -> Unadvise(This,dwCookie) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IStore_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0032 */
/* [local] */ 

DEFINE_GUID(IID_IItem, 0xfb8998d0, 0x38f0, 0x4d12, 0xac, 0x56, 0x4e, 0xc8, 0xfc, 0xe9, 0xf3, 0xd5);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0032_v0_0_s_ifspec;

#ifndef __IItem_INTERFACE_DEFINED__
#define __IItem_INTERFACE_DEFINED__

/* interface IItem */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fb8998d0-38f0-4d12-ac56-4ec8fce9f3d5")
    IItem : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetProps( 
            /* [size_is][in] */ const CEPROPID *rgPropID,
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][out] */ CEPROPVAL **prgVals,
            /* [out] */ ULONG *pcbBuffer,
            /* [in] */ HANDLE hHeap) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProps( 
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][in] */ CEPROPVAL *rgVals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Display( 
            /* [in] */ HWND hwndParent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Edit( 
            /* [in] */ HWND hwndParent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ IItem **ppolCopy) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Oid( 
            /* [retval][out] */ long *poid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpenProperty( 
            /* [in] */ CEPROPID propID,
            /* [in] */ DWORD dwMode,
            /* [retval][out] */ IStream **ppStream) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultItemType( 
            /* [retval][out] */ int *polItem) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp **polApp) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IFolder **ppIFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddCategory( 
            /* [in] */ LPCWSTR pszwCategory) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveCategory( 
            /* [in] */ LPCWSTR pszwCategory) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IItem * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetProps )( 
            IItem * This,
            /* [size_is][in] */ const CEPROPID *rgPropID,
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][out] */ CEPROPVAL **prgVals,
            /* [out] */ ULONG *pcbBuffer,
            /* [in] */ HANDLE hHeap);
        
        HRESULT ( STDMETHODCALLTYPE *SetProps )( 
            IItem * This,
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][in] */ CEPROPVAL *rgVals);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            IItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *Display )( 
            IItem * This,
            /* [in] */ HWND hwndParent);
        
        HRESULT ( STDMETHODCALLTYPE *Edit )( 
            IItem * This,
            /* [in] */ HWND hwndParent);
        
        HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IItem * This,
            /* [retval][out] */ IItem **ppolCopy);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Oid )( 
            IItem * This,
            /* [retval][out] */ long *poid);
        
        HRESULT ( STDMETHODCALLTYPE *OpenProperty )( 
            IItem * This,
            /* [in] */ CEPROPID propID,
            /* [in] */ DWORD dwMode,
            /* [retval][out] */ IStream **ppStream);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultItemType )( 
            IItem * This,
            /* [retval][out] */ int *polItem);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IItem * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IItem * This,
            /* [retval][out] */ IFolder **ppIFolder);
        
        HRESULT ( STDMETHODCALLTYPE *AddCategory )( 
            IItem * This,
            /* [in] */ LPCWSTR pszwCategory);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveCategory )( 
            IItem * This,
            /* [in] */ LPCWSTR pszwCategory);
        
        END_INTERFACE
    } IItemVtbl;

    interface IItem
    {
        CONST_VTBL struct IItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IItem_GetProps(This,rgPropID,ulFlags,cProps,prgVals,pcbBuffer,hHeap)	\
    ( (This)->lpVtbl -> GetProps(This,rgPropID,ulFlags,cProps,prgVals,pcbBuffer,hHeap) ) 

#define IItem_SetProps(This,ulFlags,cProps,rgVals)	\
    ( (This)->lpVtbl -> SetProps(This,ulFlags,cProps,rgVals) ) 

#define IItem_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define IItem_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IItem_Display(This,hwndParent)	\
    ( (This)->lpVtbl -> Display(This,hwndParent) ) 

#define IItem_Edit(This,hwndParent)	\
    ( (This)->lpVtbl -> Edit(This,hwndParent) ) 

#define IItem_Copy(This,ppolCopy)	\
    ( (This)->lpVtbl -> Copy(This,ppolCopy) ) 

#define IItem_get_Oid(This,poid)	\
    ( (This)->lpVtbl -> get_Oid(This,poid) ) 

#define IItem_OpenProperty(This,propID,dwMode,ppStream)	\
    ( (This)->lpVtbl -> OpenProperty(This,propID,dwMode,ppStream) ) 

#define IItem_get_DefaultItemType(This,polItem)	\
    ( (This)->lpVtbl -> get_DefaultItemType(This,polItem) ) 

#define IItem_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 

#define IItem_get_Parent(This,ppIFolder)	\
    ( (This)->lpVtbl -> get_Parent(This,ppIFolder) ) 

#define IItem_AddCategory(This,pszwCategory)	\
    ( (This)->lpVtbl -> AddCategory(This,pszwCategory) ) 

#define IItem_RemoveCategory(This,pszwCategory)	\
    ( (This)->lpVtbl -> RemoveCategory(This,pszwCategory) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IItem_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0033 */
/* [local] */ 

DEFINE_GUID(IID_IItem2, 0x7268d1d3, 0xd871, 0x4b70, 0xb1, 0xc0, 0x79, 0xae, 0xfc, 0x11, 0xc9, 0xdf);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0033_v0_0_s_ifspec;

#ifndef __IItem2_INTERFACE_DEFINED__
#define __IItem2_INTERFACE_DEFINED__

/* interface IItem2 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IItem2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7268d1d3-d871-4b70-b1c0-79aefc11c9df")
    IItem2 : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ OLITEMID *pOlItemId) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetProps( 
            /* [size_is][in] */ const CEPROPID *rgPropID,
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][out] */ CEPROPVAL **prgVals,
            /* [out] */ ULONG *pcbBuffer,
            /* [in] */ HANDLE hHeap) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProps( 
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][in] */ CEPROPVAL *rgVals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Display( 
            /* [in] */ HWND hwndParent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Edit( 
            /* [in] */ HWND hwndParent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Copy( 
            /* [retval][out] */ IItem2 **ppCopy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpenProperty( 
            /* [in] */ CEPROPID propID,
            /* [in] */ DWORD dwMode,
            /* [retval][out] */ IStream **ppStream) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ItemType( 
            /* [retval][out] */ OlItemType *polItem) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IPOutlookApp3 **ppolApp) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IFolder2 **ppFolder) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Store( 
            /* [retval][out] */ IStore **ppStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddCategory( 
            /* [in] */ LPCWSTR pszwCategory) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveCategory( 
            /* [in] */ LPCWSTR pszwCategory) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveToFolder( 
            /* [in] */ IFolder2 *pFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CopyToFolder( 
            /* [in] */ IFolder2 *pFolder,
            /* [out] */ IItem2 **ppItemCopy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IItem2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IItem2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IItem2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IItem2 * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            IItem2 * This,
            /* [retval][out] */ OLITEMID *pOlItemId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetProps )( 
            IItem2 * This,
            /* [size_is][in] */ const CEPROPID *rgPropID,
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][out] */ CEPROPVAL **prgVals,
            /* [out] */ ULONG *pcbBuffer,
            /* [in] */ HANDLE hHeap);
        
        HRESULT ( STDMETHODCALLTYPE *SetProps )( 
            IItem2 * This,
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][in] */ CEPROPVAL *rgVals);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            IItem2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IItem2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Display )( 
            IItem2 * This,
            /* [in] */ HWND hwndParent);
        
        HRESULT ( STDMETHODCALLTYPE *Edit )( 
            IItem2 * This,
            /* [in] */ HWND hwndParent);
        
        HRESULT ( STDMETHODCALLTYPE *Copy )( 
            IItem2 * This,
            /* [retval][out] */ IItem2 **ppCopy);
        
        HRESULT ( STDMETHODCALLTYPE *OpenProperty )( 
            IItem2 * This,
            /* [in] */ CEPROPID propID,
            /* [in] */ DWORD dwMode,
            /* [retval][out] */ IStream **ppStream);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ItemType )( 
            IItem2 * This,
            /* [retval][out] */ OlItemType *polItem);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IItem2 * This,
            /* [retval][out] */ IPOutlookApp3 **ppolApp);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IItem2 * This,
            /* [retval][out] */ IFolder2 **ppFolder);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Store )( 
            IItem2 * This,
            /* [retval][out] */ IStore **ppStore);
        
        HRESULT ( STDMETHODCALLTYPE *AddCategory )( 
            IItem2 * This,
            /* [in] */ LPCWSTR pszwCategory);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveCategory )( 
            IItem2 * This,
            /* [in] */ LPCWSTR pszwCategory);
        
        HRESULT ( STDMETHODCALLTYPE *MoveToFolder )( 
            IItem2 * This,
            /* [in] */ IFolder2 *pFolder);
        
        HRESULT ( STDMETHODCALLTYPE *CopyToFolder )( 
            IItem2 * This,
            /* [in] */ IFolder2 *pFolder,
            /* [out] */ IItem2 **ppItemCopy);
        
        END_INTERFACE
    } IItem2Vtbl;

    interface IItem2
    {
        CONST_VTBL struct IItem2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IItem2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IItem2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IItem2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IItem2_get_Id(This,pOlItemId)	\
    ( (This)->lpVtbl -> get_Id(This,pOlItemId) ) 

#define IItem2_GetProps(This,rgPropID,ulFlags,cProps,prgVals,pcbBuffer,hHeap)	\
    ( (This)->lpVtbl -> GetProps(This,rgPropID,ulFlags,cProps,prgVals,pcbBuffer,hHeap) ) 

#define IItem2_SetProps(This,ulFlags,cProps,rgVals)	\
    ( (This)->lpVtbl -> SetProps(This,ulFlags,cProps,rgVals) ) 

#define IItem2_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define IItem2_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IItem2_Display(This,hwndParent)	\
    ( (This)->lpVtbl -> Display(This,hwndParent) ) 

#define IItem2_Edit(This,hwndParent)	\
    ( (This)->lpVtbl -> Edit(This,hwndParent) ) 

#define IItem2_Copy(This,ppCopy)	\
    ( (This)->lpVtbl -> Copy(This,ppCopy) ) 

#define IItem2_OpenProperty(This,propID,dwMode,ppStream)	\
    ( (This)->lpVtbl -> OpenProperty(This,propID,dwMode,ppStream) ) 

#define IItem2_get_ItemType(This,polItem)	\
    ( (This)->lpVtbl -> get_ItemType(This,polItem) ) 

#define IItem2_get_Application(This,ppolApp)	\
    ( (This)->lpVtbl -> get_Application(This,ppolApp) ) 

#define IItem2_get_Parent(This,ppFolder)	\
    ( (This)->lpVtbl -> get_Parent(This,ppFolder) ) 

#define IItem2_get_Store(This,ppStore)	\
    ( (This)->lpVtbl -> get_Store(This,ppStore) ) 

#define IItem2_AddCategory(This,pszwCategory)	\
    ( (This)->lpVtbl -> AddCategory(This,pszwCategory) ) 

#define IItem2_RemoveCategory(This,pszwCategory)	\
    ( (This)->lpVtbl -> RemoveCategory(This,pszwCategory) ) 

#define IItem2_MoveToFolder(This,pFolder)	\
    ( (This)->lpVtbl -> MoveToFolder(This,pFolder) ) 

#define IItem2_CopyToFolder(This,pFolder,ppItemCopy)	\
    ( (This)->lpVtbl -> CopyToFolder(This,pFolder,ppItemCopy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IItem2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0034 */
/* [local] */ 

DEFINE_GUID(IID_IRecipient3, 0xd4e60ec9, 0xe61a, 0x48a5, 0xad, 0xec, 0x55, 0x4a, 0xbf, 0xc, 0x82, 0x27);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0034_v0_0_s_ifspec;

#ifndef __IRecipient3_INTERFACE_DEFINED__
#define __IRecipient3_INTERFACE_DEFINED__

/* interface IRecipient3 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRecipient3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D4E60EC9-E61A-48a5-ADEC-554ABF0C8227")
    IRecipient3 : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Address( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Address( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Alias( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ OlRecipientType *polType) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ OlRecipientType olType) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ OlRecipientStatus *polStatus) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Status( 
            /* [in] */ OlRecipientStatus olStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItem( 
            /* [retval][out] */ IItem2 **ppItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRecipient3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRecipient3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRecipient3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRecipient3 * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Address )( 
            IRecipient3 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Address )( 
            IRecipient3 * This,
            /* [in] */ BSTR bstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IRecipient3 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Alias )( 
            IRecipient3 * This,
            /* [retval][out] */ BSTR *pbstr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IRecipient3 * This,
            /* [retval][out] */ OlRecipientType *polType);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            IRecipient3 * This,
            /* [in] */ OlRecipientType olType);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IRecipient3 * This,
            /* [retval][out] */ OlRecipientStatus *polStatus);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Status )( 
            IRecipient3 * This,
            /* [in] */ OlRecipientStatus olStatus);
        
        HRESULT ( STDMETHODCALLTYPE *GetItem )( 
            IRecipient3 * This,
            /* [retval][out] */ IItem2 **ppItem);
        
        END_INTERFACE
    } IRecipient3Vtbl;

    interface IRecipient3
    {
        CONST_VTBL struct IRecipient3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRecipient3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRecipient3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRecipient3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRecipient3_get_Address(This,pbstr)	\
    ( (This)->lpVtbl -> get_Address(This,pbstr) ) 

#define IRecipient3_put_Address(This,bstr)	\
    ( (This)->lpVtbl -> put_Address(This,bstr) ) 

#define IRecipient3_get_Name(This,pbstr)	\
    ( (This)->lpVtbl -> get_Name(This,pbstr) ) 

#define IRecipient3_get_Alias(This,pbstr)	\
    ( (This)->lpVtbl -> get_Alias(This,pbstr) ) 

#define IRecipient3_get_Type(This,polType)	\
    ( (This)->lpVtbl -> get_Type(This,polType) ) 

#define IRecipient3_put_Type(This,olType)	\
    ( (This)->lpVtbl -> put_Type(This,olType) ) 

#define IRecipient3_get_Status(This,polStatus)	\
    ( (This)->lpVtbl -> get_Status(This,polStatus) ) 

#define IRecipient3_put_Status(This,olStatus)	\
    ( (This)->lpVtbl -> put_Status(This,olStatus) ) 

#define IRecipient3_GetItem(This,ppItem)	\
    ( (This)->lpVtbl -> GetItem(This,ppItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRecipient3_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0035 */
/* [local] */ 

DEFINE_GUID(IID_IIRecipientTable, 0x49048079, 0x6fe1, 0x4cbc, 0xac, 0x12, 0x90, 0x3e, 0x18, 0xcd, 0xbe, 0x73);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0035_v0_0_s_ifspec;

#ifndef __IRecipientTable_INTERFACE_DEFINED__
#define __IRecipientTable_INTERFACE_DEFINED__

/* interface IRecipientTable */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRecipientTable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("49048079-6FE1-4cbc-AC12-903E18CDBE73")
    IRecipientTable : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *pnCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Restrict( 
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IRecipientTable **ppRestrictedRecipientTable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sort( 
            /* [in] */ DWORD cSorts,
            /* [in] */ BSTR *rgbstrProperty,
            /* [in] */ VARIANT_BOOL *rgfDescending) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEntry( 
            /* [in] */ DWORD index,
            /* [retval][out] */ IRecipient3 **ppEntry) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRecipientTableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRecipientTable * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRecipientTable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRecipientTable * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IRecipientTable * This,
            /* [retval][out] */ int *pnCount);
        
        HRESULT ( STDMETHODCALLTYPE *Restrict )( 
            IRecipientTable * This,
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IRecipientTable **ppRestrictedRecipientTable);
        
        HRESULT ( STDMETHODCALLTYPE *Sort )( 
            IRecipientTable * This,
            /* [in] */ DWORD cSorts,
            /* [in] */ BSTR *rgbstrProperty,
            /* [in] */ VARIANT_BOOL *rgfDescending);
        
        HRESULT ( STDMETHODCALLTYPE *GetEntry )( 
            IRecipientTable * This,
            /* [in] */ DWORD index,
            /* [retval][out] */ IRecipient3 **ppEntry);
        
        END_INTERFACE
    } IRecipientTableVtbl;

    interface IRecipientTable
    {
        CONST_VTBL struct IRecipientTableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRecipientTable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRecipientTable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRecipientTable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRecipientTable_get_Count(This,pnCount)	\
    ( (This)->lpVtbl -> get_Count(This,pnCount) ) 

#define IRecipientTable_Restrict(This,bstrRestriction,ppRestrictedRecipientTable)	\
    ( (This)->lpVtbl -> Restrict(This,bstrRestriction,ppRestrictedRecipientTable) ) 

#define IRecipientTable_Sort(This,cSorts,rgbstrProperty,rgfDescending)	\
    ( (This)->lpVtbl -> Sort(This,cSorts,rgbstrProperty,rgfDescending) ) 

#define IRecipientTable_GetEntry(This,index,ppEntry)	\
    ( (This)->lpVtbl -> GetEntry(This,index,ppEntry) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRecipientTable_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0036 */
/* [local] */ 

DEFINE_GUID(IID_IPOlItems2, 0xCB52F880, 0x4CB0, 0x4a23, 0xAA, 0x09, 0x82, 0x32, 0x6C, 0x98, 0x92, 0x9F);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0036_v0_0_s_ifspec;

#ifndef __IPOlItems2_INTERFACE_DEFINED__
#define __IPOlItems2_INTERFACE_DEFINED__

/* interface IPOlItems2 */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPOlItems2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CB52F880-4CB0-4a23-AA09-82326C98929F")
    IPOlItems2 : public IPOlItems
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetProps( 
            /* [in] */ int iIndex,
            /* [size_is][in] */ const CEPROPID *rgPropID,
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][out] */ CEPROPVAL **prgVals,
            /* [out] */ ULONG *pcbBuffer,
            /* [in] */ HANDLE hHeap) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOlItems2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOlItems2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOlItems2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOlItems2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPOlItems2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPOlItems2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPOlItems2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPOlItems2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IPOlItems2 * This,
            /* [retval][out] */ IDispatch **ppolItem);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IPOlItems2 * This,
            /* [retval][out] */ int *pnCount);
        
        HRESULT ( STDMETHODCALLTYPE *Find )( 
            IPOlItems2 * This,
            /* [in] */ BSTR bstrRestriction,
            /* [retval][out] */ IDispatch **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *FindNext )( 
            IPOlItems2 * This,
            /* [retval][out] */ IDispatch **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *Item )( 
            IPOlItems2 * This,
            /* [in] */ int index,
            /* [retval][out] */ IDispatch **polItem);
        
        HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IPOlItems2 * This,
            /* [in] */ int iIndex);
        
        HRESULT ( STDMETHODCALLTYPE *Restrict )( 
            IPOlItems2 * This,
            /* [in] */ BSTR pwszRestriction,
            /* [retval][out] */ IPOutlookItemCollection **ppolItems);
        
        HRESULT ( STDMETHODCALLTYPE *Sort )( 
            IPOlItems2 * This,
            /* [in] */ BSTR pwszProperty,
            /* [in] */ VARIANT_BOOL fDescending);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeRecurrences )( 
            IPOlItems2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfIncludeRecurrences);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeRecurrences )( 
            IPOlItems2 * This,
            /* [in] */ VARIANT_BOOL fIncludeRecurrences);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IPOlItems2 * This,
            /* [retval][out] */ IUnknown **ppEnumerator);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IPOlItems2 * This,
            /* [retval][out] */ IPOutlookApp **polApp);
        
        HRESULT ( STDMETHODCALLTYPE *SetColumns )( 
            IPOlItems2 * This,
            /* [in] */ BSTR bstrColumns);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetProps )( 
            IPOlItems2 * This,
            /* [in] */ int iIndex,
            /* [size_is][in] */ const CEPROPID *rgPropID,
            /* [in] */ ULONG ulFlags,
            /* [in] */ WORD cProps,
            /* [size_is][out] */ CEPROPVAL **prgVals,
            /* [out] */ ULONG *pcbBuffer,
            /* [in] */ HANDLE hHeap);
        
        END_INTERFACE
    } IPOlItems2Vtbl;

    interface IPOlItems2
    {
        CONST_VTBL struct IPOlItems2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOlItems2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOlItems2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOlItems2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOlItems2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPOlItems2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPOlItems2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPOlItems2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPOlItems2_Add(This,ppolItem)	\
    ( (This)->lpVtbl -> Add(This,ppolItem) ) 

#define IPOlItems2_get_Count(This,pnCount)	\
    ( (This)->lpVtbl -> get_Count(This,pnCount) ) 

#define IPOlItems2_Find(This,bstrRestriction,ppItem)	\
    ( (This)->lpVtbl -> Find(This,bstrRestriction,ppItem) ) 

#define IPOlItems2_FindNext(This,ppItem)	\
    ( (This)->lpVtbl -> FindNext(This,ppItem) ) 

#define IPOlItems2_Item(This,index,polItem)	\
    ( (This)->lpVtbl -> Item(This,index,polItem) ) 

#define IPOlItems2_Remove(This,iIndex)	\
    ( (This)->lpVtbl -> Remove(This,iIndex) ) 

#define IPOlItems2_Restrict(This,pwszRestriction,ppolItems)	\
    ( (This)->lpVtbl -> Restrict(This,pwszRestriction,ppolItems) ) 

#define IPOlItems2_Sort(This,pwszProperty,fDescending)	\
    ( (This)->lpVtbl -> Sort(This,pwszProperty,fDescending) ) 

#define IPOlItems2_get_IncludeRecurrences(This,pfIncludeRecurrences)	\
    ( (This)->lpVtbl -> get_IncludeRecurrences(This,pfIncludeRecurrences) ) 

#define IPOlItems2_put_IncludeRecurrences(This,fIncludeRecurrences)	\
    ( (This)->lpVtbl -> put_IncludeRecurrences(This,fIncludeRecurrences) ) 

#define IPOlItems2_get__NewEnum(This,ppEnumerator)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumerator) ) 

#define IPOlItems2_get_Application(This,polApp)	\
    ( (This)->lpVtbl -> get_Application(This,polApp) ) 


#define IPOlItems2_SetColumns(This,bstrColumns)	\
    ( (This)->lpVtbl -> SetColumns(This,bstrColumns) ) 


#define IPOlItems2_GetProps(This,iIndex,rgPropID,ulFlags,cProps,prgVals,pcbBuffer,hHeap)	\
    ( (This)->lpVtbl -> GetProps(This,iIndex,rgPropID,ulFlags,cProps,prgVals,pcbBuffer,hHeap) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOlItems2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0037 */
/* [local] */ 

#define CAL_MAXDATE     ((DATE) 401768)     // 12/31/2999
#define CAL_MINDATE     ((DATE) 0)          // 12/30/1899
#define DATE_NONE       ((DATE) 949998)     // 1/1/4501
#define E_CLOCKRUNNING          MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 100)
#define E_CITYINROM             MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 101)
#define E_FIELDTOOLARGE         MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 102)
#define E_INVALIDREMINDERTIME   MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 103)
#define E_INVALIDDATES          MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 104)
#define E_ALLDAYMEETING         MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 105)
#define E_OVERLAPPINGEXCEPTION  MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 106)
#define E_CANTCHANGEDATE        MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 107)
#define E_EXCEPTIONSAMEDAY      MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 108)
#define E_UNWANTEDITEM          MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 109)
#define S_AUTO_CLOSED           MAKE_HRESULT(SEVERITY_SUCCESS, FACILITY_ITF, 150)
DEFINE_GUID(ITI_ContactItemRef, 0x18103fdf, 0xcaec, 0x42eb, 0x90, 0xe7, 0x1c, 0x76, 0xd6, 0xe6, 0xd, 0x24);
DEFINE_GUID(ITI_ContactItemRef2, 0x18103fdf, 0xcaec, 0x42eb, 0x90, 0xe7, 0x1c, 0x76, 0xd6, 0xe6, 0xd, 0x23);
#define ITI_PimItemRef  ITI_ContactItemRef  // back-compat w/ old clients
#define ITI_PimItemRef2  ITI_ContactItemRef2  // back-compat w/ old clients
DEFINE_GUID(CLSID_Exception, 0xb47398d2, 0x3b73, 0x11d2, 0x8f, 0x1b, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
DEFINE_GUID(CLSID_Exceptions, 0xb47398d3, 0x3b73, 0x11d2, 0x8f, 0x1b, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
DEFINE_GUID(CLSID_TimeZone, 0x78b27291, 0x5256, 0x11d2, 0x8f, 0x1b, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
DEFINE_GUID(CLSID_RecurrencePattern, 0x38f47301, 0x270f, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
DEFINE_GUID(CLSID_Recipient, 0x7e136be1, 0x5240, 0x11d2, 0x8f, 0x1b, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
DEFINE_GUID(CLSID_Recipients, 0x76065ae1, 0x2347, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
DEFINE_GUID(CLSID_Items, 0xf06748c1, 0x21a5, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
DEFINE_GUID(CLSID_ContactItem, 0x430539d0, 0x2017, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
DEFINE_GUID(CLSID_TaskItem, 0x5b43f690, 0x202c, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
DEFINE_GUID(CLSID_AppointmentItem, 0x5b43f692, 0x202c, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
DEFINE_GUID(CLSID_CityItem, 0xc83c5e91, 0x3d1b, 0x11d2, 0x8f, 0x1b, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
DEFINE_GUID(CLSID_Folder, 0x5058f21, 0x20be, 0x11d2, 0x8f, 0x18, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
DEFINE_GUID(CLSID_Application, 0x05058F23, 0x20BE, 0x11d2, 0x8F, 0x18, 0x00, 0x00, 0xF8, 0x7A, 0x43, 0x35);
DEFINE_GUID(LIBID_PocketOutlook, 0x4e130e40, 0x7dbe, 0x11d2, 0x8f, 0x23, 0x0, 0x0, 0xf8, 0x7a, 0x43, 0x35);
typedef /* [v1_enum] */ 
enum MEPIVOTTYPE
    {	MEPIVOTTYPE_INVALID	= 0,
	MEPIVOTTYPE_CONTACTMAIN_ALL	= 0x100,
	MEPIVOTTYPE_CONTACTMAIN_STORE	= 0x101,
	MEPIVOTTYPE_CONTACTMAIN_SIM	= 0x102,
	MEPIVOTTYPE_CONTACTSUMMARY_GENERALINFO	= 0x200,
	MEPIVOTTYPE_CONTACTSUMMARY_COMMUNICATION	= 0x201,
	MEPIVOTTYPE_CONTACTSUMMARY_CALLHISTORY	= 0x202,
	MEPIVOTTYPE_CONTACTSUMMARY_NOTES	= 0x203,
	MEPIVOTTYPE_CONTACTSUMMARY_RELATEDAPPOINTMENTS	= 0x204,
	MEPIVOTTYPE_CONTACTSUMMARY_RELATEDMESSAGES	= 0x205,
	MEPIVOTTYPE_CONTACTSUMMARY_CUSTOM	= 0x206,
	MEPIVOTTYPE_CALENDARSUMMARY_GENERALINFO	= 0x300,
	MEPIVOTTYPE_CALENDARSUMMARY_ATTENDEES	= 0x301
    } 	MEPIVOTTYPE;

typedef struct PIMMENUCONTEXTINFO
    {
    DWORD cbSize;
    OLITEMID storeId;
    OLITEMID itemId;
    CEPROPID propId;
    MEPIVOTTYPE pivotType;
    } 	PIMMENUCONTEXTINFO;

typedef /* [v1_enum] */ 
enum CCF
    {	CCF_DEFAULT	= 0,
	CCF_HIDENEW	= 0x1,
	CCF_CHOOSECONTACTONLY	= 0x2,
	CCF_CHOOSEPROPERTYONLY	= 0x4,
	CCF_RETURNCONTACTNAME	= 0x8,
	CCF_RETURNPROPERTYVALUE	= 0x10,
	CCF_FILTERREQUIREDPROPERTIES	= 0x20,
	CCF_NOUIONSINGLEORNOMATCH	= 0x40,
	CCF_NOUI	= 0x80,
	CCF_ENABLEGAL	= 0x100,
	CCF_ALLOWNEWCONTACTSELECTION	= 0x200
    } 	CCF;

typedef /* [public] */ struct __MIDL___MIDL_itf_pimstore_0000_0037_0001
    {
    UINT cbSize;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCWSTR lpstrTitle;
    LPCWSTR lpstrChoosePropertyText;
    LPCWSTR lpstrRestrictContacts;
    LPCWSTR lpstrIncrementalFilter;
    UINT cRequiredProperties;
    const CEPROPID *rgpropidRequiredProperties;
    CEOID oidContactID;
    BSTR bstrContactName;
    CEPROPID propidSelected;
    BSTR bstrPropertyValueSelected;
    } 	CHOOSECONTACT;

typedef struct __MIDL___MIDL_itf_pimstore_0000_0037_0001 *LPCHOOSECONTACT;

typedef /* [public] */ struct __MIDL___MIDL_itf_pimstore_0000_0037_0002
    {
    UINT cbSize;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCWSTR lpstrTitle;
    LPCWSTR lpstrChoosePropertyText;
    LPCWSTR lpstrRestrictContacts;
    LPCWSTR lpstrIncrementalFilter;
    UINT cRequiredProperties;
    const CEPROPID *rgpropidRequiredProperties;
    OLITEMID olItemId;
    BSTR bstrContactName;
    CEPROPID propidSelected;
    BSTR bstrPropertyValueSelected;
    } 	CHOOSECONTACTEX;

typedef struct __MIDL___MIDL_itf_pimstore_0000_0037_0002 *LPCHOOSECONTACTEX;



extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0037_v0_0_s_ifspec;

#ifndef __IPimAPIs_INTERFACE_DEFINED__
#define __IPimAPIs_INTERFACE_DEFINED__

/* interface IPimAPIs */
/* [local][uuid] */ 

HRESULT __stdcall ChooseContact( 
    /* [in] */ LPCHOOSECONTACT lpcc);

HRESULT __stdcall ChooseContactEx( 
    /* [in] */ LPCHOOSECONTACTEX lpccex);

HRESULT __stdcall FindMatchingContact( 
    /* [in] */ IPOutlookApp *pPOOM,
    /* [in] */ LPCWSTR pszFind,
    /* [in] */ DWORD dwFlags,
    /* [out] */ IItem **ppContact,
    /* [out] */ CEPROPID *ppropid);

HRESULT __stdcall FindMatchingContactEx( 
    /* [in] */ IPOutlookApp3 *pPOOM,
    /* [in] */ LPCWSTR pszFind,
    /* [in] */ DWORD dwFlags,
    /* [in] */ IStore *pStore,
    /* [out] */ IItem2 **ppContact,
    /* [out] */ CEPROPID *ppropid);

HRESULT __stdcall GetItemIndexFromOid( 
    /* [in] */ IPOutlookItemCollection *pItems,
    /* [in] */ CEOID oidPIM,
    /* [out] */ DWORD *pdwIndex);

HRESULT __stdcall OLITEMIDToString( 
    /* [in] */ OLITEMID *pItemId,
    /* [out] */ BSTR *pbstrItemId);

HRESULT __stdcall StringToOLITEMID( 
    /* [in] */ BSTR bstrItemId,
    /* [out] */ OLITEMID *pItemId);

HRESULT __stdcall OlItemTypeFromOLITEMID( 
    /* [in] */ OLITEMID *pItemId,
    /* [out] */ OlItemType *polItemType);



extern RPC_IF_HANDLE IPimAPIs_v0_0_c_ifspec;
extern RPC_IF_HANDLE IPimAPIs_v0_0_s_ifspec;
#endif /* __IPimAPIs_INTERFACE_DEFINED__ */

/* interface __MIDL_itf_pimstore_0000_0038 */
/* [local] */ 

#define FMCF_FINDPHONE      0x00000001
#define FMCF_FINDEMAIL      0x00000002
#define FMCF_FINDFILEAS     0x00000004
#define PIM_PROP_TAG(ulPropType,ulPropID)   ((((ULONG)(ulPropID))<<16)|((ULONG)(ulPropType)))
typedef /* [v1_enum] */ 
enum CEVT_PIM
    {	CEVT_PIM_STREAM	= 100,
	CEVT_PIM_AUTO_I4	= 102
    } 	CEVT_PIM;

typedef /* [v1_enum] */ 
enum PIM_GETIDSFROMNAMES
    {	PIM_CREATE	= 0x10000,
	PIM_INDEXED	= 0x200000,
	PIM_DONTREPLICATE	= 0x400000
    } 	PIM_GETIDSFROMNAMES;

#define	PIMPR_INVALID_ID	( ( 0xffff0000 | CEVT_I2 )  )

#define	PIMPR_ALL_PHONE	( ( 0x18000000 | CEVT_LPWSTR )  )

#define	PIMPR_ALL_EMAIL	( ( 0x18010000 | CEVT_LPWSTR )  )

#define	PIMPR_ALL_TEXT_MESSAGING	( ( 0x18020000 | CEVT_LPWSTR )  )

#define	PIMPR_ALL_INSTANT_MESSAGING	( ( 0x18030000 | CEVT_LPWSTR )  )

#define	PIMPR_ALL_COMMUNICATION_METHODS	( ( 0x18040000 | CEVT_LPWSTR )  )

#define	PIMPR_ALL_VOICE	( ( 0x18050000 | CEVT_LPWSTR )  )

#define	PIMPR_ALL_PHONE_AND_SIM	( ( 0x18060000 | CEVT_LPWSTR )  )

#define	PIMPR_OID	( ( 0x10000000 | CEVT_PIM_AUTO_I4 )  )

#define	PIMPR_FOLDERNOTIFICATIONS	( ( 0x10010000 | CEVT_UI4 )  )

#define	PIMPR_ITEMID	( ( 0x10020000 | CEVT_BLOB )  )

#define	PIMPR_FOLDER_CATEGORIES	( ( 0x101a0000 | CEVT_LPWSTR )  )

#define	PIMPR_SOURCE_ID	( ( 0x1b0000 | CEVT_UI4 )  )

#define	PIMPR_RECENT	( ( 0x101c0000 | CEVT_BOOL )  )

#define	PIMPR_CATEGORIES	( ( 0x101d0000 | CEVT_LPWSTR )  )

#define	PIMPR_BODY_BINARY	( ( 0x1e0000 | CEVT_PIM_STREAM )  )

#define	PIMPR_BODY_TEXT	( ( 0x101f0000 | CEVT_LPWSTR )  )

#define	PIMPR_DO_NOT_SYNC	( ( 0x10100000 | CEVT_UI4 )  )

#define	PIMPR_SUBJECT	( ( 0x200000 | CEVT_LPWSTR )  )

#define	PIMPR_SENSITIVITY	( ( 0x210000 | CEVT_UI4 )  )

#define	PIMPR_IS_RECURRING	( ( 0x220000 | CEVT_BOOL )  )

#define	PIMPR_REMINDER_SET	( ( 0x280000 | CEVT_BOOL )  )

#define	PIMPR_REMINDER_SOUND_FILE	( ( 0x290000 | CEVT_LPWSTR )  )

#define	PIMPR_REMINDER_OPTIONS	( ( 0x2a0000 | CEVT_UI4 )  )

#define	PIMPR_RECURRING_TYPE	( ( 0x10300000 | CEVT_UI4 )  )

#define	PIMPR_RECURRING_PATTERNSTARTDATE	( ( 0x10310000 | CEVT_FILETIME )  )

#define	PIMPR_RECURRING_PATTERNENDDATE	( ( 0x10320000 | CEVT_FILETIME )  )

#define	PIMPR_RECURRING_STARTTIME	( ( 0x10330000 | CEVT_FILETIME )  )

#define	PIMPR_RECURRING_ENDTIME	( ( 0x10340000 | CEVT_FILETIME )  )

#define	PIMPR_RECURRING_NOEND	( ( 0x10350000 | CEVT_BOOL )  )

#define	PIMPR_RECURRING_OCCURRENCES	( ( 0x10360000 | CEVT_UI4 )  )

#define	PIMPR_RECURRING_INTERVAL	( ( 0x10370000 | CEVT_UI4 )  )

#define	PIMPR_RECURRING_DAYOFWEEKMASK	( ( 0x10380000 | CEVT_UI4 )  )

#define	PIMPR_RECURRING_DAYOFMONTH	( ( 0x10390000 | CEVT_UI4 )  )

#define	PIMPR_RECURRING_INSTANCE	( ( 0x103a0000 | CEVT_UI4 )  )

#define	PIMPR_RECURRING_DURATION	( ( 0x103b0000 | CEVT_UI4 )  )

#define	PIMPR_RECURRING_MONTHOFYEAR	( ( 0x103c0000 | CEVT_UI4 )  )

#define	PIMPR_RECURRING_ENDTYPE	( ( 0x103d0000 | CEVT_UI4 )  )

#define	PIMPR_DURATION	( ( 0x10400000 | CEVT_UI4 )  )

#define	PIMPR_LOCATION	( ( 0x410000 | CEVT_LPWSTR )  )

#define	PIMPR_START	( ( 0x10420000 | CEVT_FILETIME )  )

#define	PIMPR_END	( ( 0x10430000 | CEVT_FILETIME )  )

#define	PIMPR_REPLY_TIME	( ( 0x10440000 | CEVT_FILETIME )  )

#define	PIMPR_RESPONSE_TYPE	( ( 0x10450000 | CEVT_UI4 )  )

#define	PIMPR_ALL_DAY_EVENT	( ( 0x440000 | CEVT_BOOL )  )

#define	PIMPR_BUSY_STATUS	( ( 0x450000 | CEVT_UI4 )  )

#define	PIMPR_REMINDER_MINUTES_BEFORE_START	( ( 0x460000 | CEVT_UI4 )  )

#define	PIMPR_GLOBAL_OBJECT_ID	( ( 0x470000 | CEVT_BLOB )  )

#define	PIMPR_TIMEZONE	( ( 0x480000 | CEVT_BLOB )  )

#define	PIMPR_MEETING_STATUS	( ( 0x500000 | CEVT_UI4 )  )

#define	PIMPR_MEETING_ORGANIZER_NAME	( ( 0x510000 | CEVT_LPWSTR )  )

#define	PIMPR_MEETING_OWNER_CRITICAL_CHANGE	( ( 0x520000 | CEVT_FILETIME )  )

#define	PIMPR_ATTENDEES_CRITICAL_CHANGE	( ( 0x530000 | CEVT_FILETIME )  )

#define	PIMPR_NO_RESPONSE_REQUESTED	( ( 0x540000 | CEVT_BOOL )  )

#define	PIMPR_MEETING_ORGANIZER_EMAIL	( ( 0x550000 | CEVT_LPWSTR )  )

#define	PIMPR_NO_NEW_TIME_PROPOSALS	( ( 0x560000 | CEVT_BOOL )  )

#define	PIMPR_IMPORTANCE	( ( 0x600000 | CEVT_UI4 )  )

#define	PIMPR_TEAM_TASK	( ( 0x610000 | CEVT_BOOL )  )

#define	PIMPR_START_DATE	( ( 0x620000 | CEVT_FILETIME )  )

#define	PIMPR_DUE_DATE	( ( 0x630000 | CEVT_FILETIME )  )

#define	PIMPR_DATE_COMPLETED	( ( 0x640000 | CEVT_FILETIME )  )

#define	PIMPR_COMPLETE	( ( 0x10650000 | CEVT_BOOL )  )

#define	PIMPR_REMINDER_TIME	( ( 0x10660000 | CEVT_FILETIME )  )

#define	PIMPR_RECURRING_REGENERATING	( ( 0x10670000 | CEVT_BOOL )  )

#define	PIMPR_FILEAS	( ( 0x800000 | CEVT_LPWSTR )  )

#define	PIMPR_TITLE	( ( 0x810000 | CEVT_LPWSTR )  )

#define	PIMPR_FIRST_NAME	( ( 0x820000 | CEVT_LPWSTR )  )

#define	PIMPR_MIDDLE_NAME	( ( 0x830000 | CEVT_LPWSTR )  )

#define	PIMPR_LAST_NAME	( ( 0x840000 | CEVT_LPWSTR )  )

#define	PIMPR_SUFFIX	( ( 0x850000 | CEVT_LPWSTR )  )

#define	PIMPR_NICKNAME	( ( 0x860000 | CEVT_LPWSTR )  )

#define	PIMPR_YOMI_FIRSTNAME	( ( 0x870000 | CEVT_LPWSTR )  )

#define	PIMPR_YOMI_LASTNAME	( ( 0x880000 | CEVT_LPWSTR )  )

#define	PIMPR_YOMI_COMPANY	( ( 0x890000 | CEVT_LPWSTR )  )

#define	PIMPR_COMPANY_NAME	( ( 0x8a0000 | CEVT_LPWSTR )  )

#define	PIMPR_DEPARTMENT	( ( 0x8b0000 | CEVT_LPWSTR )  )

#define	PIMPR_JOB_TITLE	( ( 0x8c0000 | CEVT_LPWSTR )  )

#define	PIMPR_MANAGER	( ( 0x8d0000 | CEVT_LPWSTR )  )

#define	PIMPR_OFFICE_LOCATION	( ( 0x8e0000 | CEVT_LPWSTR )  )

#define	PIMPR_ASSISTANT_NAME	( ( 0x8f0000 | CEVT_LPWSTR )  )

#define	PIMPR_EMAIL1_ADDRESS	( ( 0x900000 | CEVT_LPWSTR )  )

#define	PIMPR_EMAIL2_ADDRESS	( ( 0x910000 | CEVT_LPWSTR )  )

#define	PIMPR_EMAIL3_ADDRESS	( ( 0x920000 | CEVT_LPWSTR )  )

#define	PIMPR_IM1_ADDRESS	( ( 0x930000 | CEVT_LPWSTR )  )

#define	PIMPR_IM2_ADDRESS	( ( 0x940000 | CEVT_LPWSTR )  )

#define	PIMPR_IM3_ADDRESS	( ( 0x950000 | CEVT_LPWSTR )  )

#define	PIMPR_MOBILE_TELEPHONE_NUMBER	( ( 0x960000 | CEVT_LPWSTR )  )

#define	PIMPR_BUSINESS_TELEPHONE_NUMBER	( ( 0x970000 | CEVT_LPWSTR )  )

#define	PIMPR_BUSINESS2_TELEPHONE_NUMBER	( ( 0x980000 | CEVT_LPWSTR )  )

#define	PIMPR_HOME_TELEPHONE_NUMBER	( ( 0x990000 | CEVT_LPWSTR )  )

#define	PIMPR_HOME2_TELEPHONE_NUMBER	( ( 0x9a0000 | CEVT_LPWSTR )  )

#define	PIMPR_BUSINESS_FAX_NUMBER	( ( 0x9b0000 | CEVT_LPWSTR )  )

#define	PIMPR_HOME_FAX_NUMBER	( ( 0x9c0000 | CEVT_LPWSTR )  )

#define	PIMPR_PAGER_NUMBER	( ( 0x9d0000 | CEVT_LPWSTR )  )

#define	PIMPR_CAR_TELEPHONE_NUMBER	( ( 0x9e0000 | CEVT_LPWSTR )  )

#define	PIMPR_RADIO_TELEPHONE_NUMBER	( ( 0x9f0000 | CEVT_LPWSTR )  )

#define	PIMPR_COMPANY_TELEPHONE_NUMBER	( ( 0xa00000 | CEVT_LPWSTR )  )

#define	PIMPR_ASSISTANT_TELEPHONE_NUMBER	( ( 0xa10000 | CEVT_LPWSTR )  )

#define	PIMPR_SMS	( ( 0x10a20000 | CEVT_LPWSTR )  )

#define	PIMPR_MMS	( ( 0x10a30000 | CEVT_LPWSTR )  )

#define	PIMPR_DISPLAY_NAME	( ( 0x10a40000 | CEVT_LPWSTR )  )

#define	PIMPR_YOMI_DISPLAYNAME	( ( 0x10a50000 | CEVT_LPWSTR )  )

#define	PIMPR_SPOUSE	( ( 0xa50000 | CEVT_LPWSTR )  )

#define	PIMPR_CHILDREN	( ( 0xa60000 | CEVT_LPWSTR )  )

#define	PIMPR_WEB_PAGE	( ( 0xa70000 | CEVT_LPWSTR )  )

#define	PIMPR_RINGTONE	( ( 0xa80000 | CEVT_LPWSTR )  )

#define	PIMPR_CUSTOMERID	( ( 0xa90000 | CEVT_LPWSTR )  )

#define	PIMPR_GOVERNMENTID	( ( 0xaa0000 | CEVT_LPWSTR )  )

#define	PIMPR_ACCOUNT_NAME	( ( 0xab0000 | CEVT_LPWSTR )  )

#define	PIMPR_BUSINESS_ADDRESS	( ( 0x10c00000 | CEVT_LPWSTR )  )

#define	PIMPR_BUSINESS_ADDRESS_STREET	( ( 0xc10000 | CEVT_LPWSTR )  )

#define	PIMPR_BUSINESS_ADDRESS_CITY	( ( 0xc20000 | CEVT_LPWSTR )  )

#define	PIMPR_BUSINESS_ADDRESS_STATE	( ( 0xc30000 | CEVT_LPWSTR )  )

#define	PIMPR_BUSINESS_ADDRESS_POSTAL_CODE	( ( 0xc40000 | CEVT_LPWSTR )  )

#define	PIMPR_BUSINESS_ADDRESS_COUNTRY	( ( 0xc50000 | CEVT_LPWSTR )  )

#define	PIMPR_HOME_ADDRESS	( ( 0x10d00000 | CEVT_LPWSTR )  )

#define	PIMPR_HOME_ADDRESS_STREET	( ( 0xd10000 | CEVT_LPWSTR )  )

#define	PIMPR_HOME_ADDRESS_CITY	( ( 0xd20000 | CEVT_LPWSTR )  )

#define	PIMPR_HOME_ADDRESS_STATE	( ( 0xd30000 | CEVT_LPWSTR )  )

#define	PIMPR_HOME_ADDRESS_POSTAL_CODE	( ( 0xd40000 | CEVT_LPWSTR )  )

#define	PIMPR_HOME_ADDRESS_COUNTRY	( ( 0xd50000 | CEVT_LPWSTR )  )

#define	PIMPR_OTHER_ADDRESS	( ( 0x10e00000 | CEVT_LPWSTR )  )

#define	PIMPR_OTHER_ADDRESS_STREET	( ( 0xe10000 | CEVT_LPWSTR )  )

#define	PIMPR_OTHER_ADDRESS_CITY	( ( 0xe20000 | CEVT_LPWSTR )  )

#define	PIMPR_OTHER_ADDRESS_STATE	( ( 0xe30000 | CEVT_LPWSTR )  )

#define	PIMPR_OTHER_ADDRESS_POSTAL_CODE	( ( 0xe40000 | CEVT_LPWSTR )  )

#define	PIMPR_OTHER_ADDRESS_COUNTRY	( ( 0xe50000 | CEVT_LPWSTR )  )

#define	PIMPR_BIRTHDAY	( ( 0xf00000 | CEVT_FILETIME )  )

#define	PIMPR_ANNIVERSARY	( ( 0xf10000 | CEVT_FILETIME )  )

#define	PIMPR_SMARTPROP	( ( 0xf80000 | CEVT_UI4 )  )

#define	PIMPR_SMARTPROP_VALUE	( ( 0xf90000 | CEVT_LPWSTR )  )

#define	PIMPR_PICTURE	( ( 0xff0000 | CEVT_PIM_STREAM )  )

#define	PIMPR_YOMI_FILEAS	( ( 0x1010000 | CEVT_LPWSTR )  )

#define	PIMPR_CONTACT_TYPE	( ( 0x1020000 | CEVT_UI4 )  )

#define	PIMPR_HAS_PICTURE	( ( 0xfe0000 | CEVT_BOOL )  )

#define	PIMPR_ACCOUNT_ICON	( ( 0x82600000 | CEVT_LPWSTR )  )

#define	PIMPR_SIM_PHONE	( ( 0x30000 | CEVT_LPWSTR )  )

#define	PIMPR_NAME	( ( 0x30010000 | CEVT_LPWSTR )  )

#define	PIMPR_DEFAULT_ITEM_TYPE	( ( 0x11030000 | CEVT_UI4 )  )

#define	PIMPR_FOLDER_ISNOTEDITABLEFROMUI	( ( 0x11040000 | CEVT_BOOL )  )

#define	PIMPR_FOLDER_ISHIDDEN	( ( 0x11050000 | CEVT_BOOL )  )

#define	PIMPR_MESSAGE_CLASS	( ( 0x4b0000 | CEVT_LPWSTR )  )

#define	PIMPR_BODY_CONTENT_TYPE	( ( 0x20110000 | CEVT_LPWSTR )  )

#define	PIMPR_BODY_CONTENT_DATA	( ( 0x20120000 | CEVT_PIM_STREAM )  )

#define	PIMPR_LAST_MODIFIED_DATE	( ( 0x20130000 | CEVT_FILETIME )  )

#define	PIMPR_EMAIL_ADDRESS	( ( 0x30030000 | CEVT_LPWSTR )  )

#define	PIMPR_STORE_SYNC_ENGINE_GUID	( ( 0x34160000 | CEVT_BLOB )  )

#define	PIMPR_STORE_SYNC_PARTNER_GUID	( ( 0x34170000 | CEVT_BLOB )  )

#define	PIMPR_STORE_SUPPORTEDTYPES	( ( 0x37150000 | CEVT_UI4 )  )

#define	PIMPR_ALL_EMAIL_ADDRESSES	( ( 0x825d0000 | CEVT_LPWSTR )  )

typedef /* [v1_enum] */ 
enum PIMPR_CONTACTTYPE
    {	PIMPR_CONTACTTYPE_DEVICE	= 0,
	PIMPR_CONTACTTYPE_SIM	= 1
    } 	PIMPR_CONTACTTYPE;

#define PIMSRC_REGHKEY HKEY_LOCAL_MACHINE
#define PIMSRC_REGPATH_COLORS           L"Colors"
#define PIMSRC_REGPATH_ROOT             L"System\\PIMSources"
#define PIMSRC_REGVALUE_CLSID           L"CLSID"
#define PIMSRC_REGVALUE_CUSTOMIZATIONS  L"Customizations"
#define PIMSRC_REGVALUE_TYPE            L"Type"
#define PIMSRC_REGVALUE_DISPLAYNAME     L"DisplayName"
#define PIMSRC_REGVALUE_ICON            L"Icon"
typedef /* [v1_enum] */ 
enum PIMSRC_TYPE
    {	PIMSRC_TYPE_CONTACTS	= 0x1,
	PIMSRC_TYPE_APPOINTMENTS	= 0x2,
	PIMSRC_TYPE_TASKS	= 0x4,
	PIMSRC_TYPE_VALIDMASK	= ( ( PIMSRC_TYPE_CONTACTS | PIMSRC_TYPE_APPOINTMENTS )  | PIMSRC_TYPE_TASKS ) 
    } 	PIMSRC_TYPE;

typedef /* [v1_enum] */ 
enum PIMSRC_CUSTOM
    {	PIMSRC_CUSTOM_CONTACTS_SUMMARY_CARD	= 0x1,
	PIMSRC_CUSTOM_CONTACTS_PAINT_LIST_ICON	= 0x4,
	PIMSRC_CUSTOM_CONTACTS_NEW	= 0x8,
	PIMSRC_CUSTOM_APPOINTMENTS_SUMMARY_CARD	= 0x100,
	PIMSRC_CUSTOM_APPOINTMENTS_NEW	= 0x200,
	PIMSRC_CUSTOM_APPOINTMENTS_COLORS	= 0x800,
	PIMSRC_CUSTOM_TASKS_SUMMARY_CARD	= 0x10000,
	PIMSRC_CUSTOM_TASKS_NEW	= 0x20000,
	PIMSRC_CUSTOM_VALIDMASK	= ( ( ( ( ( ( ( PIMSRC_CUSTOM_CONTACTS_SUMMARY_CARD | PIMSRC_CUSTOM_CONTACTS_PAINT_LIST_ICON )  | PIMSRC_CUSTOM_CONTACTS_NEW )  | PIMSRC_CUSTOM_APPOINTMENTS_SUMMARY_CARD )  | PIMSRC_CUSTOM_APPOINTMENTS_NEW )  | PIMSRC_CUSTOM_APPOINTMENTS_COLORS )  | PIMSRC_CUSTOM_TASKS_SUMMARY_CARD )  | PIMSRC_CUSTOM_TASKS_NEW ) 
    } 	PIMSRC_CUSTOM;

typedef /* [v1_enum] */ 
enum PIMSRC_COLOR
    {	PIMSRC_COLOR_APPOINTMENTS_BACKGROUND	= 1
    } 	PIMSRC_COLOR;

#define PIMSRC_SCDS_SELECTED    0x00000001
#define PIMSRC_SCDS_FOCUS       0x00000010
typedef struct _SRCCUSTOMDRAW
    {
    HDC hdc;
    RECT rc;
    DWORD grfItemState;
    } 	SRCCUSTOMDRAW;

DEFINE_GUID(IID_IPimSrcContactSummaryCard, 0x95932f0a, 0xe03a, 0x412c, 0x85, 0xee, 0x04, 0x53, 0x65, 0x27, 0x7e, 0x60);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0038_v0_0_s_ifspec;

#ifndef __IPimSrcContactSummaryCard_INTERFACE_DEFINED__
#define __IPimSrcContactSummaryCard_INTERFACE_DEFINED__

/* interface IPimSrcContactSummaryCard */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPimSrcContactSummaryCard;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("95932f0a-e03a-412c-85ee-045365277e60")
    IPimSrcContactSummaryCard : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Display( 
            /* [in] */ HWND hwndParent,
            /* [in] */ IItem *pItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPimSrcContactSummaryCardVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPimSrcContactSummaryCard * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPimSrcContactSummaryCard * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPimSrcContactSummaryCard * This);
        
        HRESULT ( STDMETHODCALLTYPE *Display )( 
            IPimSrcContactSummaryCard * This,
            /* [in] */ HWND hwndParent,
            /* [in] */ IItem *pItem);
        
        END_INTERFACE
    } IPimSrcContactSummaryCardVtbl;

    interface IPimSrcContactSummaryCard
    {
        CONST_VTBL struct IPimSrcContactSummaryCardVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPimSrcContactSummaryCard_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPimSrcContactSummaryCard_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPimSrcContactSummaryCard_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPimSrcContactSummaryCard_Display(This,hwndParent,pItem)	\
    ( (This)->lpVtbl -> Display(This,hwndParent,pItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPimSrcContactSummaryCard_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0039 */
/* [local] */ 

DEFINE_GUID(IID_IPimSrcContactNew, 0xfd76819e, 0x4bdc, 0x4e98, 0x88, 0xc, 0x15, 0xde, 0xd1, 0xfd, 0xa3, 0xd);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0039_v0_0_s_ifspec;

#ifndef __IPimSrcContactNew_INTERFACE_DEFINED__
#define __IPimSrcContactNew_INTERFACE_DEFINED__

/* interface IPimSrcContactNew */
/* [local][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPimSrcContactNew;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fd76819e-4bdc-4e98-880c-15ded1fda30d")
    IPimSrcContactNew : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ HWND hwndParent,
            /* [out][in] */ IItem *pItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPimSrcContactNewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPimSrcContactNew * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPimSrcContactNew * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPimSrcContactNew * This);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            IPimSrcContactNew * This,
            /* [in] */ HWND hwndParent,
            /* [out][in] */ IItem *pItem);
        
        END_INTERFACE
    } IPimSrcContactNewVtbl;

    interface IPimSrcContactNew
    {
        CONST_VTBL struct IPimSrcContactNewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPimSrcContactNew_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPimSrcContactNew_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPimSrcContactNew_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPimSrcContactNew_Create(This,hwndParent,pItem)	\
    ( (This)->lpVtbl -> Create(This,hwndParent,pItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPimSrcContactNew_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_pimstore_0000_0040 */
/* [local] */ 

DEFINE_GUID(IID_IPimSrcContactListIcon, 0x95932f0a, 0xe03a, 0x412c, 0x85, 0xee, 0x04, 0x53, 0x65, 0x27, 0x7e, 0x62);


extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_pimstore_0000_0040_v0_0_s_ifspec;

#ifndef __IPimSrcContactListIcon_INTERFACE_DEFINED__
#define __IPimSrcContactListIcon_INTERFACE_DEFINED__

/* interface IPimSrcContactListIcon */
/* [local][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPimSrcContactListIcon;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("95932f0a-e03a-412c-85ee-045365277e62")
    IPimSrcContactListIcon : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Paint( 
            /* [in] */ const SRCCUSTOMDRAW *pscd,
            /* [in] */ CEOID oid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPimSrcContactListIconVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPimSrcContactListIcon * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPimSrcContactListIcon * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPimSrcContactListIcon * This);
        
        HRESULT ( STDMETHODCALLTYPE *Paint )( 
            IPimSrcContactListIcon * This,
            /* [in] */ const SRCCUSTOMDRAW *pscd,
            /* [in] */ CEOID oid);
        
        END_INTERFACE
    } IPimSrcContactListIconVtbl;

    interface IPimSrcContactListIcon
    {
        CONST_VTBL struct IPimSrcContactListIconVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPimSrcContactListIcon_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPimSrcContactListIcon_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPimSrcContactListIcon_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPimSrcContactListIcon_Paint(This,pscd,oid)	\
    ( (This)->lpVtbl -> Paint(This,pscd,oid) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPimSrcContactListIcon_INTERFACE_DEFINED__ */



#ifndef __PocketOutlook_LIBRARY_DEFINED__
#define __PocketOutlook_LIBRARY_DEFINED__

/* library PocketOutlook */
/* [version][uuid] */ 


EXTERN_C const IID LIBID_PocketOutlook;

EXTERN_C const CLSID CLSID_Exception;

#ifdef __cplusplus

class DECLSPEC_UUID("b47398d2-3b73-11d2-8f1b-0000f87a4335")
Exception;
#endif

EXTERN_C const CLSID CLSID_TimeZone;

#ifdef __cplusplus

class DECLSPEC_UUID("78b27291-5256-11d2-8f1b-0000f87a4335")
TimeZone;
#endif

EXTERN_C const CLSID CLSID_RecurrencePattern;

#ifdef __cplusplus

class DECLSPEC_UUID("38f47301-270f-11d2-8f18-0000f87a4335")
RecurrencePattern;
#endif

EXTERN_C const CLSID CLSID_Recipient;

#ifdef __cplusplus

class DECLSPEC_UUID("7e136be1-5240-11d2-8f1b-0000f87a4335")
Recipient;
#endif

EXTERN_C const CLSID CLSID_Recipients;

#ifdef __cplusplus

class DECLSPEC_UUID("76065ae1-2347-11d2-8f18-0000f87a4335")
Recipients;
#endif

EXTERN_C const CLSID CLSID_Items;

#ifdef __cplusplus

class DECLSPEC_UUID("f06748c1-21a5-11d2-8f18-0000f87a4335")
Items;
#endif

EXTERN_C const CLSID CLSID_ContactItem;

#ifdef __cplusplus

class DECLSPEC_UUID("430539d0-2017-11d2-8f18-0000f87a4335")
ContactItem;
#endif

EXTERN_C const CLSID CLSID_TaskItem;

#ifdef __cplusplus

class DECLSPEC_UUID("5b43f690-202c-11d2-8f18-0000f87a4335")
TaskItem;
#endif

EXTERN_C const CLSID CLSID_AppointmentItem;

#ifdef __cplusplus

class DECLSPEC_UUID("5b43f692-202c-11d2-8f18-0000f87a4335")
AppointmentItem;
#endif

EXTERN_C const CLSID CLSID_CityItem;

#ifdef __cplusplus

class DECLSPEC_UUID("c83c5e91-3d1b-11d2-8f1b-0000f87a4335")
CityItem;
#endif

EXTERN_C const CLSID CLSID_Application;

#ifdef __cplusplus

class DECLSPEC_UUID("05058f23-20be-11d2-8f18-0000f87a4335")
Application;
#endif
#endif /* __PocketOutlook_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __RPC_USER  HWND_UserFree(     unsigned long *, HWND * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\phoneui.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this source code is subject to the terms of the Microsoft
// premium shared source license agreement under which you licensed
// this source code. If you did not accept the terms of the license
// agreement, you are not authorized to use this source code.
// For the terms of the license, please see the license agreement
// signed by you and Microsoft.
// THE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
#ifndef _PHONEUI_H_
#define _PHONEUI_H_

#if (_MSC_VER >= 1000)
#pragma once
#endif
#include <windows.h>
#include "SearchAPI.h"
#include "phone.h"
#include "menumanager.h"

/// <file_topic_scope tref="Call_Progress" />

#define E_UNSUPPORTEDAREA   (MAKE_HRESULT(SEVERITY_ERROR, FACILITY_PHAPI, 0x200))
#define E_CANNOTINSERT      (MAKE_HRESULT(SEVERITY_ERROR, FACILITY_PHAPI, 0x201))
#define E_ALREADYREGISTERED (MAKE_HRESULT(SEVERITY_ERROR, FACILITY_PHAPI, 0x202))

typedef enum PHONE_EXTENSIBILITYAREA
{
    PHONE_EXTENSIBILITYAREA_CALLPROGRESS,
    PHONE_EXTENSIBILITYAREA_INCOMINGCALL,
    PHONE_EXTENSIBILITYAREA_SIMSEC,
    PHONE_EXTENSIBILITYAREA_CALLHISTORY,
    PHONE_EXTENSIBILITYAREA_SPEEDDIAL,
    PHONE_EXTENSIBILITYAREA_SMARTDIAL
} PHONE_EXTENSIBILITYAREA;
#define PHONE_EXTENSIBILITYAREA_COUNT (PHONE_EXTENSIBILITYAREA_SMARTDIAL + 1)

#define PHONE_REGISTER_AT_END 0xFFFFFFFF

/*
   Pivot Extensibility

     The call progress and incoming call UI can have their UI extended by adding 
   pivots.  An ISV can accomplish this by creating an implementation of IPhonePivot 
   and calling PhoneRegisterPivot on installation of their application or service and 
   PhoneUnregisterPivot during uninstallation.
     A pivot extension has control over the softkeys displayed while the user is
   on their pivot, has control over the pivot area of the UI, has access to the
   contents of the accumulator, has the ability to add and remove itself dynamically
   from the UI, and has the ability to switch to itself automatically on certain
   events (for example, a video call pivot might add itself to the UI and switch to
   itself when video is enabled on an active call or when a new video call is placed).
     The below functions and the IPhonePivot interface describe how to interact 
   with the phone application as a pivot.
     In order to support dialing if hosted in call progress, an extension pivot 
   should indicate that it supports dialing (and optionally, keypad UI) using the 
   call progress event codes (eg, CPPIVOT_EVENT_DIALINGALLOWED).  It must forward 
   all keyboard messages to hwndMainDialog (supplied in InitializePivot).  It can 
   then use PhoneGetCallProgressAccumulator to get the accumulator contents, which 
   it must render itself.
     Extension pivots are not intended to take keyboard input themselves regardless of
   whether they are hosted in call progress or the incoming call UI.  In particular, 
   they should be careful about hosting any controls that can take keyboard focus.  
   Taking keyboard focus will make it impossible for the user to access other pivots 
   on a non-touch device.
*/

/// <summary>
///   Registers a new pivot that will show up in the phone application UI.
/// </summary>
/// <param name="pharea">Phone area to check for pivot registration.  Currently limited to Call Progress and Incoming Call.</param>
/// <param name="clsidPivot">Class ID of the IPhonePivot implementation that will provide the pivot's functionality.</param>
/// <param name="iPivotPosition">Position at which to insert the pivot.  '0' is first, '1' is after the first pivot, etc.  Any number 
///                              greater than the actual pivot count will add the pivot at the end, or use PHONE_REGISTER_PIVOT_AT_END
///                              to explicitly specify insertion at the end.  Note that the OEM may prevent pivots from being
///                              inserted at specific locations (eg, between two of their pivots, or near the beginning or end).</param>
/// <returns>
///   Standard HRESULT, E_ALREADYREGISTERED, E_AREAUNSUPPORTED, or E_CANNOTINSERT.
///   E_ALREADYREGISTERED is returned when the specified CLSID is already in use by
///   a registered pivot. E_AREAUNSUPPORTED means the UI does not support pivot extenstion  
///   for the PHONE_EXTENSIBILITYAREA specified.  E_CANNOTINSERT is returned when the 
///   insert location is unavailable.
/// </returns>
/// <remarks>
///   PhoneUnregisterPivot can be used 
/// </remarks>
HRESULT PhoneRegisterPivot(PHONE_EXTENSIBILITYAREA pharea, CLSID clsidPivot, UINT iPivotPosition);

/// <summary>
///   Unregisters a previously registered pivot.
/// </summary>
/// <param name="pharea">Phone area to check for pivot registration.  Currently limited to Call Progress and Incoming Call.</param>
/// <param name="clsidPivot">Class ID of the IPhonePivot implementation that was previously registered.</param>
/// <returns>
///   Standard HRESULT, E_AREAUNSUPPORTED, or E_NOTFOUND.  E_AREAUNSUPPORTED means 
///   that pivot extensibility is not supported in the area specified by pharea.
///   E_NOTFOUND is returned when no registration record for the specified class ID
///   can be found.
/// </returns>
HRESULT PhoneUnregisterPivot(PHONE_EXTENSIBILITYAREA pharea, CLSID clsidPivot);


/// <summary>
///   Switches to the pivot specified by <paramref name="clsidPivot" />
/// </summary>
/// <param name="pharea">The extensibility area where the pivot has been registered.  Currently limited to Call progress and Incoming Call</param>
/// <param name="clsidPivot">Class ID of the pivot implementation that was registered with PhoneRegisterPivot.</param>
/// <returns>
///   E_ACCESSDENIED indicates that the function was called from outside the phone process.  <para />
///   E_UNSUPPORTEDAREA indicates that the phone does
///   not support pivot extensibility in the area specified by pharea.  <para />
///   E_NOTFOUND indicates the that pivot's Class ID was not found, which generally indicates
///   that it has not been successfully regsitered.
/// </returns>
/// <remarks>
///   This API can only be called from within a phone process.  It is intended
///   to be called by an extensibility pivot implementation that the phone has
///   loaded.
/// </remarks>
HRESULT PhoneSwitchPivot(PHONE_EXTENSIBILITYAREA pharea, REFCLSID clsidPivot);


/// <summary>
///   Gets the contents of the call progress accumulator
/// </summary>
/// <param name="pszAccumulator">Buffer in which to place the accumulator contents.  Can be NULL if *pcchAccumulator is 0.</param>
/// <param name="pcchAccumulator">Pointer to the count of elements in pszAccumulator.  On return this contains the length of the accumulator string including the NULL byte.</param>
/// <returns>
///   E_INVALIDARG if pszAccumulator is NULL and *pcchAccumulator is non-zero. <para />
///   E_ACCESSDENIED if called from outside the phone app <para />
///   E_FAIL - Otherwise.<para />
/// </returns>
/// <remarks>
///   Calling this function with a MAX_PATH buffer is expected to always succeed.  To avoid using
///   a MAX_PATH buffer, the function can be called with a NULL pointer for the buffer and a zero'd
///   count.  On return the count will contain the necessary buffer size. <para />
///   This can only be called from within the phone application's process.
/// </remarks>
HRESULT PhoneGetCallProgressAccumulator(__out_ecount_opt(*pcchAccumulator) TCHAR *pszAccumulator, __inout UINT *pcchAccumulator);

/// <summary>
///   Clears the contents of the call progress accumulator
/// </summary>
/// <returns>
///   E_ACCESSDENIED if called from outside the phone app <para />
///   E_FAIL - Otherwise.<para />
/// </returns>
/// <remarks>
///   This can only be called from within the phone application's process.
/// </remarks>
HRESULT PhoneClearCallProgressAccumulator();

/// <topic name="Call_Progress" displayname="Call Progress">
///   <topic_scope tref="Phone" />
///   <summary>
///       <para>
///         This describes the Call Progress UI and the the ways in which you can extend its functionality,
///         including creating your own pivot, and adding/removing tasks to the existing Tasks pivot.
///       </para>
///   </summary>
/// </topic>

/// <topic name="Call_Progress_Terminology" displayname="Terminology">
///   <topic_scope tref="Call_Progress" />
///     <summary>
///         <list type="table">
///             <listheader>
///                 <term>Name</term>
///                 <term>Meaning</term>
///             </listheader>
///             <item>
///                 <term>Call Progress</term>
///                 <term>
///                     The Phone specific UI that is displayed when one or more calls
///                     are active on the device.  This UI also stays present on the
///                     device for a brief period of time
///                 </term>
///             </item>
///             <item>
///                 <term>Active call</term>
///                 <term>
///                     Any call that is not ended in the system is considered
///                     an active call. So all calls that don't have callstate
///                     PH_CALLSTATE_IDLE are active calls.
///                 </term>
///             </item>
///             <item>
///                 <term>Call Tasks</term>
///                 <term>
///                     A special pivot that includes a list of useful tasks that can be extended via 3rd party support
///                 </term>
///             </item>
///         </list>
///     </summary>
/// </topic>




// {FAF5030D-9086-4451-BC88-1FC67B16F650}
DEFINE_GUID(IID_IPhonePivot, 0xfaf5030d, 0x9086, 0x4451, 0xbc, 0x88, 0x1f, 0xc6, 0x7b, 0x16, 0xf6, 0x50);

#undef INTERFACE
#define INTERFACE IPhonePivot
/// <summary>
/// Defines a single pivot within the Call Progress UI
/// </summary>
/// <remarks>
/// The Hungarian tag is pivot.
/// </remarks>
DECLARE_INTERFACE_IID_(IPhonePivot, IUnknown, "FAF5030D-9086-4451-BC88-1FC67B16F650")
{
public:

    /// <summary>
    ///   Retrieves the title to be displayed for this pivot
    /// </summary>
    /// <param name="ppszTitle">
    ///   [out] The title to be displayed for the pivot.
    /// </param>
    /// <returns>
    ///   <para>S_OK - successful</para>
    ///   <para>E_POINTER - NULL <paramref name="ppszTitle" /></para>
    ///   <para>E_FAIL - Otherwise.</para>
    /// </returns>
    /// <remarks>
    ///   <para>
    ///     <paramref name="ppszTitle" /> is callee allocated and the caller should LocalFree it
    ///   </para>
    /// </remarks>
    virtual HRESULT GetTitle(__deref_out TCHAR** ppszTitle) = 0;


    /// <summary>
    ///   Gets the verb manager for the pivot.
    /// </summary>
    /// <param name="ppVerbManager">Pointer to the verb manager for this item.</param>
    /// <returns>
    ///   Standrd HRESULT
    /// </returns>
    /// <remarks>
    ///     This method will be called once after creation and before InitializePivot.  The phone
    ///   application may add application-wide verb sources at this time.  If the pivot
    ///   owner expressly wants to remove them, it can do so during InitializePivot. <para />
    ///   Since the pivot owns the verb manager, it is responsible for assigning verbs
    ///   to the softkeys.  As a convenience, it can pass this responsibility for menu
    ///   and softkey management to the phone application by returning E_NOTIMPL
    ///   from this function and from <see cref="PreferredSoftkeysChanged" />. <para />
    ///   
    ///     If this function returns a failure code, the phone application will not call
    ///   <see cref="PreferredSoftkeysChanged" />.
    /// </remarks>
    virtual HRESULT GetVerbManager(__deref_out IVerbManager **ppVerbManager) = 0;


    /// <summary>
    ///   Notifies the pivot implementation that the preferred application-level softkeys have changed.
    /// </summary>
    /// <param name="prgSoftkeyVerbs">Array of preferred softkey values</param>
    /// <param name="cSoftkeyVerbs">Count of elements in the preferred softkey array</param>
    /// <returns>
    ///   If any error code is returned, the application will update the softkeys
    ///   itself.  If any success code is returned, the application will assume
    ///   that the pivot is performing appropriate management of the softkeys.
    /// </returns>
    /// <remarks>
    ///     If a pivot implementation does not use any application-level softkeys,
    ///   it can simply return S_OK and update the softkeys as necessary when its
    ///   verbs or state change (using <see cref="SetSoftkeyVerb"/> or <see cref="SetSoftkeyVerbs"/>
    ///   with the verb manager). <para />
    ///     If a pivot always puts its own verb on one softkey and always yields the
    ///   other softkey to the application preference, it should use <see cref="SetSoftkeyVerb"/>
    ///   and not <see cref="SetSoftkeyVerbs"/>.  The former can be used to set individual
    ///   softkeys at different times without changing the state of other softkeys.
    ///   This function should be implemented by calling <see cref="SetSoftkeyVerb"/>
    ///   with the application softkey the pivot wants to use, and the other softkey
    ///   can be updated independently when the pivot's verbs change.  <para />
    ///     If a pivot implementation needs to merge some application level verbs
    ///   with some internal verbs dynamically (ie, depending on the state of those verbs)
    ///   it should make a copy of any verb information it needs from prgSoftkeyVerbs
    ///   in order to correctly set the softkeys when its verbs change. Specifically,
    ///   it should hold a reference to the verb source and make a copy of the verb
    ///   descriptor, including copying any strings within the verb descriptor.<para />
    ///     If a pivot implementation does not set the softkeys at all, simply return
    ///   E_NOTIMPL and the application will manage the softkeys.  Note that this function
    ///   will not be called if <see cref="GetVerbManager" /> returns a failure code.
    /// </remarks>
    virtual HRESULT PreferredSoftkeysChanged(__in_ecount(cSoftkeyVerbs) SOFTKEYVERB *prgSoftkeyVerbs, UINT cSoftkeyVerbs) = 0;


    /// <summary>
    ///   Initialization routine called shortly after a pivot has been loaded.
    /// </summary>
    /// <param name="hwndMainDialog">
    ///   [in] The window handle to the main Call Progress dialog.  Useful for
    ///        parenting purposes if an action while on your pivot needs to invoke
    ///        a modal dialog
    /// </param>
    /// <param name="phwndPivot">
    ///   [out] The handle to the pivot's window.
    /// </param>
    /// <returns>
    ///   <para>S_OK - successful</para>
    ///   <para>E_FAIL - Otherwise.</para>
    /// </returns>
    /// <remarks>
    ///     Pivot implementations should send up notifications indicating their initial state.  See
    ///   <see cref="Call_Progress_EventCodes">call progress event codes</see>.  Any events sent
    ///   during construction will not be received by the host. <para />
    ///     Note that <see cref="GetVerbmanager"/> will be called before this function.  Initialization required
    ///   by the implementation of <see cref="GetVerbmanager"/> should not be done here.
    /// </remarks>
    virtual HRESULT InitializePivot(__in HWND hwndMainDialog, __out HWND *phwndPivot) = 0;


    /// <summary>
    ///   Called when this pivot becomes the active pivot in focus
    /// </summary>
    /// <returns>
    ///   <para>S_OK - successful</para>
    ///   <para>E_FAIL - Otherwise.</para>
    /// </returns>
    /// <remarks>
    ///   <para>
    ///     In most cases, the pivot won't have to do anything special when this is called.  It's being sent as a courtesy.
    ///   </para>
    /// </remarks>
    virtual HRESULT OnActivated() = 0;


    /// <summary>
    ///   Called when this pivot is no longer the active pivot in focus
    /// </summary>
    /// <returns>
    ///   <para>S_OK - successful</para>
    ///   <para>E_FAIL - Otherwise.</para>
    /// </returns>
    /// <remarks>
    ///   <para>
    ///     In most cases, the pivot won't have to do anything special when this is called.  It's being sent as a courtesy.
    ///   </para>
    /// </remarks>
    virtual HRESULT OnActivationLost() = 0;

    /// <summary>
    ///   Obtain event used to manage change notifications for this pivot
    /// </summary>
    /// <param name="ppEvent">
    ///   [out] Address to receive event object
    /// </param>
    /// <returns>
    ///   <para>
    ///     S_OK if event was retrieved successully.
    ///   </para>
    ///   <para>
    ///     E_INVALIDARG if <paramref name="ppEvent"/> is NULL.
    ///   </para>
    ///   <para>
    ///     E_FAIL on unspecified error conditions.
    ///   </para>
    /// </returns>
    /// <remarks>
    ///   <para>
    ///     It is not expected for implementations of IPhonePivot to implement IEvent.
    ///     Use the standard implementation created via <see cref="MulticastEvent_CreateInstance" />
    ///     instead.
    ///   </para>
    ///   <para>
    ///     Refer to the <see tref="Call_Progress_EventCodes" /> topic for available event codes.
    ///   </para>
    /// </remarks>
    virtual HRESULT GetChangeNotificationEvent(__deref_out IEvent** ppEvent) = 0;

    /// <summary>
    ///   Gets a list of the selected items in the pivot.
    /// </summary>
    /// <param name="ppSelectedItemList">A virtual list containing the selected item
    ///                                  or items.</param>
    /// <returns>
    ///   HRESULT
    /// </returns>
    /// <remarks>
    ///   Implementing this function is optional.  This information is used to 
    ///   provide context to registered menu extensions.  The caller must call Release
    ///   on the returned virtual list.
    /// </remarks>
    virtual HRESULT GetSelectedItemList(__out IVirtualList **ppSelectedItemList) = 0;

};


/// <topic name="Call_Progress_EventCodes" displayname="Event Codes">
///   <topic_scope tref="Call_Progress" />
///     <summary>The possible event codes that can be sent by this pivot.
///         <list type="table">
///             <listheader>
///                 <term>Name</term>
///                 <term>Description</term>
///             </listheader>
///             <item>
///                 <term>CPPIVOT_EVENT_SHOULDBEATTACHED</term>
///                 <term>The pivot is requesting that it be added to or removed from the UI.  pParams contains
///                       a BOOL that tells the host whether to attach or detach the pivot.</term>
///             </item>
///             <item>
///                 <term>CPPIVOT_EVENT_TITLECHANGED</term>
///                 <term>The title that should be displayed in the pivot header for this pivot needs to be updated</term>
///             </item>
///             <item>
///                 <term>CPPIVOT_EVENT_KEYPADALLOWED</term>
///                 <term>Allows a pivot to tell the host to allow or disallow a touch keypad if on a touch device.  pParams contains
///                       a BOOL that tells the host whether to allow or disallow the keypad.
///                       <para>If the touch keypad is currently visible, and the desired value is FALSE, the value will not be honored 
///                             until the keypad is hidden by the user.</para>
///                 </term>
///             </item>
///             <item>
///                 <term>CPPIVOT_EVENT_DIALINGALLOWED</term>
///                 <term>Allows a pivot to tell the host to allow or disallow dialing on this pivot.  pParams contains
///                       a BOOL that tells the host whether to allow or disallow dialing.</term>
///             </item>
///         </list>
///     </summary>
///</topic>
#define CPPIVOT_EVENT_TITLECHANGED           0x00000001
#define CPPIVOT_EVENT_SHOULDBEATTACHED       0x00000002
#define CPPIVOT_EVENT_KEYPADALLOWED          0x00000003
#define CPPIVOT_EVENT_DIALINGALLOWED         0x00000004


// The call task list can be extended by implementing a task source containing one or more tasks
// The task source is primarily an IVirtualList that exposes items with the following
// properties:
#define TASK_IMAGE PROPID_IMAGE0
#define TASK_TEXT  PROPID_TEXT0
#define TASK_ID    PROPID_UNIQUEID
// Each item should expose a verb source that exposes one or more verbs to go into 
// the menu, and should expose a single grouped verb under CALL_PROGRESS_TASK_ACTION_VERB
// which the call progress application will map to the action key.

///<summary>
/// Verb group that contains the verb to be executed when the user actions on a particular task item in the UI 
/// Each task item's IVerbSource should add the "action" verb to this verb group 
///</summary>
#define CALL_PROGRESS_TASK_ACTION_VERB TEXT("ActionVerbGroup")

// See the IVirtualList interface for information about how virtual lists work.
// In particular, an ICallTaskSource implementation should send up appropriate 
// virtual list notifications when items change (see VLISTEVENT_*).


// {C38B92C8-C3D5-4019-B895-A8174C244A19}
DEFINE_GUID(IID_ICallTaskSource, 0xc38b92c8, 0xc3d5, 0x4019, 0xb8, 0x95, 0xa8, 0x17, 0x4c, 0x24, 0x4a, 0x19);

DECLARE_INTERFACE_IID_(ICallTaskSource, IVirtualList, "C38B92C8-C3D5-4019-B895-A8174C244A19")
{
public:
    virtual HRESULT OnThemeChanged() = 0;
    // A task source should implement GetCount and GetItem.  A task source may
    // implement GetChangeNotificationEvent if their tasks change based on the
    // phone or device state.
    // The phone application does not use the following functions and task sources
    // do not need to implement them.  For convenience we provide empty implementations
    // so that any class implementing ICallTaskSource doesn't even need to define
    // them.
    virtual STDMETHODIMP CacheItemsHint(UINT, UINT, const DWORD*, UINT)  { return E_NOTIMPL; }
    virtual STDMETHODIMP GetProperty(DWORD, PROPVARIANT*)                { return E_NOTIMPL; }
    virtual STDMETHODIMP GetFilterString(LPOLESTR, UINT*)                { return E_NOTIMPL; }
    virtual STDMETHODIMP SetFilterString(LPCOLESTR)                      { return E_NOTIMPL; }
    virtual STDMETHODIMP GetSortPropertyID(DWORD*)                       { return E_NOTIMPL; }
    virtual STDMETHODIMP GetSortDirection(LISTSORTDIRECTION*)            { return E_NOTIMPL; }
    virtual STDMETHODIMP GetSupportedSortCount(UINT*)                    { return E_NOTIMPL; }
    virtual STDMETHODIMP GetSupportedSortPropertyID(UINT, DWORD*)        { return E_NOTIMPL; }
    virtual STDMETHODIMP GetSupportedSortDirection(UINT, LISTSORTDIRECTION*) { return E_NOTIMPL; }
    virtual STDMETHODIMP ApplySort(DWORD, LISTSORTDIRECTION)             { return E_NOTIMPL; }
    virtual STDMETHODIMP RemoveSort()                                    { return E_NOTIMPL; }
    virtual STDMETHODIMP GetVerbSource(IVerbSource**)                    { return E_NOTIMPL; }
};

// TODO: Document registration details
// Task items that want to have the Talk key dial a number when the task
// has focus need to expose the PROPID_DIALSTRING property and return the 
// phone number as an alphanumeric string 
HRESULT PhoneRegisterTaskSource(REFCLSID clsidTaskSource, UINT iPosition);
HRESULT PhoneUnregisterTaskSource(REFCLSID clsidTaskSource);

/*
  Menu extensibility
  Several areas of the phone UI can have their menus extended:
    Call progress
    Incoming call
    Smartsearch/SmartDial
  To extend menus in these areas, an ISV must create an IVerbSource implementation
  and register it with the phone app.  The IVerbSource implementation should expose a set
  of verbs that will be placed in the menu.  Sub-menus, restricted to one level deep, can be created
  in most UI (but not SmartSearch) by specifying groups.  See vrtldata.h and menumanager.h
  for more details on working with verb sources.
  PhoneRegisterMenuExtension can be called during application installation to 
  register the class ID of the IVerbSource implementation.  The verb source's class
  ID must also be registered via standard COM component registration.

  The verb source can optionally also implement IObjectWithSite in order to receive
  context information for the currently selected or focused item(s).  The phone
  application will call SetSite with NULL when no context is available for the current
  focused item or when nothing is in focus.  Otherwise the pointer passed to SetSite
  will implement IVirtualList, and the object will contain only the set of selected 
  or focused items.  The verb source can look at the items to get context information.
  The verb source can call GetChangeNotificationEvent and add an event delegate
  if they want notifications of when the verbs change, but for better performance
  they should simply check the context when GetGroupVerbs or GetVerbsFromIDs is called.

  For call progress (caller info pivot), incoming call, and emergency call UI, 
  the item will be a call info item.  The call info item will expose the call 
  handle and display text properties.  The call handle can be used with the phone 
  client APIs to get more call information (see phone.h).

  For call progress (tasks pivot), the item will be a task item and will expose the
  TASK_IMAGE, TASK_TEXT, and TASK_ID properties documented above.

  For smartsearch, the item will depend on the current pivot.  The verb source can
  check the category of the item to determine what type of data the item should
  be exposing.  The only type documented here is the accumulator contents item, 
  which will be provided as the context when the accumulator is in focus, providing
  access to both the display text and the full filter string.
  
*/

#define CATEGORY_ACCUMULATORCONTENTS _T("Accumulator Contents")
#define PROPID_ACCUMULATOR_FILTERSTRING  0x01
#define PROPID_ACCUMULATOR_DISPLAYTEXT   0x02

#define CALLINFOITEM_PROPID_HCALL        0x01


/// <summary>
///   Registers a menu extension for a phone application
/// </summary>
/// <param name="pharea">Phone area</param>
/// <param name="clsidMenuExtension">Class ID of the menu extension object to register</param>
/// <returns>
///   E_ALREADYREGISTERED  if the CLSID specified by <see cref="clsidMenuExtension"/> is already in use by
///     a registered menu extension. <para />
///   E_AREAUNSUPPORTED means the UI does not support menu extenstion for the
///     area specified by <see cref="pharea"/>.  <para />
///   E_FAIL on unspecified failure.
/// </returns>
/// <remarks>
///   This API is only supported for PHONE_EXTENSIBILITYAREA_CALLPROGRESS, 
///   PHONE_EXTENSIBILITYAREA_INCOMINGCALL, and PHONE_EXTENSIBILITYAREA_SMARTDIAL.
/// </remarks>
HRESULT PhoneRegisterMenuExtension(PHONE_EXTENSIBILITYAREA pharea, REFCLSID clsidMenuExtension);

/// <summary>
///   Unregsiters a menu extension
/// </summary>
/// <param name="pharea">Phone area</param>
/// <param name="clsidMenuExtension">Class ID of the menu extension to remove</param>
/// <returns>
///   E_NOTFOUND if the CLSID specified by <see cref="clsidMenuExtension"/> has not been registered <para />
///   E_AREAUNSUPPORTED if the UI does not support menu extenstion for the area 
///     specified by <see cref="pharea"/>.  <para />
///   E_FAIL on unspecified failure.
/// </returns>
/// <remarks>
///   This API is only supported for PHONE_EXTENSIBILITYAREA_CALLPROGRESS and 
///   PHONE_EXTENSIBILITYAREA_INCOMINGCALL.
/// </remarks>
HRESULT PhoneUnregisterMenuExtension(PHONE_EXTENSIBILITYAREA pharea, REFCLSID clsidMenuExtension);


#endif // _PHONEUI_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\phonecallserviceprov.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this source code is subject to the terms of the Microsoft
// premium shared source license agreement under which you licensed
// this source code. If you did not accept the terms of the license
// agreement, you are not authorized to use this source code.
// For the terms of the license, please see the license agreement
// signed by you and Microsoft.
// THE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
#ifndef _PHONEPROVIDERAPIS_H
#define _PHONEPROVIDERAPIS_H

#if (_MSC_VER >= 1000)
#pragma once
#endif

#include <windows.h>
#include <soundfile.h>

/// <file_topic_scope tref="Providers" />
/// <topic name="Providers" displayname="Call Service Providers">
///   <topic_scope tref="Phone" />
///   <summary>
///     These are a set of APIs that allow call service providers to notify the Phone Service of the state of calls on their stack
///     They also allow the Phone Service to execute call verbs that are implemented by call service providers
///   </summary>
/// </topic>
/// 

/// <topic name="Categories" displayname="API Categories">
///   <topic_scope tref="Providers" />
/// <summary>
///  There are two categories of call service provider APIs. They are the following:
///  <list type="bullet">
///    <item>
///     <description>Call Service Provider APIs: These are the set of APIs exported by the Call Service Provider that the
///                  Phone Services uses to communicate with the call service provider
///     </description>
///    </item>
///    <item>
///     <description>Provider Host APIs: These are the set of APIs that allow the call service providers to
///                  notify the Provider Host of changes in their call state and other internal state
///     </description>
///    </item>
/// </list>
/// </summary>
/// </topic>


/// <topic name="Provider Registration" displayname="Call Service Provider Registration">
/// <topic_scope tref="Providers" />
/// <seealso cref="PH_PROVIDERFLAG" />
/// <seealso cref="Provider Branding" />
/// <seealso cref="Incoming Call Ringtones" />
///
///  <summary> 
///     Each Call Service Provider is identified by a GUID and is registered in the device registry
///     as a call service provider using that guid. <para />
///
/// Call Service Providers should register themselves under the following registry key <para />
/// [HKEY_LOCAL_MACHINE\System\Phone\Providers\{PROVIDER-GUID}] <para />
///   "Dll"              ; string    required   Name of the Dll containing the call service provider exports <para />
///   "Lines"            ; dword     required   Number of outgoing lines on the call service provider (can by updated via notification) <para />
///   "BrandingName"     ; string    required   Branding name to use for the call service provider (used for line selection as well as branding)<para />
///   "ProviderFlags"    ; dword     optional   Provider flags supported by the call service provider <para />
///   "CoBrandingName"   ; string    optional   CoBranding (or MVNO) name to use for the call service provider <para />
///   "BrandingImage"    ; string    optional   URI of the branding image to use for the call service provider <para />
///   "CoBrandingImage"  ; string    optional   URI of the cobranding (or MVNO) image to use for the call service provider <para />
///   "BrandingPolicy"   ; dword     optional   Branding policy to use.  This specifies behavior differences when home and roaming. <para />
///   "CobrandingPolicy" ; dword     optional   Cobranding policy to use.  This specifies behavior differences when home and roaming. <para />
///   "VoicemailIcon"    ; string    optional   URI of the icon used to indicate voicemails on this line. <para />
///   "MissedCallIcon"   ; string    optional   URI of the icon used to indicate missed calls on this line. <para />
///   "ProviderIcon"     ; string    optional   URI of the icon used to indicate calls on this provider if a line-specific icon isn't provided. <para />
///   "PlayCallWaiting"  ; dword     optional   Phone application should play the call waiting sound for the call service provider <para />
///   "PlayRingback"     ; dword     optional   Phone application should play a ringback tone for calls in the dialing state on the call service provider <para />
///   "Ringtone"         ; string    optional   Full filepath to ringtone to be used for incoming calls on the call service provider. Used if "RingtoneSoundType" is SND_SOUNDTYPE_FILE. See <see cref="Incoming Call Ringtones" /> for more details  <para />
///   "RingtoneSoundtype"; dword     optional   Soundtype of the ringtone. Valid values are SND_SOUNDTYPE_FILE if the "Ringtone" field points to a valid ringtone,
///                                  SND_SOUNDTYPE_VIBRATE for vibrate instead of playing the ringtone, and SND_SOUNDTYPE_NONE for a silent incoming call ringtone <para />
///  </summary>
/// </topic>


/// <topic name="Provider Branding" displayname="Call Service Provider Branding">
/// <topic_scope tref="Providers" />
///  <summary> 
///
///  <para>
///    Branding information for a call service provider can be specified in the 
///    registry or via PH_PROVIDERINFO notifications to the provider host.  The former
///    provides an easy way to register static information.  The latter allows
///    a provider to specify branding per-line if necessary.  It is not recommended
///    to change branding dynamically based on device state using these notifications.
///    Branding can consist of an image (TODO: size) or text that overrides the 
///    current operator name and is controlled by a branding policy described below.
///    Cobranding can optionally be used to provide secondary branding for a partner.
///    See <see cref="Provider Registration" /> for information on how to set the
///    branding information and policy.  
///  </para>
///
///  <para>
///    The branding policy works by specifying preferences for what branding elements to show
///    in different scenarios across the device.  There are 4 bits of information in
///    the branding policy that control whether to show branding image, branding text, or operator 
///    text, and what to do while roaming.  The lowest bit controls roaming behavior.  If set,
///    the current operator name will be used instead of any branding information.
///    In the case of CobrandingPolicy, specifying 1 as the lowest bits overrides 
///    any branding with an empty string while roaming.  The next bit (0x2) directs
///    the UI to use a branding text if available.  The next bit (0x4) directs the UI
///    to use a branding image if available (and trumps any branding text).  The last 
///    bit (0x8) is reserved.  Each 4 bit area represents a different area in the UI.
///    The layout is [reserved] [sim security] [call progress] [home screen].  Note
///    that the incoming call UI uses the same policy as the call progress UI.
///  </para>  
///  <para>
///    To illustrate the above, consider the example branding policy of 0x0620 and
///    cobranding policy of 0x0504.  In the sim security UI, we would show the 
///    branding image even while roaming (0x6) and show the cobranding image except 
///    when roaming (0x5).  In call progress, we would always show branding text (0x2)
///    and never show any cobranding information (0x0).  At the home screen, we 
///    would always show the current operator (0x0) and always show the cobranding
///    image, if available.
///  </para>
///  <para>
///    The recommended value for branding policies is 0x0677.  Any available image will
///    be used.  If no image is available, branding text will be used.  If no image or text
///    are available, the operator will be used.  While roaming the operator will
///    always be used.  The same branding will be used in all UI for this branding policy.
///    If no branding policy is specified, 0x0677 will be used.
///  </para>
///
///  </summary>
/// </topic>
// These are the maximum dimensions a branding image should have at 131 DPI.  A higher
// resolution image can be provided for devices with higher DPIs, and it will be scaled
// to match the current DPI.
#define PH_BRANDING_MAX_WIDTH 120
#define PH_BRANDING_MAX_HEIGHT 27



/// <topic name="Incoming Call Ringtones" displayname="Call Service Provider Incoming Call Ringtones">
/// <topic_scope tref="Providers" />
/// <seealso cref="PH_CALLINFOUPDATE" />
/// <seealso cref="PH_PROVIDERINFO" />
/// <seealso cref="Provider Registration" />
/// 
/// <summary>
///     Each Call Service Provider can specify a ringtone for its incoming calls under their registry key as specified in <see cref="Provider Registration" />.
///     Call Service Providers can also specify per-line ringtones via the PH_PROVIDERINFO_RINGTONE notification if they want different
///     ringtones for each of their lines. See <see cref="PH_PROVIDERINFO" />  <para />
///
/// The ringtone used for the incoming call is selected in the following priority order <para/>
/// 1. Roaming ringtone if the call service provider is registered as roaming and there is a system wide roaming ringtone <para />
/// 2. Per call ringtone specified by the call service provider in the <see cref="PH_CALLINFOUPDATE" /> for the incoming call <para />
/// 3. Per call ringtone specified in the contact which is matched to the incoming call <para />
/// 4. Known contact ringtone if the incoming call is matched to a contact that does not have a specific ringtone and there's a system wide known contact ringtone<para />
/// 5. Per-line ringtone specified by the Call Service Provider <para />
/// 6. Call Service Provider specific ringtone <para />
/// 7. Default ringtone selected by the phone system if all the above options don't have a specified ringtone <para />
///
/// </summary>
/// </topic>

/// <topic name="Call_Service_Provider_APIs" displayname="Call Service Provider APIs">
/// <topic_scope tref="Categories" />
/// </topic>

/// <topic name="Provider_Host_APIs" displayname="Provider Host APIs">
/// <topic_scope tref="Categories" />
/// </topic>

/// <topic name="Provider_Data_Types" displayname="Data Types">
/// <topic_scope tref="Providers" />
/// </topic>

// Common errors handled by the controller:
#define E_SERVICEDISABLED HRESULT_FROM_WIN32(ERROR_SERVICE_DISABLED)  // The service is off (equivalent to flight mode) and thus cannot perform the requested operation
#define E_NOTREADY        HRESULT_FROM_WIN32(ERROR_NOT_READY)         // The Phone Service has not yet been initialized

DECLARE_HANDLE(HPHONECALL);
#define INVALID_HPHONECALL (HPHONECALL)0

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// <para> Call verbs that can be performed on a particular call. The Phone Service calls ProviderDoCallVerb with a particular
/// call verb as a parameter. Each call verb is coupled with an hcall on which to perform the verb and a PH_VERBPARAM that contains verb specific parameters
/// </para>
/// <seealso cref="ProviderDoCallVerb" />
/// <seealso cref="PH_VERBPARAM" />
/// </summary>
typedef enum PH_CALLVERB
{
    /// <summary>
    /// Dial a call. hCall is call handle to return with call update. PH_VERBPARAM is PH_DIALINFO
    /// <seealso cref="PH_DIALINFO" />
    /// </summary>
    PH_CALLVERB_DIAL                    = 0x00000001,
    /// <summary>
    /// End a call. hCall is call to end, PH_VERBPARAM is null  
    /// </summary>
    PH_CALLVERB_END                     = 0x00000002,
    /// <summary>
    /// Drop any active calls and accept any incoming or held calls, hCall is INVALID_HPHONECALL. PH_VERBPARAM is PH_DROPACCEPTINFO
    /// <seealso cref="PH_DROPACCEPTINFO" />
    /// </summary>
    PH_CALLVERB_DROPACTIVE_ACCEPTHELD   = 0x00000004,
    /// <summary>
    /// Place a call on hold. hCall is call to hold, PH_VERBPARAM is null 
    /// </summary>
    PH_CALLVERB_HOLD                    = 0x00000008,
    /// <summary>
    /// Make a held call active. hCall is call to  unhold. PH_VERBPARAM is null
    /// </summary>
    PH_CALLVERB_UNHOLD                  = 0x00000010,
    /// <summary>
    /// Swap two calls. hCall is INVALID_HPHONECALL. PH_VERBPARAM is PH_SWAPINFO containing the handles to calls to be swapped
    /// <seealso cref="PH_SWAPINFO" />
    /// </summary>
    PH_CALLVERB_SWAP                    = 0x00000020,
    /// <summary>
    /// Pull a call out of a conference. hCall is call to pull out of the conference. PH_VERBPARAM is null
    /// <seealso cref="PH_DIALINFO" />
    /// </summary>
    PH_CALLVERB_PRIVATE                 = 0x00000040,
    /// <summary>
    /// Conference calls together. hCall is INVALID_HPHONECALL. PH_VERBPARAM is PH_CONFERENCEINFO containing the handles of calls to conference together
    /// <seealso cref="PH_CONFERENCEINFO" />
    /// </summary>
    PH_CALLVERB_CONFERENCE              = 0x00000080,
    /// <summary>
    /// Place the phone on mute. hCall is INVALID_HPHONECALL. PH_VERBPARAM is null
    /// </summary>
    PH_CALLVERB_MUTE                    = 0x00000100,
    /// <summary>
    /// Unmute the phone. hCall is INVALID_HPHONECALL. PH_VERBPARAM is null
    /// </summary>
    PH_CALLVERB_UNMUTE                  = 0x00000200,
    /// <summary>
    /// Send flash to the network. hCall is call to send the flash on. [Optional]PH_VERBPARAM is LPTSTR of digit(s) to be sent with the flash
    /// <seealso cref="PH_DIALINFO" />
    /// </summary>
    PH_CALLVERB_FLASH                   = 0x00000400,
    /// <summary>
    /// Reject an incoming call. hCall is call to reject. [Optional]PH_VERBPARAM is BLOB of additional data sent to the call service provider  
    /// </summary>
    PH_CALLVERB_REJECT_INCOMING         = 0x00000800,
    /// <summary>
    /// Accept an incoming call. hCall is call to accept. [Optional]PH_VERBPARAM is BLOB of additional data sent to the call service provider  
    /// </summary>
    PH_CALLVERB_ACCEPT_INCOMING         = 0x00001000,
    /// <summary>
    /// Send DTMF over the network. hCall is call to send dtmf. PH_VERBPARAM is LPTSTR of DTMF digits to send
    /// </summary>
    PH_CALLVERB_SEND_DTMF               = 0x00002000,
    /// <summary>
    /// Redirect an incoming call to another number. hCall is call to redirect. PH_VERBPARAM is PH_DIALINFO
    /// </summary>
    PH_CALLVERB_REDIRECT                = 0x00004000,
    /// <summary>
    /// Transfer this call to another number. hCall is call to transfer. PH_VERBPARAM is PH_DIALINFO
    /// </summary>
    PH_CALLVERB_SIMPLE_TRANSFER         = 0x00008000,
} PH_CALLVERB;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// These flags specify the capabilities of the call service provider. These are set at registration
/// <seealso cref="ProviderTurnServiceOn" />
/// </summary>
typedef enum PH_PROVIDERFLAG
{
    /// <summary>
    /// The call service provider does not handle emergency calls
    /// </summary>
    PH_PROVIDERFLAG_ECALLSUPPORT_UNAVAILABLE         = 0x00000000,
    /// <summary>
    /// TThe call service provider can handle ecalls but could defer to a more suitable provider
    /// </summary>
    PH_PROVIDERFLAG_ECALLSUPPORT_CAPABLE             = 0x00000001,
    /// <summary>
    /// The call service provider can handle ecalls at all times. The call service provider MUST implement ProviderTurnServiceOn if it sets this flag
    /// </summary>
    PH_PROVIDERFLAG_ECALLSUPPORT_ALWAYS              = 0x00000002,
    /// <summary>
    /// The call service provider does not implement ProviderTurnServiceOn
    /// </summary>
    PH_PROVIDERFLAG_TURNSERVICEON_UNAVAILABLE        = 0x00000004,
} PH_PROVIDERFLAG;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Current state of call
/// <seealso cref="PH_CALL_INFO" />
/// </summary>
typedef enum PH_CALLSTATE
{
    /// <summary>
    /// The call is in an indeterminate state.  Usually this is the result of executing PH_CALLVERB_FLASH on a call.
    /// </summary>
    PH_CALLSTATE_AMBIGUOUS = 0,
    /// <summary>
    /// The call is an available incoming call
    /// </summary>
    PH_CALLSTATE_INCOMING = 1,
    /// <summary>
    /// The call is dialing
    /// </summary>
    PH_CALLSTATE_CALLING = 2,
    /// <summary>
    /// The call is active
    /// </summary>
    PH_CALLSTATE_TALKING = 3,
    /// <summary>
    /// The call is on hold
    /// </summary>
    PH_CALLSTATE_HOLD = 4,
    /// <summary>
    /// The call has been disconnected
    /// </summary>
    PH_CALLSTATE_IDLE = 5,
    /// <summary>
    /// The call is being transferred 
    /// </summary>T
    PH_CALLSTATE_TRANSFERRING = 6,
    /// <summary>
    /// Total number of call states
    /// </summary>
    PH_CALLSTATE_COUNT = 7
} PH_CALLSTATE;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Additional information about the current call state
/// <seealso cref="PH_CALLSTATE" />
/// </summary>
typedef enum PH_CALLSTATEREASON
{
    /// <summary>
    /// No additional information about the current call state
    /// </summary>
    PH_CALLSTATEREASON_NONE              = 0,
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that the other party was busy
    /// </summary>
    PH_CALLSTATEREASON_IDLE_BUSY         = 1, 
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that the other party did not answer
    /// </summary>
    PH_CALLSTATEREASON_IDLE_NOANSWER     = 2,                        
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that the number dialed was invalid
    /// </summary>
    PH_CALLSTATEREASON_IDLE_BADADDRESS   = 3,                  
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that the call was cancelled by the end-user
    /// </summary>
    PH_CALLSTATEREASON_IDLE_CANCELLED    = 4,                      
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that the SIM card was invalid
    /// </summary>
    PH_CALLSTATEREASON_IDLE_INVALIDSIMCARD = 5,                            
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that network service was not available
    /// </summary>
    PH_CALLSTATEREASON_IDLE_NETWORKSERVICENOTAVAILABLE = 6,  
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that the service is only handling emergency requests
    /// </summary>
    PH_CALLSTATEREASON_IDLE_EMERGENCYONLY = 7,               
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that an error occurred
    /// </summary>
    PH_CALLSTATEREASON_IDLE_ERROR = 8,                       
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that the network is congested
    /// </summary>
    PH_CALLSTATEREASON_IDLE_CONGESTION = 9,                  
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that the call was dropped by the network
    /// </summary>
    PH_CALLSTATEREASON_IDLE_NETWORKDROPPED = 10,                 
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that the call was barred
    /// </summary>
    PH_CALLSTATEREASON_IDLE_DESTINATIONBARRED = 11,           
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that call was FDN blocked
    /// </summary>
    PH_CALLSTATEREASON_IDLE_FDNRESTRICT = 12,                 
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that call was successfully transfered
    /// </summary>
    PH_CALLSTATEREASON_IDLE_TRANSFERCOMPLETE = 13,            
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that the call was blocked by USIM
    /// </summary>
    PH_CALLSTATEREASON_IDLE_SIMCALLBLOCKED = 14,              
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that the call was modified by USIM to another calltype
    /// </summary>
    PH_CALLSTATEREASON_IDLE_SIMCALLMODIFIEDTOUSSD = 15,       
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that service is off for the call service provider the call was made on
    /// </summary>
    PH_CALLSTATEREASON_IDLE_SERVICEOFF = 16, 
    /// <summary>
    /// PH_CALLSTATE_IDLE - Disconnect reason was that the called party rejected the call
    /// </summary>
    PH_CALLSTATEREASON_IDLE_REJECTED = 17, 
    /// <summary>
    /// PH_CALLSTATE_TALKING - The remote party has placed this call hold 
    /// </summary>
    PH_CALLSTATEREASON_TALKING_REMOTEHOLD = 18,                   
    /// <summary>
    /// Total count of call state reasons
    /// </summary>
    PH_CALLSTATEREASON_COUNT = 19
} PH_CALLSTATEREASON;


#define PH_CCH_OPERATOR (64)
#define PH_CCH_DTMF_STRING  (64)
#define PH_MAX_SIGNAL_STRENGTH   (100)

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Information about provider internal state. 
/// <seealso cref="HostSendNotification" />
/// </summary>
typedef enum PH_PROVIDERINFO
{  
    /// <summary>
    /// Count of voicemails on a particular line. WPARAM is vmail count, LPARAM is line number  
    /// </summary>    
    PH_PROVIDERINFO_VMAIL_COUNT = 0,
    /// <summary>
    /// The voicemail phone number for a particular line. WPARAM is the voicemail number, LPARAM is the line number
    /// </summary>
    PH_PROVIDERINFO_VMAIL_NUMBER = 1,
    /// <summary>
    /// The subscribed number for a particular line. WPARAM is the subscriber number, LPARAM is the line number
    /// </summary>    
    PH_PROVIDERINFO_SUBSCRIBER_NUMBER = 2,
    /// <summary>
    /// The name of the current network operator. WPARAM is LPCWSTR to operator name of max length PH_CCH_OPERATOR, including the null terminator.
    /// LPARAM is the line number this operator name goes with; use PH_INVALID_LINE_ID if all lines are on the same operator.
    /// </summary>
    PH_PROVIDERINFO_OPERATOR = 3,
    /// <summary>
    /// Change in service registration state. WPARAM is PH_REGISTRATIONSTATE value. LPARAM is ignored
    /// </summary>    
    PH_PROVIDERINFO_REG_CHANGE = 4,
    /// <summary>
    /// Change in service state. WPARAM is TRUE for service on, and FALSE for service off
    /// </summary>    
    PH_PROVIDERINFO_SERVICE_CHANGE = 5,
    /// <summary>
    /// Change in number of outgoing lines for the call service provider. WPARAM is the new line count for the call service provider.
    /// LPARAM is a bitmask specifying which lines should be hidden from the UI.  <seealso cref="PROVIDER_LINEDATA" />
    /// </summary>    
    PH_PROVIDERINFO_LINE_COUNT_CHANGE = 6,
    /// <summary>
    /// Change in default outgoing line. WPARAM is the new default outgoing line for the call service provider. Line numbers are 1 based.
    /// </summary>    
    PH_PROVIDERINFO_ACTIVE_LINE_CHANGE = 7,
    /// <summary>
    /// Change in mute state. WPARAM is TRUE for muted, and FALSE for unmuted 
    /// </summary>
    PH_PROVIDERINFO_MUTE_STATE = 8,
    /// <summary>
    /// Change in signal strength. WPARAM is signal strength in range of 0 to PH_MAX_SIGNAL_STRENGTH
    /// Call Service Providers should only notify the controller if there is a significant change in signal strength, especially
    /// if their service report signal strength changes very often
    /// </summary>      
    PH_PROVIDERINFO_SIGNAL_STRENGTH = 9,
    /// <summary>
    /// Change in call forwarding status for a particular line. WPARAM is TRUE if call forwarding is on for this line, FALSE if not. LPARAM is line number
    /// </summary>    
    PH_PROVIDERINFO_CALLFWD_STATUS = 10,
    /// <summary>
    /// Change the branding name associated with a line.  
    ///  WPARAM is the string to use for branding.
    ///  LPARAM is the line number; use PH_INVALID_LINE_ID to apply the branding name to all lines.
    /// If the branding information does not change dynamically or vary by line, it can be specified in the registry instead of via this notification.
    /// </summary>    
    PH_PROVIDERINFO_BRANDINGNAME = 11,
    /// <summary>
    /// Change the cobranding (or MVNO) name associated with a line.
    ///  WPARAM is the string to use for cobranding.
    ///  LPARAM is the line number; use PH_INVALID_LINE_ID to apply the cobranding name to all lines.
    /// If the branding information does not change dynamically or vary by line, it can be specified in the registry instead of via this notification.
    /// </summary>    
    PH_PROVIDERINFO_COBRANDINGNAME = 12,
    /// <summary>
    /// Change the branding image associated with a line.
    ///  WPARAM is a URI string specifying the location of the image.
    ///  LPARAM is the line number; use PH_INVALID_LINE_ID to apply the branding image to all lines.
    /// If the branding information does not change dynamically or vary by line, it can be specified in the registry instead of via this notification.
    /// </summary>    
    PH_PROVIDERINFO_BRANDINGIMAGE = 13,
    /// <summary>
    /// Change the cobranding (or MVNO) image associated with a line.
    ///  WPARAM is a URI string specifying the location of the image.
    ///  LPARAM is the line number; use PH_INVALID_LINE_ID to apply the cobranding image to all lines.
    /// If the branding information does not change dynamically or vary by line, it can be specified in the registry instead of via this notification.
    /// </summary>    
    PH_PROVIDERINFO_COBRANDINGIMAGE = 14,
    /// <summary>
    /// Change the voicemail icon.
    ///  WPARAM is a URI string specifying the location of the image.
    ///  LPARAM is the line number; use PH_INVALID_LINE_ID to apply the image to all lines.
    /// If the icon does not change dynamically or vary by line, it can be specified in the registry instead of via this notification.
    /// </summary>
    PH_PROVIDERINFO_VOICEMAILICON = 15,
    /// <summary>
    /// Change the missed call icon.
    ///  WPARAM is a URI string specifying the location of the image.
    ///  LPARAM is the line number; use PH_INVALID_LINE_ID to apply the image to all lines.
    /// If the icon does not change dynamically or vary by line, it can be specified in the registry instead of via this notification.
    /// </summary>
    PH_PROVIDERINFO_MISSEDCALLICON = 16,
    /// <summary>
    /// Change the ringtone.
    ///  WPARAM is pointer to SNDFILEINFO struct containing information about the ringtone. SND_SOUNDTYPE_FILE, SND_SOUNDTYPE_VIBRATE and SND_SOUNDTYPE_FILE
    ///  are the only valid sound types allowed
    ///  LPARAM is the line number; use PH_INVALID_LINE_ID to apply the ringtone to all lines.
    /// If the ringtone does not change dynamically or vary by line, it can be specified in the registry instead of via this notification.
    /// </summary>
    PH_PROVIDERINFO_RINGTONE = 17,
    /// <summary>
    /// Info message that the call service provider wants to display in the UI. WPARAM is LPCWSTR pointing to the message, LPARAM is LPCWSTR pointing to the title
    /// </summary>    
    PH_PROVIDERINFO_EXT = 18,
    /// <summary>
    /// Change the provider icon for one or all lines.
    ///  WPARAM is a URI string specifying the location of the image.
    ///  LPARAM is the line number; use PH_INVALID_LINE_ID to apply the image to all lines.
    /// If the icon does not change dynamically or vary by line, it can be specified in the registry instead of via this notification.
    /// </summary>
    PH_PROVIDERINFO_PROVIDERLINEICON = 19,
    /// <summary>
    /// Count of PH_PROVIDERINFO
    /// </summary>
    PH_PROVIDERINFO_COUNT = 20

} PH_PROVIDERINFO;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Service registration states
/// <seealso cref="HostSendNotification" />
/// </summary>
typedef enum PH_REGISTRATIONSTATE
{
    /// <summary>
    /// Not registered on a network and not searching for a new network
    /// </summary>
    PH_REGISTRATIONSTATE_UNREGISTERED = 0,            
    /// <summary>
    /// Searching for a network
    /// </summary>
    PH_REGISTRATIONSTATE_REGISTERING = 1,               
    /// <summary>
    /// Searching for a network, previous registration state was PH_REGISTRATION_STATE_DENIED
    /// </summary>
    PH_REGISTRATIONSTATE_REGISTERING_AFTER_DENIED = 2,  
    /// <summary>
    /// Registered on home network
    /// </summary>
    PH_REGISTRATIONSTATE_REGISTERED_HOME = 3,           
    /// <summary>
    /// Registered on a foreign network
    /// </summary>
    PH_REGISTRATIONSTATE_REGISTERED_ROAM = 4,           
    /// <summary>
    /// Registration denied
    /// </summary>
    PH_REGISTRATIONSTATE_DENIED = 5,                    
    /// <summary>
    /// Count of registration states
    /// </summary> 
    PH_REGISTRATIONSTATE_COUNT
} PH_REGISTRATIONSTATE;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Notifications to the call service provider of device wide changes related to the Phone Service 
/// <seealso cref="ProviderNotify" />
/// </summary>
typedef enum PH_NOTIFYPROVIDER 
{
    /// <summary>
    /// Change in in call volume. WPARAM is DWORD representing volume on a scale of 0 (low) to 0xFFFF (max speaker volume)
    /// </summary>
    PH_NOTIFYPROVIDER_INCALLVOLUME = 0,                
    /// <summary>
    /// Change in speaker phone state. WPARAM is TRUE for on, and FALSE for off  
    /// </summary>
    PH_NOTIFYPROVIDER_SPEAKERPHONE = 1,              
    /// <summary>
    /// Change in Bluetooth Audio Gateway routing. WPARAM is TRUE for on i.e audio being routed to bluetooth headset, and FALSE for off
    /// </summary>
    PH_NOTIFYPROVIDER_BT_AUDIO = 2,                 
} PH_NOTIFYPROVIDER;


#define PH_DIALOPTION_FORCESENDCALLERID  0x01    // Provider should send  caller ID for this call even if caller ID is turned off in general
#define PH_DIALOPTION_FORCEBLOCKCALLERID 0x02    // Provider should block caller ID for this call even if caller ID is turned on  in general

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Contains information used to dial a call. Used as the PH_VERBPARAM for PH_CALLVERB_DIAL, PH_CALLVERB_REDIRECT and PH_CALLVERB_TRANSFER
/// <seealso cref="PH_VERBPARAM" />
/// <seealso cref="PH_CALLVERB" />
/// <seealso cref="ProviderDoCallVerb" />
/// </summary>
typedef struct PH_DIALINFO
{
    /// <summary>
    /// Number to call
    /// </summary>
    LPTSTR pszNumber;
    /// <summary>
    /// Name of person being called. This maybe null
    /// </summary>
    LPTSTR pszName;
    /// <summary>
    /// Additional text to send along with the call. This maybe null
    /// </summary>
    LPTSTR pszCallAnnotation;
    /// <summary>
    /// Dial flags. This is a combination of PH_DIALOPTION flags
    /// </summary>
    DWORD dwFlags;                             
    /// <summary>
    /// The line to dial this number on. Only valid for PH_CALLVERB_DIAL
    /// </summary>
    UINT iLineNum;
    /// <summary>
    /// Extra data being passed to the call service provider by Phone Service client initiating the verb request
    /// </summary>
    BLOB blobProviderData;
} PH_DIALINFO;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Handle to two calls to be swapped. Used as the PH_VERBPARAM for PH_CALLVERB_SWAP
/// <seealso cref="PH_VERBPARAM" />
/// <seealso cref="PH_CALLVERB" />
/// <seealso cref="ProviderDoCallVerb" />
/// </summary>
typedef struct PH_SWAPINFO
{
    /// <summary>
    /// Handle to active call to be placed on hold
    /// </summary>
    HPHONECALL hCallTalking;
    /// <summary>
    /// Handle to held call to be activated
    /// </summary>
    HPHONECALL hCallHeld;
}PH_SWAPINFO;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Handle to two calls to be conferenced together. If both hCall1 and hCall2 are NULL, the call service provider should conference
/// all talking and held calls that it owns. Used as the PH_VERBPARAM for PH_CALLVERB_CONFERENCE
/// <seealso cref="PH_VERBPARAM" />
/// <seealso cref="PH_CALLVERB" />
/// <seealso cref="ProviderDoCallVerb" />
/// </summary>
typedef struct PH_CONFERENCEINFO
{
    /// <summary>
    /// Handle to call to add to a conference
    /// </summary>
    HPHONECALL hCall1;
    /// <summary>
    /// Handle to call to add to a conference
    /// </summary>
    HPHONECALL hCall2;
}PH_CONFERENCEINFO;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Handle to two calls: an active call to be dropped and an incoming or held call to be accepted.
/// Used as the PH_VERBPARAM for PH_CALLVERB_DROPACCEPTINFO
/// <seealso cref="PH_VERBPARAM" />
/// <seealso cref="PH_CALLVERB" />
/// <seealso cref="ProviderDoCallVerb" />
/// </summary>
typedef struct PH_DROPACCEPTINFO
{
    /// <summary>
    /// Handle to active call to disconnect
    /// </summary>
    HPHONECALL hCallActiveToDrop;
    /// <summary>
    /// Handle to incoming or held call to activate
    /// </summary>
    HPHONECALL hCallWaitingToAccept;
}PH_DROPACCEPTINFO;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Contains parameters used in call verb execution. Used as a parameter to ProviderDoCallVerb
/// <seealso cref="PH_CALLVERB" />
/// <seealso cref="PH_CONFERENCEINFO" />
/// <seealso cref="PH_DIALINFO" />
/// <seealso cref="PH_SWAPINFO" />
/// <seealso cref="PH_DROPACCEPTINFO" />
/// <seealso cref="ProviderDoCallVerb" />
/// </summary>
typedef union PH_VERBPARAM
{
    /// <summary>
    /// String of DTMF or dial digits to be used by PH_CALLVERB_FLASH or PH_CALLVERB_SEND_DTMF
    /// </summary>
    LPTSTR pszStr;   
    /// <summary>
    /// Used by PH_CALLVERB_CONFERENCE
    /// </summary>
    PH_CONFERENCEINFO confinfo;
    /// <summary>
    /// Used by PH_CALLVERB_DIAL, PH_CALLVERB_REDIRECT and PH_CALLVERB_TRANSFER
    /// </summary>
    PH_DIALINFO dialinfo;
    /// <summary>
    /// Used by PH_CALLVERB_SWAP
    /// </summary>
    PH_SWAPINFO swapinfo;
    /// <summary>
    /// Used by PH_CALLVERB_DROPACTIVEACCEPTHELD
    /// </summary>
    PH_DROPACCEPTINFO dropacceptinfo;
    /// <summary>
    /// Additional data passed to the call service provider by the Phone Service clients. Used by PH_CALLVERB_REJECT_INCOMING and PH_CALLVERB_ACCEPT_INCOMING
    /// </summary>    
    BLOB blobProviderData;    
}PH_VERBPARAM;


#define PH_CCH_NAME                 (80)
#define PH_CCH_NUMBER               (64)
#define PH_CB_MAX_PROVIDER_DATA     (2048)           // We won't hold more than 2 kB of data per call for a provider

#define PH_INVALID_LINE_ID          (0)

#define PH_UPDATE_VALID_CALL_STATE          (0x00000001)
#define PH_UPDATE_VALID_CONFERENCE_ID       (0x00000002)
#define PH_UPDATE_VALID_LINE_NUM            (0x00000004)
#define PH_UPDATE_VALID_NUMBER              (0x00000008)
#define PH_UPDATE_VALID_NAME                (0x00000010)
#define PH_UPDATE_VALID_CALL_STATE_REASON   (0x00000020)
#define PH_UPDATE_VALID_CALL_DIRECTION      (0x00000040)
#define PH_UPDATE_VALID_CALLER_ID_STATE     (0x00000080)
#define PH_UPDATE_VALID_CALL_BEHAVIOR_FLAGS (0x00000100)
#define PH_UPDATE_VALID_CALL_FLAGS          (0x00000200)
#define PH_UPDATE_VALID_EXTRA_DATA          (0x00000400)
#define PH_UPDATE_VALID_VERB_AVAILABILITY   (0x00000800)
#define PH_UPDATE_VALID_DISPLAY_NUMBER      (0x00001000)
#define PH_UPDATE_VALID_CALL_TRANSPORT      (0x00002000)
#define PH_UPDATE_VALID_RINGTONE            (0x00004000)
#define PH_UPDATE_VALID_RINGTONE_SOUNDTYPE  (0x00008000)


#define PH_UPDATE_FLAGS_CALL_HIDDEN         (0x00000001)   // Don't expose this call to any Phone API clients, including the UI

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Flags that control how a call is displayed in the UI or logged to call history
/// <seealso cref="PH_CALLINFOUPDATE" />
/// <seealso cref="HostUpdateCalls" />
/// </summary>
typedef enum PH_CALLBEHAVIORFLAGS
{
    /// <summary>
    /// No call data will be written to the call log for this call
    /// </summary>
    PH_CALLBEHAVIORFLAGS_NOLOGENTRY           = 0x00000001,  
    /// <summary>
    /// No caller id lookup will be performed for this call.
    /// </summary>
    PH_CALLBEHAVIORFLAGS_NOCALLERIDLOOKUP     = 0x00000002,   
    /// <summary>
    /// Prevent call progress from coming forward when this call is first updated.
    /// </summary>
    PH_CALLBEHAVIORFLAGS_HIDEPROGRESSONCALL   = 0x00000004,   
    /// <summary>
    /// Show call progress with the keypad raised when the call connects
    /// </summary>
    PH_CALLBEHAVIORFLAGS_SHOWKEYPADONCALL     = 0x00000008,   
} PH_CALLBEHAVIORFLAGS;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Direction of a call
/// <seealso cref="PH_CALLINFOUPDATE" />
/// <seealso cref="HostUpdateCalls" />
/// </summary>
typedef enum PH_CALLDIRECTION
{
    /// <summary>
    /// This is an incoming call received by the device
    /// </summary>
    PH_CALLDIRECTION_INCOMING = 0,
    /// <summary>
    /// This is an outgoing call made on the device
    /// </summary>
    PH_CALLDIRECTION_OUTGOING = 1
} PH_CALLDIRECTION;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Caller id state of a call
/// <seealso cref="PH_CALLINFOUPDATE" />
/// <seealso cref="HostUpdateCalls" />
/// </summary>
typedef enum PH_CALLERID
{
    /// <summary>
    /// Caller id information has not been provided by the network
    /// </summary>
    PH_CALLERID_UNAVAILABLE = 0,  
    /// <summary>
    /// Caller id information has been blocked by the caller
    /// </summary>
    PH_CALLERID_BLOCKED = 1,      
    /// <summary>
    /// Caller id was provided by the network.
    /// </summary>
    PH_CALLERID_VALID = 2,        
    /// <summary>
    /// Caller id information is unknown, normally because the end-user has pressed flash
    /// </summary>
    PH_CALLERID_AMBIGUOUS = 3,    
} PH_CALLERID;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Call transport of a call
/// <seealso cref="PH_CALLINFOUPDATE" />
/// <seealso cref="PHUpdateCalls" />
/// </summary>
typedef enum PH_CALLTRANSPORT
{
    /// <summary>
    /// Call transport is unknown, e.g. before a provider has declared it's transport
    /// </summary>
    PH_CALLTRANSPORT_UNKNOWN = 0x0,
    /// <summary>
    /// Call transport is a cellular call, e.g. over a GSM or CDMA network
    /// </summary>
    PH_CALLTRANSPORT_CELLULAR = 0x1,
    /// <summary>
    /// Call transport is a data call, e.g. over a VoIP or IM provider
    /// </summary>
    PH_CALLTRANSPORT_DATA = 0x2,
} PH_CALLTRANSPORT;

/// <topic_scope tref="Provider_Data_Types" />
/// <summary>
/// Updated information about a particular call
/// <seealso cref="PH_CALLSTATE" />
/// <seealso cref="PH_CALLSTATEREASON" />
/// <seealso cref="PH_CALLDIRECTION" />
/// <seealso cref="PH_CALLERID" />
/// <seealso cref="PH_CALLBEHAVIORFLAGS" />
/// <seealso cref="PH_CALLVERB" />
/// <seealso cref="PH_CALLTRANSPORT" />
/// <seealso cref="HostUpdateCalls" />
/// </summary>
typedef struct PH_CALLINFOUPDATE
{
    /// <summary>
    /// Indicates which fields in the struct are valid. Any combination of PH_UPDATE_VALID flags
    /// </summary>
    DWORD dwValidFields;                    
    /// <summary>
    /// Handle of call being updated. Always valid
    /// </summary>
    HPHONECALL hCall;                       
    /// <summary>
    /// Handle of conference that this call is in. Valid if PH_UPDATE_VALID_CONFERENCE_ID is set in dwValidFields.
    /// </summary>
    HPHONECALL hConference;                
    /// <summary>
    /// Set of verbs applicable to this call. Valid if PH_UPDATE_VALID_VERB_AVAILABILITY is set in dwValidFields. 
    /// </summary>
    DWORD dwAvailableVerbs;  
    /// <summary>
    /// Line the call is on. Line numbers are 1 based. Valid if PH_UPDATE_VALID_LINE_NUM is set in dwValidFields.
    /// </summary>
    UINT iLineNum;                        
    /// <summary>
    /// Name of person associated with this call. Valid if PH_UPDATE_VALID_NAME is set in dwValidFields.
    /// </summary>
    TCHAR szName[PH_CCH_NAME];                
    /// <summary>
    /// Phone number associated with this call. Valid if PH_UPDATE_VALID_NUMBER is set in dwValidFields. 
    /// </summary>
    TCHAR szNumber[PH_CCH_NUMBER];          
    /// <summary>
    /// Phone number to display for this call. Valid if PH_UPDATE_VALID_DISPLAY_NUMBER is set in dwValidFields.
    /// This field does not need to be set unless special non-default formatting is desired.
    /// </summary>
    TCHAR szDisplayNumber[PH_CCH_NUMBER]; 
    /// <summary>
    /// Filepath of ringtone to use for this incoming call. Valid if PH_UPDATE_VALID_RINGTONE is set in dwValidFields
    /// This field is ignored if the sndtype is not SND_SOUNDTYPE_FILE
    /// </summary>
    TCHAR szRingTone[MAX_PATH];
    /// <summary>
    /// Soundtype of the ringtone. Valid if PH_UPDATE_VALID_RINGTONE_SOUNDTYPE is set in dwValidFieldds.
    /// Valid values are SND_SOUNDTYPE_FILE if the szRingTone field points to a valid ringtone,
    /// SND_SOUNDTYPE_VIBRATE for vibrate instead of playing the ringtone, and SND_SOUNDTYPE_NONE for a silent incoming call ringtone
    /// </summary>
    SND_SOUNDTYPE sndtype;
    /// <summary>
    /// Call state of this call. Valid if PH_UPDATE_VALID_CALL_STATE is set in dwValidFields. 
    /// </summary>
    PH_CALLSTATE callstate;                  
    /// <summary>
    /// Additional information about the state of this call. Valid if PH_UPDATE_VALID_CALL_STATE_REASON is set in dwValidFields.
    /// </summary>
    PH_CALLSTATEREASON callstatereason;     
    /// <summary>
    /// Direction of the call. Valid if PH_UPDATE_VALID_CALL_DIRECTION is set in dwValidFields.
    /// </summary>
    PH_CALLDIRECTION direction;             
    /// <summary>
    /// Caller id state of the call. Valid if PH_UPDATE_VALID_CALLER_ID_STATE is set in dwValidFields. 
    /// </summary>
    PH_CALLERID cidstate;              
    /// <summary>
    /// UI display and call history options for this call. Valid if PH_UPDATE_VALID_CALL_BEHAVIOR_FLAGS is set in dwValidFields. 
    /// </summary>
    PH_CALLBEHAVIORFLAGS callbehaviorflags;
    /// <summary>
    /// Call transport of the call.  Valid if PH_UPDATE_VALID_CALL_TRANSPORT is set in dwValidFields.
    /// </summary>
    PH_CALLTRANSPORT calltransport;
    /// <summary>
    /// Set PH_UPDATE_FLAGS for this call. Valid if PH_UPDATE_VALID_CALL_FLAGS is set in dwValidFields. 
    /// </summary>
    DWORD dwFlags;                          
    /// <summary>
    /// Count in bytes of data pointed to by pbExtraData. Valid if PH_UPDATE_VALID_EXTRA_DATA is set in dwValidFields.
    /// </summary>
    UINT cbExtraData;                    
    /// <summary>
    /// Pointer to data to pass to Phone Service clients. Maximum size of data allowed is PH_CB_MAX_PROVIDER_DATA bytes. Valid if PH_UPDATE_VALID_EXTRA_DATA is set in dwValidFields.
    /// </summary>
    BYTE* pbExtraData;                       
} PH_CALLINFOUPDATE;

/// <topic_scope tref="Provider_Host_APIs" />
/// <summary>
/// Notify the Phone Service of changes in call state
/// <seealso cref="PH_CALLINFOUPDATE" />
/// </summary>
/// <param name="pguidProvider">Call service provider's unique id</param>
/// <param name="pCallList">array of PH_CALLINFOUPDATE structures, one structure for each call being updated</param>
/// <param name="cCalls">count of PH_CALLINFOUPDATE structures in the array pointed to by prgCallList</param>
/// <returns> 
///     <para>S_OK - Success</para>
///     <para>E_INVALIDARG</para>
///     <para>E_NOTREADY - The Phone Service has not yet been initialized</para>
///     <para>E_FAIL -other</para>
/// </returns>
/// <remarks>
/// prgCallList should only point to calls whose call data has changed. Call service providers should not send 
/// updates for calls whose data hasn't changed. However, if a change in data in one call causes a change in available verbs
/// for other calls owned by the same call service provider, it should notify the Phone Service of all these changes at once
/// </remarks>
HRESULT HostUpdateCalls(__in const GUID *pguidProvider, __in_ecount(cCalls) const PH_CALLINFOUPDATE *pCallList, UINT cCalls);

/// <topic_scope tref="Provider_Host_APIs" />
/// <summary>
/// Notify the Phone Service that another call service provider has taken over ownership of a call
/// </summary>
/// <param name="pguidProvider">Call service provider's unique id</param>
/// <param name="hCall">HPHONECALL of call to  be handed over to call service provider identified by pguidNewProvider</param>
/// <param name="pguidNewProvider">pointer to guid of call service provider assuming ownership of this call</param>
/// <returns> 
///     <para>S_OK - Success</para>
///     <para>E_INVALIDARG</para>
///     <para>E_NOTREADY - The Phone Service has not yet been initialized</para>
///     <para>E_FAIL -other</para>
/// </returns>
/// <remarks>
/// All subsequent call control commands related to hCall will be sent to the call service provider that now owns this call. The Phone Service will
/// ignore any subsequent updates regarding this call that are sent by the previous owner 
/// </remarks>
HRESULT HostHandoffCall(__in const GUID *pguidProvider, HPHONECALL hCall, __in const GUID* pguidNewProvider);

/// <topic_scope tref="Provider_Host_APIs" />
/// <summary>
/// Notify the Phone Service of changes in non-call related state
/// <seealso cref="PH_PROVIDERINFO" />
/// </summary>
/// <param name="pguidProvider">Call service provider's unique id</param>
/// <param name="info">particular item being updated. See PH_PROVIDERINFO for more information </param>
/// <param name="wParam">See PH_PROVIDERINFO for more information</param>
/// <param name="lParam">See PH_PROVIDERINFO for more information</param>
/// <returns> 
///     <para>S_OK - Success</para>
///     <para>E_INVALIDARG</para>
///     <para>E_NOTREADY - The Phone Service has not yet been initialized</para>
///     <para>E_FAIL -other</para>
/// </returns>
/// <remarks>
/// The call service provider should use this function to update the Phone Service of initial state during/after handling ProviderInitialize and
/// any future state changes. See PH_PROVIDERINFO for the list of items that can be updated.
/// </remarks>
HRESULT HostSendNotification(__in const GUID *pguidProvider, PH_PROVIDERINFO info, WPARAM wParam, LPARAM lParam);

/// <topic_scope tref="Provider_Host_APIs" />
/// <summary>
/// Notify the Phone Service of the asynchronous result of verb execution
/// <seealso cref="ProviderDoCallVerb" />
/// </summary>
/// <param name="pguidProvider">Call service provider's unique id</param>
/// <param name="dwRequestID">id of the verb request. This should match the id passed in to the call service provider during the call to ProviderDoCallVerb </param>
/// <param name="hrResult">Success or error code associated with the verb request</param>
/// <returns> 
///     <para>S_OK - Success</para>
///     <para>E_INVALIDARG</para>
///     <para>E_NOTREADY - The Phone Service has not yet been initialized</para>
///     <para>E_FAIL -other</para>
/// </returns>
/// <remarks>
/// If the call to ProviderDoCallVerb fails synchronously and returns an error code, the call service provider does not need to send an asynchronous result.
/// However, if ProviderDoCallVerb returns S_OK, the Phone Service expects the call service provider to notify it of the success/failure of the 
/// asynchronous part of the verb execution. This also applies for call control verbs that do not execute asynchronously
/// </remarks>
HRESULT HostSendResult(__in const GUID *pguidProvider, DWORD dwRequestID, HRESULT hrResult);

/// <topic_scope tref="Provider_Host_APIs" />
/// <summary>
/// Generate a valid call handle to use in call state notifications to the controller
/// </summary>
/// <param name="pguidProvider">Call service provider's unique id</param>
/// <param name="phCall">Pointer to call handle generated by this function</param>
/// <returns> 
///     <para>S_OK - success</para>
///     <para>E_INVALIDARG</para>
///     <para>E_NOTREADY - The Phone Service has not yet been initialized</para>
///     <para>E_FAIL - failure</para>
/// </returns>
/// <remarks>
/// The call service provider should use this function to generate a unique call handle for a call they
/// plan on notifying the Phone Service about. This handle uniquely identifies the call during its lifetime.
/// The call service provider should call this once for every new incoming call and conference notification it sends to 
/// the Phone Service. For calls being dialed, the Phone Service will pass the handle to use with the dial request
/// </remarks>
HRESULT HostGenerateCallHandle(__in const GUID *pguidProvider, __out HPHONECALL *phCall);

typedef HRESULT (*HOST_UPDATECALLS)(const GUID *pguidProvider, const PH_CALLINFOUPDATE *pCallList, UINT cCalls);
typedef HRESULT (*HOST_HANDOFFCALL)(const GUID *pguidProvider, HPHONECALL hCall, const GUID* pguidNewProvider);
typedef HRESULT (*HOST_SENDNOTIFICATION)(const GUID *pguidProvider, PH_PROVIDERINFO info, WPARAM wParam, LPARAM lParam);
typedef HRESULT (*HOST_SENDRESULT)(const GUID *pguidProvider, DWORD dwRequestID, HRESULT hrResult);
typedef HRESULT (*HOST_GENERATECALLHANDLE)(__in const GUID *pguidProvider, __out HPHONECALL *phCall);

/// <topic_scope tref="Call_Service_Provider_APIs" />
/// <summary>
/// Exported by call service providers. Called by the Phone Service to initialize the call service provider on boot
/// </summary>
/// <param name="pguidProvider">Call service provider's unique id</param>
/// <returns> 
///     <para>S_OK - Success</para>
///     <para>E_FAIL - Error</para>
/// </returns>
/// <remarks>
///     <para>
///     This is a mandatory export. The call service provider will not be loaded if this function is not exported.
///     </para>
///     <para> 
///     This is the first function the Phone Service calls after it loads the call service provider. 
///     The call service provider should perform any necessary initialization and subsequently send initial state using HostSendNotification
///     </para>
/// </remarks>
HRESULT ProviderInitialize(__in const GUID *pguidProvider);

/// <topic_scope tref="Call_Service_Provider_APIs" />
/// <summary>
/// Exported by call service providers. Called by the Phone Service to uninitialize the call service provider on shutdown
/// </summary>
/// <param name="pguidProvider">Call service provider's unique id</param>
/// <returns> 
///     <para>S_OK - Success</para>
///     <para>E_FAIL - Error</para>
/// </returns>
/// <remarks>
///     <para>
///     This is a mandatory export. The call service provider will not be loaded if this function is not exported.
///     </para>
/// </remarks>
HRESULT ProviderUninitialize(__in const GUID *pguidProvider);

/// <topic_scope tref="Call_Service_Provider_APIs" />
/// <summary>
/// Exported by call service providers. The Phone Service calls this function to execute a call verb
/// <seealso cref="PH_CALLVERB" />
/// <seealso cref="PH_VERBPARAM" />
/// </summary>
/// <param name="pguidProvider">Call service provider's unique id</param>
/// <param name="verb">call control verb to execute</param>
/// <param name="hCall">call to execute the verb on. Could be INVALID_HPHONECALL. See PH_CALLVERB enum for more information</param>
/// <param name="pVerbParam">pointer to union containing extra parameters for the verb request. Could be NULL. See PH_CALLVERB enum for more information</param>
/// <param name="dwRequestID">unique id associated with this verb request</param>
/// <returns> 
///     <para>S_OK - Success</para>
///     <para>E_SERVICEDISABLED - If the call service provider fails to execute this verb due to lack of registration/service off </para>
///     <para>E_FAIL - Error</para>
/// </returns>
/// <remarks>
///     <para>
///     This is a mandatory export. The call service provider will not be loaded if this function is not exported.
///     </para>
///     <para>
///     If verb execution succeeds, this function should return S_OK. The call service provider should also call HostSendResult with dwRequestID and the success/error code
///     of the asynchronous execution of the verb, regardless of whether further execution is necessary.
///     </para>
///     <para> 
///     If verb execution fails before this function returns, it should return E_FAIL and the call service provider should not call HostSendResult 
///     </para>
///     <para>
///     The Phone Service will not send down a verb request that is not supported by the call service provider, as indicated by the dwAvailableVerbs sent up with the PH_CALLINFOUPDATEs for
///     the call service provider calls. However, the Phone Service will assume that PH_CALLVERB_DIAL is always valid for all call service providers, and that all calls support PH_CALLVERB_END
///     </para>
/// </remarks>
HRESULT ProviderDoCallVerb(__in const GUID *pguidProvider, PH_CALLVERB verb, HPHONECALL hCall, __in_opt PH_VERBPARAM *pVerbParam, DWORD dwRequestID);

/// <topic_scope tref="Call_Service_Provider_APIs" />
/// <summary>
/// Exported by call service providers. The Phone Service calls this function to notify the call service provider of changes in device wide state
/// <seealso cref="PH_NOTIFYPROVIDER" />
/// </summary>
/// <param name="pguidProvider">Call service provider's unique id</param>
/// <param name="phNotify">state that changed. see PH_NOTIFYPROVIDER for more information</param>
/// <param name="wParam">See PH_NOTIFYPROVIDER for more information</param>
/// <param name="lParam">See PH_NOTIFYPROVIDER for more information</param>
/// <returns> 
///     <para>S_OK - Success</para>
///     <para>E_FAIL - Error</para>
/// </returns>
/// <remarks>
/// This is a mandatory export. The call service provider will not be loaded if this function is not exported. The call service provider should return S_OK
/// even if it does not handle the notification 
/// </remarks>
HRESULT ProviderNotify(__in const GUID *pguidProvider, PH_NOTIFYPROVIDER phNotify, WPARAM wParam, LPARAM lParam);

/// <topic_scope tref="Call_Service_Provider_APIs" />
/// <summary>
/// API exported by call service providers. The Phone Service calls this function to change the line number that outgoing calls are made on
/// </summary>
/// <param name="pguidProvider">Call service provider's unique id</param>
/// <param name="iNewLine">new line</param> 
/// <returns>
///     <para>S_OK - Success</para>
///     <para>E_FAIL - Error</para>
/// </returns>
/// <remarks>
///     <para>
///     This is an optional export if the call service provider exposes only one line.
///      Otherwise the call service provider must implement it and must call 
///      HostSendNotification with PH_PROVIDERINFO_ACTIVE_LINE_CHANGE to notify the 
///      Phone Service of the updated line.
///     </para>
///     <para>
///     Line numbers are 1 based
///     </para>
/// </remarks>
HRESULT ProviderChangeActiveLine(__in const GUID *pguidProvider, UINT iNewLine);

/// <topic_scope tref="Call_Service_Provider_APIs" />
/// <summary>
/// API exported by call service providers. The Phone Service calls this function to have the call service provider turn its service/radio on and register on its network.
/// <seealso cref="PH_PROVIDERFLAG" />
/// </summary>
/// <param name="pguidProvider">Call service provider's unique id</param>
/// <returns>
///     <para>S_OK - Success</para>
///     <para>E_FAIL - Error</para>
/// </returns>
/// <remarks>
///     <para> 
///     This is an optional export. If the call service provider does not support turning on its service and registering automatically after being in flight mode,
///     it should set PH_PROVIDERFLAG_TURNSERVICEON_UNAVAILABLE in its registration flags. However, any provider that supports PH_PROVIDERFLAG_ECALLSUPPORT_ALWAYS
///     must export ProviderTurnServiceOn
///     </para>
///     <para>
///     If this function succeeds, the call service provider should notify the Phone Service of the new service and registration state using HostSendNotification.
///     </para>
///     <para>
///     If this function is called while service is disabled on the call service provider, the call service provider should cache the change of line and apply it when service is restored.
///     </para>
/// </remarks>
HRESULT ProviderTurnServiceOn(__in const GUID *pguidProvider);


typedef HRESULT (*PROVIDER_INITIALIZE)(const GUID *pguidProvider);
typedef HRESULT (*PROVIDER_UNINITIALIZE)(const GUID *pguidProvider);
typedef HRESULT (*PROVIDER_DOCALLVERB)(const GUID *pguidProvider, PH_CALLVERB verb, HPHONECALL hCall, PH_VERBPARAM *pVerbParam, DWORD dwRequestID);
typedef HRESULT (*PROVIDER_NOTIFY)(const GUID *pguidProvider, PH_NOTIFYPROVIDER phNotify, WPARAM wParam, LPARAM lParam);
typedef HRESULT (*PROVIDER_CHANGEACTIVELINE)(const GUID *pguidProvider, UINT iNewLine);
typedef HRESULT (*PROVIDER_TURNSERVICEON)(const GUID *pguidProvider);

#endif // _PHONEPROVIDERAPIS_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\playlist.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0543 */
/* Compiler settings for playlist.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __playlist_h__
#define __playlist_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IAMPlayListItem_FWD_DEFINED__
#define __IAMPlayListItem_FWD_DEFINED__
typedef interface IAMPlayListItem IAMPlayListItem;
#endif 	/* __IAMPlayListItem_FWD_DEFINED__ */


#ifndef __IAMPlayList_FWD_DEFINED__
#define __IAMPlayList_FWD_DEFINED__
typedef interface IAMPlayList IAMPlayList;
#endif 	/* __IAMPlayList_FWD_DEFINED__ */


#ifndef __IAMRebuild_FWD_DEFINED__
#define __IAMRebuild_FWD_DEFINED__
typedef interface IAMRebuild IAMRebuild;
#endif 	/* __IAMRebuild_FWD_DEFINED__ */


#ifndef __IBufferingTime_FWD_DEFINED__
#define __IBufferingTime_FWD_DEFINED__
typedef interface IBufferingTime IBufferingTime;
#endif 	/* __IBufferingTime_FWD_DEFINED__ */


/* header files for imported files */
#include "unknwn.h"
#include "strmif.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_playlist_0000_0000 */
/* [local] */ 


enum AMPlayListItemFlags
    {	AMPLAYLISTITEM_CANSKIP	= 0x1,
	AMPLAYLISTITEM_CANBIND	= 0x2
    } ;


extern RPC_IF_HANDLE __MIDL_itf_playlist_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_playlist_0000_0000_v0_0_s_ifspec;

#ifndef __IAMPlayListItem_INTERFACE_DEFINED__
#define __IAMPlayListItem_INTERFACE_DEFINED__

/* interface IAMPlayListItem */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAMPlayListItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("56a868ff-0ad4-11ce-b03a-0020af0ba770")
    IAMPlayListItem : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetFlags( 
            /* [out] */ DWORD *pdwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceCount( 
            /* [out] */ DWORD *pdwSources) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceURL( 
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ BSTR *pbstrURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceStart( 
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ REFERENCE_TIME *prtStart) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceDuration( 
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ REFERENCE_TIME *prtDuration) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceStartMarker( 
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ DWORD *pdwMarker) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceEndMarker( 
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ DWORD *pdwMarker) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceStartMarkerName( 
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ BSTR *pbstrStartMarker) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceEndMarkerName( 
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ BSTR *pbstrEndMarker) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLinkURL( 
            /* [out] */ BSTR *pbstrURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScanDuration( 
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ REFERENCE_TIME *prtScanDuration) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAMPlayListItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAMPlayListItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAMPlayListItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAMPlayListItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetFlags )( 
            IAMPlayListItem * This,
            /* [out] */ DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceCount )( 
            IAMPlayListItem * This,
            /* [out] */ DWORD *pdwSources);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceURL )( 
            IAMPlayListItem * This,
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ BSTR *pbstrURL);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceStart )( 
            IAMPlayListItem * This,
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ REFERENCE_TIME *prtStart);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceDuration )( 
            IAMPlayListItem * This,
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ REFERENCE_TIME *prtDuration);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceStartMarker )( 
            IAMPlayListItem * This,
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ DWORD *pdwMarker);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceEndMarker )( 
            IAMPlayListItem * This,
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ DWORD *pdwMarker);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceStartMarkerName )( 
            IAMPlayListItem * This,
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ BSTR *pbstrStartMarker);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceEndMarkerName )( 
            IAMPlayListItem * This,
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ BSTR *pbstrEndMarker);
        
        HRESULT ( STDMETHODCALLTYPE *GetLinkURL )( 
            IAMPlayListItem * This,
            /* [out] */ BSTR *pbstrURL);
        
        HRESULT ( STDMETHODCALLTYPE *GetScanDuration )( 
            IAMPlayListItem * This,
            /* [in] */ DWORD dwSourceIndex,
            /* [out] */ REFERENCE_TIME *prtScanDuration);
        
        END_INTERFACE
    } IAMPlayListItemVtbl;

    interface IAMPlayListItem
    {
        CONST_VTBL struct IAMPlayListItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAMPlayListItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAMPlayListItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAMPlayListItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAMPlayListItem_GetFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetFlags(This,pdwFlags) ) 

#define IAMPlayListItem_GetSourceCount(This,pdwSources)	\
    ( (This)->lpVtbl -> GetSourceCount(This,pdwSources) ) 

#define IAMPlayListItem_GetSourceURL(This,dwSourceIndex,pbstrURL)	\
    ( (This)->lpVtbl -> GetSourceURL(This,dwSourceIndex,pbstrURL) ) 

#define IAMPlayListItem_GetSourceStart(This,dwSourceIndex,prtStart)	\
    ( (This)->lpVtbl -> GetSourceStart(This,dwSourceIndex,prtStart) ) 

#define IAMPlayListItem_GetSourceDuration(This,dwSourceIndex,prtDuration)	\
    ( (This)->lpVtbl -> GetSourceDuration(This,dwSourceIndex,prtDuration) ) 

#define IAMPlayListItem_GetSourceStartMarker(This,dwSourceIndex,pdwMarker)	\
    ( (This)->lpVtbl -> GetSourceStartMarker(This,dwSourceIndex,pdwMarker) ) 

#define IAMPlayListItem_GetSourceEndMarker(This,dwSourceIndex,pdwMarker)	\
    ( (This)->lpVtbl -> GetSourceEndMarker(This,dwSourceIndex,pdwMarker) ) 

#define IAMPlayListItem_GetSourceStartMarkerName(This,dwSourceIndex,pbstrStartMarker)	\
    ( (This)->lpVtbl -> GetSourceStartMarkerName(This,dwSourceIndex,pbstrStartMarker) ) 

#define IAMPlayListItem_GetSourceEndMarkerName(This,dwSourceIndex,pbstrEndMarker)	\
    ( (This)->lpVtbl -> GetSourceEndMarkerName(This,dwSourceIndex,pbstrEndMarker) ) 

#define IAMPlayListItem_GetLinkURL(This,pbstrURL)	\
    ( (This)->lpVtbl -> GetLinkURL(This,pbstrURL) ) 

#define IAMPlayListItem_GetScanDuration(This,dwSourceIndex,prtScanDuration)	\
    ( (This)->lpVtbl -> GetScanDuration(This,dwSourceIndex,prtScanDuration) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAMPlayListItem_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_playlist_0000_0001 */
/* [local] */ 


enum AMPlayListFlags
    {	AMPLAYLIST_STARTINSCANMODE	= 0x1,
	AMPLAYLIST_FORCEBANNER	= 0x2
    } ;

enum AMPlayListEventFlags
    {	AMPLAYLISTEVENT_RESUME	= 0,
	AMPLAYLISTEVENT_BREAK	= 0x1,
	AMPLAYLISTEVENT_NEXT	= 0x2,
	AMPLAYLISTEVENT_MASK	= 0xf,
	AMPLAYLISTEVENT_REFRESH	= 0x10
    } ;


extern RPC_IF_HANDLE __MIDL_itf_playlist_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_playlist_0000_0001_v0_0_s_ifspec;

#ifndef __IAMPlayList_INTERFACE_DEFINED__
#define __IAMPlayList_INTERFACE_DEFINED__

/* interface IAMPlayList */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAMPlayList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("56a868fe-0ad4-11ce-b03a-0020af0ba770")
    IAMPlayList : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetFlags( 
            /* [out] */ DWORD *pdwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItemCount( 
            /* [out] */ DWORD *pdwItems) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItem( 
            /* [in] */ DWORD dwItemIndex,
            /* [out] */ IAMPlayListItem **ppItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNamedEvent( 
            /* [in] */ WCHAR *pwszEventName,
            /* [in] */ DWORD dwItemIndex,
            /* [out] */ IAMPlayListItem **ppItem,
            /* [out] */ DWORD *pdwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRepeatInfo( 
            /* [out] */ DWORD *pdwRepeatCount,
            /* [out] */ DWORD *pdwRepeatStart,
            /* [out] */ DWORD *pdwRepeatEnd) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAMPlayListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAMPlayList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAMPlayList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAMPlayList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetFlags )( 
            IAMPlayList * This,
            /* [out] */ DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetItemCount )( 
            IAMPlayList * This,
            /* [out] */ DWORD *pdwItems);
        
        HRESULT ( STDMETHODCALLTYPE *GetItem )( 
            IAMPlayList * This,
            /* [in] */ DWORD dwItemIndex,
            /* [out] */ IAMPlayListItem **ppItem);
        
        HRESULT ( STDMETHODCALLTYPE *GetNamedEvent )( 
            IAMPlayList * This,
            /* [in] */ WCHAR *pwszEventName,
            /* [in] */ DWORD dwItemIndex,
            /* [out] */ IAMPlayListItem **ppItem,
            /* [out] */ DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetRepeatInfo )( 
            IAMPlayList * This,
            /* [out] */ DWORD *pdwRepeatCount,
            /* [out] */ DWORD *pdwRepeatStart,
            /* [out] */ DWORD *pdwRepeatEnd);
        
        END_INTERFACE
    } IAMPlayListVtbl;

    interface IAMPlayList
    {
        CONST_VTBL struct IAMPlayListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAMPlayList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAMPlayList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAMPlayList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAMPlayList_GetFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetFlags(This,pdwFlags) ) 

#define IAMPlayList_GetItemCount(This,pdwItems)	\
    ( (This)->lpVtbl -> GetItemCount(This,pdwItems) ) 

#define IAMPlayList_GetItem(This,dwItemIndex,ppItem)	\
    ( (This)->lpVtbl -> GetItem(This,dwItemIndex,ppItem) ) 

#define IAMPlayList_GetNamedEvent(This,pwszEventName,dwItemIndex,ppItem,pdwFlags)	\
    ( (This)->lpVtbl -> GetNamedEvent(This,pwszEventName,dwItemIndex,ppItem,pdwFlags) ) 

#define IAMPlayList_GetRepeatInfo(This,pdwRepeatCount,pdwRepeatStart,pdwRepeatEnd)	\
    ( (This)->lpVtbl -> GetRepeatInfo(This,pdwRepeatCount,pdwRepeatStart,pdwRepeatEnd) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAMPlayList_INTERFACE_DEFINED__ */


#ifndef __IAMRebuild_INTERFACE_DEFINED__
#define __IAMRebuild_INTERFACE_DEFINED__

/* interface IAMRebuild */
/* [object][helpstring][uuid][local] */ 


EXTERN_C const IID IID_IAMRebuild;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("02EF04DD-7580-11d1-BECE-00C04FB6E937")
    IAMRebuild : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RebuildNow( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAMRebuildVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAMRebuild * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAMRebuild * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAMRebuild * This);
        
        HRESULT ( STDMETHODCALLTYPE *RebuildNow )( 
            IAMRebuild * This);
        
        END_INTERFACE
    } IAMRebuildVtbl;

    interface IAMRebuild
    {
        CONST_VTBL struct IAMRebuildVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAMRebuild_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAMRebuild_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAMRebuild_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAMRebuild_RebuildNow(This)	\
    ( (This)->lpVtbl -> RebuildNow(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAMRebuild_INTERFACE_DEFINED__ */


#ifndef __IBufferingTime_INTERFACE_DEFINED__
#define __IBufferingTime_INTERFACE_DEFINED__

/* interface IBufferingTime */
/* [object][helpstring][uuid][local] */ 


EXTERN_C const IID IID_IBufferingTime;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1E00486A-78DD-11D2-8DD3-006097C9A2B2")
    IBufferingTime : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetBufferingTime( 
            DWORD *pdwMilliseconds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetBufferingTime( 
            DWORD dwMilliseconds) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBufferingTimeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBufferingTime * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBufferingTime * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBufferingTime * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferingTime )( 
            IBufferingTime * This,
            DWORD *pdwMilliseconds);
        
        HRESULT ( STDMETHODCALLTYPE *SetBufferingTime )( 
            IBufferingTime * This,
            DWORD dwMilliseconds);
        
        END_INTERFACE
    } IBufferingTimeVtbl;

    interface IBufferingTime
    {
        CONST_VTBL struct IBufferingTimeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBufferingTime_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBufferingTime_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBufferingTime_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBufferingTime_GetBufferingTime(This,pdwMilliseconds)	\
    ( (This)->lpVtbl -> GetBufferingTime(This,pdwMilliseconds) ) 

#define IBufferingTime_SetBufferingTime(This,dwMilliseconds)	\
    ( (This)->lpVtbl -> SetBufferingTime(This,dwMilliseconds) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IBufferingTime_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_playlist_0000_0004 */
/* [local] */ 

EXTERN_GUID(IID_IAMPlayListItem,0x56a868ff,0x0ad4,0x11ce,0xb0,0xa3,0x0,0x20,0xaf,0x0b,0xa7,0x70);
EXTERN_GUID(IID_IAMRebuild,0x2ef04dd,0x7580,0x11d1,0xbe,0xce,0x0,0xc0,0x4f,0xb6,0xe9,0x37);
EXTERN_GUID(IID_IAMPlayList,0x56a868fe,0x0ad4,0x11ce,0xb0,0xa3,0x0,0x20,0xaf,0x0b,0xa7,0x70);
EXTERN_GUID(SPECIFYPAGES_STATISTICS,0x4c437b92,0x6e9e,0x11d1,0xa7,0x4,0x0,0x60,0x97,0xc4,0xe4,0x76);
EXTERN_GUID(IID_ISpecifyParticularPages,0x4c437b91,0x6e9e,0x11d1,0xa7,0x4,0x0,0x60,0x97,0xc4,0xe4,0x76);
EXTERN_GUID( IID_IBufferingTime, 0x1e00486a,0x78dd,0x11d2,0x8d,0xd3,0x0,0x60,0x97,0xc9,0xa2,0xb2 );


extern RPC_IF_HANDLE __MIDL_itf_playlist_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_playlist_0000_0004_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\presenceprovider.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//


/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0543 */
/* Compiler settings for PresenceProvider.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __PresenceProvider_h__
#define __PresenceProvider_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IPresenceProviderIMChannel_FWD_DEFINED__
#define __IPresenceProviderIMChannel_FWD_DEFINED__
typedef interface IPresenceProviderIMChannel IPresenceProviderIMChannel;
#endif 	/* __IPresenceProviderIMChannel_FWD_DEFINED__ */


#ifndef __IPresenceProviderAdviseSink_FWD_DEFINED__
#define __IPresenceProviderAdviseSink_FWD_DEFINED__
typedef interface IPresenceProviderAdviseSink IPresenceProviderAdviseSink;
#endif 	/* __IPresenceProviderAdviseSink_FWD_DEFINED__ */


#ifndef __IPresenceProvider_FWD_DEFINED__
#define __IPresenceProvider_FWD_DEFINED__
typedef interface IPresenceProvider IPresenceProvider;
#endif 	/* __IPresenceProvider_FWD_DEFINED__ */


#ifndef __IPresenceProviderManager_FWD_DEFINED__
#define __IPresenceProviderManager_FWD_DEFINED__
typedef interface IPresenceProviderManager IPresenceProviderManager;
#endif 	/* __IPresenceProviderManager_FWD_DEFINED__ */


/* header files for imported files */
#include "pimstore.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_PresenceProvider_0000_0000 */
/* [local] */ 

//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this source code is subject to the terms of the Microsoft
// premium shared source license agreement under which you licensed
// this source code. If you did not accept the terms of the license
// agreement, you are not authorized to use this source code.
// For the terms of the license, please see the license agreement
// signed by you and Microsoft.
// THE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
// ***********************************************************************
//
#ifndef MIDL_PASS
#include <windows.h>
#include <ole2.h>
#endif
typedef /* [v1_enum] */ 
enum PresenceProviderState
    {	PresenceProviderState_Unavailable	= 1,
	PresenceProviderState_Available	= 2
    } 	PresenceProviderState;

typedef /* [v1_enum] */ 
enum ContactPresenceAvailability
    {	ContactPresenceAvailability_NotAvailable	= 2000,
	ContactPresenceAvailability_Online	= 3500,
	ContactPresenceAvailability_Away	= 5000,
	ContactPresenceAvailability_Busy	= 6500,
	ContactPresenceAvailability_DoNotDisturb	= 9500,
	ContactPresenceAvailability_Offline	= 18500
    } 	ContactPresenceAvailability;

typedef /* [v1_enum] */ 
enum PresenceStateInfoElementMasks
    {	PresenceStateInfoElementMasks_AvailabilityString	= 0x1,
	PresenceStateInfoElementMasks_ActivityString	= 0x2,
	PresenceStateInfoElementMasks_StatusMessage	= 0x4,
	PresenceStateInfoElementMasks_All	= 0xffffffff
    } 	PresenceStateInfoItemMasks;

typedef struct _PRESENCE_STATE_INFO
    {
    DWORD cbSize;
    DWORD dwElementsMask;
    ContactPresenceAvailability eAvailability;
    LPOLESTR pszAvailability;
    UINT cchAvailability;
    LPOLESTR pszActvity;
    UINT cchActivity;
    LPOLESTR pszStatusMessage;
    UINT cchStatusMessage;
    } 	PRESENCE_STATE_INFO;

typedef struct _PRESENCE_STATE_INFO *LPPRESENCE_STATE_INFO;

DEFINE_GUID(IID_IPresenceProviderIMChannel, 0xf8ed85f1, 0xa348, 0x411e, 0x82, 0x90, 0x58, 0x8f, 0xfb, 0x2f, 0xd0, 0x72);


extern RPC_IF_HANDLE __MIDL_itf_PresenceProvider_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_PresenceProvider_0000_0000_v0_0_s_ifspec;

#ifndef __IPresenceProviderIMChannel_INTERFACE_DEFINED__
#define __IPresenceProviderIMChannel_INTERFACE_DEFINED__

/* interface IPresenceProviderIMChannel */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPresenceProviderIMChannel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f8ed85f1-a348-411e-8290-588ffb2fd072")
    IPresenceProviderIMChannel : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InitiateIM( 
            /* [in] */ OLITEMID *pItemId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPresenceProviderIMChannelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPresenceProviderIMChannel * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPresenceProviderIMChannel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPresenceProviderIMChannel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPresenceProviderIMChannel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPresenceProviderIMChannel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPresenceProviderIMChannel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPresenceProviderIMChannel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *InitiateIM )( 
            IPresenceProviderIMChannel * This,
            /* [in] */ OLITEMID *pItemId);
        
        END_INTERFACE
    } IPresenceProviderIMChannelVtbl;

    interface IPresenceProviderIMChannel
    {
        CONST_VTBL struct IPresenceProviderIMChannelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPresenceProviderIMChannel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPresenceProviderIMChannel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPresenceProviderIMChannel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPresenceProviderIMChannel_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPresenceProviderIMChannel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPresenceProviderIMChannel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPresenceProviderIMChannel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPresenceProviderIMChannel_InitiateIM(This,pItemId)	\
    ( (This)->lpVtbl -> InitiateIM(This,pItemId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPresenceProviderIMChannel_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_PresenceProvider_0000_0001 */
/* [local] */ 

DEFINE_GUID(IID_IPresenceProviderAdviseSink, 0xe5229a59, 0x3bf9, 0x4cc1, 0x98, 0x6a, 0xaa, 0x61, 0xce, 0xf7, 0xbf, 0xaa);


extern RPC_IF_HANDLE __MIDL_itf_PresenceProvider_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_PresenceProvider_0000_0001_v0_0_s_ifspec;

#ifndef __IPresenceProviderAdviseSink_INTERFACE_DEFINED__
#define __IPresenceProviderAdviseSink_INTERFACE_DEFINED__

/* interface IPresenceProviderAdviseSink */
/* [helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPresenceProviderAdviseSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e5229a59-3bf9-4cc1-986a-aa61cef7bfaa")
    IPresenceProviderAdviseSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnContactPresenceChanged( 
            /* [in] */ OLITEMID *pItemId,
            /* [in] */ PRESENCE_STATE_INFO *pPresenceStateInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnPresenceProviderStateChanged( 
            /* [in] */ OLITEMID *pStoreId,
            /* [in] */ PresenceProviderState *pProviderState) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPresenceProviderAdviseSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPresenceProviderAdviseSink * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPresenceProviderAdviseSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPresenceProviderAdviseSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnContactPresenceChanged )( 
            IPresenceProviderAdviseSink * This,
            /* [in] */ OLITEMID *pItemId,
            /* [in] */ PRESENCE_STATE_INFO *pPresenceStateInfo);
        
        HRESULT ( STDMETHODCALLTYPE *OnPresenceProviderStateChanged )( 
            IPresenceProviderAdviseSink * This,
            /* [in] */ OLITEMID *pStoreId,
            /* [in] */ PresenceProviderState *pProviderState);
        
        END_INTERFACE
    } IPresenceProviderAdviseSinkVtbl;

    interface IPresenceProviderAdviseSink
    {
        CONST_VTBL struct IPresenceProviderAdviseSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPresenceProviderAdviseSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPresenceProviderAdviseSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPresenceProviderAdviseSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPresenceProviderAdviseSink_OnContactPresenceChanged(This,pItemId,pPresenceStateInfo)	\
    ( (This)->lpVtbl -> OnContactPresenceChanged(This,pItemId,pPresenceStateInfo) ) 

#define IPresenceProviderAdviseSink_OnPresenceProviderStateChanged(This,pStoreId,pProviderState)	\
    ( (This)->lpVtbl -> OnPresenceProviderStateChanged(This,pStoreId,pProviderState) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPresenceProviderAdviseSink_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_PresenceProvider_0000_0002 */
/* [local] */ 

DEFINE_GUID(IID_IPresenceProvider, 0x841460e5, 0x40e4, 0x4773, 0xb5, 0xae, 0xae, 0xd7, 0x40, 0x85, 0x00, 0xe8);


extern RPC_IF_HANDLE __MIDL_itf_PresenceProvider_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_PresenceProvider_0000_0002_v0_0_s_ifspec;

#ifndef __IPresenceProvider_INTERFACE_DEFINED__
#define __IPresenceProvider_INTERFACE_DEFINED__

/* interface IPresenceProvider */
/* [dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPresenceProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("841460e5-40e4-4773-b5ae-aed7408500e8")
    IPresenceProvider : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ PresenceProviderState *pState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPresenceForContact( 
            /* [in] */ OLITEMID *pItemId,
            /* [out][in] */ PRESENCE_STATE_INFO *pPresenceStateInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Advise( 
            /* [size_is][in] */ OLITEMID *rgItemIds,
            /* [in] */ DWORD cItemIds,
            /* [in] */ IPresenceProviderAdviseSink *pAdviseSink,
            /* [retval][out] */ DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unadvise( 
            /* [in] */ DWORD dwCookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPresenceProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPresenceProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPresenceProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPresenceProvider * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IPresenceProvider * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            IPresenceProvider * This,
            /* [retval][out] */ PresenceProviderState *pState);
        
        HRESULT ( STDMETHODCALLTYPE *GetPresenceForContact )( 
            IPresenceProvider * This,
            /* [in] */ OLITEMID *pItemId,
            /* [out][in] */ PRESENCE_STATE_INFO *pPresenceStateInfo);
        
        HRESULT ( STDMETHODCALLTYPE *Advise )( 
            IPresenceProvider * This,
            /* [size_is][in] */ OLITEMID *rgItemIds,
            /* [in] */ DWORD cItemIds,
            /* [in] */ IPresenceProviderAdviseSink *pAdviseSink,
            /* [retval][out] */ DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *Unadvise )( 
            IPresenceProvider * This,
            /* [in] */ DWORD dwCookie);
        
        END_INTERFACE
    } IPresenceProviderVtbl;

    interface IPresenceProvider
    {
        CONST_VTBL struct IPresenceProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPresenceProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPresenceProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPresenceProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPresenceProvider_get_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrName) ) 

#define IPresenceProvider_get_State(This,pState)	\
    ( (This)->lpVtbl -> get_State(This,pState) ) 

#define IPresenceProvider_GetPresenceForContact(This,pItemId,pPresenceStateInfo)	\
    ( (This)->lpVtbl -> GetPresenceForContact(This,pItemId,pPresenceStateInfo) ) 

#define IPresenceProvider_Advise(This,rgItemIds,cItemIds,pAdviseSink,pdwCookie)	\
    ( (This)->lpVtbl -> Advise(This,rgItemIds,cItemIds,pAdviseSink,pdwCookie) ) 

#define IPresenceProvider_Unadvise(This,dwCookie)	\
    ( (This)->lpVtbl -> Unadvise(This,dwCookie) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPresenceProvider_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_PresenceProvider_0000_0003 */
/* [local] */ 

DEFINE_GUID(IID_IPresenceProviderManager, 0x2ad0ce0b, 0x44fc, 0x4d85, 0x94, 0x2a, 0x55, 0x09, 0x18, 0x3e, 0xb3, 0x84);


extern RPC_IF_HANDLE __MIDL_itf_PresenceProvider_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_PresenceProvider_0000_0003_v0_0_s_ifspec;

#ifndef __IPresenceProviderManager_INTERFACE_DEFINED__
#define __IPresenceProviderManager_INTERFACE_DEFINED__

/* interface IPresenceProviderManager */
/* [dual][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IPresenceProviderManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2ad0ce0b-44fc-4d85-942a-5509183eb384")
    IPresenceProviderManager : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RegisterProvider( 
            /* [in] */ CLSID *pProviderId,
            /* [in] */ OLITEMID *pStoreId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnregisterProvider( 
            /* [in] */ CLSID *pProviderId,
            /* [in] */ OLITEMID *pStoreId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPresenceProviderForStore( 
            /* [in] */ OLITEMID *pStoreId,
            /* [retval][out] */ IPresenceProvider **ppProvider) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPresenceProviderForContact( 
            /* [in] */ OLITEMID *pItemId,
            /* [retval][out] */ IPresenceProvider **ppProvider) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Advise( 
            /* [size_is][in] */ OLITEMID *rgItemIds,
            /* [in] */ DWORD cItemIds,
            /* [in] */ IPresenceProviderAdviseSink *pAdviseSink,
            /* [retval][out] */ DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unadvise( 
            /* [in] */ DWORD dwCookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPresenceProviderManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPresenceProviderManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPresenceProviderManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPresenceProviderManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPresenceProviderManager * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPresenceProviderManager * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPresenceProviderManager * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPresenceProviderManager * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterProvider )( 
            IPresenceProviderManager * This,
            /* [in] */ CLSID *pProviderId,
            /* [in] */ OLITEMID *pStoreId);
        
        HRESULT ( STDMETHODCALLTYPE *UnregisterProvider )( 
            IPresenceProviderManager * This,
            /* [in] */ CLSID *pProviderId,
            /* [in] */ OLITEMID *pStoreId);
        
        HRESULT ( STDMETHODCALLTYPE *GetPresenceProviderForStore )( 
            IPresenceProviderManager * This,
            /* [in] */ OLITEMID *pStoreId,
            /* [retval][out] */ IPresenceProvider **ppProvider);
        
        HRESULT ( STDMETHODCALLTYPE *GetPresenceProviderForContact )( 
            IPresenceProviderManager * This,
            /* [in] */ OLITEMID *pItemId,
            /* [retval][out] */ IPresenceProvider **ppProvider);
        
        HRESULT ( STDMETHODCALLTYPE *Advise )( 
            IPresenceProviderManager * This,
            /* [size_is][in] */ OLITEMID *rgItemIds,
            /* [in] */ DWORD cItemIds,
            /* [in] */ IPresenceProviderAdviseSink *pAdviseSink,
            /* [retval][out] */ DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *Unadvise )( 
            IPresenceProviderManager * This,
            /* [in] */ DWORD dwCookie);
        
        END_INTERFACE
    } IPresenceProviderManagerVtbl;

    interface IPresenceProviderManager
    {
        CONST_VTBL struct IPresenceProviderManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPresenceProviderManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPresenceProviderManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPresenceProviderManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPresenceProviderManager_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPresenceProviderManager_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPresenceProviderManager_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPresenceProviderManager_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPresenceProviderManager_RegisterProvider(This,pProviderId,pStoreId)	\
    ( (This)->lpVtbl -> RegisterProvider(This,pProviderId,pStoreId) ) 

#define IPresenceProviderManager_UnregisterProvider(This,pProviderId,pStoreId)	\
    ( (This)->lpVtbl -> UnregisterProvider(This,pProviderId,pStoreId) ) 

#define IPresenceProviderManager_GetPresenceProviderForStore(This,pStoreId,ppProvider)	\
    ( (This)->lpVtbl -> GetPresenceProviderForStore(This,pStoreId,ppProvider) ) 

#define IPresenceProviderManager_GetPresenceProviderForContact(This,pItemId,ppProvider)	\
    ( (This)->lpVtbl -> GetPresenceProviderForContact(This,pItemId,ppProvider) ) 

#define IPresenceProviderManager_Advise(This,rgItemIds,cItemIds,pAdviseSink,pdwCookie)	\
    ( (This)->lpVtbl -> Advise(This,rgItemIds,cItemIds,pAdviseSink,pdwCookie) ) 

#define IPresenceProviderManager_Unadvise(This,dwCookie)	\
    ( (This)->lpVtbl -> Unadvise(This,dwCookie) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPresenceProviderManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_PresenceProvider_0000_0004 */
/* [local] */ 

DEFINE_GUID(CLSID_PresenceProviderManager, 0x2ad0ce0a, 0x44fc, 0x4d85, 0x94, 0x2a, 0x55, 0x09, 0x18, 0x3e, 0xb3, 0x84);
DEFINE_GUID(LIBID_PresenceProviderManager, 0xd2ad6425, 0x11fe, 0x4e82, 0xa5, 0x3c, 0x9f, 0x98, 0x3f, 0x62, 0x5c, 0xaa);
// GUID for custom POOM event that is used to convey presence provider registration/unregistration
DEFINE_GUID(PRESENCEPROVIDER_CHANGE_NOTIFICATION_GUID,  0xc0f8a7ee, 0x4906, 0x4070, 0x9b, 0xf3, 0x73, 0x17, 0xfc, 0x2b, 0xee, 0x63);
typedef /* [v1_enum] */ 
enum PresenceProviderChangeNotificationEventType
    {	PresenceProviderChangeNotificationEventType_ProviderRegistered	= 1,
	PresenceProviderChangeNotificationEventType_ProviderUnregistered	= ( PresenceProviderChangeNotificationEventType_ProviderRegistered + 1 ) 
    } 	PresenceProviderChangeNotificationEventType;

typedef struct _PRESENCE_PROVIDER_CHANGE_NOTIFICATION
    {
    PresenceProviderChangeNotificationEventType eEventType;
    OLITEMID storeId;
    } 	PRESENCE_PROVIDER_CHANGE_NOTIFICATION;

typedef struct _PRESENCE_PROVIDER_CHANGE_NOTIFICATION *LPPRESENCE_PROVIDER_CHANGE_NOTIFICATION;

// Success code meaning that none of the items specified in the Advise call had an associated presence provider
#define S_PROVIDER_NOTHING_TO_ADVISE           MAKE_HRESULT(SEVERITY_SUCCESS, FACILITY_ITF, 601)
// Success code meaning that the cookie used in Unadvise was obtained through a call to IPresenceProviderManager::Advise that returned S_PROVIDER_NOTHING_TO_ADVISE
#define S_PROVIDER_NOTHING_TO_UNADVISE         MAKE_HRESULT(SEVERITY_SUCCESS, FACILITY_ITF, 602)


extern RPC_IF_HANDLE __MIDL_itf_PresenceProvider_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_PresenceProvider_0000_0004_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\pmpolicy.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//

//
// This routine contains definitions and APIs for communicating with a platform-specific
// power policy manager.
//

#pragma once

#include <msgqueue.h>

#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus

// notification messages
#define PPN_REEVALUATESTATE             0x0001  // dwData is reserved, use 0
#define PPN_POWERCHANGE                 0x0002  // dwData is reserved, use 0
#define PPN_UNATTENDEDMODE              0x0003  // dwData is TRUE or FALSE
#define PPN_SUSPENDKEYPRESSED           0x0004  // dwData is reserved. use 0
#define PPN_SUSPENDKEYRELEASED          0x0005  // dwData is reserved. use 0
#define PPN_APPBUTTONPRESSED            0x0006  // dwData is reserved. use 0
#define PPN_POWERBUTTONPRESSED  PPN_SUSPENDKEYPRESSED

// OEMs can define values higher than this (as PPN_OEMBASE+0, +1, etc.)
#define PPN_OEMBASE                     0x10000

// This routine notifies the power policy manager of events it needs in order to
// implement the OEM's power policy.  The dwMessage parameter is one of the PPN_
// values (or an OEM-defined one).  The dwData parameter is a 32-bit value whose
// interpretation varies with the notification message.  A return value of TRUE
// indicates success.
BOOL PowerPolicyNotify(DWORD dwMessage, DWORD dwData);

#ifdef __cplusplus
}
#endif  // __cplusplus
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\pnp.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
// --------------------------------------------------------------------------

#pragma once

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
    GUID guidDevClass;          // the device interface id for this notification
    DWORD dwReserved;           // do not use this
    BOOL fAttached;             // true if the di is present, false otherwise
    int cbName;                 // byte count of the interface's name
    TCHAR szName[1];            // beginning of the interface's name
} DEVDETAIL, *PDEVDETAIL;

// Maximum size of a device interface name. The choice of value is arbitrary
// but necessary for componenents that want to browse available interfaces
// so that they can set up their message queues. This value does not include
// the (required) terminating zero - that's already counted in DEVDETAIL.
#define MAX_DEVCLASS_NAMELEN 64

// Indicates an ordinary "stream" interface: open/read/write/iocontrol/close.
// Devices that do not specify anything else and which expose a "ABCN:"
// type of name automatically generate a notification with this GUID and
// and a name equal to the device name (e.g., "FOO2:").
#define DEVCLASS_STREAM_STRING TEXT("{f8a6ba98-087a-43ac-a9d8-b7f13c5bae31}")
#define DEVCLASS_STREAM_GUID { 0xf8a6ba98, 0x087a, 0x43ac, { 0xa9, 0xd8, 0xb7, 0xf1, 0x3c, 0x5b, 0xae, 0x31} }

#ifndef GUID_ISEQUAL
#define GUID_ISEQUAL(a,b) (memcmp(&(a),&(b),sizeof(a)) == 0)
#endif

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\pm.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/*++


Module Name:

    pm.h

Abstract:

    Definitions and API for the WCE Power Manager component.

Revision History:

--*/

#pragma once

#ifdef __cplusplus
extern "C" {
#endif  /* __cplusplus */

//**********************************************************************
// WinCE Device Interface GUIDs for Power Manager controlled devices.
// NEVER CHANGE THESE VALUES! They indicate that a device is 
// power manageable. The device MUST expose an appropriate class
// via the IClass registry key or the AdvertiseInterface() API to 
// receive power management IOCTLs.  For example,
//   "IClass"=multi_sz:"{A32942B7-920C-486b-B0E6-92A702A99B35}"
// OEMs may define other classes in addition to the ones listed here.
//**********************************************************************

#define PMCLASS_GENERIC_DEVICE          TEXT("{A32942B7-920C-486b-B0E6-92A702A99B35}")
#define PMCLASS_NDIS_MINIPORT           TEXT("{98C5250D-C29A-4985-AE5F-AFE5367E5006}")
#define PMCLASS_BLOCK_DEVICE            TEXT("{8DD679CE-8AB4-43c8-A14A-EA4963FAA715}")
#define PMCLASS_DISPLAY                 TEXT("{EB91C7C9-8BF6-4a2d-9AB8-69724EED97D1}")
#define PMCLASS_BACKLIGHT               TEXT("{0007AE3D-413C-4E7E-8786-E2A696E73A6E}")

// backwards compatibility definitions from the PM's CE 4.0 release
#define DEVCLASS_POWER_MANAGER_STRING   PMCLASS_GENERIC_DEVICE
#define DEVCLASS_POWER_MANAGER_GUID     { 0xA32942B7, 0x920C, 0x486b, { 0xB0, 0xE6, 0x92, 0xA7, 0x02, 0xA9, 0x9B, 0x35 } }

//*****************************************************************************
// D E F I N E S
//*****************************************************************************

// Power Manager's System Power key
#define PWRMGR_REG_KEY           TEXT("SYSTEM\\CurrentControlSet\\Control\\Power")
#define PM_SUPPORT_PB_RELEASE    TEXT("SupportPowerButtonRelease")

//
// System Power (Source/State/Option) Flags
//

// upper bytes: common power state bits
#define POWER_STATE(f)           ((f) &  0xFFFF0000)        // power state mask
#define POWER_STATE_ON           (DWORD)(0x00010000)        // on state
#define POWER_STATE_OFF          (DWORD)(0x00020000)        // no power, full off
#define POWER_STATE_CRITICAL     (DWORD)(0x00040000)        // critical off
#define POWER_STATE_BOOT         (DWORD)(0x00080000)        // boot state
#define POWER_STATE_IDLE         (DWORD)(0x00100000)        // idle state
#define POWER_STATE_SUSPEND      (DWORD)(0x00200000)        // suspend state
#define POWER_STATE_UNATTENDED   (DWORD)(0x00400000)        // Unattended state.
#define POWER_STATE_RESET        (DWORD)(0x00800000)        // reset state
#define POWER_STATE_USERIDLE     (DWORD)(0x01000000)        // user idle state
#define POWER_STATE_BACKLIGHTON  (DWORD)(0x02000000)        // device scree backlight on
#define POWER_STATE_PASSWORD     (DWORD)(0x10000000)        // This state is password protected.

#define PM_DEFAULT_SZ       TEXT("Default")
#define PM_FLAGS_SZ         TEXT("Flags")
#define MAX_STATE_NAMEL     MAX_PATH    // max system power state name length

//
// Power Requirement Flags
//
#define POWER_NAME              (DWORD)(0x00000001) // default
#define POWER_FORCE             (DWORD)(0x00001000)
#define POWER_DUMPDW            (DWORD)(0x00002000)        // Calling CaptureDumpFileOnDevice() before entering this state.

//
// POWER IOCTLS
//
// We are NOT APCI, we just borrow this unused code from winioctl.h
#define FILE_DEVICE_POWER   FILE_DEVICE_ACPI    

/*
Required
InBuf:  PPOWER_RELATIONSHIP - defines the target device for parent/bus drivers, else NULL
OutBuf: PPOWER_CAPABILITIES - defines the devices power caps

If a driver fails this ioctl the PM assumes the target driver does not support power ioctls.
*/
#define IOCTL_POWER_CAPABILITIES    \
    CTL_CODE(FILE_DEVICE_POWER, 0x400, METHOD_BUFFERED, FILE_ANY_ACCESS)

/* ++
Required
InBuf:  PPOWER_RELATIONSHIP   - defines the target device for parent/bus drivers, else NULL
OutBuf: PCEDEVICE_POWER_STATE - returns the device's current state (Dx).

PM will only send this ioctl to drivers that support the power ioctls.
-- */
#define IOCTL_POWER_GET             \
    CTL_CODE(FILE_DEVICE_POWER, 0x401, METHOD_BUFFERED, FILE_ANY_ACCESS)

/* ++
Required
InBuf:  PPOWER_RELATIONSHIP   - defines the target device for parent/bus drivers, else NULL
OutBuf: PCEDEVICE_POWER_STATE - device state (Dx) in which to put the device.

If the driver does not support the proposed Dx then it should write it's adjusted Dx
into the OutBuf (Dx).

PM will only send this ioctl to drivers that support the power ioctls.
-- */
#define IOCTL_POWER_SET             \
    CTL_CODE(FILE_DEVICE_POWER, 0x402, METHOD_BUFFERED, FILE_ANY_ACCESS)

/*++
Required
InBuf:  PPOWER_RELATIONSHIP   - defines the target device for parent/bus drivers, else NULL
OutBuf: PCEDEVICE_POWER_STATE - device state (Dx) that the system is querying for a 
                                pending IOCTL_POWER_SET operation.
                                
To veto the query the driver should write PwrDeviceUnspecified (-1)
into the OutBuf (Dx), else PM assumes the driver accepted.

PM will only send this ioctl to drivers that support the power ioctls.
-- */
#define IOCTL_POWER_QUERY           \
    CTL_CODE(FILE_DEVICE_POWER, 0x403, METHOD_BUFFERED, FILE_ANY_ACCESS)

/*
Required
InBuf:  NULL 
OutBuf: NULL

PM does not care the return value from this IOCTL.   It's there to let the Parent device
to register all devices it controls.
*/
#define IOCTL_REGISTER_POWER_RELATIONSHIP    \
    CTL_CODE(FILE_DEVICE_POWER, 0x406, METHOD_BUFFERED, FILE_ANY_ACCESS)


//*****************************************************************************
// T Y P E D E F S
//*****************************************************************************

//
// Device Power States
//
typedef enum _CEDEVICE_POWER_STATE {
    PwrDeviceUnspecified = -1,
    D0 = 0, // Full On: full power,  full functionality
    D1,     // Low Power On: fully functional at low power/performance
    D2,     // Standby: partially powered with automatic wake
    D3,     // Sleep: partially powered with device initiated wake
    D4,     // Off: unpowered
    PwrDeviceMaximum
} CEDEVICE_POWER_STATE, *PCEDEVICE_POWER_STATE;

#define DX_MASK(Dx)  (0x00000001 << Dx)

#define VALID_DX(dx)  ( dx > PwrDeviceUnspecified && dx < PwrDeviceMaximum)

//
// Device or OAL Power Capabilities
//
typedef struct _POWER_CAPABILITIES {
    UCHAR DeviceDx;
    UCHAR WakeFromDx;
    UCHAR InrushDx;
    DWORD Power[PwrDeviceMaximum];
    DWORD Latency[PwrDeviceMaximum];
    DWORD Flags;
} POWER_CAPABILITIES, *PPOWER_CAPABILITIES;

#define POWER_CAP_PARENT        0x00000001      // parent/bus driver

//
// Defines the target of IOCTL_POWER_Xxx commands to parent/bus drivers
// if there is a relationship established via RegisterPowerRelationship.
//
typedef struct _POWER_RELATIONSHIP {
    HANDLE  hParent;    // Handle to parent node
    LPCWSTR pwsParent;  // Named parent node, e.g. "NDS0:"
    HANDLE  hChild;     // Handle to child node, returned from RegisterPowerRelationship
    LPCWSTR pwsChild;   // Named child node, e.g. "NE20001"

} POWER_RELATIONSHIP, *PPOWER_RELATIONSHIP;


//
// Power Broadcast Types -- there are up to 32 of these
//
#define PBT_TRANSITION          0x00000001  // broadcast specifying system power state transition
#define PBT_RESUME              0x00000002  // broadcast notifying a resume, specifies previous state
#define PBT_POWERSTATUSCHANGE   0x00000004  // power supply switched to/from AC/DC
#define PBT_POWERINFOCHANGE     0x00000008  // some system power status field has changed

#define PBT_SUSPENDKEYPRESSED   0x00000100  // Suspend Key has been pressed.

// OEMS may define power notifications starting with this ID and
// going up by powers of 2.
#define PBT_OEMBASE             0x00010000

// This bitmask indicates that an application would like to receive all
// types of power notifications.
#define POWER_NOTIFY_ALL        0xFFFFFFFF

//
// Power Broadcast -- this is a variable length structure.
//
typedef struct _POWER_BROADCAST {
    DWORD       Message;    // one of PBT_Xxx
    DWORD       Flags;      // one of POWER_STATE_Xxx
    DWORD       Length;     // byte count of data starting at SystemPowerStateName
    WCHAR       SystemPowerState[1];    // variable length field, must be smaller than MAX_PATH + 1
} POWER_BROADCAST, *PPOWER_BROADCAST;

// This structure is used instead of a string name (SystemPowerState) in
// the POWER_BROADCAST, if the broadcast is of type PBT_POWERINFOCHANGE.
//
// For example:
//  PPOWER_BROADCAST ppb;
//  PPOWER_BROADCAST_POWER_INFO ppbpi = 
//        (PPOWER_BROADCAST_POWER_INFO) ppb->SystemPowerState;
//
typedef struct _POWER_BROADCAST_POWER_INFO {
    // levels available in battery flag fields, see BatteryDrvrGetLevels()
    DWORD       dwNumLevels;

    // see GetSystemPowerStatusEx2()
    DWORD       dwBatteryLifeTime;
    DWORD       dwBatteryFullLifeTime;
    DWORD       dwBackupBatteryLifeTime;
    DWORD       dwBackupBatteryFullLifeTime;
    BYTE        bACLineStatus;
    BYTE        bBatteryFlag;
    BYTE        bBatteryLifePercent;
    BYTE        bBackupBatteryFlag;
    BYTE        bBackupBatteryLifePercent;
} POWER_BROADCAST_POWER_INFO, *PPOWER_BROADCAST_POWER_INFO;
    
//*****************************************************************************
// P R O T O S
//*****************************************************************************
DWORD
GetSystemPowerState(
    LPWSTR  pBuffer,
    DWORD   dwBufChars,
    PDWORD  pdwFlags 
	);

DWORD
SetSystemPowerState(
	LPCWSTR pwsSystemState,
	DWORD   StateFlags,
    DWORD   Options
	);

HANDLE
SetPowerRequirement(
	PVOID                   pvDevice,
    CEDEVICE_POWER_STATE    DeviceState,	
    ULONG                   DeviceFlags,
    PVOID                   pvSystemState,
    ULONG                   StateFlags    
	);

DWORD
ReleasePowerRequirement(
	HANDLE hPowerReq
    );

HANDLE
RequestPowerNotifications(
    HANDLE  hMsgQ,
    DWORD   Flags
    );

DWORD
StopPowerNotifications(
    HANDLE h
    );

DWORD
DevicePowerNotify(
	PVOID                   pvDevice,
	CEDEVICE_POWER_STATE    DeviceState,
    DWORD                   Flags
    );

HANDLE
RegisterPowerRelationship(
    PVOID pvParent, 
    PVOID pvChild,
    PPOWER_CAPABILITIES pCaps,
    DWORD Flags
    );

DWORD
ReleasePowerRelationship(
    HANDLE hChild
    );

DWORD
SetDevicePower(
    PVOID pvDevice, 
    DWORD dwDeviceFlags, 
    CEDEVICE_POWER_STATE dwState
    );

DWORD
GetDevicePower(
    PVOID pvDevice, 
    DWORD dwDeviceFlags,
    PCEDEVICE_POWER_STATE pdwState    
    );

#ifdef WINCEMACRO
#include <mpm.h>
#endif

#ifdef __cplusplus
}
#endif  /* __cplusplus */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\posyncservices.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//


/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0543 */
/* Compiler settings for posyncservices.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __posyncservices_h__
#define __posyncservices_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IPOSyncServices_FWD_DEFINED__
#define __IPOSyncServices_FWD_DEFINED__
typedef interface IPOSyncServices IPOSyncServices;
#endif 	/* __IPOSyncServices_FWD_DEFINED__ */


#ifndef __IPOChangeInfo_FWD_DEFINED__
#define __IPOChangeInfo_FWD_DEFINED__
typedef interface IPOChangeInfo IPOChangeInfo;
#endif 	/* __IPOChangeInfo_FWD_DEFINED__ */


#ifndef __IPOChangeFilter_FWD_DEFINED__
#define __IPOChangeFilter_FWD_DEFINED__
typedef interface IPOChangeFilter IPOChangeFilter;
#endif 	/* __IPOChangeFilter_FWD_DEFINED__ */


#ifndef __IPOSyncPartner_FWD_DEFINED__
#define __IPOSyncPartner_FWD_DEFINED__
typedef interface IPOSyncPartner IPOSyncPartner;
#endif 	/* __IPOSyncPartner_FWD_DEFINED__ */


#ifndef __IPOMetadata_FWD_DEFINED__
#define __IPOMetadata_FWD_DEFINED__
typedef interface IPOMetadata IPOMetadata;
#endif 	/* __IPOMetadata_FWD_DEFINED__ */


#ifndef __IPOItemMetadata_FWD_DEFINED__
#define __IPOItemMetadata_FWD_DEFINED__
typedef interface IPOItemMetadata IPOItemMetadata;
#endif 	/* __IPOItemMetadata_FWD_DEFINED__ */


#ifndef __IPOFolderMetadata_FWD_DEFINED__
#define __IPOFolderMetadata_FWD_DEFINED__
typedef interface IPOFolderMetadata IPOFolderMetadata;
#endif 	/* __IPOFolderMetadata_FWD_DEFINED__ */


#ifndef __IEnumPOSyncPartners_FWD_DEFINED__
#define __IEnumPOSyncPartners_FWD_DEFINED__
typedef interface IEnumPOSyncPartners IEnumPOSyncPartners;
#endif 	/* __IEnumPOSyncPartners_FWD_DEFINED__ */


#ifndef __IEnumPOItemMetadata_FWD_DEFINED__
#define __IEnumPOItemMetadata_FWD_DEFINED__
typedef interface IEnumPOItemMetadata IEnumPOItemMetadata;
#endif 	/* __IEnumPOItemMetadata_FWD_DEFINED__ */


#ifndef __IEnumPOFolderMetadata_FWD_DEFINED__
#define __IEnumPOFolderMetadata_FWD_DEFINED__
typedef interface IEnumPOFolderMetadata IEnumPOFolderMetadata;
#endif 	/* __IEnumPOFolderMetadata_FWD_DEFINED__ */


#ifndef __POSyncServices_FWD_DEFINED__
#define __POSyncServices_FWD_DEFINED__

#ifdef __cplusplus
typedef class POSyncServices POSyncServices;
#else
typedef struct POSyncServices POSyncServices;
#endif /* __cplusplus */

#endif 	/* __POSyncServices_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_posyncservices_0000_0000 */
/* [local] */ 










typedef const BYTE *LPCBYTE;

typedef const void *LPCVOID;

#ifdef MIDL_PASS
typedef struct _CEBLOB
    {
    DWORD dwCount;
    BYTE *lpb;
    } 	CEBLOB;

typedef /* [switch_type] */ union __CEVALUNION
    {
    short iVal;
    USHORT uiVal;
    long lVal;
    ULONG ulVal;
    FILETIME filetime;
    WCHAR *lpwstr;
    CEBLOB blob;
    BOOL boolVal;
    double dblVal;
    } 	_CEVALUNION;

typedef struct _CEPROPVAL
    {
    DWORD propid;
    WORD wLenData;
    WORD wFlags;
    _CEVALUNION val;
    } 	CEPROPVAL;

typedef CEPROPVAL *LPCEPROPVAL;

typedef BYTE *LPBYTE;

#endif
typedef 
enum PO_IDTYPE
    {	PO_IDTYPE_POOM	= 0,
	PO_IDTYPE_CEMAPI	= ( PO_IDTYPE_POOM + 1 ) ,
	PO_IDTYPE_INTERNAL	= ( PO_IDTYPE_CEMAPI + 1 ) 
    } 	PO_IDTYPE;

typedef 
enum PO_TRACKLEVEL
    {	PO_TRACKLEVEL_NONE	= 0,
	PO_TRACKLEVEL_OBJECT	= 0x1,
	PO_TRACKLEVEL_UNIT	= 0x2
    } 	PO_TRACKLEVEL;

typedef 
enum PO_DATATYPE
    {	PO_DATATYPE_FOLDER	= 0,
	PO_DATATYPE_CONTACT	= ( PO_DATATYPE_FOLDER + 1 ) ,
	PO_DATATYPE_MESSAGE	= ( PO_DATATYPE_CONTACT + 1 ) ,
	PO_DATATYPE_APPOINTMENT	= ( PO_DATATYPE_MESSAGE + 1 ) ,
	PO_DATATYPE_TASK	= ( PO_DATATYPE_APPOINTMENT + 1 ) ,
	PO_DATATYPE_NOTE	= ( PO_DATATYPE_TASK + 1 ) ,
	PO_DATATYPE_COUNT	= ( PO_DATATYPE_NOTE + 1 ) ,
	PO_DATATYPE_INVALID	= PO_DATATYPE_COUNT
    } 	PO_DATATYPE;

typedef 
enum PO_FOLDERTYPE
    {	PO_FOLDERTYPE_UNDEFINED	= 0,
	PO_FOLDERTYPE_DEFAULT_FOLDER	= 0x10000,
	PO_FOLDERTYPE_MESSAGE	= PO_DATATYPE_MESSAGE,
	PO_FOLDERTYPE_APPOINTMENT	= PO_DATATYPE_APPOINTMENT,
	PO_FOLDERTYPE_TASK	= PO_DATATYPE_TASK,
	PO_FOLDERTYPE_NOTE	= PO_DATATYPE_NOTE,
	PO_FOLDERTYPE_CONTACT	= PO_DATATYPE_CONTACT,
	PO_FOLDERTYPE_DEFAULT_APPOINTMENT	= ( PO_FOLDERTYPE_DEFAULT_FOLDER | PO_FOLDERTYPE_APPOINTMENT ) ,
	PO_FOLDERTYPE_DEFAULT_TASK	= ( PO_FOLDERTYPE_DEFAULT_FOLDER | PO_FOLDERTYPE_TASK ) ,
	PO_FOLDERTYPE_DEFAULT_CONTACT	= ( PO_FOLDERTYPE_DEFAULT_FOLDER | PO_FOLDERTYPE_CONTACT ) ,
	PO_FOLDERTYPE_DEFAULT_NOTE	= ( PO_FOLDERTYPE_DEFAULT_FOLDER | PO_FOLDERTYPE_NOTE ) ,
	PO_FOLDERTYPE_INBOX	= ( PO_FOLDERTYPE_DEFAULT_FOLDER | PO_FOLDERTYPE_MESSAGE ) ,
	PO_FOLDERTYPE_IPM_ROOT	= ( 0x30000 | PO_FOLDERTYPE_MESSAGE ) ,
	PO_FOLDERTYPE_TRASH	= ( 0x40000 | PO_FOLDERTYPE_MESSAGE ) ,
	PO_FOLDERTYPE_SENTITEMS	= ( 0x50000 | PO_FOLDERTYPE_MESSAGE ) ,
	PO_FOLDERTYPE_DRAFTS	= ( 0x60000 | PO_FOLDERTYPE_MESSAGE ) ,
	PO_FOLDERTYPE_OUTBOX	= ( 0x70000 | PO_FOLDERTYPE_MESSAGE ) 
    } 	PO_FOLDERTYPE;

typedef 
enum PO_CHANGETYPE
    {	PO_CHANGETYPE_NONE	= 0,
	PO_CHANGETYPE_ADDITION	= 0x1,
	PO_CHANGETYPE_MODIFICATION	= 0x2,
	PO_CHANGETYPE_DELETION	= 0x4,
	PO_CHANGETYPE_MOVE	= 0x8,
	PO_CHANGETYPE_ANY	= ( ( ( PO_CHANGETYPE_ADDITION | PO_CHANGETYPE_MODIFICATION )  | PO_CHANGETYPE_DELETION )  | PO_CHANGETYPE_MOVE ) 
    } 	PO_CHANGETYPE;

typedef 
enum PO_CHANGEACTION
    {	PO_CHANGEACTION_ACCEPT	= 0,
	PO_CHANGEACTION_SKIP	= ( PO_CHANGEACTION_ACCEPT + 1 ) ,
	PO_CHANGEACTION_FORGET	= ( PO_CHANGEACTION_SKIP + 1 ) 
    } 	PO_CHANGEACTION;

typedef 
enum PO_CONFLICTPOLICY
    {	PO_CONFLICTPOLICY_KEEP_REMOTE	= 0,
	PO_CONFLICTPOLICY_KEEP_LOCAL	= ( PO_CONFLICTPOLICY_KEEP_REMOTE + 1 ) ,
	PO_CONFLICTPOLICY_DEFAULT	= PO_CONFLICTPOLICY_KEEP_REMOTE
    } 	PO_CONFLICTPOLICY;

typedef 
enum PO_SYNCSESSION_OUTCOME
    {	PO_SYNCSESSION_FAILED	= 0,
	PO_SYNCSESSION_SUSPEND	= ( PO_SYNCSESSION_FAILED + 1 ) ,
	PO_SYNCSESSION_FORGET	= ( PO_SYNCSESSION_SUSPEND + 1 ) 
    } 	PO_SYNCSESSION_OUTCOME;

typedef 
enum PO_SCOPETYPE
    {	PO_SCOPETYPE_FOLDER	= 0,
	PO_SCOPETYPE_HIERARCHY	= ( PO_SCOPETYPE_FOLDER + 1 ) ,
	PO_SCOPETYPE_MOVES	= ( PO_SCOPETYPE_HIERARCHY + 1 ) 
    } 	PO_SCOPETYPE;

typedef 
enum PO_PROPKIND
    {	PO_PROPKIND_ID	= 0,
	PO_PROPKIND_NAMED	= ( PO_PROPKIND_ID + 1 ) 
    } 	PO_PROPKIND;

typedef 
enum PO_NAMEKIND
    {	PO_NAMEKIND_STRING	= 0,
	PO_NAMEKIND_ID	= ( PO_NAMEKIND_STRING + 1 ) 
    } 	PO_NAMEKIND;

typedef 
enum PO_UNITTYPE
    {	PO_UNITTYPE_INCLUSIVE	= 0,
	PO_UNITTYPE_EXCLUSIVE	= ( PO_UNITTYPE_INCLUSIVE + 1 ) 
    } 	PO_UNITTYPE;

typedef /* [switch_type] */ union POPropName
    {
    ULONG lID;
    LPCWSTR lpwstrName;
    } 	POPropName;

typedef struct POPropNamed
    {
    DWORD dwPropType;
    PO_NAMEKIND eNameKind;
    POPropName Name;
    } 	POPropNamed;

typedef struct POPropId
    {
    PO_IDTYPE eIdType;
    DWORD dwPropId;
    } 	POPropId;

typedef struct POTrackProp
    {
    PO_PROPKIND ePropKind;
    /* [switch_type] */ union __MIDL___MIDL_itf_posyncservices_0000_0000_0001
        {
        POPropId Id;
        POPropNamed Named;
        } 	Prop;
    } 	POTrackProp;

typedef struct POTrackUnit
    {
    PO_UNITTYPE eType;
    DWORD cProps;
    const POTrackProp *rgProps;
    } 	POTrackUnit;

typedef struct POTrackType
    {
    PO_TRACKLEVEL eTrackLevel;
    DWORD cUnits;
    const POTrackUnit *rgUnits;
    } 	POTrackType;

typedef struct POTrackSchema
    {
    POTrackType rgTypes[ 6 ];
    } 	POTrackSchema;



extern RPC_IF_HANDLE __MIDL_itf_posyncservices_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_posyncservices_0000_0000_v0_0_s_ifspec;

#ifndef __IPOSyncServices_INTERFACE_DEFINED__
#define __IPOSyncServices_INTERFACE_DEFINED__

/* interface IPOSyncServices */
/* [uuid][object] */ 


EXTERN_C const IID IID_IPOSyncServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("21E1B5A4-0010-437a-BFA7-9D1455238F39")
    IPOSyncServices : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Logon( 
            /* [in] */ HWND hWnd,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ REFIID riid,
            /* [iid_is][retval][out] */ IUnknown **ppSession) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetIDsFromNames( 
            /* [in] */ DWORD dwStoreId,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const POPropNamed *rgNamedProps,
            /* [size_is][retval][out] */ DWORD *rgPropIds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateStore( 
            /* [in] */ LPCWSTR pwszName,
            /* [in] */ DWORD ceInitProps,
            /* [size_is][in] */ const CEPROPVAL *rgInitProps,
            /* [retval][out] */ DWORD *pdwStoreId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindStore( 
            /* [in] */ LPCWSTR pwszName,
            /* [retval][out] */ DWORD *pdwStoreId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteStore( 
            /* [in] */ DWORD dwStoreId) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetStoreIdFromObjectId( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCVOID pvObjectId,
            /* [out] */ DWORD *pdwStoreId) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetObjectIdFromStoreId( 
            /* [in] */ DWORD dwStoreId,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbObjectId,
            /* [size_is][out] */ LPVOID pvObjectId) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE ConvertIdToString( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCVOID pvObjectId,
            /* [retval][out] */ BSTR *pbstrObjectId) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE ConvertStringToId( 
            /* [in] */ LPCWSTR pwszObjectId,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbObjectId,
            /* [size_is][out] */ LPVOID pvObjectId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddSyncPartner( 
            /* [in] */ DWORD dwStoreId,
            /* [in] */ REFGUID gidPartner,
            /* [in] */ LPCWSTR pwszDisplayName,
            /* [in] */ const POTrackSchema *pSyncSchema,
            /* [retval][out] */ IPOSyncPartner **ppPartner) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSyncPartner( 
            /* [in] */ DWORD dwStoreId,
            /* [in] */ REFGUID gidPartner,
            /* [retval][out] */ IPOSyncPartner **ppPartner) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSyncPartners( 
            /* [in] */ DWORD dwStoreId,
            /* [retval][out] */ IEnumPOSyncPartners **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOSyncServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOSyncServices * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOSyncServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOSyncServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *Logon )( 
            IPOSyncServices * This,
            /* [in] */ HWND hWnd,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ REFIID riid,
            /* [iid_is][retval][out] */ IUnknown **ppSession);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsFromNames )( 
            IPOSyncServices * This,
            /* [in] */ DWORD dwStoreId,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const POPropNamed *rgNamedProps,
            /* [size_is][retval][out] */ DWORD *rgPropIds);
        
        HRESULT ( STDMETHODCALLTYPE *CreateStore )( 
            IPOSyncServices * This,
            /* [in] */ LPCWSTR pwszName,
            /* [in] */ DWORD ceInitProps,
            /* [size_is][in] */ const CEPROPVAL *rgInitProps,
            /* [retval][out] */ DWORD *pdwStoreId);
        
        HRESULT ( STDMETHODCALLTYPE *FindStore )( 
            IPOSyncServices * This,
            /* [in] */ LPCWSTR pwszName,
            /* [retval][out] */ DWORD *pdwStoreId);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteStore )( 
            IPOSyncServices * This,
            /* [in] */ DWORD dwStoreId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetStoreIdFromObjectId )( 
            IPOSyncServices * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCVOID pvObjectId,
            /* [out] */ DWORD *pdwStoreId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetObjectIdFromStoreId )( 
            IPOSyncServices * This,
            /* [in] */ DWORD dwStoreId,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbObjectId,
            /* [size_is][out] */ LPVOID pvObjectId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *ConvertIdToString )( 
            IPOSyncServices * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCVOID pvObjectId,
            /* [retval][out] */ BSTR *pbstrObjectId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *ConvertStringToId )( 
            IPOSyncServices * This,
            /* [in] */ LPCWSTR pwszObjectId,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbObjectId,
            /* [size_is][out] */ LPVOID pvObjectId);
        
        HRESULT ( STDMETHODCALLTYPE *AddSyncPartner )( 
            IPOSyncServices * This,
            /* [in] */ DWORD dwStoreId,
            /* [in] */ REFGUID gidPartner,
            /* [in] */ LPCWSTR pwszDisplayName,
            /* [in] */ const POTrackSchema *pSyncSchema,
            /* [retval][out] */ IPOSyncPartner **ppPartner);
        
        HRESULT ( STDMETHODCALLTYPE *GetSyncPartner )( 
            IPOSyncServices * This,
            /* [in] */ DWORD dwStoreId,
            /* [in] */ REFGUID gidPartner,
            /* [retval][out] */ IPOSyncPartner **ppPartner);
        
        HRESULT ( STDMETHODCALLTYPE *GetSyncPartners )( 
            IPOSyncServices * This,
            /* [in] */ DWORD dwStoreId,
            /* [retval][out] */ IEnumPOSyncPartners **ppEnum);
        
        END_INTERFACE
    } IPOSyncServicesVtbl;

    interface IPOSyncServices
    {
        CONST_VTBL struct IPOSyncServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOSyncServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOSyncServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOSyncServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOSyncServices_Logon(This,hWnd,eIdType,riid,ppSession)	\
    ( (This)->lpVtbl -> Logon(This,hWnd,eIdType,riid,ppSession) ) 

#define IPOSyncServices_GetIDsFromNames(This,dwStoreId,ceProps,rgNamedProps,rgPropIds)	\
    ( (This)->lpVtbl -> GetIDsFromNames(This,dwStoreId,ceProps,rgNamedProps,rgPropIds) ) 

#define IPOSyncServices_CreateStore(This,pwszName,ceInitProps,rgInitProps,pdwStoreId)	\
    ( (This)->lpVtbl -> CreateStore(This,pwszName,ceInitProps,rgInitProps,pdwStoreId) ) 

#define IPOSyncServices_FindStore(This,pwszName,pdwStoreId)	\
    ( (This)->lpVtbl -> FindStore(This,pwszName,pdwStoreId) ) 

#define IPOSyncServices_DeleteStore(This,dwStoreId)	\
    ( (This)->lpVtbl -> DeleteStore(This,dwStoreId) ) 

#define IPOSyncServices_GetStoreIdFromObjectId(This,eIdType,cbObjectId,pvObjectId,pdwStoreId)	\
    ( (This)->lpVtbl -> GetStoreIdFromObjectId(This,eIdType,cbObjectId,pvObjectId,pdwStoreId) ) 

#define IPOSyncServices_GetObjectIdFromStoreId(This,dwStoreId,eIdType,pcbObjectId,pvObjectId)	\
    ( (This)->lpVtbl -> GetObjectIdFromStoreId(This,dwStoreId,eIdType,pcbObjectId,pvObjectId) ) 

#define IPOSyncServices_ConvertIdToString(This,eIdType,cbObjectId,pvObjectId,pbstrObjectId)	\
    ( (This)->lpVtbl -> ConvertIdToString(This,eIdType,cbObjectId,pvObjectId,pbstrObjectId) ) 

#define IPOSyncServices_ConvertStringToId(This,pwszObjectId,eIdType,pcbObjectId,pvObjectId)	\
    ( (This)->lpVtbl -> ConvertStringToId(This,pwszObjectId,eIdType,pcbObjectId,pvObjectId) ) 

#define IPOSyncServices_AddSyncPartner(This,dwStoreId,gidPartner,pwszDisplayName,pSyncSchema,ppPartner)	\
    ( (This)->lpVtbl -> AddSyncPartner(This,dwStoreId,gidPartner,pwszDisplayName,pSyncSchema,ppPartner) ) 

#define IPOSyncServices_GetSyncPartner(This,dwStoreId,gidPartner,ppPartner)	\
    ( (This)->lpVtbl -> GetSyncPartner(This,dwStoreId,gidPartner,ppPartner) ) 

#define IPOSyncServices_GetSyncPartners(This,dwStoreId,ppEnum)	\
    ( (This)->lpVtbl -> GetSyncPartners(This,dwStoreId,ppEnum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IPOSyncServices_RemoteGetStoreIdFromObjectId_Proxy( 
    IPOSyncServices * This,
    /* [in] */ PO_IDTYPE eIdType,
    /* [in] */ ULONG cbObjectId,
    /* [size_is][in] */ LPCBYTE pbObjectId,
    /* [out] */ DWORD *pdwStoreId);


void __RPC_STUB IPOSyncServices_RemoteGetStoreIdFromObjectId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPOSyncServices_RemoteGetObjectIdFromStoreId_Proxy( 
    IPOSyncServices * This,
    /* [in] */ DWORD dwStoreId,
    /* [in] */ PO_IDTYPE eIdType,
    /* [out][in] */ ULONG *pcbObjectId,
    /* [size_is][out] */ LPBYTE pvObjectId);


void __RPC_STUB IPOSyncServices_RemoteGetObjectIdFromStoreId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPOSyncServices_RemoteConvertIdToString_Proxy( 
    IPOSyncServices * This,
    /* [in] */ PO_IDTYPE eIdType,
    /* [in] */ ULONG cbObjectId,
    /* [size_is][in] */ LPCBYTE pbObjectId,
    /* [retval][out] */ BSTR *pbstrObjectId);


void __RPC_STUB IPOSyncServices_RemoteConvertIdToString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPOSyncServices_RemoteConvertStringToId_Proxy( 
    IPOSyncServices * This,
    /* [in] */ LPCWSTR pwszObjectId,
    /* [in] */ PO_IDTYPE eIdType,
    /* [out][in] */ ULONG *pcbObjectId,
    /* [size_is][out] */ LPBYTE pbObjectId);


void __RPC_STUB IPOSyncServices_RemoteConvertStringToId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPOSyncServices_INTERFACE_DEFINED__ */


#ifndef __IPOChangeInfo_INTERFACE_DEFINED__
#define __IPOChangeInfo_INTERFACE_DEFINED__

/* interface IPOChangeInfo */
/* [uuid][object] */ 


EXTERN_C const IID IID_IPOChangeInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("466740DB-D9BB-4dea-8DFA-0211DF31520B")
    IPOChangeInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetChangeType( 
            /* [retval][out] */ PO_CHANGETYPE *peChangeType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetObjectId( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbObjectId,
            /* [size_is][out] */ LPBYTE pbObjectId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNewParentId( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbParentId,
            /* [size_is][out] */ LPBYTE pbParentId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPrevParentId( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbParentId,
            /* [size_is][out] */ LPBYTE pbParentId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetChangeMask( 
            /* [retval][out] */ ULONGLONG *pullChangedUnits) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOChangeInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOChangeInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOChangeInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOChangeInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetChangeType )( 
            IPOChangeInfo * This,
            /* [retval][out] */ PO_CHANGETYPE *peChangeType);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectId )( 
            IPOChangeInfo * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbObjectId,
            /* [size_is][out] */ LPBYTE pbObjectId);
        
        HRESULT ( STDMETHODCALLTYPE *GetNewParentId )( 
            IPOChangeInfo * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbParentId,
            /* [size_is][out] */ LPBYTE pbParentId);
        
        HRESULT ( STDMETHODCALLTYPE *GetPrevParentId )( 
            IPOChangeInfo * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbParentId,
            /* [size_is][out] */ LPBYTE pbParentId);
        
        HRESULT ( STDMETHODCALLTYPE *GetChangeMask )( 
            IPOChangeInfo * This,
            /* [retval][out] */ ULONGLONG *pullChangedUnits);
        
        END_INTERFACE
    } IPOChangeInfoVtbl;

    interface IPOChangeInfo
    {
        CONST_VTBL struct IPOChangeInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOChangeInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOChangeInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOChangeInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOChangeInfo_GetChangeType(This,peChangeType)	\
    ( (This)->lpVtbl -> GetChangeType(This,peChangeType) ) 

#define IPOChangeInfo_GetObjectId(This,eIdType,pcbObjectId,pbObjectId)	\
    ( (This)->lpVtbl -> GetObjectId(This,eIdType,pcbObjectId,pbObjectId) ) 

#define IPOChangeInfo_GetNewParentId(This,eIdType,pcbParentId,pbParentId)	\
    ( (This)->lpVtbl -> GetNewParentId(This,eIdType,pcbParentId,pbParentId) ) 

#define IPOChangeInfo_GetPrevParentId(This,eIdType,pcbParentId,pbParentId)	\
    ( (This)->lpVtbl -> GetPrevParentId(This,eIdType,pcbParentId,pbParentId) ) 

#define IPOChangeInfo_GetChangeMask(This,pullChangedUnits)	\
    ( (This)->lpVtbl -> GetChangeMask(This,pullChangedUnits) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOChangeInfo_INTERFACE_DEFINED__ */


#ifndef __IPOChangeFilter_INTERFACE_DEFINED__
#define __IPOChangeFilter_INTERFACE_DEFINED__

/* interface IPOChangeFilter */
/* [uuid][object] */ 


EXTERN_C const IID IID_IPOChangeFilter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FFCB64D1-6C7B-496b-B5DA-3EC2C1EB16CA")
    IPOChangeFilter : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetActionForChange( 
            /* [in] */ IPOChangeInfo *pChangeInfo,
            /* [retval][out] */ PO_CHANGEACTION *peAction) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOChangeFilterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOChangeFilter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOChangeFilter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOChangeFilter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetActionForChange )( 
            IPOChangeFilter * This,
            /* [in] */ IPOChangeInfo *pChangeInfo,
            /* [retval][out] */ PO_CHANGEACTION *peAction);
        
        END_INTERFACE
    } IPOChangeFilterVtbl;

    interface IPOChangeFilter
    {
        CONST_VTBL struct IPOChangeFilterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOChangeFilter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOChangeFilter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOChangeFilter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOChangeFilter_GetActionForChange(This,pChangeInfo,peAction)	\
    ( (This)->lpVtbl -> GetActionForChange(This,pChangeInfo,peAction) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOChangeFilter_INTERFACE_DEFINED__ */


#ifndef __IPOSyncPartner_INTERFACE_DEFINED__
#define __IPOSyncPartner_INTERFACE_DEFINED__

/* interface IPOSyncPartner */
/* [uuid][object] */ 


EXTERN_C const IID IID_IPOSyncPartner;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01D32BF7-62DA-4e94-A9A6-A73CC22F8F7C")
    IPOSyncPartner : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetIDsFromNames( 
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const POPropNamed *rgNamedProps,
            /* [size_is][retval][out] */ DWORD *rgPropIds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProps( 
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ DWORD *rgPropIds,
            /* [size_is][retval][out] */ CEPROPVAL **prgProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProps( 
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const CEPROPVAL *rgProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGuid( 
            /* [retval][out] */ GUID *pgidPartner) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStoreId( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbStoreId,
            /* [size_is][out] */ LPBYTE pbStoreId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSpecialFolderId( 
            /* [in] */ PO_FOLDERTYPE eFolderType,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbFolderId,
            /* [size_is][out] */ LPBYTE pbFolderId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnableFolderForSync( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbFolderId,
            /* [size_is][in] */ LPCBYTE pbFolderId,
            /* [in] */ BOOL fEnable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFolderEnabledForSync( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbFolderId,
            /* [size_is][in] */ LPCBYTE pbFolderId,
            /* [retval][out] */ BOOL *pfEnabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HasChanges( 
            /* [in] */ PO_SCOPETYPE eScopeType,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbFolderId,
            /* [size_is][in] */ LPCBYTE pbFolderId,
            /* [in] */ IPOChangeFilter *pFilter,
            /* [out] */ BOOL *pfHasChanges) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetChangeCount( 
            /* [in] */ PO_SCOPETYPE eScopeType,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbFolderId,
            /* [size_is][in] */ LPCBYTE pbFolderId,
            /* [in] */ IPOChangeFilter *pFilter,
            /* [out] */ ULONG *pulAdditions,
            /* [out] */ ULONG *pulModification,
            /* [out] */ ULONG *pulDeletions,
            /* [out] */ ULONG *pulMoves) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StartSyncSession( 
            /* [in] */ PO_SCOPETYPE eScopeType,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbFolderId,
            /* [size_is][in] */ LPCBYTE pbFolderId,
            /* [in] */ PO_CONFLICTPOLICY eConflictPolicy,
            /* [in] */ IPOChangeFilter *pFilter,
            /* [in] */ IUnknown *pUnkPrevState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNextChange( 
            /* [retval][out] */ IPOChangeInfo **ppChange) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetChangeForObject( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [retval][out] */ IPOChangeInfo **ppChange) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetExceptionOnChange( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetExceptionOnChangeUnits( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [in] */ ULONGLONG ullChangeUnits) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ResetChangeEnumeration( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndSyncSession( 
            /* [in] */ PO_SYNCSESSION_OUTCOME eOutcome,
            /* [retval][out] */ IUnknown **ppUnkState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRootFolder( 
            /* [retval][out] */ IPOFolderMetadata **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookupFolderObjectId( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookupFolderRemoteId( 
            /* [in] */ LPCWSTR pwszFolderId,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFolders( 
            /* [retval][out] */ IEnumPOFolderMetadata **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOSyncPartnerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOSyncPartner * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOSyncPartner * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOSyncPartner * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsFromNames )( 
            IPOSyncPartner * This,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const POPropNamed *rgNamedProps,
            /* [size_is][retval][out] */ DWORD *rgPropIds);
        
        HRESULT ( STDMETHODCALLTYPE *GetProps )( 
            IPOSyncPartner * This,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ DWORD *rgPropIds,
            /* [size_is][retval][out] */ CEPROPVAL **prgProps);
        
        HRESULT ( STDMETHODCALLTYPE *SetProps )( 
            IPOSyncPartner * This,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const CEPROPVAL *rgProps);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IPOSyncPartner * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *GetGuid )( 
            IPOSyncPartner * This,
            /* [retval][out] */ GUID *pgidPartner);
        
        HRESULT ( STDMETHODCALLTYPE *GetStoreId )( 
            IPOSyncPartner * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbStoreId,
            /* [size_is][out] */ LPBYTE pbStoreId);
        
        HRESULT ( STDMETHODCALLTYPE *GetSpecialFolderId )( 
            IPOSyncPartner * This,
            /* [in] */ PO_FOLDERTYPE eFolderType,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbFolderId,
            /* [size_is][out] */ LPBYTE pbFolderId);
        
        HRESULT ( STDMETHODCALLTYPE *EnableFolderForSync )( 
            IPOSyncPartner * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbFolderId,
            /* [size_is][in] */ LPCBYTE pbFolderId,
            /* [in] */ BOOL fEnable);
        
        HRESULT ( STDMETHODCALLTYPE *IsFolderEnabledForSync )( 
            IPOSyncPartner * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbFolderId,
            /* [size_is][in] */ LPCBYTE pbFolderId,
            /* [retval][out] */ BOOL *pfEnabled);
        
        HRESULT ( STDMETHODCALLTYPE *HasChanges )( 
            IPOSyncPartner * This,
            /* [in] */ PO_SCOPETYPE eScopeType,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbFolderId,
            /* [size_is][in] */ LPCBYTE pbFolderId,
            /* [in] */ IPOChangeFilter *pFilter,
            /* [out] */ BOOL *pfHasChanges);
        
        HRESULT ( STDMETHODCALLTYPE *GetChangeCount )( 
            IPOSyncPartner * This,
            /* [in] */ PO_SCOPETYPE eScopeType,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbFolderId,
            /* [size_is][in] */ LPCBYTE pbFolderId,
            /* [in] */ IPOChangeFilter *pFilter,
            /* [out] */ ULONG *pulAdditions,
            /* [out] */ ULONG *pulModification,
            /* [out] */ ULONG *pulDeletions,
            /* [out] */ ULONG *pulMoves);
        
        HRESULT ( STDMETHODCALLTYPE *StartSyncSession )( 
            IPOSyncPartner * This,
            /* [in] */ PO_SCOPETYPE eScopeType,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbFolderId,
            /* [size_is][in] */ LPCBYTE pbFolderId,
            /* [in] */ PO_CONFLICTPOLICY eConflictPolicy,
            /* [in] */ IPOChangeFilter *pFilter,
            /* [in] */ IUnknown *pUnkPrevState);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextChange )( 
            IPOSyncPartner * This,
            /* [retval][out] */ IPOChangeInfo **ppChange);
        
        HRESULT ( STDMETHODCALLTYPE *GetChangeForObject )( 
            IPOSyncPartner * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [retval][out] */ IPOChangeInfo **ppChange);
        
        HRESULT ( STDMETHODCALLTYPE *SetExceptionOnChange )( 
            IPOSyncPartner * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId);
        
        HRESULT ( STDMETHODCALLTYPE *SetExceptionOnChangeUnits )( 
            IPOSyncPartner * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [in] */ ULONGLONG ullChangeUnits);
        
        HRESULT ( STDMETHODCALLTYPE *ResetChangeEnumeration )( 
            IPOSyncPartner * This);
        
        HRESULT ( STDMETHODCALLTYPE *EndSyncSession )( 
            IPOSyncPartner * This,
            /* [in] */ PO_SYNCSESSION_OUTCOME eOutcome,
            /* [retval][out] */ IUnknown **ppUnkState);
        
        HRESULT ( STDMETHODCALLTYPE *GetRootFolder )( 
            IPOSyncPartner * This,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *LookupFolderObjectId )( 
            IPOSyncPartner * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *LookupFolderRemoteId )( 
            IPOSyncPartner * This,
            /* [in] */ LPCWSTR pwszFolderId,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *GetFolders )( 
            IPOSyncPartner * This,
            /* [retval][out] */ IEnumPOFolderMetadata **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IPOSyncPartner * This);
        
        END_INTERFACE
    } IPOSyncPartnerVtbl;

    interface IPOSyncPartner
    {
        CONST_VTBL struct IPOSyncPartnerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOSyncPartner_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOSyncPartner_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOSyncPartner_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOSyncPartner_GetIDsFromNames(This,ceProps,rgNamedProps,rgPropIds)	\
    ( (This)->lpVtbl -> GetIDsFromNames(This,ceProps,rgNamedProps,rgPropIds) ) 

#define IPOSyncPartner_GetProps(This,ceProps,rgPropIds,prgProps)	\
    ( (This)->lpVtbl -> GetProps(This,ceProps,rgPropIds,prgProps) ) 

#define IPOSyncPartner_SetProps(This,ceProps,rgProps)	\
    ( (This)->lpVtbl -> SetProps(This,ceProps,rgProps) ) 

#define IPOSyncPartner_GetName(This,pbstrName)	\
    ( (This)->lpVtbl -> GetName(This,pbstrName) ) 

#define IPOSyncPartner_GetGuid(This,pgidPartner)	\
    ( (This)->lpVtbl -> GetGuid(This,pgidPartner) ) 

#define IPOSyncPartner_GetStoreId(This,eIdType,pcbStoreId,pbStoreId)	\
    ( (This)->lpVtbl -> GetStoreId(This,eIdType,pcbStoreId,pbStoreId) ) 

#define IPOSyncPartner_GetSpecialFolderId(This,eFolderType,eIdType,pcbFolderId,pbFolderId)	\
    ( (This)->lpVtbl -> GetSpecialFolderId(This,eFolderType,eIdType,pcbFolderId,pbFolderId) ) 

#define IPOSyncPartner_EnableFolderForSync(This,eIdType,cbFolderId,pbFolderId,fEnable)	\
    ( (This)->lpVtbl -> EnableFolderForSync(This,eIdType,cbFolderId,pbFolderId,fEnable) ) 

#define IPOSyncPartner_IsFolderEnabledForSync(This,eIdType,cbFolderId,pbFolderId,pfEnabled)	\
    ( (This)->lpVtbl -> IsFolderEnabledForSync(This,eIdType,cbFolderId,pbFolderId,pfEnabled) ) 

#define IPOSyncPartner_HasChanges(This,eScopeType,eIdType,cbFolderId,pbFolderId,pFilter,pfHasChanges)	\
    ( (This)->lpVtbl -> HasChanges(This,eScopeType,eIdType,cbFolderId,pbFolderId,pFilter,pfHasChanges) ) 

#define IPOSyncPartner_GetChangeCount(This,eScopeType,eIdType,cbFolderId,pbFolderId,pFilter,pulAdditions,pulModification,pulDeletions,pulMoves)	\
    ( (This)->lpVtbl -> GetChangeCount(This,eScopeType,eIdType,cbFolderId,pbFolderId,pFilter,pulAdditions,pulModification,pulDeletions,pulMoves) ) 

#define IPOSyncPartner_StartSyncSession(This,eScopeType,eIdType,cbFolderId,pbFolderId,eConflictPolicy,pFilter,pUnkPrevState)	\
    ( (This)->lpVtbl -> StartSyncSession(This,eScopeType,eIdType,cbFolderId,pbFolderId,eConflictPolicy,pFilter,pUnkPrevState) ) 

#define IPOSyncPartner_GetNextChange(This,ppChange)	\
    ( (This)->lpVtbl -> GetNextChange(This,ppChange) ) 

#define IPOSyncPartner_GetChangeForObject(This,eIdType,cbObjectId,pbObjectId,ppChange)	\
    ( (This)->lpVtbl -> GetChangeForObject(This,eIdType,cbObjectId,pbObjectId,ppChange) ) 

#define IPOSyncPartner_SetExceptionOnChange(This,eIdType,cbObjectId,pbObjectId)	\
    ( (This)->lpVtbl -> SetExceptionOnChange(This,eIdType,cbObjectId,pbObjectId) ) 

#define IPOSyncPartner_SetExceptionOnChangeUnits(This,eIdType,cbObjectId,pbObjectId,ullChangeUnits)	\
    ( (This)->lpVtbl -> SetExceptionOnChangeUnits(This,eIdType,cbObjectId,pbObjectId,ullChangeUnits) ) 

#define IPOSyncPartner_ResetChangeEnumeration(This)	\
    ( (This)->lpVtbl -> ResetChangeEnumeration(This) ) 

#define IPOSyncPartner_EndSyncSession(This,eOutcome,ppUnkState)	\
    ( (This)->lpVtbl -> EndSyncSession(This,eOutcome,ppUnkState) ) 

#define IPOSyncPartner_GetRootFolder(This,ppMetadata)	\
    ( (This)->lpVtbl -> GetRootFolder(This,ppMetadata) ) 

#define IPOSyncPartner_LookupFolderObjectId(This,eIdType,cbObjectId,pbObjectId,ppMetadata)	\
    ( (This)->lpVtbl -> LookupFolderObjectId(This,eIdType,cbObjectId,pbObjectId,ppMetadata) ) 

#define IPOSyncPartner_LookupFolderRemoteId(This,pwszFolderId,ppMetadata)	\
    ( (This)->lpVtbl -> LookupFolderRemoteId(This,pwszFolderId,ppMetadata) ) 

#define IPOSyncPartner_GetFolders(This,ppEnum)	\
    ( (This)->lpVtbl -> GetFolders(This,ppEnum) ) 

#define IPOSyncPartner_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOSyncPartner_INTERFACE_DEFINED__ */


#ifndef __IPOMetadata_INTERFACE_DEFINED__
#define __IPOMetadata_INTERFACE_DEFINED__

/* interface IPOMetadata */
/* [uuid][object] */ 


EXTERN_C const IID IID_IPOMetadata;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EDD49A70-1907-4417-AE3E-583447851BB6")
    IPOMetadata : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetIDsFromNames( 
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const POPropNamed *rgNamedProps,
            /* [size_is][retval][out] */ DWORD *rgPropIds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProps( 
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ DWORD *rgPropIds,
            /* [size_is][retval][out] */ CEPROPVAL **prgProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProps( 
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const CEPROPVAL *rgProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDataType( 
            /* [retval][out] */ PO_DATATYPE *peType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetObjectId( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbObjectId,
            /* [size_is][out] */ LPBYTE pbObjectId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPartner( 
            /* [retval][out] */ IPOSyncPartner **ppPartner) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRemoteId( 
            /* [retval][out] */ BSTR *pbstrObjectId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRemoteId( 
            /* [in] */ LPCWSTR pwszObjectId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParent( 
            /* [retval][out] */ IPOFolderMetadata **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetParent( 
            /* [in] */ IPOFolderMetadata *pMetadata) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOMetadataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOMetadata * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOMetadata * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOMetadata * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsFromNames )( 
            IPOMetadata * This,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const POPropNamed *rgNamedProps,
            /* [size_is][retval][out] */ DWORD *rgPropIds);
        
        HRESULT ( STDMETHODCALLTYPE *GetProps )( 
            IPOMetadata * This,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ DWORD *rgPropIds,
            /* [size_is][retval][out] */ CEPROPVAL **prgProps);
        
        HRESULT ( STDMETHODCALLTYPE *SetProps )( 
            IPOMetadata * This,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const CEPROPVAL *rgProps);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataType )( 
            IPOMetadata * This,
            /* [retval][out] */ PO_DATATYPE *peType);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectId )( 
            IPOMetadata * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbObjectId,
            /* [size_is][out] */ LPBYTE pbObjectId);
        
        HRESULT ( STDMETHODCALLTYPE *GetPartner )( 
            IPOMetadata * This,
            /* [retval][out] */ IPOSyncPartner **ppPartner);
        
        HRESULT ( STDMETHODCALLTYPE *GetRemoteId )( 
            IPOMetadata * This,
            /* [retval][out] */ BSTR *pbstrObjectId);
        
        HRESULT ( STDMETHODCALLTYPE *SetRemoteId )( 
            IPOMetadata * This,
            /* [in] */ LPCWSTR pwszObjectId);
        
        HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IPOMetadata * This,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *SetParent )( 
            IPOMetadata * This,
            /* [in] */ IPOFolderMetadata *pMetadata);
        
        END_INTERFACE
    } IPOMetadataVtbl;

    interface IPOMetadata
    {
        CONST_VTBL struct IPOMetadataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOMetadata_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOMetadata_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOMetadata_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOMetadata_GetIDsFromNames(This,ceProps,rgNamedProps,rgPropIds)	\
    ( (This)->lpVtbl -> GetIDsFromNames(This,ceProps,rgNamedProps,rgPropIds) ) 

#define IPOMetadata_GetProps(This,ceProps,rgPropIds,prgProps)	\
    ( (This)->lpVtbl -> GetProps(This,ceProps,rgPropIds,prgProps) ) 

#define IPOMetadata_SetProps(This,ceProps,rgProps)	\
    ( (This)->lpVtbl -> SetProps(This,ceProps,rgProps) ) 

#define IPOMetadata_GetDataType(This,peType)	\
    ( (This)->lpVtbl -> GetDataType(This,peType) ) 

#define IPOMetadata_GetObjectId(This,eIdType,pcbObjectId,pbObjectId)	\
    ( (This)->lpVtbl -> GetObjectId(This,eIdType,pcbObjectId,pbObjectId) ) 

#define IPOMetadata_GetPartner(This,ppPartner)	\
    ( (This)->lpVtbl -> GetPartner(This,ppPartner) ) 

#define IPOMetadata_GetRemoteId(This,pbstrObjectId)	\
    ( (This)->lpVtbl -> GetRemoteId(This,pbstrObjectId) ) 

#define IPOMetadata_SetRemoteId(This,pwszObjectId)	\
    ( (This)->lpVtbl -> SetRemoteId(This,pwszObjectId) ) 

#define IPOMetadata_GetParent(This,ppMetadata)	\
    ( (This)->lpVtbl -> GetParent(This,ppMetadata) ) 

#define IPOMetadata_SetParent(This,pMetadata)	\
    ( (This)->lpVtbl -> SetParent(This,pMetadata) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOMetadata_INTERFACE_DEFINED__ */


#ifndef __IPOItemMetadata_INTERFACE_DEFINED__
#define __IPOItemMetadata_INTERFACE_DEFINED__

/* interface IPOItemMetadata */
/* [uuid][object] */ 


EXTERN_C const IID IID_IPOItemMetadata;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("57F86452-F49D-4478-8BFF-4A35D8E540C9")
    IPOItemMetadata : public IPOMetadata
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOItemMetadataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOItemMetadata * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOItemMetadata * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOItemMetadata * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsFromNames )( 
            IPOItemMetadata * This,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const POPropNamed *rgNamedProps,
            /* [size_is][retval][out] */ DWORD *rgPropIds);
        
        HRESULT ( STDMETHODCALLTYPE *GetProps )( 
            IPOItemMetadata * This,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ DWORD *rgPropIds,
            /* [size_is][retval][out] */ CEPROPVAL **prgProps);
        
        HRESULT ( STDMETHODCALLTYPE *SetProps )( 
            IPOItemMetadata * This,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const CEPROPVAL *rgProps);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataType )( 
            IPOItemMetadata * This,
            /* [retval][out] */ PO_DATATYPE *peType);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectId )( 
            IPOItemMetadata * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbObjectId,
            /* [size_is][out] */ LPBYTE pbObjectId);
        
        HRESULT ( STDMETHODCALLTYPE *GetPartner )( 
            IPOItemMetadata * This,
            /* [retval][out] */ IPOSyncPartner **ppPartner);
        
        HRESULT ( STDMETHODCALLTYPE *GetRemoteId )( 
            IPOItemMetadata * This,
            /* [retval][out] */ BSTR *pbstrObjectId);
        
        HRESULT ( STDMETHODCALLTYPE *SetRemoteId )( 
            IPOItemMetadata * This,
            /* [in] */ LPCWSTR pwszObjectId);
        
        HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IPOItemMetadata * This,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *SetParent )( 
            IPOItemMetadata * This,
            /* [in] */ IPOFolderMetadata *pMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IPOItemMetadata * This);
        
        END_INTERFACE
    } IPOItemMetadataVtbl;

    interface IPOItemMetadata
    {
        CONST_VTBL struct IPOItemMetadataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOItemMetadata_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOItemMetadata_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOItemMetadata_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOItemMetadata_GetIDsFromNames(This,ceProps,rgNamedProps,rgPropIds)	\
    ( (This)->lpVtbl -> GetIDsFromNames(This,ceProps,rgNamedProps,rgPropIds) ) 

#define IPOItemMetadata_GetProps(This,ceProps,rgPropIds,prgProps)	\
    ( (This)->lpVtbl -> GetProps(This,ceProps,rgPropIds,prgProps) ) 

#define IPOItemMetadata_SetProps(This,ceProps,rgProps)	\
    ( (This)->lpVtbl -> SetProps(This,ceProps,rgProps) ) 

#define IPOItemMetadata_GetDataType(This,peType)	\
    ( (This)->lpVtbl -> GetDataType(This,peType) ) 

#define IPOItemMetadata_GetObjectId(This,eIdType,pcbObjectId,pbObjectId)	\
    ( (This)->lpVtbl -> GetObjectId(This,eIdType,pcbObjectId,pbObjectId) ) 

#define IPOItemMetadata_GetPartner(This,ppPartner)	\
    ( (This)->lpVtbl -> GetPartner(This,ppPartner) ) 

#define IPOItemMetadata_GetRemoteId(This,pbstrObjectId)	\
    ( (This)->lpVtbl -> GetRemoteId(This,pbstrObjectId) ) 

#define IPOItemMetadata_SetRemoteId(This,pwszObjectId)	\
    ( (This)->lpVtbl -> SetRemoteId(This,pwszObjectId) ) 

#define IPOItemMetadata_GetParent(This,ppMetadata)	\
    ( (This)->lpVtbl -> GetParent(This,ppMetadata) ) 

#define IPOItemMetadata_SetParent(This,pMetadata)	\
    ( (This)->lpVtbl -> SetParent(This,pMetadata) ) 


#define IPOItemMetadata_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOItemMetadata_INTERFACE_DEFINED__ */


#ifndef __IPOFolderMetadata_INTERFACE_DEFINED__
#define __IPOFolderMetadata_INTERFACE_DEFINED__

/* interface IPOFolderMetadata */
/* [uuid][object] */ 


EXTERN_C const IID IID_IPOFolderMetadata;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DAD6E8E-2DD5-4b0b-BB79-AEB88FF6F288")
    IPOFolderMetadata : public IPOMetadata
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetFolderName( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFolderType( 
            /* [retval][out] */ PO_FOLDERTYPE *peType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRemoteKnowledge( 
            /* [retval][out] */ BSTR *pbstrRemoteKnowledge) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRemoteKnowledge( 
            /* [in] */ LPCWSTR pwszRemoteKnowledge) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddItem( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [in] */ LPCWSTR pwszObjectId,
            /* [retval][out] */ IPOItemMetadata **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookupItemObjectId( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [retval][out] */ IPOItemMetadata **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookupItemRemoteId( 
            /* [in] */ LPCWSTR pwszItemId,
            /* [retval][out] */ IPOItemMetadata **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItems( 
            /* [retval][out] */ IEnumPOItemMetadata **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddFolder( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [in] */ LPCWSTR pwszObjectId,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookupFolderObjectId( 
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookupFolderRemoteId( 
            /* [in] */ LPCWSTR pwszFolderId,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetChildFolders( 
            /* [retval][out] */ IEnumPOFolderMetadata **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ BOOL fDeleteChildFolders) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPOFolderMetadataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPOFolderMetadata * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPOFolderMetadata * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPOFolderMetadata * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsFromNames )( 
            IPOFolderMetadata * This,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const POPropNamed *rgNamedProps,
            /* [size_is][retval][out] */ DWORD *rgPropIds);
        
        HRESULT ( STDMETHODCALLTYPE *GetProps )( 
            IPOFolderMetadata * This,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ DWORD *rgPropIds,
            /* [size_is][retval][out] */ CEPROPVAL **prgProps);
        
        HRESULT ( STDMETHODCALLTYPE *SetProps )( 
            IPOFolderMetadata * This,
            /* [in] */ DWORD ceProps,
            /* [size_is][in] */ const CEPROPVAL *rgProps);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataType )( 
            IPOFolderMetadata * This,
            /* [retval][out] */ PO_DATATYPE *peType);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectId )( 
            IPOFolderMetadata * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [out][in] */ ULONG *pcbObjectId,
            /* [size_is][out] */ LPBYTE pbObjectId);
        
        HRESULT ( STDMETHODCALLTYPE *GetPartner )( 
            IPOFolderMetadata * This,
            /* [retval][out] */ IPOSyncPartner **ppPartner);
        
        HRESULT ( STDMETHODCALLTYPE *GetRemoteId )( 
            IPOFolderMetadata * This,
            /* [retval][out] */ BSTR *pbstrObjectId);
        
        HRESULT ( STDMETHODCALLTYPE *SetRemoteId )( 
            IPOFolderMetadata * This,
            /* [in] */ LPCWSTR pwszObjectId);
        
        HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IPOFolderMetadata * This,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *SetParent )( 
            IPOFolderMetadata * This,
            /* [in] */ IPOFolderMetadata *pMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *GetFolderName )( 
            IPOFolderMetadata * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *GetFolderType )( 
            IPOFolderMetadata * This,
            /* [retval][out] */ PO_FOLDERTYPE *peType);
        
        HRESULT ( STDMETHODCALLTYPE *GetRemoteKnowledge )( 
            IPOFolderMetadata * This,
            /* [retval][out] */ BSTR *pbstrRemoteKnowledge);
        
        HRESULT ( STDMETHODCALLTYPE *SetRemoteKnowledge )( 
            IPOFolderMetadata * This,
            /* [in] */ LPCWSTR pwszRemoteKnowledge);
        
        HRESULT ( STDMETHODCALLTYPE *AddItem )( 
            IPOFolderMetadata * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [in] */ LPCWSTR pwszObjectId,
            /* [retval][out] */ IPOItemMetadata **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *LookupItemObjectId )( 
            IPOFolderMetadata * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [retval][out] */ IPOItemMetadata **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *LookupItemRemoteId )( 
            IPOFolderMetadata * This,
            /* [in] */ LPCWSTR pwszItemId,
            /* [retval][out] */ IPOItemMetadata **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *GetItems )( 
            IPOFolderMetadata * This,
            /* [retval][out] */ IEnumPOItemMetadata **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *AddFolder )( 
            IPOFolderMetadata * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [in] */ LPCWSTR pwszObjectId,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *LookupFolderObjectId )( 
            IPOFolderMetadata * This,
            /* [in] */ PO_IDTYPE eIdType,
            /* [in] */ ULONG cbObjectId,
            /* [size_is][in] */ LPCBYTE pbObjectId,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *LookupFolderRemoteId )( 
            IPOFolderMetadata * This,
            /* [in] */ LPCWSTR pwszFolderId,
            /* [retval][out] */ IPOFolderMetadata **ppMetadata);
        
        HRESULT ( STDMETHODCALLTYPE *GetChildFolders )( 
            IPOFolderMetadata * This,
            /* [retval][out] */ IEnumPOFolderMetadata **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IPOFolderMetadata * This,
            /* [in] */ BOOL fDeleteChildFolders);
        
        END_INTERFACE
    } IPOFolderMetadataVtbl;

    interface IPOFolderMetadata
    {
        CONST_VTBL struct IPOFolderMetadataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPOFolderMetadata_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPOFolderMetadata_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPOFolderMetadata_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPOFolderMetadata_GetIDsFromNames(This,ceProps,rgNamedProps,rgPropIds)	\
    ( (This)->lpVtbl -> GetIDsFromNames(This,ceProps,rgNamedProps,rgPropIds) ) 

#define IPOFolderMetadata_GetProps(This,ceProps,rgPropIds,prgProps)	\
    ( (This)->lpVtbl -> GetProps(This,ceProps,rgPropIds,prgProps) ) 

#define IPOFolderMetadata_SetProps(This,ceProps,rgProps)	\
    ( (This)->lpVtbl -> SetProps(This,ceProps,rgProps) ) 

#define IPOFolderMetadata_GetDataType(This,peType)	\
    ( (This)->lpVtbl -> GetDataType(This,peType) ) 

#define IPOFolderMetadata_GetObjectId(This,eIdType,pcbObjectId,pbObjectId)	\
    ( (This)->lpVtbl -> GetObjectId(This,eIdType,pcbObjectId,pbObjectId) ) 

#define IPOFolderMetadata_GetPartner(This,ppPartner)	\
    ( (This)->lpVtbl -> GetPartner(This,ppPartner) ) 

#define IPOFolderMetadata_GetRemoteId(This,pbstrObjectId)	\
    ( (This)->lpVtbl -> GetRemoteId(This,pbstrObjectId) ) 

#define IPOFolderMetadata_SetRemoteId(This,pwszObjectId)	\
    ( (This)->lpVtbl -> SetRemoteId(This,pwszObjectId) ) 

#define IPOFolderMetadata_GetParent(This,ppMetadata)	\
    ( (This)->lpVtbl -> GetParent(This,ppMetadata) ) 

#define IPOFolderMetadata_SetParent(This,pMetadata)	\
    ( (This)->lpVtbl -> SetParent(This,pMetadata) ) 


#define IPOFolderMetadata_GetFolderName(This,pbstrName)	\
    ( (This)->lpVtbl -> GetFolderName(This,pbstrName) ) 

#define IPOFolderMetadata_GetFolderType(This,peType)	\
    ( (This)->lpVtbl -> GetFolderType(This,peType) ) 

#define IPOFolderMetadata_GetRemoteKnowledge(This,pbstrRemoteKnowledge)	\
    ( (This)->lpVtbl -> GetRemoteKnowledge(This,pbstrRemoteKnowledge) ) 

#define IPOFolderMetadata_SetRemoteKnowledge(This,pwszRemoteKnowledge)	\
    ( (This)->lpVtbl -> SetRemoteKnowledge(This,pwszRemoteKnowledge) ) 

#define IPOFolderMetadata_AddItem(This,eIdType,cbObjectId,pbObjectId,pwszObjectId,ppMetadata)	\
    ( (This)->lpVtbl -> AddItem(This,eIdType,cbObjectId,pbObjectId,pwszObjectId,ppMetadata) ) 

#define IPOFolderMetadata_LookupItemObjectId(This,eIdType,cbObjectId,pbObjectId,ppMetadata)	\
    ( (This)->lpVtbl -> LookupItemObjectId(This,eIdType,cbObjectId,pbObjectId,ppMetadata) ) 

#define IPOFolderMetadata_LookupItemRemoteId(This,pwszItemId,ppMetadata)	\
    ( (This)->lpVtbl -> LookupItemRemoteId(This,pwszItemId,ppMetadata) ) 

#define IPOFolderMetadata_GetItems(This,ppEnum)	\
    ( (This)->lpVtbl -> GetItems(This,ppEnum) ) 

#define IPOFolderMetadata_AddFolder(This,eIdType,cbObjectId,pbObjectId,pwszObjectId,ppMetadata)	\
    ( (This)->lpVtbl -> AddFolder(This,eIdType,cbObjectId,pbObjectId,pwszObjectId,ppMetadata) ) 

#define IPOFolderMetadata_LookupFolderObjectId(This,eIdType,cbObjectId,pbObjectId,ppMetadata)	\
    ( (This)->lpVtbl -> LookupFolderObjectId(This,eIdType,cbObjectId,pbObjectId,ppMetadata) ) 

#define IPOFolderMetadata_LookupFolderRemoteId(This,pwszFolderId,ppMetadata)	\
    ( (This)->lpVtbl -> LookupFolderRemoteId(This,pwszFolderId,ppMetadata) ) 

#define IPOFolderMetadata_GetChildFolders(This,ppEnum)	\
    ( (This)->lpVtbl -> GetChildFolders(This,ppEnum) ) 

#define IPOFolderMetadata_Delete(This,fDeleteChildFolders)	\
    ( (This)->lpVtbl -> Delete(This,fDeleteChildFolders) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPOFolderMetadata_INTERFACE_DEFINED__ */


#ifndef __IEnumPOSyncPartners_INTERFACE_DEFINED__
#define __IEnumPOSyncPartners_INTERFACE_DEFINED__

/* interface IEnumPOSyncPartners */
/* [uuid][object] */ 


EXTERN_C const IID IID_IEnumPOSyncPartners;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D8706AE2-7EE3-443f-B85F-0309E3D8747F")
    IEnumPOSyncPartners : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ceRequested,
            /* [length_is][size_is][out] */ IPOSyncPartner **rgpPartners,
            /* [out] */ ULONG *pceFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ceSkip) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ IEnumPOSyncPartners **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumPOSyncPartnersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumPOSyncPartners * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumPOSyncPartners * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumPOSyncPartners * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumPOSyncPartners * This,
            /* [in] */ ULONG ceRequested,
            /* [length_is][size_is][out] */ IPOSyncPartner **rgpPartners,
            /* [out] */ ULONG *pceFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumPOSyncPartners * This,
            /* [in] */ ULONG ceSkip);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumPOSyncPartners * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumPOSyncPartners * This,
            /* [retval][out] */ IEnumPOSyncPartners **ppEnum);
        
        END_INTERFACE
    } IEnumPOSyncPartnersVtbl;

    interface IEnumPOSyncPartners
    {
        CONST_VTBL struct IEnumPOSyncPartnersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumPOSyncPartners_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumPOSyncPartners_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumPOSyncPartners_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumPOSyncPartners_Next(This,ceRequested,rgpPartners,pceFetched)	\
    ( (This)->lpVtbl -> Next(This,ceRequested,rgpPartners,pceFetched) ) 

#define IEnumPOSyncPartners_Skip(This,ceSkip)	\
    ( (This)->lpVtbl -> Skip(This,ceSkip) ) 

#define IEnumPOSyncPartners_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumPOSyncPartners_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumPOSyncPartners_INTERFACE_DEFINED__ */


#ifndef __IEnumPOItemMetadata_INTERFACE_DEFINED__
#define __IEnumPOItemMetadata_INTERFACE_DEFINED__

/* interface IEnumPOItemMetadata */
/* [uuid][object] */ 


EXTERN_C const IID IID_IEnumPOItemMetadata;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("03DE8910-2B3A-4919-A7CB-398E6769B9F0")
    IEnumPOItemMetadata : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ceRequested,
            /* [length_is][size_is][out] */ IPOItemMetadata **rgpMetadata,
            /* [out] */ ULONG *pceFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ceSkip) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ IEnumPOItemMetadata **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumPOItemMetadataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumPOItemMetadata * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumPOItemMetadata * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumPOItemMetadata * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumPOItemMetadata * This,
            /* [in] */ ULONG ceRequested,
            /* [length_is][size_is][out] */ IPOItemMetadata **rgpMetadata,
            /* [out] */ ULONG *pceFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumPOItemMetadata * This,
            /* [in] */ ULONG ceSkip);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumPOItemMetadata * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumPOItemMetadata * This,
            /* [retval][out] */ IEnumPOItemMetadata **ppEnum);
        
        END_INTERFACE
    } IEnumPOItemMetadataVtbl;

    interface IEnumPOItemMetadata
    {
        CONST_VTBL struct IEnumPOItemMetadataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumPOItemMetadata_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumPOItemMetadata_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumPOItemMetadata_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumPOItemMetadata_Next(This,ceRequested,rgpMetadata,pceFetched)	\
    ( (This)->lpVtbl -> Next(This,ceRequested,rgpMetadata,pceFetched) ) 

#define IEnumPOItemMetadata_Skip(This,ceSkip)	\
    ( (This)->lpVtbl -> Skip(This,ceSkip) ) 

#define IEnumPOItemMetadata_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumPOItemMetadata_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumPOItemMetadata_INTERFACE_DEFINED__ */


#ifndef __IEnumPOFolderMetadata_INTERFACE_DEFINED__
#define __IEnumPOFolderMetadata_INTERFACE_DEFINED__

/* interface IEnumPOFolderMetadata */
/* [uuid][object] */ 


EXTERN_C const IID IID_IEnumPOFolderMetadata;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("757B7146-7BCD-44f7-83BB-886D33B4D909")
    IEnumPOFolderMetadata : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ceRequested,
            /* [length_is][size_is][out] */ IPOFolderMetadata **rgpMetadata,
            /* [out] */ ULONG *pceFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ceSkip) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ IEnumPOFolderMetadata **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumPOFolderMetadataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumPOFolderMetadata * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumPOFolderMetadata * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumPOFolderMetadata * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumPOFolderMetadata * This,
            /* [in] */ ULONG ceRequested,
            /* [length_is][size_is][out] */ IPOFolderMetadata **rgpMetadata,
            /* [out] */ ULONG *pceFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumPOFolderMetadata * This,
            /* [in] */ ULONG ceSkip);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumPOFolderMetadata * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumPOFolderMetadata * This,
            /* [retval][out] */ IEnumPOFolderMetadata **ppEnum);
        
        END_INTERFACE
    } IEnumPOFolderMetadataVtbl;

    interface IEnumPOFolderMetadata
    {
        CONST_VTBL struct IEnumPOFolderMetadataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumPOFolderMetadata_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumPOFolderMetadata_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumPOFolderMetadata_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumPOFolderMetadata_Next(This,ceRequested,rgpMetadata,pceFetched)	\
    ( (This)->lpVtbl -> Next(This,ceRequested,rgpMetadata,pceFetched) ) 

#define IEnumPOFolderMetadata_Skip(This,ceSkip)	\
    ( (This)->lpVtbl -> Skip(This,ceSkip) ) 

#define IEnumPOFolderMetadata_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumPOFolderMetadata_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumPOFolderMetadata_INTERFACE_DEFINED__ */



#ifndef __POSyncServicesLib_LIBRARY_DEFINED__
#define __POSyncServicesLib_LIBRARY_DEFINED__

/* library POSyncServicesLib */
/* [version][uuid] */ 


EXTERN_C const IID LIBID_POSyncServicesLib;

EXTERN_C const CLSID CLSID_POSyncServices;

#ifdef __cplusplus

class DECLSPEC_UUID("40B47A8F-C442-4f06-8304-AA1058EDEEA0")
POSyncServices;
#endif
#endif /* __POSyncServicesLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __RPC_USER  HWND_UserFree(     unsigned long *, HWND * ); 

/* [local] */ HRESULT STDMETHODCALLTYPE IPOSyncServices_GetStoreIdFromObjectId_Proxy( 
    IPOSyncServices * This,
    /* [in] */ PO_IDTYPE eIdType,
    /* [in] */ ULONG cbObjectId,
    /* [size_is][in] */ LPCVOID pvObjectId,
    /* [out] */ DWORD *pdwStoreId);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPOSyncServices_GetStoreIdFromObjectId_Stub( 
    IPOSyncServices * This,
    /* [in] */ PO_IDTYPE eIdType,
    /* [in] */ ULONG cbObjectId,
    /* [size_is][in] */ LPCBYTE pbObjectId,
    /* [out] */ DWORD *pdwStoreId);

/* [local] */ HRESULT STDMETHODCALLTYPE IPOSyncServices_GetObjectIdFromStoreId_Proxy( 
    IPOSyncServices * This,
    /* [in] */ DWORD dwStoreId,
    /* [in] */ PO_IDTYPE eIdType,
    /* [out][in] */ ULONG *pcbObjectId,
    /* [size_is][out] */ LPVOID pvObjectId);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPOSyncServices_GetObjectIdFromStoreId_Stub( 
    IPOSyncServices * This,
    /* [in] */ DWORD dwStoreId,
    /* [in] */ PO_IDTYPE eIdType,
    /* [out][in] */ ULONG *pcbObjectId,
    /* [size_is][out] */ LPBYTE pvObjectId);

/* [local] */ HRESULT STDMETHODCALLTYPE IPOSyncServices_ConvertIdToString_Proxy( 
    IPOSyncServices * This,
    /* [in] */ PO_IDTYPE eIdType,
    /* [in] */ ULONG cbObjectId,
    /* [size_is][in] */ LPCVOID pvObjectId,
    /* [retval][out] */ BSTR *pbstrObjectId);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPOSyncServices_ConvertIdToString_Stub( 
    IPOSyncServices * This,
    /* [in] */ PO_IDTYPE eIdType,
    /* [in] */ ULONG cbObjectId,
    /* [size_is][in] */ LPCBYTE pbObjectId,
    /* [retval][out] */ BSTR *pbstrObjectId);

/* [local] */ HRESULT STDMETHODCALLTYPE IPOSyncServices_ConvertStringToId_Proxy( 
    IPOSyncServices * This,
    /* [in] */ LPCWSTR pwszObjectId,
    /* [in] */ PO_IDTYPE eIdType,
    /* [out][in] */ ULONG *pcbObjectId,
    /* [size_is][out] */ LPVOID pvObjectId);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPOSyncServices_ConvertStringToId_Stub( 
    IPOSyncServices * This,
    /* [in] */ LPCWSTR pwszObjectId,
    /* [in] */ PO_IDTYPE eIdType,
    /* [out][in] */ ULONG *pcbObjectId,
    /* [size_is][out] */ LPBYTE pbObjectId);



/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\poomext.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//


/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0543 */
/* Compiler settings for poomext.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __poomext_h__
#define __poomext_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IPimNewCard_FWD_DEFINED__
#define __IPimNewCard_FWD_DEFINED__
typedef interface IPimNewCard IPimNewCard;
#endif 	/* __IPimNewCard_FWD_DEFINED__ */


#ifndef __IPimDisplayCard_FWD_DEFINED__
#define __IPimDisplayCard_FWD_DEFINED__
typedef interface IPimDisplayCard IPimDisplayCard;
#endif 	/* __IPimDisplayCard_FWD_DEFINED__ */


#ifndef __IPimEditCard_FWD_DEFINED__
#define __IPimEditCard_FWD_DEFINED__
typedef interface IPimEditCard IPimEditCard;
#endif 	/* __IPimEditCard_FWD_DEFINED__ */


#ifndef __IPimPivotPage_FWD_DEFINED__
#define __IPimPivotPage_FWD_DEFINED__
typedef interface IPimPivotPage IPimPivotPage;
#endif 	/* __IPimPivotPage_FWD_DEFINED__ */


#ifndef __IPimPivotPageManager_FWD_DEFINED__
#define __IPimPivotPageManager_FWD_DEFINED__
typedef interface IPimPivotPageManager IPimPivotPageManager;
#endif 	/* __IPimPivotPageManager_FWD_DEFINED__ */


#ifndef __IPimPivotPageProvider_FWD_DEFINED__
#define __IPimPivotPageProvider_FWD_DEFINED__
typedef interface IPimPivotPageProvider IPimPivotPageProvider;
#endif 	/* __IPimPivotPageProvider_FWD_DEFINED__ */


#ifndef __IPimConfigurationManager_FWD_DEFINED__
#define __IPimConfigurationManager_FWD_DEFINED__
typedef interface IPimConfigurationManager IPimConfigurationManager;
#endif 	/* __IPimConfigurationManager_FWD_DEFINED__ */


/* header files for imported files */
#include "pimstore.h"
#include "menumanager.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_poomext_0000_0000 */
/* [local] */ 

//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this source code is subject to the terms of the Microsoft
// premium shared source license agreement under which you licensed
// this source code. If you did not accept the terms of the license
// agreement, you are not authorized to use this source code.
// For the terms of the license, please see the license agreement
// signed by you and Microsoft.
// THE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
// ***********************************************************************
//
#ifndef MIDL_PASS
#include <windows.h>
#include <ole2.h>
#endif
typedef /* [v1_enum] */ 
enum PimEditCardMode
    {	PimEditCardMode_InvokeAfterDefaultCard	= 0,
	PimEditCardMode_ReplaceDefaultCard	= 1
    } 	PimEditCardMode;

DEFINE_GUID(IID_IPimNewCard, 0x6689d56b, 0x847e, 0x4a45, 0xba, 0x80, 0x33, 0x82, 0xa8, 0xc6, 0x12, 0x22);


extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0000_v0_0_s_ifspec;

#ifndef __IPimNewCard_INTERFACE_DEFINED__
#define __IPimNewCard_INTERFACE_DEFINED__

/* interface IPimNewCard */
/* [local][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPimNewCard;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6689d56b-847e-4a45-ba80-3382a8c61222")
    IPimNewCard : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSupportedNewCardItemTypes( 
            /* [out] */ OlItemType **ppItemTypes,
            /* [out] */ DWORD *pcItemTypes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSupportedNewCardMode( 
            /* [out] */ PimEditCardMode *pMode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ HWND hwndParent,
            /* [in] */ IItem2 *pItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPimNewCardVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPimNewCard * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPimNewCard * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPimNewCard * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSupportedNewCardItemTypes )( 
            IPimNewCard * This,
            /* [out] */ OlItemType **ppItemTypes,
            /* [out] */ DWORD *pcItemTypes);
        
        HRESULT ( STDMETHODCALLTYPE *GetSupportedNewCardMode )( 
            IPimNewCard * This,
            /* [out] */ PimEditCardMode *pMode);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            IPimNewCard * This,
            /* [in] */ HWND hwndParent,
            /* [in] */ IItem2 *pItem);
        
        END_INTERFACE
    } IPimNewCardVtbl;

    interface IPimNewCard
    {
        CONST_VTBL struct IPimNewCardVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPimNewCard_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPimNewCard_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPimNewCard_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPimNewCard_GetSupportedNewCardItemTypes(This,ppItemTypes,pcItemTypes)	\
    ( (This)->lpVtbl -> GetSupportedNewCardItemTypes(This,ppItemTypes,pcItemTypes) ) 

#define IPimNewCard_GetSupportedNewCardMode(This,pMode)	\
    ( (This)->lpVtbl -> GetSupportedNewCardMode(This,pMode) ) 

#define IPimNewCard_Create(This,hwndParent,pItem)	\
    ( (This)->lpVtbl -> Create(This,hwndParent,pItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPimNewCard_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_poomext_0000_0001 */
/* [local] */ 

DEFINE_GUID(IID_IPimDisplayCard, 0x2e337d00, 0xca7b, 0x4ac5, 0xb8, 0x05, 0x98, 0xec, 0x7e, 0x26, 0xaf, 0x66);


extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0001_v0_0_s_ifspec;

#ifndef __IPimDisplayCard_INTERFACE_DEFINED__
#define __IPimDisplayCard_INTERFACE_DEFINED__

/* interface IPimDisplayCard */
/* [local][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPimDisplayCard;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2e337d00-ca7b-4ac5-b805-98ec7e26af66")
    IPimDisplayCard : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSupportedDisplayCardItemTypes( 
            /* [out] */ OlItemType **ppItemTypes,
            /* [out] */ DWORD *pcItemTypes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Display( 
            /* [in] */ HWND hwndParent,
            IItem2 *pItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPimDisplayCardVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPimDisplayCard * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPimDisplayCard * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPimDisplayCard * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSupportedDisplayCardItemTypes )( 
            IPimDisplayCard * This,
            /* [out] */ OlItemType **ppItemTypes,
            /* [out] */ DWORD *pcItemTypes);
        
        HRESULT ( STDMETHODCALLTYPE *Display )( 
            IPimDisplayCard * This,
            /* [in] */ HWND hwndParent,
            IItem2 *pItem);
        
        END_INTERFACE
    } IPimDisplayCardVtbl;

    interface IPimDisplayCard
    {
        CONST_VTBL struct IPimDisplayCardVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPimDisplayCard_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPimDisplayCard_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPimDisplayCard_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPimDisplayCard_GetSupportedDisplayCardItemTypes(This,ppItemTypes,pcItemTypes)	\
    ( (This)->lpVtbl -> GetSupportedDisplayCardItemTypes(This,ppItemTypes,pcItemTypes) ) 

#define IPimDisplayCard_Display(This,hwndParent,pItem)	\
    ( (This)->lpVtbl -> Display(This,hwndParent,pItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPimDisplayCard_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_poomext_0000_0002 */
/* [local] */ 

DEFINE_GUID(IID_IPimEditCard, 0x3924d61e, 0xf9f7, 0x49ba, 0xb7, 0x5b, 0x6b, 0x15, 0x85, 0x5f, 0x67, 0xe);


extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0002_v0_0_s_ifspec;

#ifndef __IPimEditCard_INTERFACE_DEFINED__
#define __IPimEditCard_INTERFACE_DEFINED__

/* interface IPimEditCard */
/* [local][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPimEditCard;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3924D61E-F9F7-49ba-B75B-6B15855F670E")
    IPimEditCard : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSupportedEditCardItemTypes( 
            /* [out] */ OlItemType **ppItemTypes,
            /* [out] */ DWORD *pcItemTypes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSupportedEditCardMode( 
            /* [out] */ PimEditCardMode *pMode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Edit( 
            /* [in] */ HWND hwndParent,
            /* [in] */ IItem2 *pItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPimEditCardVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPimEditCard * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPimEditCard * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPimEditCard * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSupportedEditCardItemTypes )( 
            IPimEditCard * This,
            /* [out] */ OlItemType **ppItemTypes,
            /* [out] */ DWORD *pcItemTypes);
        
        HRESULT ( STDMETHODCALLTYPE *GetSupportedEditCardMode )( 
            IPimEditCard * This,
            /* [out] */ PimEditCardMode *pMode);
        
        HRESULT ( STDMETHODCALLTYPE *Edit )( 
            IPimEditCard * This,
            /* [in] */ HWND hwndParent,
            /* [in] */ IItem2 *pItem);
        
        END_INTERFACE
    } IPimEditCardVtbl;

    interface IPimEditCard
    {
        CONST_VTBL struct IPimEditCardVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPimEditCard_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPimEditCard_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPimEditCard_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPimEditCard_GetSupportedEditCardItemTypes(This,ppItemTypes,pcItemTypes)	\
    ( (This)->lpVtbl -> GetSupportedEditCardItemTypes(This,ppItemTypes,pcItemTypes) ) 

#define IPimEditCard_GetSupportedEditCardMode(This,pMode)	\
    ( (This)->lpVtbl -> GetSupportedEditCardMode(This,pMode) ) 

#define IPimEditCard_Edit(This,hwndParent,pItem)	\
    ( (This)->lpVtbl -> Edit(This,hwndParent,pItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPimEditCard_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_poomext_0000_0003 */
/* [local] */ 

DEFINE_GUID(IID_IPimPivotPage, 0xbb4e0631, 0x2728, 0x4a58, 0xad, 0xf2, 0xb5, 0x80, 0x50, 0xa8, 0x9b, 0x91);


extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0003_v0_0_s_ifspec;

#ifndef __IPimPivotPage_INTERFACE_DEFINED__
#define __IPimPivotPage_INTERFACE_DEFINED__

/* interface IPimPivotPage */
/* [local][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPimPivotPage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bb4e0631-2728-4a58-adf2-b58050a89b91")
    IPimPivotPage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE PreAdd( 
            /* [in] */ HWND hwndPivotControl,
            /* [out] */ void **ppPivotData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetVerbManager( 
            /* [in] */ IVerbManager *pVerbManager) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PostRemove( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPimPivotPageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPimPivotPage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPimPivotPage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPimPivotPage * This);
        
        HRESULT ( STDMETHODCALLTYPE *PreAdd )( 
            IPimPivotPage * This,
            /* [in] */ HWND hwndPivotControl,
            /* [out] */ void **ppPivotData);
        
        HRESULT ( STDMETHODCALLTYPE *SetVerbManager )( 
            IPimPivotPage * This,
            /* [in] */ IVerbManager *pVerbManager);
        
        HRESULT ( STDMETHODCALLTYPE *PostRemove )( 
            IPimPivotPage * This);
        
        END_INTERFACE
    } IPimPivotPageVtbl;

    interface IPimPivotPage
    {
        CONST_VTBL struct IPimPivotPageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPimPivotPage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPimPivotPage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPimPivotPage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPimPivotPage_PreAdd(This,hwndPivotControl,ppPivotData)	\
    ( (This)->lpVtbl -> PreAdd(This,hwndPivotControl,ppPivotData) ) 

#define IPimPivotPage_SetVerbManager(This,pVerbManager)	\
    ( (This)->lpVtbl -> SetVerbManager(This,pVerbManager) ) 

#define IPimPivotPage_PostRemove(This)	\
    ( (This)->lpVtbl -> PostRemove(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPimPivotPage_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_poomext_0000_0004 */
/* [local] */ 

DEFINE_GUID(IID_IPimPivotPageManager, 0x8f2a75be, 0x1625, 0x400a, 0x86, 0xda, 0xab, 0xd2, 0x65, 0xfd, 0x16, 0x28);


extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0004_v0_0_s_ifspec;

#ifndef __IPimPivotPageManager_INTERFACE_DEFINED__
#define __IPimPivotPageManager_INTERFACE_DEFINED__

/* interface IPimPivotPageManager */
/* [local][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPimPivotPageManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8f2a75be-1625-400a-86da-abd265fd1628")
    IPimPivotPageManager : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InsertPage( 
            /* [in] */ IPimPivotPage *pPage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemovePage( 
            /* [in] */ IPimPivotPage *pPage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPimPivotPageManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPimPivotPageManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPimPivotPageManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPimPivotPageManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPimPivotPageManager * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPimPivotPageManager * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPimPivotPageManager * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPimPivotPageManager * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *InsertPage )( 
            IPimPivotPageManager * This,
            /* [in] */ IPimPivotPage *pPage);
        
        HRESULT ( STDMETHODCALLTYPE *RemovePage )( 
            IPimPivotPageManager * This,
            /* [in] */ IPimPivotPage *pPage);
        
        END_INTERFACE
    } IPimPivotPageManagerVtbl;

    interface IPimPivotPageManager
    {
        CONST_VTBL struct IPimPivotPageManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPimPivotPageManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPimPivotPageManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPimPivotPageManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPimPivotPageManager_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPimPivotPageManager_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPimPivotPageManager_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPimPivotPageManager_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPimPivotPageManager_InsertPage(This,pPage)	\
    ( (This)->lpVtbl -> InsertPage(This,pPage) ) 

#define IPimPivotPageManager_RemovePage(This,pPage)	\
    ( (This)->lpVtbl -> RemovePage(This,pPage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPimPivotPageManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_poomext_0000_0005 */
/* [local] */ 

DEFINE_GUID(IID_IPimPivotPageProvider, 0x4817ac18, 0xb9f4, 0x4d00, 0xa8, 0x88, 0xb9, 0x47, 0x61, 0x50, 0xf1, 0x16);


extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0005_v0_0_s_ifspec;

#ifndef __IPimPivotPageProvider_INTERFACE_DEFINED__
#define __IPimPivotPageProvider_INTERFACE_DEFINED__

/* interface IPimPivotPageProvider */
/* [local][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPimPivotPageProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4817ac18-b9f4-4d00-a888-b9476150f116")
    IPimPivotPageProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ IPimPivotPageManager *pManager,
            /* [in] */ IItem2 *pItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPimPivotPageProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPimPivotPageProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPimPivotPageProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPimPivotPageProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IPimPivotPageProvider * This,
            /* [in] */ IPimPivotPageManager *pManager,
            /* [in] */ IItem2 *pItem);
        
        END_INTERFACE
    } IPimPivotPageProviderVtbl;

    interface IPimPivotPageProvider
    {
        CONST_VTBL struct IPimPivotPageProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPimPivotPageProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPimPivotPageProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPimPivotPageProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPimPivotPageProvider_Initialize(This,pManager,pItem)	\
    ( (This)->lpVtbl -> Initialize(This,pManager,pItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPimPivotPageProvider_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_poomext_0000_0006 */
/* [local] */ 

DEFINE_GUID(IID_IPimConfigurationManager, 0x1c502e68, 0xc629, 0x4645, 0x9b, 0xb7, 0x50, 0x1a, 0xb7, 0x05, 0x0b, 0xd4);


extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0006_v0_0_s_ifspec;

#ifndef __IPimConfigurationManager_INTERFACE_DEFINED__
#define __IPimConfigurationManager_INTERFACE_DEFINED__

/* interface IPimConfigurationManager */
/* [local][dual][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IPimConfigurationManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1c502e68-c629-4645-9bb7-501ab7050bd4")
    IPimConfigurationManager : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RegisterProvider( 
            /* [in] */ CLSID *pProviderId,
            /* [in] */ OLITEMID *pStoreId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnregisterProvider( 
            /* [in] */ CLSID *pProviderId,
            /* [in] */ OLITEMID *pStoreId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPimConfigurationManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPimConfigurationManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPimConfigurationManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPimConfigurationManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPimConfigurationManager * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPimConfigurationManager * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPimConfigurationManager * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPimConfigurationManager * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterProvider )( 
            IPimConfigurationManager * This,
            /* [in] */ CLSID *pProviderId,
            /* [in] */ OLITEMID *pStoreId);
        
        HRESULT ( STDMETHODCALLTYPE *UnregisterProvider )( 
            IPimConfigurationManager * This,
            /* [in] */ CLSID *pProviderId,
            /* [in] */ OLITEMID *pStoreId);
        
        END_INTERFACE
    } IPimConfigurationManagerVtbl;

    interface IPimConfigurationManager
    {
        CONST_VTBL struct IPimConfigurationManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPimConfigurationManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPimConfigurationManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPimConfigurationManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPimConfigurationManager_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IPimConfigurationManager_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IPimConfigurationManager_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IPimConfigurationManager_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IPimConfigurationManager_RegisterProvider(This,pProviderId,pStoreId)	\
    ( (This)->lpVtbl -> RegisterProvider(This,pProviderId,pStoreId) ) 

#define IPimConfigurationManager_UnregisterProvider(This,pProviderId,pStoreId)	\
    ( (This)->lpVtbl -> UnregisterProvider(This,pProviderId,pStoreId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPimConfigurationManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_poomext_0000_0007 */
/* [local] */ 

DEFINE_GUID(CLSID_PimConfigurationManager, 0x1c502e67, 0xc629, 0x4645, 0x9b, 0xb7, 0x50, 0x1a, 0xb7, 0x05, 0x0b, 0xd4);
DEFINE_GUID(LIBID_PoomExtension, 0xad058d22, 0x9acf, 0x4bfe, 0xbe, 0x3a, 0x2d, 0x05, 0xfa, 0xe6, 0x56, 0xcd);
// Failure code meaning that a provider is already registered for the store and therefore a 
// new one will not be registered in the applicable context when using RegisterProvider
#define E_PROVIDER_ALREADY_REGISTERED          MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 500)
// Failure code meaning that a provider is not registered for the store and therefore won't be
// unregistered in the applicable context when using UnregisterProvider
#define E_PROVIDER_NOT_REGISTERED              MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 501)
// Success code meaning that the specified provider is already registered for the store 
#define S_PROVIDER_ALREADY_REGISTERED          MAKE_HRESULT(SEVERITY_SUCCESS, FACILITY_ITF, 600)


extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_poomext_0000_0007_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\pmfunc.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/*++
THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
PARTICULAR PURPOSE.

Module Name:  

afdfunc.h

Abstract:

Functions exposed from the AFD system process

Notes: 


--*/

// @CESYSGEN IF CE_MODULES_AFD

#pragma once

#ifndef _AFDFUNC_H_
#define _AFDFUNC_H_

//#include <types.h>
//#include <wtypes.h>
#include <windns.h>

#ifndef _AFD_NO_WS2

#endif

#ifdef __cplusplus
extern "C" {
#endif

#ifndef _SOCK_LIST_DEF
#define _SOCK_LIST_DEF

typedef struct _SOCK_LIST {
    DWORD               hSocket;            // handle to socket passed in from dll layer
    struct _SOCK_INFO   *Socket;             // the target socket
    DWORD               EventMask;          // events the client is interested in
    DWORD               Context;            // user-defined context value (handle?)
    struct _SOCK_INFO   *pSock;         // ptr to real socket
                // no need to confuse people Context is just a SOCKET
    HANDLE              hHandleLock;
    
} SOCK_LIST, *LPSOCK_LIST, *PSOCK_LIST;


typedef struct _PMSOCK_LIST {
    DWORD               hSocket;            // handle to socket passed in from dll layer
    struct _Socket      *Socket;             // the target socket
    DWORD               EventMask;          // events the client is interested in
    DWORD               Context;            // user-defined context value (handle?)
    struct _Socket      *pSock;         // ptr to real socket
                // no need to confuse people Context is just a SOCKET
    HANDLE              hHandleLock;
    
} PMSOCK_LIST, *PPMSOCK_LIST;


#endif  // _SOCK_LIST_DEF


#ifndef SOCKHAND_DEFINED
DECLARE_HANDLE(SOCKHAND);
typedef SOCKHAND *PSOCKHAND;
#define SOCKHAND_DEFINED
#endif

#include "ras.h"
#include "tapi.h"
                
#ifdef __cplusplus
}
#endif

#ifdef WINCEOEM

#if defined(WINCEMACRO)
#include <mPmFunc.h>    // macros
#endif

#ifndef WINCEMACRO  //defined(WINCEWSPMMACRO)

#ifdef __cplusplus
extern "C" {
#endif


SOCKHAND PMSocket(DWORD AddressFamily, DWORD SocketType, DWORD Protocol,
                DWORD CatId, GUID *pProvId, DWORD cProvId);
// BUGBUG: NYI
/*
DWORD AFDControl(DWORD Protocol, DWORD Action, VOID *pInputBuf, 
            DWORD cbInputBuf, VOID *pOutputBuf, DWORD cbOutputBuf, DWORD *pcOutputBuf);

DWORD AFDGetHostentByAttr(LPSOCK_THREAD pThread, DWORD cbThread, LPWSTR Name,
                        LPBYTE Address, LPVOID pOptions, DWORD cOptions);

DWORD AFDAddIPHostent(LPWSTR Hostname, char **IpAddr, LPWSTR Aliases,
                      LPFILETIME lpFileTime);

BOOL APIENTRY AfdAddInterface (PTSTR pAdapter, void *Nte, DWORD Context,
                               int Flags, uint IpAddr, uint SubnetMask,
                               int cDns, uint *pDns, int cWins, uint *pWins);

DWORD NETbios(DWORD x1, DWORD dwOpCode, PVOID pNCB, DWORD cBuf1,
              PBYTE pBuf1, DWORD cBuf2, PDWORD pBuf2);
*/

int PMSelect(UINT ReadCount, LPSOCK_LIST ReadList, UINT cbReadList, 
                UINT WriteCount, LPSOCK_LIST WriteList, UINT cbWriteList,
                UINT ExceptCount, LPSOCK_LIST ExceptList, UINT cbExceptList,
                const struct timeval *timeout);

int PMInstallProvider(GUID *pProviderId,const WCHAR *szProviderDllPath,
            const LPWSAPROTOCOL_INFOW pProtocolInfoList, DWORD cbProtocolInfoList,
            DWORD NumberOfEntries, DWORD Flags);

int PMEnumProtocols(int *pProtocols, WSAPROTOCOL_INFOW *pProtocolBuffer,
            DWORD cbBuffer, DWORD *pBufferLength, DWORD *pFlags, int *pErrno);

int PMFindProvider(int af, int type, int protocol, DWORD dwFlags,
            DWORD CatalogEntryId, WSAPROTOCOL_INFOW *pProtocolInfo,
            DWORD cbProtocolInfo, LPWSTR pszPath, DWORD cbPath);

int PMInstallNameSpace(LPWSTR pszIdentifier, LPWSTR pszPathName, 
            DWORD dwNameSpace, DWORD dwVersion, GUID *pProviderId, DWORD *pFlags);

int PMEnumNameSpaceProviders(DWORD *pcBuf, WSANAMESPACE_INFOW   *pBuf,
            DWORD cBuf, DWORD *pFlags, int *pErr);
                            

int PMFindNameSpaces(WSAQUERYSETW *pQuery, void *pBuf, int cBuf, int *pcBuf, 
            int *pErr);


int PMAddrConvert(DWORD Op, DWORD AddrFamily, SOCKADDR *pSockAddr, 
        DWORD cSockAddr, DWORD *pcSockAddr, LPWSAPROTOCOL_INFOW pProtInfo, 
        DWORD cbProtInfo, PWSTR psAddr, DWORD cAddr, DWORD *pcAddr);


DNS_STATUS AFDDnsQuery_W(PCWSTR pszName, WORD wType, DWORD Options, 
        PIP4_ARRAY aipServers, DWORD cbServers, PDNS_RECORD *ppQueryResults,
        PVOID *pReserved);


void AfdDNSRecordListFree(PDNS_RECORD pRecordList, DNS_FREE_TYPE FreeType);


DWORD AFD_UpdateOrModifyRecords(PDNS_RECORD pAddRecords, 
        PDNS_RECORD pDeleteRecords, DWORD Options, HANDLE hContext,
        PIP4_ARRAY pServerList, DWORD cbServers, PVOID pReserved, BOOL fReplace);

 
int PMAccept(UINT hListeningSock, UINT *phAcceptedSock, PSOCKADDR pAddr, 
    DWORD cbAddr, DWORD *pcbAddr, LPCONDITIONPROC pfnCondition, DWORD CallbackData);


int PMBind(UINT hPmSock, PSOCKADDR pAddr, DWORD cbAddr);


int PMConnect(UINT hPmSock, PSOCKADDR pAddr, DWORD cbAddr);


int PMIoctl(UINT hPmSock, DWORD Code, VOID *pInBuf, DWORD cbInBuf, VOID *pOutBuf,
        DWORD cbOutBuf, DWORD *pcbOutBuf, WSAOVERLAPPED *pOv, DWORD cbOv,
        LPWSAOVERLAPPED_COMPLETION_ROUTINE pCompRtn, LPWSATHREADID pThreadId);


int PMListen(UINT hPmSock, DWORD Backlog);


int PMRecv(UINT hPmSock, WSABUF *pWsaBufs, DWORD cWsaBufs, DWORD *pcbRcvd, 
        DWORD *pFlags);


int PMRecvFrom(UINT hPmSock, WSABUF *pWsaBufs, DWORD cWsaBufs, DWORD *pcbRcvd,
        DWORD *pFlags, PSOCKADDR pAddr, DWORD cbAddr, DWORD *pcbAddr);


// this is used for handling or Overlapped and special calls which regular
// recv/recvfrom can't handle
int PMRecvEx(UINT hPmSock, WSABUF *pWsaBufs, DWORD cWsaBufs, DWORD *pcbRcvd, 
        DWORD *pFlags, PSOCKADDR pAddr, DWORD cbAddr, DWORD *pcbAddr, 
        WSAOVERLAPPED *pOv, LPWSAOVERLAPPED_COMPLETION_ROUTINE pCompRtn, 
        LPWSATHREADID pThreadId, WSABUF *pControl);


int PMSend(UINT hPmSock, WSABUF *pWsaBufs, DWORD cWsaBufs, DWORD *pcbSent, 
        DWORD Flags);


int PMSendTo(UINT hPmSock, WSABUF *pWsaBufs, DWORD cWsaBufs, DWORD *pcbSent, 
        DWORD Flags, PSOCKADDR pAddr, DWORD cbAddr);


// this is used for handling Overlapped and special calls which regular
// send/sendto can't handle
int PMSendEx(UINT hPmSock, WSABUF *pWsaBufs, DWORD cWsaBufs, DWORD *pcbSent, 
        DWORD Flags, PSOCKADDR pAddr, DWORD cbAddr, WSAOVERLAPPED *pOv, 
        LPWSAOVERLAPPED_COMPLETION_ROUTINE pCompRtn, LPWSATHREADID pThreadId);


int PMSendMsg(IN UINT hPmSock, IN LPWSAMSG pMsg, IN DWORD Flags,
    __out_opt LPDWORD pcbSent, __in_opt LPWSAOVERLAPPED pOverlapped,
    __in_opt LPWSAOVERLAPPED_COMPLETION_ROUTINE pCompRtn, LPWSATHREADID pThreadId);


int PMShutdown(UINT hPmSock, DWORD How);


int PMGetsockname (UINT hPmSock, LPSOCKADDR pAddr, DWORD cbAddr, 
        LPDWORD pcbAddr);


int PMGetpeername (UINT hPmSock, LPSOCKADDR pAddr, DWORD cbAddr, 
        LPDWORD pcbAddr);


int PMGetSockOpt(UINT hPmSock, DWORD Level, DWORD OptionName, 
        LPVOID pBuf, DWORD cbBuf, LPDWORD pcBuf);


int PMSetSockOpt (UINT hPmSock, DWORD Level, DWORD OptionName, 
        LPVOID pBuf, DWORD cbBuf);


int PMWakeup (UINT hPmSock, DWORD Event, DWORD Status);


int PMGetOverlappedResult (UINT hPmSock, WSAOVERLAPPED *pOv, 
        DWORD *pcTransfer, DWORD fWait, DWORD *pFlags, DWORD *pErr);


int PMEventSelect (UINT hPmSock, WSAEVENT hEvent, long NetworkEvents);


int PMEnumNetworkEvents (UINT hPmSock, WSAEVENT hEvent, 
        LPWSANETWORKEVENTS pNetworkEvents, DWORD cbNetworkEvents);


DWORD PMCloseSocket(uint hAfdSock);

#ifdef __cplusplus
}
#endif


#endif

#endif

#endif  // _AFDFUNC_H_

// @CESYSGEN ENDIF
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\poppack.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/*++


Module Name:

    poppack.h

Abstract:

    This file turns packing of structures off.  (That is, it enables
    automatic alignment of structure fields.)  An include file is needed
    because various compilers do this in different ways.

    poppack.h is the complement to pshpack?.h.  An inclusion of poppack.h
    MUST ALWAYS be preceded by an inclusion of one of pshpack?.h, in one-to-one
    correspondence.

    For Microsoft compatible compilers, this file uses the pop option
    to the pack pragma so that it can restore the previous saved by the
    pshpack?.h include file.

--*/

#if ! (defined(lint) || defined(_lint) || defined(RC_INVOKED))
#if ( _MSC_VER >= 800 )
#pragma warning(disable:4103)
#if !(defined( MIDL_PASS )) || defined( __midl )
#pragma pack(pop)
#else
#pragma pack()
#endif
#else
#pragma pack()
#endif
#endif // ! (defined(lint) || defined(_lint) || defined(RC_INVOKED))
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\propsys.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//

#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 5.03.0286 */
/* at Sat Jan 27 18:08:29 2007
 */
/* Compiler settings for ..\propsys.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32 (32b run), ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __propsys_h__
#define __propsys_h__

/* Forward Declarations */ 

#ifndef __IInitializeWithFile_FWD_DEFINED__
#define __IInitializeWithFile_FWD_DEFINED__
typedef interface IInitializeWithFile IInitializeWithFile;
#endif 	/* __IInitializeWithFile_FWD_DEFINED__ */


#ifndef __IInitializeWithStream_FWD_DEFINED__
#define __IInitializeWithStream_FWD_DEFINED__
typedef interface IInitializeWithStream IInitializeWithStream;
#endif 	/* __IInitializeWithStream_FWD_DEFINED__ */


#ifndef __IPropertyStore_FWD_DEFINED__
#define __IPropertyStore_FWD_DEFINED__
typedef interface IPropertyStore IPropertyStore;
#endif 	/* __IPropertyStore_FWD_DEFINED__ */


#ifndef __INamedPropertyStore_FWD_DEFINED__
#define __INamedPropertyStore_FWD_DEFINED__
typedef interface INamedPropertyStore INamedPropertyStore;
#endif 	/* __INamedPropertyStore_FWD_DEFINED__ */


#ifndef __IObjectWithPropertyKey_FWD_DEFINED__
#define __IObjectWithPropertyKey_FWD_DEFINED__
typedef interface IObjectWithPropertyKey IObjectWithPropertyKey;
#endif 	/* __IObjectWithPropertyKey_FWD_DEFINED__ */


#ifndef __IPropertyChange_FWD_DEFINED__
#define __IPropertyChange_FWD_DEFINED__
typedef interface IPropertyChange IPropertyChange;
#endif 	/* __IPropertyChange_FWD_DEFINED__ */


#ifndef __IPropertyChangeArray_FWD_DEFINED__
#define __IPropertyChangeArray_FWD_DEFINED__
typedef interface IPropertyChangeArray IPropertyChangeArray;
#endif 	/* __IPropertyChangeArray_FWD_DEFINED__ */


#ifndef __IPropertyStoreCapabilities_FWD_DEFINED__
#define __IPropertyStoreCapabilities_FWD_DEFINED__
typedef interface IPropertyStoreCapabilities IPropertyStoreCapabilities;
#endif 	/* __IPropertyStoreCapabilities_FWD_DEFINED__ */


#ifndef __IPropertyStoreCache_FWD_DEFINED__
#define __IPropertyStoreCache_FWD_DEFINED__
typedef interface IPropertyStoreCache IPropertyStoreCache;
#endif 	/* __IPropertyStoreCache_FWD_DEFINED__ */


#ifndef __IPropertyEnumType_FWD_DEFINED__
#define __IPropertyEnumType_FWD_DEFINED__
typedef interface IPropertyEnumType IPropertyEnumType;
#endif 	/* __IPropertyEnumType_FWD_DEFINED__ */


#ifndef __IPropertyEnumTypeList_FWD_DEFINED__
#define __IPropertyEnumTypeList_FWD_DEFINED__
typedef interface IPropertyEnumTypeList IPropertyEnumTypeList;
#endif 	/* __IPropertyEnumTypeList_FWD_DEFINED__ */


#ifndef __IPropertyDescription_FWD_DEFINED__
#define __IPropertyDescription_FWD_DEFINED__
typedef interface IPropertyDescription IPropertyDescription;
#endif 	/* __IPropertyDescription_FWD_DEFINED__ */


#ifndef __IPropertyDescriptionAliasInfo_FWD_DEFINED__
#define __IPropertyDescriptionAliasInfo_FWD_DEFINED__
typedef interface IPropertyDescriptionAliasInfo IPropertyDescriptionAliasInfo;
#endif 	/* __IPropertyDescriptionAliasInfo_FWD_DEFINED__ */


#ifndef __IPropertyDescriptionSearchInfo_FWD_DEFINED__
#define __IPropertyDescriptionSearchInfo_FWD_DEFINED__
typedef interface IPropertyDescriptionSearchInfo IPropertyDescriptionSearchInfo;
#endif 	/* __IPropertyDescriptionSearchInfo_FWD_DEFINED__ */


#ifndef __IPropertySystem_FWD_DEFINED__
#define __IPropertySystem_FWD_DEFINED__
typedef interface IPropertySystem IPropertySystem;
#endif 	/* __IPropertySystem_FWD_DEFINED__ */


#ifndef __IPropertyDescriptionList_FWD_DEFINED__
#define __IPropertyDescriptionList_FWD_DEFINED__
typedef interface IPropertyDescriptionList IPropertyDescriptionList;
#endif 	/* __IPropertyDescriptionList_FWD_DEFINED__ */


#ifndef __IPropertyStoreFactory_FWD_DEFINED__
#define __IPropertyStoreFactory_FWD_DEFINED__
typedef interface IPropertyStoreFactory IPropertyStoreFactory;
#endif 	/* __IPropertyStoreFactory_FWD_DEFINED__ */


#ifndef __IDelayedPropertyStoreFactory_FWD_DEFINED__
#define __IDelayedPropertyStoreFactory_FWD_DEFINED__
typedef interface IDelayedPropertyStoreFactory IDelayedPropertyStoreFactory;
#endif 	/* __IDelayedPropertyStoreFactory_FWD_DEFINED__ */


#ifndef __IPersistSerializedPropStorage_FWD_DEFINED__
#define __IPersistSerializedPropStorage_FWD_DEFINED__
typedef interface IPersistSerializedPropStorage IPersistSerializedPropStorage;
#endif 	/* __IPersistSerializedPropStorage_FWD_DEFINED__ */


#ifndef __IPropertySystemChangeNotify_FWD_DEFINED__
#define __IPropertySystemChangeNotify_FWD_DEFINED__
typedef interface IPropertySystemChangeNotify IPropertySystemChangeNotify;
#endif 	/* __IPropertySystemChangeNotify_FWD_DEFINED__ */


#ifndef __ICreateObject_FWD_DEFINED__
#define __ICreateObject_FWD_DEFINED__
typedef interface ICreateObject ICreateObject;
#endif 	/* __ICreateObject_FWD_DEFINED__ */


#ifndef __InMemoryPropertyStore_FWD_DEFINED__
#define __InMemoryPropertyStore_FWD_DEFINED__

#ifdef __cplusplus
typedef class InMemoryPropertyStore InMemoryPropertyStore;
#else
typedef struct InMemoryPropertyStore InMemoryPropertyStore;
#endif /* __cplusplus */

#endif 	/* __InMemoryPropertyStore_FWD_DEFINED__ */


#ifndef __PropertySystem_FWD_DEFINED__
#define __PropertySystem_FWD_DEFINED__

#ifdef __cplusplus
typedef class PropertySystem PropertySystem;
#else
typedef struct PropertySystem PropertySystem;
#endif /* __cplusplus */

#endif 	/* __PropertySystem_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"
#include "oleidl.h"
#include "ocidl.h"
#include "shtypes.h"
#include "structuredquery.h"

#ifdef __cplusplus
extern "C"{
#endif 

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/* interface __MIDL_itf_propsys_0000 */
/* [local] */ 

#ifndef PSSTDAPI
#if defined(_PROPSYS_)
#define PSSTDAPI          STDAPI
#define PSSTDAPI_(type)   STDAPI_(type)
#else
#define PSSTDAPI          EXTERN_C DECLSPEC_IMPORT HRESULT STDAPICALLTYPE
#define PSSTDAPI_(type)   EXTERN_C DECLSPEC_IMPORT type STDAPICALLTYPE
#endif
#endif // PSSTDAPI
#ifdef __midl_proxy
#define __MIDL_CONST
#else
#define __MIDL_CONST const
#endif // #ifdef __midl_proxy
#if 0
typedef PROPERTYKEY __RPC_FAR *REFPROPERTYKEY;

#endif // 0
#include <propkeydef.h>


extern RPC_IF_HANDLE __MIDL_itf_propsys_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propsys_0000_v0_0_s_ifspec;

#ifndef __IInitializeWithFile_INTERFACE_DEFINED__
#define __IInitializeWithFile_INTERFACE_DEFINED__

/* interface IInitializeWithFile */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_IInitializeWithFile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b7d14566-0509-4cce-a71f-0a554233bd9b")
    IInitializeWithFile : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [string][in] */ LPCWSTR pszFilePath,
            /* [in] */ DWORD grfMode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInitializeWithFileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IInitializeWithFile __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IInitializeWithFile __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IInitializeWithFile __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Initialize )( 
            IInitializeWithFile __RPC_FAR * This,
            /* [string][in] */ LPCWSTR pszFilePath,
            /* [in] */ DWORD grfMode);
        
        END_INTERFACE
    } IInitializeWithFileVtbl;

    interface IInitializeWithFile
    {
        CONST_VTBL struct IInitializeWithFileVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInitializeWithFile_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IInitializeWithFile_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IInitializeWithFile_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IInitializeWithFile_Initialize(This,pszFilePath,grfMode)	\
    (This)->lpVtbl -> Initialize(This,pszFilePath,grfMode)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IInitializeWithFile_Initialize_Proxy( 
    IInitializeWithFile __RPC_FAR * This,
    /* [string][in] */ LPCWSTR pszFilePath,
    /* [in] */ DWORD grfMode);


void __RPC_STUB IInitializeWithFile_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IInitializeWithFile_INTERFACE_DEFINED__ */


#ifndef __IInitializeWithStream_INTERFACE_DEFINED__
#define __IInitializeWithStream_INTERFACE_DEFINED__

/* interface IInitializeWithStream */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_IInitializeWithStream;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b824b49d-22ac-4161-ac8a-9916e8fa3f7f")
    IInitializeWithStream : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ IStream __RPC_FAR *pstream,
            /* [in] */ DWORD grfMode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInitializeWithStreamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IInitializeWithStream __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IInitializeWithStream __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IInitializeWithStream __RPC_FAR * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Initialize )( 
            IInitializeWithStream __RPC_FAR * This,
            /* [in] */ IStream __RPC_FAR *pstream,
            /* [in] */ DWORD grfMode);
        
        END_INTERFACE
    } IInitializeWithStreamVtbl;

    interface IInitializeWithStream
    {
        CONST_VTBL struct IInitializeWithStreamVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInitializeWithStream_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IInitializeWithStream_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IInitializeWithStream_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IInitializeWithStream_Initialize(This,pstream,grfMode)	\
    (This)->lpVtbl -> Initialize(This,pstream,grfMode)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IInitializeWithStream_RemoteInitialize_Proxy( 
    IInitializeWithStream __RPC_FAR * This,
    /* [in] */ IStream __RPC_FAR *pstream,
    /* [in] */ DWORD grfMode);


void __RPC_STUB IInitializeWithStream_RemoteInitialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IInitializeWithStream_INTERFACE_DEFINED__ */


#ifndef __IPropertyStore_INTERFACE_DEFINED__
#define __IPropertyStore_INTERFACE_DEFINED__

/* interface IPropertyStore */
/* [unique][object][helpstring][uuid] */ 


EXTERN_C const IID IID_IPropertyStore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("886d8eeb-8cf2-4446-8d02-cdba1dbdcf99")
    IPropertyStore : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ DWORD __RPC_FAR *cProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ DWORD iProp,
            /* [out] */ PROPERTYKEY __RPC_FAR *pkey) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValue( 
            /* [in] */ REFPROPERTYKEY key,
            /* [out] */ PROPVARIANT __RPC_FAR *pv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValue( 
            /* [in] */ REFPROPERTYKEY key,
            /* [in] */ REFPROPVARIANT propvar) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Commit( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyStoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyStore __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyStore __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyStore __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCount )( 
            IPropertyStore __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *cProps);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAt )( 
            IPropertyStore __RPC_FAR * This,
            /* [in] */ DWORD iProp,
            /* [out] */ PROPERTYKEY __RPC_FAR *pkey);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetValue )( 
            IPropertyStore __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key,
            /* [out] */ PROPVARIANT __RPC_FAR *pv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetValue )( 
            IPropertyStore __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key,
            /* [in] */ REFPROPVARIANT propvar);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Commit )( 
            IPropertyStore __RPC_FAR * This);
        
        END_INTERFACE
    } IPropertyStoreVtbl;

    interface IPropertyStore
    {
        CONST_VTBL struct IPropertyStoreVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyStore_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyStore_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyStore_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyStore_GetCount(This,cProps)	\
    (This)->lpVtbl -> GetCount(This,cProps)

#define IPropertyStore_GetAt(This,iProp,pkey)	\
    (This)->lpVtbl -> GetAt(This,iProp,pkey)

#define IPropertyStore_GetValue(This,key,pv)	\
    (This)->lpVtbl -> GetValue(This,key,pv)

#define IPropertyStore_SetValue(This,key,propvar)	\
    (This)->lpVtbl -> SetValue(This,key,propvar)

#define IPropertyStore_Commit(This)	\
    (This)->lpVtbl -> Commit(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyStore_GetCount_Proxy( 
    IPropertyStore __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *cProps);


void __RPC_STUB IPropertyStore_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyStore_GetAt_Proxy( 
    IPropertyStore __RPC_FAR * This,
    /* [in] */ DWORD iProp,
    /* [out] */ PROPERTYKEY __RPC_FAR *pkey);


void __RPC_STUB IPropertyStore_GetAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyStore_GetValue_Proxy( 
    IPropertyStore __RPC_FAR * This,
    /* [in] */ REFPROPERTYKEY key,
    /* [out] */ PROPVARIANT __RPC_FAR *pv);


void __RPC_STUB IPropertyStore_GetValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyStore_SetValue_Proxy( 
    IPropertyStore __RPC_FAR * This,
    /* [in] */ REFPROPERTYKEY key,
    /* [in] */ REFPROPVARIANT propvar);


void __RPC_STUB IPropertyStore_SetValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyStore_Commit_Proxy( 
    IPropertyStore __RPC_FAR * This);


void __RPC_STUB IPropertyStore_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyStore_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_propsys_0173 */
/* [local] */ 

typedef /* [unique] */ IPropertyStore __RPC_FAR *LPPROPERTYSTORE;



extern RPC_IF_HANDLE __MIDL_itf_propsys_0173_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propsys_0173_v0_0_s_ifspec;

#ifndef __INamedPropertyStore_INTERFACE_DEFINED__
#define __INamedPropertyStore_INTERFACE_DEFINED__

/* interface INamedPropertyStore */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_INamedPropertyStore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("71604b0f-97b0-4764-8577-2f13e98a1422")
    INamedPropertyStore : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetNamedValue( 
            /* [string][in] */ LPCWSTR pszName,
            /* [out] */ PROPVARIANT __RPC_FAR *ppropvar) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetNamedValue( 
            /* [string][in] */ LPCWSTR pszName,
            /* [in] */ REFPROPVARIANT propvar) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNameCount( 
            /* [out] */ DWORD __RPC_FAR *pdwCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNameAt( 
            /* [in] */ DWORD iProp,
            /* [out] */ BSTR __RPC_FAR *pbstrName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INamedPropertyStoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            INamedPropertyStore __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            INamedPropertyStore __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            INamedPropertyStore __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetNamedValue )( 
            INamedPropertyStore __RPC_FAR * This,
            /* [string][in] */ LPCWSTR pszName,
            /* [out] */ PROPVARIANT __RPC_FAR *ppropvar);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetNamedValue )( 
            INamedPropertyStore __RPC_FAR * This,
            /* [string][in] */ LPCWSTR pszName,
            /* [in] */ REFPROPVARIANT propvar);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetNameCount )( 
            INamedPropertyStore __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *pdwCount);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetNameAt )( 
            INamedPropertyStore __RPC_FAR * This,
            /* [in] */ DWORD iProp,
            /* [out] */ BSTR __RPC_FAR *pbstrName);
        
        END_INTERFACE
    } INamedPropertyStoreVtbl;

    interface INamedPropertyStore
    {
        CONST_VTBL struct INamedPropertyStoreVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INamedPropertyStore_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define INamedPropertyStore_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define INamedPropertyStore_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define INamedPropertyStore_GetNamedValue(This,pszName,ppropvar)	\
    (This)->lpVtbl -> GetNamedValue(This,pszName,ppropvar)

#define INamedPropertyStore_SetNamedValue(This,pszName,propvar)	\
    (This)->lpVtbl -> SetNamedValue(This,pszName,propvar)

#define INamedPropertyStore_GetNameCount(This,pdwCount)	\
    (This)->lpVtbl -> GetNameCount(This,pdwCount)

#define INamedPropertyStore_GetNameAt(This,iProp,pbstrName)	\
    (This)->lpVtbl -> GetNameAt(This,iProp,pbstrName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE INamedPropertyStore_GetNamedValue_Proxy( 
    INamedPropertyStore __RPC_FAR * This,
    /* [string][in] */ LPCWSTR pszName,
    /* [out] */ PROPVARIANT __RPC_FAR *ppropvar);


void __RPC_STUB INamedPropertyStore_GetNamedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INamedPropertyStore_SetNamedValue_Proxy( 
    INamedPropertyStore __RPC_FAR * This,
    /* [string][in] */ LPCWSTR pszName,
    /* [in] */ REFPROPVARIANT propvar);


void __RPC_STUB INamedPropertyStore_SetNamedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INamedPropertyStore_GetNameCount_Proxy( 
    INamedPropertyStore __RPC_FAR * This,
    /* [out] */ DWORD __RPC_FAR *pdwCount);


void __RPC_STUB INamedPropertyStore_GetNameCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INamedPropertyStore_GetNameAt_Proxy( 
    INamedPropertyStore __RPC_FAR * This,
    /* [in] */ DWORD iProp,
    /* [out] */ BSTR __RPC_FAR *pbstrName);


void __RPC_STUB INamedPropertyStore_GetNameAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __INamedPropertyStore_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_propsys_0174 */
/* [local] */ 

/* [v1_enum] */ 
enum tagGETPROPERTYSTOREFLAGS
    {	GPS_DEFAULT	= 0,
	GPS_HANDLERPROPERTIESONLY	= 0x1,
	GPS_READWRITE	= 0x2,
	GPS_TEMPORARY	= 0x4,
	GPS_FASTPROPERTIESONLY	= 0x8,
	GPS_OPENSLOWITEM	= 0x10,
	GPS_DELAYCREATION	= 0x20,
	GPS_BESTEFFORT	= 0x40,
	GPS_MASK_VALID	= 0x7f
    };
typedef int GETPROPERTYSTOREFLAGS;



extern RPC_IF_HANDLE __MIDL_itf_propsys_0174_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propsys_0174_v0_0_s_ifspec;

#ifndef __IObjectWithPropertyKey_INTERFACE_DEFINED__
#define __IObjectWithPropertyKey_INTERFACE_DEFINED__

/* interface IObjectWithPropertyKey */
/* [uuid][object] */ 


EXTERN_C const IID IID_IObjectWithPropertyKey;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fc0ca0a7-c316-4fd2-9031-3e628e6d4f23")
    IObjectWithPropertyKey : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetPropertyKey( 
            /* [in] */ REFPROPERTYKEY key) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyKey( 
            /* [out] */ PROPERTYKEY __RPC_FAR *pkey) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IObjectWithPropertyKeyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IObjectWithPropertyKey __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IObjectWithPropertyKey __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IObjectWithPropertyKey __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetPropertyKey )( 
            IObjectWithPropertyKey __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyKey )( 
            IObjectWithPropertyKey __RPC_FAR * This,
            /* [out] */ PROPERTYKEY __RPC_FAR *pkey);
        
        END_INTERFACE
    } IObjectWithPropertyKeyVtbl;

    interface IObjectWithPropertyKey
    {
        CONST_VTBL struct IObjectWithPropertyKeyVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IObjectWithPropertyKey_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IObjectWithPropertyKey_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IObjectWithPropertyKey_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IObjectWithPropertyKey_SetPropertyKey(This,key)	\
    (This)->lpVtbl -> SetPropertyKey(This,key)

#define IObjectWithPropertyKey_GetPropertyKey(This,pkey)	\
    (This)->lpVtbl -> GetPropertyKey(This,pkey)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IObjectWithPropertyKey_SetPropertyKey_Proxy( 
    IObjectWithPropertyKey __RPC_FAR * This,
    /* [in] */ REFPROPERTYKEY key);


void __RPC_STUB IObjectWithPropertyKey_SetPropertyKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IObjectWithPropertyKey_GetPropertyKey_Proxy( 
    IObjectWithPropertyKey __RPC_FAR * This,
    /* [out] */ PROPERTYKEY __RPC_FAR *pkey);


void __RPC_STUB IObjectWithPropertyKey_GetPropertyKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IObjectWithPropertyKey_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_propsys_0175 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum tagPKA_FLAGS
    {	PKA_SET	= 0,
	PKA_APPEND	= PKA_SET + 1,
	PKA_DELETE	= PKA_APPEND + 1
    }	PKA_FLAGS;



extern RPC_IF_HANDLE __MIDL_itf_propsys_0175_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propsys_0175_v0_0_s_ifspec;

#ifndef __IPropertyChange_INTERFACE_DEFINED__
#define __IPropertyChange_INTERFACE_DEFINED__

/* interface IPropertyChange */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_IPropertyChange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f917bc8a-1bba-4478-a245-1bde03eb9431")
    IPropertyChange : public IObjectWithPropertyKey
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ApplyToPropVariant( 
            /* [in] */ REFPROPVARIANT propvarIn,
            /* [out] */ PROPVARIANT __RPC_FAR *ppropvarOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyChangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyChange __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyChange __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyChange __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetPropertyKey )( 
            IPropertyChange __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyKey )( 
            IPropertyChange __RPC_FAR * This,
            /* [out] */ PROPERTYKEY __RPC_FAR *pkey);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *ApplyToPropVariant )( 
            IPropertyChange __RPC_FAR * This,
            /* [in] */ REFPROPVARIANT propvarIn,
            /* [out] */ PROPVARIANT __RPC_FAR *ppropvarOut);
        
        END_INTERFACE
    } IPropertyChangeVtbl;

    interface IPropertyChange
    {
        CONST_VTBL struct IPropertyChangeVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyChange_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyChange_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyChange_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyChange_SetPropertyKey(This,key)	\
    (This)->lpVtbl -> SetPropertyKey(This,key)

#define IPropertyChange_GetPropertyKey(This,pkey)	\
    (This)->lpVtbl -> GetPropertyKey(This,pkey)


#define IPropertyChange_ApplyToPropVariant(This,propvarIn,ppropvarOut)	\
    (This)->lpVtbl -> ApplyToPropVariant(This,propvarIn,ppropvarOut)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyChange_ApplyToPropVariant_Proxy( 
    IPropertyChange __RPC_FAR * This,
    /* [in] */ REFPROPVARIANT propvarIn,
    /* [out] */ PROPVARIANT __RPC_FAR *ppropvarOut);


void __RPC_STUB IPropertyChange_ApplyToPropVariant_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyChange_INTERFACE_DEFINED__ */


#ifndef __IPropertyChangeArray_INTERFACE_DEFINED__
#define __IPropertyChangeArray_INTERFACE_DEFINED__

/* interface IPropertyChangeArray */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_IPropertyChangeArray;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("380f5cad-1b5e-42f2-805d-637fd392d31e")
    IPropertyChangeArray : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ UINT __RPC_FAR *pcOperations) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ UINT iIndex,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertAt( 
            /* [in] */ UINT iIndex,
            /* [in] */ IPropertyChange __RPC_FAR *ppropChange) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Append( 
            /* [in] */ IPropertyChange __RPC_FAR *ppropChange) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AppendOrReplace( 
            /* [in] */ IPropertyChange __RPC_FAR *ppropChange) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAt( 
            /* [in] */ UINT iIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsKeyInArray( 
            /* [in] */ REFPROPERTYKEY key) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyChangeArrayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyChangeArray __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyChangeArray __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyChangeArray __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCount )( 
            IPropertyChangeArray __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pcOperations);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAt )( 
            IPropertyChangeArray __RPC_FAR * This,
            /* [in] */ UINT iIndex,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *InsertAt )( 
            IPropertyChangeArray __RPC_FAR * This,
            /* [in] */ UINT iIndex,
            /* [in] */ IPropertyChange __RPC_FAR *ppropChange);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Append )( 
            IPropertyChangeArray __RPC_FAR * This,
            /* [in] */ IPropertyChange __RPC_FAR *ppropChange);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *AppendOrReplace )( 
            IPropertyChangeArray __RPC_FAR * This,
            /* [in] */ IPropertyChange __RPC_FAR *ppropChange);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RemoveAt )( 
            IPropertyChangeArray __RPC_FAR * This,
            /* [in] */ UINT iIndex);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsKeyInArray )( 
            IPropertyChangeArray __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key);
        
        END_INTERFACE
    } IPropertyChangeArrayVtbl;

    interface IPropertyChangeArray
    {
        CONST_VTBL struct IPropertyChangeArrayVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyChangeArray_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyChangeArray_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyChangeArray_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyChangeArray_GetCount(This,pcOperations)	\
    (This)->lpVtbl -> GetCount(This,pcOperations)

#define IPropertyChangeArray_GetAt(This,iIndex,riid,ppv)	\
    (This)->lpVtbl -> GetAt(This,iIndex,riid,ppv)

#define IPropertyChangeArray_InsertAt(This,iIndex,ppropChange)	\
    (This)->lpVtbl -> InsertAt(This,iIndex,ppropChange)

#define IPropertyChangeArray_Append(This,ppropChange)	\
    (This)->lpVtbl -> Append(This,ppropChange)

#define IPropertyChangeArray_AppendOrReplace(This,ppropChange)	\
    (This)->lpVtbl -> AppendOrReplace(This,ppropChange)

#define IPropertyChangeArray_RemoveAt(This,iIndex)	\
    (This)->lpVtbl -> RemoveAt(This,iIndex)

#define IPropertyChangeArray_IsKeyInArray(This,key)	\
    (This)->lpVtbl -> IsKeyInArray(This,key)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyChangeArray_GetCount_Proxy( 
    IPropertyChangeArray __RPC_FAR * This,
    /* [out] */ UINT __RPC_FAR *pcOperations);


void __RPC_STUB IPropertyChangeArray_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyChangeArray_GetAt_Proxy( 
    IPropertyChangeArray __RPC_FAR * This,
    /* [in] */ UINT iIndex,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertyChangeArray_GetAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyChangeArray_InsertAt_Proxy( 
    IPropertyChangeArray __RPC_FAR * This,
    /* [in] */ UINT iIndex,
    /* [in] */ IPropertyChange __RPC_FAR *ppropChange);


void __RPC_STUB IPropertyChangeArray_InsertAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyChangeArray_Append_Proxy( 
    IPropertyChangeArray __RPC_FAR * This,
    /* [in] */ IPropertyChange __RPC_FAR *ppropChange);


void __RPC_STUB IPropertyChangeArray_Append_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyChangeArray_AppendOrReplace_Proxy( 
    IPropertyChangeArray __RPC_FAR * This,
    /* [in] */ IPropertyChange __RPC_FAR *ppropChange);


void __RPC_STUB IPropertyChangeArray_AppendOrReplace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyChangeArray_RemoveAt_Proxy( 
    IPropertyChangeArray __RPC_FAR * This,
    /* [in] */ UINT iIndex);


void __RPC_STUB IPropertyChangeArray_RemoveAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyChangeArray_IsKeyInArray_Proxy( 
    IPropertyChangeArray __RPC_FAR * This,
    /* [in] */ REFPROPERTYKEY key);


void __RPC_STUB IPropertyChangeArray_IsKeyInArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyChangeArray_INTERFACE_DEFINED__ */


#ifndef __IPropertyStoreCapabilities_INTERFACE_DEFINED__
#define __IPropertyStoreCapabilities_INTERFACE_DEFINED__

/* interface IPropertyStoreCapabilities */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_IPropertyStoreCapabilities;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c8e2d566-186e-4d49-bf41-6909ead56acc")
    IPropertyStoreCapabilities : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsPropertyWritable( 
            /* [in] */ REFPROPERTYKEY key) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyStoreCapabilitiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyStoreCapabilities __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyStoreCapabilities __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyStoreCapabilities __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsPropertyWritable )( 
            IPropertyStoreCapabilities __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key);
        
        END_INTERFACE
    } IPropertyStoreCapabilitiesVtbl;

    interface IPropertyStoreCapabilities
    {
        CONST_VTBL struct IPropertyStoreCapabilitiesVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyStoreCapabilities_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyStoreCapabilities_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyStoreCapabilities_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyStoreCapabilities_IsPropertyWritable(This,key)	\
    (This)->lpVtbl -> IsPropertyWritable(This,key)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyStoreCapabilities_IsPropertyWritable_Proxy( 
    IPropertyStoreCapabilities __RPC_FAR * This,
    /* [in] */ REFPROPERTYKEY key);


void __RPC_STUB IPropertyStoreCapabilities_IsPropertyWritable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyStoreCapabilities_INTERFACE_DEFINED__ */


#ifndef __IPropertyStoreCache_INTERFACE_DEFINED__
#define __IPropertyStoreCache_INTERFACE_DEFINED__

/* interface IPropertyStoreCache */
/* [unique][object][uuid] */ 

typedef /* [v1_enum] */ 
enum _PSC_STATE
    {	PSC_NORMAL	= 0,
	PSC_NOTINSOURCE	= 1,
	PSC_DIRTY	= 2,
	PSC_READONLY	= 3
    }	PSC_STATE;


EXTERN_C const IID IID_IPropertyStoreCache;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3017056d-9a91-4e90-937d-746c72abbf4f")
    IPropertyStoreCache : public IPropertyStore
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetState( 
            /* [in] */ REFPROPERTYKEY key,
            /* [out] */ PSC_STATE __RPC_FAR *pstate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueAndState( 
            /* [in] */ REFPROPERTYKEY key,
            /* [out] */ PROPVARIANT __RPC_FAR *ppropvar,
            /* [out] */ PSC_STATE __RPC_FAR *pstate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetState( 
            /* [in] */ REFPROPERTYKEY key,
            /* [in] */ PSC_STATE state) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueAndState( 
            /* [in] */ REFPROPERTYKEY key,
            /* [unique][in] */ const PROPVARIANT __RPC_FAR *ppropvar,
            /* [in] */ PSC_STATE state) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyStoreCacheVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyStoreCache __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyStoreCache __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyStoreCache __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCount )( 
            IPropertyStoreCache __RPC_FAR * This,
            /* [out] */ DWORD __RPC_FAR *cProps);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAt )( 
            IPropertyStoreCache __RPC_FAR * This,
            /* [in] */ DWORD iProp,
            /* [out] */ PROPERTYKEY __RPC_FAR *pkey);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetValue )( 
            IPropertyStoreCache __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key,
            /* [out] */ PROPVARIANT __RPC_FAR *pv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetValue )( 
            IPropertyStoreCache __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key,
            /* [in] */ REFPROPVARIANT propvar);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Commit )( 
            IPropertyStoreCache __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetState )( 
            IPropertyStoreCache __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key,
            /* [out] */ PSC_STATE __RPC_FAR *pstate);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetValueAndState )( 
            IPropertyStoreCache __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key,
            /* [out] */ PROPVARIANT __RPC_FAR *ppropvar,
            /* [out] */ PSC_STATE __RPC_FAR *pstate);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetState )( 
            IPropertyStoreCache __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key,
            /* [in] */ PSC_STATE state);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetValueAndState )( 
            IPropertyStoreCache __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key,
            /* [unique][in] */ const PROPVARIANT __RPC_FAR *ppropvar,
            /* [in] */ PSC_STATE state);
        
        END_INTERFACE
    } IPropertyStoreCacheVtbl;

    interface IPropertyStoreCache
    {
        CONST_VTBL struct IPropertyStoreCacheVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyStoreCache_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyStoreCache_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyStoreCache_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyStoreCache_GetCount(This,cProps)	\
    (This)->lpVtbl -> GetCount(This,cProps)

#define IPropertyStoreCache_GetAt(This,iProp,pkey)	\
    (This)->lpVtbl -> GetAt(This,iProp,pkey)

#define IPropertyStoreCache_GetValue(This,key,pv)	\
    (This)->lpVtbl -> GetValue(This,key,pv)

#define IPropertyStoreCache_SetValue(This,key,propvar)	\
    (This)->lpVtbl -> SetValue(This,key,propvar)

#define IPropertyStoreCache_Commit(This)	\
    (This)->lpVtbl -> Commit(This)


#define IPropertyStoreCache_GetState(This,key,pstate)	\
    (This)->lpVtbl -> GetState(This,key,pstate)

#define IPropertyStoreCache_GetValueAndState(This,key,ppropvar,pstate)	\
    (This)->lpVtbl -> GetValueAndState(This,key,ppropvar,pstate)

#define IPropertyStoreCache_SetState(This,key,state)	\
    (This)->lpVtbl -> SetState(This,key,state)

#define IPropertyStoreCache_SetValueAndState(This,key,ppropvar,state)	\
    (This)->lpVtbl -> SetValueAndState(This,key,ppropvar,state)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyStoreCache_GetState_Proxy( 
    IPropertyStoreCache __RPC_FAR * This,
    /* [in] */ REFPROPERTYKEY key,
    /* [out] */ PSC_STATE __RPC_FAR *pstate);


void __RPC_STUB IPropertyStoreCache_GetState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyStoreCache_GetValueAndState_Proxy( 
    IPropertyStoreCache __RPC_FAR * This,
    /* [in] */ REFPROPERTYKEY key,
    /* [out] */ PROPVARIANT __RPC_FAR *ppropvar,
    /* [out] */ PSC_STATE __RPC_FAR *pstate);


void __RPC_STUB IPropertyStoreCache_GetValueAndState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyStoreCache_SetState_Proxy( 
    IPropertyStoreCache __RPC_FAR * This,
    /* [in] */ REFPROPERTYKEY key,
    /* [in] */ PSC_STATE state);


void __RPC_STUB IPropertyStoreCache_SetState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyStoreCache_SetValueAndState_Proxy( 
    IPropertyStoreCache __RPC_FAR * This,
    /* [in] */ REFPROPERTYKEY key,
    /* [unique][in] */ const PROPVARIANT __RPC_FAR *ppropvar,
    /* [in] */ PSC_STATE state);


void __RPC_STUB IPropertyStoreCache_SetValueAndState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyStoreCache_INTERFACE_DEFINED__ */


#ifndef __IPropertyEnumType_INTERFACE_DEFINED__
#define __IPropertyEnumType_INTERFACE_DEFINED__

/* interface IPropertyEnumType */
/* [unique][object][uuid] */ 

/* [v1_enum] */ 
enum tagPROPENUMTYPE
    {	PET_DISCRETEVALUE	= 0,
	PET_RANGEDVALUE	= 1,
	PET_DEFAULTVALUE	= 2,
	PET_ENDRANGE	= 3
    };
typedef enum tagPROPENUMTYPE PROPENUMTYPE;


EXTERN_C const IID IID_IPropertyEnumType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("11e1fbf9-2d56-4a6b-8db3-7cd193a471f2")
    IPropertyEnumType : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetEnumType( 
            /* [out] */ PROPENUMTYPE __RPC_FAR *penumtype) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValue( 
            /* [out] */ PROPVARIANT __RPC_FAR *ppropvar) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRangeMinValue( 
            /* [out] */ PROPVARIANT __RPC_FAR *ppropvarMin) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRangeSetValue( 
            /* [out] */ PROPVARIANT __RPC_FAR *ppropvarSet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDisplayText( 
            /* [out] */ LPWSTR __RPC_FAR *ppszDisplay) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyEnumTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyEnumType __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyEnumType __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyEnumType __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetEnumType )( 
            IPropertyEnumType __RPC_FAR * This,
            /* [out] */ PROPENUMTYPE __RPC_FAR *penumtype);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetValue )( 
            IPropertyEnumType __RPC_FAR * This,
            /* [out] */ PROPVARIANT __RPC_FAR *ppropvar);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetRangeMinValue )( 
            IPropertyEnumType __RPC_FAR * This,
            /* [out] */ PROPVARIANT __RPC_FAR *ppropvarMin);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetRangeSetValue )( 
            IPropertyEnumType __RPC_FAR * This,
            /* [out] */ PROPVARIANT __RPC_FAR *ppropvarSet);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDisplayText )( 
            IPropertyEnumType __RPC_FAR * This,
            /* [out] */ LPWSTR __RPC_FAR *ppszDisplay);
        
        END_INTERFACE
    } IPropertyEnumTypeVtbl;

    interface IPropertyEnumType
    {
        CONST_VTBL struct IPropertyEnumTypeVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyEnumType_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyEnumType_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyEnumType_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyEnumType_GetEnumType(This,penumtype)	\
    (This)->lpVtbl -> GetEnumType(This,penumtype)

#define IPropertyEnumType_GetValue(This,ppropvar)	\
    (This)->lpVtbl -> GetValue(This,ppropvar)

#define IPropertyEnumType_GetRangeMinValue(This,ppropvarMin)	\
    (This)->lpVtbl -> GetRangeMinValue(This,ppropvarMin)

#define IPropertyEnumType_GetRangeSetValue(This,ppropvarSet)	\
    (This)->lpVtbl -> GetRangeSetValue(This,ppropvarSet)

#define IPropertyEnumType_GetDisplayText(This,ppszDisplay)	\
    (This)->lpVtbl -> GetDisplayText(This,ppszDisplay)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyEnumType_GetEnumType_Proxy( 
    IPropertyEnumType __RPC_FAR * This,
    /* [out] */ PROPENUMTYPE __RPC_FAR *penumtype);


void __RPC_STUB IPropertyEnumType_GetEnumType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyEnumType_GetValue_Proxy( 
    IPropertyEnumType __RPC_FAR * This,
    /* [out] */ PROPVARIANT __RPC_FAR *ppropvar);


void __RPC_STUB IPropertyEnumType_GetValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyEnumType_GetRangeMinValue_Proxy( 
    IPropertyEnumType __RPC_FAR * This,
    /* [out] */ PROPVARIANT __RPC_FAR *ppropvarMin);


void __RPC_STUB IPropertyEnumType_GetRangeMinValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyEnumType_GetRangeSetValue_Proxy( 
    IPropertyEnumType __RPC_FAR * This,
    /* [out] */ PROPVARIANT __RPC_FAR *ppropvarSet);


void __RPC_STUB IPropertyEnumType_GetRangeSetValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyEnumType_GetDisplayText_Proxy( 
    IPropertyEnumType __RPC_FAR * This,
    /* [out] */ LPWSTR __RPC_FAR *ppszDisplay);


void __RPC_STUB IPropertyEnumType_GetDisplayText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyEnumType_INTERFACE_DEFINED__ */


#ifndef __IPropertyEnumTypeList_INTERFACE_DEFINED__
#define __IPropertyEnumTypeList_INTERFACE_DEFINED__

/* interface IPropertyEnumTypeList */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_IPropertyEnumTypeList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a99400f4-3d84-4557-94ba-1242fb2cc9a6")
    IPropertyEnumTypeList : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ UINT __RPC_FAR *pctypes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ UINT itype,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetConditionAt( 
            /* [in] */ UINT nIndex,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindMatchingIndex( 
            /* [in] */ REFPROPVARIANT propvarCmp,
            /* [out] */ UINT __RPC_FAR *pnIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyEnumTypeListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyEnumTypeList __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyEnumTypeList __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyEnumTypeList __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCount )( 
            IPropertyEnumTypeList __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctypes);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAt )( 
            IPropertyEnumTypeList __RPC_FAR * This,
            /* [in] */ UINT itype,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetConditionAt )( 
            IPropertyEnumTypeList __RPC_FAR * This,
            /* [in] */ UINT nIndex,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FindMatchingIndex )( 
            IPropertyEnumTypeList __RPC_FAR * This,
            /* [in] */ REFPROPVARIANT propvarCmp,
            /* [out] */ UINT __RPC_FAR *pnIndex);
        
        END_INTERFACE
    } IPropertyEnumTypeListVtbl;

    interface IPropertyEnumTypeList
    {
        CONST_VTBL struct IPropertyEnumTypeListVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyEnumTypeList_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyEnumTypeList_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyEnumTypeList_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyEnumTypeList_GetCount(This,pctypes)	\
    (This)->lpVtbl -> GetCount(This,pctypes)

#define IPropertyEnumTypeList_GetAt(This,itype,riid,ppv)	\
    (This)->lpVtbl -> GetAt(This,itype,riid,ppv)

#define IPropertyEnumTypeList_GetConditionAt(This,nIndex,riid,ppv)	\
    (This)->lpVtbl -> GetConditionAt(This,nIndex,riid,ppv)

#define IPropertyEnumTypeList_FindMatchingIndex(This,propvarCmp,pnIndex)	\
    (This)->lpVtbl -> FindMatchingIndex(This,propvarCmp,pnIndex)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyEnumTypeList_GetCount_Proxy( 
    IPropertyEnumTypeList __RPC_FAR * This,
    /* [out] */ UINT __RPC_FAR *pctypes);


void __RPC_STUB IPropertyEnumTypeList_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyEnumTypeList_GetAt_Proxy( 
    IPropertyEnumTypeList __RPC_FAR * This,
    /* [in] */ UINT itype,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertyEnumTypeList_GetAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyEnumTypeList_GetConditionAt_Proxy( 
    IPropertyEnumTypeList __RPC_FAR * This,
    /* [in] */ UINT nIndex,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertyEnumTypeList_GetConditionAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyEnumTypeList_FindMatchingIndex_Proxy( 
    IPropertyEnumTypeList __RPC_FAR * This,
    /* [in] */ REFPROPVARIANT propvarCmp,
    /* [out] */ UINT __RPC_FAR *pnIndex);


void __RPC_STUB IPropertyEnumTypeList_FindMatchingIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyEnumTypeList_INTERFACE_DEFINED__ */


#ifndef __IPropertyDescription_INTERFACE_DEFINED__
#define __IPropertyDescription_INTERFACE_DEFINED__

/* interface IPropertyDescription */
/* [unique][object][uuid] */ 

/* [v1_enum] */ 
enum tagPROPDESC_TYPE_FLAGS
    {	PDTF_DEFAULT	= 0,
	PDTF_MULTIPLEVALUES	= 0x1,
	PDTF_ISINNATE	= 0x2,
	PDTF_ISGROUP	= 0x4,
	PDTF_CANGROUPBY	= 0x8,
	PDTF_CANSTACKBY	= 0x10,
	PDTF_ISTREEPROPERTY	= 0x20,
	PDTF_INCLUDEINFULLTEXTQUERY	= 0x40,
	PDTF_ISVIEWABLE	= 0x80,
	PDTF_ISQUERYABLE	= 0x100,
	PDTF_ISSYSTEMPROPERTY	= 0x80000000,
	PDTF_MASK_ALL	= 0x800001ff
    };
typedef int PROPDESC_TYPE_FLAGS;

/* [v1_enum] */ 
enum tagPROPDESC_VIEW_FLAGS
    {	PDVF_DEFAULT	= 0,
	PDVF_CENTERALIGN	= 0x1,
	PDVF_RIGHTALIGN	= 0x2,
	PDVF_BEGINNEWGROUP	= 0x4,
	PDVF_FILLAREA	= 0x8,
	PDVF_SORTDESCENDING	= 0x10,
	PDVF_SHOWONLYIFPRESENT	= 0x20,
	PDVF_SHOWBYDEFAULT	= 0x40,
	PDVF_SHOWINPRIMARYLIST	= 0x80,
	PDVF_SHOWINSECONDARYLIST	= 0x100,
	PDVF_HIDELABEL	= 0x200,
	PDVF_HIDDEN	= 0x800,
	PDVF_CANWRAP	= 0x1000,
	PDVF_MASK_ALL	= 0x1bff
    };
typedef int PROPDESC_VIEW_FLAGS;

/* [v1_enum] */ 
enum tagPROPDESC_DISPLAYTYPE
    {	PDDT_STRING	= 0,
	PDDT_NUMBER	= 1,
	PDDT_BOOLEAN	= 2,
	PDDT_DATETIME	= 3,
	PDDT_ENUMERATED	= 4
    };
typedef enum tagPROPDESC_DISPLAYTYPE PROPDESC_DISPLAYTYPE;

/* [v1_enum] */ 
enum tagPROPDESC_GROUPING_RANGE
    {	PDGR_DISCRETE	= 0,
	PDGR_ALPHANUMERIC	= 1,
	PDGR_SIZE	= 2,
	PDGR_DYNAMIC	= 3,
	PDGR_DATE	= 4,
	PDGR_PERCENT	= 5,
	PDGR_ENUMERATED	= 6
    };
typedef enum tagPROPDESC_GROUPING_RANGE PROPDESC_GROUPING_RANGE;

/* [v1_enum] */ 
enum tagPROPDESC_FORMAT_FLAGS
    {	PDFF_DEFAULT	= 0,
	PDFF_PREFIXNAME	= 0x1,
	PDFF_FILENAME	= 0x2,
	PDFF_ALWAYSKB	= 0x4,
	PDFF_RESERVED_RIGHTTOLEFT	= 0x8,
	PDFF_SHORTTIME	= 0x10,
	PDFF_LONGTIME	= 0x20,
	PDFF_HIDETIME	= 0x40,
	PDFF_SHORTDATE	= 0x80,
	PDFF_LONGDATE	= 0x100,
	PDFF_HIDEDATE	= 0x200,
	PDFF_RELATIVEDATE	= 0x400,
	PDFF_USEEDITINVITATION	= 0x800,
	PDFF_READONLY	= 0x1000,
	PDFF_NOAUTOREADINGORDER	= 0x2000
    };
typedef int PROPDESC_FORMAT_FLAGS;

/* [v1_enum] */ 
enum tagPROPDESC_SORTDESCRIPTION
    {	PDSD_GENERAL	= 0,
	PDSD_A_Z	= 1,
	PDSD_LOWEST_HIGHEST	= 2,
	PDSD_SMALLEST_BIGGEST	= 3,
	PDSD_OLDEST_NEWEST	= 4
    };
typedef enum tagPROPDESC_SORTDESCRIPTION PROPDESC_SORTDESCRIPTION;

/* [v1_enum] */ 
enum tagPROPDESC_RELATIVEDESCRIPTION_TYPE
    {	PDRDT_GENERAL	= 0,
	PDRDT_DATE	= 1,
	PDRDT_SIZE	= 2,
	PDRDT_COUNT	= 3,
	PDRDT_REVISION	= 4,
	PDRDT_LENGTH	= 5,
	PDRDT_DURATION	= 6,
	PDRDT_SPEED	= 7,
	PDRDT_RATE	= 8,
	PDRDT_RATING	= 9,
	PDRDT_PRIORITY	= 10
    };
typedef enum tagPROPDESC_RELATIVEDESCRIPTION_TYPE PROPDESC_RELATIVEDESCRIPTION_TYPE;

/* [v1_enum] */ 
enum tagPROPDESC_AGGREGATION_TYPE
    {	PDAT_DEFAULT	= 0,
	PDAT_FIRST	= 1,
	PDAT_SUM	= 2,
	PDAT_AVERAGE	= 3,
	PDAT_DATERANGE	= 4,
	PDAT_UNION	= 5,
	PDAT_MAX	= 6,
	PDAT_MIN	= 7
    };
typedef enum tagPROPDESC_AGGREGATION_TYPE PROPDESC_AGGREGATION_TYPE;

/* [v1_enum] */ 
enum tagPROPDESC_CONDITION_TYPE
    {	PDCOT_NONE	= 0,
	PDCOT_STRING	= 1,
	PDCOT_SIZE	= 2,
	PDCOT_DATETIME	= 3,
	PDCOT_BOOLEAN	= 4,
	PDCOT_NUMBER	= 5
    };
typedef enum tagPROPDESC_CONDITION_TYPE PROPDESC_CONDITION_TYPE;


EXTERN_C const IID IID_IPropertyDescription;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6f79d558-3e96-4549-a1d1-7d75d2288814")
    IPropertyDescription : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPropertyKey( 
            /* [out] */ PROPERTYKEY __RPC_FAR *pkey) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCanonicalName( 
            /* [string][out] */ LPWSTR __RPC_FAR *ppszName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyType( 
            /* [out] */ VARTYPE __RPC_FAR *pvartype) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDisplayName( 
            /* [string][out] */ LPWSTR __RPC_FAR *ppszName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEditInvitation( 
            /* [string][out] */ LPWSTR __RPC_FAR *ppszInvite) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeFlags( 
            /* [in] */ PROPDESC_TYPE_FLAGS mask,
            /* [out] */ PROPDESC_TYPE_FLAGS __RPC_FAR *ppdtFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetViewFlags( 
            /* [out] */ PROPDESC_VIEW_FLAGS __RPC_FAR *ppdvFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDefaultColumnWidth( 
            /* [out] */ UINT __RPC_FAR *pcxChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDisplayType( 
            /* [out] */ PROPDESC_DISPLAYTYPE __RPC_FAR *pdisplaytype) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetColumnState( 
            /* [out] */ SHCOLSTATEF __RPC_FAR *pcsFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGroupingRange( 
            /* [out] */ PROPDESC_GROUPING_RANGE __RPC_FAR *pgr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRelativeDescriptionType( 
            /* [out] */ PROPDESC_RELATIVEDESCRIPTION_TYPE __RPC_FAR *prdt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRelativeDescription( 
            /* [in] */ REFPROPVARIANT propvar1,
            /* [in] */ REFPROPVARIANT propvar2,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDesc1,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDesc2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSortDescription( 
            /* [out] */ PROPDESC_SORTDESCRIPTION __RPC_FAR *psd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSortDescriptionLabel( 
            /* [in] */ BOOL fDescending,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDescription) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAggregationType( 
            /* [out] */ PROPDESC_AGGREGATION_TYPE __RPC_FAR *paggtype) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetConditionType( 
            /* [out] */ PROPDESC_CONDITION_TYPE __RPC_FAR *pcontype,
            /* [out] */ CONDITION_OPERATION __RPC_FAR *popDefault) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnumTypeList( 
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE CoerceToCanonicalValue( 
            /* [out][in] */ PROPVARIANT __RPC_FAR *ppropvar) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FormatForDisplay( 
            /* [in] */ REFPROPVARIANT propvar,
            /* [in] */ PROPDESC_FORMAT_FLAGS pdfFlags,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDisplay) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsValueCanonical( 
            /* [in] */ REFPROPVARIANT propvar) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyDescriptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyDescription __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyDescription __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyDescription __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyKey )( 
            IPropertyDescription __RPC_FAR * This,
            /* [out] */ PROPERTYKEY __RPC_FAR *pkey);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCanonicalName )( 
            IPropertyDescription __RPC_FAR * This,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyType )( 
            IPropertyDescription __RPC_FAR * This,
            /* [out] */ VARTYPE __RPC_FAR *pvartype);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDisplayName )( 
            IPropertyDescription __RPC_FAR * This,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetEditInvitation )( 
            IPropertyDescription __RPC_FAR * This,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszInvite);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeFlags )( 
            IPropertyDescription __RPC_FAR * This,
            /* [in] */ PROPDESC_TYPE_FLAGS mask,
            /* [out] */ PROPDESC_TYPE_FLAGS __RPC_FAR *ppdtFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetViewFlags )( 
            IPropertyDescription __RPC_FAR * This,
            /* [out] */ PROPDESC_VIEW_FLAGS __RPC_FAR *ppdvFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDefaultColumnWidth )( 
            IPropertyDescription __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pcxChars);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDisplayType )( 
            IPropertyDescription __RPC_FAR * This,
            /* [out] */ PROPDESC_DISPLAYTYPE __RPC_FAR *pdisplaytype);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetColumnState )( 
            IPropertyDescription __RPC_FAR * This,
            /* [out] */ SHCOLSTATEF __RPC_FAR *pcsFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetGroupingRange )( 
            IPropertyDescription __RPC_FAR * This,
            /* [out] */ PROPDESC_GROUPING_RANGE __RPC_FAR *pgr);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetRelativeDescriptionType )( 
            IPropertyDescription __RPC_FAR * This,
            /* [out] */ PROPDESC_RELATIVEDESCRIPTION_TYPE __RPC_FAR *prdt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetRelativeDescription )( 
            IPropertyDescription __RPC_FAR * This,
            /* [in] */ REFPROPVARIANT propvar1,
            /* [in] */ REFPROPVARIANT propvar2,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDesc1,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDesc2);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSortDescription )( 
            IPropertyDescription __RPC_FAR * This,
            /* [out] */ PROPDESC_SORTDESCRIPTION __RPC_FAR *psd);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSortDescriptionLabel )( 
            IPropertyDescription __RPC_FAR * This,
            /* [in] */ BOOL fDescending,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDescription);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAggregationType )( 
            IPropertyDescription __RPC_FAR * This,
            /* [out] */ PROPDESC_AGGREGATION_TYPE __RPC_FAR *paggtype);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetConditionType )( 
            IPropertyDescription __RPC_FAR * This,
            /* [out] */ PROPDESC_CONDITION_TYPE __RPC_FAR *pcontype,
            /* [out] */ CONDITION_OPERATION __RPC_FAR *popDefault);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetEnumTypeList )( 
            IPropertyDescription __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CoerceToCanonicalValue )( 
            IPropertyDescription __RPC_FAR * This,
            /* [out][in] */ PROPVARIANT __RPC_FAR *ppropvar);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FormatForDisplay )( 
            IPropertyDescription __RPC_FAR * This,
            /* [in] */ REFPROPVARIANT propvar,
            /* [in] */ PROPDESC_FORMAT_FLAGS pdfFlags,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDisplay);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsValueCanonical )( 
            IPropertyDescription __RPC_FAR * This,
            /* [in] */ REFPROPVARIANT propvar);
        
        END_INTERFACE
    } IPropertyDescriptionVtbl;

    interface IPropertyDescription
    {
        CONST_VTBL struct IPropertyDescriptionVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyDescription_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyDescription_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyDescription_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyDescription_GetPropertyKey(This,pkey)	\
    (This)->lpVtbl -> GetPropertyKey(This,pkey)

#define IPropertyDescription_GetCanonicalName(This,ppszName)	\
    (This)->lpVtbl -> GetCanonicalName(This,ppszName)

#define IPropertyDescription_GetPropertyType(This,pvartype)	\
    (This)->lpVtbl -> GetPropertyType(This,pvartype)

#define IPropertyDescription_GetDisplayName(This,ppszName)	\
    (This)->lpVtbl -> GetDisplayName(This,ppszName)

#define IPropertyDescription_GetEditInvitation(This,ppszInvite)	\
    (This)->lpVtbl -> GetEditInvitation(This,ppszInvite)

#define IPropertyDescription_GetTypeFlags(This,mask,ppdtFlags)	\
    (This)->lpVtbl -> GetTypeFlags(This,mask,ppdtFlags)

#define IPropertyDescription_GetViewFlags(This,ppdvFlags)	\
    (This)->lpVtbl -> GetViewFlags(This,ppdvFlags)

#define IPropertyDescription_GetDefaultColumnWidth(This,pcxChars)	\
    (This)->lpVtbl -> GetDefaultColumnWidth(This,pcxChars)

#define IPropertyDescription_GetDisplayType(This,pdisplaytype)	\
    (This)->lpVtbl -> GetDisplayType(This,pdisplaytype)

#define IPropertyDescription_GetColumnState(This,pcsFlags)	\
    (This)->lpVtbl -> GetColumnState(This,pcsFlags)

#define IPropertyDescription_GetGroupingRange(This,pgr)	\
    (This)->lpVtbl -> GetGroupingRange(This,pgr)

#define IPropertyDescription_GetRelativeDescriptionType(This,prdt)	\
    (This)->lpVtbl -> GetRelativeDescriptionType(This,prdt)

#define IPropertyDescription_GetRelativeDescription(This,propvar1,propvar2,ppszDesc1,ppszDesc2)	\
    (This)->lpVtbl -> GetRelativeDescription(This,propvar1,propvar2,ppszDesc1,ppszDesc2)

#define IPropertyDescription_GetSortDescription(This,psd)	\
    (This)->lpVtbl -> GetSortDescription(This,psd)

#define IPropertyDescription_GetSortDescriptionLabel(This,fDescending,ppszDescription)	\
    (This)->lpVtbl -> GetSortDescriptionLabel(This,fDescending,ppszDescription)

#define IPropertyDescription_GetAggregationType(This,paggtype)	\
    (This)->lpVtbl -> GetAggregationType(This,paggtype)

#define IPropertyDescription_GetConditionType(This,pcontype,popDefault)	\
    (This)->lpVtbl -> GetConditionType(This,pcontype,popDefault)

#define IPropertyDescription_GetEnumTypeList(This,riid,ppv)	\
    (This)->lpVtbl -> GetEnumTypeList(This,riid,ppv)

#define IPropertyDescription_CoerceToCanonicalValue(This,ppropvar)	\
    (This)->lpVtbl -> CoerceToCanonicalValue(This,ppropvar)

#define IPropertyDescription_FormatForDisplay(This,propvar,pdfFlags,ppszDisplay)	\
    (This)->lpVtbl -> FormatForDisplay(This,propvar,pdfFlags,ppszDisplay)

#define IPropertyDescription_IsValueCanonical(This,propvar)	\
    (This)->lpVtbl -> IsValueCanonical(This,propvar)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyDescription_GetPropertyKey_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [out] */ PROPERTYKEY __RPC_FAR *pkey);


void __RPC_STUB IPropertyDescription_GetPropertyKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetCanonicalName_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [string][out] */ LPWSTR __RPC_FAR *ppszName);


void __RPC_STUB IPropertyDescription_GetCanonicalName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetPropertyType_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [out] */ VARTYPE __RPC_FAR *pvartype);


void __RPC_STUB IPropertyDescription_GetPropertyType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetDisplayName_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [string][out] */ LPWSTR __RPC_FAR *ppszName);


void __RPC_STUB IPropertyDescription_GetDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetEditInvitation_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [string][out] */ LPWSTR __RPC_FAR *ppszInvite);


void __RPC_STUB IPropertyDescription_GetEditInvitation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetTypeFlags_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [in] */ PROPDESC_TYPE_FLAGS mask,
    /* [out] */ PROPDESC_TYPE_FLAGS __RPC_FAR *ppdtFlags);


void __RPC_STUB IPropertyDescription_GetTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetViewFlags_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [out] */ PROPDESC_VIEW_FLAGS __RPC_FAR *ppdvFlags);


void __RPC_STUB IPropertyDescription_GetViewFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetDefaultColumnWidth_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [out] */ UINT __RPC_FAR *pcxChars);


void __RPC_STUB IPropertyDescription_GetDefaultColumnWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetDisplayType_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [out] */ PROPDESC_DISPLAYTYPE __RPC_FAR *pdisplaytype);


void __RPC_STUB IPropertyDescription_GetDisplayType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetColumnState_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [out] */ SHCOLSTATEF __RPC_FAR *pcsFlags);


void __RPC_STUB IPropertyDescription_GetColumnState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetGroupingRange_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [out] */ PROPDESC_GROUPING_RANGE __RPC_FAR *pgr);


void __RPC_STUB IPropertyDescription_GetGroupingRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetRelativeDescriptionType_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [out] */ PROPDESC_RELATIVEDESCRIPTION_TYPE __RPC_FAR *prdt);


void __RPC_STUB IPropertyDescription_GetRelativeDescriptionType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetRelativeDescription_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [in] */ REFPROPVARIANT propvar1,
    /* [in] */ REFPROPVARIANT propvar2,
    /* [string][out] */ LPWSTR __RPC_FAR *ppszDesc1,
    /* [string][out] */ LPWSTR __RPC_FAR *ppszDesc2);


void __RPC_STUB IPropertyDescription_GetRelativeDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetSortDescription_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [out] */ PROPDESC_SORTDESCRIPTION __RPC_FAR *psd);


void __RPC_STUB IPropertyDescription_GetSortDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetSortDescriptionLabel_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [in] */ BOOL fDescending,
    /* [string][out] */ LPWSTR __RPC_FAR *ppszDescription);


void __RPC_STUB IPropertyDescription_GetSortDescriptionLabel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetAggregationType_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [out] */ PROPDESC_AGGREGATION_TYPE __RPC_FAR *paggtype);


void __RPC_STUB IPropertyDescription_GetAggregationType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetConditionType_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [out] */ PROPDESC_CONDITION_TYPE __RPC_FAR *pcontype,
    /* [out] */ CONDITION_OPERATION __RPC_FAR *popDefault);


void __RPC_STUB IPropertyDescription_GetConditionType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_GetEnumTypeList_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertyDescription_GetEnumTypeList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPropertyDescription_RemoteCoerceToCanonicalValue_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [in] */ REFPROPVARIANT propvar,
    /* [out] */ PROPVARIANT __RPC_FAR *ppropvar);


void __RPC_STUB IPropertyDescription_RemoteCoerceToCanonicalValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_FormatForDisplay_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [in] */ REFPROPVARIANT propvar,
    /* [in] */ PROPDESC_FORMAT_FLAGS pdfFlags,
    /* [string][out] */ LPWSTR __RPC_FAR *ppszDisplay);


void __RPC_STUB IPropertyDescription_FormatForDisplay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescription_IsValueCanonical_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [in] */ REFPROPVARIANT propvar);


void __RPC_STUB IPropertyDescription_IsValueCanonical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyDescription_INTERFACE_DEFINED__ */


#ifndef __IPropertyDescriptionAliasInfo_INTERFACE_DEFINED__
#define __IPropertyDescriptionAliasInfo_INTERFACE_DEFINED__

/* interface IPropertyDescriptionAliasInfo */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_IPropertyDescriptionAliasInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f67104fc-2af9-46fd-b32d-243c1404f3d1")
    IPropertyDescriptionAliasInfo : public IPropertyDescription
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSortByAlias( 
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAdditionalSortByAliases( 
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyDescriptionAliasInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyKey )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [out] */ PROPERTYKEY __RPC_FAR *pkey);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCanonicalName )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyType )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [out] */ VARTYPE __RPC_FAR *pvartype);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDisplayName )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetEditInvitation )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszInvite);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeFlags )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [in] */ PROPDESC_TYPE_FLAGS mask,
            /* [out] */ PROPDESC_TYPE_FLAGS __RPC_FAR *ppdtFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetViewFlags )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_VIEW_FLAGS __RPC_FAR *ppdvFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDefaultColumnWidth )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pcxChars);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDisplayType )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_DISPLAYTYPE __RPC_FAR *pdisplaytype);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetColumnState )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [out] */ SHCOLSTATEF __RPC_FAR *pcsFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetGroupingRange )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_GROUPING_RANGE __RPC_FAR *pgr);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetRelativeDescriptionType )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_RELATIVEDESCRIPTION_TYPE __RPC_FAR *prdt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetRelativeDescription )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [in] */ REFPROPVARIANT propvar1,
            /* [in] */ REFPROPVARIANT propvar2,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDesc1,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDesc2);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSortDescription )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_SORTDESCRIPTION __RPC_FAR *psd);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSortDescriptionLabel )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [in] */ BOOL fDescending,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDescription);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAggregationType )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_AGGREGATION_TYPE __RPC_FAR *paggtype);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetConditionType )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_CONDITION_TYPE __RPC_FAR *pcontype,
            /* [out] */ CONDITION_OPERATION __RPC_FAR *popDefault);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetEnumTypeList )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CoerceToCanonicalValue )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [out][in] */ PROPVARIANT __RPC_FAR *ppropvar);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FormatForDisplay )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [in] */ REFPROPVARIANT propvar,
            /* [in] */ PROPDESC_FORMAT_FLAGS pdfFlags,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDisplay);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsValueCanonical )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [in] */ REFPROPVARIANT propvar);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSortByAlias )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAdditionalSortByAliases )( 
            IPropertyDescriptionAliasInfo __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        END_INTERFACE
    } IPropertyDescriptionAliasInfoVtbl;

    interface IPropertyDescriptionAliasInfo
    {
        CONST_VTBL struct IPropertyDescriptionAliasInfoVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyDescriptionAliasInfo_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyDescriptionAliasInfo_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyDescriptionAliasInfo_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyDescriptionAliasInfo_GetPropertyKey(This,pkey)	\
    (This)->lpVtbl -> GetPropertyKey(This,pkey)

#define IPropertyDescriptionAliasInfo_GetCanonicalName(This,ppszName)	\
    (This)->lpVtbl -> GetCanonicalName(This,ppszName)

#define IPropertyDescriptionAliasInfo_GetPropertyType(This,pvartype)	\
    (This)->lpVtbl -> GetPropertyType(This,pvartype)

#define IPropertyDescriptionAliasInfo_GetDisplayName(This,ppszName)	\
    (This)->lpVtbl -> GetDisplayName(This,ppszName)

#define IPropertyDescriptionAliasInfo_GetEditInvitation(This,ppszInvite)	\
    (This)->lpVtbl -> GetEditInvitation(This,ppszInvite)

#define IPropertyDescriptionAliasInfo_GetTypeFlags(This,mask,ppdtFlags)	\
    (This)->lpVtbl -> GetTypeFlags(This,mask,ppdtFlags)

#define IPropertyDescriptionAliasInfo_GetViewFlags(This,ppdvFlags)	\
    (This)->lpVtbl -> GetViewFlags(This,ppdvFlags)

#define IPropertyDescriptionAliasInfo_GetDefaultColumnWidth(This,pcxChars)	\
    (This)->lpVtbl -> GetDefaultColumnWidth(This,pcxChars)

#define IPropertyDescriptionAliasInfo_GetDisplayType(This,pdisplaytype)	\
    (This)->lpVtbl -> GetDisplayType(This,pdisplaytype)

#define IPropertyDescriptionAliasInfo_GetColumnState(This,pcsFlags)	\
    (This)->lpVtbl -> GetColumnState(This,pcsFlags)

#define IPropertyDescriptionAliasInfo_GetGroupingRange(This,pgr)	\
    (This)->lpVtbl -> GetGroupingRange(This,pgr)

#define IPropertyDescriptionAliasInfo_GetRelativeDescriptionType(This,prdt)	\
    (This)->lpVtbl -> GetRelativeDescriptionType(This,prdt)

#define IPropertyDescriptionAliasInfo_GetRelativeDescription(This,propvar1,propvar2,ppszDesc1,ppszDesc2)	\
    (This)->lpVtbl -> GetRelativeDescription(This,propvar1,propvar2,ppszDesc1,ppszDesc2)

#define IPropertyDescriptionAliasInfo_GetSortDescription(This,psd)	\
    (This)->lpVtbl -> GetSortDescription(This,psd)

#define IPropertyDescriptionAliasInfo_GetSortDescriptionLabel(This,fDescending,ppszDescription)	\
    (This)->lpVtbl -> GetSortDescriptionLabel(This,fDescending,ppszDescription)

#define IPropertyDescriptionAliasInfo_GetAggregationType(This,paggtype)	\
    (This)->lpVtbl -> GetAggregationType(This,paggtype)

#define IPropertyDescriptionAliasInfo_GetConditionType(This,pcontype,popDefault)	\
    (This)->lpVtbl -> GetConditionType(This,pcontype,popDefault)

#define IPropertyDescriptionAliasInfo_GetEnumTypeList(This,riid,ppv)	\
    (This)->lpVtbl -> GetEnumTypeList(This,riid,ppv)

#define IPropertyDescriptionAliasInfo_CoerceToCanonicalValue(This,ppropvar)	\
    (This)->lpVtbl -> CoerceToCanonicalValue(This,ppropvar)

#define IPropertyDescriptionAliasInfo_FormatForDisplay(This,propvar,pdfFlags,ppszDisplay)	\
    (This)->lpVtbl -> FormatForDisplay(This,propvar,pdfFlags,ppszDisplay)

#define IPropertyDescriptionAliasInfo_IsValueCanonical(This,propvar)	\
    (This)->lpVtbl -> IsValueCanonical(This,propvar)


#define IPropertyDescriptionAliasInfo_GetSortByAlias(This,riid,ppv)	\
    (This)->lpVtbl -> GetSortByAlias(This,riid,ppv)

#define IPropertyDescriptionAliasInfo_GetAdditionalSortByAliases(This,riid,ppv)	\
    (This)->lpVtbl -> GetAdditionalSortByAliases(This,riid,ppv)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyDescriptionAliasInfo_GetSortByAlias_Proxy( 
    IPropertyDescriptionAliasInfo __RPC_FAR * This,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertyDescriptionAliasInfo_GetSortByAlias_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescriptionAliasInfo_GetAdditionalSortByAliases_Proxy( 
    IPropertyDescriptionAliasInfo __RPC_FAR * This,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertyDescriptionAliasInfo_GetAdditionalSortByAliases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyDescriptionAliasInfo_INTERFACE_DEFINED__ */


#ifndef __IPropertyDescriptionSearchInfo_INTERFACE_DEFINED__
#define __IPropertyDescriptionSearchInfo_INTERFACE_DEFINED__

/* interface IPropertyDescriptionSearchInfo */
/* [unique][object][uuid] */ 

/* [v1_enum] */ 
enum tagPROPDESC_SEARCHINFO_FLAGS
    {	PDSIF_DEFAULT	= 0,
	PDSIF_ININVERTEDINDEX	= 0x1,
	PDSIF_ISCOLUMN	= 0x2,
	PDSIF_ISCOLUMNSPARSE	= 0x4
    };
typedef int PROPDESC_SEARCHINFO_FLAGS;

typedef /* [v1_enum] */ 
enum tagPROPDESC_COLUMNINDEX_TYPE
    {	PDCIT_NONE	= 0,
	PDCIT_ONDISK	= 1,
	PDCIT_INMEMORY	= 2
    }	PROPDESC_COLUMNINDEX_TYPE;


EXTERN_C const IID IID_IPropertyDescriptionSearchInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("078f91bd-29a2-440f-924e-46a291524520")
    IPropertyDescriptionSearchInfo : public IPropertyDescription
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSearchInfoFlags( 
            /* [out] */ PROPDESC_SEARCHINFO_FLAGS __RPC_FAR *ppdsiFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetColumnIndexType( 
            /* [out] */ PROPDESC_COLUMNINDEX_TYPE __RPC_FAR *ppdciType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProjectionString( 
            /* [out] */ LPWSTR __RPC_FAR *ppszProjection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaxSize( 
            /* [out] */ UINT __RPC_FAR *pcbMaxSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyDescriptionSearchInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyKey )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ PROPERTYKEY __RPC_FAR *pkey);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCanonicalName )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyType )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ VARTYPE __RPC_FAR *pvartype);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDisplayName )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszName);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetEditInvitation )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszInvite);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeFlags )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [in] */ PROPDESC_TYPE_FLAGS mask,
            /* [out] */ PROPDESC_TYPE_FLAGS __RPC_FAR *ppdtFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetViewFlags )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_VIEW_FLAGS __RPC_FAR *ppdvFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDefaultColumnWidth )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pcxChars);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDisplayType )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_DISPLAYTYPE __RPC_FAR *pdisplaytype);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetColumnState )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ SHCOLSTATEF __RPC_FAR *pcsFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetGroupingRange )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_GROUPING_RANGE __RPC_FAR *pgr);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetRelativeDescriptionType )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_RELATIVEDESCRIPTION_TYPE __RPC_FAR *prdt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetRelativeDescription )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [in] */ REFPROPVARIANT propvar1,
            /* [in] */ REFPROPVARIANT propvar2,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDesc1,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDesc2);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSortDescription )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_SORTDESCRIPTION __RPC_FAR *psd);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSortDescriptionLabel )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [in] */ BOOL fDescending,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDescription);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAggregationType )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_AGGREGATION_TYPE __RPC_FAR *paggtype);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetConditionType )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_CONDITION_TYPE __RPC_FAR *pcontype,
            /* [out] */ CONDITION_OPERATION __RPC_FAR *popDefault);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetEnumTypeList )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CoerceToCanonicalValue )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out][in] */ PROPVARIANT __RPC_FAR *ppropvar);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FormatForDisplay )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [in] */ REFPROPVARIANT propvar,
            /* [in] */ PROPDESC_FORMAT_FLAGS pdfFlags,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDisplay);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *IsValueCanonical )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [in] */ REFPROPVARIANT propvar);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSearchInfoFlags )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_SEARCHINFO_FLAGS __RPC_FAR *ppdsiFlags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetColumnIndexType )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ PROPDESC_COLUMNINDEX_TYPE __RPC_FAR *ppdciType);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetProjectionString )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ LPWSTR __RPC_FAR *ppszProjection);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetMaxSize )( 
            IPropertyDescriptionSearchInfo __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pcbMaxSize);
        
        END_INTERFACE
    } IPropertyDescriptionSearchInfoVtbl;

    interface IPropertyDescriptionSearchInfo
    {
        CONST_VTBL struct IPropertyDescriptionSearchInfoVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyDescriptionSearchInfo_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyDescriptionSearchInfo_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyDescriptionSearchInfo_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyDescriptionSearchInfo_GetPropertyKey(This,pkey)	\
    (This)->lpVtbl -> GetPropertyKey(This,pkey)

#define IPropertyDescriptionSearchInfo_GetCanonicalName(This,ppszName)	\
    (This)->lpVtbl -> GetCanonicalName(This,ppszName)

#define IPropertyDescriptionSearchInfo_GetPropertyType(This,pvartype)	\
    (This)->lpVtbl -> GetPropertyType(This,pvartype)

#define IPropertyDescriptionSearchInfo_GetDisplayName(This,ppszName)	\
    (This)->lpVtbl -> GetDisplayName(This,ppszName)

#define IPropertyDescriptionSearchInfo_GetEditInvitation(This,ppszInvite)	\
    (This)->lpVtbl -> GetEditInvitation(This,ppszInvite)

#define IPropertyDescriptionSearchInfo_GetTypeFlags(This,mask,ppdtFlags)	\
    (This)->lpVtbl -> GetTypeFlags(This,mask,ppdtFlags)

#define IPropertyDescriptionSearchInfo_GetViewFlags(This,ppdvFlags)	\
    (This)->lpVtbl -> GetViewFlags(This,ppdvFlags)

#define IPropertyDescriptionSearchInfo_GetDefaultColumnWidth(This,pcxChars)	\
    (This)->lpVtbl -> GetDefaultColumnWidth(This,pcxChars)

#define IPropertyDescriptionSearchInfo_GetDisplayType(This,pdisplaytype)	\
    (This)->lpVtbl -> GetDisplayType(This,pdisplaytype)

#define IPropertyDescriptionSearchInfo_GetColumnState(This,pcsFlags)	\
    (This)->lpVtbl -> GetColumnState(This,pcsFlags)

#define IPropertyDescriptionSearchInfo_GetGroupingRange(This,pgr)	\
    (This)->lpVtbl -> GetGroupingRange(This,pgr)

#define IPropertyDescriptionSearchInfo_GetRelativeDescriptionType(This,prdt)	\
    (This)->lpVtbl -> GetRelativeDescriptionType(This,prdt)

#define IPropertyDescriptionSearchInfo_GetRelativeDescription(This,propvar1,propvar2,ppszDesc1,ppszDesc2)	\
    (This)->lpVtbl -> GetRelativeDescription(This,propvar1,propvar2,ppszDesc1,ppszDesc2)

#define IPropertyDescriptionSearchInfo_GetSortDescription(This,psd)	\
    (This)->lpVtbl -> GetSortDescription(This,psd)

#define IPropertyDescriptionSearchInfo_GetSortDescriptionLabel(This,fDescending,ppszDescription)	\
    (This)->lpVtbl -> GetSortDescriptionLabel(This,fDescending,ppszDescription)

#define IPropertyDescriptionSearchInfo_GetAggregationType(This,paggtype)	\
    (This)->lpVtbl -> GetAggregationType(This,paggtype)

#define IPropertyDescriptionSearchInfo_GetConditionType(This,pcontype,popDefault)	\
    (This)->lpVtbl -> GetConditionType(This,pcontype,popDefault)

#define IPropertyDescriptionSearchInfo_GetEnumTypeList(This,riid,ppv)	\
    (This)->lpVtbl -> GetEnumTypeList(This,riid,ppv)

#define IPropertyDescriptionSearchInfo_CoerceToCanonicalValue(This,ppropvar)	\
    (This)->lpVtbl -> CoerceToCanonicalValue(This,ppropvar)

#define IPropertyDescriptionSearchInfo_FormatForDisplay(This,propvar,pdfFlags,ppszDisplay)	\
    (This)->lpVtbl -> FormatForDisplay(This,propvar,pdfFlags,ppszDisplay)

#define IPropertyDescriptionSearchInfo_IsValueCanonical(This,propvar)	\
    (This)->lpVtbl -> IsValueCanonical(This,propvar)


#define IPropertyDescriptionSearchInfo_GetSearchInfoFlags(This,ppdsiFlags)	\
    (This)->lpVtbl -> GetSearchInfoFlags(This,ppdsiFlags)

#define IPropertyDescriptionSearchInfo_GetColumnIndexType(This,ppdciType)	\
    (This)->lpVtbl -> GetColumnIndexType(This,ppdciType)

#define IPropertyDescriptionSearchInfo_GetProjectionString(This,ppszProjection)	\
    (This)->lpVtbl -> GetProjectionString(This,ppszProjection)

#define IPropertyDescriptionSearchInfo_GetMaxSize(This,pcbMaxSize)	\
    (This)->lpVtbl -> GetMaxSize(This,pcbMaxSize)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyDescriptionSearchInfo_GetSearchInfoFlags_Proxy( 
    IPropertyDescriptionSearchInfo __RPC_FAR * This,
    /* [out] */ PROPDESC_SEARCHINFO_FLAGS __RPC_FAR *ppdsiFlags);


void __RPC_STUB IPropertyDescriptionSearchInfo_GetSearchInfoFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescriptionSearchInfo_GetColumnIndexType_Proxy( 
    IPropertyDescriptionSearchInfo __RPC_FAR * This,
    /* [out] */ PROPDESC_COLUMNINDEX_TYPE __RPC_FAR *ppdciType);


void __RPC_STUB IPropertyDescriptionSearchInfo_GetColumnIndexType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescriptionSearchInfo_GetProjectionString_Proxy( 
    IPropertyDescriptionSearchInfo __RPC_FAR * This,
    /* [out] */ LPWSTR __RPC_FAR *ppszProjection);


void __RPC_STUB IPropertyDescriptionSearchInfo_GetProjectionString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescriptionSearchInfo_GetMaxSize_Proxy( 
    IPropertyDescriptionSearchInfo __RPC_FAR * This,
    /* [out] */ UINT __RPC_FAR *pcbMaxSize);


void __RPC_STUB IPropertyDescriptionSearchInfo_GetMaxSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyDescriptionSearchInfo_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_propsys_0184 */
/* [local] */ 

/* [v1_enum] */ 
enum tagPROPDESC_ENUMFILTER
    {	PDEF_ALL	= 0,
	PDEF_SYSTEM	= 1,
	PDEF_NONSYSTEM	= 2,
	PDEF_VIEWABLE	= 3,
	PDEF_QUERYABLE	= 4,
	PDEF_INFULLTEXTQUERY	= 5,
	PDEF_COLUMN	= 6
    };
typedef enum tagPROPDESC_ENUMFILTER PROPDESC_ENUMFILTER;



extern RPC_IF_HANDLE __MIDL_itf_propsys_0184_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propsys_0184_v0_0_s_ifspec;

#ifndef __IPropertySystem_INTERFACE_DEFINED__
#define __IPropertySystem_INTERFACE_DEFINED__

/* interface IPropertySystem */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_IPropertySystem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ca724e8a-c3e6-442b-88a4-6fb0db8035a3")
    IPropertySystem : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPropertyDescription( 
            /* [in] */ REFPROPERTYKEY propkey,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyDescriptionByName( 
            /* [string][in] */ LPCWSTR pszCanonicalName,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyDescriptionListFromString( 
            /* [string][in] */ LPCWSTR pszPropList,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumeratePropertyDescriptions( 
            /* [in] */ PROPDESC_ENUMFILTER filterOn,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FormatForDisplay( 
            /* [in] */ REFPROPERTYKEY key,
            /* [in] */ REFPROPVARIANT propvar,
            /* [in] */ PROPDESC_FORMAT_FLAGS pdff,
            /* [size_is][string][out] */ LPWSTR pszText,
            /* [in] */ DWORD cchText) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FormatForDisplayAlloc( 
            /* [in] */ REFPROPERTYKEY key,
            /* [in] */ REFPROPVARIANT propvar,
            /* [in] */ PROPDESC_FORMAT_FLAGS pdff,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDisplay) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterPropertySchema( 
            /* [string][in] */ LPCWSTR pszPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnregisterPropertySchema( 
            /* [string][in] */ LPCWSTR pszPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RefreshPropertySchema( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertySystemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertySystem __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertySystem __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertySystem __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyDescription )( 
            IPropertySystem __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY propkey,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyDescriptionByName )( 
            IPropertySystem __RPC_FAR * This,
            /* [string][in] */ LPCWSTR pszCanonicalName,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyDescriptionListFromString )( 
            IPropertySystem __RPC_FAR * This,
            /* [string][in] */ LPCWSTR pszPropList,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *EnumeratePropertyDescriptions )( 
            IPropertySystem __RPC_FAR * This,
            /* [in] */ PROPDESC_ENUMFILTER filterOn,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FormatForDisplay )( 
            IPropertySystem __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key,
            /* [in] */ REFPROPVARIANT propvar,
            /* [in] */ PROPDESC_FORMAT_FLAGS pdff,
            /* [size_is][string][out] */ LPWSTR pszText,
            /* [in] */ DWORD cchText);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *FormatForDisplayAlloc )( 
            IPropertySystem __RPC_FAR * This,
            /* [in] */ REFPROPERTYKEY key,
            /* [in] */ REFPROPVARIANT propvar,
            /* [in] */ PROPDESC_FORMAT_FLAGS pdff,
            /* [string][out] */ LPWSTR __RPC_FAR *ppszDisplay);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RegisterPropertySchema )( 
            IPropertySystem __RPC_FAR * This,
            /* [string][in] */ LPCWSTR pszPath);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *UnregisterPropertySchema )( 
            IPropertySystem __RPC_FAR * This,
            /* [string][in] */ LPCWSTR pszPath);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *RefreshPropertySchema )( 
            IPropertySystem __RPC_FAR * This);
        
        END_INTERFACE
    } IPropertySystemVtbl;

    interface IPropertySystem
    {
        CONST_VTBL struct IPropertySystemVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertySystem_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertySystem_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertySystem_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertySystem_GetPropertyDescription(This,propkey,riid,ppv)	\
    (This)->lpVtbl -> GetPropertyDescription(This,propkey,riid,ppv)

#define IPropertySystem_GetPropertyDescriptionByName(This,pszCanonicalName,riid,ppv)	\
    (This)->lpVtbl -> GetPropertyDescriptionByName(This,pszCanonicalName,riid,ppv)

#define IPropertySystem_GetPropertyDescriptionListFromString(This,pszPropList,riid,ppv)	\
    (This)->lpVtbl -> GetPropertyDescriptionListFromString(This,pszPropList,riid,ppv)

#define IPropertySystem_EnumeratePropertyDescriptions(This,filterOn,riid,ppv)	\
    (This)->lpVtbl -> EnumeratePropertyDescriptions(This,filterOn,riid,ppv)

#define IPropertySystem_FormatForDisplay(This,key,propvar,pdff,pszText,cchText)	\
    (This)->lpVtbl -> FormatForDisplay(This,key,propvar,pdff,pszText,cchText)

#define IPropertySystem_FormatForDisplayAlloc(This,key,propvar,pdff,ppszDisplay)	\
    (This)->lpVtbl -> FormatForDisplayAlloc(This,key,propvar,pdff,ppszDisplay)

#define IPropertySystem_RegisterPropertySchema(This,pszPath)	\
    (This)->lpVtbl -> RegisterPropertySchema(This,pszPath)

#define IPropertySystem_UnregisterPropertySchema(This,pszPath)	\
    (This)->lpVtbl -> UnregisterPropertySchema(This,pszPath)

#define IPropertySystem_RefreshPropertySchema(This)	\
    (This)->lpVtbl -> RefreshPropertySchema(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertySystem_GetPropertyDescription_Proxy( 
    IPropertySystem __RPC_FAR * This,
    /* [in] */ REFPROPERTYKEY propkey,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertySystem_GetPropertyDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertySystem_GetPropertyDescriptionByName_Proxy( 
    IPropertySystem __RPC_FAR * This,
    /* [string][in] */ LPCWSTR pszCanonicalName,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertySystem_GetPropertyDescriptionByName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertySystem_GetPropertyDescriptionListFromString_Proxy( 
    IPropertySystem __RPC_FAR * This,
    /* [string][in] */ LPCWSTR pszPropList,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertySystem_GetPropertyDescriptionListFromString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertySystem_EnumeratePropertyDescriptions_Proxy( 
    IPropertySystem __RPC_FAR * This,
    /* [in] */ PROPDESC_ENUMFILTER filterOn,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertySystem_EnumeratePropertyDescriptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertySystem_FormatForDisplay_Proxy( 
    IPropertySystem __RPC_FAR * This,
    /* [in] */ REFPROPERTYKEY key,
    /* [in] */ REFPROPVARIANT propvar,
    /* [in] */ PROPDESC_FORMAT_FLAGS pdff,
    /* [size_is][string][out] */ LPWSTR pszText,
    /* [in] */ DWORD cchText);


void __RPC_STUB IPropertySystem_FormatForDisplay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertySystem_FormatForDisplayAlloc_Proxy( 
    IPropertySystem __RPC_FAR * This,
    /* [in] */ REFPROPERTYKEY key,
    /* [in] */ REFPROPVARIANT propvar,
    /* [in] */ PROPDESC_FORMAT_FLAGS pdff,
    /* [string][out] */ LPWSTR __RPC_FAR *ppszDisplay);


void __RPC_STUB IPropertySystem_FormatForDisplayAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertySystem_RegisterPropertySchema_Proxy( 
    IPropertySystem __RPC_FAR * This,
    /* [string][in] */ LPCWSTR pszPath);


void __RPC_STUB IPropertySystem_RegisterPropertySchema_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertySystem_UnregisterPropertySchema_Proxy( 
    IPropertySystem __RPC_FAR * This,
    /* [string][in] */ LPCWSTR pszPath);


void __RPC_STUB IPropertySystem_UnregisterPropertySchema_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertySystem_RefreshPropertySchema_Proxy( 
    IPropertySystem __RPC_FAR * This);


void __RPC_STUB IPropertySystem_RefreshPropertySchema_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertySystem_INTERFACE_DEFINED__ */


#ifndef __IPropertyDescriptionList_INTERFACE_DEFINED__
#define __IPropertyDescriptionList_INTERFACE_DEFINED__

/* interface IPropertyDescriptionList */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_IPropertyDescriptionList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1f9fc1d0-c39b-4b26-817f-011967d3440e")
    IPropertyDescriptionList : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ UINT __RPC_FAR *pcElem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ UINT iElem,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyDescriptionListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyDescriptionList __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyDescriptionList __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyDescriptionList __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetCount )( 
            IPropertyDescriptionList __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pcElem);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetAt )( 
            IPropertyDescriptionList __RPC_FAR * This,
            /* [in] */ UINT iElem,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        END_INTERFACE
    } IPropertyDescriptionListVtbl;

    interface IPropertyDescriptionList
    {
        CONST_VTBL struct IPropertyDescriptionListVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyDescriptionList_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyDescriptionList_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyDescriptionList_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyDescriptionList_GetCount(This,pcElem)	\
    (This)->lpVtbl -> GetCount(This,pcElem)

#define IPropertyDescriptionList_GetAt(This,iElem,riid,ppv)	\
    (This)->lpVtbl -> GetAt(This,iElem,riid,ppv)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyDescriptionList_GetCount_Proxy( 
    IPropertyDescriptionList __RPC_FAR * This,
    /* [out] */ UINT __RPC_FAR *pcElem);


void __RPC_STUB IPropertyDescriptionList_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyDescriptionList_GetAt_Proxy( 
    IPropertyDescriptionList __RPC_FAR * This,
    /* [in] */ UINT iElem,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertyDescriptionList_GetAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyDescriptionList_INTERFACE_DEFINED__ */


#ifndef __IPropertyStoreFactory_INTERFACE_DEFINED__
#define __IPropertyStoreFactory_INTERFACE_DEFINED__

/* interface IPropertyStoreFactory */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_IPropertyStoreFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bc110b6d-57e8-4148-a9c6-91015ab2f3a5")
    IPropertyStoreFactory : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPropertyStore( 
            /* [in] */ GETPROPERTYSTOREFLAGS flags,
            /* [unique][in] */ IUnknown __RPC_FAR *pUnkFactory,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyStoreForKeys( 
            /* [unique][in] */ const PROPERTYKEY __RPC_FAR *rgKeys,
            /* [in] */ UINT cKeys,
            /* [in] */ GETPROPERTYSTOREFLAGS flags,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyStoreFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertyStoreFactory __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertyStoreFactory __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertyStoreFactory __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyStore )( 
            IPropertyStoreFactory __RPC_FAR * This,
            /* [in] */ GETPROPERTYSTOREFLAGS flags,
            /* [unique][in] */ IUnknown __RPC_FAR *pUnkFactory,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyStoreForKeys )( 
            IPropertyStoreFactory __RPC_FAR * This,
            /* [unique][in] */ const PROPERTYKEY __RPC_FAR *rgKeys,
            /* [in] */ UINT cKeys,
            /* [in] */ GETPROPERTYSTOREFLAGS flags,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        END_INTERFACE
    } IPropertyStoreFactoryVtbl;

    interface IPropertyStoreFactory
    {
        CONST_VTBL struct IPropertyStoreFactoryVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyStoreFactory_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyStoreFactory_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyStoreFactory_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyStoreFactory_GetPropertyStore(This,flags,pUnkFactory,riid,ppv)	\
    (This)->lpVtbl -> GetPropertyStore(This,flags,pUnkFactory,riid,ppv)

#define IPropertyStoreFactory_GetPropertyStoreForKeys(This,rgKeys,cKeys,flags,riid,ppv)	\
    (This)->lpVtbl -> GetPropertyStoreForKeys(This,rgKeys,cKeys,flags,riid,ppv)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyStoreFactory_GetPropertyStore_Proxy( 
    IPropertyStoreFactory __RPC_FAR * This,
    /* [in] */ GETPROPERTYSTOREFLAGS flags,
    /* [unique][in] */ IUnknown __RPC_FAR *pUnkFactory,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertyStoreFactory_GetPropertyStore_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPropertyStoreFactory_GetPropertyStoreForKeys_Proxy( 
    IPropertyStoreFactory __RPC_FAR * This,
    /* [unique][in] */ const PROPERTYKEY __RPC_FAR *rgKeys,
    /* [in] */ UINT cKeys,
    /* [in] */ GETPROPERTYSTOREFLAGS flags,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IPropertyStoreFactory_GetPropertyStoreForKeys_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyStoreFactory_INTERFACE_DEFINED__ */


#ifndef __IDelayedPropertyStoreFactory_INTERFACE_DEFINED__
#define __IDelayedPropertyStoreFactory_INTERFACE_DEFINED__

/* interface IDelayedPropertyStoreFactory */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_IDelayedPropertyStoreFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("40d4577f-e237-4bdb-bd69-58f089431b6a")
    IDelayedPropertyStoreFactory : public IPropertyStoreFactory
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDelayedPropertyStore( 
            /* [in] */ GETPROPERTYSTOREFLAGS flags,
            /* [in] */ DWORD dwStoreId,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDelayedPropertyStoreFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDelayedPropertyStoreFactory __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDelayedPropertyStoreFactory __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDelayedPropertyStoreFactory __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyStore )( 
            IDelayedPropertyStoreFactory __RPC_FAR * This,
            /* [in] */ GETPROPERTYSTOREFLAGS flags,
            /* [unique][in] */ IUnknown __RPC_FAR *pUnkFactory,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyStoreForKeys )( 
            IDelayedPropertyStoreFactory __RPC_FAR * This,
            /* [unique][in] */ const PROPERTYKEY __RPC_FAR *rgKeys,
            /* [in] */ UINT cKeys,
            /* [in] */ GETPROPERTYSTOREFLAGS flags,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDelayedPropertyStore )( 
            IDelayedPropertyStoreFactory __RPC_FAR * This,
            /* [in] */ GETPROPERTYSTOREFLAGS flags,
            /* [in] */ DWORD dwStoreId,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        END_INTERFACE
    } IDelayedPropertyStoreFactoryVtbl;

    interface IDelayedPropertyStoreFactory
    {
        CONST_VTBL struct IDelayedPropertyStoreFactoryVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDelayedPropertyStoreFactory_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDelayedPropertyStoreFactory_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDelayedPropertyStoreFactory_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDelayedPropertyStoreFactory_GetPropertyStore(This,flags,pUnkFactory,riid,ppv)	\
    (This)->lpVtbl -> GetPropertyStore(This,flags,pUnkFactory,riid,ppv)

#define IDelayedPropertyStoreFactory_GetPropertyStoreForKeys(This,rgKeys,cKeys,flags,riid,ppv)	\
    (This)->lpVtbl -> GetPropertyStoreForKeys(This,rgKeys,cKeys,flags,riid,ppv)


#define IDelayedPropertyStoreFactory_GetDelayedPropertyStore(This,flags,dwStoreId,riid,ppv)	\
    (This)->lpVtbl -> GetDelayedPropertyStore(This,flags,dwStoreId,riid,ppv)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDelayedPropertyStoreFactory_GetDelayedPropertyStore_Proxy( 
    IDelayedPropertyStoreFactory __RPC_FAR * This,
    /* [in] */ GETPROPERTYSTOREFLAGS flags,
    /* [in] */ DWORD dwStoreId,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB IDelayedPropertyStoreFactory_GetDelayedPropertyStore_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDelayedPropertyStoreFactory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_propsys_0188 */
/* [local] */ 

/* [v1_enum] */ 
enum tagPERSIST_SPROPSTORE_FLAGS
    {	FPSPS_READONLY	= 0x1
    };
typedef int PERSIST_SPROPSTORE_FLAGS;

typedef struct tagSERIALIZEDPROPSTORAGE SERIALIZEDPROPSTORAGE;

typedef SERIALIZEDPROPSTORAGE __unaligned __RPC_FAR *PUSERIALIZEDPROPSTORAGE;

typedef const SERIALIZEDPROPSTORAGE __unaligned __RPC_FAR *PCUSERIALIZEDPROPSTORAGE;



extern RPC_IF_HANDLE __MIDL_itf_propsys_0188_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propsys_0188_v0_0_s_ifspec;

#ifndef __IPersistSerializedPropStorage_INTERFACE_DEFINED__
#define __IPersistSerializedPropStorage_INTERFACE_DEFINED__

/* interface IPersistSerializedPropStorage */
/* [object][local][unique][uuid] */ 


EXTERN_C const IID IID_IPersistSerializedPropStorage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e318ad57-0aa0-450f-aca5-6fab7103d917")
    IPersistSerializedPropStorage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetFlags( 
            /* [in] */ PERSIST_SPROPSTORE_FLAGS flags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPropertyStorage( 
            /* [in] */ PCUSERIALIZEDPROPSTORAGE psps,
            /* [in] */ DWORD cb) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyStorage( 
            /* [out] */ SERIALIZEDPROPSTORAGE __RPC_FAR *__RPC_FAR *ppsps,
            /* [out] */ DWORD __RPC_FAR *pcb) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPersistSerializedPropStorageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPersistSerializedPropStorage __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPersistSerializedPropStorage __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPersistSerializedPropStorage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetFlags )( 
            IPersistSerializedPropStorage __RPC_FAR * This,
            /* [in] */ PERSIST_SPROPSTORE_FLAGS flags);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetPropertyStorage )( 
            IPersistSerializedPropStorage __RPC_FAR * This,
            /* [in] */ PCUSERIALIZEDPROPSTORAGE psps,
            /* [in] */ DWORD cb);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyStorage )( 
            IPersistSerializedPropStorage __RPC_FAR * This,
            /* [out] */ SERIALIZEDPROPSTORAGE __RPC_FAR *__RPC_FAR *ppsps,
            /* [out] */ DWORD __RPC_FAR *pcb);
        
        END_INTERFACE
    } IPersistSerializedPropStorageVtbl;

    interface IPersistSerializedPropStorage
    {
        CONST_VTBL struct IPersistSerializedPropStorageVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPersistSerializedPropStorage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPersistSerializedPropStorage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPersistSerializedPropStorage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPersistSerializedPropStorage_SetFlags(This,flags)	\
    (This)->lpVtbl -> SetFlags(This,flags)

#define IPersistSerializedPropStorage_SetPropertyStorage(This,psps,cb)	\
    (This)->lpVtbl -> SetPropertyStorage(This,psps,cb)

#define IPersistSerializedPropStorage_GetPropertyStorage(This,ppsps,pcb)	\
    (This)->lpVtbl -> GetPropertyStorage(This,ppsps,pcb)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPersistSerializedPropStorage_SetFlags_Proxy( 
    IPersistSerializedPropStorage __RPC_FAR * This,
    /* [in] */ PERSIST_SPROPSTORE_FLAGS flags);


void __RPC_STUB IPersistSerializedPropStorage_SetFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistSerializedPropStorage_SetPropertyStorage_Proxy( 
    IPersistSerializedPropStorage __RPC_FAR * This,
    /* [in] */ PCUSERIALIZEDPROPSTORAGE psps,
    /* [in] */ DWORD cb);


void __RPC_STUB IPersistSerializedPropStorage_SetPropertyStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPersistSerializedPropStorage_GetPropertyStorage_Proxy( 
    IPersistSerializedPropStorage __RPC_FAR * This,
    /* [out] */ SERIALIZEDPROPSTORAGE __RPC_FAR *__RPC_FAR *ppsps,
    /* [out] */ DWORD __RPC_FAR *pcb);


void __RPC_STUB IPersistSerializedPropStorage_GetPropertyStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPersistSerializedPropStorage_INTERFACE_DEFINED__ */


#ifndef __IPropertySystemChangeNotify_INTERFACE_DEFINED__
#define __IPropertySystemChangeNotify_INTERFACE_DEFINED__

/* interface IPropertySystemChangeNotify */
/* [unique][object][uuid] */ 


EXTERN_C const IID IID_IPropertySystemChangeNotify;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fa955fd9-38be-4879-a6ce-824cf52d609f")
    IPropertySystemChangeNotify : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SchemaRefreshed( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertySystemChangeNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPropertySystemChangeNotify __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPropertySystemChangeNotify __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPropertySystemChangeNotify __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SchemaRefreshed )( 
            IPropertySystemChangeNotify __RPC_FAR * This);
        
        END_INTERFACE
    } IPropertySystemChangeNotifyVtbl;

    interface IPropertySystemChangeNotify
    {
        CONST_VTBL struct IPropertySystemChangeNotifyVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertySystemChangeNotify_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertySystemChangeNotify_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertySystemChangeNotify_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertySystemChangeNotify_SchemaRefreshed(This)	\
    (This)->lpVtbl -> SchemaRefreshed(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertySystemChangeNotify_SchemaRefreshed_Proxy( 
    IPropertySystemChangeNotify __RPC_FAR * This);


void __RPC_STUB IPropertySystemChangeNotify_SchemaRefreshed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertySystemChangeNotify_INTERFACE_DEFINED__ */


#ifndef __ICreateObject_INTERFACE_DEFINED__
#define __ICreateObject_INTERFACE_DEFINED__

/* interface ICreateObject */
/* [object][unique][uuid] */ 


EXTERN_C const IID IID_ICreateObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("75121952-e0d0-43e5-9380-1d80483acf72")
    ICreateObject : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateObject( 
            /* [in] */ REFCLSID clsid,
            /* [unique][in] */ IUnknown __RPC_FAR *pUnkOuter,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICreateObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ICreateObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ICreateObject __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ICreateObject __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *CreateObject )( 
            ICreateObject __RPC_FAR * This,
            /* [in] */ REFCLSID clsid,
            /* [unique][in] */ IUnknown __RPC_FAR *pUnkOuter,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);
        
        END_INTERFACE
    } ICreateObjectVtbl;

    interface ICreateObject
    {
        CONST_VTBL struct ICreateObjectVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICreateObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ICreateObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ICreateObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ICreateObject_CreateObject(This,clsid,pUnkOuter,riid,ppv)	\
    (This)->lpVtbl -> CreateObject(This,clsid,pUnkOuter,riid,ppv)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ICreateObject_CreateObject_Proxy( 
    ICreateObject __RPC_FAR * This,
    /* [in] */ REFCLSID clsid,
    /* [unique][in] */ IUnknown __RPC_FAR *pUnkOuter,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppv);


void __RPC_STUB ICreateObject_CreateObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ICreateObject_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_propsys_0191 */
/* [local] */ 

// Format a property value for display purposes
PSSTDAPI PSFormatForDisplay(
    __in REFPROPERTYKEY propkey,
    __in REFPROPVARIANT propvar,
    __in PROPDESC_FORMAT_FLAGS pdfFlags,
    __out_ecount(cchText) LPWSTR pwszText,
    __in DWORD cchText);

PSSTDAPI PSFormatForDisplayAlloc(
    __in REFPROPERTYKEY key,
    __in REFPROPVARIANT propvar,
    __in PROPDESC_FORMAT_FLAGS pdff,
    __deref_out PWSTR *ppszDisplay);

PSSTDAPI PSFormatPropertyValue(
    __in IPropertyStore *pps,
    __in IPropertyDescription *ppd,
    __in PROPDESC_FORMAT_FLAGS pdff,
    __deref_out LPWSTR *ppszDisplay);


#define PKEY_PIDSTR_MAX     10   // will take care of any long integer value
#define GUIDSTRING_MAX      (1 + 8 + 1 + 4 + 1 + 4 + 1 + 4 + 1 + 12 + 1 + 1)  // "{12345678-1234-1234-1234-123456789012}"
#define PKEYSTR_MAX         (GUIDSTRING_MAX + 1 + PKEY_PIDSTR_MAX)

// Convert a PROPERTYKEY to and from a PWSTR
PSSTDAPI PSStringFromPropertyKey(
    __in REFPROPERTYKEY pkey,
    __out_ecount(cch) LPWSTR psz,
    __in UINT cch);

PSSTDAPI PSPropertyKeyFromString(
    __in LPCWSTR pszString,
    __out PROPERTYKEY *pkey);


// Creates an in-memory property store
// Returns an IPropertyStore, IPersistSerializedPropStorage, and related interfaces interface
PSSTDAPI PSCreateMemoryPropertyStore(
    __in REFIID riid,
    __deref_out void **ppv);


// Create a read-only, delay-bind multiplexing property store
// Returns an IPropertyStore interface or related interfaces
PSSTDAPI PSCreateDelayedMultiplexPropertyStore(
    __in GETPROPERTYSTOREFLAGS flags,
    __in IDelayedPropertyStoreFactory *pdpsf,
    __in_ecount(cStores) const DWORD *rgStoreIds,
    __in DWORD cStores,
    __in REFIID riid,
    __deref_out void **ppv);


// Create a read-only property store from one or more sources (which each must support either IPropertyStore or IPropertySetStorage)
// Returns an IPropertyStore interface or related interfaces
PSSTDAPI PSCreateMultiplexPropertyStore(
    __in_ecount(cStores) IUnknown **prgpunkStores,
    __in DWORD cStores,
    __in REFIID riid,
    __deref_out void **ppv);


// Create a container for IPropertyChanges
// Returns an IPropertyChangeArray interface
PSSTDAPI PSCreatePropertyChangeArray(
    __in_ecount_opt(cChanges) const PROPERTYKEY *rgpropkey,
    __in_ecount_opt(cChanges) const PKA_FLAGS *rgflags,
    __in_ecount_opt(cChanges) const PROPVARIANT *rgpropvar,
    __in UINT cChanges,
    __in REFIID riid,
    __deref_out void **ppv);


// Create a simple property change
// Returns an IPropertyChange interface
PSSTDAPI PSCreateSimplePropertyChange(
    __in PKA_FLAGS flags,
    __in REFPROPERTYKEY key,
    __in REFPROPVARIANT propvar,
    __in REFIID riid,
    __deref_out void **ppv);


// Get a property description
// Returns an IPropertyDescription interface
PSSTDAPI PSGetPropertyDescription(
    __in REFPROPERTYKEY propkey,
    __in REFIID riid,
    __deref_out void **ppv);

PSSTDAPI PSGetPropertyDescriptionByName(
    __in LPCWSTR pszCanonicalName,
    __in REFIID riid,
    __deref_out void **ppv);


// Lookup a per-machine registered file property handler
PSSTDAPI PSLookupPropertyHandlerCLSID(
    __in PCWSTR pszFilePath,
    __out CLSID *pclsid);
// Get a property handler, on Vista or downlevel to XP
// punkItem is a shell item created with an SHCreateItemXXX API
// Returns an IPropertyStore
PSSTDAPI PSGetItemPropertyHandler(
    __in IUnknown *punkItem,
    __in BOOL fReadWrite,
    __in REFIID riid,
    __deref_out void **ppv);


// Get a property handler, on Vista or downlevel to XP
// punkItem is a shell item created with an SHCreateItemXXX API
// punkCreateObject supports ICreateObject
// Returns an IPropertyStore
PSSTDAPI PSGetItemPropertyHandlerWithCreateObject(
    __in IUnknown *punkItem,
    __in BOOL fReadWrite,
    __in IUnknown *punkCreateObject,
    __in REFIID riid,
    __deref_out void **ppv);


// Get or set a property value from a store
PSSTDAPI PSGetPropertyValue(
    __in IPropertyStore *pps,
    __in IPropertyDescription *ppd,
    __out PROPVARIANT *ppropvar);

PSSTDAPI PSSetPropertyValue(
    __in IPropertyStore *pps,
    __in IPropertyDescription *ppd,
    __in REFPROPVARIANT propvar);


// Interact with the set of property descriptions
PSSTDAPI PSRegisterPropertySchema(
    __in PCWSTR pszPath);

PSSTDAPI PSUnregisterPropertySchema(
    __in PCWSTR pszPath);

PSSTDAPI PSRefreshPropertySchema();

// Returns either: IPropertyDescriptionList or IEnumUnknown interfaces
PSSTDAPI PSEnumeratePropertyDescriptions(
    __in PROPDESC_ENUMFILTER filterOn,
    __in REFIID riid,
    __deref_out void **ppv);


// Convert between a PROPERTYKEY and its canonical name
PSSTDAPI PSGetPropertyKeyFromName(
    __in PCWSTR pszName,
    __out PROPERTYKEY *ppropkey);

PSSTDAPI PSGetNameFromPropertyKey(
    __in REFPROPERTYKEY propkey,
    __deref_out PWSTR *ppszCanonicalName);


// Coerce and canonicalize a property value
PSSTDAPI PSCoerceToCanonicalValue(
    __in REFPROPERTYKEY key,
    __inout PROPVARIANT *ppropvar);


// Convert a 'prop:' string into a list of property descriptions
// Returns an IPropertyDescriptionList interface
PSSTDAPI PSGetPropertyDescriptionListFromString(
    __in LPCWSTR pszPropList,
    __in REFIID riid,
    __deref_out void **ppv);


// Wrap an IPropertySetStorage interface in an IPropertyStore interface
// Returns an IPropertyStore or related interface
PSSTDAPI PSCreatePropertyStoreFromPropertySetStorage(
    __in IPropertySetStorage *ppss,
    DWORD grfMode,
    REFIID riid,
    __deref_out void **ppv);


// punkSource must support IPropertyStore or IPropertySetStorage
// On success, the returned ppv is guaranteed to support IPropertyStore.
// If punkSource already supports IPropertyStore, no wrapper is created.
PSSTDAPI PSCreatePropertyStoreFromObject(
    __in IUnknown *punk,
    __in DWORD grfMode,
    __in REFIID riid,
    __deref_out void **ppv);


// punkSource must support IPropertyStore
// riid may be IPropertyStore, IPropertySetStorage, IPropertyStoreCapabilities, or IObjectProvider
PSSTDAPI PSCreateAdapterFromPropertyStore(
    __in IPropertyStore *pps,
    __in REFIID riid,
    __deref_out void **ppv);


// Talk to the property system using an interface
// Returns an IPropertySystem interface
PSSTDAPI PSGetPropertySystem(
    __in REFIID riid,
    __deref_out void **ppv);


// Obtain a value from serialized property storage
PSSTDAPI PSGetPropertyFromPropertyStorage(
    __in_bcount(cb) PCUSERIALIZEDPROPSTORAGE psps, 
    __in DWORD cb, 
    __in REFPROPERTYKEY rpkey, 
    __out PROPVARIANT *ppropvar);


// Obtain a named value from serialized property storage
PSSTDAPI PSGetNamedPropertyFromPropertyStorage(
    __in_bcount(cb) PCUSERIALIZEDPROPSTORAGE psps, 
    __in DWORD cb, 
    __in LPCWSTR pszName, 
    __out PROPVARIANT *ppropvar);




extern RPC_IF_HANDLE __MIDL_itf_propsys_0191_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propsys_0191_v0_0_s_ifspec;


#ifndef __PropSysObjects_LIBRARY_DEFINED__
#define __PropSysObjects_LIBRARY_DEFINED__

/* library PropSysObjects */
/* [version][lcid][uuid] */ 


EXTERN_C const IID LIBID_PropSysObjects;

EXTERN_C const CLSID CLSID_InMemoryPropertyStore;

#ifdef __cplusplus

class DECLSPEC_UUID("9a02e012-6303-4e1e-b9a1-630f802592c5")
InMemoryPropertyStore;
#endif

EXTERN_C const CLSID CLSID_PropertySystem;

#ifdef __cplusplus

class DECLSPEC_UUID("b8967f85-58ae-4f46-9fb2-5d7904798f4b")
PropertySystem;
#endif
#endif /* __PropSysObjects_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long __RPC_FAR *, unsigned long            , BSTR __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  BSTR_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  BSTR_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long __RPC_FAR *, BSTR __RPC_FAR * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize(     unsigned long __RPC_FAR *, unsigned long            , LPSAFEARRAY __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  LPSAFEARRAY_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, LPSAFEARRAY __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  LPSAFEARRAY_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, LPSAFEARRAY __RPC_FAR * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree(     unsigned long __RPC_FAR *, LPSAFEARRAY __RPC_FAR * ); 

/* [local] */ HRESULT STDMETHODCALLTYPE IInitializeWithStream_Initialize_Proxy( 
    IInitializeWithStream __RPC_FAR * This,
    /* [in] */ IStream __RPC_FAR *pstream,
    /* [in] */ DWORD grfMode);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IInitializeWithStream_Initialize_Stub( 
    IInitializeWithStream __RPC_FAR * This,
    /* [in] */ IStream __RPC_FAR *pstream,
    /* [in] */ DWORD grfMode);

/* [local] */ HRESULT STDMETHODCALLTYPE IPropertyDescription_CoerceToCanonicalValue_Proxy( 
    IPropertyDescription __RPC_FAR * This,
    /* [out][in] */ PROPVARIANT __RPC_FAR *ppropvar);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IPropertyDescription_CoerceToCanonicalValue_Stub( 
    IPropertyDescription __RPC_FAR * This,
    /* [in] */ REFPROPVARIANT propvar,
    /* [out] */ PROPVARIANT __RPC_FAR *ppropvar);



/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\propkeydef.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//

#ifndef PID_FIRST_USABLE
#define PID_FIRST_USABLE 2
#endif

#ifndef REFPROPERTYKEY
#ifdef __cplusplus
#define REFPROPERTYKEY const PROPERTYKEY &
#else // !__cplusplus
#define REFPROPERTYKEY const PROPERTYKEY * __MIDL_CONST
#endif // __cplusplus
#endif //REFPROPERTYKEY

#ifdef DEFINE_PROPERTYKEY
#undef DEFINE_PROPERTYKEY
#endif

#ifndef IEMOBILE
#ifdef INITGUID
#define DEFINE_PROPERTYKEY(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8, pid) EXTERN_C const PROPERTYKEY DECLSPEC_SELECTANY name = { { l, w1, w2, { b1, b2,  b3,  b4,  b5,  b6,  b7,  b8 } }, pid }
#else
#define DEFINE_PROPERTYKEY(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8, pid) EXTERN_C const PROPERTYKEY name
#endif // INITGUID
#else
#define DEFINE_PROPERTYKEY(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8, pid) EXTERN_C const __declspec(selectany) PROPERTYKEY name = { { l, w1, w2, { b1, b2,  b3,  b4,  b5,  b6,  b7,  b8 } }, pid }
#endif

#ifndef IsEqualPropertyKey
#define IsEqualPropertyKey(a, b)   (((a).pid == (b).pid) && IsEqualIID((a).fmtid, (b).fmtid) )
#endif  // IsEqualPropertyKey
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\propertybag.h ===
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this source code is subject to the terms of the Microsoft
// premium shared source license agreement under which you licensed
// this source code. If you did not accept the terms of the license
// agreement, you are not authorized to use this source code.
// For the terms of the license, please see the license agreement
// signed by you and Microsoft.
// THE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//
//--------------------------------------------------------------------------;

#ifndef _PROPERTYBAG_H_
#define _PROPERTYBAG_H_

#if (_MSC_VER >= 1000)
#pragma once
#endif


class CPropertyBagPair; // Internal structure used by CPropertyBag


//=====================================================================
//=====================================================================
// Defines CPropertyBag
//
// A class providing basic IPropertyBag support.
//
// This implementation supplies a basic implementation of the
// IPropertyBag interface. Where the IPropertyBag interface leaves
// behavior choices up to the implementation, this implementation
// uses whatever behavior is the easiest to meet the needs of the
// interface.
//=====================================================================
//=====================================================================
class CPropertyBag : public CUnknown, public IPropertyBag
{
public:
    CPropertyBag(LPUNKNOWN pUnk);
    virtual ~CPropertyBag();

    static CUnknown* CreateInstance(LPUNKNOWN pUnk, HRESULT* pHr);

    DECLARE_IUNKNOWN;
    // override this to say what interfaces we support
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void** ppv);

    HRESULT STDMETHODCALLTYPE
    Read(
        LPCOLESTR pszPropName,
        VARIANT* pVar,
        IErrorLog* pErrorLog
        );

    HRESULT STDMETHODCALLTYPE
    Write(
        LPCOLESTR pszPropName,
        VARIANT* pVar
        );

private:
    CPropertyBagPair* Find(LPCOLESTR pszPropName);

    CGenericList<CPropertyBagPair> m_pPairList;
};

#endif // _PROPERTYBAG_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\wm7\sfone7\Include\propkey.h ===
//===========================================================================
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//
//===========================================================================


#ifndef _INC_PROPKEY
#define _INC_PROPKEY

#ifndef DEFINE_API_PKEY
#define DEFINE_API_PKEY(name, managed_name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8, pid) \
        DEFINE_PROPERTYKEY(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8, pid)
#endif

#include <propkeydef.h>

#ifndef _WIN32_IE
#define _WIN32_IE 0x0501
#else
#if (_WIN32_IE < 0x0400) && defined(_WIN32_WINNT) && (_WIN32_WINNT >= 0x0500)
#error _WIN32_IE setting conflicts with _WIN32_WINNT setting
#endif
#endif

 
//-----------------------------------------------------------------------------
// Audio properties

//  Name:     System.Audio.ChannelCount -- PKEY_Audio_ChannelCount
//  Type:     UInt32 -- VT_UI4
//  FormatID: (FMTID_AudioSummaryInformation) 64440490-4C8B-11D1-8B70-080036B11A03, 7 (PIDASI_CHANNEL_COUNT)
//
//  Indicates the channel count for the audio file.  Values: 1 (mono), 2 (stereo).
DEFINE_PROPERTYKEY(PKEY_Audio_ChannelCount, 0x64440490, 0x4C8B, 0x11D1, 0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03, 7);

// Possible discrete values for PKEY_Audio_ChannelCount are:
#define AUDIO_CHANNELCOUNT_MONO             1ul
#define AUDIO_CHANNELCOUNT_STEREO           2ul

//  Name:     System.Audio.Compression -- PKEY_Audio_Compression
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_AudioSummaryInformation) 64440490-4C8B-11D1-8B70-080036B11A03, 10 (PIDASI_COMPRESSION)
//
//  
DEFINE_PROPERTYKEY(PKEY_Audio_Compression, 0x64440490, 0x4C8B, 0x11D1, 0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03, 10);

//  Name:     System.Audio.EncodingBitrate -- PKEY_Audio_EncodingBitrate
//  Type:     UInt32 -- VT_UI4
//  FormatID: (FMTID_AudioSummaryInformation) 64440490-4C8B-11D1-8B70-080036B11A03, 4 (PIDASI_AVG_DATA_RATE)
//
//  Indicates the average data rate in Hz for the audio file in "bits per second".
DEFINE_PROPERTYKEY(PKEY_Audio_EncodingBitrate, 0x64440490, 0x4C8B, 0x11D1, 0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03, 4);

//  Name:     System.Audio.Format -- PKEY_Audio_Format
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)  Legacy code may treat this as VT_BSTR.
//  FormatID: (FMTID_AudioSummaryInformation) 64440490-4C8B-11D1-8B70-080036B11A03, 2 (PIDASI_FORMAT)
//
//  Indicates the format of the audio file.
DEFINE_PROPERTYKEY(PKEY_Audio_Format, 0x64440490, 0x4C8B, 0x11D1, 0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03, 2);

//  Name:     System.Audio.IsVariableBitRate -- PKEY_Audio_IsVariableBitRate
//  Type:     Boolean -- VT_BOOL
//  FormatID: E6822FEE-8C17-4D62-823C-8E9CFCBD1D5C, 100
DEFINE_PROPERTYKEY(PKEY_Audio_IsVariableBitRate, 0xE6822FEE, 0x8C17, 0x4D62, 0x82, 0x3C, 0x8E, 0x9C, 0xFC, 0xBD, 0x1D, 0x5C, 100);

//  Name:     System.Audio.PeakValue -- PKEY_Audio_PeakValue
//  Type:     UInt32 -- VT_UI4
//  FormatID: 2579E5D0-1116-4084-BD9A-9B4F7CB4DF5E, 100
DEFINE_PROPERTYKEY(PKEY_Audio_PeakValue, 0x2579E5D0, 0x1116, 0x4084, 0xBD, 0x9A, 0x9B, 0x4F, 0x7C, 0xB4, 0xDF, 0x5E, 100);

//  Name:     System.Audio.SampleRate -- PKEY_Audio_SampleRate
//  Type:     UInt32 -- VT_UI4
//  FormatID: (FMTID_AudioSummaryInformation) 64440490-4C8B-11D1-8B70-080036B11A03, 5 (PIDASI_SAMPLE_RATE)
//
//  Indicates the audio sample rate for the audio file in "samples per second".
DEFINE_PROPERTYKEY(PKEY_Audio_SampleRate, 0x64440490, 0x4C8B, 0x11D1, 0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03, 5);

//  Name:     System.Audio.SampleSize -- PKEY_Audio_SampleSize
//  Type:     UInt32 -- VT_UI4
//  FormatID: (FMTID_AudioSummaryInformation) 64440490-4C8B-11D1-8B70-080036B11A03, 6 (PIDASI_SAMPLE_SIZE)
//
//  Indicates the audio sample size for the audio file in "bits per sample".
DEFINE_PROPERTYKEY(PKEY_Audio_SampleSize, 0x64440490, 0x4C8B, 0x11D1, 0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03, 6);

//  Name:     System.Audio.StreamName -- PKEY_Audio_StreamName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_AudioSummaryInformation) 64440490-4C8B-11D1-8B70-080036B11A03, 9 (PIDASI_STREAM_NAME)
//
//  
DEFINE_PROPERTYKEY(PKEY_Audio_StreamName, 0x64440490, 0x4C8B, 0x11D1, 0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03, 9);

//  Name:     System.Audio.StreamNumber -- PKEY_Audio_StreamNumber
//  Type:     UInt16 -- VT_UI2
//  FormatID: (FMTID_AudioSummaryInformation) 64440490-4C8B-11D1-8B70-080036B11A03, 8 (PIDASI_STREAM_NUMBER)
//
//  
DEFINE_PROPERTYKEY(PKEY_Audio_StreamNumber, 0x64440490, 0x4C8B, 0x11D1, 0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03, 8);

 
 
//-----------------------------------------------------------------------------
// Calendar properties

//  Name:     System.Calendar.Duration -- PKEY_Calendar_Duration
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 293CA35A-09AA-4DD2-B180-1FE245728A52, 100
//
//  The duration as specified in a string.
DEFINE_PROPERTYKEY(PKEY_Calendar_Duration, 0x293CA35A, 0x09AA, 0x4DD2, 0xB1, 0x80, 0x1F, 0xE2, 0x45, 0x72, 0x8A, 0x52, 100);

//  Name:     System.Calendar.IsOnline -- PKEY_Calendar_IsOnline
//  Type:     Boolean -- VT_BOOL
//  FormatID: BFEE9149-E3E2-49A7-A862-C05988145CEC, 100
//
//  Identifies if the event is an online event.
DEFINE_PROPERTYKEY(PKEY_Calendar_IsOnline, 0xBFEE9149, 0xE3E2, 0x49A7, 0xA8, 0x62, 0xC0, 0x59, 0x88, 0x14, 0x5C, 0xEC, 100);

//  Name:     System.Calendar.IsRecurring -- PKEY_Calendar_IsRecurring
//  Type:     Boolean -- VT_BOOL
//  FormatID: 315B9C8D-80A9-4EF9-AE16-8E746DA51D70, 100
DEFINE_PROPERTYKEY(PKEY_Calendar_IsRecurring, 0x315B9C8D, 0x80A9, 0x4EF9, 0xAE, 0x16, 0x8E, 0x74, 0x6D, 0xA5, 0x1D, 0x70, 100);

//  Name:     System.Calendar.Location -- PKEY_Calendar_Location
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: F6272D18-CECC-40B1-B26A-3911717AA7BD, 100
DEFINE_PROPERTYKEY(PKEY_Calendar_Location, 0xF6272D18, 0xCECC, 0x40B1, 0xB2, 0x6A, 0x39, 0x11, 0x71, 0x7A, 0xA7, 0xBD, 100);

//  Name:     System.Calendar.OptionalAttendeeAddresses -- PKEY_Calendar_OptionalAttendeeAddresses
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: D55BAE5A-3892-417A-A649-C6AC5AAAEAB3, 100
DEFINE_PROPERTYKEY(PKEY_Calendar_OptionalAttendeeAddresses, 0xD55BAE5A, 0x3892, 0x417A, 0xA6, 0x49, 0xC6, 0xAC, 0x5A, 0xAA, 0xEA, 0xB3, 100);

//  Name:     System.Calendar.OptionalAttendeeNames -- PKEY_Calendar_OptionalAttendeeNames
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: 09429607-582D-437F-84C3-DE93A2B24C3C, 100
DEFINE_PROPERTYKEY(PKEY_Calendar_OptionalAttendeeNames, 0x09429607, 0x582D, 0x437F, 0x84, 0xC3, 0xDE, 0x93, 0xA2, 0xB2, 0x4C, 0x3C, 100);

//  Name:     System.Calendar.OrganizerAddress -- PKEY_Calendar_OrganizerAddress
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 744C8242-4DF5-456C-AB9E-014EFB9021E3, 100
//
//  Address of the organizer organizing the event.
DEFINE_PROPERTYKEY(PKEY_Calendar_OrganizerAddress, 0x744C8242, 0x4DF5, 0x456C, 0xAB, 0x9E, 0x01, 0x4E, 0xFB, 0x90, 0x21, 0xE3, 100);

//  Name:     System.Calendar.OrganizerName -- PKEY_Calendar_OrganizerName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: AAA660F9-9865-458E-B484-01BC7FE3973E, 100
//
//  Name of the organizer organizing the event.
DEFINE_PROPERTYKEY(PKEY_Calendar_OrganizerName, 0xAAA660F9, 0x9865, 0x458E, 0xB4, 0x84, 0x01, 0xBC, 0x7F, 0xE3, 0x97, 0x3E, 100);

//  Name:     System.Calendar.ReminderTime -- PKEY_Calendar_ReminderTime
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: 72FC5BA4-24F9-4011-9F3F-ADD27AFAD818, 100
DEFINE_PROPERTYKEY(PKEY_Calendar_ReminderTime, 0x72FC5BA4, 0x24F9, 0x4011, 0x9F, 0x3F, 0xAD, 0xD2, 0x7A, 0xFA, 0xD8, 0x18, 100);

//  Name:     System.Calendar.RequiredAttendeeAddresses -- PKEY_Calendar_RequiredAttendeeAddresses
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: 0BA7D6C3-568D-4159-AB91-781A91FB71E5, 100
DEFINE_PROPERTYKEY(PKEY_Calendar_RequiredAttendeeAddresses, 0x0BA7D6C3, 0x568D, 0x4159, 0xAB, 0x91, 0x78, 0x1A, 0x91, 0xFB, 0x71, 0xE5, 100);

//  Name:     System.Calendar.RequiredAttendeeNames -- PKEY_Calendar_RequiredAttendeeNames
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: B33AF30B-F552-4584-936C-CB93E5CDA29F, 100
DEFINE_PROPERTYKEY(PKEY_Calendar_RequiredAttendeeNames, 0xB33AF30B, 0xF552, 0x4584, 0x93, 0x6C, 0xCB, 0x93, 0xE5, 0xCD, 0xA2, 0x9F, 100);

//  Name:     System.Calendar.Resources -- PKEY_Calendar_Resources
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: 00F58A38-C54B-4C40-8696-97235980EAE1, 100
DEFINE_PROPERTYKEY(PKEY_Calendar_Resources, 0x00F58A38, 0xC54B, 0x4C40, 0x86, 0x96, 0x97, 0x23, 0x59, 0x80, 0xEA, 0xE1, 100);

//  Name:     System.Calendar.ShowTimeAs -- PKEY_Calendar_ShowTimeAs
//  Type:     UInt16 -- VT_UI2
//  FormatID: 5BF396D4-5EB2-466F-BDE9-2FB3F2361D6E, 100
//
//  
DEFINE_PROPERTYKEY(PKEY_Calendar_ShowTimeAs, 0x5BF396D4, 0x5EB2, 0x466F, 0xBD, 0xE9, 0x2F, 0xB3, 0xF2, 0x36, 0x1D, 0x6E, 100);

// Possible discrete values for PKEY_Calendar_ShowTimeAs are:
#define CALENDAR_SHOWTIMEAS_FREE            0u
#define CALENDAR_SHOWTIMEAS_TENTATIVE       1u
#define CALENDAR_SHOWTIMEAS_BUSY            2u
#define CALENDAR_SHOWTIMEAS_OOF             3u

//  Name:     System.Calendar.ShowTimeAsText -- PKEY_Calendar_ShowTimeAsText
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 53DA57CF-62C0-45C4-81DE-7610BCEFD7F5, 100
//  
//  This is the user-friendly form of System.Calendar.ShowTimeAs.  Not intended to be parsed 
//  programmatically.
DEFINE_PROPERTYKEY(PKEY_Calendar_ShowTimeAsText, 0x53DA57CF, 0x62C0, 0x45C4, 0x81, 0xDE, 0x76, 0x10, 0xBC, 0xEF, 0xD7, 0xF5, 100);
 
//-----------------------------------------------------------------------------
// Communication properties



//  Name:     System.Communication.AccountName -- PKEY_Communication_AccountName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD, 9
//
//  Account Name
DEFINE_PROPERTYKEY(PKEY_Communication_AccountName, 0xE3E0584C, 0xB788, 0x4A5A, 0xBB, 0x20, 0x7F, 0x5A, 0x44, 0xC9, 0xAC, 0xDD, 9);

//  Name:     System.Communication.Suffix -- PKEY_Communication_Suffix
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 807B653A-9E91-43EF-8F97-11CE04EE20C5, 100
DEFINE_PROPERTYKEY(PKEY_Communication_Suffix, 0x807B653A, 0x9E91, 0x43EF, 0x8F, 0x97, 0x11, 0xCE, 0x04, 0xEE, 0x20, 0xC5, 100);

//  Name:     System.Communication.TaskStatus -- PKEY_Communication_TaskStatus
//  Type:     UInt16 -- VT_UI2
//  FormatID: BE1A72C6-9A1D-46B7-AFE7-AFAF8CEF4999, 100
DEFINE_PROPERTYKEY(PKEY_Communication_TaskStatus, 0xBE1A72C6, 0x9A1D, 0x46B7, 0xAF, 0xE7, 0xAF, 0xAF, 0x8C, 0xEF, 0x49, 0x99, 100);

// Possible discrete values for PKEY_Communication_TaskStatus are:
#define TASKSTATUS_NOTSTARTED               0u
#define TASKSTATUS_INPROGRESS               1u
#define TASKSTATUS_COMPLETE                 2u
#define TASKSTATUS_WAITING                  3u
#define TASKSTATUS_DEFERRED                 4u

//  Name:     System.Communication.TaskStatusText -- PKEY_Communication_TaskStatusText
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: A6744477-C237-475B-A075-54F34498292A, 100
//  
//  This is the user-friendly form of System.Communication.TaskStatus.  Not intended to be parsed 
//  programmatically.
DEFINE_PROPERTYKEY(PKEY_Communication_TaskStatusText, 0xA6744477, 0xC237, 0x475B, 0xA0, 0x75, 0x54, 0xF3, 0x44, 0x98, 0x29, 0x2A, 100);
 
//-----------------------------------------------------------------------------
// Computer properties



//  Name:     System.Computer.DecoratedFreeSpace -- PKEY_Computer_DecoratedFreeSpace
//  Type:     Multivalue UInt64 -- VT_VECTOR | VT_UI8  (For variants: VT_ARRAY | VT_UI8)
//  FormatID: (FMTID_Volume) 9B174B35-40FF-11D2-A27E-00C04FC30871, 7  (Filesystem Volume Properties)
//
//  Free space and total space: "%s free of %s"
DEFINE_PROPERTYKEY(PKEY_Computer_DecoratedFreeSpace, 0x9B174B35, 0x40FF, 0x11D2, 0xA2, 0x7E, 0x00, 0xC0, 0x4F, 0xC3, 0x08, 0x71, 7);
 
//-----------------------------------------------------------------------------
// Contact properties



//  Name:     System.Contact.Anniversary -- PKEY_Contact_Anniversary
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: 9AD5BADB-CEA7-4470-A03D-B84E51B9949E, 100
DEFINE_PROPERTYKEY(PKEY_Contact_Anniversary, 0x9AD5BADB, 0xCEA7, 0x4470, 0xA0, 0x3D, 0xB8, 0x4E, 0x51, 0xB9, 0x94, 0x9E, 100);

//  Name:     System.Contact.AssistantName -- PKEY_Contact_AssistantName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: CD102C9C-5540-4A88-A6F6-64E4981C8CD1, 100
DEFINE_PROPERTYKEY(PKEY_Contact_AssistantName, 0xCD102C9C, 0x5540, 0x4A88, 0xA6, 0xF6, 0x64, 0xE4, 0x98, 0x1C, 0x8C, 0xD1, 100);

//  Name:     System.Contact.AssistantTelephone -- PKEY_Contact_AssistantTelephone
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 9A93244D-A7AD-4FF8-9B99-45EE4CC09AF6, 100
DEFINE_PROPERTYKEY(PKEY_Contact_AssistantTelephone, 0x9A93244D, 0xA7AD, 0x4FF8, 0x9B, 0x99, 0x45, 0xEE, 0x4C, 0xC0, 0x9A, 0xF6, 100);

//  Name:     System.Contact.Birthday -- PKEY_Contact_Birthday
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: 176DC63C-2688-4E89-8143-A347800F25E9, 47
DEFINE_PROPERTYKEY(PKEY_Contact_Birthday, 0x176DC63C, 0x2688, 0x4E89, 0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9, 47);

//  Name:     System.Contact.BusinessAddress -- PKEY_Contact_BusinessAddress
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 730FB6DD-CF7C-426B-A03F-BD166CC9EE24, 100
DEFINE_PROPERTYKEY(PKEY_Contact_BusinessAddress, 0x730FB6DD, 0xCF7C, 0x426B, 0xA0, 0x3F, 0xBD, 0x16, 0x6C, 0xC9, 0xEE, 0x24, 100);

//  Name:     System.Contact.BusinessAddressCity -- PKEY_Contact_BusinessAddressCity
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 402B5934-EC5A-48C3-93E6-85E86A2D934E, 100
DEFINE_PROPERTYKEY(PKEY_Contact_BusinessAddressCity, 0x402B5934, 0xEC5A, 0x48C3, 0x93, 0xE6, 0x85, 0xE8, 0x6A, 0x2D, 0x93, 0x4E, 100);

//  Name:     System.Contact.BusinessAddressCountry -- PKEY_Contact_BusinessAddressCountry
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: B0B87314-FCF6-4FEB-8DFF-A50DA6AF561C, 100
DEFINE_PROPERTYKEY(PKEY_Contact_BusinessAddressCountry, 0xB0B87314, 0xFCF6, 0x4FEB, 0x8D, 0xFF, 0xA5, 0x0D, 0xA6, 0xAF, 0x56, 0x1C, 100);

//  Name:     System.Contact.BusinessAddressPostalCode -- PKEY_Contact_BusinessAddressPostalCode
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: E1D4A09E-D758-4CD1-B6EC-34A8B5A73F80, 100
DEFINE_PROPERTYKEY(PKEY_Contact_BusinessAddressPostalCode, 0xE1D4A09E, 0xD758, 0x4CD1, 0xB6, 0xEC, 0x34, 0xA8, 0xB5, 0xA7, 0x3F, 0x80, 100);

//  Name:     System.Contact.BusinessAddressPostOfficeBox -- PKEY_Contact_BusinessAddressPostOfficeBox
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: BC4E71CE-17F9-48D5-BEE9-021DF0EA5409, 100
DEFINE_PROPERTYKEY(PKEY_Contact_BusinessAddressPostOfficeBox, 0xBC4E71CE, 0x17F9, 0x48D5, 0xBE, 0xE9, 0x02, 0x1D, 0xF0, 0xEA, 0x54, 0x09, 100);

//  Name:     System.Contact.BusinessAddressState -- PKEY_Contact_BusinessAddressState
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 446F787F-10C4-41CB-A6C4-4D0343551597, 100
DEFINE_PROPERTYKEY(PKEY_Contact_BusinessAddressState, 0x446F787F, 0x10C4, 0x41CB, 0xA6, 0xC4, 0x4D, 0x03, 0x43, 0x55, 0x15, 0x97, 100);

//  Name:     System.Contact.BusinessAddressStreet -- PKEY_Contact_BusinessAddressStreet
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: DDD1460F-C0BF-4553-8CE4-10433C908FB0, 100
DEFINE_PROPERTYKEY(PKEY_Contact_BusinessAddressStreet, 0xDDD1460F, 0xC0BF, 0x4553, 0x8C, 0xE4, 0x10, 0x43, 0x3C, 0x90, 0x8F, 0xB0, 100);

//  Name:     System.Contact.BusinessFaxNumber -- PKEY_Contact_BusinessFaxNumber
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 91EFF6F3-2E27-42CA-933E-7C999FBE310B, 100
//
//  Business fax number of the contact.
DEFINE_PROPERTYKEY(PKEY_Contact_BusinessFaxNumber, 0x91EFF6F3, 0x2E27, 0x42CA, 0x93, 0x3E, 0x7C, 0x99, 0x9F, 0xBE, 0x31, 0x0B, 100);

//  Name:     System.Contact.BusinessHomePage -- PKEY_Contact_BusinessHomePage
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 56310920-2491-4919-99CE-EADB06FAFDB2, 100
DEFINE_PROPERTYKEY(PKEY_Contact_BusinessHomePage, 0x56310920, 0x2491, 0x4919, 0x99, 0xCE, 0xEA, 0xDB, 0x06, 0xFA, 0xFD, 0xB2, 100);

//  Name:     System.Contact.BusinessTelephone -- PKEY_Contact_BusinessTelephone
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 6A15E5A0-0A1E-4CD7-BB8C-D2F1B0C929BC, 100
DEFINE_PROPERTYKEY(PKEY_Contact_BusinessTelephone, 0x6A15E5A0, 0x0A1E, 0x4CD7, 0xBB, 0x8C, 0xD2, 0xF1, 0xB0, 0xC9, 0x29, 0xBC, 100);

//  Name:     System.Contact.CallbackTelephone -- PKEY_Contact_CallbackTelephone
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: BF53D1C3-49E0-4F7F-8567-5A821D8AC542, 100
DEFINE_PROPERTYKEY(PKEY_Contact_CallbackTelephone, 0xBF53D1C3, 0x49E0, 0x4F7F, 0x85, 0x67, 0x5A, 0x82, 0x1D, 0x8A, 0xC5, 0x42, 100);

//  Name:     System.Contact.CarTelephone -- PKEY_Contact_CarTelephone
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 8FDC6DEA-B929-412B-BA90-397A257465FE, 100
DEFINE_PROPERTYKEY(PKEY_Contact_CarTelephone, 0x8FDC6DEA, 0xB929, 0x412B, 0xBA, 0x90, 0x39, 0x7A, 0x25, 0x74, 0x65, 0xFE, 100);

//  Name:     System.Contact.Children -- PKEY_Contact_Children
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: D4729704-8EF1-43EF-9024-2BD381187FD5, 100
DEFINE_PROPERTYKEY(PKEY_Contact_Children, 0xD4729704, 0x8EF1, 0x43EF, 0x90, 0x24, 0x2B, 0xD3, 0x81, 0x18, 0x7F, 0xD5, 100);

//  Name:     System.Contact.CompanyMainTelephone -- PKEY_Contact_CompanyMainTelephone
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 8589E481-6040-473D-B171-7FA89C2708ED, 100
DEFINE_PROPERTYKEY(PKEY_Contact_CompanyMainTelephone, 0x8589E481, 0x6040, 0x473D, 0xB1, 0x71, 0x7F, 0xA8, 0x9C, 0x27, 0x08, 0xED, 100);

//  Name:     System.Contact.Department -- PKEY_Contact_Department
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: FC9F7306-FF8F-4D49-9FB6-3FFE5C0951EC, 100
DEFINE_PROPERTYKEY(PKEY_Contact_Department, 0xFC9F7306, 0xFF8F, 0x4D49, 0x9F, 0xB6, 0x3F, 0xFE, 0x5C, 0x09, 0x51, 0xEC, 100);

//  Name:     System.Contact.EmailAddress -- PKEY_Contact_EmailAddress
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: F8FA7FA3-D12B-4785-8A4E-691A94F7A3E7, 100
DEFINE_PROPERTYKEY(PKEY_Contact_EmailAddress, 0xF8FA7FA3, 0xD12B, 0x4785, 0x8A, 0x4E, 0x69, 0x1A, 0x94, 0xF7, 0xA3, 0xE7, 100);

//  Name:     System.Contact.EmailAddress2 -- PKEY_Contact_EmailAddress2
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 38965063-EDC8-4268-8491-B7723172CF29, 100
DEFINE_PROPERTYKEY(PKEY_Contact_EmailAddress2, 0x38965063, 0xEDC8, 0x4268, 0x84, 0x91, 0xB7, 0x72, 0x31, 0x72, 0xCF, 0x29, 100);

//  Name:     System.Contact.EmailAddress3 -- PKEY_Contact_EmailAddress3
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 644D37B4-E1B3-4BAD-B099-7E7C04966ACA, 100
DEFINE_PROPERTYKEY(PKEY_Contact_EmailAddress3, 0x644D37B4, 0xE1B3, 0x4BAD, 0xB0, 0x99, 0x7E, 0x7C, 0x04, 0x96, 0x6A, 0xCA, 100);

//  Name:     System.Contact.EmailAddresses -- PKEY_Contact_EmailAddresses
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: 84D8F337-981D-44B3-9615-C7596DBA17E3, 100
DEFINE_PROPERTYKEY(PKEY_Contact_EmailAddresses, 0x84D8F337, 0x981D, 0x44B3, 0x96, 0x15, 0xC7, 0x59, 0x6D, 0xBA, 0x17, 0xE3, 100);

//  Name:     System.Contact.EmailName -- PKEY_Contact_EmailName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: CC6F4F24-6083-4BD4-8754-674D0DE87AB8, 100
DEFINE_PROPERTYKEY(PKEY_Contact_EmailName, 0xCC6F4F24, 0x6083, 0x4BD4, 0x87, 0x54, 0x67, 0x4D, 0x0D, 0xE8, 0x7A, 0xB8, 100);

//  Name:     System.Contact.FileAsName -- PKEY_Contact_FileAsName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: F1A24AA7-9CA7-40F6-89EC-97DEF9FFE8DB, 100
DEFINE_PROPERTYKEY(PKEY_Contact_FileAsName, 0xF1A24AA7, 0x9CA7, 0x40F6, 0x89, 0xEC, 0x97, 0xDE, 0xF9, 0xFF, 0xE8, 0xDB, 100);

//  Name:     System.Contact.FirstName -- PKEY_Contact_FirstName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 14977844-6B49-4AAD-A714-A4513BF60460, 100
DEFINE_PROPERTYKEY(PKEY_Contact_FirstName, 0x14977844, 0x6B49, 0x4AAD, 0xA7, 0x14, 0xA4, 0x51, 0x3B, 0xF6, 0x04, 0x60, 100);

//  Name:     System.Contact.FullName -- PKEY_Contact_FullName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 635E9051-50A5-4BA2-B9DB-4ED056C77296, 100
DEFINE_PROPERTYKEY(PKEY_Contact_FullName, 0x635E9051, 0x50A5, 0x4BA2, 0xB9, 0xDB, 0x4E, 0xD0, 0x56, 0xC7, 0x72, 0x96, 100);

//  Name:     System.Contact.Gender -- PKEY_Contact_Gender
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 3C8CEE58-D4F0-4CF9-B756-4E5D24447BCD, 100
DEFINE_PROPERTYKEY(PKEY_Contact_Gender, 0x3C8CEE58, 0xD4F0, 0x4CF9, 0xB7, 0x56, 0x4E, 0x5D, 0x24, 0x44, 0x7B, 0xCD, 100);

//  Name:     System.Contact.Hobbies -- PKEY_Contact_Hobbies
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: 5DC2253F-5E11-4ADF-9CFE-910DD01E3E70, 100
DEFINE_PROPERTYKEY(PKEY_Contact_Hobbies, 0x5DC2253F, 0x5E11, 0x4ADF, 0x9C, 0xFE, 0x91, 0x0D, 0xD0, 0x1E, 0x3E, 0x70, 100);

//  Name:     System.Contact.HomeAddress -- PKEY_Contact_HomeAddress
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 98F98354-617A-46B8-8560-5B1B64BF1F89, 100
DEFINE_PROPERTYKEY(PKEY_Contact_HomeAddress, 0x98F98354, 0x617A, 0x46B8, 0x85, 0x60, 0x5B, 0x1B, 0x64, 0xBF, 0x1F, 0x89, 100);

//  Name:     System.Contact.HomeAddressCity -- PKEY_Contact_HomeAddressCity
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 176DC63C-2688-4E89-8143-A347800F25E9, 65
DEFINE_PROPERTYKEY(PKEY_Contact_HomeAddressCity, 0x176DC63C, 0x2688, 0x4E89, 0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9, 65);

//  Name:     System.Contact.HomeAddressCountry -- PKEY_Contact_HomeAddressCountry
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 08A65AA1-F4C9-43DD-9DDF-A33D8E7EAD85, 100
DEFINE_PROPERTYKEY(PKEY_Contact_HomeAddressCountry, 0x08A65AA1, 0xF4C9, 0x43DD, 0x9D, 0xDF, 0xA3, 0x3D, 0x8E, 0x7E, 0xAD, 0x85, 100);

//  Name:     System.Contact.HomeAddressPostalCode -- PKEY_Contact_HomeAddressPostalCode
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 8AFCC170-8A46-4B53-9EEE-90BAE7151E62, 100
DEFINE_PROPERTYKEY(PKEY_Contact_HomeAddressPostalCode, 0x8AFCC170, 0x8A46, 0x4B53, 0x9E, 0xEE, 0x90, 0xBA, 0xE7, 0x15, 0x1E, 0x62, 100);

//  Name:     System.Contact.HomeAddressPostOfficeBox -- PKEY_Contact_HomeAddressPostOfficeBox
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 7B9F6399-0A3F-4B12-89BD-4ADC51C918AF, 100
DEFINE_PROPERTYKEY(PKEY_Contact_HomeAddressPostOfficeBox, 0x7B9F6399, 0x0A3F, 0x4B12, 0x89, 0xBD, 0x4A, 0xDC, 0x51, 0xC9, 0x18, 0xAF, 100);

//  Name:     System.Contact.HomeAddressState -- PKEY_Contact_HomeAddressState
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: C89A23D0-7D6D-4EB8-87D4-776A82D493E5, 100
DEFINE_PROPERTYKEY(PKEY_Contact_HomeAddressState, 0xC89A23D0, 0x7D6D, 0x4EB8, 0x87, 0xD4, 0x77, 0x6A, 0x82, 0xD4, 0x93, 0xE5, 100);

//  Name:     System.Contact.HomeAddressStreet -- PKEY_Contact_HomeAddressStreet
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 0ADEF160-DB3F-4308-9A21-06237B16FA2A, 100
DEFINE_PROPERTYKEY(PKEY_Contact_HomeAddressStreet, 0x0ADEF160, 0xDB3F, 0x4308, 0x9A, 0x21, 0x06, 0x23, 0x7B, 0x16, 0xFA, 0x2A, 100);

//  Name:     System.Contact.HomeFaxNumber -- PKEY_Contact_HomeFaxNumber
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 660E04D6-81AB-4977-A09F-82313113AB26, 100
DEFINE_PROPERTYKEY(PKEY_Contact_HomeFaxNumber, 0x660E04D6, 0x81AB, 0x4977, 0xA0, 0x9F, 0x82, 0x31, 0x31, 0x13, 0xAB, 0x26, 100);

//  Name:     System.Contact.HomeTelephone -- PKEY_Contact_HomeTelephone
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 176DC63C-2688-4E89-8143-A347800F25E9, 20
DEFINE_PROPERTYKEY(PKEY_Contact_HomeTelephone, 0x176DC63C, 0x2688, 0x4E89, 0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9, 20);

//  Name:     System.Contact.IMAddress -- PKEY_Contact_IMAddress
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: D68DBD8A-3374-4B81-9972-3EC30682DB3D, 100
DEFINE_PROPERTYKEY(PKEY_Contact_IMAddress, 0xD68DBD8A, 0x3374, 0x4B81, 0x99, 0x72, 0x3E, 0xC3, 0x06, 0x82, 0xDB, 0x3D, 100);

//  Name:     System.Contact.Initials -- PKEY_Contact_Initials
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: F3D8F40D-50CB-44A2-9718-40CB9119495D, 100
DEFINE_PROPERTYKEY(PKEY_Contact_Initials, 0xF3D8F40D, 0x50CB, 0x44A2, 0x97, 0x18, 0x40, 0xCB, 0x91, 0x19, 0x49, 0x5D, 100);

//  Name:     System.Contact.JA.CompanyNamePhonetic -- PKEY_Contact_JA_CompanyNamePhonetic
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 897B3694-FE9E-43E6-8066-260F590C0100, 2
//  
//  
DEFINE_PROPERTYKEY(PKEY_Contact_JA_CompanyNamePhonetic, 0x897B3694, 0xFE9E, 0x43E6, 0x80, 0x66, 0x26, 0x0F, 0x59, 0x0C, 0x01, 0x00, 2);

//  Name:     System.Contact.JA.FirstNamePhonetic -- PKEY_Contact_JA_FirstNamePhonetic
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 897B3694-FE9E-43E6-8066-260F590C0100, 3
//  
//  
DEFINE_PROPERTYKEY(PKEY_Contact_JA_FirstNamePhonetic, 0x897B3694, 0xFE9E, 0x43E6, 0x80, 0x66, 0x26, 0x0F, 0x59, 0x0C, 0x01, 0x00, 3);

//  Name:     System.Contact.JA.LastNamePhonetic -- PKEY_Contact_JA_LastNamePhonetic
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 897B3694-FE9E-43E6-8066-260F590C0100, 4
//  
//  
DEFINE_PROPERTYKEY(PKEY_Contact_JA_LastNamePhonetic, 0x897B3694, 0xFE9E, 0x43E6, 0x80, 0x66, 0x26, 0x0F, 0x59, 0x0C, 0x01, 0x00, 4);

//  Name:     System.Contact.JobTitle -- PKEY_Contact_JobTitle
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 176DC63C-2688-4E89-8143-A347800F25E9, 6
DEFINE_PROPERTYKEY(PKEY_Contact_JobTitle, 0x176DC63C, 0x2688, 0x4E89, 0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9, 6);

//  Name:     System.Contact.Label -- PKEY_Contact_Label
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 97B0AD89-DF49-49CC-834E-660974FD755B, 100
DEFINE_PROPERTYKEY(PKEY_Contact_Label, 0x97B0AD89, 0xDF49, 0x49CC, 0x83, 0x4E, 0x66, 0x09, 0x74, 0xFD, 0x75, 0x5B, 100);

//  Name:     System.Contact.LastName -- PKEY_Contact_LastName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 8F367200-C270-457C-B1D4-E07C5BCD90C7, 100
DEFINE_PROPERTYKEY(PKEY_Contact_LastName, 0x8F367200, 0xC270, 0x457C, 0xB1, 0xD4, 0xE0, 0x7C, 0x5B, 0xCD, 0x90, 0xC7, 100);

//  Name:     System.Contact.MailingAddress -- PKEY_Contact_MailingAddress
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: C0AC206A-827E-4650-95AE-77E2BB74FCC9, 100
DEFINE_PROPERTYKEY(PKEY_Contact_MailingAddress, 0xC0AC206A, 0x827E, 0x4650, 0x95, 0xAE, 0x77, 0xE2, 0xBB, 0x74, 0xFC, 0xC9, 100);

//  Name:     System.Contact.MiddleName -- PKEY_Contact_MiddleName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 176DC63C-2688-4E89-8143-A347800F25E9, 71
DEFINE_PROPERTYKEY(PKEY_Contact_MiddleName, 0x176DC63C, 0x2688, 0x4E89, 0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9, 71);

//  Name:     System.Contact.MobileTelephone -- PKEY_Contact_MobileTelephone
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 176DC63C-2688-4E89-8143-A347800F25E9, 35
DEFINE_PROPERTYKEY(PKEY_Contact_MobileTelephone, 0x176DC63C, 0x2688, 0x4E89, 0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9, 35);

//  Name:     System.Contact.NickName -- PKEY_Contact_NickName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 176DC63C-2688-4E89-8143-A347800F25E9, 74
DEFINE_PROPERTYKEY(PKEY_Contact_NickName, 0x176DC63C, 0x2688, 0x4E89, 0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9, 74);

//  Name:     System.Contact.OfficeLocation -- PKEY_Contact_OfficeLocation
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 176DC63C-2688-4E89-8143-A347800F25E9, 7
DEFINE_PROPERTYKEY(PKEY_Contact_OfficeLocation, 0x176DC63C, 0x2688, 0x4E89, 0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9, 7);

//  Name:     System.Contact.OtherAddress -- PKEY_Contact_OtherAddress
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 508161FA-313B-43D5-83A1-C1ACCF68622C, 100
DEFINE_PROPERTYKEY(PKEY_Contact_OtherAddress, 0x508161FA, 0x313B, 0x43D5, 0x83, 0xA1, 0xC1, 0xAC, 0xCF, 0x68, 0x62, 0x2C, 100);

//  Name:     System.Contact.OtherAddressCity -- PKEY_Contact_OtherAddressCity
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 6E682923-7F7B-4F0C-A337-CFCA296687BF, 100
DEFINE_PROPERTYKEY(PKEY_Contact_OtherAddressCity, 0x6E682923, 0x7F7B, 0x4F0C, 0xA3, 0x37, 0xCF, 0xCA, 0x29, 0x66, 0x87, 0xBF, 100);

//  Name:     System.Contact.OtherAddressCountry -- PKEY_Contact_OtherAddressCountry
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 8F167568-0AAE-4322-8ED9-6055B7B0E398, 100
DEFINE_PROPERTYKEY(PKEY_Contact_OtherAddressCountry, 0x8F167568, 0x0AAE, 0x4322, 0x8E, 0xD9, 0x60, 0x55, 0xB7, 0xB0, 0xE3, 0x98, 100);

//  Name:     System.Contact.OtherAddressPostalCode -- PKEY_Contact_OtherAddressPostalCode
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 95C656C1-2ABF-4148-9ED3-9EC602E3B7CD, 100
DEFINE_PROPERTYKEY(PKEY_Contact_OtherAddressPostalCode, 0x95C656C1, 0x2ABF, 0x4148, 0x9E, 0xD3, 0x9E, 0xC6, 0x02, 0xE3, 0xB7, 0xCD, 100);

//  Name:     System.Contact.OtherAddressPostOfficeBox -- PKEY_Contact_OtherAddressPostOfficeBox
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 8B26EA41-058F-43F6-AECC-4035681CE977, 100
DEFINE_PROPERTYKEY(PKEY_Contact_OtherAddressPostOfficeBox, 0x8B26EA41, 0x058F, 0x43F6, 0xAE, 0xCC, 0x40, 0x35, 0x68, 0x1C, 0xE9, 0x77, 100);

//  Name:     System.Contact.OtherAddressState -- PKEY_Contact_OtherAddressState
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 71B377D6-E570-425F-A170-809FAE73E54E, 100
DEFINE_PROPERTYKEY(PKEY_Contact_OtherAddressState, 0x71B377D6, 0xE570, 0x425F, 0xA1, 0x70, 0x80, 0x9F, 0xAE, 0x73, 0xE5, 0x4E, 100);

//  Name:     System.Contact.OtherAddressStreet -- PKEY_Contact_OtherAddressStreet
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: FF962609-B7D6-4999-862D-95180D529AEA, 100
DEFINE_PROPERTYKEY(PKEY_Contact_OtherAddressStreet, 0xFF962609, 0xB7D6, 0x4999, 0x86, 0x2D, 0x95, 0x18, 0x0D, 0x52, 0x9A, 0xEA, 100);

//  Name:     System.Contact.PagerTelephone -- PKEY_Contact_PagerTelephone
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: D6304E01-F8F5-4F45-8B15-D024A6296789, 100
DEFINE_PROPERTYKEY(PKEY_Contact_PagerTelephone, 0xD6304E01, 0xF8F5, 0x4F45, 0x8B, 0x15, 0xD0, 0x24, 0xA6, 0x29, 0x67, 0x89, 100);

//  Name:     System.Contact.PersonalTitle -- PKEY_Contact_PersonalTitle
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 176DC63C-2688-4E89-8143-A347800F25E9, 69
DEFINE_PROPERTYKEY(PKEY_Contact_PersonalTitle, 0x176DC63C, 0x2688, 0x4E89, 0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9, 69);

//  Name:     System.Contact.PrimaryAddressCity -- PKEY_Contact_PrimaryAddressCity
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: C8EA94F0-A9E3-4969-A94B-9C62A95324E0, 100
DEFINE_PROPERTYKEY(PKEY_Contact_PrimaryAddressCity, 0xC8EA94F0, 0xA9E3, 0x4969, 0xA9, 0x4B, 0x9C, 0x62, 0xA9, 0x53, 0x24, 0xE0, 100);

//  Name:     System.Contact.PrimaryAddressCountry -- PKEY_Contact_PrimaryAddressCountry
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: E53D799D-0F3F-466E-B2FF-74634A3CB7A4, 100
DEFINE_PROPERTYKEY(PKEY_Contact_PrimaryAddressCountry, 0xE53D799D, 0x0F3F, 0x466E, 0xB2, 0xFF, 0x74, 0x63, 0x4A, 0x3C, 0xB7, 0xA4, 100);

//  Name:     System.Contact.PrimaryAddressPostalCode -- PKEY_Contact_PrimaryAddressPostalCode
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 18BBD425-ECFD-46EF-B612-7B4A6034EDA0, 100
DEFINE_PROPERTYKEY(PKEY_Contact_PrimaryAddressPostalCode, 0x18BBD425, 0xECFD, 0x46EF, 0xB6, 0x12, 0x7B, 0x4A, 0x60, 0x34, 0xED, 0xA0, 100);

//  Name:     System.Contact.PrimaryAddressPostOfficeBox -- PKEY_Contact_PrimaryAddressPostOfficeBox
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: DE5EF3C7-46E1-484E-9999-62C5308394C1, 100
DEFINE_PROPERTYKEY(PKEY_Contact_PrimaryAddressPostOfficeBox, 0xDE5EF3C7, 0x46E1, 0x484E, 0x99, 0x99, 0x62, 0xC5, 0x30, 0x83, 0x94, 0xC1, 100);

//  Name:     System.Contact.PrimaryAddressState -- PKEY_Contact_PrimaryAddressState
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: F1176DFE-7138-4640-8B4C-AE375DC70A6D, 100
DEFINE_PROPERTYKEY(PKEY_Contact_PrimaryAddressState, 0xF1176DFE, 0x7138, 0x4640, 0x8B, 0x4C, 0xAE, 0x37, 0x5D, 0xC7, 0x0A, 0x6D, 100);

//  Name:     System.Contact.PrimaryAddressStreet -- PKEY_Contact_PrimaryAddressStreet
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 63C25B20-96BE-488F-8788-C09C407AD812, 100
DEFINE_PROPERTYKEY(PKEY_Contact_PrimaryAddressStreet, 0x63C25B20, 0x96BE, 0x488F, 0x87, 0x88, 0xC0, 0x9C, 0x40, 0x7A, 0xD8, 0x12, 100);

//  Name:     System.Contact.PrimaryEmailAddress -- PKEY_Contact_PrimaryEmailAddress
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 176DC63C-2688-4E89-8143-A347800F25E9, 48
DEFINE_PROPERTYKEY(PKEY_Contact_PrimaryEmailAddress, 0x176DC63C, 0x2688, 0x4E89, 0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9, 48);

//  Name:     System.Contact.PrimaryTelephone -- PKEY_Contact_PrimaryTelephone
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 176DC63C-2688-4E89-8143-A347800F25E9, 25
DEFINE_PROPERTYKEY(PKEY_Contact_PrimaryTelephone, 0x176DC63C, 0x2688, 0x4E89, 0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9, 25);

//  Name:     System.Contact.Profession -- PKEY_Contact_Profession
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 7268AF55-1CE4-4F6E-A41F-B6E4EF10E4A9, 100
DEFINE_PROPERTYKEY(PKEY_Contact_Profession, 0x7268AF55, 0x1CE4, 0x4F6E, 0xA4, 0x1F, 0xB6, 0xE4, 0xEF, 0x10, 0xE4, 0xA9, 100);

//  Name:     System.Contact.SpouseName -- PKEY_Contact_SpouseName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 9D2408B6-3167-422B-82B0-F583B7A7CFE3, 100
DEFINE_PROPERTYKEY(PKEY_Contact_SpouseName, 0x9D2408B6, 0x3167, 0x422B, 0x82, 0xB0, 0xF5, 0x83, 0xB7, 0xA7, 0xCF, 0xE3, 100);

//  Name:     System.Contact.Suffix -- PKEY_Contact_Suffix
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 176DC63C-2688-4E89-8143-A347800F25E9, 73
DEFINE_PROPERTYKEY(PKEY_Contact_Suffix, 0x176DC63C, 0x2688, 0x4E89, 0x81, 0x43, 0xA3, 0x47, 0x80, 0x0F, 0x25, 0xE9, 73);

//  Name:     System.Contact.TelexNumber -- PKEY_Contact_TelexNumber
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: C554493C-C1F7-40C1-A76C-EF8C0614003E, 100
DEFINE_PROPERTYKEY(PKEY_Contact_TelexNumber, 0xC554493C, 0xC1F7, 0x40C1, 0xA7, 0x6C, 0xEF, 0x8C, 0x06, 0x14, 0x00, 0x3E, 100);

//  Name:     System.Contact.TTYTDDTelephone -- PKEY_Contact_TTYTDDTelephone
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: AAF16BAC-2B55-45E6-9F6D-415EB94910DF, 100
DEFINE_PROPERTYKEY(PKEY_Contact_TTYTDDTelephone, 0xAAF16BAC, 0x2B55, 0x45E6, 0x9F, 0x6D, 0x41, 0x5E, 0xB9, 0x49, 0x10, 0xDF, 100);

//  Name:     System.Contact.WebPage -- PKEY_Contact_WebPage
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD, 18
DEFINE_PROPERTYKEY(PKEY_Contact_WebPage, 0xE3E0584C, 0xB788, 0x4A5A, 0xBB, 0x20, 0x7F, 0x5A, 0x44, 0xC9, 0xAC, 0xDD, 18);
 
//-----------------------------------------------------------------------------
// Core properties



//  Name:     System.AcquisitionID -- PKEY_AcquisitionID
//  Type:     Int32 -- VT_I4
//  FormatID: 65A98875-3C80-40AB-ABBC-EFDAF77DBEE2, 100
//
//  Hash to determine acquisition session.
DEFINE_PROPERTYKEY(PKEY_AcquisitionID, 0x65A98875, 0x3C80, 0x40AB, 0xAB, 0xBC, 0xEF, 0xDA, 0xF7, 0x7D, 0xBE, 0xE2, 100);

//  Name:     System.ApplicationName -- PKEY_ApplicationName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)  Legacy code may treat this as VT_LPSTR.
//  FormatID: (FMTID_SummaryInformation) F29F85E0-4FF9-1068-AB91-08002B27B3D9, 18 (PIDSI_APPNAME)
//
//  
DEFINE_PROPERTYKEY(PKEY_ApplicationName, 0xF29F85E0, 0x4FF9, 0x1068, 0xAB, 0x91, 0x08, 0x00, 0x2B, 0x27, 0xB3, 0xD9, 18);

//  Name:     System.Author -- PKEY_Author
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)  Legacy code may treat this as VT_LPSTR.
//  FormatID: (FMTID_SummaryInformation) F29F85E0-4FF9-1068-AB91-08002B27B3D9, 4 (PIDSI_AUTHOR)
//
//  
DEFINE_PROPERTYKEY(PKEY_Author, 0xF29F85E0, 0x4FF9, 0x1068, 0xAB, 0x91, 0x08, 0x00, 0x2B, 0x27, 0xB3, 0xD9, 4);

//  Name:     System.Capacity -- PKEY_Capacity
//  Type:     UInt64 -- VT_UI8
//  FormatID: (FMTID_Volume) 9B174B35-40FF-11D2-A27E-00C04FC30871, 3 (PID_VOLUME_CAPACITY)  (Filesystem Volume Properties)
//
//  The amount of total space in bytes.
DEFINE_PROPERTYKEY(PKEY_Capacity, 0x9B174B35, 0x40FF, 0x11D2, 0xA2, 0x7E, 0x00, 0xC0, 0x4F, 0xC3, 0x08, 0x71, 3);

//  Name:     System.Category -- PKEY_Category
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: (FMTID_DocumentSummaryInformation) D5CDD502-2E9C-101B-9397-08002B2CF9AE, 2 (PIDDSI_CATEGORY)
//
//  Legacy code treats this as VT_LPSTR.
DEFINE_PROPERTYKEY(PKEY_Category, 0xD5CDD502, 0x2E9C, 0x101B, 0x93, 0x97, 0x08, 0x00, 0x2B, 0x2C, 0xF9, 0xAE, 2);

//  Name:     System.Comment -- PKEY_Comment
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)  Legacy code may treat this as VT_LPSTR.
//  FormatID: (FMTID_SummaryInformation) F29F85E0-4FF9-1068-AB91-08002B27B3D9, 6 (PIDSI_COMMENTS)
//
//  Comments.
DEFINE_PROPERTYKEY(PKEY_Comment, 0xF29F85E0, 0x4FF9, 0x1068, 0xAB, 0x91, 0x08, 0x00, 0x2B, 0x27, 0xB3, 0xD9, 6);

//  Name:     System.Company -- PKEY_Company
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_DocumentSummaryInformation) D5CDD502-2E9C-101B-9397-08002B2CF9AE, 15 (PIDDSI_COMPANY)
//
//  The company or publisher.
DEFINE_PROPERTYKEY(PKEY_Company, 0xD5CDD502, 0x2E9C, 0x101B, 0x93, 0x97, 0x08, 0x00, 0x2B, 0x2C, 0xF9, 0xAE, 15);

//  Name:     System.ComputerName -- PKEY_ComputerName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_ShellDetails) 28636AA6-953D-11D2-B5D6-00C04FD918D0, 5 (PID_COMPUTERNAME)
//
//  
DEFINE_PROPERTYKEY(PKEY_ComputerName, 0x28636AA6, 0x953D, 0x11D2, 0xB5, 0xD6, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0, 5);

//  Name:     System.ContainedItems -- PKEY_ContainedItems
//  Type:     Multivalue Guid -- VT_VECTOR | VT_CLSID  (For variants: VT_ARRAY | VT_CLSID)
//  FormatID: (FMTID_ShellDetails) 28636AA6-953D-11D2-B5D6-00C04FD918D0, 29
//  
//  The list of type of items, this item contains. For example, this item contains urls, attachments etc.
//  This is represented as a vector array of GUIDs where each GUID represents certain type.
DEFINE_PROPERTYKEY(PKEY_ContainedItems, 0x28636AA6, 0x953D, 0x11D2, 0xB5, 0xD6, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0, 29);

//  Name:     System.ContentStatus -- PKEY_ContentStatus
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_DocumentSummaryInformation) D5CDD502-2E9C-101B-9397-08002B2CF9AE, 27
DEFINE_PROPERTYKEY(PKEY_ContentStatus, 0xD5CDD502, 0x2E9C, 0x101B, 0x93, 0x97, 0x08, 0x00, 0x2B, 0x2C, 0xF9, 0xAE, 27);

//  Name:     System.ContentType -- PKEY_ContentType
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_DocumentSummaryInformation) D5CDD502-2E9C-101B-9397-08002B2CF9AE, 26
DEFINE_PROPERTYKEY(PKEY_ContentType, 0xD5CDD502, 0x2E9C, 0x101B, 0x93, 0x97, 0x08, 0x00, 0x2B, 0x2C, 0xF9, 0xAE, 26);

//  Name:     System.Copyright -- PKEY_Copyright
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (PSGUID_MEDIAFILESUMMARYINFORMATION) 64440492-4C8B-11D1-8B70-080036B11A03, 11 (PIDMSI_COPYRIGHT)
//
//  
DEFINE_PROPERTYKEY(PKEY_Copyright, 0x64440492, 0x4C8B, 0x11D1, 0x8B, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03, 11);

//  Name:     System.DateAccessed -- PKEY_DateAccessed
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: (FMTID_Storage) B725F130-47EF-101A-A5F1-02608C9EEBAC, 16 (PID_STG_ACCESSTIME)
//
//  The time of the last access to the item.  The Indexing Service friendly name is 'access'.
DEFINE_PROPERTYKEY(PKEY_DateAccessed, 0xB725F130, 0x47EF, 0x101A, 0xA5, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC, 16);

//  Name:     System.DateAcquired -- PKEY_DateAcquired
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: 2CBAA8F5-D81F-47CA-B17A-F8D822300131, 100
//  
//  The time the file entered the system via acquisition.  This is not the same as System.DateImported.
//  Examples are when pictures are acquired from a camera, or when music is purchased online.
DEFINE_PROPERTYKEY(PKEY_DateAcquired, 0x2CBAA8F5, 0xD81F, 0x47CA, 0xB1, 0x7A, 0xF8, 0xD8, 0x22, 0x30, 0x01, 0x31, 100);

//  Name:     System.DateArchived -- PKEY_DateArchived
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: 43F8D7B7-A444-4F87-9383-52271C9B915C, 100
DEFINE_PROPERTYKEY(PKEY_DateArchived, 0x43F8D7B7, 0xA444, 0x4F87, 0x93, 0x83, 0x52, 0x27, 0x1C, 0x9B, 0x91, 0x5C, 100);

//  Name:     System.DateCompleted -- PKEY_DateCompleted
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: 72FAB781-ACDA-43E5-B155-B2434F85E678, 100
DEFINE_PROPERTYKEY(PKEY_DateCompleted, 0x72FAB781, 0xACDA, 0x43E5, 0xB1, 0x55, 0xB2, 0x43, 0x4F, 0x85, 0xE6, 0x78, 100);

//  Name:     System.DateCreated -- PKEY_DateCreated
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: (FMTID_Storage) B725F130-47EF-101A-A5F1-02608C9EEBAC, 15 (PID_STG_CREATETIME)
//
//  The date and time the item was created. The Indexing Service friendly name is 'create'.
DEFINE_PROPERTYKEY(PKEY_DateCreated, 0xB725F130, 0x47EF, 0x101A, 0xA5, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC, 15);

//  Name:     System.DateImported -- PKEY_DateImported
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: (FMTID_ImageProperties) 14B81DA1-0135-4D31-96D9-6CBFC9671A99, 18258
//
//  The time the file is imported into a separate database.  This is not the same as System.DateAcquired.  (Eg, 2003:05:22 13:55:04)
DEFINE_PROPERTYKEY(PKEY_DateImported, 0x14B81DA1, 0x0135, 0x4D31, 0x96, 0xD9, 0x6C, 0xBF, 0xC9, 0x67, 0x1A, 0x99, 18258);

//  Name:     System.DateModified -- PKEY_DateModified
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: (FMTID_Storage) B725F130-47EF-101A-A5F1-02608C9EEBAC, 14 (PID_STG_WRITETIME)
//
//  The date and time of the last write to the item. The Indexing Service friendly name is 'write'.
DEFINE_PROPERTYKEY(PKEY_DateModified, 0xB725F130, 0x47EF, 0x101A, 0xA5, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC, 14);

//  Name:     System.DueDate -- PKEY_DueDate
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: 3F8472B5-E0AF-4DB2-8071-C53FE76AE7CE, 100
DEFINE_PROPERTYKEY(PKEY_DueDate, 0x3F8472B5, 0xE0AF, 0x4DB2, 0x80, 0x71, 0xC5, 0x3F, 0xE7, 0x6A, 0xE7, 0xCE, 100);

//  Name:     System.EndDate -- PKEY_EndDate
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: C75FAA05-96FD-49E7-9CB4-9F601082D553, 100
DEFINE_PROPERTYKEY(PKEY_EndDate, 0xC75FAA05, 0x96FD, 0x49E7, 0x9C, 0xB4, 0x9F, 0x60, 0x10, 0x82, 0xD5, 0x53, 100);

//  Name:     System.FileAllocationSize -- PKEY_FileAllocationSize
//  Type:     UInt64 -- VT_UI8
//  FormatID: (FMTID_Storage) B725F130-47EF-101A-A5F1-02608C9EEBAC, 18 (PID_STG_ALLOCSIZE)
//
//  
DEFINE_PROPERTYKEY(PKEY_FileAllocationSize, 0xB725F130, 0x47EF, 0x101A, 0xA5, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC, 18);

//  Name:     System.FileAttributes -- PKEY_FileAttributes
//  Type:     UInt32 -- VT_UI4
//  FormatID: (FMTID_Storage) B725F130-47EF-101A-A5F1-02608C9EEBAC, 13 (PID_STG_ATTRIBUTES)
//  
//  This is the WIN32_FIND_DATA dwFileAttributes for the file-based item.
DEFINE_PROPERTYKEY(PKEY_FileAttributes, 0xB725F130, 0x47EF, 0x101A, 0xA5, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC, 13);

//  Name:     System.FileCount -- PKEY_FileCount
//  Type:     UInt64 -- VT_UI8
//  FormatID: (FMTID_ShellDetails) 28636AA6-953D-11D2-B5D6-00C04FD918D0, 12
//
//  
DEFINE_PROPERTYKEY(PKEY_FileCount, 0x28636AA6, 0x953D, 0x11D2, 0xB5, 0xD6, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0, 12);

//  Name:     System.FileDescription -- PKEY_FileDescription
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (PSFMTID_VERSION) 0CEF7D53-FA64-11D1-A203-0000F81FEDEE, 3 (PIDVSI_FileDescription)
//  
//  This is a user-friendly description of the file.
DEFINE_PROPERTYKEY(PKEY_FileDescription, 0x0CEF7D53, 0xFA64, 0x11D1, 0xA2, 0x03, 0x00, 0x00, 0xF8, 0x1F, 0xED, 0xEE, 3);

//  Name:     System.FileExtension -- PKEY_FileExtension
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: E4F10A3C-49E6-405D-8288-A23BD4EEAA6C, 100
//  
//  This is the file extension of the file based item, including the leading period.  
//  
//  If System.FileName is VT_EMPTY, then this property should be too.  Otherwise, it should be derived
//  appropriately by the data source from System.FileName.  If System.FileName does not have a file 
//  extension, this value should be VT_EMPTY.
//  
//  To obtain the type of any item (including an item that is not a file), use System.ItemType.
//  
//  Example values:
//  
//      If the path is...                     The property value is...
//      -----------------                     ------------------------
//      "c:\foo\bar\hello.txt"                ".txt"
//      "\\server\share\mydir\goodnews.doc"   ".doc"
//      "\\server\share\numbers.xls"          ".xls"
//      "\\server\share\folder"               VT_EMPTY
//      "c:\foo\MyFolder"                     VT_EMPTY
//      [desktop]                             VT_EMPTY
DEFINE_PROPERTYKEY(PKEY_FileExtension, 0xE4F10A3C, 0x49E6, 0x405D, 0x82, 0x88, 0xA2, 0x3B, 0xD4, 0xEE, 0xAA, 0x6C, 100);

//  Name:     System.FileFRN -- PKEY_FileFRN
//  Type:     UInt64 -- VT_UI8
//  FormatID: (FMTID_Storage) B725F130-47EF-101A-A5F1-02608C9EEBAC, 21 (PID_STG_FRN)
//  
//  This is the unique file ID, also known as the File Reference Number. For a given file, this is the same value
//  as is found in the structure variable FILE_ID_BOTH_DIR_INFO.FileId, via GetFileInformationByHandleEx().
DEFINE_PROPERTYKEY(PKEY_FileFRN, 0xB725F130, 0x47EF, 0x101A, 0xA5, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC, 21);

//  Name:     System.FileName -- PKEY_FileName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 41CF5AE0-F75A-4806-BD87-59C7D9248EB9, 100
//  
//  This is the file name (including extension) of the file.
//  
//  It is possible that the item might not exist on a filesystem (ie, it may not be opened 
//  using CreateFile).  Nonetheless, if the item is represented as a file from the logical sense 
//  (and its name follows standard Win32 file-naming syntax), then the data source should emit this property.
//  
//  If an item is not a file, then the value for this property is VT_EMPTY.  See 
//  System.ItemNameDisplay.
//  
//  This has the same value as System.ParsingName for items that are provided by the Shell's file folder.
//  
//  Example values:
//  
//      If the path is...                     The property value is...
//      -----------------                     ------------------------
//      "c:\foo\bar\hello.txt"                "hello.txt"
//      "\\server\share\mydir\goodnews.doc"   "goodnews.doc"
//      "\\server\share\numbers.xls"          "numbers.xls"
//      "c:\foo\MyFolder"                     "MyFolder"
//      (email message)                       VT_EMPTY
//      (song on portable device)             "song.wma"
DEFINE_PROPERTYKEY(PKEY_FileName, 0x41CF5AE0, 0xF75A, 0x4806, 0xBD, 0x87, 0x59, 0xC7, 0xD9, 0x24, 0x8E, 0xB9, 100);

//  Name:     System.FileOwner -- PKEY_FileOwner
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_Misc) 9B174B34-40FF-11D2-A27E-00C04FC30871, 4 (PID_MISC_OWNER)
//  
//  This is the owner of the file, according to the file system.
DEFINE_PROPERTYKEY(PKEY_FileOwner, 0x9B174B34, 0x40FF, 0x11D2, 0xA2, 0x7E, 0x00, 0xC0, 0x4F, 0xC3, 0x08, 0x71, 4);

//  Name:     System.FileVersion -- PKEY_FileVersion
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (PSFMTID_VERSION) 0CEF7D53-FA64-11D1-A203-0000F81FEDEE, 4 (PIDVSI_FileVersion)
//
//  
DEFINE_PROPERTYKEY(PKEY_FileVersion, 0x0CEF7D53, 0xFA64, 0x11D1, 0xA2, 0x03, 0x00, 0x00, 0xF8, 0x1F, 0xED, 0xEE, 4);

//  Name:     System.FindData -- PKEY_FindData
//  Type:     Buffer -- VT_VECTOR | VT_UI1  (For variants: VT_ARRAY | VT_UI1)
//  FormatID: (FMTID_ShellDetails) 28636AA6-953D-11D2-B5D6-00C04FD918D0, 0 (PID_FINDDATA)
//
//  WIN32_FIND_DATAW in buffer of bytes.
DEFINE_PROPERTYKEY(PKEY_FindData, 0x28636AA6, 0x953D, 0x11D2, 0xB5, 0xD6, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0, 0);

//  Name:     System.FlagColor -- PKEY_FlagColor
//  Type:     UInt16 -- VT_UI2
//  FormatID: 67DF94DE-0CA7-4D6F-B792-053A3E4F03CF, 100
//
//  
DEFINE_PROPERTYKEY(PKEY_FlagColor, 0x67DF94DE, 0x0CA7, 0x4D6F, 0xB7, 0x92, 0x05, 0x3A, 0x3E, 0x4F, 0x03, 0xCF, 100);

// Possible discrete values for PKEY_FlagColor are:
#define FLAGCOLOR_PURPLE                    1u
#define FLAGCOLOR_ORANGE                    2u
#define FLAGCOLOR_GREEN                     3u
#define FLAGCOLOR_YELLOW                    4u
#define FLAGCOLOR_BLUE                      5u
#define FLAGCOLOR_RED                       6u

//  Name:     System.FlagColorText -- PKEY_FlagColorText
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 45EAE747-8E2A-40AE-8CBF-CA52ABA6152A, 100
//  
//  This is the user-friendly form of System.FlagColor.  Not intended to be parsed 
//  programmatically.
DEFINE_PROPERTYKEY(PKEY_FlagColorText, 0x45EAE747, 0x8E2A, 0x40AE, 0x8C, 0xBF, 0xCA, 0x52, 0xAB, 0xA6, 0x15, 0x2A, 100);

//  Name:     System.FlagStatus -- PKEY_FlagStatus
//  Type:     Int32 -- VT_I4
//  FormatID: E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD, 12
//
//  Status of Flag.  Values: (0=none 1=white 2=Red).  cdoPR_FLAG_STATUS
DEFINE_PROPERTYKEY(PKEY_FlagStatus, 0xE3E0584C, 0xB788, 0x4A5A, 0xBB, 0x20, 0x7F, 0x5A, 0x44, 0xC9, 0xAC, 0xDD, 12);

// Possible discrete values for PKEY_FlagStatus are:
#define FLAGSTATUS_NOTFLAGGED               0l
#define FLAGSTATUS_COMPLETED                1l
#define FLAGSTATUS_FOLLOWUP                 2l

//  Name:     System.FlagStatusText -- PKEY_FlagStatusText
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: DC54FD2E-189D-4871-AA01-08C2F57A4ABC, 100
//  
//  This is the user-friendly form of System.FlagStatus.  Not intended to be parsed 
//  programmatically.
DEFINE_PROPERTYKEY(PKEY_FlagStatusText, 0xDC54FD2E, 0x189D, 0x4871, 0xAA, 0x01, 0x08, 0xC2, 0xF5, 0x7A, 0x4A, 0xBC, 100);

//  Name:     System.FreeSpace -- PKEY_FreeSpace
//  Type:     UInt64 -- VT_UI8
//  FormatID: (FMTID_Volume) 9B174B35-40FF-11D2-A27E-00C04FC30871, 2 (PID_VOLUME_FREE)  (Filesystem Volume Properties)
//
//  The amount of free space in bytes.
DEFINE_PROPERTYKEY(PKEY_FreeSpace, 0x9B174B35, 0x40FF, 0x11D2, 0xA2, 0x7E, 0x00, 0xC0, 0x4F, 0xC3, 0x08, 0x71, 2);

//  Name:     System.Identity -- PKEY_Identity
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: A26F4AFC-7346-4299-BE47-EB1AE613139F, 100
DEFINE_PROPERTYKEY(PKEY_Identity, 0xA26F4AFC, 0x7346, 0x4299, 0xBE, 0x47, 0xEB, 0x1A, 0xE6, 0x13, 0x13, 0x9F, 100);

//  Name:     System.Importance -- PKEY_Importance
//  Type:     Int32 -- VT_I4
//  FormatID: E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD, 11
DEFINE_PROPERTYKEY(PKEY_Importance, 0xE3E0584C, 0xB788, 0x4A5A, 0xBB, 0x20, 0x7F, 0x5A, 0x44, 0xC9, 0xAC, 0xDD, 11);

// Possible range of values for PKEY_Importance are:
#define IMPORTANCE_LOW_MIN                  0l
#define IMPORTANCE_LOW_SET                  1l
#define IMPORTANCE_LOW_MAX                  1l

#define IMPORTANCE_NORMAL_MIN               2l
#define IMPORTANCE_NORMAL_SET               3l
#define IMPORTANCE_NORMAL_MAX               4l

#define IMPORTANCE_HIGH_MIN                 5l
#define IMPORTANCE_HIGH_SET                 5l
#define IMPORTANCE_HIGH_MAX                 5l


//  Name:     System.ImportanceText -- PKEY_ImportanceText
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: A3B29791-7713-4E1D-BB40-17DB85F01831, 100
//  
//  This is the user-friendly form of System.Importance.  Not intended to be parsed 
//  programmatically.
DEFINE_PROPERTYKEY(PKEY_ImportanceText, 0xA3B29791, 0x7713, 0x4E1D, 0xBB, 0x40, 0x17, 0xDB, 0x85, 0xF0, 0x18, 0x31, 100);

//  Name:     System.IsAttachment -- PKEY_IsAttachment
//  Type:     Boolean -- VT_BOOL
//  FormatID: F23F425C-71A1-4FA8-922F-678EA4A60408, 100
//
//  Identifies if this item is an attachment.
DEFINE_PROPERTYKEY(PKEY_IsAttachment, 0xF23F425C, 0x71A1, 0x4FA8, 0x92, 0x2F, 0x67, 0x8E, 0xA4, 0xA6, 0x04, 0x08, 100);

//  Name:     System.IsDeleted -- PKEY_IsDeleted
//  Type:     Boolean -- VT_BOOL
//  FormatID: 5CDA5FC8-33EE-4FF3-9094-AE7BD8868C4D, 100
DEFINE_PROPERTYKEY(PKEY_IsDeleted, 0x5CDA5FC8, 0x33EE, 0x4FF3, 0x90, 0x94, 0xAE, 0x7B, 0xD8, 0x86, 0x8C, 0x4D, 100);

//  Name:     System.IsFlagged -- PKEY_IsFlagged
//  Type:     Boolean -- VT_BOOL
//  FormatID: 5DA84765-E3FF-4278-86B0-A27967FBDD03, 100
DEFINE_PROPERTYKEY(PKEY_IsFlagged, 0x5DA84765, 0xE3FF, 0x4278, 0x86, 0xB0, 0xA2, 0x79, 0x67, 0xFB, 0xDD, 0x03, 100);

//  Name:     System.IsFlaggedComplete -- PKEY_IsFlaggedComplete
//  Type:     Boolean -- VT_BOOL
//  FormatID: A6F360D2-55F9-48DE-B909-620E090A647C, 100
DEFINE_PROPERTYKEY(PKEY_IsFlaggedComplete, 0xA6F360D2, 0x55F9, 0x48DE, 0xB9, 0x09, 0x62, 0x0E, 0x09, 0x0A, 0x64, 0x7C, 100);

//  Name:     System.IsIncomplete -- PKEY_IsIncomplete
//  Type:     Boolean -- VT_BOOL
//  FormatID: 346C8BD1-2E6A-4C45-89A4-61B78E8E700F, 100
//
//  Identifies if the message was not completely received for some error condition.
DEFINE_PROPERTYKEY(PKEY_IsIncomplete, 0x346C8BD1, 0x2E6A, 0x4C45, 0x89, 0xA4, 0x61, 0xB7, 0x8E, 0x8E, 0x70, 0x0F, 100);

//  Name:     System.IsRead -- PKEY_IsRead
//  Type:     Boolean -- VT_BOOL
//  FormatID: E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD, 10
//
//  Has the item been read?
DEFINE_PROPERTYKEY(PKEY_IsRead, 0xE3E0584C, 0xB788, 0x4A5A, 0xBB, 0x20, 0x7F, 0x5A, 0x44, 0xC9, 0xAC, 0xDD, 10);

//  Name:     System.IsSendToTarget -- PKEY_IsSendToTarget
//  Type:     Boolean -- VT_BOOL
//  FormatID: (FMTID_ShellDetails) 28636AA6-953D-11D2-B5D6-00C04FD918D0, 33
//
//  Provided by certain shell folders. Return TRUE if the folder is a valid Send To target.
DEFINE_PROPERTYKEY(PKEY_IsSendToTarget, 0x28636AA6, 0x953D, 0x11D2, 0xB5, 0xD6, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0, 33);

//  Name:     System.IsShared -- PKEY_IsShared
//  Type:     Boolean -- VT_BOOL
//  FormatID: EF884C5B-2BFE-41BB-AAE5-76EEDF4F9902, 100
//
//  Is this item shared?
DEFINE_PROPERTYKEY(PKEY_IsShared, 0xEF884C5B, 0x2BFE, 0x41BB, 0xAA, 0xE5, 0x76, 0xEE, 0xDF, 0x4F, 0x99, 0x02, 100);

//  Name:     System.ItemAuthors -- PKEY_ItemAuthors
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: D0A04F0A-462A-48A4-BB2F-3706E88DBD7D, 100
//  
//  This is the generic list of authors associated with an item. 
//  
//  For example, the artist name for a track is the item author.
DEFINE_PROPERTYKEY(PKEY_ItemAuthors, 0xD0A04F0A, 0x462A, 0x48A4, 0xBB, 0x2F, 0x37, 0x06, 0xE8, 0x8D, 0xBD, 0x7D, 100);

//  Name:     System.ItemDate -- PKEY_ItemDate
//  Type:     DateTime -- VT_FILETIME  (For variants: VT_DATE)
//  FormatID: F7DB74B4-4287-4103-AFBA-F1B13DCD75CF, 100
//  
//  This is the main date for an item. The date of interest. 
//  
//  For example, for photos this maps to System.Photo.DateTaken.
DEFINE_PROPERTYKEY(PKEY_ItemDate, 0xF7DB74B4, 0x4287, 0x4103, 0xAF, 0xBA, 0xF1, 0xB1, 0x3D, 0xCD, 0x75, 0xCF, 100);

//  Name:     System.ItemFolderNameDisplay -- PKEY_ItemFolderNameDisplay
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_Storage) B725F130-47EF-101A-A5F1-02608C9EEBAC, 2 (PID_STG_DIRECTORY)
//  
//  This is the user-friendly display name of the parent folder of an item.
//  
//  If System.ItemFolderPathDisplay is VT_EMPTY, then this property should be too.  Otherwise, it 
//  should be derived appropriately by the data source from System.ItemFolderPathDisplay.
//  
//  Example values:
//  
//      If the path is...                     The property value is...
//      -----------------                     ------------------------
//      "c:\foo\bar\hello.txt"                "bar"
//      "\\server\share\mydir\goodnews.doc"   "mydir"
//      "\\server\share\numbers.xls"          "share"
//      "c:\foo\MyFolder"                     "foo"
//      "/Mailbox Account/Inbox/'Re: Hello!'" "Inbox"
DEFINE_PROPERTYKEY(PKEY_ItemFolderNameDisplay, 0xB725F130, 0x47EF, 0x101A, 0xA5, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC, 2);

//  Name:     System.ItemFolderPathDisplay -- PKEY_ItemFolderPathDisplay
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD, 6
//  
//  This is the user-friendly display path of the parent folder of an item.
//  
//  If System.ItemPathDisplay is VT_EMPTY, then this property should be too.  Otherwise, it should 
//  be derived appropriately by the data source from System.ItemPathDisplay.
//  
//  Example values:
//  
//      If the path is...                     The property value is...
//      -----------------                     ------------------------
//      "c:\foo\bar\hello.txt"                "c:\foo\bar"
//      "\\server\share\mydir\goodnews.doc"   "\\server\share\mydir"
//      "\\server\share\numbers.xls"          "\\server\share"
//      "c:\foo\MyFolder"                     "c:\foo"
//      "/Mailbox Account/Inbox/'Re: Hello!'" "/Mailbox Account/Inbox"
DEFINE_PROPERTYKEY(PKEY_ItemFolderPathDisplay, 0xE3E0584C, 0xB788, 0x4A5A, 0xBB, 0x20, 0x7F, 0x5A, 0x44, 0xC9, 0xAC, 0xDD, 6);

//  Name:     System.ItemFolderPathDisplayNarrow -- PKEY_ItemFolderPathDisplayNarrow
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: DABD30ED-0043-4789-A7F8-D013A4736622, 100
//  
//  This is the user-friendly display path of the parent folder of an item.  The format of the string
//  should be tailored such that the folder name comes first, to optimize for a narrow viewing column.
//  
//  If the folder is a file folder, the value includes localized names if they are present.
//  
//  If System.ItemFolderPathDisplay is VT_EMPTY, then this property should be too.  Otherwise, it should
//  be derived appropriately by the data source from System.ItemFolderPathDisplay.
//  
//  Example values:
//  
//      If the path is...                     The property value is...
//      -----------------                     ------------------------
//      "c:\foo\bar\hello.txt"                "bar (c:\foo)"
//      "\\server\share\mydir\goodnews.doc"   "mydir (\\server\share)"
//      "\\server\share\numbers.xls"          "share (\\server)"
//      "c:\foo\MyFolder"                     "foo (c:\)"
//      "/Mailbox Account/Inbox/'Re: Hello!'" "Inbox (/Mailbox Account)"
DEFINE_PROPERTYKEY(PKEY_ItemFolderPathDisplayNarrow, 0xDABD30ED, 0x0043, 0x4789, 0xA7, 0xF8, 0xD0, 0x13, 0xA4, 0x73, 0x66, 0x22, 100);

//  Name:     System.ItemName -- PKEY_ItemName
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: 6B8DA074-3B5C-43BC-886F-0A2CDCE00B6F, 100
//  
//  This is the base-name of the System.ItemNameDisplay.
//  
//  If the item is a file this property
//  includes the extension in all cases, and will be localized if a localized name is available.
//  
//  If the item is a message, then the value of this property does not include the forwarding or
//  reply prefixes (see System.ItemNamePrefix).
DEFINE_PROPERTYKEY(PKEY_ItemName, 0x6B8DA074, 0x3B5C, 0x43BC, 0x88, 0x6F, 0x0A, 0x2C, 0xDC, 0xE0, 0x0B, 0x6F, 100);

//  Name:     System.ItemNameDisplay -- PKEY_ItemNameDisplay
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_Storage) B725F130-47EF-101A-A5F1-02608C9EEBAC, 10 (PID_STG_NAME)
//  
//  This is the display name in "most complete" form.  This is the best effort unique representation
//  of the name of an item that makes sense for end users to read.  It is the concatentation of
//  System.ItemNamePrefix and System.ItemName.
//  
//  If the item is a file this property
//  includes the extension in all cases, and will be localized if a localized name is available.
//  
//  There are acceptable cases when System.FileName is not VT_EMPTY, yet the value of this property 
//  is completely different.  Email messages are a key example.  If the item is an email message, 
//  the item name is likely the subject.  In that case, the value must be the concatenation of the
//  System.ItemNamePrefix and System.ItemName.  Since the value of System.ItemNamePrefix excludes
//  any trailing whitespace, the concatenation must include a whitespace when generating System.ItemNameDisplay.
//  
//  Note that this property is not guaranteed to be unique, but the idea is to promote the most likely
//  candidate that can be unique and also makes sense for end users. For example, for documents, you
//  might think about using System.Title as the System.ItemNameDisplay, but in practice the title of
//  the documents may not be useful or unique enough to be of value as the sole System.ItemNameDisplay.  
//  Instead, providing the value of System.FileName as the value of System.ItemNameDisplay is a better
//  candidate.  In Windows Mail, the emails are stored in the file system as .eml files and the 
//  System.FileName for those files are not human-friendly as they contain GUIDs. In this example, 
//  promoting System.Subject as System.ItemNameDisplay makes more sense.
//  
//  Compatibility notes:
//  
//  Shell folder implementations on Vista: use PKEY_ItemNameDisplay for the name column when
//  you want Explorer to call ISF::GetDisplayNameOf(SHGDN_NORMAL) to get the value of the name. Use
//  another PKEY (like PKEY_ItemName) when you want Explorer to call either the folder's property store or
//  ISF2::GetDetailsEx in order to get the value of the name.
//  
//  Shell folder implementations on XP: the first column needs to be the name column, and Explorer
//  will call ISF::GetDisplayNameOf to get the value of the name.  The PKEY/SCID does not matter.
//  
//  Example values:
//  
//      File:          "hello.txt"
//      Message:       "Re: Let's talk about Tom's argyle socks!"
//      Device folder: "song.wma"
//      Folder:        "Documents"
DEFINE_PROPERTYKEY(PKEY_ItemNameDisplay, 0xB725F130, 0x47EF, 0x101A, 0xA5, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC, 10);

//  Name:     System.ItemNamePrefix -- PKEY_ItemNamePrefix
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: D7313FF1-A77A-401C-8C99-3DBDD68ADD36, 100
//  
//  This is the prefix of an item, used for email messages.
//  where the subject begins with "Re:" which is the prefix.
//  
//  If the item is a file, then the value of this property is VT_EMPTY.
//  
//  If the item is a message, then the value of this property is the forwarding or reply 
//  prefixes (including delimiting colon, but no whitespace), or VT_EMPTY if there is no prefix.
//  
//  Example values:
//  
//  System.ItemNamePrefix    System.ItemName      System.ItemNameDisplay
//  ---------------------    -------------------  ----------------------
//  VT_EMPTY                 "Great day"          "Great day"
//  "Re:"                    "Great day"          "Re: Great day"
//  "Fwd: "                  "Monthly budget"     "Fwd: Monthly budget"
//  VT_EMPTY                 "accounts.xls"       "accounts.xls"
DEFINE_PROPERTYKEY(PKEY_ItemNamePrefix, 0xD7313FF1, 0xA77A, 0x401C, 0x8C, 0x99, 0x3D, 0xBD, 0xD6, 0x8A, 0xDD, 0x36, 100);

//  Name:     System.ItemParticipants -- PKEY_ItemParticipants
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: D4D0AA16-9948-41A4-AA85-D97FF9646993, 100
//  
//  This is the generic list of people associated with an item and who contributed 
//  to the item. 
//  
//  For example, this is the combination of people in the To list, Cc list and 
//  sender of an email message.
DEFINE_PROPERTYKEY(PKEY_ItemParticipants, 0xD4D0AA16, 0x9948, 0x41A4, 0xAA, 0x85, 0xD9, 0x7F, 0xF9, 0x64, 0x69, 0x93, 100);

//  Name:     System.ItemPathDisplay -- PKEY_ItemPathDisplay
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD, 7
//  
//  This is the user-friendly display path to the item.
//  
//  If the item is a file or folder this property
//  includes the extension in all cases, and will be localized if a localized name is available.
//  
//  For other items,this is the user-friendly equivalent, assuming the item exists in hierarchical storage.
//  
//  Unlike System.ItemUrl, this property value does not include the URL scheme.
//  
//  To parse an item path, use System.ItemUrl or System.ParsingPath.  To reference shell 
//  namespace items using shell APIs, use System.ParsingPath.
//  
//  Example values:
//  
//      If the path is...                     The property value is...
//      -----------------                     ------------------------
//      "c:\foo\bar\hello.txt"                "c:\foo\bar\hello.txt"
//      "\\server\share\mydir\goodnews.doc"   "\\server\share\mydir\goodnews.doc"
//      "\\server\share\numbers.xls"          "\\server\share\numbers.xls"
//      "c:\foo\MyFolder"                     "c:\foo\MyFolder"
//      "/Mailbox Account/Inbox/'Re: Hello!'" "/Mailbox Account/Inbox/'Re: Hello!'"
DEFINE_PROPERTYKEY(PKEY_ItemPathDisplay, 0xE3E0584C, 0xB788, 0x4A5A, 0xBB, 0x20, 0x7F, 0x5A, 0x44, 0xC9, 0xAC, 0xDD, 7);

//  Name:     System.ItemPathDisplayNarrow -- PKEY_ItemPathDisplayNarrow
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_ShellDetails) 28636AA6-953D-11D2-B5D6-00C04FD918D0, 8
//  
//  This is the user-friendly display path to the item. The format of the string should be 
//  tailored such that the name comes first, to optimize for a narrow viewing column.
//  
//  If the item is a file, the value excludes the file extension, and includes localized names if they are present.
//  If the item is a message, the value includes the System.ItemNamePrefix.
//  
//  To parse an item path, use System.ItemUrl or System.ParsingPath.
//  
//  Example values:
//  
//      If the path is...                     The property value is...
//      -----------------                     ------------------------
//      "c:\foo\bar\hello.txt"                "hello (c:\foo\bar)"
//      "\\server\share\mydir\goodnews.doc"   "goodnews (\\server\share\mydir)"
//      "\\server\share\folder"               "folder (\\server\share)"
//      "c:\foo\MyFolder"                     "MyFolder (c:\foo)"
//      "/Mailbox Account/Inbox/'Re: Hello!'" "Re: Hello! (/Mailbox Account/Inbox)"
DEFINE_PROPERTYKEY(PKEY_ItemPathDisplayNarrow, 0x28636AA6, 0x953D, 0x11D2, 0xB5, 0xD6, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0, 8);

//  Name:     System.ItemType -- PKEY_ItemType
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_ShellDetails) 28636AA6-953D-11D2-B5D6-00C04FD918D0, 11
//  
//  This is the canonical type of the item and is intended to be programmatically
//  parsed.
//  
//  If there is no canonical type, the value is VT_EMPTY.
//  
//  If the item is a file (ie, System.FileName is not VT_EMPTY), the value is the same as
//  System.FileExtension.
//  
//  Use System.ItemTypeText when you want to display the type to end users in a view.  (If
//   the item is a file, passing the System.ItemType value to PSFormatForDisplay will
//   result in the same value as System.ItemTypeText.)
//  
//  Example values:
//  
//      If the path is...                     The property value is...
//      -----------------                     ------------------------
//      "c:\foo\bar\hello.txt"                ".txt"
//      "\\server\share\mydir\goodnews.doc"   ".doc"
//      "\\server\share\folder"               "Directory"
//      "c:\foo\MyFolder"                     "Directory"
//      [desktop]                             "Folder"
//      "/Mailbox Account/Inbox/'Re: Hello!'" "MAPI/IPM.Message"
DEFINE_PROPERTYKEY(PKEY_ItemType, 0x28636AA6, 0x953D, 0x11D2, 0xB5, 0xD6, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0, 11);

//  Name:     System.ItemTypeText -- PKEY_ItemTypeText
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_Storage) B725F130-47EF-101A-A5F1-02608C9EEBAC, 4 (PID_STG_STORAGETYPE)
//  
//  This is the user friendly type name of the item.  This is not intended to be
//  programmatically parsed.
//  
//  If System.ItemType is VT_EMPTY, the value of this property is also VT_EMPTY.
//  
//  If the item is a file, the value of this property is the same as if you passed the 
//  file's System.ItemType value to PSFormatForDisplay.
//  
//  This property should not be confused with System.Kind, where System.Kind is a high-level
//  user friendly kind name. For example, for a document, System.Kind = "Document" and 
//  System.Item.Type = ".doc" and System.Item.TypeText = "Microsoft Word Document"
//  
//  Example values:
//  
//      If the path is...                     The property value is...
//      -----------------                     ------------------------
//      "c:\foo\bar\hello.txt"                "Text File"
//      "\\server\share\mydir\goodnews.doc"   "Microsoft Word Document"
//      "\\server\share\folder"               "File Folder"
//      "c:\foo\MyFolder"                     "File Folder"
//      "/Mailbox Account/Inbox/'Re: Hello!'" "Outlook E-Mail Message"
DEFINE_PROPERTYKEY(PKEY_ItemTypeText, 0xB725F130, 0x47EF, 0x101A, 0xA5, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC, 4);

//  Name:     System.ItemUrl -- PKEY_ItemUrl
//  Type:     String -- VT_LPWSTR  (For variants: VT_BSTR)
//  FormatID: (FMTID_Query) 49691C90-7E17-101A-A91C-08002B2ECDA9, 9 (PROPID_QUERY_VIRTUALPATH)
//  
//  This always represents a well formed URL that points to the item.  
//  
//  To reference shell namespace items using shell APIs, use System.ParsingPath.
//  
//  Example values:
//  
//      Files:    "file:///c:/foo/bar/hello.txt"
//                "csc://{GUID}/..."
//      Messages: "mapi://..."
DEFINE_PROPERTYKEY(PKEY_ItemUrl, 0x49691C90, 0x7E17, 0x101A, 0xA9, 0x1C, 0x08, 0x00, 0x2B, 0x2E, 0xCD, 0xA9, 9);

//  Name:     System.Keywords -- PKEY_Keywords
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)  Legacy code may treat this as VT_LPSTR.
//  FormatID: (FMTID_SummaryInformation) F29F85E0-4FF9-1068-AB91-08002B27B3D9, 5 (PIDSI_KEYWORDS)
//
//  The keywords for the item.  Also referred to as tags.
DEFINE_PROPERTYKEY(PKEY_Keywords, 0xF29F85E0, 0x4FF9, 0x1068, 0xAB, 0x91, 0x08, 0x00, 0x2B, 0x27, 0xB3, 0xD9, 5);

//  Name:     System.Kind -- PKEY_Kind
//  Type:     Multivalue String -- VT_VECTOR | VT_LPWSTR  (For variants: VT_ARRAY | VT_BSTR)
//  FormatID: 1E3EE840-BC2B-476C-8237-2ACD1A839B22, 3
//  
//  System.Kind is used to map extensions to various .Search folders.
//  Extensions are mapped to K