0, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 
   0x3D, 0x3C, 0x3D, 0x38, 0x38, 0x38, 0x14, 0x15, 0x14, 0x00, 0x00, 0x00, 0x16, 0x17, 0x16, 0x3A, 
   0x3B, 0x3A, 0x40, 0x3E, 0x40, 0x30, 0x2E, 0x30, 0x1C, 0x1C, 0x1C, 0x37, 0x36, 0x37, 0x2A, 0x2A, 
   0x2A, 0x19, 0x19, 0x19, 0x40, 0x3F, 0x40, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3B, 0x3A, 0x39, 
   0x3B, 0x39, 0x3A, 0x3C, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3F, 0x3F, 0x3F, 0x2B, 0x2D, 0x2B, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 
   0x3F, 0x3F, 0x4D, 0x4D, 0x4D, 0x75, 0x77, 0x75, 0x6B, 0x6A, 0x6B, 0x58, 0x59, 0x58, 0x5C, 0x5C, 
   0x5C, 0x54, 0x56, 0x54, 0x55, 0x55, 0x55, 0x53, 0x53, 0x53, 0x51, 0x51, 0x51, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x48, 
   0x49, 0x48, 0x48, 0x47, 0x48, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x31, 0x31, 
   0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x26, 0x26, 0x26, 0x27, 
   0x25, 0x27, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x23, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x1F, 0x1F, 0x1F, 0x27, 0x24, 0x27, 0x24, 0x24, 0x24, 0x21, 0x21, 0x21, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1D, 0x1C, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 
   0x20, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x20, 0x21, 0x20, 0x23, 0x22, 0x23, 0x21, 0x20, 0x21, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x21, 0x20, 0x21, 0x1C, 
   0x1E, 0x1C, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1E, 0x20, 0x1E, 0x33, 0x34, 0x33, 0x49, 0x49, 
   0x49, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x51, 0x53, 0x51, 0x57, 0x55, 0x57, 0x59, 0x59, 0x59, 
   0x4F, 0x50, 0x4F, 0x27, 0x28, 0x27, 0x27, 0x29, 0x27, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 
   0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x20, 0x20, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 
   0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x1F, 0x20, 0x1F, 0x1E, 0x1E, 0x1E, 0x1D, 
   0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x19, 0x1A, 
   0x19, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 
   0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 
   0x21, 0x22, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 
   0x23, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x25, 
   0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 
   0x2F, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x38, 0x38, 0x38, 
   0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x2D, 
   0x2B, 0x2D, 0x40, 0x40, 0x40, 0x31, 0x30, 0x31, 0x1D, 0x1C, 0x1D, 0x38, 0x38, 0x38, 0x3F, 0x40, 
   0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x44, 0x43, 0x44, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 
   0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4F, 0x4E, 0x45, 0x44, 0x45, 0x2E, 0x2F, 0x2E, 
   0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x12, 0x11, 0x12, 0x14, 
   0x14, 0x14, 0x5F, 0x5E, 0x5F, 0x75, 0x76, 0x75, 0x57, 0x58, 0x57, 0x39, 0x3A, 0x39, 0x5A, 0x59, 
   0x5A, 0x5B, 0x5A, 0x5B, 0x55, 0x55, 0x55, 0x53, 0x53, 0x53, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4D, 0x4E, 0x4A, 0x4C, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x48, 0x47, 0x48, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 
   0x3A, 0x39, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 
   0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x27, 
   0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 
   0x20, 0x1F, 0x20, 0x2D, 0x2E, 0x2D, 0x25, 0x25, 0x25, 0x20, 0x1F, 0x20, 0x21, 0x22, 0x21, 0x28, 
   0x27, 0x28, 0x23, 0x22, 0x23, 0x26, 0x25, 0x26, 0x23, 0x24, 0x23, 0x33, 0x33, 0x33, 0x29, 0x28, 
   0x29, 0x24, 0x24, 0x24, 0x35, 0x34, 0x35, 0x39, 0x39, 0x39, 0x27, 0x25, 0x27, 0x22, 0x22, 0x22, 
   0x23, 0x23, 0x23, 0x25, 0x27, 0x25, 0x2B, 0x2B, 0x2B, 0x33, 0x33, 0x33, 0x38, 0x39, 0x38, 0x38, 
   0x3A, 0x38, 0x31, 0x33, 0x31, 0x35, 0x35, 0x35, 0x38, 0x38, 0x38, 0x3B, 0x38, 0x3B, 0x3D, 0x3C, 
   0x3D, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x40, 0x3F, 
   0x3C, 0x3C, 0x3C, 0x24, 0x23, 0x24, 0x1C, 0x1D, 0x1C, 0x2B, 0x2A, 0x2B, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x28, 0x2A, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x25, 0x26, 0x25, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1E, 0x1F, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 
   0x1E, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x20, 0x20, 0x20, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 
   0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x20, 0x22, 
   0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x23, 
   0x24, 0x23, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x2A, 0x29, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2F, 0x2D, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 
   0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x34, 0x33, 0x37, 0x36, 0x37, 0x39, 0x38, 0x39, 
   0x38, 0x39, 0x38, 0x3B, 0x3B, 0x3B, 0x3F, 0x3F, 0x3F, 0x2E, 0x2B, 0x2E, 0x00, 0x00, 0x00, 0x22, 
   0x23, 0x22, 0x42, 0x42, 0x42, 0x30, 0x31, 0x30, 0x18, 0x1A, 0x18, 0x37, 0x37, 0x37, 0x3C, 0x3B, 
   0x3C, 0x3E, 0x3C, 0x3E, 0x3F, 0x3F, 0x3F, 0x41, 0x42, 0x41, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 
   0x44, 0x46, 0x44, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4D, 0x4E, 0x4D, 0x52, 0x52, 0x52, 
   0x56, 0x56, 0x56, 0x58, 0x59, 0x58, 0x58, 0x5A, 0x58, 0x5C, 0x5D, 0x5C, 0x47, 0x45, 0x47, 0x05, 
   0x04, 0x05, 0x33, 0x34, 0x33, 0x5B, 0x5D, 0x5B, 0x46, 0x48, 0x46, 0x33, 0x32, 0x33, 0x5F, 0x5F, 
   0x5F, 0x61, 0x63, 0x61, 0x58, 0x57, 0x58, 0x53, 0x53, 0x53, 0x51, 0x51, 0x51, 0x4E, 0x4F, 0x4E, 
   0x4C, 0x4E, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4C, 0x4A, 0x48, 
   0x4A, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 
   0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x33, 0x33, 
   0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x25, 
   0x26, 0x25, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 
   0x1E, 0x1E, 0x1E, 0x2F, 0x2E, 0x2F, 0x26, 0x25, 0x26, 0x1D, 0x1C, 0x1D, 0x28, 0x28, 0x28, 0x33, 
   0x33, 0x33, 0x20, 0x20, 0x20, 0x29, 0x29, 0x29, 0x2B, 0x2D, 0x2B, 0x3A, 0x3C, 0x3A, 0x2D, 0x2E, 
   0x2D, 0x21, 0x21, 0x21, 0x40, 0x40, 0x40, 0x46, 0x46, 0x46, 0x26, 0x24, 0x26, 0x1C, 0x1D, 0x1C, 
   0x31, 0x32, 0x31, 0x35, 0x37, 0x35, 0x33, 0x34, 0x33, 0x3C, 0x3C, 0x3C, 0x46, 0x46, 0x46, 0x46, 
   0x48, 0x46, 0x41, 0x42, 0x41, 0x46, 0x48, 0x46, 0x4E, 0x4D, 0x4E, 0x34, 0x35, 0x34, 0x22, 0x24, 
   0x22, 0x25, 0x24, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x28, 0x27, 0x28, 0x2B, 0x2A, 0x2B, 0x21, 0x23, 0x21, 0x22, 0x22, 0x22, 0x2F, 0x2E, 0x2F, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x24, 
   0x25, 0x24, 0x24, 0x24, 0x25, 0x23, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1D, 
   0x1F, 0x1D, 0x1F, 0x1E, 0x1F, 0x1D, 0x1D, 0x1D, 0x1A, 0x1C, 0x1A, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 
   0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1C, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 
   0x1A, 0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 
   0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x22, 0x23, 0x22, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x21, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 
   0x2B, 0x2A, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 
   0x37, 0x39, 0x37, 0x3A, 0x39, 0x3A, 0x3B, 0x3B, 0x3B, 0x35, 0x35, 0x35, 0x04, 0x04, 0x04, 0x0F, 
   0x0F, 0x0F, 0x39, 0x39, 0x39, 0x35, 0x36, 0x35, 0x15, 0x16, 0x15, 0x32, 0x33, 0x32, 0x3A, 0x3B, 
   0x3A, 0x3C, 0x3C, 0x3C, 0x3F, 0x3E, 0x3F, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x45, 0x47, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x49, 0x48, 0x49, 0x4B, 0x4A, 0x4B, 0x4D, 0x4D, 0x4D, 
   0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x52, 0x53, 0x52, 0x57, 0x56, 0x57, 0x55, 0x56, 0x55, 0x0F, 
   0x10, 0x0F, 0x00, 0x00, 0x00, 0x38, 0x39, 0x38, 0x52, 0x55, 0x52, 0x4D, 0x4E, 0x4D, 0xA4, 0xA2, 
   0xA4, 0x61, 0x61, 0x61, 0x4E, 0x4F, 0x4E, 0x53, 0x54, 0x53, 0x52, 0x52, 0x52, 0x51, 0x50, 0x51, 
   0x4E, 0x4E, 0x4E, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x44, 
   0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 
   0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3D, 
   0x3C, 0x3D, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x34, 0x33, 
   0x34, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x22, 0x24, 0x22, 0x23, 0x23, 0x23, 0x20, 0x20, 0x20, 
   0x17, 0x18, 0x17, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x20, 0x20, 0x20, 0x29, 0x27, 0x29, 0x33, 
   0x31, 0x33, 0x1D, 0x1D, 0x1D, 0x2D, 0x2C, 0x2D, 0x36, 0x37, 0x36, 0x30, 0x30, 0x30, 0x28, 0x2A, 
   0x28, 0x23, 0x23, 0x23, 0x38, 0x38, 0x38, 0x32, 0x31, 0x32, 0x27, 0x26, 0x27, 0x1E, 0x20, 0x1E, 
   0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x3E, 0x3E, 0x3E, 0x34, 0x34, 0x34, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x28, 0x28, 0x28, 0x24, 0x24, 
   0x24, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x25, 0x26, 0x25, 0x18, 0x19, 0x18, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x30, 0x32, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2A, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 
   0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x20, 0x20, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 
   0x1C, 0x1D, 0x1D, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1A, 0x1C, 0x1A, 0x1A, 0x1B, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 
   0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x25, 
   0x25, 0x25, 0x27, 0x25, 0x27, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 
   0x2B, 0x2A, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x21, 0x21, 0x21, 0x05, 
   0x06, 0x05, 0x27, 0x26, 0x27, 0x38, 0x39, 0x38, 0x11, 0x12, 0x11, 0x2C, 0x2C, 0x2C, 0x3E, 0x3E, 
   0x3E, 0x3B, 0x3B, 0x3B, 0x3F, 0x3D, 0x3F, 0x41, 0x3F, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4F, 0x4C, 0x4F, 0x4F, 0x4F, 0x52, 0x52, 0x52, 0x54, 0x54, 0x54, 0x5B, 0x5B, 0x5B, 0x2C, 
   0x2D, 0x2C, 0x00, 0x00, 0x00, 0x19, 0x19, 0x19, 0x57, 0x56, 0x57, 0x74, 0x74, 0x74, 0xA7, 0xA8, 
   0xA7, 0x35, 0x36, 0x35, 0x39, 0x3B, 0x39, 0x55, 0x57, 0x55, 0x52, 0x52, 0x52, 0x50, 0x50, 0x50, 
   0x4E, 0x4E, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x44, 0x46, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 
   0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x33, 0x34, 
   0x33, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 
   0x2F, 0x2E, 0x2F, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 
   0x26, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x1D, 0x1C, 0x1D, 
   0x12, 0x14, 0x12, 0x1B, 0x1D, 0x1B, 0x21, 0x22, 0x21, 0x22, 0x24, 0x22, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2A, 0x2C, 0x22, 0x24, 0x22, 0x2F, 0x2F, 0x2F, 0x38, 0x37, 0x38, 0x23, 0x22, 0x23, 0x1E, 0x1E, 
   0x1E, 0x22, 0x21, 0x22, 0x25, 0x23, 0x25, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x28, 0x28, 0x28, 
   0x43, 0x41, 0x43, 0x41, 0x40, 0x41, 0x39, 0x39, 0x39, 0x28, 0x27, 0x28, 0x1E, 0x1E, 0x1E, 0x1F, 
   0x1F, 0x1F, 0x20, 0x20, 0x20, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x26, 0x24, 0x26, 0x26, 0x25, 
   0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x1C, 0x1C, 0x1C, 0x18, 0x19, 0x18, 0x2B, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x29, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 
   0x2C, 0x30, 0x2E, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 
   0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2C, 0x2D, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 
   0x29, 0x2A, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x22, 0x21, 
   0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x1F, 0x1E, 0x1F, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 0x1D, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1C, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x14, 0x16, 0x14, 
   0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x25, 
   0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 
   0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 
   0x2B, 0x2A, 0x2B, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x34, 0x33, 0x34, 0x04, 
   0x03, 0x04, 0x11, 0x11, 0x11, 0x38, 0x39, 0x38, 0x24, 0x23, 0x24, 0x27, 0x25, 0x27, 0x3F, 0x3E, 
   0x3F, 0x39, 0x39, 0x39, 0x3B, 0x3C, 0x3B, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x45, 0x43, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 
   0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 0x49, 0x48, 0x49, 0x49, 0x4C, 0x49, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x51, 0x51, 0x51, 0x53, 0x53, 0x53, 0x57, 0x57, 0x57, 0x4E, 
   0x4E, 0x4E, 0x0D, 0x0D, 0x0D, 0x23, 0x24, 0x23, 0x58, 0x58, 0x58, 0x68, 0x68, 0x68, 0x6B, 0x6B, 
   0x6B, 0x31, 0x32, 0x31, 0x28, 0x29, 0x28, 0x54, 0x54, 0x54, 0x51, 0x52, 0x51, 0x4F, 0x50, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x45, 0x46, 0x44, 0x46, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x40, 
   0x3F, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x36, 0x37, 0x36, 0x34, 0x35, 
   0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x2B, 0x29, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 
   0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x24, 0x25, 0x24, 0x23, 0x24, 0x1A, 0x1B, 0x1A, 
   0x0E, 0x0E, 0x0E, 0x1E, 0x1D, 0x1E, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x24, 0x23, 0x24, 0x22, 
   0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x21, 0x22, 0x21, 0x20, 0x20, 
   0x20, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x27, 0x26, 0x27, 
   0x2E, 0x2B, 0x2E, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x24, 0x25, 0x24, 0x21, 0x22, 0x21, 0x23, 
   0x23, 0x23, 0x25, 0x23, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x27, 
   0x29, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x11, 0x12, 0x11, 0x1A, 0x1A, 0x1A, 0x29, 0x28, 0x29, 0x29, 
   0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2B, 0x2C, 0x2B, 0x29, 0x2A, 0x29, 0x29, 
   0x28, 0x29, 0x27, 0x26, 0x27, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x21, 0x21, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 
   0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x1F, 0x1F, 0x1F, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 
   0x1C, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1E, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1A, 
   0x1B, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 
   0x26, 0x25, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 
   0x25, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 
   0x23, 0x23, 0x23, 0x25, 0x23, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2D, 0x2B, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x0E, 
   0x0E, 0x0E, 0x07, 0x07, 0x07, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x24, 0x23, 0x24, 0x32, 0x33, 
   0x32, 0x3A, 0x3C, 0x3A, 0x3D, 0x3C, 0x3D, 0x3D, 0x3F, 0x3D, 0x3F, 0x40, 0x3F, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x46, 0x45, 0x46, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 0x44, 0x46, 0x44, 0x48, 0x48, 0x48, 0x4A, 0x4B, 0x4A, 
   0x4C, 0x4D, 0x4C, 0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x50, 0x52, 0x53, 0x52, 0x55, 0x54, 0x55, 0x53, 
   0x53, 0x53, 0x2F, 0x31, 0x2F, 0x3A, 0x3B, 0x3A, 0x56, 0x58, 0x56, 0x52, 0x53, 0x52, 0x54, 0x55, 
   0x54, 0x4D, 0x4E, 0x4D, 0x2C, 0x2B, 0x2C, 0x4A, 0x4B, 0x4A, 0x54, 0x55, 0x54, 0x4E, 0x50, 0x4E, 
   0x4C, 0x4E, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x45, 0x47, 0x45, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 
   0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x3F, 
   0x40, 0x3F, 0x3E, 0x3D, 0x3E, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x37, 0x38, 0x37, 0x35, 0x37, 
   0x35, 0x33, 0x34, 0x33, 0x35, 0x33, 0x35, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2C, 0x2D, 0x2C, 0x2A, 0x2C, 0x2A, 0x2A, 0x2A, 0x29, 
   0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x24, 0x26, 0x25, 0x24, 0x25, 0x1B, 0x1C, 0x1B, 
   0x0F, 0x11, 0x0F, 0x1D, 0x1E, 0x1D, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 
   0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x21, 0x22, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 
   0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x22, 0x21, 0x22, 0x1D, 
   0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 
   0x1D, 0x25, 0x25, 0x25, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x0D, 0x0C, 0x0D, 0x1A, 0x1B, 0x1A, 0x2D, 0x2D, 0x2D, 0x2A, 
   0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 
   0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x2C, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2C, 0x29, 0x29, 0x29, 0x28, 
   0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x21, 0x20, 
   0x21, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x20, 0x20, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 
   0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1D, 0x1C, 0x1D, 0x1A, 0x1B, 
   0x1A, 0x1A, 0x19, 0x1A, 0x18, 0x19, 0x18, 0x17, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 
   0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 
   0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x3C, 0x3C, 0x3C, 0x21, 
   0x21, 0x21, 0x00, 0x00, 0x00, 0x29, 0x27, 0x29, 0x40, 0x41, 0x40, 0x25, 0x27, 0x25, 0x24, 0x25, 
   0x24, 0x41, 0x41, 0x41, 0x3C, 0x3D, 0x3C, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 
   0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 
   0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x43, 0x44, 
   0x43, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x49, 0x4B, 0x49, 
   0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x51, 0x50, 0x51, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x50, 
   0x4F, 0x50, 0x20, 0x1F, 0x20, 0x41, 0x42, 0x41, 0x5F, 0x60, 0x5F, 0x56, 0x56, 0x56, 0x56, 0x56, 
   0x56, 0x56, 0x57, 0x56, 0x3E, 0x3D, 0x3E, 0x46, 0x44, 0x46, 0x58, 0x59, 0x58, 0x50, 0x50, 0x50, 
   0x4E, 0x4D, 0x4E, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 
   0x4A, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x40, 
   0x42, 0x40, 0x40, 0x3E, 0x40, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x37, 
   0x38, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2A, 0x2A, 0x2A, 0x2B, 
   0x29, 0x2B, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x25, 0x26, 
   0x25, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x1D, 0x1D, 0x1D, 
   0x23, 0x24, 0x23, 0x2A, 0x29, 0x2A, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 
   0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x12, 
   0x13, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x14, 0x14, 0x14, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x09, 0x0B, 0x09, 0x1D, 0x1D, 0x1D, 0x2C, 0x2B, 0x2C, 0x2A, 
   0x29, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 
   0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2D, 0x2B, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2C, 0x2E, 0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 
   0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x20, 
   0x21, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 
   0x1E, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1E, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x19, 0x19, 0x19, 0x17, 0x18, 0x17, 0x16, 0x16, 0x16, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 
   0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x28, 0x27, 
   0x28, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x24, 0x26, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 
   0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 
   0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2D, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 
   0x37, 0x35, 0x37, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x3B, 0x3B, 0x3B, 0x2C, 
   0x2D, 0x2C, 0x01, 0x01, 0x01, 0x16, 0x15, 0x16, 0x3C, 0x3D, 0x3C, 0x31, 0x31, 0x31, 0x21, 0x20, 
   0x21, 0x3C, 0x3A, 0x3C, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x3E, 0x40, 0x3E, 
   0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x44, 0x44, 
   0x44, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x47, 0x48, 0x47, 0x4A, 0x4B, 0x4A, 
   0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x51, 0x50, 0x51, 0x51, 0x53, 0x51, 0x4F, 
   0x4F, 0x4F, 0x25, 0x24, 0x25, 0x22, 0x24, 0x22, 0x48, 0x48, 0x48, 0x58, 0x58, 0x58, 0x54, 0x55, 
   0x54, 0x57, 0x59, 0x57, 0x4F, 0x51, 0x4F, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x4F, 0x4F, 0x4F, 
   0x4D, 0x4C, 0x4D, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 
   0x41, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x3A, 0x38, 
   0x3A, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x34, 0x35, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x14, 0x15, 0x14, 
   0x25, 0x24, 0x25, 0x2F, 0x2C, 0x2F, 0x25, 0x26, 0x25, 0x23, 0x23, 0x23, 0x21, 0x21, 0x21, 0x1F, 
   0x1E, 0x1F, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1B, 0x1D, 0x1B, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 
   0x1D, 0x1F, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x22, 0x21, 
   0x24, 0x25, 0x24, 0x28, 0x28, 0x28, 0x25, 0x26, 0x25, 0x28, 0x29, 0x28, 0x2A, 0x2A, 0x2A, 0x1B, 
   0x1A, 0x1B, 0x01, 0x01, 0x01, 0x07, 0x07, 0x07, 0x1E, 0x1F, 0x1E, 0x03, 0x03, 0x03, 0x01, 0x01, 
   0x01, 0x10, 0x0F, 0x10, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 
   0x2B, 0x2B, 0x2B, 0x27, 0x28, 0x27, 0x13, 0x14, 0x13, 0x25, 0x24, 0x25, 0x2A, 0x2A, 0x2A, 0x28, 
   0x28, 0x28, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x26, 
   0x25, 0x26, 0x24, 0x25, 0x24, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1D, 
   0x1F, 0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 
   0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 
   0x1A, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x14, 0x16, 0x14, 0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 
   0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x29, 0x2B, 0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2B, 0x29, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2B, 0x29, 
   0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x37, 
   0x38, 0x37, 0x17, 0x18, 0x17, 0x06, 0x08, 0x06, 0x33, 0x36, 0x33, 0x3E, 0x3D, 0x3E, 0x25, 0x24, 
   0x25, 0x27, 0x28, 0x27, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 
   0x43, 0x44, 0x43, 0x44, 0x42, 0x44, 0x42, 0x46, 0x45, 0x46, 0x47, 0x47, 0x47, 0x4A, 0x49, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x51, 
   0x51, 0x51, 0x3C, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x45, 0x44, 0x45, 0x56, 0x56, 
   0x56, 0x54, 0x54, 0x54, 0x5E, 0x5F, 0x5E, 0x45, 0x46, 0x45, 0x1B, 0x1B, 0x1B, 0x48, 0x47, 0x48, 
   0x4C, 0x4F, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x43, 
   0x42, 0x43, 0x41, 0x41, 0x41, 0x3C, 0x3E, 0x3C, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x27, 0x25, 
   0x27, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x26, 0x27, 0x26, 0x28, 0x27, 0x28, 0x0D, 0x0C, 0x0D, 
   0x18, 0x18, 0x18, 0x2C, 0x2A, 0x2C, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x20, 0x21, 0x20, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x06, 0x06, 0x06, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x1D, 0x1D, 0x1D, 0x21, 0x22, 0x21, 0x26, 
   0x26, 0x26, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x12, 0x11, 
   0x12, 0x10, 0x0F, 0x10, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 
   0x2B, 0x2A, 0x2B, 0x18, 0x18, 0x18, 0x22, 0x20, 0x22, 0x23, 0x23, 0x23, 0x29, 0x28, 0x29, 0x27, 
   0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x23, 0x25, 
   0x23, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x21, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x21, 0x20, 0x21, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1F, 
   0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1A, 0x1C, 0x1B, 0x19, 0x1B, 0x18, 0x18, 
   0x18, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x14, 0x15, 0x14, 0x15, 0x14, 0x15, 0x13, 0x13, 0x13, 
   0x12, 0x13, 0x12, 0x12, 0x12, 0x12, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 
   0x2B, 0x29, 0x2A, 0x29, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 
   0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x29, 0x2B, 0x29, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x3A, 
   0x39, 0x3A, 0x30, 0x2F, 0x30, 0x03, 0x03, 0x03, 0x08, 0x09, 0x08, 0x36, 0x35, 0x36, 0x2F, 0x2E, 
   0x2F, 0x1B, 0x1A, 0x1B, 0x3F, 0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x40, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 0x44, 0x45, 0x44, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4F, 0x4F, 0x52, 0x53, 0x52, 0x26, 0x27, 0x26, 0x00, 0x00, 0x00, 0x0D, 0x0D, 0x0D, 0x41, 0x41, 
   0x41, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x4E, 0x4E, 0x4E, 0x2D, 0x2D, 0x2D, 0x40, 0x40, 0x40, 
   0x53, 0x53, 0x53, 0x4B, 0x4D, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x44, 0x46, 0x42, 
   0x43, 0x42, 0x3F, 0x41, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x3A, 0x3A, 
   0x3A, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 
   0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x18, 0x18, 0x18, 
   0x23, 0x23, 0x23, 0x29, 0x28, 0x29, 0x18, 0x19, 0x18, 0x22, 0x23, 0x22, 0x29, 0x28, 0x29, 0x0D, 
   0x0C, 0x0D, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0A, 0x0A, 0x0B, 0x0A, 0x0A, 0x0B, 0x0A, 0x0A, 0x0B, 
   0x0A, 0x0A, 0x0B, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0D, 0x0C, 0x0D, 0x0C, 0x0C, 0x0C, 
   0x0D, 0x0B, 0x0D, 0x17, 0x18, 0x17, 0x1C, 0x1C, 0x1C, 0x22, 0x20, 0x22, 0x24, 0x24, 0x24, 0x29, 
   0x28, 0x29, 0x28, 0x29, 0x28, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x2C, 0x2A, 0x2C, 0x20, 0x1F, 
   0x20, 0x1D, 0x1C, 0x1D, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x2C, 0x2A, 0x2C, 
   0x26, 0x25, 0x26, 0x11, 0x12, 0x11, 0x28, 0x27, 0x28, 0x24, 0x25, 0x24, 0x27, 0x26, 0x27, 0x27, 
   0x25, 0x27, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 
   0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 
   0x23, 0x24, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 
   0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x21, 0x1F, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 
   0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1B, 0x1C, 0x19, 0x19, 0x19, 0x17, 0x17, 
   0x17, 0x15, 0x17, 0x15, 0x15, 0x16, 0x15, 0x15, 0x14, 0x15, 0x13, 0x14, 0x13, 0x12, 0x13, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x29, 0x2B, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x29, 0x2B, 0x29, 0x28, 0x29, 
   0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x36, 0x34, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 
   0x37, 0x37, 0x3A, 0x39, 0x3A, 0x13, 0x12, 0x13, 0x00, 0x00, 0x00, 0x23, 0x22, 0x23, 0x38, 0x38, 
   0x38, 0x17, 0x18, 0x17, 0x3E, 0x3D, 0x3E, 0x3A, 0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3E, 0x3D, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x43, 0x42, 0x43, 0x43, 
   0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4D, 
   0x4D, 0x4D, 0x51, 0x52, 0x51, 0x48, 0x48, 0x48, 0x0B, 0x0C, 0x0B, 0x00, 0x00, 0x00, 0x18, 0x1A, 
   0x18, 0x4B, 0x4C, 0x4B, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x4A, 0x4C, 0x4A, 0x35, 0x34, 0x35, 
   0x47, 0x47, 0x47, 0x4F, 0x51, 0x4F, 0x4D, 0x4D, 0x4D, 0x4D, 0x4F, 0x4D, 0x4F, 0x4F, 0x4F, 0x4D, 
   0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4C, 0x4D, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 
   0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x42, 
   0x43, 0x42, 0x41, 0x42, 0x41, 0x3F, 0x3D, 0x3F, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 
   0x33, 0x34, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x2A, 0x29, 0x2A, 
   0x2E, 0x2E, 0x2E, 0x26, 0x25, 0x26, 0x0C, 0x0C, 0x0C, 0x22, 0x23, 0x22, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x2A, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 
   0x28, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2C, 0x2A, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2A, 0x2D, 0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x27, 0x28, 0x27, 0x2C, 0x2A, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 
   0x23, 0x22, 0x23, 0x18, 0x18, 0x18, 0x28, 0x29, 0x28, 0x26, 0x27, 0x26, 0x24, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x21, 0x22, 0x22, 0x20, 0x22, 0x20, 0x1F, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x1F, 0x20, 0x1F, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1B, 0x1D, 0x1B, 0x19, 0x1B, 0x19, 0x17, 0x19, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x16, 0x17, 0x15, 0x16, 0x15, 0x14, 0x14, 0x14, 0x14, 0x13, 0x14, 0x13, 0x13, 0x13, 
   0x11, 0x12, 0x11, 0x11, 0x12, 0x11, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x2A, 0x2A, 
   0x2A, 0x29, 0x2B, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 
   0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x39, 0x38, 0x39, 0x29, 0x2A, 0x29, 0x05, 0x05, 0x05, 0x0D, 0x0D, 0x0D, 0x34, 0x35, 
   0x34, 0x1D, 0x20, 0x1D, 0x33, 0x31, 0x33, 0x3D, 0x3D, 0x3D, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x41, 0x40, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 
   0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 
   0x4C, 0x4B, 0x4D, 0x4D, 0x4D, 0x4F, 0x50, 0x4F, 0x3C, 0x3D, 0x3C, 0x09, 0x0A, 0x09, 0x00, 0x00, 
   0x00, 0x3C, 0x3E, 0x3C, 0x51, 0x51, 0x51, 0x4D, 0x4D, 0x4D, 0x4F, 0x50, 0x4F, 0x3A, 0x39, 0x3A, 
   0x31, 0x2E, 0x31, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x4F, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4D, 0x4F, 0x4D, 0x4C, 0x4D, 0x4C, 0x4B, 0x4A, 0x4B, 0x49, 0x4A, 
   0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x43, 
   0x43, 0x43, 0x41, 0x42, 0x41, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 
   0x3B, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x34, 0x36, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x29, 0x2B, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x24, 0x25, 0x24, 0x1D, 0x1F, 0x1D, 0x35, 0x35, 0x35, 
   0x36, 0x36, 0x36, 0x23, 0x23, 0x23, 0x0C, 0x0C, 0x0C, 0x29, 0x29, 0x29, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 
   0x2E, 0x2F, 0x2E, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x22, 0x20, 0x22, 0x14, 0x14, 
   0x14, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 
   0x21, 0x1F, 0x21, 0x19, 0x1B, 0x19, 0x29, 0x28, 0x29, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x22, 
   0x22, 0x22, 0x21, 0x22, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x22, 0x22, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 
   0x1D, 0x1F, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1C, 0x1D, 0x1C, 0x1B, 0x1B, 0x1B, 0x19, 0x18, 0x19, 0x17, 0x17, 
   0x17, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x14, 0x14, 0x14, 0x13, 0x14, 0x13, 0x12, 0x13, 0x12, 
   0x12, 0x12, 0x12, 0x10, 0x12, 0x10, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 
   0x2F, 0x30, 0x31, 0x2F, 0x31, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2A, 0x28, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x29, 0x27, 0x2A, 0x28, 0x2A, 0x29, 0x29, 
   0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x28, 0x28, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 
   0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x1E, 0x1F, 0x1E, 0x01, 0x01, 0x01, 0x20, 0x21, 
   0x20, 0x28, 0x2A, 0x28, 0x1E, 0x1F, 0x1E, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 
   0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 
   0x46, 0x48, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4D, 0x4E, 0x4D, 0x56, 0x55, 0x56, 0x2C, 0x2D, 0x2C, 0x00, 0x00, 
   0x00, 0x39, 0x39, 0x39, 0x51, 0x50, 0x51, 0x4A, 0x4A, 0x4A, 0x4B, 0x4D, 0x4B, 0x47, 0x48, 0x47, 
   0x27, 0x25, 0x27, 0x46, 0x44, 0x46, 0x54, 0x53, 0x54, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 
   0x52, 0x51, 0x52, 0x50, 0x52, 0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4B, 0x4A, 
   0x4B, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x45, 0x47, 0x44, 
   0x44, 0x44, 0x41, 0x42, 0x41, 0x3E, 0x40, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 
   0x3A, 0x37, 0x39, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x35, 0x35, 0x35, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2E, 
   0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x20, 0x20, 0x20, 0x14, 0x15, 0x14, 0x34, 0x32, 0x34, 
   0x33, 0x33, 0x33, 0x22, 0x20, 0x22, 0x16, 0x17, 0x16, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2E, 0x2C, 0x2E, 0x22, 0x21, 0x22, 0x12, 0x11, 
   0x12, 0x21, 0x20, 0x21, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 
   0x1A, 0x1B, 0x1A, 0x1D, 0x1D, 0x1D, 0x27, 0x27, 0x27, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x20, 0x1F, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x23, 0x21, 0x23, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1F, 0x1F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1E, 0x1F, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1C, 0x1C, 0x1C, 0x19, 0x1B, 0x19, 0x17, 0x18, 0x17, 0x16, 0x17, 
   0x16, 0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 0x15, 0x15, 0x15, 0x13, 0x14, 0x13, 0x13, 0x13, 0x13, 
   0x11, 0x12, 0x11, 0x11, 0x12, 0x11, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2A, 0x2C, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x2F, 0x2F, 0x2F, 0x05, 0x05, 0x05, 0x12, 0x11, 
   0x12, 0x32, 0x31, 0x32, 0x0D, 0x10, 0x0D, 0x2E, 0x2F, 0x2E, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4B, 0x4C, 0x50, 0x4F, 0x50, 0x3D, 0x3C, 0x3D, 0x02, 0x02, 
   0x02, 0x40, 0x40, 0x40, 0x4F, 0x4F, 0x4F, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4D, 0x4B, 
   0x28, 0x28, 0x28, 0x33, 0x33, 0x33, 0x57, 0x57, 0x57, 0x52, 0x51, 0x52, 0x52, 0x53, 0x52, 0x52, 
   0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x50, 0x51, 0x4E, 0x4F, 0x4E, 0x4C, 0x4E, 0x4C, 0x4C, 0x4B, 
   0x4C, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 
   0x45, 0x45, 0x43, 0x43, 0x43, 0x41, 0x40, 0x41, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 
   0x3B, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 
   0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x29, 0x28, 
   0x29, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 0x1F, 0x1E, 0x1F, 0x09, 0x07, 0x09, 0x2A, 0x2B, 0x2A, 
   0x32, 0x31, 0x32, 0x21, 0x20, 0x21, 0x20, 0x22, 0x20, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x21, 0x23, 0x21, 0x19, 0x19, 
   0x19, 0x27, 0x24, 0x27, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x24, 0x23, 0x24, 
   0x11, 0x11, 0x11, 0x1F, 0x20, 0x1F, 0x26, 0x27, 0x26, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 
   0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1C, 0x1E, 0x1C, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x21, 0x21, 0x21, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1B, 0x1B, 0x1B, 0x19, 0x1A, 0x19, 0x18, 0x19, 0x18, 0x16, 0x17, 
   0x16, 0x15, 0x16, 0x15, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x13, 0x14, 0x13, 0x12, 0x13, 
   0x12, 0x11, 0x12, 0x11, 0x11, 0x11, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x29, 0x28, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x0D, 0x0D, 0x0D, 0x04, 0x04, 
   0x04, 0x2F, 0x30, 0x2F, 0x17, 0x17, 0x17, 0x2A, 0x29, 0x2A, 0x3D, 0x3D, 0x3D, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 
   0x40, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x49, 
   0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4E, 0x4E, 0x4E, 0x3B, 0x3B, 0x3B, 0x02, 0x02, 
   0x02, 0x32, 0x33, 0x32, 0x4F, 0x4F, 0x4F, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4C, 0x4D, 0x4C, 
   0x41, 0x41, 0x41, 0x34, 0x35, 0x34, 0x54, 0x55, 0x54, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 
   0x53, 0x53, 0x52, 0x53, 0x52, 0x52, 0x51, 0x52, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4C, 0x4C, 
   0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x46, 0x44, 0x44, 0x44, 0x44, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x39, 0x3B, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x36, 0x37, 0x36, 
   0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2E, 
   0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x23, 0x25, 0x23, 0x16, 0x16, 0x16, 0x2B, 0x2A, 0x2B, 
   0x32, 0x2F, 0x32, 0x20, 0x20, 0x20, 0x29, 0x2B, 0x29, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x2F, 
   0x31, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x2F, 
   0x31, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x35, 0x34, 0x35, 0x31, 0x30, 
   0x31, 0x2C, 0x2C, 0x2C, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x1F, 0x20, 0x1F, 
   0x0D, 0x0D, 0x0D, 0x21, 0x22, 0x21, 0x25, 0x26, 0x25, 0x23, 0x21, 0x23, 0x21, 0x20, 0x21, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x19, 0x1B, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x20, 0x21, 0x20, 
   0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 
   0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 
   0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1C, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x16, 0x16, 
   0x16, 0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x12, 0x13, 0x12, 0x10, 0x12, 0x10, 
   0x12, 0x10, 0x12, 0x10, 0x11, 0x10, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x30, 0x2E, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 
   0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x34, 0x34, 0x34, 0x20, 0x1F, 0x20, 0x00, 0x00, 
   0x00, 0x1F, 0x20, 0x1F, 0x2A, 0x2A, 0x2A, 0x21, 0x21, 0x21, 0x39, 0x3B, 0x39, 0x38, 0x39, 0x38, 
   0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3F, 0x3E, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4C, 0x4C, 0x4C, 0x42, 0x41, 0x42, 0x0F, 0x0F, 
   0x0F, 0x0C, 0x0D, 0x0C, 0x3B, 0x3E, 0x3B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4E, 0x4D, 
   0x55, 0x56, 0x55, 0x41, 0x41, 0x41, 0x36, 0x37, 0x36, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x53, 
   0x53, 0x53, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x51, 0x52, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 
   0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x46, 
   0x47, 0x46, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x3E, 0x3F, 0x3D, 0x3B, 
   0x3D, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 
   0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x29, 0x29, 0x29, 0x26, 0x27, 0x26, 0x32, 0x34, 0x32, 0x31, 0x30, 0x31, 
   0x27, 0x28, 0x27, 0x1A, 0x1A, 0x1A, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2B, 0x2B, 0x2B, 0x43, 0x43, 0x43, 0x47, 0x46, 
   0x47, 0x31, 0x30, 0x31, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x1C, 0x1C, 0x1C, 
   0x16, 0x17, 0x16, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x22, 0x21, 0x22, 0x20, 0x1F, 0x20, 0x1F, 
   0x1E, 0x1F, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1A, 
   0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x18, 0x1A, 0x18, 
   0x19, 0x1A, 0x19, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 
   0x1E, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1D, 0x1C, 0x1D, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x16, 0x17, 
   0x16, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x12, 0x13, 0x12, 0x12, 0x12, 0x12, 
   0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2D, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2A, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 
   0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x2D, 0x2A, 0x2D, 0x06, 0x05, 
   0x06, 0x11, 0x11, 0x11, 0x38, 0x37, 0x38, 0x21, 0x20, 0x21, 0x2A, 0x2A, 0x2A, 0x3B, 0x3B, 0x3B, 
   0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x34, 0x34, 
   0x34, 0x02, 0x02, 0x02, 0x12, 0x13, 0x12, 0x4B, 0x4B, 0x4B, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x51, 0x51, 0x51, 0x4D, 0x4D, 0x4D, 0x2E, 0x2E, 0x2E, 0x48, 0x47, 0x48, 0x5A, 0x59, 0x5A, 0x53, 
   0x53, 0x53, 0x53, 0x54, 0x53, 0x52, 0x53, 0x52, 0x54, 0x53, 0x54, 0x51, 0x51, 0x51, 0x4F, 0x50, 
   0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4A, 0x4C, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x47, 
   0x48, 0x47, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3E, 0x3D, 
   0x3E, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x31, 
   0x30, 0x31, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x21, 0x21, 0x21, 0x23, 0x21, 0x23, 0x3C, 0x3D, 0x3C, 0x30, 0x31, 0x30, 
   0x1D, 0x1A, 0x1D, 0x17, 0x18, 0x17, 0x37, 0x37, 0x37, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x33, 0x34, 0x33, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 
   0x36, 0x35, 0x36, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x37, 0x35, 0x37, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x34, 0x35, 0x34, 0x2F, 0x2E, 0x2F, 0x10, 0x10, 0x10, 0x30, 0x31, 0x30, 0x39, 0x39, 
   0x39, 0x2B, 0x2B, 0x2B, 0x29, 0x28, 0x29, 0x26, 0x26, 0x26, 0x1C, 0x1D, 0x1C, 0x16, 0x15, 0x16, 
   0x23, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x20, 0x22, 0x20, 0x20, 0x20, 0x1F, 0x1E, 0x1F, 0x1D, 
   0x1D, 0x1D, 0x1B, 0x1C, 0x1B, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x17, 0x18, 
   0x17, 0x19, 0x19, 0x19, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x18, 0x17, 0x18, 
   0x17, 0x17, 0x17, 0x1A, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x1F, 0x21, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1C, 0x1D, 0x1A, 0x1C, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x19, 0x1B, 0x19, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1A, 
   0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x17, 0x19, 0x17, 0x16, 0x17, 
   0x16, 0x16, 0x16, 0x16, 0x14, 0x15, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x11, 0x12, 0x11, 
   0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2E, 0x30, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2A, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x1B, 0x19, 
   0x1B, 0x06, 0x05, 0x06, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x22, 0x21, 0x22, 0x3A, 0x38, 0x3A, 
   0x3B, 0x3C, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x41, 0x42, 0x41, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x48, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x46, 
   0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 0x45, 0x45, 
   0x45, 0x0F, 0x0E, 0x0F, 0x03, 0x03, 0x03, 0x37, 0x37, 0x37, 0x51, 0x51, 0x51, 0x4E, 0x4F, 0x4E, 
   0x50, 0x4F, 0x50, 0x53, 0x55, 0x53, 0x4B, 0x4D, 0x4B, 0x41, 0x40, 0x41, 0x52, 0x51, 0x52, 0x57, 
   0x57, 0x57, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x51, 0x52, 0x51, 0x50, 0x50, 
   0x50, 0x4E, 0x4F, 0x4E, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x42, 0x41, 0x42, 0x40, 0x3F, 
   0x40, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x30, 0x2F, 0x24, 0x24, 0x24, 0x27, 0x26, 0x27, 0x34, 0x34, 0x34, 0x30, 0x30, 0x30, 
   0x1A, 0x1A, 0x1A, 0x20, 0x21, 0x20, 0x38, 0x37, 0x38, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x36, 0x2E, 0x2F, 0x2E, 0x13, 0x15, 0x13, 0x28, 0x2A, 0x28, 0x2E, 0x2E, 
   0x2E, 0x2B, 0x2B, 0x2B, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x14, 0x12, 0x14, 0x15, 0x16, 0x15, 
   0x23, 0x23, 0x23, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x17, 0x19, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 
   0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 
   0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x18, 0x1A, 0x18, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 
   0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x17, 0x17, 
   0x17, 0x15, 0x16, 0x15, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x13, 0x13, 0x13, 0x12, 0x13, 0x12, 
   0x12, 0x12, 0x12, 0x10, 0x11, 0x10, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 
   0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 
   0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 0x2D, 0x2B, 0x2F, 0x2E, 0x2F, 0x30, 0x2E, 0x30, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2A, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 
   0x25, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x2A, 0x28, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2C, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x32, 0x31, 0x2D, 0x2C, 
   0x2D, 0x04, 0x04, 0x04, 0x0B, 0x0A, 0x0B, 0x30, 0x32, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x3A, 0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3C, 
   0x3B, 0x3C, 0x3F, 0x3E, 0x3F, 0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x4D, 0x4D, 
   0x4D, 0x32, 0x31, 0x32, 0x00, 0x00, 0x00, 0x1E, 0x1D, 0x1E, 0x53, 0x53, 0x53, 0x4F, 0x4F, 0x4F, 
   0x50, 0x4F, 0x50, 0x53, 0x53, 0x53, 0x58, 0x59, 0x58, 0x46, 0x46, 0x46, 0x35, 0x34, 0x35, 0x56, 
   0x56, 0x56, 0x54, 0x55, 0x54, 0x54, 0x53, 0x54, 0x53, 0x53, 0x53, 0x51, 0x51, 0x51, 0x50, 0x50, 
   0x50, 0x50, 0x4E, 0x50, 0x4E, 0x4F, 0x4E, 0x4B, 0x4D, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 
   0x4A, 0x49, 0x49, 0x48, 0x49, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x43, 0x43, 0x43, 0x40, 0x40, 
   0x40, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 
   0x32, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x2E, 0x2E, 0x2E, 0x2B, 0x2A, 0x2B, 
   0x17, 0x19, 0x17, 0x2E, 0x2E, 0x2E, 0x38, 0x36, 0x38, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x35, 0x37, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x38, 0x37, 0x3A, 0x39, 0x3A, 0x2D, 0x2E, 0x2D, 0x23, 0x23, 0x23, 0x33, 0x35, 0x33, 0x2E, 0x2E, 
   0x2E, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x25, 0x25, 0x25, 0x10, 0x11, 0x10, 0x1C, 0x1A, 0x1C, 
   0x23, 0x21, 0x23, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1E, 0x1F, 0x1C, 0x1C, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x19, 0x1A, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x14, 0x16, 0x14, 
   0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x18, 0x19, 0x18, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1B, 
   0x1C, 0x1B, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 
   0x1B, 0x1C, 0x1B, 0x1C, 0x1D, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x19, 0x1A, 0x19, 0x19, 
   0x19, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x19, 0x18, 
   0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x17, 0x17, 
   0x17, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 
   0x11, 0x11, 0x11, 0x11, 0x12, 0x11, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x35, 
   0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x30, 0x32, 0x30, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 
   0x30, 0x30, 0x31, 0x2F, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 
   0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x33, 0x33, 
   0x33, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x1C, 0x1E, 0x1C, 0x3C, 0x3C, 0x3C, 0x28, 0x27, 0x28, 
   0x2F, 0x2C, 0x2F, 0x3B, 0x39, 0x3B, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3B, 0x3B, 0x3B, 0x3E, 
   0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 
   0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x4B, 0x4A, 
   0x4B, 0x43, 0x42, 0x43, 0x0A, 0x0B, 0x0A, 0x04, 0x04, 0x04, 0x2C, 0x2B, 0x2C, 0x4D, 0x4D, 0x4D, 
   0x51, 0x52, 0x51, 0x53, 0x52, 0x53, 0x56, 0x57, 0x56, 0x55, 0x54, 0x55, 0x25, 0x24, 0x25, 0x4A, 
   0x49, 0x4A, 0x5B, 0x5B, 0x5B, 0x54, 0x54, 0x54, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x50, 0x4F, 
   0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4B, 0x49, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x44, 0x44, 0x44, 0x40, 0x42, 
   0x40, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x26, 0x24, 0x26, 0x3E, 0x3C, 0x3E, 0x42, 0x3F, 0x42, 0x31, 0x2F, 0x31, 0x21, 0x23, 0x21, 
   0x1D, 0x1D, 0x1D, 0x38, 0x36, 0x38, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x37, 0x35, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 
   0x39, 0x38, 0x38, 0x37, 0x38, 0x3C, 0x3C, 0x3C, 0x3F, 0x3E, 0x3F, 0x37, 0x37, 0x37, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x1F, 0x1E, 0x1F, 0x15, 0x15, 0x15, 0x22, 0x22, 0x22, 
   0x22, 0x23, 0x22, 0x20, 0x21, 0x20, 0x20, 0x1F, 0x20, 0x1D, 0x1E, 0x1D, 0x1B, 0x1C, 0x1B, 0x1B, 
   0x1A, 0x1B, 0x19, 0x19, 0x19, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x16, 0x16, 
   0x16, 0x17, 0x16, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x19, 0x1A, 0x19, 0x1A, 0x1B, 0x1A, 0x1D, 
   0x1B, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 
   0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1B, 0x1C, 0x1B, 
   0x1D, 0x1B, 0x1D, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x1A, 0x18, 0x19, 0x19, 0x19, 0x19, 
   0x18, 0x19, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x1A, 0x1A, 
   0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 
   0x1C, 0x1D, 0x1C, 0x1A, 0x1C, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x18, 0x19, 0x17, 0x17, 0x17, 0x16, 
   0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x15, 0x16, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 
   0x11, 0x12, 0x11, 0x12, 0x12, 0x12, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 
   0x36, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 
   0x2E, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x27, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x27, 0x27, 0x27, 0x29, 0x27, 0x29, 
   0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2D, 0x2B, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x34, 
   0x33, 0x22, 0x23, 0x22, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x38, 0x37, 0x38, 0x26, 0x24, 0x26, 
   0x1C, 0x1E, 0x1C, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 0x3D, 0x40, 0x42, 0x40, 0x43, 0x43, 0x43, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x46, 0x48, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x46, 0x44, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x49, 0x49, 0x49, 0x35, 0x36, 0x35, 0x02, 0x03, 0x02, 0x05, 0x05, 0x05, 0x47, 0x48, 0x47, 
   0x52, 0x53, 0x52, 0x53, 0x54, 0x53, 0x55, 0x55, 0x55, 0x59, 0x59, 0x59, 0x42, 0x44, 0x42, 0x3F, 
   0x3D, 0x3F, 0x5A, 0x59, 0x5A, 0x55, 0x56, 0x55, 0x50, 0x52, 0x50, 0x51, 0x51, 0x51, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4C, 0x4E, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x4A, 0x49, 0x4B, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x48, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x42, 0x43, 
   0x42, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3B, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x1B, 0x1A, 0x1B, 0x2C, 0x2B, 0x2C, 0x36, 0x36, 0x36, 0x30, 0x2F, 0x30, 0x21, 0x21, 0x21, 
   0x2C, 0x2C, 0x2C, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 
   0x3B, 0x39, 0x2F, 0x2F, 0x2F, 0x42, 0x41, 0x42, 0x54, 0x55, 0x54, 0x34, 0x34, 0x34, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x16, 0x14, 0x16, 0x15, 0x15, 0x15, 0x24, 0x24, 0x24, 
   0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1D, 0x1D, 0x1D, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x17, 0x18, 0x17, 0x16, 0x16, 
   0x16, 0x15, 0x15, 0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 
   0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x17, 
   0x19, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x19, 0x19, 
   0x19, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x17, 0x18, 0x17, 0x15, 0x16, 0x15, 0x15, 
   0x15, 0x15, 0x15, 0x15, 0x15, 0x14, 0x16, 0x14, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x13, 0x13, 0x13, 0x12, 0x13, 0x12, 
   0x11, 0x12, 0x11, 0x12, 0x12, 0x12, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x35, 0x35, 
   0x35, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 
   0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 
   0x27, 0x29, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x29, 0x27, 0x28, 0x27, 0x28, 0x29, 0x27, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 
   0x33, 0x30, 0x2F, 0x30, 0x10, 0x11, 0x10, 0x00, 0x00, 0x00, 0x24, 0x24, 0x24, 0x2D, 0x2B, 0x2D, 
   0x16, 0x17, 0x16, 0x38, 0x36, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 
   0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x42, 0x40, 0x43, 0x44, 0x43, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x46, 
   0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 
   0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4C, 0x4B, 0x17, 0x17, 0x17, 0x00, 0x00, 0x00, 0x3E, 0x3F, 0x3E, 
   0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x56, 0x57, 0x56, 0x5E, 0x5E, 0x5E, 0x3B, 
   0x3B, 0x3B, 0x39, 0x39, 0x39, 0x54, 0x54, 0x54, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x50, 0x51, 
   0x50, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x44, 0x43, 
   0x44, 0x41, 0x40, 0x41, 0x3D, 0x3E, 0x3D, 0x3A, 0x3B, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2A, 0x29, 0x2A, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 
   0x36, 0x36, 0x36, 0x33, 0x33, 0x33, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x37, 0x36, 
   0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3A, 
   0x3C, 0x3A, 0x32, 0x33, 0x32, 0x42, 0x43, 0x42, 0x47, 0x47, 0x47, 0x32, 0x31, 0x32, 0x2F, 0x2E, 
   0x2F, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x13, 0x10, 0x13, 0x16, 0x17, 0x16, 0x22, 0x21, 0x22, 
   0x22, 0x22, 0x22, 0x20, 0x21, 0x20, 0x1E, 0x1F, 0x1E, 0x1D, 0x1D, 0x1D, 0x1A, 0x1A, 0x1A, 0x18, 
   0x19, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x17, 0x18, 0x17, 0x16, 0x17, 
   0x16, 0x14, 0x16, 0x14, 0x16, 0x15, 0x16, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x1A, 
   0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1D, 0x1C, 0x1D, 0x1D, 0x1B, 0x1D, 0x1B, 0x1B, 0x1B, 
   0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x16, 
   0x19, 0x16, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x19, 0x19, 
   0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1C, 0x1A, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1C, 0x1E, 0x1C, 0x1C, 0x1D, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 0x18, 0x15, 0x16, 0x15, 0x14, 
   0x15, 0x14, 0x14, 0x15, 0x14, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x17, 0x18, 
   0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x12, 0x12, 0x12, 
   0x11, 0x12, 0x11, 0x12, 0x12, 0x12, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x35, 0x36, 
   0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x2F, 0x31, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 
   0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x33, 0x34, 0x33, 0x2F, 0x31, 0x2F, 0x07, 0x07, 0x07, 0x15, 0x15, 0x15, 0x34, 0x35, 0x34, 
   0x15, 0x15, 0x15, 0x32, 0x31, 0x32, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x41, 0x41, 0x41, 0x43, 0x44, 0x43, 0x46, 0x46, 
   0x46, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x46, 0x47, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x46, 0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 
   0x47, 0x48, 0x49, 0x48, 0x4E, 0x4F, 0x4E, 0x37, 0x36, 0x37, 0x00, 0x00, 0x00, 0x37, 0x35, 0x37, 
   0x54, 0x55, 0x54, 0x53, 0x54, 0x53, 0x54, 0x53, 0x54, 0x53, 0x54, 0x53, 0x5C, 0x5C, 0x5C, 0x3D, 
   0x3E, 0x3D, 0x1E, 0x1D, 0x1E, 0x51, 0x51, 0x51, 0x54, 0x54, 0x54, 0x50, 0x52, 0x50, 0x50, 0x51, 
   0x50, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4C, 0x4D, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4A, 0x4C, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x43, 
   0x44, 0x40, 0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 0x37, 
   0x35, 0x37, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x2F, 0x2E, 0x2F, 0x24, 0x25, 
   0x24, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x30, 0x30, 0x30, 0x21, 0x1F, 0x21, 0x24, 0x24, 0x24, 
   0x37, 0x38, 0x37, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3E, 0x3C, 0x3E, 0x33, 
   0x35, 0x33, 0x36, 0x39, 0x36, 0x3F, 0x40, 0x3F, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2A, 0x2B, 0x15, 0x12, 0x15, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x1F, 0x1F, 0x1F, 0x1D, 0x1D, 0x1D, 0x19, 0x1B, 0x19, 0x18, 
   0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x16, 0x17, 
   0x16, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 
   0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1A, 0x1A, 0x1A, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1A, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x19, 0x1A, 0x19, 0x19, 
   0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1A, 0x19, 
   0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 0x18, 0x16, 0x16, 0x16, 0x14, 
   0x16, 0x14, 0x15, 0x16, 0x15, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x18, 0x16, 0x17, 0x18, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x14, 0x16, 0x14, 0x15, 0x16, 0x15, 0x13, 0x13, 0x13, 
   0x13, 0x12, 0x13, 0x12, 0x12, 0x12, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 
   0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x34, 0x36, 0x34, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 
   0x2F, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 
   0x29, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x2A, 0x28, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x11, 0x12, 0x11, 0x02, 0x02, 0x02, 0x32, 0x30, 0x32, 
   0x28, 0x28, 0x28, 0x2C, 0x2C, 0x2C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x3C, 
   0x3B, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x42, 0x40, 0x43, 0x44, 0x43, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 
   0x44, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x4C, 0x4C, 0x4C, 0x43, 0x43, 0x43, 0x0A, 0x0A, 0x0A, 0x10, 0x10, 0x10, 
   0x40, 0x40, 0x40, 0x54, 0x53, 0x54, 0x52, 0x53, 0x52, 0x54, 0x54, 0x54, 0x58, 0x59, 0x58, 0x43, 
   0x43, 0x43, 0x17, 0x17, 0x17, 0x4D, 0x4E, 0x4D, 0x54, 0x54, 0x54, 0x52, 0x52, 0x52, 0x51, 0x51, 
   0x51, 0x51, 0x50, 0x51, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x47, 0x49, 0x47, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x42, 0x43, 
   0x42, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3B, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 
   0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x2D, 0x2D, 0x2D, 0x15, 0x15, 
   0x15, 0x33, 0x31, 0x33, 0x37, 0x36, 0x37, 0x2D, 0x2F, 0x2D, 0x1B, 0x1D, 0x1B, 0x29, 0x26, 0x29, 
   0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x3C, 0x3A, 0x3C, 0x3E, 0x3E, 0x3E, 0x24, 
   0x23, 0x24, 0x2A, 0x2B, 0x2A, 0x43, 0x44, 0x43, 0x34, 0x34, 0x34, 0x32, 0x31, 0x32, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x27, 0x25, 0x27, 0x18, 0x17, 0x18, 0x26, 0x26, 0x26, 0x24, 0x23, 0x24, 
   0x22, 0x21, 0x22, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1C, 0x1E, 0x1C, 0x1B, 0x1C, 0x1B, 0x19, 
   0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x16, 0x16, 
   0x16, 0x15, 0x15, 0x15, 0x16, 0x15, 0x16, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x19, 0x1A, 0x19, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x19, 0x1B, 0x19, 0x19, 0x1B, 0x19, 0x19, 
   0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x1A, 0x18, 0x1A, 0x18, 0x1A, 
   0x18, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1B, 0x1C, 0x17, 0x19, 0x17, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x18, 0x19, 
   0x18, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x15, 0x15, 0x15, 
   0x14, 0x13, 0x14, 0x12, 0x13, 0x12, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x35, 0x37, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2B, 
   0x2D, 0x2B, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2C, 0x2A, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 0x33, 
   0x34, 0x36, 0x35, 0x36, 0x38, 0x38, 0x38, 0x28, 0x28, 0x28, 0x00, 0x00, 0x00, 0x14, 0x14, 0x14, 
   0x3F, 0x3F, 0x3F, 0x29, 0x29, 0x29, 0x24, 0x24, 0x24, 0x3E, 0x3E, 0x3E, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x41, 0x42, 0x41, 0x43, 0x44, 0x43, 0x45, 0x46, 
   0x45, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 
   0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4C, 0x4A, 0x4C, 0x4D, 0x4C, 0x30, 0x31, 0x30, 0x05, 0x04, 0x05, 
   0x32, 0x32, 0x32, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x56, 0x56, 0x56, 0x4C, 
   0x4A, 0x4C, 0x2B, 0x29, 0x2B, 0x4E, 0x4D, 0x4E, 0x5A, 0x59, 0x5A, 0x53, 0x52, 0x53, 0x51, 0x52, 
   0x51, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4B, 0x4B, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x48, 0x49, 0x48, 0x46, 0x48, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x42, 0x43, 
   0x42, 0x3F, 0x40, 0x3F, 0x3E, 0x3C, 0x3E, 0x3C, 0x3B, 0x3C, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x2D, 0x2C, 0x2D, 0x16, 0x14, 
   0x16, 0x2A, 0x29, 0x2A, 0x32, 0x33, 0x32, 0x29, 0x2A, 0x29, 0x0F, 0x10, 0x0F, 0x27, 0x27, 0x27, 
   0x31, 0x32, 0x31, 0x36, 0x34, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x38, 
   0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 
   0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3E, 0x3E, 0x3E, 0x1E, 
   0x1C, 0x1E, 0x15, 0x15, 0x15, 0x38, 0x37, 0x38, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x30, 0x2E, 
   0x30, 0x2E, 0x2D, 0x2E, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x2A, 0x28, 0x2A, 0x24, 0x24, 0x24, 
   0x22, 0x23, 0x22, 0x20, 0x21, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x18, 0x17, 0x18, 0x19, 0x18, 0x19, 0x17, 0x18, 0x17, 
   0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x18, 0x17, 0x18, 0x1A, 0x1A, 0x1A, 0x1B, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1D, 
   0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x19, 0x1B, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x18, 0x19, 0x18, 0x16, 0x18, 0x16, 0x16, 
   0x16, 0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 
   0x1A, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x17, 0x17, 0x17, 
   0x15, 0x15, 0x15, 0x13, 0x14, 0x13, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2B, 0x2D, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x31, 0x33, 0x31, 0x35, 0x34, 
   0x35, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x30, 0x32, 0x30, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 
   0x27, 0x28, 0x27, 0x37, 0x39, 0x37, 0x1F, 0x20, 0x1F, 0x33, 0x32, 0x33, 0x3B, 0x3D, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x46, 0x45, 
   0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x49, 0x49, 
   0x49, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4D, 0x4D, 0x4D, 0x41, 0x41, 0x41, 0x1C, 0x1C, 0x1C, 
   0x4E, 0x4E, 0x4E, 0x56, 0x56, 0x56, 0x50, 0x51, 0x50, 0x52, 0x53, 0x52, 0x53, 0x54, 0x53, 0x57, 
   0x57, 0x57, 0x50, 0x50, 0x50, 0x3E, 0x3E, 0x3E, 0x56, 0x57, 0x56, 0x55, 0x55, 0x55, 0x52, 0x52, 
   0x52, 0x50, 0x52, 0x50, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x50, 0x51, 0x50, 
   0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x49, 0x4B, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x42, 0x42, 
   0x42, 0x40, 0x3F, 0x40, 0x3D, 0x3B, 0x3D, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x2C, 0x2D, 0x2C, 0x22, 0x23, 
   0x22, 0x30, 0x30, 0x30, 0x33, 0x33, 0x33, 0x28, 0x27, 0x28, 0x08, 0x08, 0x08, 0x2E, 0x2E, 0x2E, 
   0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 
   0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3E, 0x3D, 0x3E, 0x1A, 
   0x1A, 0x1A, 0x14, 0x14, 0x14, 0x37, 0x36, 0x37, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x29, 0x28, 0x29, 0x1B, 0x1A, 0x1B, 0x25, 0x26, 0x25, 0x28, 0x27, 0x28, 0x24, 0x24, 0x24, 
   0x22, 0x23, 0x22, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x16, 0x17, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 0x18, 0x16, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 
   0x16, 0x18, 0x16, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x1A, 
   0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 0x1B, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x17, 
   0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x1A, 
   0x18, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 0x18, 
   0x16, 0x16, 0x16, 0x13, 0x15, 0x13, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3A, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 
   0x39, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2C, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x35, 
   0x35, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x2B, 0x29, 0x2B, 0x02, 0x02, 0x02, 
   0x04, 0x05, 0x04, 0x38, 0x39, 0x38, 0x33, 0x33, 0x33, 0x24, 0x23, 0x24, 0x3D, 0x41, 0x3D, 0x3D, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x40, 0x3F, 0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x46, 0x45, 
   0x46, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x47, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x47, 0x45, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4D, 0x4D, 0x4D, 0x4C, 0x4A, 0x4C, 0x16, 0x17, 0x16, 
   0x19, 0x19, 0x19, 0x44, 0x45, 0x44, 0x54, 0x54, 0x54, 0x51, 0x52, 0x51, 0x51, 0x53, 0x51, 0x56, 
   0x56, 0x56, 0x61, 0x60, 0x61, 0x33, 0x34, 0x33, 0x40, 0x40, 0x40, 0x58, 0x59, 0x58, 0x54, 0x53, 
   0x54, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 
   0x4F, 0x50, 0x4F, 0x4E, 0x50, 0x4E, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x4B, 0x4C, 0x4B, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 
   0x41, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x38, 0x39, 0x38, 0x40, 0x41, 
   0x40, 0x36, 0x36, 0x36, 0x33, 0x33, 0x33, 0x26, 0x26, 0x26, 0x10, 0x11, 0x10, 0x32, 0x31, 0x32, 
   0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x32, 
   0x32, 0x32, 0x2D, 0x2D, 0x2D, 0x37, 0x37, 0x37, 0x34, 0x33, 0x34, 0x32, 0x31, 0x32, 0x34, 0x34, 
   0x34, 0x21, 0x20, 0x21, 0x14, 0x14, 0x14, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x24, 0x26, 0x24, 
   0x24, 0x23, 0x24, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x1F, 0x20, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1D, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x16, 0x18, 0x16, 0x15, 0x17, 
   0x15, 0x17, 0x16, 0x17, 0x16, 0x18, 0x16, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 
   0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x16, 0x18, 0x16, 0x19, 0x19, 0x19, 0x1A, 
   0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 
   0x1B, 0x1E, 0x1C, 0x1E, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1C, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1A, 0x1C, 0x1A, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x18, 
   0x18, 0x18, 0x17, 0x18, 0x17, 0x18, 0x1A, 0x18, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1B, 0x1A, 0x1B, 0x17, 0x19, 0x17, 
   0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x3C, 0x3D, 0x3C, 0x16, 0x17, 0x16, 
   0x00, 0x00, 0x00, 0x2E, 0x2E, 0x2E, 0x42, 0x44, 0x42, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x41, 0x40, 0x41, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x45, 0x44, 
   0x45, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4D, 0x4D, 0x4D, 0x50, 0x50, 0x50, 0x19, 0x1A, 0x19, 
   0x00, 0x00, 0x00, 0x19, 0x1A, 0x19, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x52, 0x53, 0x52, 0x51, 
   0x53, 0x51, 0x57, 0x57, 0x57, 0x44, 0x45, 0x44, 0x25, 0x24, 0x25, 0x51, 0x50, 0x51, 0x54, 0x56, 
   0x54, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 
   0x50, 0x51, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 
   0x4A, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 
   0x42, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 
   0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 
   0x3A, 0x3B, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x2D, 0x30, 0x2D, 0x3A, 0x3A, 0x3A, 0x53, 0x53, 
   0x53, 0x35, 0x36, 0x35, 0x32, 0x32, 0x32, 0x1D, 0x20, 0x1D, 0x27, 0x27, 0x27, 0x36, 0x35, 0x36, 
   0x34, 0x35, 0x34, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 
   0x38, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x46, 
   0x47, 0x46, 0x48, 0x49, 0x48, 0x36, 0x38, 0x36, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x1F, 0x1F, 0x1F, 0x0C, 0x0C, 0x0C, 0x28, 0x26, 0x28, 0x29, 0x28, 0x29, 0x26, 0x27, 0x26, 
   0x24, 0x25, 0x24, 0x23, 0x24, 0x23, 0x21, 0x22, 0x21, 0x20, 0x21, 0x20, 0x1E, 0x1F, 0x1E, 0x1C, 
   0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x16, 0x19, 0x16, 0x18, 0x18, 0x18, 0x17, 0x17, 
   0x17, 0x18, 0x1A, 0x18, 0x19, 0x1A, 0x19, 0x1B, 0x1B, 0x1B, 0x1A, 0x1C, 0x1A, 0x1B, 0x1B, 0x1B, 
   0x19, 0x1A, 0x19, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x17, 0x19, 0x17, 0x19, 0x19, 0x19, 0x19, 
   0x1A, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 
   0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x21, 0x22, 0x21, 0x22, 0x20, 0x22, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x1F, 0x21, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1F, 0x1D, 0x1F, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1A, 0x1C, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x16, 
   0x18, 0x16, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 
   0x1C, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 
   0x16, 0x17, 0x16, 0x18, 0x17, 0x18, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 
   0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3C, 0x3B, 0x2F, 0x2F, 0x2F, 
   0x01, 0x01, 0x01, 0x14, 0x13, 0x14, 0x3D, 0x3D, 0x3D, 0x3A, 0x39, 0x3A, 0x22, 0x21, 0x22, 0x37, 
   0x35, 0x37, 0x45, 0x43, 0x45, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x4B, 0x4C, 0x4B, 0x51, 0x51, 0x51, 0x3B, 0x3D, 0x3B, 
   0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x14, 0x13, 0x14, 0x42, 0x42, 0x42, 0x55, 0x55, 0x55, 0x52, 
   0x53, 0x52, 0x53, 0x54, 0x53, 0x51, 0x52, 0x51, 0x2C, 0x2C, 0x2C, 0x44, 0x44, 0x44, 0x5C, 0x5C, 
   0x5C, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 
   0x4F, 0x51, 0x4F, 0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 0x47, 
   0x49, 0x47, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x42, 0x42, 
   0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3A, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x48, 0x47, 0x48, 0x3F, 0x41, 
   0x3F, 0x35, 0x35, 0x35, 0x30, 0x30, 0x30, 0x1C, 0x1D, 0x1C, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x37, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x38, 0x3A, 0x36, 0x35, 0x36, 0x1D, 0x1F, 0x1D, 0x40, 
   0x41, 0x40, 0x49, 0x49, 0x49, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x20, 0x22, 0x20, 0x0D, 0x0E, 0x0D, 0x27, 0x26, 0x27, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 
   0x25, 0x27, 0x25, 0x24, 0x25, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x1F, 0x1F, 0x1F, 0x1C, 
   0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x16, 0x18, 0x16, 0x18, 0x19, 
   0x18, 0x18, 0x1A, 0x18, 0x1C, 0x1B, 0x1C, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x19, 
   0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 
   0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x22, 
   0x22, 0x22, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1A, 0x1B, 0x1A, 0x18, 0x19, 0x18, 0x18, 
   0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 
   0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x38, 
   0x39, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x33, 0x31, 0x31, 
   0x33, 0x31, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2D, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x2F, 0x33, 0x32, 0x33, 0x35, 0x33, 0x35, 0x34, 0x35, 0x34, 0x36, 0x37, 0x36, 0x38, 0x37, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3C, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 0x3E, 0x3E, 0x3E, 
   0x22, 0x22, 0x22, 0x00, 0x00, 0x00, 0x25, 0x24, 0x25, 0x42, 0x40, 0x42, 0x3E, 0x3C, 0x3E, 0x29, 
   0x28, 0x29, 0x3A, 0x3A, 0x3A, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x47, 0x48, 0x47, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 
   0x46, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x4B, 0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 0x53, 0x54, 0x53, 
   0x4E, 0x4F, 0x4E, 0x0C, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x25, 0x25, 0x25, 0x54, 0x53, 0x54, 0x51, 
   0x53, 0x51, 0x51, 0x52, 0x51, 0x55, 0x55, 0x55, 0x53, 0x54, 0x53, 0x38, 0x37, 0x38, 0x47, 0x47, 
   0x47, 0x57, 0x57, 0x57, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x51, 0x52, 0x51, 0x52, 0x51, 0x52, 
   0x4F, 0x50, 0x4F, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4A, 0x4B, 0x4A, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 
   0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3A, 0x3C, 0x3B, 0x3A, 0x3B, 0x2B, 0x2B, 0x2B, 0x36, 0x38, 0x36, 0x4E, 0x4E, 0x4E, 0x32, 0x33, 
   0x32, 0x34, 0x35, 0x34, 0x25, 0x24, 0x25, 0x27, 0x27, 0x27, 0x34, 0x33, 0x34, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 
   0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x39, 0x3B, 0x39, 0x39, 0x39, 
   0x37, 0x39, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x34, 0x33, 0x34, 0x10, 0x12, 0x10, 0x2B, 
   0x2B, 0x2B, 0x3A, 0x39, 0x3A, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 0x2E, 0x2F, 
   0x2E, 0x21, 0x20, 0x21, 0x1B, 0x1B, 0x1B, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x21, 0x20, 0x21, 0x1E, 
   0x1D, 0x1E, 0x1A, 0x1B, 0x1A, 0x18, 0x1A, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x19, 0x19, 0x1A, 
   0x19, 0x1A, 0x1B, 0x1A, 0x1D, 0x1C, 0x1D, 0x1D, 0x1E, 0x1D, 0x1F, 0x1D, 0x1F, 0x1E, 0x1D, 0x1E, 
   0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1C, 0x1A, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 
   0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x21, 0x22, 0x21, 0x23, 0x21, 0x23, 0x25, 0x23, 0x25, 
   0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x25, 0x27, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x22, 
   0x22, 0x22, 0x23, 0x22, 0x23, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 0x1B, 0x1C, 0x1B, 0x19, 0x1A, 0x19, 0x19, 
   0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x1A, 0x18, 0x1B, 0x1B, 0x1B, 0x1D, 0x1C, 0x1D, 0x1D, 0x1E, 
   0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 
   0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x42, 
   0x40, 0x42, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x38, 0x38, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 
   0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 
   0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x32, 
   0x30, 0x32, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x3A, 0x38, 
   0x3A, 0x39, 0x39, 0x39, 0x3C, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 
   0x37, 0x37, 0x37, 0x06, 0x06, 0x06, 0x03, 0x03, 0x03, 0x37, 0x37, 0x37, 0x48, 0x48, 0x48, 0x1F, 
   0x1F, 0x1F, 0x29, 0x29, 0x29, 0x46, 0x47, 0x46, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 
   0x46, 0x47, 0x48, 0x47, 0x48, 0x4A, 0x48, 0x4C, 0x4C, 0x4C, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 0x50, 
   0x53, 0x53, 0x53, 0x3D, 0x3D, 0x3D, 0x0B, 0x0A, 0x0B, 0x0D, 0x0D, 0x0D, 0x51, 0x52, 0x51, 0x53, 
   0x53, 0x53, 0x50, 0x51, 0x50, 0x52, 0x53, 0x52, 0x5B, 0x5B, 0x5B, 0x40, 0x3F, 0x40, 0x2F, 0x2F, 
   0x2F, 0x57, 0x57, 0x57, 0x53, 0x54, 0x53, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x52, 0x51, 0x52, 
   0x4F, 0x50, 0x4F, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 
   0x4A, 0x48, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3D, 0x3F, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x3C, 0x3A, 0x3C, 0x3C, 0x3A, 0x3C, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 
   0x3B, 0x3D, 0x3E, 0x3D, 0x3E, 0x2A, 0x2A, 0x2A, 0x36, 0x36, 0x36, 0x40, 0x40, 0x40, 0x35, 0x36, 
   0x35, 0x2C, 0x2B, 0x2C, 0x1F, 0x1F, 0x1F, 0x31, 0x33, 0x31, 0x35, 0x34, 0x35, 0x39, 0x38, 0x39, 
   0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x42, 0x43, 0x42, 0x48, 0x49, 0x48, 0x3E, 
   0x3F, 0x3E, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x2F, 0x2F, 0x2F, 0x2A, 0x2A, 
   0x2A, 0x18, 0x1B, 0x18, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x24, 0x25, 0x24, 0x23, 0x23, 0x23, 0x21, 0x21, 0x21, 0x1E, 
   0x1E, 0x1E, 0x1A, 0x1B, 0x1A, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 
   0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 0x1E, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x25, 0x25, 0x25, 
   0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x23, 
   0x24, 0x23, 0x24, 0x23, 0x24, 0x21, 0x22, 0x21, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1C, 0x1B, 0x1C, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x40, 
   0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x39, 0x3A, 
   0x39, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2E, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x34, 
   0x31, 0x34, 0x33, 0x34, 0x33, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 
   0x39, 0x3B, 0x3C, 0x3B, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x43, 0x44, 0x43, 0x23, 0x24, 0x23, 0x00, 0x00, 0x00, 0x21, 0x21, 0x21, 0x40, 0x43, 0x40, 0x29, 
   0x28, 0x29, 0x28, 0x28, 0x28, 0x47, 0x47, 0x47, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x50, 0x50, 0x50, 0x57, 0x57, 0x57, 0x3D, 0x3F, 0x3D, 0x07, 0x07, 0x07, 0x44, 0x44, 0x44, 0x50, 
   0x52, 0x50, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x56, 0x55, 0x56, 0x3F, 0x3E, 
   0x3F, 0x3B, 0x3C, 0x3B, 0x52, 0x55, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 
   0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4A, 0x4B, 0x4A, 0x48, 
   0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x44, 0x45, 0x44, 0x42, 0x44, 
   0x42, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x3F, 0x3D, 0x3F, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3E, 0x3C, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 
   0x3C, 0x3B, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x36, 0x38, 0x36, 0x3A, 0x39, 0x3A, 0x3A, 0x3B, 
   0x3A, 0x1E, 0x1F, 0x1E, 0x2A, 0x2A, 0x2A, 0x3B, 0x3B, 0x3B, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x37, 0x39, 0x37, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 
   0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x2F, 0x30, 0x2F, 0x3B, 0x3C, 0x3B, 0x64, 0x63, 0x64, 0x45, 
   0x46, 0x45, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x21, 0x21, 
   0x21, 0x14, 0x14, 0x14, 0x26, 0x26, 0x26, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x21, 0x21, 0x21, 0x1E, 
   0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1D, 
   0x1C, 0x1E, 0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 0x1B, 0x1D, 0x1B, 0x1D, 0x1D, 0x1D, 0x1C, 
   0x1D, 0x1C, 0x1E, 0x1D, 0x1E, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 
   0x22, 0x23, 0x21, 0x23, 0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 
   0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x26, 0x28, 0x25, 0x26, 0x25, 0x24, 
   0x24, 0x24, 0x25, 0x23, 0x25, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x21, 0x22, 
   0x21, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x20, 0x20, 0x20, 
   0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1D, 0x1D, 0x1D, 0x1B, 0x1D, 0x1B, 0x1D, 0x1C, 0x1D, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1C, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 
   0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1F, 0x1D, 0x1F, 0x3F, 0x40, 0x3F, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 
   0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 
   0x3A, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x41, 0x43, 0x41, 0x44, 0x43, 0x44, 
   0x44, 0x44, 0x44, 0x42, 0x41, 0x42, 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x06, 0x07, 0x06, 0x33, 
   0x34, 0x33, 0x2B, 0x2C, 0x2B, 0x37, 0x38, 0x37, 0x48, 0x4A, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4D, 0x4D, 0x4D, 
   0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x56, 0x56, 0x56, 0x21, 0x22, 0x21, 0x00, 0x00, 0x00, 0x2D, 
   0x2E, 0x2D, 0x54, 0x56, 0x54, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x53, 0x54, 0x53, 0x50, 0x50, 
   0x50, 0x28, 0x28, 0x28, 0x4F, 0x50, 0x4F, 0x51, 0x52, 0x51, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4D, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x42, 0x42, 0x42, 0x43, 0x41, 0x43, 0x3E, 0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3A, 
   0x39, 0x3A, 0x1F, 0x1E, 0x1F, 0x46, 0x47, 0x46, 0x4D, 0x4E, 0x4D, 0x3C, 0x3E, 0x3C, 0x2C, 0x2D, 
   0x2C, 0x22, 0x24, 0x22, 0x3E, 0x3C, 0x3E, 0x3C, 0x3A, 0x3C, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 
   0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x2E, 0x2E, 0x2E, 0x19, 0x18, 0x19, 0x2B, 0x2B, 0x2B, 0x33, 
   0x33, 0x33, 0x32, 0x33, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x17, 0x18, 
   0x17, 0x1D, 0x1F, 0x1D, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 
   0x21, 0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x20, 0x20, 
   0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x20, 0x21, 0x20, 0x23, 0x21, 0x23, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x25, 0x24, 
   0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x25, 
   0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x24, 0x24, 
   0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 
   0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1C, 
   0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x20, 0x1F, 0x20, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x40, 
   0x42, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 
   0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x34, 0x32, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x3B, 0x3A, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x40, 0x3F, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x45, 0x43, 0x46, 0x45, 0x46, 
   0x45, 0x46, 0x45, 0x48, 0x47, 0x48, 0x39, 0x39, 0x39, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x20, 
   0x21, 0x20, 0x38, 0x39, 0x38, 0x27, 0x27, 0x27, 0x4D, 0x4D, 0x4D, 0x47, 0x47, 0x47, 0x47, 0x48, 
   0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x49, 0x48, 0x49, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x55, 0x54, 0x55, 0x43, 0x44, 0x43, 0x0D, 0x0E, 0x0D, 0x25, 
   0x24, 0x25, 0x56, 0x56, 0x56, 0x50, 0x51, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x51, 0x52, 
   0x51, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x4F, 0x50, 0x4F, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x43, 0x44, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3F, 0x3D, 0x3F, 
   0x3F, 0x3D, 0x3F, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3C, 0x3E, 0x1D, 0x1C, 0x1D, 0x40, 0x3F, 0x40, 0x45, 0x47, 0x45, 0x3E, 0x3D, 0x3E, 0x1A, 0x1B, 
   0x1A, 0x30, 0x30, 0x30, 0x3F, 0x3F, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3B, 0x39, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2E, 0x2F, 0x2F, 0x2F, 0x32, 
   0x30, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x25, 0x26, 0x25, 0x19, 0x19, 
   0x19, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x28, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x25, 0x24, 0x25, 0x22, 
   0x22, 0x22, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 
   0x23, 0x21, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x23, 
   0x21, 0x23, 0x22, 0x22, 0x22, 0x25, 0x23, 0x25, 0x24, 0x24, 0x24, 0x26, 0x24, 0x26, 0x26, 0x25, 
   0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x2B, 0x29, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x26, 
   0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 
   0x22, 0x23, 0x22, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x21, 0x20, 0x20, 0x1F, 0x20, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1F, 0x20, 0x1F, 0x20, 0x20, 
   0x20, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 
   0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3C, 0x3E, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x33, 0x33, 0x33, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x30, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 
   0x35, 0x33, 0x35, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 
   0x37, 0x36, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3C, 0x3B, 0x3C, 0x3F, 0x3F, 
   0x3F, 0x41, 0x41, 0x41, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x42, 0x43, 0x42, 0x19, 0x18, 0x19, 0x0E, 
   0x0F, 0x0E, 0x44, 0x44, 0x44, 0x23, 0x23, 0x23, 0x42, 0x41, 0x42, 0x4A, 0x4A, 0x4A, 0x48, 0x47, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x46, 
   0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x47, 
   0x46, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4C, 0x4B, 0x4C, 
   0x4E, 0x4D, 0x4E, 0x4F, 0x50, 0x4F, 0x51, 0x52, 0x51, 0x53, 0x53, 0x53, 0x24, 0x23, 0x24, 0x2D, 
   0x2C, 0x2D, 0x59, 0x5A, 0x59, 0x51, 0x51, 0x51, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x51, 0x54, 
   0x51, 0x42, 0x43, 0x42, 0x1F, 0x1E, 0x1F, 0x46, 0x47, 0x46, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 
   0x49, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x44, 0x43, 
   0x44, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x40, 0x3F, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x46, 0x46, 0x46, 0x50, 
   0x4F, 0x50, 0x31, 0x31, 0x31, 0x34, 0x34, 0x34, 0x44, 0x45, 0x44, 0x3A, 0x3C, 0x3A, 0x1B, 0x1D, 
   0x1B, 0x36, 0x35, 0x36, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 
   0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 
   0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x22, 0x24, 0x22, 0x39, 0x39, 0x39, 0x40, 0x3F, 0x40, 0x30, 
   0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x1C, 0x1D, 0x1C, 0x1F, 0x1F, 
   0x1F, 0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 
   0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 
   0x24, 0x24, 0x23, 0x23, 0x23, 0x22, 0x21, 0x22, 0x20, 0x21, 0x20, 0x22, 0x21, 0x22, 0x22, 0x22, 
   0x22, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x26, 0x26, 0x26, 0x28, 0x26, 0x28, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 
   0x24, 0x24, 0x24, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x22, 
   0x22, 0x22, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 
   0x20, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 
   0x35, 0x33, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2D, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2D, 0x2B, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x34, 0x33, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x3B, 0x3A, 0x3B, 0x40, 0x3D, 0x40, 0x3F, 0x3F, 
   0x3F, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4C, 0x4B, 0x4C, 0x30, 0x2F, 0x30, 0x02, 
   0x01, 0x02, 0x2D, 0x2C, 0x2D, 0x39, 0x39, 0x39, 0x34, 0x33, 0x34, 0x54, 0x55, 0x54, 0x4E, 0x4E, 
   0x4E, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x46, 0x44, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x47, 
   0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4B, 0x4A, 0x4B, 
   0x4C, 0x4C, 0x4C, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x52, 0x53, 0x52, 0x2E, 0x2E, 0x2E, 0x07, 
   0x08, 0x07, 0x1D, 0x1E, 0x1D, 0x47, 0x47, 0x47, 0x51, 0x53, 0x51, 0x4D, 0x4E, 0x4D, 0x4F, 0x4F, 
   0x4F, 0x4B, 0x4B, 0x4B, 0x17, 0x17, 0x17, 0x3D, 0x3D, 0x3D, 0x4F, 0x50, 0x4F, 0x4B, 0x4A, 0x4B, 
   0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x48, 0x4A, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x43, 0x45, 0x43, 0x44, 0x44, 0x44, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 
   0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 0x3C, 0x50, 
   0x51, 0x50, 0x5C, 0x5D, 0x5C, 0x46, 0x47, 0x46, 0x41, 0x41, 0x41, 0x2B, 0x2D, 0x2B, 0x32, 0x30, 
   0x32, 0x45, 0x43, 0x45, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x37, 0x3E, 0x3E, 0x3E, 0x43, 0x44, 0x43, 0x41, 0x43, 0x41, 0x34, 0x33, 0x34, 0x2E, 
   0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x30, 0x2F, 0x30, 0x2C, 0x2B, 0x2C, 0x1C, 0x1B, 0x1C, 0x28, 0x26, 
   0x28, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x26, 
   0x25, 0x26, 0x24, 0x24, 0x24, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x23, 0x25, 0x24, 0x24, 
   0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x24, 0x23, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x25, 0x23, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2D, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x27, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x26, 0x26, 0x26, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 
   0x23, 0x25, 0x23, 0x26, 0x26, 0x26, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 
   0x41, 0x40, 0x3F, 0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 
   0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 
   0x34, 0x35, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 
   0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x37, 0x36, 
   0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 
   0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x34, 0x36, 0x36, 0x36, 0x38, 
   0x37, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x3C, 0x3A, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 
   0x40, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 
   0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x0E, 
   0x0F, 0x0E, 0x08, 0x08, 0x08, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x4B, 0x4B, 0x4B, 0x42, 0x41, 
   0x42, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x49, 0x4B, 0x49, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 
   0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x46, 0x44, 0x45, 
   0x46, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4B, 0x49, 
   0x4B, 0x4C, 0x4B, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 0x50, 0x53, 0x54, 0x53, 0x4A, 0x4A, 0x4A, 0x06, 
   0x06, 0x06, 0x00, 0x00, 0x00, 0x25, 0x23, 0x25, 0x50, 0x52, 0x50, 0x4E, 0x4E, 0x4E, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4B, 0x4C, 0x2C, 0x2A, 0x2C, 0x38, 0x39, 0x38, 0x51, 0x52, 0x51, 0x4A, 0x4B, 0x4A, 
   0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x36, 0x35, 0x36, 0x45, 
   0x44, 0x45, 0x66, 0x65, 0x66, 0x50, 0x50, 0x50, 0x3F, 0x3E, 0x3F, 0x1D, 0x1C, 0x1D, 0x44, 0x43, 
   0x44, 0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 
   0x41, 0x42, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 
   0x3E, 0x3C, 0x3B, 0x3C, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 
   0x32, 0x31, 0x32, 0x46, 0x47, 0x46, 0x58, 0x58, 0x58, 0x3E, 0x3E, 0x3E, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x16, 0x16, 0x16, 0x1F, 0x20, 0x1F, 0x30, 0x2F, 
   0x30, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x26, 
   0x26, 0x26, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x25, 0x23, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 
   0x27, 0x28, 0x26, 0x28, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 
   0x26, 0x26, 0x27, 0x25, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 
   0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 
   0x22, 0x25, 0x23, 0x25, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x35, 0x34, 0x35, 0x33, 
   0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x33, 0x31, 0x33, 
   0x32, 0x35, 0x32, 0x37, 0x38, 0x37, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x38, 
   0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3F, 0x3D, 0x3F, 0x41, 0x40, 
   0x41, 0x43, 0x43, 0x43, 0x46, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 
   0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 0x51, 0x51, 0x51, 0x28, 
   0x29, 0x28, 0x00, 0x00, 0x00, 0x1E, 0x1F, 0x1E, 0x51, 0x53, 0x51, 0x4C, 0x4D, 0x4C, 0x37, 0x37, 
   0x37, 0x41, 0x42, 0x41, 0x51, 0x51, 0x51, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x45, 0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x46, 
   0x45, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x51, 0x51, 0x51, 0x55, 0x55, 0x55, 0x3F, 
   0x40, 0x3F, 0x0A, 0x0C, 0x0A, 0x08, 0x08, 0x08, 0x4E, 0x4E, 0x4E, 0x50, 0x4F, 0x50, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4C, 0x4B, 0x44, 0x44, 0x44, 0x2D, 0x2D, 0x2D, 0x47, 0x46, 0x47, 0x4B, 0x4C, 0x4B, 
   0x46, 0x48, 0x46, 0x47, 0x46, 0x47, 0x47, 0x46, 0x47, 0x48, 0x46, 0x48, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x3E, 0x3C, 0x3E, 0x37, 0x37, 0x37, 0x56, 
   0x55, 0x56, 0x58, 0x57, 0x58, 0x48, 0x47, 0x48, 0x36, 0x39, 0x36, 0x18, 0x18, 0x18, 0x41, 0x41, 
   0x41, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 
   0x42, 0x44, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x43, 
   0x42, 0x43, 0x43, 0x41, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3E, 0x3E, 
   0x3E, 0x3B, 0x3C, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x39, 0x37, 0x35, 0x34, 0x35, 
   0x25, 0x24, 0x25, 0x46, 0x46, 0x46, 0x49, 0x49, 0x49, 0x31, 0x30, 0x31, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x30, 0x30, 0x30, 0x29, 0x29, 0x29, 0x17, 0x16, 0x17, 0x26, 0x25, 0x26, 0x2C, 0x2A, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x28, 0x2A, 0x28, 0x28, 0x28, 0x27, 
   0x26, 0x27, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 0x26, 0x26, 0x26, 0x28, 0x27, 
   0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x26, 0x24, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x29, 0x28, 0x2B, 0x2A, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x26, 0x26, 0x26, 
   0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 
   0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x2E, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 
   0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 0x31, 0x34, 0x31, 
   0x35, 0x35, 0x35, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3F, 0x3D, 0x3F, 0x42, 0x40, 
   0x42, 0x43, 0x43, 0x43, 0x44, 0x46, 0x44, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4E, 0x50, 0x4E, 0x43, 
   0x42, 0x43, 0x08, 0x07, 0x08, 0x03, 0x03, 0x03, 0x30, 0x31, 0x30, 0x52, 0x54, 0x52, 0x46, 0x48, 
   0x46, 0x34, 0x34, 0x34, 0x49, 0x49, 0x49, 0x4D, 0x4D, 0x4D, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x45, 
   0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x53, 0x52, 0x53, 0x59, 
   0x59, 0x59, 0x3F, 0x40, 0x3F, 0x03, 0x03, 0x03, 0x2C, 0x2C, 0x2C, 0x4C, 0x4E, 0x4C, 0x4B, 0x4B, 
   0x4B, 0x4A, 0x4B, 0x4A, 0x4F, 0x4F, 0x4F, 0x2A, 0x28, 0x2A, 0x35, 0x33, 0x35, 0x4C, 0x4C, 0x4C, 
   0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 
   0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x39, 0x38, 0x39, 0x34, 0x34, 0x34, 0x59, 
   0x5A, 0x59, 0x43, 0x45, 0x43, 0x48, 0x49, 0x48, 0x35, 0x34, 0x35, 0x25, 0x24, 0x25, 0x47, 0x48, 
   0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 
   0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x3F, 0x40, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x33, 0x34, 0x33, 
   0x1F, 0x1F, 0x1F, 0x40, 0x40, 0x40, 0x33, 0x32, 0x33, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x30, 0x2F, 0x2A, 0x2A, 0x2A, 0x24, 0x23, 0x24, 0x27, 0x27, 0x27, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 
   0x27, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x29, 0x28, 
   0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 
   0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2C, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x28, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x28, 0x28, 0x28, 
   0x28, 0x29, 0x28, 0x2B, 0x2A, 0x2B, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x32, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x35, 0x33, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x38, 0x36, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 
   0x38, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 
   0x38, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3F, 0x3F, 0x3F, 0x42, 0x41, 
   0x42, 0x42, 0x44, 0x42, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 
   0x4E, 0x4D, 0x3E, 0x3D, 0x3E, 0x04, 0x04, 0x04, 0x06, 0x06, 0x06, 0x40, 0x41, 0x40, 0x51, 0x51, 
   0x51, 0x3B, 0x3B, 0x3B, 0x38, 0x38, 0x38, 0x4C, 0x4D, 0x4C, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 
   0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 
   0x45, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x49, 0x4B, 0x49, 
   0x4B, 0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x51, 0x50, 0x51, 0x52, 0x52, 0x52, 0x51, 
   0x53, 0x51, 0x53, 0x54, 0x53, 0x19, 0x19, 0x19, 0x00, 0x00, 0x00, 0x35, 0x35, 0x35, 0x4E, 0x4E, 
   0x4E, 0x49, 0x49, 0x49, 0x4C, 0x4C, 0x4C, 0x36, 0x35, 0x36, 0x28, 0x28, 0x28, 0x4C, 0x4C, 0x4C, 
   0x49, 0x47, 0x49, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x51, 0x50, 0x51, 0x56, 
   0x56, 0x56, 0x45, 0x45, 0x45, 0x42, 0x44, 0x42, 0x2A, 0x28, 0x2A, 0x3A, 0x3A, 0x3A, 0x49, 0x4A, 
   0x49, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 
   0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x40, 
   0x40, 0x3F, 0x3D, 0x3F, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 
   0x33, 0x34, 0x33, 0x39, 0x38, 0x39, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x31, 
   0x31, 0x31, 0x20, 0x21, 0x20, 0x1E, 0x1E, 0x1E, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x28, 
   0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x2C, 0x2A, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2A, 0x2C, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x28, 0x27, 0x28, 
   0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 
   0x42, 0x43, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 
   0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x32, 
   0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 
   0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 
   0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3B, 0x3B, 0x3C, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 
   0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x42, 
   0x41, 0x46, 0x44, 0x46, 0x44, 0x46, 0x44, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 0x4A, 0x4C, 0x4A, 0x4D, 
   0x4D, 0x4D, 0x51, 0x50, 0x51, 0x24, 0x21, 0x24, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x4A, 0x4B, 
   0x4A, 0x4D, 0x4E, 0x4D, 0x36, 0x34, 0x36, 0x31, 0x32, 0x31, 0x4C, 0x4C, 0x4C, 0x49, 0x49, 0x49, 
   0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 
   0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x50, 
   0x51, 0x50, 0x53, 0x53, 0x53, 0x41, 0x43, 0x41, 0x08, 0x09, 0x08, 0x1F, 0x1F, 0x1F, 0x4E, 0x4E, 
   0x4E, 0x49, 0x48, 0x49, 0x49, 0x48, 0x49, 0x4A, 0x4B, 0x4A, 0x33, 0x35, 0x33, 0x38, 0x38, 0x38, 
   0x4B, 0x4C, 0x4B, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 
   0x44, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x30, 0x30, 0x30, 0x4D, 0x4C, 0x4D, 0x65, 0x64, 0x65, 0x47, 
   0x46, 0x47, 0x49, 0x4B, 0x49, 0x34, 0x35, 0x34, 0x26, 0x26, 0x26, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 
   0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 
   0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x37, 0x35, 0x37, 0x27, 0x26, 0x27, 
   0x44, 0x43, 0x44, 0x39, 0x38, 0x39, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 0x32, 
   0x31, 0x32, 0x1C, 0x1C, 0x1C, 0x1F, 0x20, 0x1F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2B, 0x29, 0x2B, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 
   0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2E, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2B, 0x2C, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 
   0x3D, 0x3B, 0x3D, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3A, 0x3C, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 
   0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 
   0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x36, 0x34, 
   0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 
   0x38, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 
   0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x42, 0x42, 
   0x42, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 0x45, 0x44, 0x45, 0x14, 0x14, 0x14, 0x0A, 0x0A, 0x0A, 0x42, 0x43, 
   0x42, 0x50, 0x51, 0x50, 0x3C, 0x3D, 0x3C, 0x19, 0x1A, 0x19, 0x4D, 0x4D, 0x4D, 0x4A, 0x4B, 0x4A, 
   0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 
   0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x4F, 
   0x51, 0x4F, 0x50, 0x50, 0x50, 0x4D, 0x4D, 0x4D, 0x30, 0x2F, 0x30, 0x17, 0x16, 0x17, 0x3A, 0x3A, 
   0x3A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x4C, 0x4C, 0x4C, 0x3F, 0x40, 0x3F, 0x30, 0x2F, 0x30, 
   0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x3F, 
   0x42, 0x43, 0x42, 0x3F, 0x40, 0x3F, 0x25, 0x25, 0x25, 0x43, 0x43, 0x43, 0x53, 0x52, 0x53, 0x46, 
   0x47, 0x46, 0x49, 0x4A, 0x49, 0x30, 0x32, 0x30, 0x3A, 0x3A, 0x3A, 0x49, 0x4A, 0x49, 0x48, 0x49, 
   0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x40, 0x41, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x34, 0x35, 0x34, 0x1A, 0x1B, 0x1A, 
   0x37, 0x36, 0x37, 0x37, 0x38, 0x37, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x34, 
   0x33, 0x34, 0x1E, 0x1E, 0x1E, 0x22, 0x21, 0x22, 0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x25, 
   0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x32, 
   0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 
   0x30, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 0x37, 0x37, 
   0x37, 0x35, 0x37, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x39, 0x37, 0x3A, 0x3A, 0x3A, 0x3D, 0x3B, 0x3D, 0x40, 0x3E, 0x40, 0x41, 0x42, 0x41, 0x42, 0x43, 
   0x42, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x32, 0x31, 0x32, 0x00, 0x01, 0x00, 0x17, 0x15, 
   0x17, 0x4A, 0x48, 0x4A, 0x4B, 0x4A, 0x4B, 0x2D, 0x2C, 0x2D, 0x44, 0x44, 0x44, 0x4C, 0x4B, 0x4C, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x47, 
   0x48, 0x48, 0x48, 0x48, 0x47, 0x49, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4D, 0x4C, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x4E, 
   0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4A, 0x4B, 0x4A, 0x39, 0x39, 0x39, 0x03, 0x03, 0x03, 0x13, 0x12, 
   0x13, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x4B, 0x4B, 0x4B, 0x35, 0x35, 0x35, 
   0x36, 0x36, 0x36, 0x47, 0x45, 0x47, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 0x40, 0x41, 
   0x40, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 
   0x40, 0x42, 0x40, 0x44, 0x45, 0x44, 0x3C, 0x3C, 0x3C, 0x4E, 0x4F, 0x4E, 0x47, 0x47, 0x47, 0x45, 
   0x46, 0x45, 0x33, 0x33, 0x33, 0x3B, 0x3A, 0x3B, 0x50, 0x4E, 0x50, 0x4B, 0x4B, 0x4B, 0x49, 0x49, 
   0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x48, 0x4A, 0x48, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x45, 0x45, 0x42, 0x44, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x41, 0x40, 0x41, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x35, 0x36, 0x35, 
   0x42, 0x42, 0x42, 0x36, 0x37, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x19, 0x1B, 0x19, 0x23, 0x23, 0x23, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2E, 
   0x2F, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 
   0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 
   0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 
   0x2C, 0x2B, 0x2C, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x27, 0x29, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 
   0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x3E, 0x3F, 0x3E, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3D, 0x3F, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x32, 0x34, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 
   0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 
   0x38, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x3B, 
   0x39, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 
   0x42, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x49, 0x4A, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x13, 0x13, 0x13, 0x00, 0x00, 
   0x00, 0x30, 0x30, 0x30, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x18, 0x19, 0x18, 0x39, 0x3A, 0x39, 
   0x4F, 0x4F, 0x4F, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 
   0x48, 0x47, 0x47, 0x48, 0x47, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x4B, 0x49, 0x4C, 0x4C, 0x4C, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4E, 0x4D, 
   0x4E, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x39, 0x38, 0x39, 0x0A, 0x08, 0x0A, 0x03, 0x02, 
   0x03, 0x3D, 0x3E, 0x3D, 0x4B, 0x4B, 0x4B, 0x47, 0x47, 0x47, 0x4B, 0x4A, 0x4B, 0x3C, 0x3C, 0x3C, 
   0x1B, 0x1C, 0x1B, 0x3D, 0x3F, 0x3D, 0x46, 0x45, 0x46, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 
   0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 
   0x43, 0x41, 0x43, 0x50, 0x51, 0x50, 0x5D, 0x5F, 0x5D, 0x51, 0x51, 0x51, 0x49, 0x48, 0x49, 0x41, 
   0x41, 0x41, 0x1F, 0x1F, 0x1F, 0x38, 0x37, 0x38, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x41, 0x41, 0x3D, 0x3E, 0x3D, 0x42, 0x41, 0x42, 0x4D, 0x4B, 0x4D, 0x4F, 0x4D, 0x4F, 
   0x41, 0x40, 0x41, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x30, 
   0x2F, 0x30, 0x1B, 0x1C, 0x1B, 0x2A, 0x2C, 0x2A, 0x32, 0x32, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2A, 0x2C, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 
   0x31, 0x31, 0x31, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x30, 0x31, 0x30, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2C, 0x2C, 0x2C, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x28, 0x2A, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x25, 0x24, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x3E, 0x40, 0x3E, 0x3F, 0x3F, 0x3F, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x37, 0x38, 0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 
   0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x31, 0x33, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 
   0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 
   0x30, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 
   0x3B, 0x39, 0x3B, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3A, 0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3C, 0x3D, 0x3C, 0x3E, 0x40, 0x3E, 0x40, 0x42, 0x40, 0x43, 0x43, 0x43, 0x42, 0x44, 
   0x42, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4E, 0x4E, 0x4E, 0x2E, 0x2D, 0x2E, 0x00, 0x00, 
   0x00, 0x16, 0x16, 0x16, 0x4C, 0x4D, 0x4C, 0x50, 0x52, 0x50, 0x35, 0x36, 0x35, 0x2E, 0x2E, 0x2E, 
   0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x47, 
   0x48, 0x47, 0x47, 0x49, 0x47, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4D, 0x4C, 0x4E, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4A, 
   0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x2E, 0x2E, 0x2E, 0x00, 0x00, 
   0x00, 0x1E, 0x1D, 0x1E, 0x46, 0x45, 0x46, 0x49, 0x49, 0x49, 0x45, 0x46, 0x45, 0x3E, 0x3F, 0x3E, 
   0x1B, 0x1B, 0x1B, 0x39, 0x39, 0x39, 0x4B, 0x4B, 0x4B, 0x45, 0x44, 0x45, 0x41, 0x42, 0x41, 0x42, 
   0x42, 0x42, 0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 
   0x4B, 0x49, 0x4B, 0x5F, 0x5E, 0x5F, 0x6F, 0x6F, 0x6F, 0x54, 0x53, 0x54, 0x4B, 0x49, 0x4B, 0x37, 
   0x35, 0x37, 0x36, 0x36, 0x36, 0x45, 0x46, 0x45, 0x49, 0x49, 0x49, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x47, 0x48, 0x47, 0x46, 
   0x47, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x39, 0x3A, 0x39, 0x4B, 0x4A, 0x4B, 0x53, 0x53, 0x53, 
   0x38, 0x38, 0x38, 0x39, 0x37, 0x39, 0x36, 0x36, 0x36, 0x34, 0x36, 0x34, 0x39, 0x38, 0x39, 0x29, 
   0x28, 0x29, 0x27, 0x26, 0x27, 0x37, 0x35, 0x37, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x2B, 0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2F, 0x2D, 0x2D, 0x2F, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x28, 0x2A, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 
   0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x40, 0x3F, 0x3D, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3A, 0x3B, 0x38, 0x38, 0x38, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x31, 0x30, 0x31, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 
   0x3B, 0x3A, 0x3B, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x40, 0x40, 0x40, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 0x39, 0x36, 0x37, 
   0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3B, 0x3A, 0x3D, 0x3E, 0x3D, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x42, 0x44, 0x42, 0x0F, 0x11, 
   0x0F, 0x05, 0x05, 0x05, 0x27, 0x28, 0x27, 0x47, 0x46, 0x47, 0x56, 0x57, 0x56, 0x2C, 0x2C, 0x2C, 
   0x17, 0x18, 0x17, 0x4E, 0x4E, 0x4E, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x49, 0x49, 0x49, 0x4D, 0x4A, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4D, 0x4C, 0x43, 0x42, 0x43, 0x0F, 0x11, 
   0x0F, 0x05, 0x04, 0x05, 0x16, 0x16, 0x16, 0x3B, 0x3B, 0x3B, 0x46, 0x46, 0x46, 0x42, 0x44, 0x42, 
   0x32, 0x33, 0x32, 0x3C, 0x3C, 0x3C, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x43, 0x44, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x48, 0x46, 0x48, 
   0x58, 0x58, 0x58, 0x6A, 0x68, 0x6A, 0x60, 0x60, 0x60, 0x4C, 0x4E, 0x4C, 0x3E, 0x3C, 0x3E, 0x30, 
   0x30, 0x30, 0x45, 0x47, 0x45, 0x4C, 0x4A, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x46, 
   0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x2F, 0x2E, 0x2F, 0x45, 0x44, 0x45, 0x48, 0x48, 0x48, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x33, 0x32, 0x33, 0x23, 
   0x24, 0x23, 0x2E, 0x2D, 0x2E, 0x2D, 0x2B, 0x2D, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 
   0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 
   0x32, 0x31, 0x32, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 
   0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x26, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 
   0x27, 0x25, 0x27, 0x27, 0x26, 0x27, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 
   0x3E, 0x3B, 0x3C, 0x3B, 0x39, 0x3A, 0x39, 0x36, 0x37, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 
   0x30, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x37, 0x36, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3B, 0x39, 
   0x3C, 0x3D, 0x3C, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 
   0x41, 0x42, 0x41, 0x40, 0x41, 0x3F, 0x3E, 0x3F, 0x3B, 0x3B, 0x3B, 0x38, 0x3A, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3D, 
   0x3B, 0x3D, 0x3E, 0x3D, 0x3E, 0x42, 0x41, 0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x41, 0x40, 
   0x41, 0x05, 0x05, 0x05, 0x00, 0x00, 0x00, 0x3A, 0x38, 0x3A, 0x50, 0x4F, 0x50, 0x3E, 0x3F, 0x3E, 
   0x25, 0x26, 0x25, 0x39, 0x3B, 0x39, 0x49, 0x4A, 0x49, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x4A, 0x49, 0x4A, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 
   0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x46, 0x47, 0x46, 0x24, 0x25, 
   0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x29, 0x28, 0x48, 0x47, 0x48, 0x44, 0x43, 0x44, 
   0x46, 0x45, 0x46, 0x48, 0x48, 0x48, 0x42, 0x42, 0x42, 0x3A, 0x39, 0x3A, 0x44, 0x44, 0x44, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x3D, 0x3D, 0x3D, 0x4A, 0x4B, 0x4A, 
   0x6A, 0x6B, 0x6A, 0x63, 0x65, 0x63, 0x4D, 0x4F, 0x4D, 0x43, 0x44, 0x43, 0x33, 0x34, 0x33, 0x43, 
   0x44, 0x43, 0x47, 0x46, 0x47, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 
   0x46, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x42, 
   0x42, 0x41, 0x41, 0x41, 0x3D, 0x3D, 0x3D, 0x1E, 0x1F, 0x1E, 0x2F, 0x2F, 0x2F, 0x3F, 0x3E, 0x3F, 
   0x3A, 0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x38, 0x3A, 0x38, 0x38, 0x37, 0x38, 0x25, 0x24, 0x25, 0x2D, 
   0x2D, 0x2D, 0x38, 0x36, 0x38, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x31, 0x32, 
   0x31, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x26, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x2A, 
   0x29, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2A, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 
   0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2D, 0x2D, 0x2D, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 
   0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 
   0x3E, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x3E, 0x41, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3C, 0x3C, 0x3C, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x31, 0x30, 0x31, 0x33, 0x33, 0x33, 0x36, 0x36, 0x36, 0x39, 0x39, 0x39, 0x3B, 0x3C, 0x3B, 
   0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x39, 0x37, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3E, 
   0x3C, 0x3E, 0x3E, 0x3E, 0x3E, 0x41, 0x42, 0x41, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 
   0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x4D, 0x4D, 
   0x4D, 0x21, 0x20, 0x21, 0x01, 0x01, 0x01, 0x23, 0x24, 0x23, 0x4B, 0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4D, 0x4D, 0x1E, 0x1E, 0x1E, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x46, 0x47, 0x46, 0x48, 
   0x48, 0x48, 0x49, 0x49, 0x49, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 
   0x4E, 0x4F, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 
   0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x3F, 0x3F, 
   0x3F, 0x1E, 0x1E, 0x1E, 0x02, 0x02, 0x02, 0x14, 0x13, 0x14, 0x3F, 0x3E, 0x3F, 0x41, 0x42, 0x41, 
   0x47, 0x46, 0x47, 0x57, 0x57, 0x57, 0x50, 0x52, 0x50, 0x2D, 0x2D, 0x2D, 0x37, 0x38, 0x37, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3C, 0x3E, 0x3C, 0x51, 0x51, 0x51, 
   0x6B, 0x6C, 0x6B, 0x54, 0x54, 0x54, 0x4A, 0x49, 0x4A, 0x3A, 0x3B, 0x3A, 0x3F, 0x3F, 0x3F, 0x49, 
   0x48, 0x49, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 
   0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x36, 0x38, 0x36, 0x31, 0x32, 0x31, 0x39, 0x37, 0x39, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x2F, 0x2D, 0x2F, 0x1E, 0x1C, 0x1E, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2B, 0x2A, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x30, 0x2F, 
   0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x39, 0x3C, 0x39, 0x38, 0x39, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 
   0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x34, 0x33, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 
   0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x31, 0x31, 0x31, 0x33, 0x34, 0x33, 0x36, 0x37, 0x36, 0x3B, 0x3A, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x39, 0x39, 
   0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x3A, 0x3A, 0x3D, 0x3B, 0x3D, 
   0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x41, 0x3F, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x49, 0x49, 
   0x49, 0x46, 0x46, 0x46, 0x1C, 0x1C, 0x1C, 0x0E, 0x0E, 0x0E, 0x45, 0x45, 0x45, 0x49, 0x48, 0x49, 
   0x4C, 0x4C, 0x4C, 0x42, 0x42, 0x42, 0x11, 0x11, 0x11, 0x3D, 0x3E, 0x3D, 0x4A, 0x4B, 0x4A, 0x48, 
   0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4D, 0x4B, 0x4D, 0x4C, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4B, 0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x46, 
   0x48, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 
   0x47, 0x48, 0x47, 0x48, 0x30, 0x31, 0x30, 0x06, 0x06, 0x06, 0x23, 0x22, 0x23, 0x44, 0x44, 0x44, 
   0x37, 0x36, 0x37, 0x40, 0x41, 0x40, 0x45, 0x45, 0x45, 0x3F, 0x3F, 0x3F, 0x29, 0x29, 0x29, 0x37, 
   0x38, 0x37, 0x47, 0x46, 0x47, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x41, 0x40, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x45, 0x45, 0x45, 0x4B, 0x4C, 0x4B, 0x61, 0x62, 0x61, 
   0x51, 0x53, 0x51, 0x42, 0x42, 0x42, 0x2F, 0x2F, 0x2F, 0x3D, 0x3B, 0x3D, 0x44, 0x43, 0x44, 0x4A, 
   0x49, 0x4A, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 
   0x44, 0x3E, 0x40, 0x3E, 0x25, 0x25, 0x25, 0x47, 0x46, 0x47, 0x54, 0x52, 0x54, 0x3D, 0x3C, 0x3D, 
   0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x3B, 0x3C, 0x3B, 0x26, 0x28, 0x26, 0x27, 0x26, 0x27, 0x38, 
   0x36, 0x38, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2A, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 
   0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2A, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2E, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 
   0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 
   0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x39, 0x3A, 0x37, 0x37, 0x37, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x30, 0x31, 0x30, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x31, 0x2F, 0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 
   0x31, 0x31, 0x32, 0x31, 0x33, 0x34, 0x33, 0x36, 0x38, 0x36, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 
   0x3F, 0x3F, 0x3F, 0x41, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3C, 0x3E, 0x3A, 0x3B, 
   0x3A, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x49, 0x4A, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x49, 0x33, 0x33, 0x33, 0x01, 0x01, 0x01, 0x07, 0x07, 0x07, 0x3B, 0x3B, 0x3B, 
   0x4C, 0x4D, 0x4C, 0x49, 0x4A, 0x49, 0x26, 0x25, 0x26, 0x33, 0x33, 0x33, 0x4C, 0x4A, 0x4C, 0x4A, 
   0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x50, 0x4E, 0x4C, 0x4E, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x48, 0x47, 0x48, 0x41, 0x42, 0x41, 0x07, 0x07, 0x07, 0x0E, 0x0F, 0x0E, 0x35, 0x34, 0x35, 
   0x18, 0x18, 0x18, 0x3B, 0x3B, 0x3B, 0x40, 0x40, 0x40, 0x43, 0x41, 0x43, 0x37, 0x38, 0x37, 0x27, 
   0x26, 0x27, 0x3C, 0x3B, 0x3C, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 
   0x3F, 0x42, 0x41, 0x42, 0x3F, 0x3E, 0x3F, 0x37, 0x39, 0x37, 0x5D, 0x5F, 0x5D, 0x5B, 0x5A, 0x5B, 
   0x47, 0x48, 0x47, 0x31, 0x2F, 0x31, 0x2E, 0x2E, 0x2E, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x4B, 
   0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 
   0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x46, 0x44, 0x46, 0x43, 0x43, 0x43, 0x43, 0x44, 
   0x43, 0x3E, 0x3E, 0x3E, 0x27, 0x25, 0x27, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x3B, 0x3D, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x38, 0x3A, 0x38, 0x1D, 0x1E, 0x1D, 0x34, 0x34, 0x34, 0x37, 
   0x38, 0x37, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 
   0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 
   0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 
   0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 
   0x31, 0x33, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2E, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x36, 0x34, 0x36, 0x37, 0x37, 0x37, 0x3A, 0x3A, 0x3A, 0x3D, 0x3C, 0x3D, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x3F, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3C, 0x3A, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3E, 0x3E, 0x3E, 0x40, 0x3E, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 
   0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 
   0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x4B, 0x49, 0x1C, 0x1E, 0x1C, 0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 
   0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x51, 0x53, 0x51, 0x26, 0x27, 0x26, 0x25, 0x24, 0x25, 0x4F, 
   0x4E, 0x4F, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x50, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x13, 0x13, 0x13, 0x10, 0x11, 0x10, 0x22, 0x24, 0x22, 
   0x02, 0x02, 0x02, 0x30, 0x31, 0x30, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x44, 0x43, 0x44, 0x25, 
   0x24, 0x25, 0x2B, 0x2A, 0x2B, 0x41, 0x42, 0x41, 0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 
   0x3D, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x38, 0x38, 0x38, 0x67, 0x66, 0x67, 0x4D, 0x4E, 0x4D, 
   0x46, 0x48, 0x46, 0x25, 0x25, 0x25, 0x41, 0x41, 0x41, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4B, 0x4C, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4E, 0x4C, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x47, 
   0x48, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x47, 0x46, 0x47, 0x46, 0x44, 0x46, 0x43, 0x44, 0x43, 0x3E, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3B, 0x3A, 0x3B, 0x3C, 0x3D, 0x3C, 0x31, 0x31, 0x31, 0x14, 0x14, 0x14, 0x26, 0x25, 0x26, 0x35, 
   0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x32, 0x31, 
   0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x2F, 
   0x31, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 
   0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3E, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 
   0x3B, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x31, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x37, 0x37, 0x37, 0x3C, 0x3A, 0x3C, 0x3E, 0x3C, 0x3E, 
   0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3D, 0x3F, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x48, 0x47, 
   0x48, 0x46, 0x47, 0x46, 0x49, 0x49, 0x49, 0x48, 0x47, 0x48, 0x2B, 0x2A, 0x2B, 0x00, 0x00, 0x00, 
   0x22, 0x23, 0x22, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x40, 0x40, 0x40, 0x28, 0x28, 0x28, 0x3E, 
   0x3F, 0x3E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4F, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x49, 0x4A, 0x49, 0x47, 0x48, 0x47, 0x45, 
   0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x2C, 0x2A, 0x2C, 0x14, 0x14, 0x14, 0x28, 0x29, 0x28, 
   0x00, 0x00, 0x00, 0x1F, 0x1E, 0x1F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x3F, 0x3E, 0x3F, 0x38, 
   0x38, 0x38, 0x27, 0x26, 0x27, 0x37, 0x37, 0x37, 0x3E, 0x3E, 0x3E, 0x39, 0x39, 0x39, 0x3D, 0x3C, 
   0x3D, 0x3B, 0x3B, 0x3B, 0x45, 0x44, 0x45, 0x59, 0x59, 0x59, 0x54, 0x55, 0x54, 0x49, 0x4A, 0x49, 
   0x38, 0x37, 0x38, 0x3A, 0x39, 0x3A, 0x4D, 0x4E, 0x4D, 0x48, 0x49, 0x48, 0x4B, 0x4B, 0x4B, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 
   0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 0x48, 
   0x47, 0x48, 0x46, 0x46, 0x46, 0x45, 0x44, 0x45, 0x42, 0x44, 0x42, 0x42, 0x43, 0x42, 0x3B, 0x3B, 
   0x3B, 0x44, 0x46, 0x44, 0x66, 0x67, 0x66, 0x4C, 0x4D, 0x4C, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3C, 0x3E, 0x3B, 0x3D, 0x3B, 0x26, 0x26, 0x26, 0x2B, 0x2A, 0x2B, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 
   0x32, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x27, 0x27, 
   0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 
   0x3B, 0x38, 0x38, 0x38, 0x35, 0x36, 0x35, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2D, 
   0x2F, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x31, 0x32, 
   0x31, 0x33, 0x34, 0x33, 0x35, 0x36, 0x35, 0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3D, 0x3E, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3F, 0x3D, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3C, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x40, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x45, 0x46, 
   0x45, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x4B, 0x4B, 0x4B, 0x4A, 0x49, 0x4A, 0x0C, 0x0D, 0x0C, 
   0x03, 0x03, 0x03, 0x3C, 0x3D, 0x3C, 0x4E, 0x4D, 0x4E, 0x52, 0x52, 0x52, 0x42, 0x43, 0x42, 0x1E, 
   0x1E, 0x1E, 0x54, 0x55, 0x54, 0x4D, 0x4D, 0x4D, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4C, 0x4E, 0x4C, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4E, 0x4C, 0x4E, 0x4D, 0x4E, 0x4C, 0x4B, 0x4C, 0x49, 0x4A, 0x49, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x43, 0x42, 0x43, 0x3B, 0x3B, 0x3B, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 
   0x02, 0x02, 0x02, 0x1B, 0x1C, 0x1B, 0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x43, 
   0x42, 0x43, 0x33, 0x33, 0x33, 0x22, 0x23, 0x22, 0x45, 0x45, 0x45, 0x58, 0x58, 0x58, 0x56, 0x56, 
   0x56, 0x4C, 0x4C, 0x4C, 0x52, 0x50, 0x52, 0x66, 0x68, 0x66, 0x4E, 0x4E, 0x4E, 0x37, 0x38, 0x37, 
   0x23, 0x23, 0x23, 0x3F, 0x41, 0x3F, 0x47, 0x48, 0x47, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 0x4D, 0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x41, 0x42, 0x41, 0x48, 0x49, 0x48, 0x50, 0x50, 
   0x50, 0x53, 0x54, 0x53, 0x65, 0x66, 0x65, 0x44, 0x45, 0x44, 0x3F, 0x40, 0x3F, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3E, 0x3D, 0x2C, 0x2B, 0x2C, 0x1C, 0x1B, 0x1C, 0x3A, 0x38, 0x3A, 0x39, 0x3A, 0x39, 0x37, 
   0x38, 0x37, 0x38, 0x37, 0x38, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 
   0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 
   0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 
   0x29, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 
   0x39, 0x38, 0x38, 0x38, 0x35, 0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 
   0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x34, 0x34, 0x34, 0x37, 0x36, 0x37, 0x38, 0x39, 0x38, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x47, 0x48, 0x48, 0x47, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x4D, 0x4D, 0x4D, 0x3B, 0x3B, 0x3B, 
   0x00, 0x00, 0x00, 0x14, 0x13, 0x14, 0x52, 0x52, 0x52, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x32, 
   0x30, 0x32, 0x2D, 0x2E, 0x2D, 0x4A, 0x4D, 0x4A, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 
   0x4C, 0x4E, 0x4C, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 
   0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x47, 0x47, 0x47, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 0x3C, 0x37, 0x37, 0x37, 
   0x0F, 0x10, 0x0F, 0x26, 0x28, 0x26, 0x41, 0x43, 0x41, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x39, 0x3A, 0x39, 0x76, 0x75, 0x76, 0x91, 0x8F, 0x91, 0x8B, 0x8A, 
   0x8B, 0x84, 0x85, 0x84, 0x73, 0x74, 0x73, 0x54, 0x53, 0x54, 0x42, 0x41, 0x42, 0x2E, 0x2F, 0x2E, 
   0x46, 0x46, 0x46, 0x4B, 0x4A, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x49, 0x4A, 0x49, 0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 
   0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x44, 0x45, 0x40, 0x40, 0x40, 0x52, 0x51, 0x52, 0x78, 0x76, 
   0x78, 0x6B, 0x6A, 0x6B, 0x46, 0x46, 0x46, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 
   0x40, 0x41, 0x40, 0x1F, 0x1F, 0x1F, 0x13, 0x13, 0x13, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x38, 
   0x39, 0x38, 0x39, 0x37, 0x39, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x33, 
   0x34, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x29, 
   0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 
   0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3A, 0x39, 
   0x3A, 0x38, 0x37, 0x38, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 
   0x33, 0x35, 0x35, 0x35, 0x37, 0x38, 0x37, 0x3B, 0x39, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3F, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x40, 0x3E, 0x40, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x3A, 0x39, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x43, 0x41, 0x43, 0x44, 0x43, 0x47, 0x45, 0x47, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4C, 0x4B, 
   0x27, 0x29, 0x27, 0x00, 0x01, 0x00, 0x22, 0x23, 0x22, 0x49, 0x4B, 0x49, 0x53, 0x52, 0x53, 0x49, 
   0x49, 0x49, 0x0F, 0x0F, 0x0F, 0x43, 0x43, 0x43, 0x52, 0x54, 0x52, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3A, 0x3A, 0x3A, 
   0x1E, 0x1C, 0x1E, 0x0C, 0x0C, 0x0C, 0x18, 0x16, 0x18, 0x2C, 0x2C, 0x2C, 0x3C, 0x3C, 0x3C, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x4E, 0x4E, 0x4E, 0x75, 0x75, 0x75, 0x76, 0x75, 0x76, 0x76, 0x77, 
   0x76, 0x76, 0x76, 0x76, 0x62, 0x64, 0x62, 0x46, 0x47, 0x46, 0x25, 0x24, 0x25, 0x36, 0x34, 0x36, 
   0x48, 0x4A, 0x48, 0x4C, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4A, 0x4C, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x49, 0x4B, 0x49, 0x49, 0x49, 0x49, 
   0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 
   0x46, 0x48, 0x46, 0x46, 0x46, 0x42, 0x43, 0x42, 0x3D, 0x3C, 0x3D, 0x53, 0x52, 0x53, 0x73, 0x74, 
   0x73, 0x55, 0x57, 0x55, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x42, 0x44, 0x42, 0x24, 0x23, 0x24, 0x27, 0x28, 0x27, 0x3E, 0x3F, 0x3E, 0x3B, 0x3A, 0x3B, 0x3A, 
   0x39, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 
   0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 
   0x39, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x31, 0x33, 
   0x31, 0x35, 0x36, 0x35, 0x39, 0x38, 0x39, 0x39, 0x3B, 0x39, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4C, 0x4B, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 
   0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 
   0x51, 0x51, 0x51, 0x1D, 0x1D, 0x1D, 0x00, 0x00, 0x00, 0x39, 0x39, 0x39, 0x4F, 0x4F, 0x4F, 0x50, 
   0x4F, 0x50, 0x46, 0x46, 0x46, 0x2F, 0x2F, 0x2F, 0x47, 0x4A, 0x47, 0x4E, 0x4F, 0x4E, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4D, 0x4C, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 
   0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 
   0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x2C, 0x2B, 0x2C, 0x02, 0x03, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x36, 0x36, 0x36, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 
   0x40, 0x41, 0x3F, 0x41, 0x40, 0x40, 0x40, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4B, 0x4D, 0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x4A, 0x48, 0x4B, 0x4A, 0x4B, 0x4B, 0x4C, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x46, 
   0x47, 0x46, 0x45, 0x46, 0x45, 0x44, 0x42, 0x44, 0x31, 0x32, 0x31, 0x4D, 0x4E, 0x4D, 0x4F, 0x50, 
   0x4F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x43, 0x41, 0x43, 0x3F, 0x3D, 0x3F, 0x3C, 0x3B, 0x3C, 0x3A, 
   0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x28, 0x2A, 0x29, 0x2B, 
   0x29, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x28, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 
   0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x29, 0x2B, 0x3E, 0x3D, 0x3E, 0x3F, 0x3D, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x39, 0x39, 
   0x39, 0x36, 0x37, 0x36, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x31, 0x32, 
   0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 
   0x33, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x3A, 0x39, 0x3A, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 
   0x40, 0x3E, 0x40, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x40, 0x3E, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 
   0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4B, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x24, 0x23, 0x24, 0x02, 0x02, 0x02, 0x2B, 0x2A, 0x2B, 0x56, 
   0x55, 0x56, 0x56, 0x54, 0x56, 0x3B, 0x3C, 0x3B, 0x30, 0x31, 0x30, 0x43, 0x44, 0x43, 0x4C, 0x4E, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4A, 0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3B, 0x3B, 0x3B, 0x31, 0x32, 0x31, 0x25, 0x25, 0x25, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x25, 
   0x25, 0x25, 0x43, 0x42, 0x43, 0x3C, 0x3D, 0x3C, 0x3E, 0x3C, 0x3E, 0x3E, 0x3E, 0x3E, 0x41, 0x3F, 
   0x41, 0x3B, 0x3B, 0x3B, 0x18, 0x18, 0x18, 0x37, 0x38, 0x37, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x48, 0x4A, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x47, 0x44, 0x41, 0x41, 0x41, 0x4B, 0x4B, 0x4B, 0x63, 0x64, 0x63, 0x53, 0x56, 0x53, 0x3F, 0x40, 
   0x3F, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x45, 0x46, 0x45, 0x3A, 0x39, 0x3A, 
   0x29, 0x28, 0x29, 0x3E, 0x3D, 0x3E, 0x40, 0x3E, 0x40, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 
   0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2C, 0x2A, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 
   0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 
   0x39, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x32, 0x30, 0x32, 0x32, 0x32, 
   0x32, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x43, 0x41, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x46, 
   0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 
   0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4C, 0x4B, 0x4F, 0x4F, 0x4F, 0x49, 0x48, 0x49, 0x0B, 0x0C, 0x0B, 0x09, 0x09, 0x09, 0x43, 
   0x43, 0x43, 0x4E, 0x4E, 0x4E, 0x55, 0x55, 0x55, 0x39, 0x3B, 0x39, 0x22, 0x23, 0x22, 0x53, 0x54, 
   0x53, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4D, 0x4B, 0x4D, 0x4D, 0x4D, 
   0x4B, 0x4D, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x40, 0x42, 0x40, 0x42, 0x41, 0x42, 0x40, 0x3F, 0x40, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x40, 0x3E, 0x40, 0x3F, 0x3E, 0x3F, 0x1A, 0x1B, 0x1A, 0x00, 0x00, 0x00, 0x08, 
   0x09, 0x08, 0x27, 0x29, 0x27, 0x3B, 0x3A, 0x3B, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x2D, 0x2C, 
   0x2D, 0x30, 0x2F, 0x30, 0x11, 0x10, 0x11, 0x43, 0x45, 0x43, 0x4A, 0x4C, 0x4A, 0x49, 0x49, 0x49, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4C, 0x4B, 0x4C, 0x4A, 0x4D, 
   0x4A, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 
   0x48, 0x4A, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x4B, 0x4D, 0x4B, 0x58, 0x59, 0x58, 0x74, 0x73, 0x74, 0x4A, 0x4B, 0x4A, 0x3F, 0x3F, 
   0x3F, 0x41, 0x40, 0x41, 0x40, 0x42, 0x40, 0x44, 0x43, 0x44, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 
   0x3E, 0x3E, 0x3E, 0x40, 0x3E, 0x40, 0x3D, 0x3C, 0x3D, 0x3B, 0x3C, 0x3B, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 
   0x35, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 
   0x38, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x31, 0x31, 0x33, 0x31, 
   0x33, 0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3F, 0x3E, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x47, 0x49, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4D, 0x4C, 0x4D, 0x50, 0x51, 0x50, 0x35, 0x36, 0x35, 0x00, 0x00, 0x00, 0x1F, 
   0x1F, 0x1F, 0x55, 0x55, 0x55, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x31, 0x30, 0x31, 0x32, 0x31, 
   0x32, 0x4C, 0x4C, 0x4C, 0x49, 0x4B, 0x49, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x46, 
   0x47, 0x46, 0x45, 0x46, 0x45, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x1F, 0x20, 0x1F, 0x00, 
   0x01, 0x00, 0x00, 0x00, 0x00, 0x28, 0x27, 0x28, 0x43, 0x44, 0x43, 0x37, 0x39, 0x37, 0x2F, 0x2E, 
   0x2F, 0x3C, 0x3C, 0x3C, 0x34, 0x33, 0x34, 0x3C, 0x3B, 0x3C, 0x47, 0x48, 0x47, 0x4A, 0x49, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4F, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x3B, 
   0x3C, 0x3B, 0x40, 0x42, 0x40, 0x69, 0x69, 0x69, 0x4E, 0x51, 0x4E, 0x40, 0x40, 0x40, 0x41, 0x41, 
   0x41, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x3B, 0x3C, 0x3B, 0x20, 0x20, 0x20, 0x35, 0x35, 0x35, 
   0x3B, 0x3D, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x34, 0x36, 0x34, 0x35, 0x34, 0x35, 0x33, 0x32, 
   0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2C, 0x2A, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x29, 0x2A, 0x29, 0x2B, 0x29, 
   0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2B, 
   0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x37, 0x38, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x31, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x31, 0x33, 
   0x31, 0x34, 0x33, 0x34, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 
   0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x49, 0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x48, 
   0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 
   0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x49, 0x4A, 0x1E, 0x1F, 0x1E, 0x07, 
   0x07, 0x07, 0x32, 0x31, 0x32, 0x4A, 0x4C, 0x4A, 0x50, 0x51, 0x50, 0x46, 0x48, 0x46, 0x09, 0x09, 
   0x09, 0x46, 0x46, 0x46, 0x4F, 0x4F, 0x4F, 0x49, 0x4B, 0x49, 0x4C, 0x4B, 0x4C, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 
   0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x41, 0x40, 0x41, 0x3B, 0x3B, 0x3B, 0x0E, 
   0x0E, 0x0E, 0x00, 0x00, 0x00, 0x0C, 0x0D, 0x0C, 0x3C, 0x3D, 0x3C, 0x33, 0x33, 0x33, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3E, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 
   0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4D, 0x4B, 0x4E, 0x4D, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x4A, 0x4B, 0x4A, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x62, 0x62, 0x62, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x3F, 0x41, 
   0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x2F, 0x2E, 0x2F, 0x16, 0x15, 0x16, 0x3C, 0x3D, 0x3C, 
   0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x36, 
   0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x31, 0x33, 
   0x31, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x30, 0x2F, 0x30, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 
   0x29, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 
   0x29, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x3F, 0x40, 0x3D, 0x3E, 0x3D, 0x3C, 0x3E, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 
   0x38, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x33, 0x33, 
   0x33, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x40, 0x3E, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 
   0x43, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4B, 0x4A, 0x48, 0x4A, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x50, 0x51, 0x50, 0x12, 
   0x13, 0x12, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x51, 0x51, 0x51, 0x4D, 0x4E, 0x4D, 0x37, 0x38, 
   0x37, 0x2D, 0x2F, 0x2D, 0x4D, 0x4E, 0x4D, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x47, 0x49, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x48, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3D, 0x3D, 0x3D, 0x3A, 
   0x3A, 0x3A, 0x23, 0x21, 0x23, 0x09, 0x0A, 0x09, 0x3D, 0x3D, 0x3D, 0x44, 0x43, 0x44, 0x42, 0x44, 
   0x42, 0x40, 0x42, 0x40, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x4E, 0x50, 0x4E, 0x6B, 
   0x6B, 0x6B, 0x63, 0x63, 0x63, 0x47, 0x46, 0x47, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x41, 0x43, 
   0x41, 0x40, 0x40, 0x40, 0x45, 0x44, 0x45, 0x28, 0x27, 0x28, 0x18, 0x1A, 0x18, 0x3A, 0x3A, 0x3A, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x33, 0x31, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x33, 0x32, 0x33, 0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 
   0x32, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x33, 0x31, 0x35, 0x33, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3C, 
   0x3E, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 
   0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x44, 0x44, 0x44, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x48, 0x4A, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4E, 0x4E, 0x4E, 0x39, 
   0x38, 0x39, 0x06, 0x06, 0x06, 0x16, 0x16, 0x16, 0x43, 0x42, 0x43, 0x4E, 0x4E, 0x4E, 0x53, 0x54, 
   0x53, 0x22, 0x23, 0x22, 0x36, 0x36, 0x36, 0x4D, 0x4E, 0x4D, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 
   0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x42, 0x44, 0x42, 0x41, 0x42, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x44, 
   0x44, 0x44, 0x3B, 0x3B, 0x3B, 0x2A, 0x2C, 0x2A, 0x48, 0x48, 0x48, 0x3A, 0x39, 0x3A, 0x40, 0x40, 
   0x40, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x44, 0x46, 0x44, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 
   0x47, 0x49, 0x47, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 
   0x4C, 0x4C, 0x4C, 0x49, 0x4B, 0x49, 0x46, 0x46, 0x46, 0x4F, 0x4F, 0x4F, 0x6C, 0x6C, 0x6C, 0x7B, 
   0x79, 0x7B, 0x62, 0x62, 0x62, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x2C, 0x2C, 0x2C, 0x33, 0x31, 0x33, 0x3B, 0x3D, 0x3B, 
   0x3A, 0x3B, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x31, 
   0x32, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3A, 0x3C, 0x39, 0x39, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x34, 0x32, 0x34, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 
   0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x3B, 0x39, 0x3E, 0x3C, 0x3E, 0x40, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x42, 0x43, 
   0x42, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4E, 
   0x4E, 0x4E, 0x34, 0x33, 0x34, 0x00, 0x00, 0x00, 0x27, 0x26, 0x27, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x43, 0x41, 0x43, 0x26, 0x28, 0x26, 0x42, 0x43, 0x42, 0x4C, 0x4B, 0x4C, 0x48, 0x47, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x46, 0x46, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 
   0x40, 0x40, 0x41, 0x42, 0x41, 0x3D, 0x3C, 0x3D, 0x42, 0x44, 0x42, 0x3F, 0x40, 0x3F, 0x43, 0x42, 
   0x43, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x46, 0x46, 0x46, 0x43, 0x43, 0x43, 0x7B, 0x7C, 0x7B, 0x67, 
   0x66, 0x67, 0x46, 0x46, 0x46, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x26, 0x26, 0x26, 0x2D, 0x2E, 0x2D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3A, 0x3B, 
   0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x32, 0x31, 0x30, 
   0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x29, 0x2B, 
   0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3D, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 
   0x33, 0x34, 0x35, 0x33, 0x35, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x38, 0x39, 0x38, 0x3C, 0x3B, 0x3C, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 
   0x42, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4B, 0x49, 
   0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x18, 0x1A, 0x18, 0x01, 0x01, 0x01, 0x33, 0x33, 0x33, 0x52, 0x52, 
   0x52, 0x50, 0x4F, 0x50, 0x3B, 0x3A, 0x3B, 0x37, 0x36, 0x37, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x46, 
   0x47, 0x46, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 
   0x40, 0x41, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 
   0x40, 0x41, 0x41, 0x42, 0x41, 0x3E, 0x3D, 0x3E, 0x3F, 0x40, 0x3F, 0x44, 0x44, 0x44, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x45, 0x44, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x4D, 0x4C, 0x4D, 0x57, 0x56, 0x57, 0x52, 0x54, 0x52, 0x6A, 0x6A, 0x6A, 0x4F, 
   0x4F, 0x4F, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x43, 0x42, 0x43, 0x45, 0x46, 
   0x45, 0x3B, 0x3C, 0x3B, 0x1D, 0x1C, 0x1D, 0x30, 0x2F, 0x30, 0x34, 0x34, 0x34, 0x3A, 0x3A, 0x3A, 
   0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 
   0x33, 0x33, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x30, 0x30, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3E, 
   0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 
   0x38, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x35, 0x37, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x3C, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3C, 0x3B, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x42, 0x42, 
   0x42, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 
   0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4C, 0x4B, 0x4C, 0x4B, 
   0x4C, 0x4B, 0x4F, 0x4E, 0x4F, 0x47, 0x47, 0x47, 0x19, 0x19, 0x19, 0x08, 0x06, 0x08, 0x2E, 0x2F, 
   0x2E, 0x4B, 0x4B, 0x4B, 0x58, 0x58, 0x58, 0x3B, 0x3E, 0x3B, 0x17, 0x16, 0x17, 0x46, 0x47, 0x46, 
   0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x45, 0x43, 
   0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4C, 0x4C, 0x5B, 0x59, 0x5B, 0x6D, 0x6C, 0x6D, 0x6C, 0x6C, 0x6C, 0x4B, 0x4C, 0x4B, 0x46, 
   0x45, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x28, 0x28, 0x28, 0x30, 0x32, 0x30, 0x41, 0x42, 0x41, 0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x33, 
   0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x30, 0x32, 0x30, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x41, 0x42, 0x41, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3E, 0x40, 0x3E, 0x3C, 0x3E, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x33, 0x33, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 
   0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 
   0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x46, 0x44, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 
   0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x45, 0x47, 0x45, 
   0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4F, 0x4F, 0x4F, 0x4C, 0x4D, 0x4C, 0x09, 0x0A, 0x09, 0x00, 0x00, 
   0x00, 0x46, 0x46, 0x46, 0x4F, 0x4F, 0x4F, 0x49, 0x49, 0x49, 0x37, 0x37, 0x37, 0x32, 0x33, 0x32, 
   0x4B, 0x4B, 0x4B, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x48, 
   0x46, 0x48, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x48, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4D, 
   0x4C, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4D, 0x4F, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4A, 0x4B, 0x4A, 0x61, 0x60, 0x61, 0x75, 0x76, 0x75, 0x5A, 0x5D, 0x5A, 0x49, 0x48, 0x49, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x40, 0x3F, 
   0x40, 0x1C, 0x1D, 0x1C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 
   0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 
   0x35, 0x37, 0x33, 0x35, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2D, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x41, 
   0x41, 0x41, 0x40, 0x3F, 0x40, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x37, 
   0x38, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 
   0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x35, 
   0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x38, 0x36, 0x38, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 
   0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 
   0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 
   0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4D, 0x4C, 0x4E, 
   0x4D, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x52, 0x52, 0x52, 0x31, 0x30, 0x31, 0x00, 0x00, 
   0x00, 0x1E, 0x1F, 0x1E, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x54, 0x55, 0x54, 0x1B, 0x1C, 0x1B, 
   0x43, 0x43, 0x43, 0x4C, 0x4D, 0x4C, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x45, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x53, 0x55, 0x53, 0x6D, 0x70, 0x6D, 0x75, 0x75, 0x75, 0x4F, 0x50, 0x4F, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x44, 0x45, 0x42, 0x42, 0x42, 0x47, 0x47, 0x47, 0x3A, 0x39, 
   0x3A, 0x24, 0x22, 0x24, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x36, 
   0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 
   0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x42, 
   0x43, 0x42, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x38, 
   0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x35, 0x37, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x35, 0x34, 0x35, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 
   0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x46, 0x44, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x47, 0x46, 0x47, 0x47, 0x48, 0x47, 0x4A, 0x4A, 0x4A, 0x4C, 0x4B, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x51, 0x51, 0x51, 0x2A, 0x29, 
   0x2A, 0x00, 0x00, 0x00, 0x31, 0x2F, 0x31, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x30, 0x30, 0x30, 
   0x31, 0x33, 0x31, 0x4E, 0x4E, 0x4E, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 
   0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x50, 0x42, 0x42, 0x42, 
   0x54, 0x53, 0x54, 0x70, 0x72, 0x70, 0x52, 0x52, 0x52, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x41, 0x41, 0x41, 0x2F, 0x2F, 
   0x2F, 0x35, 0x34, 0x35, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x36, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x31, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 
   0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x2E, 
   0x2E, 0x2B, 0x2D, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x44, 
   0x43, 0x44, 0x41, 0x41, 0x41, 0x3F, 0x3E, 0x3F, 0x3D, 0x3B, 0x3D, 0x39, 0x3A, 0x39, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 
   0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 
   0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 
   0x40, 0x41, 0x42, 0x41, 0x42, 0x44, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x47, 0x47, 0x47, 0x49, 0x47, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 
   0x43, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x47, 0x47, 0x47, 0x48, 0x4A, 0x48, 0x49, 0x4B, 0x49, 0x4E, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4F, 0x51, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x13, 0x12, 0x13, 0x03, 0x02, 0x03, 0x36, 0x35, 0x36, 0x51, 0x51, 0x51, 0x47, 0x48, 0x47, 
   0x24, 0x24, 0x24, 0x3E, 0x3F, 0x3E, 0x4D, 0x4D, 0x4D, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x45, 
   0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 
   0x44, 0x46, 0x44, 0x46, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 
   0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4B, 0x4D, 0x59, 0x57, 0x59, 
   0x6C, 0x6A, 0x6C, 0x64, 0x62, 0x64, 0x47, 0x49, 0x47, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 
   0x47, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x38, 0x39, 0x38, 0x3B, 0x3A, 
   0x3B, 0x44, 0x42, 0x44, 0x41, 0x40, 0x41, 0x3D, 0x3C, 0x3D, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 
   0x37, 0x37, 0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x33, 0x32, 0x30, 0x32, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x30, 0x32, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 
   0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 
   0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x3A, 0x3B, 
   0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 
   0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3E, 0x3C, 0x3E, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 
   0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x44, 0x46, 0x44, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 
   0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4D, 0x4B, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4F, 0x4E, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x53, 0x55, 
   0x53, 0x3A, 0x3B, 0x3A, 0x00, 0x00, 0x00, 0x1A, 0x1B, 0x1A, 0x4E, 0x4F, 0x4E, 0x4C, 0x4D, 0x4C, 
   0x22, 0x20, 0x22, 0x2F, 0x2F, 0x2F, 0x50, 0x51, 0x50, 0x49, 0x4B, 0x49, 0x49, 0x48, 0x49, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 
   0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4C, 0x4E, 
   0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x50, 0x4E, 0x4B, 0x4C, 0x4B, 0x46, 0x45, 0x46, 0x73, 0x73, 0x73, 
   0x72, 0x72, 0x72, 0x4B, 0x4C, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x2E, 0x2C, 0x2E, 0x2E, 0x2D, 0x2E, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x30, 0x32, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x30, 0x30, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x33, 0x32, 0x33, 0x33, 0x31, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x45, 
   0x46, 0x45, 0x44, 0x44, 0x44, 0x41, 0x41, 0x41, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 
   0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 
   0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 
   0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x45, 
   0x44, 0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 
   0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x4E, 0x4F, 0x4E, 0x33, 0x33, 0x33, 0x04, 0x04, 0x04, 0x1A, 0x19, 0x1A, 0x4B, 0x4B, 0x4B, 
   0x40, 0x3F, 0x40, 0x34, 0x34, 0x34, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4A, 0x49, 0x4A, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x41, 
   0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x4A, 
   0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4B, 0x4C, 0x4B, 0x5E, 0x5E, 0x5E, 0x67, 0x67, 0x67, 0x74, 0x73, 0x74, 
   0x5C, 0x5C, 0x5C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x45, 
   0x45, 0x45, 0x46, 0x47, 0x46, 0x3E, 0x3E, 0x3E, 0x22, 0x22, 0x22, 0x2F, 0x2F, 0x2F, 0x33, 0x34, 
   0x33, 0x3E, 0x3E, 0x3E, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x32, 0x34, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 
   0x2F, 0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x44, 0x45, 0x41, 0x42, 0x41, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 0x3D, 0x3D, 0x3C, 
   0x3D, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x37, 
   0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x3A, 
   0x39, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 
   0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x45, 0x46, 
   0x45, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x45, 0x47, 0x45, 
   0x48, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 
   0x4E, 0x4E, 0x50, 0x4F, 0x50, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x17, 0x16, 0x17, 0x00, 0x00, 0x00, 0x3E, 0x3D, 0x3E, 
   0x57, 0x57, 0x57, 0x42, 0x41, 0x42, 0x3B, 0x3A, 0x3B, 0x4C, 0x4C, 0x4C, 0x4F, 0x50, 0x4F, 0x4A, 
   0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x46, 0x47, 0x44, 0x45, 0x44, 0x42, 0x42, 
   0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4B, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x51, 0x50, 0x51, 0x6F, 0x70, 0x6F, 0x82, 0x83, 0x82, 0x5F, 0x5E, 0x5F, 
   0x47, 0x47, 0x47, 0x4B, 0x4B, 0x4B, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x48, 
   0x46, 0x48, 0x48, 0x46, 0x48, 0x3B, 0x38, 0x3B, 0x34, 0x35, 0x34, 0x46, 0x46, 0x46, 0x45, 0x45, 
   0x45, 0x40, 0x41, 0x40, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x35, 
   0x37, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 
   0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 
   0x2F, 0x2F, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x34, 0x32, 0x34, 0x31, 0x31, 0x31, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 
   0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x44, 0x45, 0x44, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 
   0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 
   0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x3A, 0x38, 0x3A, 0x39, 0x3B, 
   0x39, 0x3C, 0x3E, 0x3C, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x39, 0x37, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x3A, 0x39, 0x3B, 0x39, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 
   0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 0x4B, 0x4C, 0x4B, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4C, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x51, 0x52, 
   0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x4B, 0x4B, 0x4B, 0x1E, 0x1E, 0x1E, 0x05, 0x06, 0x05, 
   0x44, 0x43, 0x44, 0x55, 0x54, 0x55, 0x4C, 0x4A, 0x4C, 0x35, 0x35, 0x35, 0x44, 0x46, 0x44, 0x4D, 
   0x4D, 0x4D, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x43, 0x43, 
   0x43, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 
   0x43, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 
   0x4B, 0x43, 0x43, 0x43, 0x64, 0x64, 0x64, 0x7E, 0x80, 0x7E, 0x5B, 0x5D, 0x5B, 0x4C, 0x4D, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x43, 0x44, 0x43, 0x3B, 
   0x3B, 0x3B, 0x44, 0x42, 0x44, 0x44, 0x42, 0x44, 0x46, 0x46, 0x46, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x37, 0x36, 
   0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x30, 0x32, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x45, 0x45, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3E, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 
   0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 
   0x3C, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3A, 0x3C, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 
   0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x41, 
   0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 
   0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 
   0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x51, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x51, 0x52, 0x51, 0x47, 0x48, 0x47, 0x0C, 0x0B, 0x0C, 
   0x09, 0x09, 0x09, 0x43, 0x42, 0x43, 0x57, 0x59, 0x57, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x4E, 
   0x51, 0x4E, 0x4F, 0x50, 0x4F, 0x49, 0x48, 0x49, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x44, 0x43, 
   0x44, 0x42, 0x43, 0x42, 0x41, 0x43, 0x41, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 
   0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x51, 0x50, 0x51, 0x4A, 0x4A, 0x4A, 0x4B, 0x49, 0x4B, 0x5A, 0x5C, 
   0x5A, 0x69, 0x6A, 0x69, 0x74, 0x74, 0x74, 0x6C, 0x6D, 0x6C, 0x4E, 0x4E, 0x4E, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x4A, 0x4A, 0x47, 0x49, 0x47, 0x4A, 0x4A, 0x4A, 0x49, 0x48, 0x49, 0x3B, 0x3B, 0x3B, 0x3F, 
   0x3F, 0x3F, 0x3C, 0x3E, 0x3C, 0x2F, 0x30, 0x2F, 0x3D, 0x3E, 0x3D, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3A, 0x3C, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 
   0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 
   0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x2F, 
   0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x34, 0x36, 0x34, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x30, 
   0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x30, 
   0x2E, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x31, 
   0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x46, 
   0x48, 0x46, 0x44, 0x45, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3E, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x40, 
   0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 
   0x3D, 0x40, 0x3E, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3D, 
   0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3E, 0x3D, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 
   0x41, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x46, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 
   0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 
   0x47, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x4A, 0x4D, 0x4A, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4F, 0x4F, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x50, 0x52, 0x50, 0x51, 0x52, 0x51, 0x51, 0x51, 
   0x51, 0x51, 0x51, 0x51, 0x4F, 0x50, 0x4F, 0x4E, 0x50, 0x4E, 0x54, 0x54, 0x54, 0x32, 0x32, 0x32, 
   0x00, 0x00, 0x00, 0x21, 0x20, 0x21, 0x50, 0x52, 0x50, 0x4E, 0x4F, 0x4E, 0x41, 0x42, 0x41, 0x3A, 
   0x3A, 0x3A, 0x4D, 0x4D, 0x4D, 0x4A, 0x49, 0x4A, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x43, 
   0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x48, 
   0x48, 0x48, 0x4D, 0x4C, 0x4D, 0x55, 0x56, 0x55, 0x5A, 0x59, 0x5A, 0x53, 0x53, 0x53, 0x62, 0x61, 
   0x62, 0x90, 0x90, 0x90, 0x72, 0x70, 0x72, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x48, 0x49, 0x48, 0x49, 0x4B, 0x49, 0x4C, 0x4D, 0x4C, 0x33, 0x31, 0x33, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 
   0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x3F, 0x40, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x3B, 0x39, 0x3B, 0x39, 0x39, 0x39, 0x37, 
   0x39, 0x37, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x34, 0x32, 0x34, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x36, 0x34, 0x36, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x2F, 
   0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x33, 0x31, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x31, 0x2F, 0x31, 0x31, 0x2F, 0x31, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x46, 0x48, 0x46, 0x45, 
   0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 
   0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x3F, 0x41, 0x3F, 0x3F, 0x40, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3A, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x40, 0x3F, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3A, 0x3C, 
   0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3D, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x46, 0x48, 0x48, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x50, 0x4F, 0x51, 0x50, 0x51, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x50, 
   0x51, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4C, 0x4D, 0x4C, 
   0x29, 0x2A, 0x29, 0x03, 0x04, 0x03, 0x1F, 0x1F, 0x1F, 0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x2E, 
   0x2F, 0x2E, 0x36, 0x37, 0x36, 0x48, 0x49, 0x48, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x4F, 
   0x4E, 0x4F, 0x4C, 0x4C, 0x4C, 0x3A, 0x3B, 0x3A, 0x79, 0x79, 0x79, 0x99, 0x99, 0x99, 0x77, 0x76, 
   0x77, 0x6A, 0x69, 0x6A, 0x52, 0x52, 0x52, 0x4B, 0x4C, 0x4B, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x38, 0x3A, 0x38, 0x2A, 0x2A, 0x2A, 0x30, 0x2E, 0x30, 0x37, 
   0x39, 0x37, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x45, 0x44, 
   0x45, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x40, 
   0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3E, 0x3C, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 0x48, 
   0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x48, 0x46, 0x48, 0x47, 0x48, 0x47, 0x49, 0x49, 
   0x49, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x4F, 0x51, 0x4F, 0x52, 0x51, 0x52, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x50, 0x50, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x50, 0x4F, 0x50, 
   0x4E, 0x4F, 0x4E, 0x0C, 0x0D, 0x0C, 0x03, 0x02, 0x03, 0x3F, 0x40, 0x3F, 0x50, 0x50, 0x50, 0x39, 
   0x38, 0x39, 0x1D, 0x1E, 0x1D, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x47, 0x46, 0x47, 
   0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x45, 
   0x46, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x49, 0x4E, 
   0x4E, 0x4E, 0x55, 0x55, 0x55, 0x26, 0x25, 0x26, 0x52, 0x50, 0x52, 0xA6, 0xA5, 0xA6, 0x82, 0x81, 
   0x82, 0x4D, 0x4C, 0x4D, 0x49, 0x4A, 0x49, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4B, 0x4C, 0x4B, 
   0x4E, 0x4C, 0x4E, 0x41, 0x41, 0x41, 0x16, 0x19, 0x16, 0x3B, 0x3C, 0x3B, 0x4C, 0x4C, 0x4C, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x36, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x31, 0x35, 
   0x33, 0x35, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x31, 0x33, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 
   0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 
   0x45, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x45, 0x43, 0x45, 0x44, 
   0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 
   0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x41, 0x40, 
   0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 0x41, 0x42, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 
   0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4B, 
   0x4A, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 0x4E, 0x4F, 0x4E, 0x4F, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x52, 0x52, 0x52, 0x50, 0x52, 0x50, 0x50, 0x50, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 
   0x4F, 0x4F, 0x4F, 0x3C, 0x3B, 0x3C, 0x03, 0x03, 0x03, 0x0A, 0x0A, 0x0A, 0x41, 0x41, 0x41, 0x39, 
   0x3A, 0x39, 0x10, 0x10, 0x10, 0x43, 0x41, 0x43, 0x48, 0x48, 0x48, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 
   0x47, 0x46, 0x45, 0x45, 0x45, 0x46, 0x44, 0x46, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x4A, 0x49, 0x4A, 0x49, 0x3E, 
   0x3F, 0x3E, 0x4D, 0x4C, 0x4D, 0x6B, 0x6B, 0x6B, 0x65, 0x66, 0x65, 0x5B, 0x5C, 0x5B, 0x56, 0x57, 
   0x56, 0x4E, 0x4E, 0x4E, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x50, 0x50, 0x50, 0x3A, 0x38, 0x3A, 0x25, 0x26, 0x25, 0x46, 0x46, 0x46, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 
   0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3A, 0x3C, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 
   0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 
   0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x31, 0x33, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x43, 0x41, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x41, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x45, 
   0x46, 0x45, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x40, 
   0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 
   0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x42, 0x41, 0x42, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x4A, 0x48, 0x4B, 0x4A, 0x4B, 0x4A, 0x4C, 
   0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4F, 0x4F, 
   0x50, 0x4F, 0x50, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x50, 
   0x52, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x50, 0x50, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4D, 0x4E, 0x4D, 0x34, 0x34, 0x34, 0x06, 0x06, 0x06, 0x40, 0x3F, 0x40, 0x38, 
   0x3A, 0x38, 0x14, 0x14, 0x14, 0x43, 0x43, 0x43, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x45, 0x47, 
   0x45, 0x48, 0x46, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 
   0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4C, 0x4C, 0x4C, 0x3D, 
   0x3D, 0x3D, 0x25, 0x24, 0x25, 0x84, 0x85, 0x84, 0x6C, 0x6C, 0x6C, 0x48, 0x48, 0x48, 0x4B, 0x4C, 
   0x4B, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x51, 0x50, 
   0x4A, 0x4B, 0x4A, 0x31, 0x30, 0x31, 0x49, 0x48, 0x49, 0x4D, 0x4C, 0x4D, 0x4A, 0x4B, 0x4A, 0x49, 
   0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x48, 
   0x47, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 0x3A, 
   0x3C, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 
   0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 
   0x38, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x31, 0x33, 0x31, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x2F, 0x32, 0x2F, 0x30, 0x30, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x41, 0x43, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x41, 0x3F, 0x41, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x44, 0x43, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 
   0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 
   0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x41, 0x40, 
   0x41, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 
   0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x51, 
   0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x50, 0x50, 
   0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 
   0x4B, 0x4C, 0x4B, 0x45, 0x46, 0x45, 0x52, 0x52, 0x52, 0x5F, 0x5F, 0x5F, 0x52, 0x52, 0x52, 0x37, 
   0x36, 0x37, 0x0E, 0x0E, 0x0E, 0x42, 0x42, 0x42, 0x48, 0x49, 0x48, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x49, 0x49, 0x49, 
   0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 0x4B, 0x4A, 0x4B, 0x47, 
   0x46, 0x47, 0x2E, 0x2E, 0x2E, 0x4F, 0x50, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4B, 0x4B, 0x4B, 0x4D, 0x4F, 0x4D, 
   0x3A, 0x3A, 0x3A, 0x3E, 0x3E, 0x3E, 0x54, 0x53, 0x54, 0x4D, 0x4C, 0x4D, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 
   0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3E, 
   0x3C, 0x3E, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x35, 0x33, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2E, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x42, 0x44, 0x42, 0x44, 0x43, 0x44, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 
   0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x43, 0x44, 0x43, 0x45, 0x44, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x46, 0x44, 0x46, 0x44, 0x43, 0x44, 
   0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x40, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x43, 0x45, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x41, 0x41, 
   0x41, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x41, 0x40, 0x41, 0x43, 0x42, 0x43, 0x42, 0x44, 0x42, 
   0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x40, 
   0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 
   0x3F, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x4F, 0x51, 0x4F, 0x51, 0x50, 0x51, 
   0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 
   0x52, 0x53, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x50, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4E, 0x4D, 0x4E, 0x3A, 0x39, 0x3A, 0x33, 0x34, 0x33, 0x61, 0x64, 0x61, 0x50, 0x4F, 0x50, 0x41, 
   0x3F, 0x41, 0x33, 0x32, 0x33, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x49, 0x4A, 0x49, 
   0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x49, 0x4A, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x49, 0x49, 0x49, 0x43, 0x43, 0x43, 0x4A, 
   0x4C, 0x4A, 0x73, 0x71, 0x73, 0x52, 0x53, 0x52, 0x4A, 0x4B, 0x4A, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4F, 0x4F, 0x4F, 0x52, 0x52, 0x52, 0x54, 0x54, 0x54, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 
   0x42, 0x42, 0x42, 0x49, 0x4A, 0x49, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x49, 
   0x48, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 
   0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 
   0x33, 0x31, 0x32, 0x33, 0x32, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 
   0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 
   0x3D, 0x3B, 0x3C, 0x3D, 0x3C, 0x40, 0x3F, 0x40, 0x40, 0x42, 0x40, 0x44, 0x43, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 
   0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x43, 0x43, 0x43, 0x41, 0x42, 
   0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 
   0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x41, 
   0x42, 0x41, 0x3F, 0x41, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x49, 0x48, 0x49, 0x48, 
   0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x52, 0x52, 0x52, 
   0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 
   0x53, 0x53, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x50, 0x50, 
   0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x49, 0x49, 0x49, 0x54, 0x51, 0x54, 0x5E, 0x5E, 0x5E, 0x45, 0x47, 0x45, 0x39, 0x38, 0x39, 0x42, 
   0x42, 0x42, 0x33, 0x32, 0x33, 0x45, 0x45, 0x45, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x48, 0x47, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4E, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x49, 0x4B, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x4A, 0x4A, 0x4A, 0x3C, 0x3A, 0x3C, 0x31, 
   0x32, 0x31, 0x69, 0x69, 0x69, 0x50, 0x50, 0x50, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4F, 0x50, 0x4F, 0x53, 0x54, 0x53, 0x44, 0x43, 0x44, 0x54, 0x54, 0x54, 0x46, 0x46, 0x46, 
   0x3E, 0x3E, 0x3E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x44, 0x43, 0x44, 0x41, 0x41, 0x41, 0x40, 0x3F, 0x40, 0x40, 
   0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3C, 0x3E, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 
   0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x32, 
   0x34, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x40, 
   0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x43, 0x44, 0x43, 0x42, 0x42, 
   0x42, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 
   0x44, 0x46, 0x44, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 
   0x42, 0x42, 0x40, 0x42, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x3F, 0x40, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x49, 
   0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x50, 0x52, 0x50, 0x51, 0x51, 0x51, 0x52, 0x53, 0x52, 
   0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 
   0x52, 0x53, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x51, 
   0x51, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 
   0x60, 0x62, 0x60, 0x73, 0x71, 0x73, 0x6B, 0x6A, 0x6B, 0x40, 0x40, 0x40, 0x22, 0x22, 0x22, 0x3B, 
   0x3A, 0x3B, 0x36, 0x37, 0x36, 0x44, 0x46, 0x44, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4C, 0x4C, 0x4C, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4D, 0x4C, 0x4D, 0x4A, 0x4B, 0x4A, 0x47, 
   0x48, 0x47, 0x45, 0x47, 0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x45, 0x47, 0x45, 0x4A, 0x4A, 0x4A, 0x3B, 0x3B, 0x3B, 0x0D, 
   0x0B, 0x0D, 0x3B, 0x3B, 0x3B, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x51, 0x51, 0x51, 0x47, 0x46, 0x47, 0x24, 0x25, 0x24, 0x52, 0x54, 0x52, 0x41, 0x41, 0x41, 
   0x40, 0x41, 0x40, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x4C, 0x4E, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 
   0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x44, 0x43, 0x44, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x34, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 
   0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x39, 0x37, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2B, 0x29, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x40, 
   0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x42, 0x41, 0x43, 0x42, 0x43, 0x44, 0x45, 0x44, 0x44, 0x46, 0x44, 0x46, 0x46, 
   0x46, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x43, 
   0x43, 0x41, 0x42, 0x41, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x46, 0x44, 0x46, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x44, 
   0x43, 0x44, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x41, 
   0x3F, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 
   0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 
   0x50, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x53, 0x51, 
   0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x52, 
   0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 
   0x52, 0x51, 0x52, 0x51, 0x50, 0x52, 0x50, 0x4F, 0x4F, 0x4F, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 
   0x6E, 0x6F, 0x6E, 0x78, 0x78, 0x78, 0x51, 0x50, 0x51, 0x41, 0x3F, 0x41, 0x24, 0x24, 0x24, 0x44, 
   0x44, 0x44, 0x4E, 0x4E, 0x4E, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 
   0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4A, 0x4B, 0x4A, 0x48, 
   0x49, 0x48, 0x47, 0x46, 0x47, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x4A, 0x49, 0x4A, 0x44, 0x46, 0x44, 0x0A, 
   0x0B, 0x0A, 0x09, 0x09, 0x09, 0x3C, 0x3D, 0x3C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 
   0x4E, 0x52, 0x52, 0x52, 0x3D, 0x3D, 0x3D, 0x1F, 0x20, 0x1F, 0x53, 0x53, 0x53, 0x51, 0x51, 0x51, 
   0x51, 0x52, 0x51, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 
   0x4D, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x49, 0x4B, 0x49, 0x4A, 0x4A, 0x4A, 
   0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x45, 0x45, 0x45, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 
   0x40, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x3F, 
   0x40, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x37, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 
   0x37, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x31, 
   0x32, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3D, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x40, 0x40, 0x40, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x44, 0x43, 0x46, 0x44, 0x46, 0x45, 0x46, 0x45, 0x45, 0x47, 0x45, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 
   0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 0x47, 0x44, 0x46, 0x44, 0x46, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x44, 0x46, 0x44, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x40, 0x41, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 
   0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 
   0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x52, 
   0x53, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 
   0x52, 0x53, 0x53, 0x53, 0x51, 0x52, 0x51, 0x4D, 0x4D, 0x4D, 0x4A, 0x4A, 0x4A, 0x63, 0x61, 0x63, 
   0x70, 0x6F, 0x70, 0x5A, 0x5B, 0x5A, 0x4B, 0x4B, 0x4B, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x4D, 
   0x4E, 0x4D, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 
   0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4D, 0x4C, 0x4D, 
   0x4C, 0x4E, 0x4C, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4A, 0x4B, 0x4A, 0x47, 
   0x48, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 0x41, 0x42, 0x41, 0x41, 
   0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x45, 0x46, 0x45, 0x49, 0x48, 0x49, 0x4C, 0x4D, 0x4C, 0x22, 
   0x22, 0x22, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x31, 0x30, 0x31, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 
   0x4D, 0x50, 0x50, 0x50, 0x44, 0x44, 0x44, 0x29, 0x29, 0x29, 0x52, 0x53, 0x52, 0x4F, 0x50, 0x4F, 
   0x4F, 0x4E, 0x4F, 0x52, 0x52, 0x52, 0x54, 0x54, 0x54, 0x4D, 0x4F, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4D, 0x4F, 0x4D, 0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 
   0x41, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x40, 
   0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x37, 
   0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 
   0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2D, 0x2F, 0x2D, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x29, 0x2B, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x40, 
   0x3F, 0x40, 0x41, 0x40, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x46, 
   0x44, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x42, 0x44, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x41, 
   0x42, 0x41, 0x41, 0x40, 0x41, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x40, 
   0x3F, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x43, 0x44, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x46, 
   0x44, 0x46, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x40, 0x42, 0x40, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 
   0x48, 0x47, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x50, 0x51, 
   0x50, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 
   0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x53, 
   0x52, 0x53, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 
   0x52, 0x53, 0x53, 0x53, 0x53, 0x52, 0x53, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x74, 0x74, 0x74, 
   0x69, 0x69, 0x69, 0x4A, 0x4C, 0x4A, 0x43, 0x43, 0x43, 0x3A, 0x39, 0x3A, 0x44, 0x44, 0x44, 0x44, 
   0x46, 0x44, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 
   0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4D, 0x4B, 
   0x4D, 0x4E, 0x4D, 0x4F, 0x4F, 0x4F, 0x51, 0x50, 0x51, 0x4D, 0x4E, 0x4D, 0x4B, 0x4B, 0x4B, 0x48, 
   0x48, 0x48, 0x47, 0x46, 0x47, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 
   0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x4C, 0x4B, 0x4C, 0x3B, 
   0x3D, 0x3B, 0x0F, 0x10, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x4A, 0x49, 0x4A, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x52, 0x52, 0x52, 0x38, 0x38, 0x38, 0x3C, 0x3C, 0x3C, 0x4F, 0x50, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x50, 0x57, 0x57, 0x57, 0x50, 0x50, 0x50, 0x4C, 0x4C, 0x4C, 0x4B, 
   0x4D, 0x4B, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4B, 0x4C, 0x4A, 0x4B, 0x4A, 
   0x49, 0x4A, 0x49, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 
   0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 
   0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x2A, 0x28, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 
   0x28, 0x29, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 
   0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3D, 0x41, 0x40, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x43, 0x43, 0x43, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3B, 0x3E, 0x3B, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x44, 0x43, 
   0x44, 0x42, 0x43, 0x42, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x44, 0x46, 0x44, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 
   0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x48, 
   0x47, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x50, 0x4F, 0x50, 0x50, 0x51, 
   0x50, 0x51, 0x52, 0x51, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x54, 0x53, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x53, 0x54, 0x53, 0x52, 
   0x53, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 
   0x52, 0x52, 0x53, 0x52, 0x4D, 0x4E, 0x4D, 0x5A, 0x5A, 0x5A, 0x6D, 0x6B, 0x6D, 0x61, 0x63, 0x61, 
   0x53, 0x56, 0x53, 0x48, 0x46, 0x48, 0x3B, 0x3A, 0x3B, 0x47, 0x46, 0x47, 0x4E, 0x4F, 0x4E, 0x47, 
   0x48, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4D, 0x4D, 0x4D, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x4D, 0x4E, 0x4D, 0x4B, 0x4B, 0x4B, 0x47, 
   0x49, 0x47, 0x45, 0x46, 0x45, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x4B, 
   0x4C, 0x4B, 0x4B, 0x4A, 0x4B, 0x13, 0x14, 0x13, 0x01, 0x00, 0x01, 0x3F, 0x3F, 0x3F, 0x4F, 0x50, 
   0x4F, 0x4D, 0x4D, 0x4D, 0x51, 0x51, 0x51, 0x2F, 0x31, 0x2F, 0x39, 0x39, 0x39, 0x4F, 0x4F, 0x4F, 
   0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x56, 0x56, 0x56, 0x4F, 0x4F, 0x4F, 0x4B, 0x4C, 0x4B, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4F, 0x4D, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4A, 0x4C, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 
   0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x41, 
   0x42, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 
   0x39, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 
   0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 
   0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x33, 0x31, 0x32, 
   0x33, 0x32, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 
   0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x28, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x2A, 0x28, 0x2A, 0x2A, 0x28, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3F, 
   0x3E, 0x40, 0x41, 0x40, 0x43, 0x43, 0x43, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x41, 0x43, 0x41, 
   0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 
   0x47, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4D, 0x4C, 0x4D, 0x50, 0x4F, 0x50, 0x51, 0x51, 
   0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x52, 0x53, 0x52, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 
   0x55, 0x54, 0x55, 0x54, 0x55, 0x54, 0x56, 0x55, 0x56, 0x56, 0x55, 0x56, 0x55, 0x55, 0x55, 0x53, 
   0x54, 0x53, 0x54, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x50, 0x51, 
   0x50, 0x59, 0x58, 0x59, 0x64, 0x64, 0x64, 0x78, 0x78, 0x78, 0x84, 0x84, 0x84, 0x59, 0x5A, 0x59, 
   0x4B, 0x4B, 0x4B, 0x3E, 0x3F, 0x3E, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x48, 
   0x47, 0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 
   0x48, 0x48, 0x46, 0x46, 0x46, 0x43, 0x45, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 
   0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x51, 0x50, 0x51, 0x31, 0x31, 0x31, 0x01, 0x01, 0x01, 0x19, 0x19, 0x19, 0x4C, 0x4B, 
   0x4C, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x35, 0x34, 0x35, 0x41, 0x41, 0x41, 0x4F, 0x50, 0x4F, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x52, 0x52, 0x52, 0x4C, 0x4D, 0x4C, 0x4A, 0x4C, 0x4A, 0x4C, 
   0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4B, 0x4D, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x43, 
   0x43, 0x43, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3B, 0x3C, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 
   0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x35, 
   0x34, 0x35, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 
   0x2A, 0x2B, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x44, 0x46, 0x44, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x48, 0x49, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 
   0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 
   0x49, 0x49, 0x48, 0x49, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 
   0x48, 0x47, 0x49, 0x49, 0x49, 0x4D, 0x4B, 0x4D, 0x4D, 0x4E, 0x4D, 0x4F, 0x50, 0x4F, 0x50, 0x51, 
   0x50, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x53, 0x53, 0x53, 0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 
   0x54, 0x56, 0x54, 0x56, 0x57, 0x56, 0x56, 0x56, 0x56, 0x55, 0x57, 0x55, 0x55, 0x55, 0x55, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x59, 0x57, 
   0x59, 0x68, 0x69, 0x68, 0x86, 0x87, 0x86, 0x8B, 0x8C, 0x8B, 0x60, 0x60, 0x60, 0x45, 0x44, 0x45, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x3F, 0x40, 0x42, 0x40, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x48, 
   0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 0x47, 
   0x48, 0x47, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x40, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 
   0x49, 0x48, 0x4B, 0x4B, 0x4B, 0x47, 0x48, 0x47, 0x1D, 0x1B, 0x1D, 0x00, 0x00, 0x00, 0x18, 0x17, 
   0x18, 0x44, 0x43, 0x44, 0x50, 0x50, 0x50, 0x4A, 0x49, 0x4A, 0x3D, 0x3D, 0x3D, 0x44, 0x45, 0x44, 
   0x50, 0x51, 0x50, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 
   0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3B, 0x3C, 0x3B, 0x3D, 0x3B, 0x3D, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 
   0x3D, 0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3A, 0x3A, 0x3A, 0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 
   0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 
   0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2A, 0x2C, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x26, 0x28, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 
   0x3E, 0x3F, 0x40, 0x3F, 0x42, 0x43, 0x42, 0x46, 0x45, 0x46, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 
   0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x44, 0x43, 0x44, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x44, 0x42, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 
   0x48, 0x47, 0x4A, 0x4A, 0x4A, 0x4B, 0x4D, 0x4B, 0x4D, 0x4E, 0x4D, 0x4F, 0x50, 0x4F, 0x51, 0x51, 
   0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x52, 0x54, 0x52, 0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 
   0x55, 0x56, 0x55, 0x56, 0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x56, 0x56, 0x55, 0x55, 0x55, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x52, 0x53, 0x52, 0x4E, 0x4F, 0x4E, 0x5A, 0x5A, 
   0x5A, 0x72, 0x71, 0x72, 0x7C, 0x7D, 0x7C, 0x5D, 0x5E, 0x5D, 0x39, 0x3A, 0x39, 0x3F, 0x40, 0x3F, 
   0x4C, 0x4D, 0x4C, 0x41, 0x42, 0x41, 0x43, 0x44, 0x43, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x47, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x46, 
   0x47, 0x46, 0x45, 0x45, 0x45, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 
   0x44, 0x42, 0x44, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 
   0x48, 0x48, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x3E, 0x3D, 0x3E, 0x0B, 0x0B, 0x0B, 0x00, 0x00, 
   0x00, 0x20, 0x22, 0x20, 0x4F, 0x4F, 0x4F, 0x52, 0x51, 0x52, 0x4D, 0x4C, 0x4D, 0x35, 0x35, 0x35, 
   0x45, 0x46, 0x45, 0x4B, 0x4D, 0x4B, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4D, 
   0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x40, 0x3E, 
   0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x3E, 0x40, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 
   0x34, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x44, 0x42, 0x46, 0x45, 0x46, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x42, 0x44, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x48, 
   0x48, 0x48, 0x49, 0x49, 0x49, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x50, 0x51, 
   0x50, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x54, 0x54, 0x54, 0x55, 0x55, 0x55, 
   0x55, 0x56, 0x55, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x55, 0x56, 0x55, 0x55, 0x55, 0x54, 
   0x55, 0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 0x5A, 0x58, 0x5A, 0x66, 0x67, 0x66, 0x73, 0x72, 
   0x73, 0x7F, 0x7F, 0x7F, 0x6B, 0x6C, 0x6B, 0x40, 0x43, 0x40, 0x27, 0x29, 0x27, 0x3A, 0x39, 0x3A, 
   0x4A, 0x49, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4D, 0x4F, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4C, 0x4D, 0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x47, 
   0x47, 0x47, 0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x40, 0x40, 
   0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4E, 0x4E, 0x4E, 0x2A, 0x2A, 0x2A, 0x02, 0x02, 
   0x02, 0x07, 0x08, 0x07, 0x36, 0x37, 0x36, 0x4E, 0x4F, 0x4E, 0x57, 0x57, 0x57, 0x33, 0x31, 0x33, 
   0x31, 0x31, 0x31, 0x4D, 0x4E, 0x4D, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 
   0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 0x3C, 0x3E, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 
   0x3E, 0x3F, 0x3D, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x36, 
   0x35, 0x36, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x34, 
   0x35, 0x34, 0x32, 0x34, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2B, 0x2A, 
   0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 
   0x3E, 0x3F, 0x41, 0x3F, 0x42, 0x42, 0x42, 0x46, 0x44, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x40, 0x3E, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x43, 0x44, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x42, 0x44, 0x42, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 
   0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x52, 0x51, 
   0x52, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x55, 0x54, 0x55, 
   0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x56, 0x55, 0x55, 0x55, 0x55, 0x54, 
   0x54, 0x54, 0x53, 0x53, 0x53, 0x50, 0x51, 0x50, 0x60, 0x60, 0x60, 0x94, 0x93, 0x94, 0xA4, 0xA2, 
   0xA4, 0x75, 0x75, 0x75, 0x53, 0x55, 0x53, 0x35, 0x36, 0x35, 0x46, 0x47, 0x46, 0x4D, 0x4E, 0x4D, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x49, 0x48, 0x49, 0x47, 0x48, 0x47, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4A, 0x49, 0x4A, 0x46, 
   0x47, 0x46, 0x44, 0x46, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x3F, 
   0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x40, 0x42, 
   0x40, 0x41, 0x40, 0x43, 0x43, 0x43, 0x42, 0x44, 0x42, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x49, 
   0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x35, 0x35, 
   0x35, 0x01, 0x01, 0x01, 0x15, 0x16, 0x15, 0x46, 0x48, 0x46, 0x50, 0x4F, 0x50, 0x3F, 0x3F, 0x3F, 
   0x21, 0x21, 0x21, 0x45, 0x44, 0x45, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 
   0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 
   0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x3F, 0x40, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3B, 0x3A, 0x39, 0x39, 0x39, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 
   0x35, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x34, 
   0x35, 0x34, 0x33, 0x34, 0x30, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x27, 0x29, 0x27, 0x29, 0x29, 0x29, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 
   0x3E, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 
   0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x45, 0x46, 0x45, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x50, 0x50, 0x50, 0x52, 0x52, 
   0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x55, 0x54, 
   0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0x55, 0x54, 0x53, 
   0x54, 0x53, 0x56, 0x55, 0x56, 0x6F, 0x6E, 0x6F, 0x7C, 0x7D, 0x7C, 0x90, 0x92, 0x90, 0x82, 0x83, 
   0x82, 0x5D, 0x5C, 0x5D, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x3C, 0x3C, 0x3C, 0x4D, 0x4D, 0x4D, 
   0x50, 0x4E, 0x50, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 
   0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x40, 0x41, 0x40, 0x3E, 0x3D, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3E, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 
   0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x2A, 0x2A, 0x2A, 0x4E, 0x50, 0x4E, 0x4D, 0x4E, 0x4D, 
   0x2E, 0x2C, 0x2E, 0x37, 0x36, 0x37, 0x4F, 0x51, 0x4F, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 
   0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 
   0x4A, 0x49, 0x4A, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x44, 0x45, 0x44, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 0x44, 0x42, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x41, 0x3F, 0x41, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3B, 0x3C, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 
   0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x2A, 0x29, 0x29, 
   0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x40, 0x3F, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x40, 0x42, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x43, 0x45, 0x43, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x47, 0x46, 0x45, 0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 
   0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 
   0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4B, 0x4A, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x51, 0x4F, 0x51, 0x51, 
   0x51, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x55, 0x54, 
   0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x53, 0x55, 0x53, 0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 0x51, 
   0x52, 0x51, 0x51, 0x50, 0x51, 0x86, 0x86, 0x86, 0x9B, 0x9C, 0x9B, 0x70, 0x6E, 0x70, 0x4F, 0x50, 
   0x4F, 0x43, 0x42, 0x43, 0x32, 0x33, 0x32, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4A, 0x4C, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 
   0x4A, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4A, 0x4C, 0x4A, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x48, 0x4A, 0x48, 0x4A, 0x48, 0x4A, 0x47, 
   0x47, 0x47, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x48, 0x49, 
   0x48, 0x42, 0x41, 0x42, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 
   0x46, 0x46, 0x47, 0x47, 0x47, 0x4A, 0x49, 0x4A, 0x48, 0x4A, 0x48, 0x4B, 0x4A, 0x4B, 0x4D, 0x4E, 
   0x4D, 0x31, 0x33, 0x31, 0x00, 0x00, 0x00, 0x19, 0x18, 0x19, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x44, 0x45, 0x44, 0x31, 0x32, 0x31, 0x46, 0x47, 0x46, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 
   0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 
   0x48, 0x4A, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x42, 0x44, 
   0x42, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x41, 0x42, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x36, 0x36, 
   0x36, 0x34, 0x36, 0x34, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x2F, 0x31, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x29, 0x2A, 0x28, 0x29, 0x28, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x28, 
   0x29, 0x2B, 0x29, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x46, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 
   0x42, 0x44, 0x42, 0x40, 0x42, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 
   0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x44, 0x43, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4C, 0x4B, 0x4C, 0x4C, 
   0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x51, 0x50, 0x51, 0x51, 0x51, 
   0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x54, 0x54, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x4E, 
   0x4D, 0x4E, 0x48, 0x4A, 0x48, 0x7D, 0x7F, 0x7D, 0x81, 0x82, 0x81, 0x59, 0x5A, 0x59, 0x50, 0x52, 
   0x50, 0x37, 0x36, 0x37, 0x41, 0x40, 0x41, 0x4C, 0x4D, 0x4C, 0x52, 0x53, 0x52, 0x51, 0x51, 0x51, 
   0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 
   0x46, 0x47, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x4E, 0x4E, 0x4E, 0x64, 0x66, 0x64, 0x50, 0x52, 
   0x50, 0x3F, 0x41, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 
   0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 
   0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4C, 0x4D, 
   0x4C, 0x47, 0x47, 0x47, 0x1B, 0x1C, 0x1B, 0x03, 0x04, 0x03, 0x3A, 0x3A, 0x3A, 0x4A, 0x4B, 0x4A, 
   0x4C, 0x4F, 0x4C, 0x38, 0x37, 0x38, 0x2C, 0x2B, 0x2C, 0x49, 0x49, 0x49, 0x4D, 0x4C, 0x4D, 0x48, 
   0x49, 0x48, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x49, 0x4A, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 
   0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 
   0x41, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x41, 
   0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3A, 0x3C, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x29, 0x2C, 0x2A, 0x2C, 0x3F, 0x3D, 0x3F, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3F, 0x3E, 0x3F, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x43, 0x42, 0x43, 
   0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x45, 0x47, 
   0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 
   0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 
   0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x54, 0x54, 0x54, 0x56, 0x56, 0x56, 0x54, 
   0x55, 0x54, 0x58, 0x5A, 0x58, 0x61, 0x60, 0x61, 0x51, 0x53, 0x51, 0x4F, 0x51, 0x4F, 0x42, 0x44, 
   0x42, 0x48, 0x48, 0x48, 0x57, 0x56, 0x57, 0x51, 0x50, 0x51, 0x51, 0x52, 0x51, 0x50, 0x51, 0x50, 
   0x50, 0x50, 0x50, 0x4D, 0x4E, 0x4D, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 
   0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 
   0x46, 0x46, 0x45, 0x44, 0x45, 0x47, 0x46, 0x47, 0x61, 0x60, 0x61, 0x7C, 0x7E, 0x7C, 0x39, 0x39, 
   0x39, 0x31, 0x31, 0x31, 0x41, 0x41, 0x41, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x48, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x49, 0x4A, 
   0x49, 0x4F, 0x4D, 0x4F, 0x46, 0x46, 0x46, 0x08, 0x09, 0x08, 0x13, 0x11, 0x13, 0x40, 0x40, 0x40, 
   0x4B, 0x4D, 0x4B, 0x40, 0x3F, 0x40, 0x2A, 0x28, 0x2A, 0x44, 0x44, 0x44, 0x4F, 0x4F, 0x4F, 0x49, 
   0x49, 0x49, 0x47, 0x48, 0x47, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x48, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 
   0x46, 0x44, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x40, 
   0x41, 0x40, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 
   0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2C, 0x2A, 0x2C, 0x2D, 0x2C, 0x2D, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 0x44, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x41, 0x42, 0x41, 
   0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3A, 0x3C, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 0x47, 0x48, 0x47, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x50, 
   0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x53, 0x52, 
   0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x51, 0x51, 0x51, 0x53, 0x52, 0x53, 0x6D, 0x70, 0x6D, 0x8F, 
   0x8F, 0x8F, 0x81, 0x83, 0x81, 0x5A, 0x5B, 0x5A, 0x47, 0x49, 0x47, 0x3D, 0x3D, 0x3D, 0x48, 0x49, 
   0x48, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 
   0x50, 0x50, 0x50, 0x4C, 0x4E, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x44, 
   0x45, 0x44, 0x38, 0x38, 0x38, 0x57, 0x56, 0x57, 0x7B, 0x7B, 0x7B, 0x5C, 0x5C, 0x5C, 0x2D, 0x2C, 
   0x2D, 0x24, 0x24, 0x24, 0x43, 0x44, 0x43, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x40, 0x3E, 0x40, 
   0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x48, 0x49, 
   0x48, 0x4B, 0x49, 0x4B, 0x4C, 0x4D, 0x4C, 0x20, 0x21, 0x20, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 
   0x3E, 0x3E, 0x3E, 0x4A, 0x49, 0x4A, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x39, 0x3A, 0x39, 0x41, 
   0x41, 0x41, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x4A, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x43, 
   0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x3E, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 
   0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3E, 0x3F, 0x3E, 0x41, 0x41, 0x41, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x44, 0x44, 0x44, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x43, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x41, 0x41, 0x41, 
   0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 
   0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 
   0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x50, 0x4F, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x52, 0x51, 0x52, 0x52, 0x53, 0x52, 
   0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x5E, 0x5E, 0x5E, 0x6E, 0x6F, 0x6E, 0x81, 0x82, 0x81, 0x8C, 
   0x8B, 0x8C, 0x67, 0x65, 0x67, 0x55, 0x56, 0x55, 0x42, 0x42, 0x42, 0x38, 0x39, 0x38, 0x30, 0x30, 
   0x30, 0x4D, 0x4D, 0x4D, 0x53, 0x53, 0x53, 0x51, 0x53, 0x51, 0x51, 0x53, 0x51, 0x51, 0x51, 0x51, 
   0x50, 0x50, 0x50, 0x4E, 0x4E, 0x4E, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x65, 
   0x65, 0x65, 0x5A, 0x5B, 0x5A, 0x62, 0x63, 0x62, 0x68, 0x69, 0x68, 0x47, 0x47, 0x47, 0x3C, 0x3C, 
   0x3C, 0x27, 0x27, 0x27, 0x3A, 0x3A, 0x3A, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x4B, 0x4A, 0x4B, 0x37, 0x38, 0x37, 0x08, 0x08, 0x08, 0x01, 0x00, 0x01, 
   0x0E, 0x0D, 0x0E, 0x37, 0x36, 0x37, 0x4C, 0x4D, 0x4C, 0x46, 0x48, 0x46, 0x2B, 0x2A, 0x2B, 0x36, 
   0x35, 0x36, 0x4A, 0x49, 0x4A, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x48, 0x47, 0x4A, 0x48, 
   0x4A, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3D, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2F, 0x2E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x39, 
   0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x43, 0x42, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 
   0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3E, 0x3B, 0x3E, 0x3D, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 
   0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x49, 
   0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x48, 
   0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 
   0x45, 0x46, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 
   0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x53, 0x53, 0x53, 0x53, 0x52, 0x53, 
   0x4F, 0x4F, 0x4F, 0x54, 0x56, 0x54, 0x67, 0x68, 0x67, 0xA1, 0x9F, 0xA1, 0x94, 0x94, 0x94, 0x58, 
   0x59, 0x58, 0x3A, 0x3A, 0x3A, 0x43, 0x44, 0x43, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x51, 0x52, 
   0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x50, 0x51, 
   0x4E, 0x4F, 0x4E, 0x4B, 0x4D, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x44, 0x44, 0x44, 0x3D, 0x3C, 0x3D, 0x72, 
   0x71, 0x72, 0x92, 0x90, 0x92, 0x67, 0x65, 0x67, 0x36, 0x38, 0x36, 0x3E, 0x3E, 0x3E, 0x47, 0x46, 
   0x47, 0x2B, 0x2A, 0x2B, 0x22, 0x22, 0x22, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x3E, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x36, 0x35, 0x36, 0x04, 0x05, 0x04, 
   0x00, 0x00, 0x00, 0x1F, 0x20, 0x1F, 0x48, 0x48, 0x48, 0x45, 0x45, 0x45, 0x41, 0x41, 0x41, 0x2F, 
   0x2F, 0x2F, 0x34, 0x34, 0x34, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x48, 0x47, 
   0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x41, 0x42, 0x40, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 
   0x3E, 0x3D, 0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x30, 0x2E, 0x30, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 
   0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3E, 0x3D, 0x3E, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x40, 0x41, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3D, 0x3F, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x47, 0x46, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x47, 0x48, 0x47, 0x49, 0x49, 
   0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 
   0x46, 0x44, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 
   0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4D, 0x4C, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4F, 0x4E, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x4E, 0x50, 
   0x4E, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x52, 0x52, 0x52, 0x82, 0x80, 0x82, 
   0x9A, 0x98, 0x9A, 0x90, 0x91, 0x90, 0x78, 0x7A, 0x78, 0x87, 0x85, 0x87, 0x5E, 0x5B, 0x5E, 0x4A, 
   0x49, 0x4A, 0x3A, 0x39, 0x3A, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x4B, 0x4B, 0x4B, 0x4F, 0x50, 
   0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4B, 0x4D, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 
   0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 
   0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x53, 0x54, 0x53, 0x6A, 0x6A, 0x6A, 0x6F, 0x6D, 0x6F, 0x74, 
   0x73, 0x74, 0x72, 0x70, 0x72, 0x48, 0x48, 0x48, 0x36, 0x37, 0x36, 0x0C, 0x0D, 0x0C, 0x24, 0x25, 
   0x24, 0x36, 0x34, 0x36, 0x21, 0x20, 0x21, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x40, 0x40, 0x40, 
   0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3E, 0x3E, 0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x44, 0x45, 
   0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x25, 0x26, 0x25, 
   0x08, 0x07, 0x08, 0x03, 0x03, 0x03, 0x0F, 0x10, 0x0F, 0x20, 0x22, 0x20, 0x4A, 0x4A, 0x4A, 0x37, 
   0x39, 0x37, 0x1E, 0x1E, 0x1E, 0x42, 0x41, 0x42, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 
   0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x42, 0x41, 
   0x42, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x40, 0x42, 0x40, 0x40, 0x41, 0x40, 
   0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3C, 0x3F, 0x3C, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 
   0x3A, 0x3A, 0x37, 0x39, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 0x2D, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3C, 0x3A, 0x3C, 0x39, 
   0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3E, 0x40, 0x3E, 0x3C, 0x3E, 0x3B, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 0x3C, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3E, 
   0x3C, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 
   0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x47, 0x45, 0x47, 0x47, 0x47, 0x49, 0x48, 
   0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x51, 0x53, 0x51, 0x4E, 0x50, 0x4E, 0x40, 0x3F, 0x40, 0x8C, 0x8D, 0x8C, 
   0xC7, 0xC7, 0xC7, 0xB3, 0xB4, 0xB3, 0x90, 0x8F, 0x90, 0x4C, 0x4A, 0x4C, 0x2E, 0x2C, 0x2E, 0x51, 
   0x53, 0x51, 0x3F, 0x3F, 0x3F, 0x49, 0x4A, 0x49, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4D, 0x4D, 0x4D, 
   0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 
   0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x47, 0x46, 0x47, 0x4E, 0x4E, 0x4E, 0x8B, 0x8E, 0x8B, 0x98, 0x9A, 0x98, 0x64, 
   0x64, 0x64, 0x3A, 0x3A, 0x3A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x2D, 0x2C, 0x2D, 0x42, 0x42, 0x42, 0x3D, 0x3E, 0x3D, 0x2F, 0x2D, 0x2F, 0x37, 0x3A, 0x37, 
   0x3E, 0x3E, 0x3E, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3E, 
   0x3C, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x40, 0x3F, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x44, 0x43, 0x44, 
   0x38, 0x36, 0x38, 0x05, 0x06, 0x05, 0x00, 0x00, 0x00, 0x06, 0x08, 0x06, 0x38, 0x38, 0x38, 0x44, 
   0x45, 0x44, 0x35, 0x35, 0x35, 0x2C, 0x2C, 0x2C, 0x47, 0x46, 0x47, 0x43, 0x44, 0x43, 0x45, 0x44, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 
   0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x40, 0x42, 0x40, 0x41, 0x40, 0x41, 0x40, 
   0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3A, 0x3B, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 
   0x31, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3B, 0x3C, 0x3B, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x3D, 0x3F, 
   0x3D, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 0x44, 0x45, 0x44, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 
   0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 
   0x51, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x4F, 0x4F, 0x4F, 0x52, 0x52, 0x52, 0x78, 0x77, 0x78, 
   0x80, 0x80, 0x80, 0x72, 0x73, 0x72, 0x5F, 0x60, 0x5F, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x46, 
   0x47, 0x46, 0x36, 0x35, 0x36, 0x4C, 0x4C, 0x4C, 0x4D, 0x4F, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x50, 0x4F, 0x50, 0x4E, 0x4F, 0x4E, 0x4C, 0x4E, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4B, 0x4A, 0x4B, 0x4C, 0x4A, 0x4C, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x48, 0x47, 0x52, 0x52, 0x52, 0x64, 0x61, 0x64, 0x75, 0x74, 0x75, 0x63, 0x61, 0x63, 0x4A, 
   0x4A, 0x4A, 0x34, 0x35, 0x34, 0x31, 0x30, 0x31, 0x29, 0x2A, 0x29, 0x1D, 0x1C, 0x1D, 0x00, 0x00, 
   0x00, 0x16, 0x16, 0x16, 0x46, 0x45, 0x46, 0x40, 0x41, 0x40, 0x29, 0x2A, 0x29, 0x2F, 0x31, 0x2F, 
   0x40, 0x41, 0x40, 0x39, 0x3B, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 0x40, 0x3E, 
   0x42, 0x43, 0x42, 0x2E, 0x2E, 0x2E, 0x17, 0x18, 0x17, 0x01, 0x02, 0x01, 0x27, 0x28, 0x27, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x2A, 0x2B, 0x2A, 0x36, 0x38, 0x36, 0x46, 0x46, 0x46, 0x44, 0x43, 
   0x44, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 
   0x47, 0x46, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 
   0x39, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 
   0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x37, 
   0x39, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 0x40, 
   0x3F, 0x41, 0x42, 0x41, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 
   0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 0x49, 
   0x48, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 
   0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 
   0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x51, 0x51, 
   0x51, 0x51, 0x52, 0x51, 0x50, 0x50, 0x50, 0x4D, 0x4E, 0x4D, 0x75, 0x76, 0x75, 0x68, 0x68, 0x68, 
   0x4F, 0x4F, 0x4F, 0x4C, 0x4C, 0x4C, 0x30, 0x30, 0x30, 0x41, 0x42, 0x41, 0x53, 0x53, 0x53, 0x51, 
   0x50, 0x51, 0x51, 0x53, 0x51, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x48, 0x4A, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 
   0x47, 0x48, 0x47, 0x59, 0x58, 0x59, 0x74, 0x75, 0x74, 0x53, 0x52, 0x53, 0x3A, 0x39, 0x3A, 0x38, 
   0x38, 0x38, 0x43, 0x44, 0x43, 0x46, 0x48, 0x46, 0x49, 0x49, 0x49, 0x43, 0x43, 0x43, 0x14, 0x13, 
   0x14, 0x05, 0x05, 0x05, 0x2C, 0x2A, 0x2C, 0x3D, 0x3E, 0x3D, 0x43, 0x43, 0x43, 0x2F, 0x2E, 0x2F, 
   0x23, 0x25, 0x23, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x41, 0x3F, 
   0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x0B, 0x0B, 0x0B, 0x16, 0x16, 0x16, 0x3D, 
   0x3C, 0x3D, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x2D, 0x2C, 0x2D, 0x37, 0x37, 0x37, 0x48, 0x47, 
   0x48, 0x43, 0x42, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x47, 0x45, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 
   0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 
   0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 
   0x32, 0x33, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 
   0x38, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3A, 0x3B, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x3A, 0x38, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x48, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x4A, 0x48, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 0x50, 0x4F, 0x50, 
   0x4F, 0x4E, 0x4D, 0x4E, 0x56, 0x55, 0x56, 0x6E, 0x6E, 0x6E, 0x85, 0x84, 0x85, 0x66, 0x65, 0x66, 
   0x53, 0x54, 0x53, 0x48, 0x4A, 0x48, 0x35, 0x33, 0x35, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x4F, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x46, 0x47, 0x41, 0x40, 0x41, 
   0x41, 0x43, 0x41, 0x63, 0x64, 0x63, 0x64, 0x64, 0x64, 0x44, 0x45, 0x44, 0x28, 0x27, 0x28, 0x39, 
   0x38, 0x39, 0x45, 0x44, 0x45, 0x3C, 0x3D, 0x3C, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x35, 0x35, 
   0x35, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x22, 0x23, 0x22, 0x44, 0x45, 0x44, 0x34, 0x34, 0x34, 
   0x15, 0x15, 0x15, 0x35, 0x33, 0x35, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x39, 0x3B, 0x3B, 0x3A, 0x3B, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x17, 0x17, 0x17, 0x00, 0x00, 0x00, 0x32, 
   0x34, 0x32, 0x42, 0x43, 0x42, 0x42, 0x44, 0x42, 0x39, 0x3C, 0x39, 0x29, 0x28, 0x29, 0x3A, 0x3B, 
   0x3A, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x41, 0x43, 0x41, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 
   0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 0x34, 0x33, 0x34, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 
   0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x49, 0x4B, 0x49, 0x49, 0x49, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x55, 0x55, 
   0x55, 0x63, 0x61, 0x63, 0x66, 0x64, 0x66, 0x83, 0x83, 0x83, 0x65, 0x66, 0x65, 0x51, 0x51, 0x51, 
   0x38, 0x38, 0x38, 0x47, 0x46, 0x47, 0x34, 0x35, 0x34, 0x4C, 0x4E, 0x4C, 0x52, 0x53, 0x52, 0x4E, 
   0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x54, 0x54, 0x54, 0x61, 0x5F, 0x61, 
   0x53, 0x55, 0x53, 0x5D, 0x5E, 0x5D, 0x4C, 0x4C, 0x4C, 0x38, 0x37, 0x38, 0x2A, 0x2B, 0x2A, 0x41, 
   0x40, 0x41, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x43, 0x43, 
   0x43, 0x26, 0x26, 0x26, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x19, 0x19, 0x19, 0x36, 0x36, 0x36, 
   0x30, 0x2E, 0x30, 0x28, 0x28, 0x28, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x37, 
   0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3E, 0x3E, 0x3E, 0x2B, 0x2C, 0x2B, 0x00, 0x01, 0x00, 0x0E, 
   0x0E, 0x0E, 0x24, 0x25, 0x24, 0x3A, 0x3A, 0x3A, 0x43, 0x44, 0x43, 0x30, 0x2F, 0x30, 0x1D, 0x1D, 
   0x1D, 0x40, 0x41, 0x40, 0x46, 0x45, 0x46, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 
   0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 
   0x43, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3C, 0x3E, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3A, 0x3C, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x34, 0x36, 0x34, 0x35, 0x34, 0x35, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 
   0x2F, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x33, 
   0x35, 0x33, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x38, 
   0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 
   0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3C, 0x3A, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x4C, 0x4D, 0x4C, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x4B, 0x4D, 0x4B, 0x5C, 0x5C, 
   0x5C, 0x8B, 0x8B, 0x8B, 0x8F, 0x8F, 0x8F, 0x65, 0x64, 0x65, 0x4D, 0x4E, 0x4D, 0x44, 0x43, 0x44, 
   0x47, 0x48, 0x47, 0x4B, 0x4C, 0x4B, 0x58, 0x58, 0x58, 0x53, 0x53, 0x53, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4E, 0x4F, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 
   0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x45, 
   0x45, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x3D, 0x3E, 0x3D, 0x5C, 0x5C, 0x5C, 0x8F, 0x8E, 0x8F, 
   0x77, 0x76, 0x77, 0x4C, 0x4C, 0x4C, 0x3D, 0x3E, 0x3D, 0x27, 0x25, 0x27, 0x46, 0x47, 0x46, 0x45, 
   0x47, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x42, 0x41, 0x42, 0x3E, 0x3F, 
   0x3E, 0x3E, 0x40, 0x3E, 0x2F, 0x2D, 0x2F, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x24, 0x23, 0x24, 
   0x40, 0x3F, 0x40, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x36, 
   0x37, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 
   0x3C, 0x3A, 0x3C, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x36, 0x37, 0x36, 0x1B, 0x1A, 0x1B, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x2E, 0x2D, 0x43, 0x41, 0x43, 0x40, 0x40, 0x40, 0x34, 0x34, 
   0x34, 0x36, 0x35, 0x36, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x44, 0x45, 
   0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x40, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x3F, 0x40, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x31, 0x31, 0x31, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x36, 0x36, 0x36, 0x39, 0x37, 0x39, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x38, 0x37, 0x38, 0x39, 0x37, 0x39, 
   0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x37, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x39, 0x37, 0x39, 
   0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x46, 0x46, 
   0x46, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x4A, 0x48, 0x4A, 
   0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x48, 
   0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 
   0x49, 0x48, 0x4A, 0x49, 0x4A, 0x6B, 0x6B, 0x6B, 0x85, 0x85, 0x85, 0x80, 0x82, 0x80, 0x84, 0x84, 
   0x84, 0x93, 0x94, 0x93, 0x80, 0x80, 0x80, 0x58, 0x58, 0x58, 0x37, 0x38, 0x37, 0x45, 0x43, 0x45, 
   0x52, 0x55, 0x52, 0x48, 0x48, 0x48, 0x54, 0x55, 0x54, 0x51, 0x52, 0x51, 0x4F, 0x50, 0x4F, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 
   0x4E, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x49, 0x4B, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x48, 
   0x4A, 0x48, 0x4A, 0x48, 0x4A, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x4B, 0x4E, 
   0x4B, 0x6A, 0x6B, 0x6A, 0x73, 0x73, 0x73, 0x60, 0x5F, 0x60, 0x61, 0x60, 0x61, 0x78, 0x77, 0x78, 
   0x54, 0x53, 0x54, 0x41, 0x40, 0x41, 0x2F, 0x31, 0x2F, 0x2C, 0x2D, 0x2C, 0x42, 0x43, 0x42, 0x45, 
   0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x22, 0x21, 0x22, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 
   0x2D, 0x2B, 0x2D, 0x37, 0x38, 0x37, 0x23, 0x25, 0x23, 0x36, 0x38, 0x36, 0x48, 0x48, 0x48, 0x3B, 
   0x3A, 0x3B, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x2D, 0x2E, 0x2D, 0x13, 
   0x13, 0x13, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x31, 0x2E, 0x31, 0x44, 0x43, 0x44, 0x44, 0x42, 
   0x44, 0x32, 0x31, 0x32, 0x39, 0x38, 0x39, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x41, 0x42, 0x41, 
   0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x44, 0x45, 0x44, 0x46, 0x45, 
   0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x48, 0x47, 
   0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 
   0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x37, 
   0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x3A, 0x38, 0x3A, 0x39, 0x3A, 
   0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3E, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x39, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x30, 0x32, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x34, 0x32, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 
   0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 
   0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 
   0x3B, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 
   0x4A, 0x4A, 0x43, 0x40, 0x43, 0x75, 0x75, 0x75, 0x7F, 0x81, 0x7F, 0xA9, 0xA9, 0xA9, 0x9B, 0x9C, 
   0x9B, 0x70, 0x70, 0x70, 0x4F, 0x50, 0x4F, 0x40, 0x41, 0x40, 0x35, 0x34, 0x35, 0x51, 0x51, 0x51, 
   0x56, 0x56, 0x56, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x50, 0x53, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 
   0x4E, 0x4F, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4B, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 
   0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x41, 0x43, 0x41, 0x4F, 0x51, 
   0x4F, 0x8D, 0x8F, 0x8D, 0xA1, 0xA1, 0xA1, 0x8E, 0x8E, 0x8E, 0x6B, 0x6A, 0x6B, 0x48, 0x48, 0x48, 
   0x39, 0x3A, 0x39, 0x45, 0x46, 0x45, 0x44, 0x43, 0x44, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x29, 0x27, 0x29, 0x00, 0x00, 0x00, 
   0x09, 0x08, 0x09, 0x32, 0x32, 0x32, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x30, 
   0x2F, 0x30, 0x36, 0x37, 0x36, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x38, 
   0x38, 0x38, 0x15, 0x15, 0x15, 0x00, 0x00, 0x00, 0x12, 0x13, 0x12, 0x39, 0x39, 0x39, 0x40, 0x40, 
   0x40, 0x42, 0x41, 0x42, 0x3D, 0x3F, 0x3D, 0x36, 0x35, 0x36, 0x3F, 0x3E, 0x3F, 0x46, 0x46, 0x46, 
   0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 
   0x45, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x45, 
   0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x40, 0x40, 0x40, 0x3D, 0x3F, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 
   0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3B, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3A, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3A, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x36, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x30, 
   0x30, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 
   0x33, 0x34, 0x34, 0x32, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 
   0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x42, 0x40, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x44, 0x44, 0x44, 0x61, 0x60, 0x61, 0x7D, 0x7E, 0x7D, 0x80, 
   0x80, 0x80, 0x67, 0x67, 0x67, 0x6E, 0x6E, 0x6E, 0x78, 0x7A, 0x78, 0x85, 0x84, 0x85, 0x6B, 0x6B, 
   0x6B, 0x4D, 0x4C, 0x4D, 0x28, 0x27, 0x28, 0x3F, 0x3F, 0x3F, 0x46, 0x46, 0x46, 0x4E, 0x4F, 0x4E, 
   0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x4F, 0x50, 0x4F, 0x4F, 
   0x4E, 0x4F, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 
   0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 
   0x48, 0x48, 0x43, 0x43, 0x43, 0x5D, 0x5C, 0x5D, 0x7B, 0x7C, 0x7B, 0x6E, 0x6E, 0x6E, 0x6D, 0x6C, 
   0x6D, 0x81, 0x83, 0x81, 0x7C, 0x7B, 0x7C, 0x64, 0x63, 0x64, 0x4F, 0x4D, 0x4F, 0x44, 0x44, 0x44, 
   0x3F, 0x3F, 0x3F, 0x46, 0x48, 0x46, 0x4B, 0x4C, 0x4B, 0x40, 0x3F, 0x40, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x3F, 0x40, 0x3D, 0x3D, 
   0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x13, 0x11, 0x13, 
   0x00, 0x00, 0x00, 0x09, 0x09, 0x09, 0x13, 0x13, 0x13, 0x39, 0x3A, 0x39, 0x37, 0x39, 0x37, 0x29, 
   0x29, 0x29, 0x38, 0x37, 0x38, 0x3B, 0x3A, 0x3B, 0x38, 0x37, 0x38, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x39, 0x38, 0x36, 0x35, 0x36, 0x0D, 0x0D, 0x0D, 0x00, 0x00, 0x00, 0x17, 0x17, 0x17, 0x40, 0x3E, 
   0x40, 0x41, 0x42, 0x41, 0x4A, 0x4A, 0x4A, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x46, 0x46, 0x46, 
   0x45, 0x47, 0x45, 0x42, 0x43, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x44, 
   0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x45, 0x45, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 
   0x3A, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x39, 0x3A, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3B, 0x3D, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x30, 
   0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x33, 0x31, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x36, 0x34, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x32, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3D, 0x3B, 0x3D, 0x40, 0x3F, 0x40, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x46, 
   0x47, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 
   0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x49, 0x4A, 0x4D, 0x4D, 0x4D, 0x51, 0x52, 0x51, 0x78, 0x78, 0x78, 0x9E, 0x9F, 0x9E, 0xA1, 
   0xA1, 0xA1, 0x94, 0x94, 0x94, 0x65, 0x64, 0x65, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x43, 0x45, 
   0x43, 0x3E, 0x40, 0x3E, 0x18, 0x17, 0x18, 0x57, 0x57, 0x57, 0x56, 0x56, 0x56, 0x52, 0x53, 0x52, 
   0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x54, 0x53, 0x54, 0x51, 0x51, 0x51, 0x4F, 0x50, 0x4F, 0x4E, 
   0x50, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 
   0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x49, 
   0x49, 0x49, 0x4B, 0x4A, 0x4B, 0x6C, 0x6D, 0x6C, 0x89, 0x8A, 0x89, 0x7F, 0x80, 0x7F, 0x74, 0x73, 
   0x74, 0x4E, 0x4F, 0x4E, 0x47, 0x47, 0x47, 0x41, 0x41, 0x41, 0x39, 0x39, 0x39, 0x3F, 0x40, 0x3F, 
   0x44, 0x43, 0x44, 0x3E, 0x3D, 0x3E, 0x46, 0x43, 0x46, 0x44, 0x43, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x2D, 0x2E, 0x2D, 
   0x07, 0x08, 0x07, 0x0C, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x10, 0x11, 0x10, 0x34, 0x34, 0x34, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x2A, 0x2B, 0x2A, 0x2E, 0x30, 0x2E, 0x36, 0x37, 0x36, 0x35, 0x36, 
   0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x36, 0x38, 0x36, 0x37, 0x38, 0x37, 0x37, 
   0x38, 0x37, 0x3E, 0x3C, 0x3E, 0x28, 0x28, 0x28, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x22, 0x21, 
   0x22, 0x3C, 0x3C, 0x3C, 0x40, 0x40, 0x40, 0x47, 0x47, 0x47, 0x3F, 0x40, 0x3F, 0x39, 0x37, 0x39, 
   0x40, 0x41, 0x40, 0x49, 0x47, 0x49, 0x45, 0x44, 0x45, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x45, 0x47, 0x45, 0x44, 0x45, 0x44, 0x42, 
   0x43, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 
   0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3D, 0x3B, 0x3D, 0x3A, 
   0x3B, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 
   0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x31, 0x31, 
   0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x34, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x33, 0x31, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 
   0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x37, 
   0x37, 0x37, 0x37, 0x36, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 
   0x3A, 0x3D, 0x3C, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x42, 0x40, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 
   0x44, 0x46, 0x44, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 
   0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x46, 
   0x47, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 
   0x43, 0x44, 0x43, 0x57, 0x58, 0x57, 0x85, 0x86, 0x85, 0x89, 0x8B, 0x89, 0x7C, 0x7D, 0x7C, 0x80, 
   0x7F, 0x80, 0x82, 0x82, 0x82, 0x5E, 0x5F, 0x5E, 0x4F, 0x50, 0x4F, 0x4F, 0x4E, 0x4F, 0x3D, 0x3E, 
   0x3D, 0x45, 0x46, 0x45, 0x28, 0x28, 0x28, 0x5A, 0x5B, 0x5A, 0x56, 0x56, 0x56, 0x50, 0x50, 0x50, 
   0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x50, 0x52, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 
   0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x48, 
   0x4A, 0x48, 0x63, 0x61, 0x63, 0x6D, 0x6E, 0x6D, 0x6F, 0x6F, 0x6F, 0x5D, 0x5E, 0x5D, 0x4C, 0x4C, 
   0x4C, 0x2F, 0x2F, 0x2F, 0x4C, 0x4C, 0x4C, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x3E, 0x40, 0x3E, 
   0x38, 0x38, 0x38, 0x41, 0x3F, 0x41, 0x41, 0x43, 0x41, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x42, 0x43, 0x40, 0x3F, 0x40, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x33, 0x34, 0x33, 
   0x23, 0x21, 0x23, 0x23, 0x23, 0x23, 0x0A, 0x0B, 0x0A, 0x00, 0x00, 0x00, 0x13, 0x12, 0x13, 0x34, 
   0x36, 0x34, 0x38, 0x38, 0x38, 0x2B, 0x2A, 0x2B, 0x25, 0x25, 0x25, 0x34, 0x36, 0x34, 0x35, 0x35, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x38, 
   0x37, 0x38, 0x39, 0x39, 0x39, 0x35, 0x37, 0x35, 0x21, 0x21, 0x21, 0x02, 0x02, 0x02, 0x00, 0x00, 
   0x00, 0x2F, 0x30, 0x2F, 0x41, 0x42, 0x41, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x3E, 0x3D, 0x3E, 
   0x39, 0x39, 0x39, 0x43, 0x43, 0x43, 0x49, 0x49, 0x49, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x43, 0x44, 0x43, 0x43, 
   0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x3F, 0x41, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 0x3A, 
   0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 
   0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3D, 0x3F, 
   0x3C, 0x3D, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x31, 0x31, 
   0x31, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x32, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x3B, 
   0x3A, 0x3D, 0x3C, 0x3D, 0x40, 0x3F, 0x40, 0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x41, 
   0x43, 0x41, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x49, 0x4A, 0x49, 
   0x50, 0x51, 0x50, 0x5B, 0x59, 0x5B, 0x85, 0x86, 0x85, 0x77, 0x77, 0x77, 0x5B, 0x5A, 0x5B, 0x55, 
   0x55, 0x55, 0x52, 0x53, 0x52, 0x50, 0x51, 0x50, 0x56, 0x56, 0x56, 0x4B, 0x4C, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x3D, 0x3D, 0x3D, 0x38, 0x38, 0x38, 0x49, 0x49, 0x49, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 
   0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 0x4E, 
   0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 
   0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 
   0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x59, 
   0x59, 0x59, 0x6F, 0x6F, 0x6F, 0x6A, 0x6B, 0x6A, 0x56, 0x55, 0x56, 0x3F, 0x3E, 0x3F, 0x3B, 0x3A, 
   0x3B, 0x2F, 0x30, 0x2F, 0x4D, 0x4E, 0x4D, 0x3B, 0x3D, 0x3B, 0x31, 0x31, 0x31, 0x48, 0x48, 0x48, 
   0x49, 0x4A, 0x49, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x46, 0x44, 0x46, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x43, 0x44, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 
   0x36, 0x36, 0x36, 0x30, 0x2E, 0x30, 0x26, 0x25, 0x26, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x1B, 
   0x1A, 0x1B, 0x32, 0x32, 0x32, 0x35, 0x35, 0x35, 0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x37, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x17, 0x17, 0x17, 0x00, 0x00, 
   0x00, 0x15, 0x15, 0x15, 0x38, 0x38, 0x38, 0x3F, 0x40, 0x3F, 0x42, 0x43, 0x42, 0x4B, 0x4A, 0x4B, 
   0x41, 0x3E, 0x41, 0x32, 0x32, 0x32, 0x41, 0x3F, 0x41, 0x44, 0x43, 0x44, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 
   0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x39, 0x3A, 0x39, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x41, 0x3F, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 
   0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 
   0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3E, 0x3E, 0x3E, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x45, 0x43, 0x46, 0x45, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 
   0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x44, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x56, 0x59, 0x56, 
   0x79, 0x7C, 0x79, 0x76, 0x78, 0x76, 0x51, 0x51, 0x51, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x44, 
   0x45, 0x44, 0x41, 0x40, 0x41, 0x4D, 0x4E, 0x4D, 0x2C, 0x2E, 0x2C, 0x35, 0x34, 0x35, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 
   0x51, 0x52, 0x51, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 0x4E, 
   0x50, 0x4E, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 
   0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x48, 0x48, 0x48, 0x3B, 0x3B, 0x3B, 0x6E, 
   0x6F, 0x6E, 0x7B, 0x7B, 0x7B, 0x51, 0x52, 0x51, 0x43, 0x43, 0x43, 0x35, 0x34, 0x35, 0x42, 0x43, 
   0x42, 0x33, 0x35, 0x33, 0x41, 0x41, 0x41, 0x44, 0x45, 0x44, 0x40, 0x3F, 0x40, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 
   0x37, 0x36, 0x37, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x24, 0x25, 0x24, 0x03, 0x02, 0x03, 0x00, 
   0x00, 0x00, 0x08, 0x07, 0x08, 0x2A, 0x29, 0x2A, 0x38, 0x38, 0x38, 0x33, 0x32, 0x33, 0x36, 0x35, 
   0x36, 0x34, 0x33, 0x34, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 
   0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x38, 
   0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x22, 0x23, 
   0x22, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x2A, 0x2B, 0x2A, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x45, 0x47, 0x45, 0x2B, 0x2C, 0x2B, 0x24, 0x22, 0x24, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3F, 0x3D, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3F, 0x3D, 0x3F, 0x3F, 0x40, 
   0x3F, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 
   0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x40, 0x3E, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x3E, 0x3F, 0x3E, 
   0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x35, 
   0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 
   0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x33, 0x35, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3A, 0x3B, 
   0x3A, 0x3D, 0x3E, 0x3D, 0x40, 0x42, 0x40, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x44, 0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x41, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 
   0x3F, 0x45, 0x45, 0x45, 0x56, 0x55, 0x56, 0x61, 0x5F, 0x61, 0x67, 0x66, 0x67, 0x6F, 0x6F, 0x6F, 
   0x78, 0x79, 0x78, 0x5E, 0x60, 0x5E, 0x45, 0x46, 0x45, 0x4C, 0x4B, 0x4C, 0x40, 0x3F, 0x40, 0x3A, 
   0x38, 0x3A, 0x42, 0x40, 0x42, 0x45, 0x44, 0x45, 0x31, 0x31, 0x31, 0x3D, 0x3D, 0x3D, 0x4F, 0x4F, 
   0x4F, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x52, 0x50, 0x51, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x4F, 0x50, 0x4F, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4C, 0x4C, 
   0x48, 0x49, 0x48, 0x5A, 0x5B, 0x5A, 0x61, 0x60, 0x61, 0x65, 0x63, 0x65, 0x4F, 0x50, 0x4F, 0x62, 
   0x64, 0x62, 0x55, 0x55, 0x55, 0x49, 0x49, 0x49, 0x35, 0x35, 0x35, 0x3B, 0x3C, 0x3B, 0x43, 0x46, 
   0x43, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x46, 0x48, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x43, 0x43, 0x43, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 
   0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 
   0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x27, 0x26, 0x27, 0x0B, 
   0x0A, 0x0B, 0x00, 0x00, 0x00, 0x07, 0x06, 0x07, 0x23, 0x23, 0x23, 0x38, 0x38, 0x38, 0x37, 0x36, 
   0x37, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x36, 0x34, 0x36, 0x37, 0x36, 0x37, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x31, 0x31, 
   0x31, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x23, 0x21, 0x23, 0x3D, 0x3D, 0x3D, 
   0x45, 0x46, 0x45, 0x38, 0x39, 0x38, 0x23, 0x22, 0x23, 0x40, 0x42, 0x40, 0x49, 0x48, 0x49, 0x41, 
   0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 
   0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 
   0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x42, 0x41, 
   0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x41, 0x43, 0x41, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 
   0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x3D, 0x3F, 0x3C, 0x3B, 0x3C, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 
   0x36, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 
   0x33, 0x34, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x2F, 
   0x31, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x36, 0x34, 0x37, 0x37, 0x37, 0x3A, 0x39, 0x3A, 0x3C, 0x3B, 
   0x3C, 0x40, 0x3E, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x41, 0x3F, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 
   0x3F, 0x4F, 0x4F, 0x4F, 0x70, 0x71, 0x70, 0x79, 0x7A, 0x79, 0x7F, 0x80, 0x7F, 0x7B, 0x7A, 0x7B, 
   0x5B, 0x5A, 0x5B, 0x45, 0x45, 0x45, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4C, 0x4D, 0x4C, 0x3E, 
   0x3F, 0x3E, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x52, 0x53, 
   0x52, 0x54, 0x53, 0x54, 0x53, 0x53, 0x53, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x50, 0x52, 0x50, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x50, 
   0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x52, 0x50, 0x51, 0x51, 0x51, 0x4F, 0x50, 
   0x4F, 0x4C, 0x4E, 0x4C, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x52, 0x51, 0x52, 
   0x56, 0x56, 0x56, 0x72, 0x74, 0x72, 0x60, 0x60, 0x60, 0x7F, 0x7E, 0x7F, 0x68, 0x69, 0x68, 0x51, 
   0x53, 0x51, 0x44, 0x44, 0x44, 0x4B, 0x4A, 0x4B, 0x3A, 0x3B, 0x3A, 0x44, 0x44, 0x44, 0x43, 0x43, 
   0x43, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x43, 0x43, 0x43, 0x3E, 0x3F, 0x3E, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x35, 0x34, 0x35, 0x27, 
   0x26, 0x27, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x26, 0x27, 0x26, 0x39, 0x39, 
   0x39, 0x3B, 0x39, 0x3B, 0x2F, 0x2F, 0x2F, 0x2B, 0x2A, 0x2B, 0x31, 0x32, 0x31, 0x35, 0x35, 0x35, 
   0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x38, 
   0x37, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3C, 0x3E, 0x3B, 0x3C, 
   0x3B, 0x28, 0x28, 0x28, 0x07, 0x08, 0x07, 0x00, 0x00, 0x00, 0x05, 0x05, 0x05, 0x23, 0x23, 0x23, 
   0x42, 0x41, 0x42, 0x45, 0x45, 0x45, 0x39, 0x3A, 0x39, 0x3E, 0x3F, 0x3E, 0x41, 0x43, 0x41, 0x46, 
   0x46, 0x46, 0x44, 0x44, 0x44, 0x41, 0x42, 0x41, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 
   0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 
   0x3E, 0x3B, 0x3D, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x40, 0x3D, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 
   0x42, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 
   0x40, 0x42, 0x40, 0x41, 0x40, 0x41, 0x3D, 0x3F, 0x3D, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x3F, 0x40, 0x3F, 0x3D, 0x3E, 0x3D, 0x3B, 0x3C, 0x3B, 0x3A, 0x39, 0x3A, 0x37, 0x37, 0x37, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x38, 0x37, 
   0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x33, 0x35, 0x33, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x3A, 0x39, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3C, 0x3E, 0x3C, 0x41, 0x42, 0x41, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x54, 0x54, 0x54, 0x58, 0x57, 0x58, 0x53, 0x53, 
   0x53, 0x64, 0x65, 0x64, 0x88, 0x89, 0x88, 0x82, 0x83, 0x82, 0x75, 0x77, 0x75, 0x5D, 0x5E, 0x5D, 
   0x46, 0x46, 0x46, 0x4C, 0x4A, 0x4C, 0x47, 0x47, 0x47, 0x40, 0x40, 0x40, 0x4E, 0x4F, 0x4E, 0x4C, 
   0x4D, 0x4C, 0x46, 0x47, 0x46, 0x4D, 0x4D, 0x4D, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x52, 0x52, 
   0x52, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x51, 0x52, 0x51, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x51, 
   0x52, 0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x50, 0x53, 0x50, 0x51, 0x51, 0x51, 0x4F, 0x4E, 
   0x4F, 0x4D, 0x4D, 0x4D, 0x5B, 0x5D, 0x5B, 0x69, 0x6B, 0x69, 0x69, 0x6A, 0x69, 0x7A, 0x7C, 0x7A, 
   0x9A, 0x9B, 0x9A, 0x95, 0x96, 0x95, 0x74, 0x76, 0x74, 0x8D, 0x8E, 0x8D, 0x61, 0x62, 0x61, 0x45, 
   0x45, 0x45, 0x3D, 0x3C, 0x3D, 0x42, 0x42, 0x42, 0x4B, 0x4B, 0x4B, 0x42, 0x42, 0x42, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x43, 0x43, 0x43, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 
   0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 
   0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x31, 
   0x30, 0x31, 0x29, 0x2A, 0x29, 0x0E, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x1D, 0x1D, 
   0x1D, 0x31, 0x30, 0x31, 0x38, 0x37, 0x38, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x34, 0x34, 0x34, 
   0x3B, 0x3A, 0x3B, 0x45, 0x44, 0x45, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x37, 0x37, 0x37, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x15, 0x14, 0x15, 0x42, 0x42, 0x42, 0x4A, 0x4A, 0x4A, 0x43, 0x43, 0x43, 0x40, 0x3F, 0x40, 0x42, 
   0x41, 0x42, 0x4B, 0x4C, 0x4B, 0x50, 0x51, 0x50, 0x48, 0x48, 0x48, 0x46, 0x45, 0x46, 0x43, 0x42, 
   0x43, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3E, 
   0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x40, 0x3F, 0x40, 0x42, 0x42, 0x42, 0x43, 0x44, 
   0x43, 0x46, 0x44, 0x46, 0x44, 0x46, 0x44, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 
   0x41, 0x43, 0x41, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 
   0x40, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3A, 0x39, 0x3A, 0x36, 0x37, 0x36, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x36, 0x34, 0x36, 0x37, 0x36, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 
   0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x34, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3B, 
   0x3B, 0x40, 0x3E, 0x40, 0x40, 0x41, 0x40, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 
   0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 
   0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 
   0x3E, 0x40, 0x42, 0x41, 0x42, 0x58, 0x57, 0x58, 0x73, 0x73, 0x73, 0x75, 0x75, 0x75, 0x6E, 0x6E, 
   0x6E, 0x68, 0x6B, 0x68, 0x70, 0x6E, 0x70, 0x68, 0x67, 0x68, 0x55, 0x56, 0x55, 0x44, 0x45, 0x44, 
   0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x3D, 0x3D, 0x3D, 0x43, 0x42, 0x43, 0x3F, 0x40, 0x3F, 0x42, 
   0x42, 0x42, 0x4B, 0x4C, 0x4B, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x52, 0x51, 
   0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x51, 
   0x52, 0x51, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x54, 0x53, 0x54, 0x53, 0x54, 0x53, 0x51, 0x51, 
   0x51, 0x5D, 0x5C, 0x5D, 0x81, 0x81, 0x81, 0x92, 0x94, 0x92, 0x92, 0x92, 0x92, 0x8A, 0x8B, 0x8A, 
   0x9B, 0x99, 0x9B, 0x81, 0x7F, 0x81, 0x6F, 0x70, 0x6F, 0x52, 0x54, 0x52, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x43, 0x43, 0x43, 0x26, 0x27, 0x26, 0x3A, 0x39, 0x3A, 0x47, 0x48, 0x47, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x48, 0x46, 0x48, 0x47, 0x46, 0x47, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x3F, 0x40, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x3A, 0x38, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 
   0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x31, 
   0x30, 0x31, 0x34, 0x33, 0x34, 0x2A, 0x29, 0x2A, 0x0A, 0x0B, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 
   0x01, 0x09, 0x0A, 0x09, 0x24, 0x25, 0x24, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x2D, 0x2D, 0x2D, 
   0x3E, 0x3F, 0x3E, 0x50, 0x50, 0x50, 0x34, 0x35, 0x34, 0x37, 0x37, 0x37, 0x3B, 0x3A, 0x3B, 0x38, 
   0x37, 0x38, 0x39, 0x39, 0x39, 0x3C, 0x3A, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 
   0x3E, 0x40, 0x40, 0x40, 0x45, 0x44, 0x45, 0x2F, 0x2E, 0x2F, 0x14, 0x14, 0x14, 0x02, 0x01, 0x02, 
   0x00, 0x00, 0x00, 0x1B, 0x1D, 0x1B, 0x43, 0x43, 0x43, 0x4C, 0x4F, 0x4C, 0x46, 0x44, 0x46, 0x3C, 
   0x3B, 0x3C, 0x53, 0x54, 0x53, 0x65, 0x67, 0x65, 0x40, 0x40, 0x40, 0x45, 0x47, 0x45, 0x44, 0x45, 
   0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 
   0x3E, 0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x45, 0x45, 
   0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x41, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x40, 0x41, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x35, 
   0x37, 0x35, 0x37, 0x35, 0x37, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x39, 0x38, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x30, 0x32, 0x30, 0x30, 0x31, 
   0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 
   0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x3A, 0x38, 0x3A, 0x39, 0x3B, 
   0x39, 0x3C, 0x3E, 0x3C, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x44, 0x42, 0x41, 0x42, 0x40, 
   0x42, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 
   0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x36, 
   0x36, 0x36, 0x46, 0x44, 0x46, 0x7E, 0x7D, 0x7E, 0x81, 0x80, 0x81, 0x7D, 0x7C, 0x7D, 0x74, 0x77, 
   0x74, 0x58, 0x58, 0x58, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 
   0x37, 0x36, 0x37, 0x42, 0x42, 0x42, 0x4A, 0x4B, 0x4A, 0x4B, 0x49, 0x4B, 0x3F, 0x3E, 0x3F, 0x45, 
   0x45, 0x45, 0x4B, 0x4A, 0x4B, 0x4D, 0x4D, 0x4D, 0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x50, 0x51, 0x51, 
   0x51, 0x51, 0x53, 0x51, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 
   0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x53, 0x52, 0x51, 
   0x53, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x52, 0x65, 0x64, 0x65, 0x63, 0x64, 0x63, 0x64, 0x65, 
   0x64, 0x74, 0x74, 0x74, 0x93, 0x94, 0x93, 0xA1, 0xA3, 0xA1, 0x9F, 0xA1, 0x9F, 0x7A, 0x7B, 0x7A, 
   0x44, 0x43, 0x44, 0x47, 0x47, 0x47, 0x4D, 0x4C, 0x4D, 0x41, 0x40, 0x41, 0x4C, 0x4C, 0x4C, 0x4D, 
   0x4F, 0x4D, 0x49, 0x4A, 0x49, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x46, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 
   0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 
   0x44, 0x43, 0x42, 0x43, 0x42, 0x3F, 0x40, 0x3F, 0x3D, 0x3E, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x14, 0x14, 0x14, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x03, 0x23, 0x22, 0x23, 0x36, 0x37, 0x36, 0x34, 0x32, 0x34, 
   0x42, 0x42, 0x42, 0x58, 0x59, 0x58, 0x3A, 0x3B, 0x3A, 0x2D, 0x2E, 0x2D, 0x33, 0x33, 0x33, 0x39, 
   0x38, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3C, 0x3A, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x2B, 0x2B, 0x2B, 
   0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x15, 0x16, 0x15, 0x45, 0x47, 0x45, 0x47, 0x47, 0x47, 0x44, 
   0x44, 0x44, 0x5A, 0x5B, 0x5A, 0x70, 0x71, 0x70, 0x34, 0x36, 0x34, 0x3C, 0x3E, 0x3C, 0x48, 0x49, 
   0x48, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x40, 0x42, 0x40, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 
   0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x3E, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x45, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x44, 0x46, 0x44, 
   0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x41, 0x43, 0x41, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 
   0x40, 0x3E, 0x40, 0x3F, 0x3D, 0x3F, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 
   0x36, 0x38, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 
   0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 
   0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 
   0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3C, 0x3B, 
   0x3C, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 
   0x44, 0x45, 0x44, 0x46, 0x44, 0x46, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 
   0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3D, 0x3F, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x42, 0x42, 0x42, 0x52, 0x53, 0x52, 0x41, 
   0x42, 0x41, 0x40, 0x40, 0x40, 0x71, 0x6F, 0x71, 0x65, 0x64, 0x65, 0x5F, 0x60, 0x5F, 0x5C, 0x5B, 
   0x5C, 0x48, 0x47, 0x48, 0x3C, 0x3C, 0x3C, 0x41, 0x41, 0x41, 0x49, 0x47, 0x49, 0x3B, 0x3B, 0x3B, 
   0x22, 0x23, 0x22, 0x33, 0x33, 0x33, 0x2E, 0x2D, 0x2E, 0x40, 0x3F, 0x40, 0x4A, 0x49, 0x4A, 0x49, 
   0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4D, 0x4C, 0x4D, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 0x50, 0x51, 0x51, 
   0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x51, 0x53, 0x51, 0x51, 0x52, 0x51, 
   0x51, 0x51, 0x51, 0x4F, 0x50, 0x4F, 0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x52, 
   0x52, 0x52, 0x56, 0x57, 0x56, 0x6C, 0x6B, 0x6C, 0x8F, 0x90, 0x8F, 0x7F, 0x81, 0x7F, 0x91, 0x92, 
   0x91, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x77, 0x78, 0x77, 0x64, 0x64, 0x64, 0x4F, 0x50, 0x4F, 
   0x28, 0x28, 0x28, 0x23, 0x23, 0x23, 0x4D, 0x4C, 0x4D, 0x41, 0x43, 0x41, 0x2B, 0x2B, 0x2B, 0x3B, 
   0x3B, 0x3B, 0x49, 0x49, 0x49, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x47, 0x45, 0x45, 0x45, 0x45, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x40, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x36, 0x37, 0x36, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 
   0x33, 0x35, 0x33, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x33, 0x32, 0x33, 0x29, 0x28, 0x29, 0x12, 0x12, 
   0x12, 0x05, 0x06, 0x05, 0x00, 0x00, 0x00, 0x02, 0x01, 0x02, 0x0E, 0x0E, 0x0E, 0x2E, 0x2E, 0x2E, 
   0x41, 0x42, 0x41, 0x52, 0x51, 0x52, 0x4F, 0x4D, 0x4F, 0x2B, 0x2C, 0x2B, 0x29, 0x2A, 0x29, 0x3A, 
   0x3A, 0x3A, 0x3F, 0x40, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 
   0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x46, 0x44, 0x45, 0x42, 0x45, 
   0x25, 0x24, 0x25, 0x04, 0x03, 0x04, 0x01, 0x01, 0x01, 0x33, 0x32, 0x33, 0x47, 0x47, 0x47, 0x4B, 
   0x4D, 0x4B, 0x5E, 0x5F, 0x5E, 0x5F, 0x5F, 0x5F, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x47, 0x49, 
   0x47, 0x52, 0x53, 0x52, 0x4B, 0x4C, 0x4B, 0x47, 0x47, 0x47, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 
   0x40, 0x3F, 0x40, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x35, 0x37, 0x35, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x3A, 0x38, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3C, 0x3E, 0x3C, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x43, 0x45, 0x43, 0x44, 0x44, 0x44, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x40, 0x41, 
   0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x3A, 0x3A, 0x3A, 0x3F, 0x3E, 0x3F, 0x89, 0x88, 0x89, 0x7E, 
   0x7E, 0x7E, 0x5D, 0x5D, 0x5D, 0x43, 0x42, 0x43, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x37, 0x38, 0x37, 0x40, 0x3E, 0x40, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x35, 0x35, 0x35, 
   0x31, 0x31, 0x31, 0x43, 0x42, 0x43, 0x3D, 0x3F, 0x3D, 0x44, 0x43, 0x44, 0x45, 0x46, 0x45, 0x48, 
   0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x4F, 0x4E, 0x4F, 0x50, 0x51, 0x50, 0x51, 0x51, 
   0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 
   0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x54, 0x54, 0x54, 0x58, 
   0x59, 0x58, 0x6B, 0x6A, 0x6B, 0x8F, 0x8C, 0x8F, 0xA9, 0xA6, 0xA9, 0x9D, 0x9D, 0x9D, 0xA7, 0xA7, 
   0xA7, 0x81, 0x81, 0x81, 0x5B, 0x5A, 0x5B, 0x4D, 0x4D, 0x4D, 0x4C, 0x4B, 0x4C, 0x4E, 0x50, 0x4E, 
   0x40, 0x40, 0x40, 0x25, 0x24, 0x25, 0x52, 0x50, 0x52, 0x4B, 0x4B, 0x4B, 0x44, 0x43, 0x44, 0x45, 
   0x45, 0x45, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x45, 0x46, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x41, 0x43, 0x41, 0x40, 0x41, 0x3F, 0x3D, 0x3F, 0x3C, 0x3B, 
   0x3C, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x32, 
   0x32, 0x28, 0x28, 0x28, 0x0A, 0x0B, 0x0A, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x0F, 
   0x2E, 0x2D, 0x2E, 0x31, 0x32, 0x31, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x3B, 0x3C, 0x3B, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 0x42, 0x43, 0x43, 
   0x43, 0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x49, 0x49, 0x49, 0x2A, 0x2A, 0x2A, 0x00, 0x00, 0x00, 0x19, 0x19, 0x19, 0x3E, 0x3E, 0x3E, 0x44, 
   0x44, 0x44, 0x47, 0x47, 0x47, 0x46, 0x45, 0x46, 0x47, 0x48, 0x47, 0x47, 0x46, 0x47, 0x47, 0x45, 
   0x47, 0x51, 0x51, 0x51, 0x6D, 0x6D, 0x6D, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 
   0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 
   0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3E, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x41, 
   0x44, 0x41, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x35, 0x33, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 
   0x34, 0x34, 0x34, 0x61, 0x63, 0x61, 0x7E, 0x7F, 0x7E, 0x4D, 0x4F, 0x4D, 0x49, 0x4A, 0x49, 0x45, 
   0x47, 0x45, 0x41, 0x42, 0x41, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x3C, 0x3D, 0x3C, 0x2F, 0x31, 
   0x2F, 0x10, 0x11, 0x10, 0x3E, 0x3D, 0x3E, 0x3A, 0x3B, 0x3A, 0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x34, 0x32, 0x34, 0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 
   0x45, 0x45, 0x49, 0x49, 0x49, 0x4C, 0x4C, 0x4C, 0x4C, 0x4E, 0x4C, 0x50, 0x4F, 0x50, 0x4F, 0x50, 
   0x4F, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x50, 0x4E, 0x50, 
   0x65, 0x63, 0x65, 0x7B, 0x7A, 0x7B, 0x58, 0x59, 0x58, 0x5F, 0x5D, 0x5F, 0x5C, 0x5D, 0x5C, 0x7F, 
   0x81, 0x7F, 0xA3, 0xA3, 0xA3, 0x8D, 0x8D, 0x8D, 0x6C, 0x6C, 0x6C, 0x60, 0x60, 0x60, 0x60, 0x5F, 
   0x60, 0x55, 0x54, 0x55, 0x48, 0x46, 0x48, 0x4F, 0x50, 0x4F, 0x51, 0x53, 0x51, 0x4A, 0x4A, 0x4A, 
   0x43, 0x43, 0x43, 0x46, 0x45, 0x46, 0x49, 0x47, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 
   0x48, 0x48, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x46, 0x47, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x41, 0x43, 0x3F, 0x3F, 0x3F, 0x3B, 0x3C, 
   0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 
   0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x30, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2B, 0x2A, 0x2B, 0x1A, 0x18, 0x1A, 0x00, 0x00, 0x00, 
   0x03, 0x03, 0x03, 0x26, 0x26, 0x26, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x3B, 0x3B, 0x3B, 0x3A, 
   0x3C, 0x3A, 0x34, 0x36, 0x34, 0x3C, 0x3A, 0x3C, 0x5B, 0x5B, 0x5B, 0x50, 0x52, 0x50, 0x3D, 0x3C, 
   0x3D, 0x44, 0x44, 0x44, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x48, 0x46, 0x3F, 0x40, 0x3F, 0x1B, 0x1B, 0x1B, 0x01, 0x00, 0x01, 0x03, 0x03, 0x03, 0x2D, 
   0x2E, 0x2D, 0x4D, 0x4D, 0x4D, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x49, 0x49, 0x49, 0x45, 0x45, 
   0x45, 0x5B, 0x5A, 0x5B, 0x6C, 0x6E, 0x6C, 0x2B, 0x2B, 0x2B, 0x33, 0x32, 0x33, 0x42, 0x44, 0x42, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3F, 0x3F, 0x3D, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 
   0x48, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 
   0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 
   0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 
   0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x36, 0x37, 0x36, 
   0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x35, 
   0x34, 0x35, 0x36, 0x36, 0x36, 0x39, 0x38, 0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 
   0x3F, 0x40, 0x3F, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x4C, 0x4D, 0x4C, 0x4A, 0x4A, 0x4A, 
   0x24, 0x23, 0x24, 0x54, 0x56, 0x54, 0x89, 0x89, 0x89, 0x63, 0x64, 0x63, 0x35, 0x36, 0x35, 0x3E, 
   0x3C, 0x3E, 0x3D, 0x3C, 0x3D, 0x30, 0x2E, 0x30, 0x34, 0x34, 0x34, 0x23, 0x23, 0x23, 0x1B, 0x1A, 
   0x1B, 0x0C, 0x0C, 0x0C, 0x08, 0x09, 0x08, 0x09, 0x0A, 0x09, 0x2C, 0x2D, 0x2C, 0x3D, 0x3D, 0x3D, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x44, 0x42, 0x44, 
   0x45, 0x44, 0x46, 0x47, 0x46, 0x49, 0x4B, 0x49, 0x4D, 0x4E, 0x4D, 0x50, 0x51, 0x50, 0x57, 0x57, 
   0x57, 0x5B, 0x5B, 0x5B, 0x59, 0x59, 0x59, 0x60, 0x61, 0x60, 0x72, 0x71, 0x72, 0x70, 0x6E, 0x70, 
   0x81, 0x82, 0x81, 0x7F, 0x80, 0x7F, 0x4C, 0x4C, 0x4C, 0x69, 0x69, 0x69, 0x78, 0x78, 0x78, 0x81, 
   0x80, 0x81, 0x9B, 0x9C, 0x9B, 0x6B, 0x6C, 0x6B, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x34, 0x34, 
   0x34, 0x46, 0x46, 0x46, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x49, 0x4A, 0x49, 0x4E, 0x4E, 0x4E, 
   0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x4B, 0x49, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x40, 0x40, 0x40, 0x3C, 0x3B, 
   0x3C, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x33, 0x34, 0x33, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 
   0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x09, 0x0A, 0x09, 
   0x00, 0x00, 0x00, 0x10, 0x11, 0x10, 0x30, 0x31, 0x30, 0x23, 0x24, 0x23, 0x32, 0x33, 0x32, 0x3A, 
   0x3A, 0x3A, 0x43, 0x43, 0x43, 0x55, 0x54, 0x55, 0x86, 0x88, 0x86, 0x3B, 0x3D, 0x3B, 0x12, 0x11, 
   0x12, 0x4E, 0x4D, 0x4E, 0x52, 0x52, 0x52, 0x53, 0x52, 0x53, 0x48, 0x4A, 0x48, 0x47, 0x48, 0x47, 
   0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x3A, 0x3B, 0x3A, 0x12, 0x10, 0x12, 0x00, 0x00, 0x00, 0x10, 
   0x11, 0x10, 0x31, 0x31, 0x31, 0x42, 0x42, 0x42, 0x47, 0x47, 0x47, 0x45, 0x45, 0x45, 0x44, 0x45, 
   0x44, 0x52, 0x52, 0x52, 0x5B, 0x5A, 0x5B, 0x27, 0x28, 0x27, 0x2B, 0x2C, 0x2B, 0x45, 0x47, 0x45, 
   0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x44, 
   0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x49, 
   0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4B, 0x49, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 
   0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x37, 
   0x39, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 
   0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x36, 0x37, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x30, 0x2E, 0x30, 0x31, 0x30, 0x33, 0x33, 0x33, 0x34, 
   0x35, 0x34, 0x38, 0x37, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x43, 
   0x41, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x61, 0x62, 0x61, 0x6C, 0x6D, 0x6C, 
   0x6B, 0x69, 0x6B, 0x49, 0x4A, 0x49, 0x41, 0x40, 0x41, 0x3E, 0x3E, 0x3E, 0x3A, 0x3B, 0x3A, 0x32, 
   0x34, 0x32, 0x31, 0x31, 0x31, 0x0C, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x28, 0x26, 
   0x28, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x39, 0x3A, 0x39, 
   0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x40, 0x3F, 0x42, 0x43, 0x42, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x57, 0x57, 0x57, 0x85, 0x85, 
   0x85, 0x8F, 0x8D, 0x8F, 0x90, 0x90, 0x90, 0x99, 0x98, 0x99, 0xAE, 0xAC, 0xAE, 0xAD, 0xAE, 0xAD, 
   0x9E, 0xA1, 0x9E, 0x8C, 0x8E, 0x8C, 0x53, 0x52, 0x53, 0x7B, 0x7B, 0x7B, 0xB2, 0xB2, 0xB2, 0x7F, 
   0x80, 0x7F, 0x58, 0x58, 0x58, 0x57, 0x58, 0x57, 0x57, 0x59, 0x57, 0x4F, 0x4F, 0x4F, 0x17, 0x17, 
   0x17, 0x52, 0x52, 0x52, 0x50, 0x50, 0x50, 0x45, 0x46, 0x45, 0x49, 0x49, 0x49, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x47, 0x49, 0x47, 0x47, 0x48, 0x47, 0x47, 
   0x46, 0x47, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x48, 0x47, 0x48, 0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x40, 0x41, 0x40, 0x3E, 0x3D, 
   0x3E, 0x3A, 0x39, 0x3A, 0x36, 0x36, 0x36, 0x34, 0x33, 0x34, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x28, 0x27, 0x28, 
   0x07, 0x08, 0x07, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x02, 0x01, 0x02, 0x2A, 0x29, 0x2A, 0x3F, 
   0x3D, 0x3F, 0x43, 0x41, 0x43, 0x47, 0x48, 0x47, 0x4C, 0x4D, 0x4C, 0x39, 0x39, 0x39, 0x23, 0x23, 
   0x23, 0x86, 0x86, 0x86, 0x96, 0x97, 0x96, 0x57, 0x57, 0x57, 0x45, 0x46, 0x45, 0x49, 0x4A, 0x49, 
   0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 0x47, 0x48, 0x47, 0x41, 0x41, 0x41, 0x23, 0x22, 0x23, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x24, 0x25, 0x4F, 0x4F, 0x4F, 0x49, 0x4B, 0x49, 0x45, 0x47, 
   0x45, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x3D, 0x3F, 0x3D, 0x30, 0x30, 0x30, 0x3A, 0x3B, 0x3A, 
   0x42, 0x43, 0x42, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x49, 
   0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x37, 0x39, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 
   0x34, 0x34, 0x36, 0x36, 0x36, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x4A, 0x4A, 0x4A, 0x53, 0x53, 0x53, 0x62, 0x61, 0x62, 0x71, 0x71, 0x71, 
   0x78, 0x79, 0x78, 0x47, 0x47, 0x47, 0x35, 0x36, 0x35, 0x39, 0x38, 0x39, 0x3E, 0x3D, 0x3E, 0x1F, 
   0x1F, 0x1F, 0x0F, 0x0D, 0x0F, 0x25, 0x25, 0x25, 0x1D, 0x1D, 0x1D, 0x2D, 0x2D, 0x2D, 0x44, 0x44, 
   0x44, 0x4F, 0x4E, 0x4F, 0x4D, 0x4E, 0x4D, 0x54, 0x52, 0x54, 0x55, 0x52, 0x55, 0x44, 0x44, 0x44, 
   0x43, 0x45, 0x43, 0x4E, 0x50, 0x4E, 0x62, 0x63, 0x62, 0x6E, 0x6E, 0x6E, 0x6F, 0x6E, 0x6F, 0x70, 
   0x6E, 0x70, 0x75, 0x76, 0x75, 0x6A, 0x6A, 0x6A, 0x6E, 0x70, 0x6E, 0x7D, 0x7D, 0x7D, 0xA3, 0xA1, 
   0xA3, 0x8C, 0x8B, 0x8C, 0x84, 0x84, 0x84, 0xA5, 0xA6, 0xA5, 0x9F, 0x9F, 0x9F, 0x92, 0x92, 0x92, 
   0x7F, 0x7D, 0x7F, 0x66, 0x66, 0x66, 0x52, 0x50, 0x52, 0x6D, 0x6E, 0x6D, 0x74, 0x74, 0x74, 0x61, 
   0x61, 0x61, 0x53, 0x53, 0x53, 0x54, 0x56, 0x54, 0x57, 0x56, 0x57, 0x4F, 0x4E, 0x4F, 0x19, 0x19, 
   0x19, 0x27, 0x27, 0x27, 0x45, 0x45, 0x45, 0x53, 0x55, 0x53, 0x50, 0x51, 0x50, 0x4E, 0x4D, 0x4E, 
   0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x49, 0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 
   0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x43, 0x44, 0x43, 0x41, 0x41, 0x41, 0x3E, 0x3D, 
   0x3E, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 0x31, 0x33, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x32, 0x31, 0x32, 
   0x24, 0x25, 0x24, 0x0D, 0x0D, 0x0D, 0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x09, 0x08, 0x09, 0x1B, 
   0x1B, 0x1B, 0x29, 0x29, 0x29, 0x3F, 0x3E, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x44, 0x42, 0x53, 0x54, 
   0x53, 0x86, 0x86, 0x86, 0x87, 0x88, 0x87, 0x4F, 0x50, 0x4F, 0x38, 0x36, 0x38, 0x45, 0x46, 0x45, 
   0x6F, 0x6F, 0x6F, 0x5B, 0x5B, 0x5B, 0x4A, 0x48, 0x4A, 0x4C, 0x4C, 0x4C, 0x45, 0x45, 0x45, 0x1B, 
   0x1A, 0x1B, 0x0B, 0x0B, 0x0B, 0x09, 0x0A, 0x09, 0x30, 0x30, 0x30, 0x32, 0x34, 0x32, 0x43, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x48, 0x47, 0x48, 0x3D, 0x3C, 0x3D, 0x2C, 0x2B, 0x2C, 
   0x46, 0x46, 0x46, 0x44, 0x44, 0x44, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3C, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x40, 0x42, 0x40, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x49, 0x49, 
   0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 
   0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 
   0x34, 0x34, 0x38, 0x36, 0x38, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x41, 0x40, 
   0x41, 0x44, 0x44, 0x44, 0x5D, 0x5E, 0x5D, 0x70, 0x6F, 0x70, 0x5C, 0x5C, 0x5C, 0x42, 0x42, 0x42, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3A, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x30, 
   0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x7F, 0x80, 0x7F, 0x90, 0x91, 0x90, 0x5A, 0x5A, 0x5A, 0x50, 0x51, 
   0x50, 0x71, 0x71, 0x71, 0x7D, 0x7D, 0x7D, 0x84, 0x83, 0x84, 0x56, 0x56, 0x56, 0x3E, 0x3E, 0x3E, 
   0x4D, 0x4D, 0x4D, 0x70, 0x70, 0x70, 0x85, 0x84, 0x85, 0x97, 0x97, 0x97, 0x96, 0x99, 0x96, 0x9B, 
   0x9B, 0x9B, 0xA1, 0xA2, 0xA1, 0xA2, 0xA0, 0xA2, 0xB0, 0xB0, 0xB0, 0xA6, 0xA6, 0xA6, 0x90, 0x91, 
   0x90, 0x7F, 0x7E, 0x7F, 0x8A, 0x8A, 0x8A, 0x80, 0x7E, 0x80, 0x5E, 0x5E, 0x5E, 0x52, 0x51, 0x52, 
   0x4F, 0x50, 0x4F, 0x4B, 0x4B, 0x4B, 0x0B, 0x0A, 0x0B, 0x2B, 0x2C, 0x2B, 0x54, 0x56, 0x54, 0x56, 
   0x56, 0x56, 0x57, 0x57, 0x57, 0x54, 0x55, 0x54, 0x5C, 0x5D, 0x5C, 0x51, 0x51, 0x51, 0x51, 0x50, 
   0x51, 0x50, 0x50, 0x50, 0x50, 0x52, 0x50, 0x52, 0x51, 0x52, 0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 
   0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x49, 0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x43, 0x44, 0x43, 0x40, 0x41, 0x40, 0x3D, 0x3D, 
   0x3D, 0x3A, 0x39, 0x3A, 0x36, 0x36, 0x36, 0x33, 0x33, 0x33, 0x32, 0x30, 0x32, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x36, 0x36, 0x36, 0x1B, 0x1A, 0x1B, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x03, 0x02, 0x03, 0x37, 0x39, 0x37, 0x48, 0x49, 0x48, 0x45, 0x47, 0x45, 0x47, 0x47, 
   0x47, 0x47, 0x46, 0x47, 0x48, 0x47, 0x48, 0x4A, 0x4B, 0x4A, 0x41, 0x43, 0x41, 0x54, 0x55, 0x54, 
   0x9F, 0x9F, 0x9F, 0x5E, 0x5F, 0x5E, 0x3C, 0x3B, 0x3C, 0x40, 0x3F, 0x40, 0x43, 0x43, 0x43, 0x46, 
   0x48, 0x46, 0x44, 0x44, 0x44, 0x0B, 0x0B, 0x0B, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x39, 0x39, 
   0x39, 0x49, 0x49, 0x49, 0x46, 0x48, 0x46, 0x46, 0x47, 0x46, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 
   0x46, 0x45, 0x46, 0x37, 0x35, 0x37, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x3F, 0x41, 0x3F, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x47, 0x46, 0x47, 0x48, 0x48, 0x48, 0x47, 0x49, 
   0x47, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 
   0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x3A, 0x39, 
   0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x35, 0x37, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x31, 
   0x33, 0x31, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x31, 0x2F, 0x31, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x33, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 
   0x35, 0x33, 0x36, 0x37, 0x36, 0x38, 0x3A, 0x38, 0x3C, 0x3B, 0x3C, 0x3E, 0x3C, 0x3E, 0x3F, 0x40, 
   0x3F, 0x3F, 0x41, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 
   0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x40, 0x42, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x33, 0x32, 0x33, 0x3E, 0x3D, 0x3E, 0x66, 0x66, 0x66, 0x4B, 0x49, 0x4B, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3A, 0x3A, 0x3D, 
   0x3D, 0x3D, 0x53, 0x54, 0x53, 0x71, 0x73, 0x71, 0x75, 0x74, 0x75, 0x47, 0x46, 0x47, 0x3B, 0x38, 
   0x3B, 0x6E, 0x6F, 0x6E, 0x7F, 0x80, 0x7F, 0x75, 0x78, 0x75, 0x53, 0x54, 0x53, 0x38, 0x39, 0x38, 
   0x51, 0x51, 0x51, 0x7C, 0x7B, 0x7C, 0x75, 0x76, 0x75, 0x73, 0x72, 0x73, 0x71, 0x71, 0x71, 0x71, 
   0x73, 0x71, 0x75, 0x76, 0x75, 0x80, 0x7F, 0x80, 0x86, 0x84, 0x86, 0x79, 0x79, 0x79, 0x5F, 0x61, 
   0x5F, 0x48, 0x48, 0x48, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x1C, 0x1C, 0x1C, 0x4B, 0x4B, 0x4B, 
   0x50, 0x51, 0x50, 0x4D, 0x4C, 0x4D, 0x00, 0x00, 0x00, 0x23, 0x23, 0x23, 0x5E, 0x5E, 0x5E, 0x45, 
   0x46, 0x45, 0x2A, 0x2C, 0x2A, 0x3A, 0x3B, 0x3A, 0x52, 0x52, 0x52, 0x54, 0x55, 0x54, 0x56, 0x56, 
   0x56, 0x55, 0x55, 0x55, 0x53, 0x53, 0x53, 0x4F, 0x50, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 
   0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x49, 0x4B, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x48, 
   0x4A, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 0x43, 0x44, 0x41, 0x40, 0x41, 0x3C, 0x3C, 
   0x3C, 0x3A, 0x39, 0x3A, 0x35, 0x36, 0x35, 0x32, 0x33, 0x32, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x32, 0x30, 
   0x32, 0x32, 0x32, 0x32, 0x34, 0x32, 0x37, 0x37, 0x37, 0x2F, 0x30, 0x2F, 0x16, 0x16, 0x16, 0x0A, 
   0x0B, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x0E, 0x0D, 0x1B, 0x1B, 0x1B, 0x30, 0x31, 0x30, 0x40, 0x40, 
   0x40, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x4B, 0x4B, 0x4B, 0x63, 0x65, 0x63, 
   0x7D, 0x7C, 0x7D, 0x5F, 0x5C, 0x5F, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x6C, 0x6D, 0x6C, 0x54, 
   0x53, 0x54, 0x4E, 0x4D, 0x4E, 0x36, 0x34, 0x36, 0x11, 0x12, 0x11, 0x05, 0x06, 0x05, 0x16, 0x14, 
   0x16, 0x2A, 0x2A, 0x2A, 0x1F, 0x21, 0x1F, 0x2A, 0x2B, 0x2A, 0x42, 0x42, 0x42, 0x57, 0x56, 0x57, 
   0x55, 0x54, 0x55, 0x25, 0x25, 0x25, 0x31, 0x30, 0x31, 0x43, 0x40, 0x43, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x41, 0x40, 0x41, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x44, 0x43, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x49, 0x49, 
   0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x4B, 0x49, 0x49, 0x49, 0x49, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x46, 0x48, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x44, 
   0x43, 0x44, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3A, 0x3C, 0x3A, 0x39, 0x3A, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 0x39, 0x37, 
   0x39, 0x37, 0x39, 0x37, 0x39, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x37, 0x38, 0x37, 0x39, 0x3A, 0x39, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x40, 
   0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x43, 0x42, 0x40, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x45, 0x44, 
   0x45, 0x29, 0x29, 0x29, 0x12, 0x11, 0x12, 0x3D, 0x3D, 0x3D, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3B, 0x3C, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3A, 0x3C, 0x3C, 0x3A, 0x3C, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3C, 0x3C, 0x3C, 0x49, 0x4A, 
   0x49, 0x61, 0x63, 0x61, 0x57, 0x57, 0x57, 0x45, 0x46, 0x45, 0x3D, 0x3D, 0x3D, 0x43, 0x42, 0x43, 
   0x63, 0x63, 0x63, 0x6E, 0x6E, 0x6E, 0x4C, 0x4E, 0x4C, 0x3D, 0x3E, 0x3D, 0x42, 0x41, 0x42, 0x43, 
   0x43, 0x43, 0x45, 0x45, 0x45, 0x48, 0x48, 0x48, 0x47, 0x49, 0x47, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 
   0x4E, 0x4B, 0x4E, 0x4B, 0x0A, 0x0A, 0x0A, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x3A, 0x3A, 0x3A, 
   0x5A, 0x5B, 0x5A, 0x49, 0x4B, 0x49, 0x11, 0x12, 0x11, 0x1C, 0x1C, 0x1C, 0x51, 0x51, 0x51, 0x53, 
   0x54, 0x53, 0x51, 0x53, 0x51, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x55, 0x55, 0x55, 0x54, 0x55, 
   0x54, 0x52, 0x54, 0x52, 0x52, 0x51, 0x52, 0x50, 0x4F, 0x50, 0x4E, 0x4E, 0x4E, 0x4C, 0x4C, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x48, 0x48, 0x48, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 
   0x3C, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x3A, 0x3C, 0x3A, 0x36, 
   0x37, 0x36, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x03, 0x28, 0x27, 
   0x28, 0x45, 0x46, 0x45, 0x48, 0x48, 0x48, 0x47, 0x45, 0x47, 0x46, 0x44, 0x46, 0x47, 0x46, 0x47, 
   0x46, 0x46, 0x46, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x4F, 0x4F, 0x4F, 0xA2, 0xA3, 0xA2, 0x62, 
   0x61, 0x62, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x4E, 0x4F, 0x4E, 0x2F, 0x2F, 0x2F, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x38, 0x37, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x35, 0x34, 0x35, 0x2B, 0x29, 0x2B, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x3D, 
   0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3D, 0x3B, 0x3D, 0x3E, 0x3C, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 
   0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x48, 
   0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x3F, 0x41, 0x3F, 0x3F, 0x41, 0x3F, 
   0x3E, 0x3C, 0x3E, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x3B, 0x39, 0x3B, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x3A, 0x38, 0x3B, 0x3B, 0x3B, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x41, 0x3F, 0x43, 0x43, 
   0x43, 0x31, 0x2F, 0x31, 0x07, 0x05, 0x07, 0x0E, 0x0E, 0x0E, 0x3B, 0x3C, 0x3B, 0x1D, 0x1F, 0x1D, 
   0x12, 0x13, 0x12, 0x23, 0x24, 0x23, 0x1E, 0x1F, 0x1E, 0x14, 0x14, 0x14, 0x21, 0x21, 0x21, 0x3C, 
   0x3C, 0x3C, 0x41, 0x3F, 0x41, 0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x44, 0x43, 
   0x44, 0x42, 0x42, 0x42, 0x39, 0x39, 0x39, 0x3A, 0x3C, 0x3A, 0x3F, 0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 
   0x3F, 0x3F, 0x3F, 0x3B, 0x3B, 0x3B, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x23, 0x23, 0x23, 0x1A, 
   0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x34, 0x34, 0x34, 0x50, 0x52, 0x50, 0x50, 0x51, 0x50, 0x50, 0x51, 
   0x50, 0x42, 0x44, 0x42, 0x19, 0x1A, 0x19, 0x1C, 0x1D, 0x1C, 0x1A, 0x1A, 0x1A, 0x1E, 0x1E, 0x1E, 
   0x46, 0x47, 0x46, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3A, 0x3A, 0x3A, 0x41, 0x40, 0x41, 0x53, 
   0x52, 0x53, 0x55, 0x56, 0x55, 0x56, 0x55, 0x56, 0x54, 0x56, 0x54, 0x55, 0x55, 0x55, 0x54, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x52, 0x51, 0x52, 0x4F, 0x4F, 0x4F, 0x4C, 0x4E, 0x4C, 0x4A, 0x4C, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 
   0x47, 0x48, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x48, 
   0x4A, 0x48, 0x47, 0x47, 0x47, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 
   0x3C, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x3A, 
   0x3B, 0x3A, 0x32, 0x31, 0x32, 0x1C, 0x1C, 0x1C, 0x10, 0x0F, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x19, 0x19, 0x19, 0x1D, 0x1C, 0x1D, 0x1A, 0x19, 0x1A, 0x16, 0x14, 0x16, 0x1A, 0x19, 0x1A, 
   0x24, 0x25, 0x24, 0x32, 0x32, 0x32, 0x3D, 0x3D, 0x3D, 0x5E, 0x5E, 0x5E, 0x79, 0x79, 0x79, 0x5A, 
   0x5B, 0x5A, 0x46, 0x47, 0x46, 0x3D, 0x3C, 0x3D, 0x45, 0x47, 0x45, 0x52, 0x51, 0x52, 0x50, 0x51, 
   0x50, 0x39, 0x3A, 0x39, 0x22, 0x22, 0x22, 0x0C, 0x0B, 0x0C, 0x05, 0x06, 0x05, 0x31, 0x2F, 0x31, 
   0x43, 0x43, 0x43, 0x41, 0x41, 0x41, 0x32, 0x32, 0x32, 0x3D, 0x3D, 0x3D, 0x4D, 0x4C, 0x4D, 0x4F, 
   0x50, 0x4F, 0x40, 0x41, 0x40, 0x3D, 0x3E, 0x3D, 0x3B, 0x3A, 0x3B, 0x3F, 0x3D, 0x3F, 0x3E, 0x40, 
   0x3E, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 
   0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 
   0x42, 0x41, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x40, 0x41, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x3F, 0x41, 0x3F, 
   0x40, 0x3D, 0x40, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x37, 
   0x36, 0x37, 0x37, 0x38, 0x37, 0x3B, 0x3A, 0x3B, 0x3D, 0x3D, 0x3D, 0x40, 0x3E, 0x40, 0x40, 0x40, 
   0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x44, 0x43, 
   0x44, 0x3B, 0x3A, 0x3B, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x05, 0x05, 0x05, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x1F, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 
   0x1D, 0x1D, 0x28, 0x27, 0x28, 0x2D, 0x2C, 0x2D, 0x43, 0x44, 0x43, 0x2D, 0x2E, 0x2D, 0x25, 0x24, 
   0x25, 0x40, 0x3F, 0x40, 0x0E, 0x0E, 0x0E, 0x16, 0x16, 0x16, 0x40, 0x40, 0x40, 0x3C, 0x3D, 0x3C, 
   0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x3F, 0x3F, 0x3F, 0x42, 0x41, 0x42, 0x3F, 0x41, 0x3F, 0x0D, 
   0x0E, 0x0D, 0x00, 0x00, 0x00, 0x13, 0x13, 0x13, 0x47, 0x47, 0x47, 0x34, 0x33, 0x34, 0x42, 0x43, 
   0x42, 0x4A, 0x49, 0x4A, 0x4D, 0x4C, 0x4D, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4C, 0x4C, 0x4C, 0x51, 0x52, 0x51, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 
   0x54, 0x53, 0x52, 0x53, 0x51, 0x51, 0x51, 0x4F, 0x4F, 0x4F, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x48, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x46, 
   0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4C, 0x4A, 0x49, 
   0x4A, 0x49, 0x47, 0x47, 0x47, 0x44, 0x45, 0x44, 0x42, 0x42, 0x42, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 
   0x3C, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x34, 0x33, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3A, 
   0x3A, 0x3A, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x20, 0x20, 0x20, 0x05, 0x04, 
   0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x15, 0x15, 0x06, 0x07, 0x06, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x0B, 0x0B, 0x0B, 0x27, 0x25, 0x27, 0x36, 0x34, 0x36, 0x37, 
   0x37, 0x37, 0x48, 0x48, 0x48, 0x51, 0x53, 0x51, 0x4B, 0x4D, 0x4B, 0x84, 0x85, 0x84, 0xA5, 0xA5, 
   0xA5, 0x6B, 0x68, 0x6B, 0x10, 0x11, 0x10, 0x36, 0x37, 0x36, 0x0F, 0x0F, 0x0F, 0x19, 0x19, 0x19, 
   0x45, 0x44, 0x45, 0x40, 0x42, 0x40, 0x42, 0x44, 0x42, 0x64, 0x65, 0x64, 0x76, 0x74, 0x76, 0x40, 
   0x40, 0x40, 0x28, 0x27, 0x28, 0x3A, 0x39, 0x3A, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3F, 0x40, 
   0x3F, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 
   0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x40, 0x40, 0x40, 
   0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x33, 0x35, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 
   0x2F, 0x2D, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x37, 
   0x36, 0x37, 0x38, 0x39, 0x38, 0x3D, 0x3B, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x41, 
   0x40, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x41, 
   0x42, 0x43, 0x42, 0x43, 0x39, 0x3B, 0x39, 0x30, 0x32, 0x30, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 
   0x2D, 0x2F, 0x2D, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x26, 0x25, 0x26, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x44, 0x44, 0x44, 0x28, 0x27, 0x28, 0x0C, 0x0C, 
   0x0C, 0x39, 0x39, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x41, 0x43, 0x3F, 0x3F, 0x3F, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x3D, 0x3D, 0x43, 0x43, 0x43, 0x39, 0x39, 0x39, 0x3A, 
   0x3A, 0x3A, 0x37, 0x36, 0x37, 0x31, 0x31, 0x31, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x44, 0x44, 
   0x44, 0x49, 0x4A, 0x49, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x50, 0x4E, 0x4F, 0x50, 0x4F, 
   0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x51, 0x52, 0x51, 0x52, 0x53, 0x52, 0x51, 
   0x53, 0x51, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 
   0x53, 0x52, 0x52, 0x52, 0x50, 0x51, 0x50, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4A, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 
   0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x49, 
   0x4A, 0x49, 0x47, 0x47, 0x47, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x3F, 0x40, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 
   0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x37, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 0x3D, 0x40, 0x3E, 0x40, 0x3F, 0x3E, 0x3F, 0x3B, 0x3B, 
   0x3B, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x34, 0x35, 0x34, 0x39, 0x3B, 0x39, 0x22, 0x23, 0x22, 
   0x02, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x33, 0x32, 0x33, 0x02, 
   0x02, 0x02, 0x21, 0x22, 0x21, 0x52, 0x52, 0x52, 0x53, 0x52, 0x53, 0x5C, 0x5F, 0x5C, 0x58, 0x59, 
   0x58, 0x4B, 0x4A, 0x4B, 0x25, 0x27, 0x25, 0x5B, 0x5A, 0x5B, 0x84, 0x85, 0x84, 0x4D, 0x4E, 0x4D, 
   0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x46, 0x48, 0x46, 0x48, 0x47, 0x48, 0x3D, 
   0x3F, 0x3D, 0x29, 0x28, 0x29, 0x2E, 0x2C, 0x2E, 0x41, 0x40, 0x41, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 
   0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 
   0x46, 0x48, 0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3A, 0x3C, 0x3B, 0x39, 0x3B, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x35, 0x35, 
   0x35, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 
   0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x34, 0x33, 0x37, 
   0x37, 0x37, 0x39, 0x39, 0x39, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x42, 
   0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 
   0x41, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x41, 0x40, 0x41, 0x23, 0x21, 0x23, 0x13, 
   0x12, 0x13, 0x13, 0x11, 0x13, 0x0C, 0x0C, 0x0C, 0x45, 0x44, 0x45, 0x26, 0x25, 0x26, 0x0F, 0x10, 
   0x0F, 0x25, 0x25, 0x25, 0x10, 0x10, 0x10, 0x09, 0x0A, 0x09, 0x31, 0x33, 0x31, 0x2F, 0x31, 0x2F, 
   0x1B, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x20, 0x20, 0x20, 0x35, 0x36, 0x35, 0x45, 0x45, 0x45, 0x48, 
   0x46, 0x48, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 
   0x49, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4C, 0x4B, 0x4C, 0x4C, 0x4D, 0x4C, 0x4E, 0x4F, 0x4E, 
   0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x51, 
   0x52, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x52, 0x52, 
   0x52, 0x50, 0x51, 0x50, 0x4F, 0x50, 0x4F, 0x4D, 0x4F, 0x4D, 0x4E, 0x4E, 0x4E, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4B, 0x4B, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 
   0x49, 0x48, 0x46, 0x47, 0x46, 0x45, 0x44, 0x45, 0x42, 0x42, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 
   0x3D, 0x39, 0x39, 0x39, 0x36, 0x37, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 
   0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x43, 
   0x41, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x45, 0x44, 0x45, 0x3E, 0x3F, 0x3E, 
   0x28, 0x29, 0x28, 0x1B, 0x1B, 0x1B, 0x11, 0x11, 0x11, 0x0C, 0x0C, 0x0C, 0x3C, 0x3B, 0x3C, 0x01, 
   0x00, 0x01, 0x01, 0x01, 0x01, 0x26, 0x26, 0x26, 0x2E, 0x2E, 0x2E, 0x29, 0x28, 0x29, 0x2A, 0x2A, 
   0x2A, 0x30, 0x2F, 0x30, 0x4D, 0x50, 0x4D, 0x77, 0x76, 0x77, 0x82, 0x84, 0x82, 0x58, 0x5A, 0x58, 
   0x3F, 0x3F, 0x3F, 0x40, 0x42, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x3E, 0x3F, 
   0x40, 0x3F, 0x3C, 0x3D, 0x3C, 0x29, 0x28, 0x29, 0x36, 0x35, 0x36, 0x42, 0x40, 0x42, 0x3F, 0x40, 
   0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x46, 0x44, 
   0x46, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x45, 
   0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x44, 0x43, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x36, 0x36, 0x36, 0x34, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x33, 
   0x32, 0x33, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2F, 0x2D, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2F, 0x2D, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x36, 0x34, 0x36, 0x38, 
   0x37, 0x38, 0x3A, 0x3A, 0x3A, 0x3D, 0x3B, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 
   0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x41, 0x42, 0x42, 0x41, 0x42, 0x39, 0x39, 0x39, 0x40, 0x41, 0x40, 0x3B, 0x3B, 0x3B, 0x36, 0x36, 
   0x36, 0x39, 0x39, 0x39, 0x3D, 0x3E, 0x3D, 0x35, 0x36, 0x35, 0x30, 0x31, 0x30, 0x38, 0x38, 0x38, 
   0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x43, 0x43, 0x43, 0x45, 
   0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x47, 0x48, 0x47, 0x46, 0x48, 0x46, 0x4A, 0x49, 0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4E, 0x4E, 
   0x4F, 0x4F, 0x4F, 0x4E, 0x50, 0x4E, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x51, 
   0x50, 0x51, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x50, 0x51, 
   0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4D, 0x4F, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4A, 0x4B, 0x49, 0x49, 0x49, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x47, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x46, 0x48, 0x47, 0x47, 0x47, 0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4B, 0x49, 0x4A, 0x49, 0x4A, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 0x40, 0x3F, 0x40, 0x3B, 0x3C, 
   0x3B, 0x38, 0x39, 0x38, 0x35, 0x37, 0x35, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 
   0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3D, 0x3C, 0x3D, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 
   0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x3D, 0x3D, 0x3D, 0x47, 0x48, 0x47, 0x2A, 
   0x2A, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x29, 0x2A, 0x02, 0x02, 
   0x02, 0x00, 0x00, 0x00, 0x27, 0x28, 0x27, 0x46, 0x47, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x3F, 0x40, 0x3F, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x3E, 0x41, 0x3F, 0x3F, 0x3F, 0x38, 0x37, 0x38, 0x2E, 0x2E, 0x2E, 0x3C, 0x3A, 0x3C, 0x40, 0x40, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x44, 0x42, 0x43, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x37, 0x38, 0x36, 0x35, 
   0x36, 0x33, 0x34, 0x33, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x35, 0x33, 0x35, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x34, 0x35, 0x34, 0x37, 
   0x38, 0x37, 0x3A, 0x3A, 0x3A, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x43, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 
   0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 
   0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3B, 0x3A, 0x3B, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3F, 0x3D, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 0x44, 0x45, 0x44, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x4B, 0x4A, 0x4B, 0x4D, 0x4C, 0x4D, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x51, 0x50, 0x51, 0x51, 0x50, 0x51, 0x50, 0x51, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x50, 0x50, 
   0x50, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4E, 
   0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x49, 0x4B, 0x49, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 0x47, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x3F, 0x3F, 0x3C, 0x3B, 
   0x3C, 0x38, 0x39, 0x38, 0x36, 0x37, 0x36, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x31, 
   0x31, 0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 
   0x35, 0x36, 0x35, 0x35, 0x37, 0x35, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 
   0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3F, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 
   0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x47, 0x46, 0x47, 0x48, 0x49, 0x48, 0x4C, 0x4D, 0x4C, 0x42, 
   0x42, 0x42, 0x11, 0x11, 0x11, 0x06, 0x05, 0x06, 0x09, 0x08, 0x09, 0x3E, 0x3E, 0x3E, 0x0F, 0x0F, 
   0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x29, 0x28, 0x29, 0x26, 0x24, 0x26, 
   0x22, 0x21, 0x22, 0x24, 0x23, 0x24, 0x31, 0x31, 0x31, 0x23, 0x25, 0x23, 0x23, 0x24, 0x23, 0x36, 
   0x37, 0x36, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x29, 0x28, 0x29, 0x31, 0x2F, 0x31, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x41, 
   0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x36, 0x35, 
   0x36, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x33, 0x31, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x32, 0x33, 0x32, 0x36, 0x36, 0x36, 0x38, 
   0x39, 0x38, 0x39, 0x3B, 0x39, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3E, 0x3C, 
   0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x4B, 0x4A, 0x4B, 
   0x4C, 0x4D, 0x4C, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x4F, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x50, 0x4F, 0x50, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x50, 
   0x4F, 0x50, 0x4E, 0x50, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4E, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x48, 0x4A, 0x48, 0x46, 0x47, 0x46, 0x48, 0x46, 0x48, 0x46, 0x47, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 
   0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 
   0x47, 0x47, 0x45, 0x44, 0x45, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3B, 0x3B, 
   0x3B, 0x37, 0x39, 0x37, 0x36, 0x36, 0x36, 0x36, 0x34, 0x36, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 
   0x33, 0x34, 0x33, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x38, 
   0x3A, 0x38, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x45, 0x46, 0x45, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x49, 
   0x49, 0x49, 0x43, 0x42, 0x43, 0x37, 0x37, 0x37, 0x33, 0x33, 0x33, 0x44, 0x43, 0x44, 0x41, 0x42, 
   0x41, 0x1B, 0x1C, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x44, 0x43, 0x44, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x1D, 
   0x1F, 0x1D, 0x41, 0x40, 0x41, 0x35, 0x35, 0x35, 0x2E, 0x2D, 0x2E, 0x3C, 0x3C, 0x3C, 0x41, 0x42, 
   0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x47, 0x44, 0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 
   0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 
   0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x37, 0x38, 0x37, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3E, 0x3B, 0x3E, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 
   0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2D, 0x2B, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x34, 0x32, 0x34, 0x36, 0x36, 0x36, 0x38, 
   0x39, 0x38, 0x3C, 0x3B, 0x3C, 0x3E, 0x3C, 0x3E, 0x3E, 0x3F, 0x3E, 0x42, 0x41, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 
   0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 
   0x44, 0x43, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 
   0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x49, 0x49, 0x49, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x44, 0x46, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 
   0x49, 0x48, 0x49, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 
   0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 
   0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x39, 0x38, 0x3A, 0x39, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3F, 
   0x3E, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 
   0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 
   0x48, 0x48, 0x4B, 0x4A, 0x4B, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x47, 0x46, 0x47, 0x49, 0x4A, 
   0x49, 0x3D, 0x3D, 0x3D, 0x1B, 0x19, 0x1B, 0x05, 0x06, 0x05, 0x03, 0x04, 0x03, 0x04, 0x04, 0x04, 
   0x05, 0x06, 0x05, 0x09, 0x08, 0x09, 0x40, 0x40, 0x40, 0x16, 0x17, 0x16, 0x02, 0x01, 0x02, 0x01, 
   0x00, 0x01, 0x1D, 0x1D, 0x1D, 0x3A, 0x3C, 0x3A, 0x3A, 0x3B, 0x3A, 0x44, 0x43, 0x44, 0x41, 0x40, 
   0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x40, 0x41, 
   0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x43, 0x45, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3D, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 
   0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x31, 0x33, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2C, 0x2E, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 0x3C, 
   0x39, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3D, 
   0x3F, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 
   0x49, 0x4A, 0x49, 0x4A, 0x4C, 0x4A, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 
   0x4F, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 
   0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 
   0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 
   0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 
   0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x46, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x31, 0x31, 0x31, 0x2B, 0x2A, 0x2B, 0x2E, 0x2D, 0x2E, 
   0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x31, 0x2F, 0x31, 0x34, 0x33, 0x34, 0x23, 0x21, 0x23, 0x07, 
   0x05, 0x07, 0x08, 0x08, 0x08, 0x31, 0x32, 0x31, 0x45, 0x46, 0x45, 0x41, 0x40, 0x41, 0x3F, 0x40, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 
   0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 
   0x39, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3E, 0x3C, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 
   0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x34, 0x33, 0x34, 0x37, 0x36, 0x37, 0x3A, 
   0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3F, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x41, 
   0x41, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 
   0x44, 0x45, 0x44, 0x45, 0x44, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x42, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 
   0x46, 0x46, 0x46, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4D, 
   0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 
   0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2C, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x30, 0x2F, 0x30, 
   0x30, 0x31, 0x30, 0x32, 0x33, 0x32, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x42, 0x40, 0x42, 
   0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 
   0x39, 0x3A, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 
   0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x40, 0x41, 0x40, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 
   0x40, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 
   0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 
   0x32, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2D, 0x2E, 0x2D, 0x2B, 
   0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x33, 0x33, 0x33, 0x36, 0x36, 0x36, 0x3A, 
   0x39, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3F, 0x3D, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 
   0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x41, 0x3F, 0x40, 0x41, 0x40, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x41, 
   0x3F, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 
   0x44, 0x46, 0x44, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 
   0x4C, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x45, 
   0x46, 0x45, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x44, 0x42, 0x44, 0x43, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x3F, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3D, 0x40, 0x3D, 0x3C, 0x3D, 0x3B, 0x39, 
   0x3B, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 
   0x32, 0x33, 0x32, 0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x30, 0x30, 0x30, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 
   0x38, 0x37, 0x39, 0x39, 0x39, 0x3C, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 
   0x43, 0x42, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 
   0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 
   0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3F, 
   0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x41, 
   0x3F, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x3F, 0x41, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3D, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x40, 0x3E, 
   0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x40, 0x3E, 0x40, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 
   0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 0x37, 
   0x38, 0x37, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3F, 0x3E, 0x3F, 0x40, 0x41, 0x40, 0x41, 0x41, 
   0x41, 0x44, 0x42, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 
   0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x47, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 
   0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x48, 
   0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x41, 0x40, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x40, 0x41, 0x42, 0x40, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 
   0x40, 0x40, 0x3F, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 
   0x48, 0x48, 0x4A, 0x4B, 0x4A, 0x4A, 0x4C, 0x4A, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 
   0x49, 0x48, 0x49, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 
   0x44, 0x44, 0x45, 0x44, 0x42, 0x44, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x3A, 0x39, 
   0x3A, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 
   0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2F, 0x2D, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 
   0x2F, 0x31, 0x2F, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x37, 
   0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x39, 0x3D, 0x3B, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x42, 0x40, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x45, 0x46, 
   0x45, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x41, 0x41, 0x41, 
   0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x41, 0x42, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 
   0x3D, 0x3E, 0x3C, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x40, 0x3E, 0x40, 0x3F, 0x3E, 0x3F, 0x2E, 0x2D, 0x2E, 0x2F, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 
   0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x32, 
   0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x32, 0x33, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 0x36, 0x35, 0x38, 
   0x38, 0x38, 0x39, 0x39, 0x39, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 
   0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x44, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 
   0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 
   0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x40, 0x3F, 0x40, 0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 
   0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x3F, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x47, 0x46, 0x47, 0x48, 
   0x47, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x47, 0x49, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 
   0x48, 0x46, 0x48, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x46, 0x45, 0x46, 0x42, 0x44, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3C, 0x3E, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 
   0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x33, 0x33, 0x33, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x30, 0x30, 0x30, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x37, 
   0x36, 0x37, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 
   0x41, 0x42, 0x41, 0x43, 0x44, 0x43, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x40, 0x41, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x43, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x3B, 0x39, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3D, 0x3B, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 
   0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x32, 0x33, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x34, 0x33, 0x36, 0x36, 0x36, 0x38, 
   0x37, 0x38, 0x3B, 0x39, 0x3B, 0x3D, 0x3C, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x47, 0x46, 0x47, 0x46, 
   0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 
   0x49, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x48, 0x4A, 0x47, 0x47, 0x47, 
   0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x42, 0x40, 0x42, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 
   0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x44, 0x43, 0x44, 0x45, 0x46, 0x45, 0x48, 
   0x48, 0x48, 0x47, 0x49, 0x47, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x48, 0x48, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 
   0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3D, 0x3E, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x37, 0x38, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 
   0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x2F, 0x31, 
   0x2F, 0x31, 0x2F, 0x32, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x37, 
   0x37, 0x37, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 
   0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x43, 0x41, 0x43, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 
   0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3B, 0x3D, 0x3B, 0x3C, 0x3C, 0x3C, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x40, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 
   0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2A, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x29, 
   0x2B, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x36, 0x36, 0x36, 0x39, 
   0x38, 0x39, 0x3B, 0x3A, 0x3B, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 
   0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x45, 0x43, 0x45, 0x42, 0x43, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x4B, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x46, 0x47, 
   0x46, 0x45, 0x46, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 
   0x40, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3D, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x40, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3E, 0x40, 0x40, 
   0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3D, 0x3F, 0x3C, 0x3E, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 
   0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x46, 
   0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x47, 0x45, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3C, 
   0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 
   0x32, 0x32, 0x32, 0x2E, 0x31, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x31, 0x2E, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3E, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x40, 0x42, 0x40, 0x42, 0x43, 0x42, 0x45, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 
   0x44, 0x42, 0x44, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x42, 0x40, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 
   0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 
   0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 
   0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x34, 0x35, 0x34, 0x36, 0x36, 0x36, 0x37, 
   0x38, 0x37, 0x3B, 0x3B, 0x3B, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x43, 0x43, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 
   0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 0x43, 0x40, 0x42, 0x41, 0x42, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 
   0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 
   0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 
   0x45, 0x44, 0x47, 0x46, 0x47, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 
   0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2D, 0x2B, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x36, 0x36, 0x36, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 
   0x44, 0x43, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x40, 0x42, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 0x3D, 
   0x3E, 0x3C, 0x3E, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x40, 0x41, 
   0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x38, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x37, 0x39, 0x37, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3F, 0x3C, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x2D, 0x2A, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x31, 0x30, 
   0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2D, 0x2B, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x35, 0x34, 0x35, 0x37, 0x37, 0x37, 0x39, 
   0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3E, 0x3E, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x45, 0x43, 0x46, 0x44, 0x46, 0x44, 0x45, 0x44, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3E, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 
   0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3D, 
   0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 
   0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x34, 0x36, 0x34, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x38, 0x37, 0x38, 0x39, 0x38, 
   0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 
   0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3E, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 
   0x40, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 
   0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3A, 0x38, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 
   0x30, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 
   0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x3B, 
   0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x43, 0x42, 0x43, 0x42, 0x43, 
   0x42, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 
   0x46, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 
   0x45, 0x45, 0x45, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 
   0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x44, 0x45, 
   0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3B, 0x3D, 0x3B, 0x39, 0x3B, 0x39, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 
   0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x31, 0x33, 0x31, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x40, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x42, 
   0x41, 0x44, 0x42, 0x44, 0x43, 0x41, 0x43, 0x3F, 0x3F, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3E, 0x3C, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 
   0x3F, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3D, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 
   0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 
   0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 
   0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x36, 0x37, 0x36, 0x39, 0x39, 0x39, 0x3A, 
   0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x40, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 
   0x42, 0x44, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x48, 0x47, 
   0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 
   0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 0x39, 
   0x38, 0x39, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x41, 0x3E, 0x41, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x43, 0x43, 
   0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x46, 0x44, 0x46, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 
   0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x40, 0x41, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3E, 0x40, 0x3C, 0x3C, 0x3C, 0x38, 0x3A, 0x38, 0x39, 
   0x39, 0x39, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x34, 0x33, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x38, 0x37, 0x38, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x3F, 0x41, 
   0x3F, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 
   0x3E, 0x40, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 
   0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x40, 
   0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x2A, 0x28, 0x2A, 0x2B, 0x2A, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x31, 
   0x33, 0x31, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x33, 0x31, 
   0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3C, 
   0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x43, 0x45, 0x43, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x48, 0x46, 0x48, 0x46, 0x48, 0x46, 0x47, 0x46, 0x46, 
   0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x46, 0x48, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x47, 0x44, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 
   0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x3E, 0x40, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 
   0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x38, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 
   0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x33, 0x32, 0x30, 0x32, 0x30, 0x31, 0x30, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3D, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 
   0x40, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x44, 0x42, 0x44, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3A, 
   0x3C, 0x3A, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 
   0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x44, 0x42, 0x44, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3E, 
   0x3B, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 
   0x42, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 
   0x49, 0x4A, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 
   0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 
   0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 
   0x46, 0x44, 0x46, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 
   0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3A, 
   0x3B, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 
   0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3A, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 
   0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3E, 0x3C, 0x3E, 0x40, 0x3F, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x40, 0x42, 0x40, 0x40, 0x42, 0x40, 
   0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 
   0x42, 0x42, 0x40, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 
   0x3D, 0x3F, 0x3D, 0x3E, 0x3E, 0x3E, 0x3C, 0x3E, 0x3C, 0x3A, 0x3B, 0x3A, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2E, 0x2D, 0x2E, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3E, 0x3B, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 
   0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x35, 0x37, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 
   0x3D, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 
   0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x31, 0x31, 
   0x31, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x33, 0x34, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3E, 0x3C, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x41, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x45, 0x43, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x4A, 0x48, 0x49, 0x48, 0x49, 0x48, 
   0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 
   0x48, 0x48, 0x46, 0x48, 0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 
   0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3A, 0x3C, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 
   0x3C, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x40, 0x3E, 
   0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x3F, 0x41, 0x3F, 0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3D, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x38, 
   0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2C, 0x2E, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x29, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2D, 0x2B, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 
   0x38, 0x3A, 0x38, 0x38, 0x3A, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3A, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3C, 0x3E, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 
   0x3A, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 
   0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x34, 0x33, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x46, 0x43, 0x46, 
   0x45, 0x45, 0x45, 0x46, 0x44, 0x46, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2D, 
   0x2A, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x31, 
   0x30, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x35, 
   0x33, 0x35, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 
   0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x33, 0x31, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 
   0x3C, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 0x41, 0x41, 0x41, 0x42, 0x43, 
   0x42, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 
   0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x49, 0x4A, 0x48, 0x4B, 0x48, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 
   0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 
   0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 
   0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3B, 0x3C, 0x3B, 0x39, 0x3A, 
   0x39, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x37, 0x35, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x40, 0x3F, 
   0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 
   0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 
   0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3B, 
   0x3A, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x3D, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3D, 0x40, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 
   0x40, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x3E, 0x40, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x39, 0x39, 0x39, 0x37, 
   0x38, 0x37, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2E, 0x2C, 0x2E, 0x2C, 0x2E, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2C, 0x2B, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 
   0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3E, 0x3D, 
   0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 
   0x40, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 
   0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x3F, 0x40, 0x3B, 0x3C, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 
   0x39, 0x3A, 0x38, 0x37, 0x38, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x33, 0x35, 0x33, 0x35, 
   0x35, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x43, 0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 
   0x46, 0x46, 0x46, 0x44, 0x46, 0x44, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x2A, 0x29, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 
   0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3C, 0x3E, 0x3C, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x47, 0x47, 0x47, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x48, 
   0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x48, 
   0x49, 0x46, 0x47, 0x46, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x46, 0x44, 0x46, 0x44, 0x44, 0x44, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 
   0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 
   0x39, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 0x3A, 
   0x38, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x40, 0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x38, 
   0x39, 0x38, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x2D, 0x2F, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x29, 
   0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 
   0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 
   0x38, 0x39, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 
   0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 
   0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 
   0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x44, 0x46, 0x44, 0x46, 0x47, 0x46, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x31, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 
   0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 0x40, 0x42, 0x42, 
   0x42, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4A, 0x4B, 0x4A, 0x48, 0x48, 
   0x48, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x43, 0x43, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3B, 0x3A, 0x3B, 0x38, 0x38, 
   0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 
   0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 
   0x39, 0x38, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x2A, 0x29, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x30, 0x2F, 
   0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 
   0x3B, 0x3A, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3A, 0x3C, 0x3A, 
   0x39, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x42, 0x41, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 
   0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 
   0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 
   0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x45, 0x43, 0x46, 0x47, 0x46, 0x48, 0x4A, 0x48, 0x4A, 0x4B, 0x4A, 0x4E, 0x4C, 0x4E, 
   0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 0x4B, 0x48, 0x49, 
   0x48, 0x45, 0x46, 0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 
   0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 
   0x38, 0x37, 0x35, 0x37, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x36, 0x36, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 
   0x36, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 
   0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3E, 0x3D, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 
   0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x34, 0x35, 0x34, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2A, 0x2C, 0x2B, 0x2C, 0x2B, 0x2E, 0x2C, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x34, 0x33, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3D, 0x3E, 
   0x3D, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 
   0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 
   0x3A, 0x3A, 0x38, 0x38, 0x38, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 
   0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3F, 
   0x3E, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x38, 0x37, 0x38, 
   0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x42, 0x42, 
   0x42, 0x45, 0x44, 0x45, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x4C, 0x4B, 0x4C, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 
   0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x49, 0x48, 
   0x49, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x42, 0x43, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x3F, 0x40, 0x40, 0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3A, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3B, 0x3B, 0x3C, 0x3A, 0x3C, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 
   0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x37, 0x36, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3B, 0x3D, 0x3D, 0x3D, 0x3C, 0x3E, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x34, 0x34, 
   0x34, 0x32, 0x33, 0x32, 0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x2F, 0x31, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 
   0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 
   0x2B, 0x29, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 
   0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x38, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x3A, 0x39, 0x3A, 0x3D, 0x3C, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x42, 0x40, 0x42, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 
   0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3E, 0x40, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 
   0x3A, 0x3A, 0x38, 0x39, 0x38, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x39, 0x3A, 0x39, 0x39, 0x3B, 0x39, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x43, 0x42, 0x43, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 
   0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x30, 0x2E, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x42, 0x42, 
   0x42, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4A, 0x4C, 0x4A, 0x49, 0x49, 
   0x49, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3F, 0x3D, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x37, 
   0x39, 0x35, 0x35, 0x35, 0x35, 0x33, 0x35, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x36, 
   0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 
   0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 
   0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x32, 0x34, 
   0x34, 0x33, 0x34, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x31, 0x30, 0x31, 
   0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3D, 0x3B, 
   0x3D, 0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 
   0x3A, 0x3A, 0x38, 0x39, 0x38, 0x35, 0x37, 0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x32, 
   0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 
   0x34, 0x34, 0x34, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x3A, 0x3A, 0x3A, 0x3D, 0x3B, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 
   0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 
   0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x34, 
   0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x38, 0x37, 0x38, 
   0x37, 0x39, 0x37, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x42, 
   0x41, 0x45, 0x44, 0x45, 0x47, 0x46, 0x47, 0x48, 0x49, 0x48, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4B, 0x4D, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4A, 
   0x4B, 0x49, 0x48, 0x49, 0x46, 0x48, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 
   0x40, 0x42, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x37, 0x37, 
   0x37, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x39, 0x37, 0x3B, 0x39, 0x3B, 0x39, 0x3A, 0x39, 
   0x3A, 0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x36, 
   0x35, 0x36, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3A, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x39, 0x3B, 0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 
   0x3B, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 
   0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 
   0x28, 0x27, 0x2B, 0x29, 0x2B, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x34, 0x36, 0x34, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 
   0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3D, 0x3F, 0x3D, 0x3B, 0x3D, 0x3B, 0x3C, 0x3B, 0x3C, 0x3A, 
   0x3A, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x34, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x31, 0x33, 
   0x31, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x36, 0x35, 0x36, 0x38, 0x37, 0x38, 0x3B, 0x3A, 0x3B, 0x3C, 0x3D, 0x3C, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 0x3D, 0x40, 0x3E, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x41, 0x3F, 0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x33, 
   0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x38, 0x39, 0x38, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 
   0x41, 0x43, 0x43, 0x43, 0x47, 0x47, 0x47, 0x4A, 0x49, 0x4A, 0x4A, 0x4B, 0x4A, 0x4D, 0x4D, 0x4D, 
   0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3A, 0x3C, 0x39, 0x39, 0x39, 0x37, 0x37, 
   0x37, 0x34, 0x35, 0x34, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x36, 0x38, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x36, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x31, 0x33, 0x31, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 
   0x39, 0x3B, 0x3C, 0x3B, 0x40, 0x3E, 0x40, 0x40, 0x3E, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 
   0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 
   0x34, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x32, 
   0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x37, 0x36, 0x38, 0x3A, 0x38, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 
   0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x27, 
   0x27, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x27, 0x2A, 0x27, 0x29, 0x2A, 0x29, 0x2A, 0x2C, 
   0x2A, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x37, 0x37, 0x37, 
   0x37, 0x39, 0x37, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x41, 0x40, 
   0x41, 0x44, 0x43, 0x44, 0x46, 0x47, 0x46, 0x48, 0x4A, 0x48, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 
   0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 
   0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x33, 0x35, 0x33, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x34, 0x33, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x39, 0x37, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x31, 
   0x32, 0x31, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x2F, 0x31, 0x2F, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x39, 0x38, 
   0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3B, 0x3A, 0x38, 0x3A, 0x38, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x34, 
   0x36, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 
   0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 
   0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 
   0x28, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x38, 
   0x38, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3C, 0x3E, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x37, 
   0x39, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x37, 0x35, 0x37, 0x34, 0x34, 0x34, 0x32, 0x32, 
   0x32, 0x33, 0x31, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x31, 0x33, 
   0x31, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 
   0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x37, 0x36, 0x37, 0x3B, 0x39, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 
   0x38, 0x39, 0x38, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x42, 0x41, 
   0x42, 0x45, 0x43, 0x45, 0x47, 0x46, 0x47, 0x4A, 0x49, 0x4A, 0x4C, 0x4D, 0x4C, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4A, 0x4C, 0x4A, 0x4B, 0x4B, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 
   0x37, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x36, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 
   0x36, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2E, 0x2F, 0x2E, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2B, 0x2D, 0x2A, 0x2A, 0x2A, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x26, 0x26, 
   0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 
   0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 
   0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x35, 0x33, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x32, 
   0x32, 0x32, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x33, 0x33, 
   0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x38, 0x37, 0x38, 0x3A, 0x39, 0x3A, 0x3B, 0x3C, 0x3B, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x41, 
   0x40, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x28, 0x27, 0x28, 0x27, 0x27, 0x2A, 0x27, 0x28, 0x2A, 0x28, 0x29, 0x2B, 0x29, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 
   0x37, 0x39, 0x37, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x40, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 0x49, 0x4A, 0x49, 0x4C, 0x4C, 0x4C, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4B, 
   0x4B, 0x49, 0x4A, 0x49, 0x48, 0x47, 0x48, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3E, 0x3E, 0x3E, 0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x36, 0x36, 
   0x36, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x34, 0x36, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 
   0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x35, 0x33, 0x35, 0x32, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2C, 0x2D, 0x29, 
   0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 
   0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x30, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x38, 0x38, 
   0x38, 0x39, 0x3A, 0x39, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x32, 0x32, 
   0x32, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x37, 0x35, 0x37, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 
   0x41, 0x44, 0x42, 0x44, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x40, 0x3F, 0x40, 0x40, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x43, 0x44, 
   0x43, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 
   0x4E, 0x4D, 0x4E, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4B, 0x4B, 0x49, 0x4B, 
   0x49, 0x48, 0x49, 0x48, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x39, 0x37, 0x37, 0x36, 
   0x37, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 
   0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 
   0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 
   0x25, 0x24, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 
   0x2A, 0x2A, 0x2A, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x37, 
   0x36, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x3A, 0x38, 0x37, 0x38, 0x37, 0x35, 0x34, 0x35, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 
   0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x39, 0x38, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 
   0x43, 0x46, 0x44, 0x46, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x28, 
   0x26, 0x28, 0x27, 0x28, 0x27, 0x28, 0x2A, 0x28, 0x29, 0x2B, 0x29, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 
   0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 
   0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 
   0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x44, 0x42, 0x45, 0x45, 
   0x45, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 
   0x4C, 0x4C, 0x4C, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4F, 0x4D, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4E, 0x4C, 0x4C, 0x4B, 0x4C, 0x48, 0x49, 
   0x48, 0x48, 0x47, 0x48, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 
   0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 
   0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x36, 0x36, 
   0x36, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 
   0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 
   0x29, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x26, 0x26, 
   0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 
   0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 
   0x24, 0x23, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x29, 0x28, 
   0x29, 0x28, 0x28, 0x28, 0x29, 0x27, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 0x2F, 0x2D, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x32, 
   0x33, 0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x35, 0x32, 0x35, 
   0x36, 0x35, 0x36, 0x37, 0x38, 0x37, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x41, 0x3F, 0x41, 0x43, 0x41, 0x44, 0x44, 0x44, 0x43, 0x45, 0x43, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x28, 0x27, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2E, 0x2C, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x40, 0x3F, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x46, 0x46, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4E, 
   0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 0x4C, 0x4B, 0x4B, 0x4B, 0x48, 0x49, 
   0x48, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 
   0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x37, 0x36, 
   0x37, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x34, 0x34, 0x34, 0x36, 0x34, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 0x33, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x31, 0x33, 0x31, 0x32, 0x31, 0x32, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 
   0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x26, 0x28, 0x27, 0x26, 
   0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 
   0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 
   0x29, 0x28, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2E, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 
   0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 
   0x3A, 0x3A, 0x3A, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 
   0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 
   0x36, 0x36, 0x36, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3F, 
   0x40, 0x3F, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 
   0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x25, 0x24, 0x25, 0x27, 0x25, 0x27, 0x25, 0x26, 0x25, 0x27, 
   0x27, 0x27, 0x28, 0x29, 0x28, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 
   0x2B, 0x29, 0x2B, 0x2B, 0x2A, 0x2B, 0x2D, 0x2D, 0x2D, 0x2F, 0x30, 0x2F, 0x31, 0x32, 0x31, 0x33, 
   0x33, 0x33, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3E, 0x3F, 0x3E, 0x41, 
   0x40, 0x41, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4B, 0x4A, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x48, 0x49, 
   0x48, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x35, 0x37, 
   0x35, 0x33, 0x35, 0x33, 0x33, 0x34, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 
   0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2D, 
   0x2F, 0x2D, 0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x26, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x25, 0x24, 0x25, 0x23, 
   0x24, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 
   0x27, 0x27, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x32, 
   0x31, 0x32, 0x33, 0x32, 0x33, 0x35, 0x33, 0x35, 0x33, 0x34, 0x33, 0x36, 0x35, 0x36, 0x36, 0x35, 
   0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 
   0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x30, 
   0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x36, 0x34, 
   0x37, 0x36, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x41, 0x40, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x48, 0x49, 0x48, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x28, 
   0x28, 0x28, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x33, 
   0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 
   0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3F, 0x3F, 0x42, 0x42, 0x42, 0x43, 0x45, 0x43, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x48, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x48, 0x49, 0x47, 0x47, 
   0x47, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 
   0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 
   0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 
   0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 
   0x29, 0x2A, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x25, 0x25, 
   0x25, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 
   0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 
   0x24, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2B, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x33, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 
   0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x43, 0x41, 0x44, 0x43, 0x44, 0x44, 0x46, 0x44, 0x48, 0x47, 
   0x48, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 
   0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 
   0x28, 0x28, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x28, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 
   0x27, 0x28, 0x27, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x30, 0x2F, 0x30, 0x32, 0x31, 0x32, 0x34, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3E, 0x3D, 0x3E, 0x41, 
   0x40, 0x41, 0x42, 0x42, 0x42, 0x46, 0x45, 0x46, 0x48, 0x46, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x46, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 
   0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4B, 0x4A, 0x49, 
   0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 
   0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 
   0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x35, 0x36, 
   0x35, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 
   0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 
   0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x36, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x2A, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x25, 0x27, 0x24, 0x25, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x22, 0x25, 0x23, 
   0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x23, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 
   0x28, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2C, 0x2A, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 
   0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x2E, 
   0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x35, 0x33, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3C, 0x3A, 0x3F, 0x3E, 0x3F, 0x40, 
   0x3F, 0x40, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x48, 0x46, 0x48, 0x47, 0x47, 
   0x47, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 
   0x28, 0x28, 0x2B, 0x29, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x27, 
   0x28, 0x28, 0x26, 0x28, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x2A, 0x28, 0x2A, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 0x31, 0x31, 0x31, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 
   0x38, 0x39, 0x38, 0x3A, 0x39, 0x3A, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 
   0x40, 0x3F, 0x42, 0x42, 0x42, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x49, 0x47, 0x49, 0x48, 0x47, 
   0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 0x49, 
   0x49, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 
   0x45, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x3F, 0x41, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 
   0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x39, 0x3B, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x31, 0x33, 0x32, 0x33, 0x32, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x39, 0x37, 0x39, 0x37, 0x37, 
   0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 
   0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x30, 0x2E, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x2D, 
   0x30, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x27, 0x28, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x25, 
   0x24, 0x25, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x23, 
   0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 
   0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 
   0x27, 0x27, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2F, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 
   0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3F, 0x3E, 0x3F, 0x41, 
   0x3F, 0x41, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x48, 0x48, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 
   0x48, 0x49, 0x48, 0x48, 0x47, 0x48, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x29, 0x28, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x24, 0x25, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 
   0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x2B, 0x2B, 0x2B, 0x2E, 0x2D, 0x2E, 0x2F, 0x30, 0x2F, 0x31, 
   0x31, 0x31, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 0x3E, 0x40, 
   0x40, 0x40, 0x42, 0x41, 0x42, 0x45, 0x44, 0x45, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x47, 0x47, 
   0x47, 0x45, 0x47, 0x45, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 
   0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3C, 0x3F, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 
   0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 
   0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x35, 
   0x35, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x2B, 0x29, 0x2B, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x25, 
   0x26, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x26, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 
   0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 
   0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x25, 0x23, 0x25, 
   0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x23, 
   0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x24, 0x22, 0x24, 
   0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 
   0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 
   0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 
   0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3C, 0x3B, 0x3F, 0x3F, 0x3F, 0x41, 
   0x40, 0x41, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x47, 0x47, 0x47, 0x48, 0x48, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x26, 0x26, 0x26, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x30, 0x2F, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 
   0x3F, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x46, 0x45, 0x46, 0x45, 0x46, 0x45, 0x45, 0x46, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x46, 0x44, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 
   0x49, 0x48, 0x49, 0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3D, 
   0x3E, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x31, 0x33, 0x31, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x37, 
   0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 
   0x27, 0x29, 0x27, 0x26, 0x27, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x24, 
   0x25, 0x24, 0x24, 0x25, 0x24, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x26, 0x25, 
   0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 
   0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x24, 0x25, 0x24, 
   0x22, 0x22, 0x22, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1F, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 
   0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 
   0x24, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 
   0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x28, 0x28, 
   0x28, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 
   0x33, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 
   0x32, 0x33, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x29, 0x28, 
   0x29, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 
   0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 
   0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 
   0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x3C, 0x3B, 0x3C, 0x3E, 0x3E, 0x3E, 0x40, 
   0x40, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x48, 0x49, 
   0x48, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 
   0x49, 0x4A, 0x49, 0x4A, 0x49, 0x4A, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2D, 0x2B, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2C, 0x2A, 0x29, 0x2A, 0x28, 0x29, 
   0x28, 0x26, 0x28, 0x26, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x25, 0x23, 0x25, 0x25, 0x23, 0x25, 
   0x23, 0x25, 0x23, 0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x2B, 0x2B, 0x2B, 0x2E, 0x2D, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x31, 0x30, 0x31, 0x34, 0x32, 0x34, 0x33, 0x34, 0x33, 0x37, 0x37, 0x37, 0x39, 0x39, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x43, 0x42, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 
   0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x36, 0x37, 
   0x36, 0x33, 0x35, 0x33, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x35, 0x33, 0x35, 0x35, 0x36, 0x35, 0x37, 
   0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x38, 
   0x38, 0x36, 0x38, 0x36, 0x36, 0x36, 0x36, 0x36, 0x34, 0x36, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x26, 0x28, 0x26, 0x26, 0x26, 0x26, 
   0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 
   0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x23, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 
   0x22, 0x23, 0x22, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 
   0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x23, 
   0x24, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x20, 0x21, 0x20, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x26, 0x25, 0x26, 0x25, 0x27, 
   0x25, 0x28, 0x29, 0x28, 0x2C, 0x2A, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x31, 0x34, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x34, 0x33, 0x34, 
   0x33, 0x35, 0x33, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3E, 0x3D, 0x3E, 0x3E, 
   0x3F, 0x3E, 0x40, 0x41, 0x40, 0x42, 0x43, 0x42, 0x44, 0x46, 0x44, 0x47, 0x47, 0x47, 0x46, 0x47, 
   0x46, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x28, 
   0x2A, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 0x24, 0x25, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x28, 0x27, 0x28, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2F, 
   0x2E, 0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x38, 0x39, 
   0x38, 0x3C, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 
   0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x41, 0x3F, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 0x45, 
   0x44, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x46, 0x48, 0x46, 0x47, 0x46, 0x47, 0x46, 0x46, 0x46, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 
   0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x45, 0x44, 
   0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 
   0x40, 0x42, 0x40, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x39, 0x3A, 0x39, 0x3B, 0x38, 0x3B, 0x38, 0x38, 0x38, 0x37, 0x37, 
   0x37, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x37, 
   0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 
   0x39, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 
   0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 
   0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 
   0x22, 0x23, 0x22, 0x20, 0x21, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x1F, 0x20, 0x1F, 0x21, 0x21, 0x21, 0x22, 0x20, 0x22, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x20, 0x20, 0x20, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x25, 0x26, 
   0x25, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 
   0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x29, 
   0x2B, 0x29, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x29, 0x27, 0x28, 0x27, 0x28, 0x27, 0x27, 
   0x27, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2B, 0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 
   0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x38, 0x37, 0x38, 0x3C, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x41, 0x3F, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x48, 0x47, 
   0x48, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 
   0x28, 0x26, 0x27, 0x26, 0x25, 0x25, 0x25, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 
   0x24, 0x23, 0x24, 0x26, 0x24, 0x26, 0x25, 0x27, 0x25, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 
   0x2D, 0x2C, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3D, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 0x41, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 
   0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x36, 0x37, 
   0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x34, 0x33, 0x34, 0x33, 0x31, 0x33, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x26, 0x25, 
   0x26, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 
   0x24, 0x22, 0x24, 0x21, 0x23, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 
   0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x20, 0x20, 0x20, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x25, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x27, 0x24, 0x26, 0x24, 0x24, 0x24, 0x24, 
   0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x20, 0x20, 0x20, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1C, 0x1D, 0x1B, 
   0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 0x1F, 0x1D, 0x1F, 0x22, 0x21, 0x22, 0x25, 0x24, 
   0x25, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x32, 0x32, 0x32, 
   0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 
   0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x46, 0x46, 0x46, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 
   0x2A, 0x28, 0x27, 0x28, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x29, 0x2A, 0x29, 0x2C, 
   0x2D, 0x2C, 0x2E, 0x2F, 0x2E, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x38, 0x38, 
   0x38, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 
   0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x45, 
   0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3D, 0x3F, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x39, 0x37, 0x39, 0x38, 0x39, 0x35, 0x36, 
   0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 0x39, 0x36, 0x35, 0x36, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x1F, 
   0x20, 0x1F, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 
   0x22, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 
   0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x22, 0x21, 0x22, 0x21, 0x20, 0x21, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1F, 0x1D, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1D, 0x1D, 0x1D, 0x21, 0x20, 0x21, 0x22, 0x23, 
   0x22, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2F, 
   0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 
   0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x24, 
   0x25, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x2B, 0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 
   0x34, 0x33, 0x34, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x44, 0x45, 0x44, 0x47, 0x47, 
   0x47, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x28, 0x29, 
   0x28, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x25, 0x23, 0x26, 0x25, 0x26, 0x29, 0x27, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x36, 0x35, 0x36, 0x38, 0x38, 
   0x38, 0x3A, 0x39, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 
   0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x44, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 
   0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x44, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3E, 0x3F, 0x3E, 0x3C, 
   0x3D, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x33, 0x33, 0x33, 0x33, 0x31, 0x33, 
   0x2F, 0x30, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x23, 0x22, 
   0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x21, 
   0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x20, 0x21, 
   0x20, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1D, 0x1F, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 
   0x1F, 0x1E, 0x1F, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 
   0x23, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x25, 0x26, 0x25, 0x24, 0x26, 
   0x24, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x21, 0x23, 
   0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1C, 0x1E, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 
   0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1F, 0x1D, 0x1F, 0x1D, 0x1D, 0x1D, 
   0x1C, 0x1E, 0x1C, 0x1C, 0x1D, 0x1C, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1F, 0x1E, 0x1F, 0x21, 0x22, 
   0x21, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2E, 0x30, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x24, 0x23, 
   0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x27, 0x26, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x32, 0x31, 
   0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x43, 0x44, 0x43, 0x47, 0x47, 
   0x47, 0x4A, 0x48, 0x4A, 0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 
   0x4D, 0x4C, 0x4D, 0x4A, 0x4C, 0x4A, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x29, 0x29, 
   0x29, 0x28, 0x26, 0x28, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x24, 0x25, 0x24, 0x25, 0x26, 0x25, 0x27, 0x28, 0x27, 0x2A, 0x2A, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2E, 0x2D, 0x2E, 0x31, 0x2F, 0x31, 0x33, 0x31, 0x33, 0x35, 0x35, 0x35, 0x38, 0x38, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 
   0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x3F, 0x41, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x3E, 0x40, 0x41, 0x40, 0x43, 0x41, 0x43, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x43, 0x42, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x28, 0x2A, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x22, 0x22, 
   0x22, 0x1F, 0x20, 0x1F, 0x21, 0x20, 0x21, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1C, 
   0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x1F, 0x1F, 
   0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1C, 0x1E, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1F, 0x1D, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x26, 0x25, 0x26, 0x24, 0x26, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x21, 0x20, 0x21, 
   0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1A, 0x1C, 
   0x1A, 0x1A, 0x1C, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 
   0x1D, 0x1B, 0x1D, 0x1C, 0x1B, 0x1C, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x18, 0x19, 0x18, 0x17, 
   0x19, 0x17, 0x17, 0x19, 0x17, 0x18, 0x19, 0x18, 0x1B, 0x1B, 0x1B, 0x1D, 0x1D, 0x1D, 0x20, 0x21, 
   0x20, 0x25, 0x23, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2A, 
   0x2B, 0x2A, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x31, 0x30, 0x31, 
   0x33, 0x34, 0x33, 0x36, 0x37, 0x36, 0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3D, 
   0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x40, 0x3E, 0x40, 0x42, 0x40, 0x43, 0x45, 0x43, 0x47, 0x47, 
   0x47, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4B, 0x4D, 0x4B, 0x4B, 0x4C, 0x4B, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2C, 0x2E, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 
   0x29, 0x27, 0x26, 0x27, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 0x28, 0x28, 0x28, 0x2B, 0x29, 0x2B, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x35, 0x34, 0x35, 0x36, 0x37, 
   0x36, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 
   0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x42, 0x43, 
   0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3D, 0x3E, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x28, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x24, 0x24, 0x24, 0x22, 0x23, 0x22, 0x21, 0x21, 
   0x21, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1F, 0x1D, 0x1F, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 
   0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 0x1E, 0x1C, 0x1D, 0x1E, 0x1D, 0x1D, 
   0x1E, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 
   0x1E, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 
   0x1C, 0x1D, 0x1C, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 
   0x22, 0x22, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x24, 0x26, 0x24, 0x25, 0x25, 0x25, 0x24, 0x24, 
   0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x21, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 
   0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 
   0x1C, 0x1B, 0x1C, 0x19, 0x1A, 0x19, 0x18, 0x19, 0x18, 0x19, 0x18, 0x19, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x19, 0x19, 0x19, 0x1B, 0x1B, 0x1B, 0x1F, 0x1F, 
   0x1F, 0x23, 0x22, 0x23, 0x25, 0x24, 0x25, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2C, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x26, 0x26, 0x26, 0x24, 0x24, 0x24, 0x23, 0x23, 
   0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 
   0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 
   0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x3F, 0x40, 0x3F, 0x41, 0x42, 0x41, 0x43, 0x45, 0x43, 0x48, 0x47, 
   0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 
   0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 
   0x29, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x25, 0x22, 0x25, 
   0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2A, 0x2A, 0x2A, 0x2B, 
   0x2D, 0x2B, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x33, 0x33, 0x33, 0x36, 0x34, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3A, 
   0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 
   0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x31, 0x33, 0x31, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2B, 0x2C, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 
   0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x21, 0x21, 0x1F, 0x1F, 
   0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1E, 0x1C, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1C, 0x1D, 
   0x1C, 0x1A, 0x1C, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1B, 0x1A, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x20, 
   0x20, 0x20, 0x23, 0x22, 0x23, 0x25, 0x23, 0x25, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x1F, 0x20, 0x1F, 0x1D, 0x1F, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x19, 0x1A, 
   0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 
   0x17, 0x19, 0x17, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x1A, 0x1A, 0x1A, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x20, 0x1E, 0x22, 0x22, 0x22, 0x23, 0x24, 0x23, 0x26, 0x26, 0x26, 0x29, 0x28, 0x29, 
   0x2B, 0x29, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 
   0x2A, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x23, 
   0x23, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 
   0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x31, 0x31, 0x31, 
   0x33, 0x33, 0x33, 0x36, 0x36, 0x36, 0x38, 0x38, 0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x3E, 0x40, 0x42, 0x40, 0x43, 0x45, 0x43, 0x46, 0x47, 
   0x46, 0x48, 0x49, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 
   0x28, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x25, 0x23, 0x25, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x2A, 0x2A, 0x2A, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x31, 0x30, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 
   0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x40, 
   0x3F, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x3F, 0x40, 0x40, 
   0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x41, 0x3F, 
   0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3D, 0x3E, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x38, 
   0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x30, 0x31, 0x30, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 0x28, 0x27, 
   0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x20, 0x20, 0x20, 0x1E, 0x1F, 
   0x1E, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1A, 0x1C, 0x1A, 
   0x1B, 0x1B, 0x1B, 0x19, 0x1B, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1A, 
   0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 
   0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x1B, 0x1A, 
   0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x1F, 0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x1C, 
   0x1B, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x1A, 
   0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x19, 0x19, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
   0x16, 0x18, 0x16, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x1D, 0x1B, 
   0x1D, 0x1D, 0x1E, 0x1D, 0x1F, 0x20, 0x1F, 0x23, 0x22, 0x23, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 
   0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x23, 
   0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x22, 0x23, 0x22, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 
   0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x31, 0x30, 0x31, 
   0x33, 0x33, 0x33, 0x36, 0x36, 0x36, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 0x45, 0x43, 0x46, 0x47, 
   0x46, 0x48, 0x49, 0x48, 0x48, 0x4A, 0x48, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x29, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x27, 
   0x27, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x23, 0x25, 0x23, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 0x2D, 
   0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x32, 0x31, 0x33, 0x34, 0x33, 0x37, 0x36, 0x37, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 
   0x3D, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x40, 0x43, 0x40, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3D, 0x3D, 0x3D, 0x3A, 
   0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x33, 0x35, 0x33, 0x35, 0x33, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x35, 0x37, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x33, 0x32, 0x33, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 0x28, 0x28, 0x28, 0x26, 
   0x26, 0x26, 0x25, 0x26, 0x25, 0x23, 0x23, 0x23, 0x22, 0x21, 0x22, 0x21, 0x20, 0x21, 0x1D, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 
   0x19, 0x17, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 
   0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 
   0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 
   0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 
   0x22, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x1F, 0x21, 0x1F, 0x1F, 0x1F, 
   0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1C, 0x1D, 0x1A, 0x1C, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 
   0x1B, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x17, 0x19, 
   0x17, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 0x16, 0x17, 0x16, 
   0x15, 0x17, 0x15, 0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 
   0x16, 0x15, 0x16, 0x16, 0x16, 0x14, 0x17, 0x14, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x19, 0x1A, 
   0x19, 0x1D, 0x1C, 0x1D, 0x1F, 0x1E, 0x1F, 0x22, 0x22, 0x22, 0x25, 0x24, 0x25, 0x27, 0x26, 0x27, 
   0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2D, 0x2B, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x24, 0x24, 0x24, 0x23, 0x22, 
   0x23, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 
   0x26, 0x25, 0x26, 0x26, 0x27, 0x26, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 
   0x33, 0x33, 0x33, 0x36, 0x36, 0x36, 0x39, 0x38, 0x39, 0x3B, 0x3A, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x46, 0x46, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 
   0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x29, 0x27, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2C, 0x2B, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x32, 0x31, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x3E, 
   0x40, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x40, 0x3F, 0x3E, 0x3D, 0x3E, 0x3B, 
   0x3C, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 
   0x37, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x35, 
   0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 
   0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x29, 0x28, 0x29, 0x27, 
   0x26, 0x27, 0x25, 0x26, 0x25, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x20, 0x20, 0x20, 0x1E, 0x1F, 
   0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1A, 0x1B, 
   0x18, 0x1A, 0x18, 0x17, 0x19, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 
   0x18, 0x17, 0x19, 0x19, 0x19, 0x1A, 0x1B, 0x1A, 0x1D, 0x1B, 0x1D, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 
   0x1A, 0x19, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 
   0x19, 0x19, 0x19, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x21, 0x1F, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x18, 
   0x1A, 0x18, 0x19, 0x18, 0x19, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 
   0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x17, 0x16, 0x17, 0x16, 0x15, 0x16, 
   0x14, 0x16, 0x14, 0x14, 0x16, 0x14, 0x15, 0x16, 0x15, 0x17, 0x16, 0x17, 0x16, 0x17, 0x16, 0x16, 
   0x18, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x17, 0x19, 
   0x17, 0x1B, 0x1B, 0x1B, 0x1F, 0x1D, 0x1F, 0x20, 0x20, 0x20, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 
   0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x26, 0x24, 0x26, 0x23, 0x23, 
   0x23, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 
   0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2B, 0x29, 0x2B, 0x2A, 
   0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 
   0x33, 0x32, 0x33, 0x36, 0x35, 0x36, 0x38, 0x37, 0x38, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x46, 0x47, 
   0x46, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x26, 0x27, 0x25, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 
   0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2D, 0x2D, 0x2D, 0x2F, 
   0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 
   0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3E, 0x3C, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x42, 0x41, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 
   0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 
   0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x3F, 0x40, 0x3F, 0x3D, 0x3F, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2E, 0x2E, 0x2C, 0x2E, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x28, 0x29, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x22, 0x23, 0x22, 0x20, 0x21, 0x20, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1C, 0x1E, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 
   0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x18, 
   0x17, 0x18, 0x17, 0x18, 0x17, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 
   0x19, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 
   0x17, 0x18, 0x17, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1D, 
   0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 
   0x21, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x19, 
   0x1A, 0x19, 0x17, 0x18, 0x17, 0x16, 0x18, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x15, 0x17, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x14, 0x15, 
   0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x17, 0x16, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x18, 0x19, 
   0x19, 0x19, 0x16, 0x18, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x18, 0x18, 
   0x18, 0x1A, 0x1A, 0x1A, 0x1D, 0x1D, 0x1D, 0x1F, 0x1F, 0x1F, 0x22, 0x23, 0x22, 0x24, 0x24, 0x24, 
   0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x28, 0x29, 0x28, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x24, 0x24, 0x24, 0x23, 0x22, 
   0x23, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x25, 0x23, 0x25, 0x24, 0x24, 0x24, 
   0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x28, 0x27, 0x28, 0x2B, 0x29, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2C, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 0x2D, 0x2B, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 
   0x33, 0x32, 0x33, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x38, 0x38, 0x38, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x45, 0x47, 
   0x45, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 
   0x49, 0x4B, 0x49, 0x4A, 0x4A, 0x4A, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x2B, 0x29, 0x2B, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x30, 
   0x2F, 0x30, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 
   0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 
   0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 
   0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 
   0x3C, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 
   0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 
   0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 
   0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2B, 0x2D, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x27, 
   0x28, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x23, 0x25, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1D, 0x1B, 0x1B, 0x1B, 
   0x19, 0x1A, 0x19, 0x17, 0x19, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 
   0x17, 0x16, 0x17, 0x17, 0x17, 0x16, 0x18, 0x16, 0x18, 0x19, 0x18, 0x17, 0x19, 0x17, 0x18, 0x18, 
   0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x17, 0x15, 0x17, 0x17, 0x16, 0x17, 
   0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x19, 0x1A, 0x19, 0x1A, 0x1C, 0x1A, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 
   0x20, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x1E, 0x1D, 0x1E, 
   0x1C, 0x1C, 0x1C, 0x1A, 0x1C, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x1A, 0x18, 0x19, 
   0x1A, 0x19, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
   0x14, 0x15, 0x14, 0x15, 0x15, 0x15, 0x18, 0x17, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1B, 0x1A, 0x18, 0x19, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x17, 0x17, 
   0x17, 0x19, 0x19, 0x19, 0x1B, 0x1B, 0x1B, 0x1F, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x23, 0x23, 0x23, 
   0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x29, 0x28, 0x29, 
   0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x2E, 0x30, 0x2F, 0x2E, 0x2F, 
   0x2D, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 
   0x2A, 0x2A, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x24, 0x23, 
   0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 
   0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x30, 0x30, 0x30, 
   0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x36, 0x35, 0x36, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3B, 
   0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x40, 0x3E, 0x40, 0x40, 0x41, 0x40, 0x43, 0x44, 0x43, 0x45, 0x44, 
   0x45, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 
   0x25, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 
   0x2F, 0x30, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3A, 0x3C, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3C, 0x3F, 0x3D, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 
   0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x41, 0x40, 0x41, 0x42, 0x42, 0x42, 0x43, 
   0x42, 0x43, 0x42, 0x43, 0x42, 0x41, 0x40, 0x41, 0x3F, 0x3E, 0x3F, 0x3D, 0x3E, 0x3D, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x41, 0x40, 0x41, 0x3E, 
   0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 
   0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x36, 0x34, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x29, 
   0x29, 0x29, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1D, 0x1E, 0x1D, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 
   0x18, 0x1A, 0x18, 0x18, 0x19, 0x18, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 
   0x16, 0x15, 0x15, 0x16, 0x15, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x18, 0x18, 
   0x18, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x15, 0x17, 0x15, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 
   0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 
   0x1C, 0x1B, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 
   0x19, 0x19, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 
   0x16, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x12, 0x14, 0x12, 0x13, 0x14, 0x13, 
   0x14, 0x15, 0x14, 0x15, 0x17, 0x15, 0x18, 0x17, 0x18, 0x19, 0x1A, 0x19, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x19, 0x1A, 0x19, 0x18, 0x17, 0x18, 0x15, 0x17, 0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 
   0x16, 0x16, 0x17, 0x16, 0x1A, 0x19, 0x1A, 0x1B, 0x1C, 0x1B, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 
   0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x29, 
   0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 
   0x2B, 0x2E, 0x2B, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 
   0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x38, 0x36, 0x38, 0x38, 0x39, 0x38, 0x3A, 
   0x39, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3E, 0x3D, 0x40, 0x41, 0x40, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x44, 0x43, 0x47, 0x46, 0x47, 0x49, 0x48, 0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 0x26, 
   0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 
   0x37, 0x37, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x3B, 0x3C, 
   0x3B, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 
   0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x42, 0x43, 0x3F, 0x40, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3D, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3F, 
   0x3E, 0x3F, 0x3B, 0x3C, 0x3B, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x34, 
   0x33, 0x34, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 
   0x29, 0x2B, 0x28, 0x28, 0x28, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x23, 0x22, 0x23, 0x22, 0x21, 
   0x22, 0x20, 0x21, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1D, 0x1D, 0x1D, 0x1B, 0x1C, 0x1B, 
   0x1A, 0x1A, 0x1A, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x15, 0x16, 0x15, 0x15, 
   0x16, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 0x15, 0x16, 0x15, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 
   0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x1A, 0x19, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 
   0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 
   0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x18, 0x1A, 0x18, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x19, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 
   0x16, 0x16, 0x16, 0x16, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 
   0x14, 0x15, 0x14, 0x15, 0x17, 0x15, 0x17, 0x18, 0x17, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 
   0x1B, 0x1C, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 0x18, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x17, 0x16, 0x18, 0x19, 0x18, 0x1B, 0x1B, 0x1B, 0x1D, 0x1D, 0x1D, 0x21, 0x1F, 0x21, 
   0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x28, 0x26, 0x28, 0x28, 
   0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x2A, 
   0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x24, 
   0x25, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 
   0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2B, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x31, 0x2F, 0x31, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 0x38, 0x38, 0x38, 0x39, 
   0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3D, 0x3C, 0x40, 0x40, 0x40, 0x43, 0x42, 0x43, 0x42, 0x43, 
   0x42, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x48, 0x47, 0x48, 0x49, 0x47, 0x49, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x29, 0x2A, 0x29, 
   0x2A, 0x2B, 0x2A, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x39, 0x3A, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 
   0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x3F, 
   0x3F, 0x3F, 0x3B, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x33, 
   0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2B, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x23, 0x23, 0x23, 0x22, 0x21, 
   0x22, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1B, 0x1C, 0x1B, 0x1A, 0x1C, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x17, 0x18, 0x17, 0x16, 0x18, 0x16, 0x16, 0x17, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x15, 0x17, 
   0x15, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 0x16, 0x14, 0x16, 0x13, 0x14, 0x13, 0x14, 0x14, 0x14, 
   0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x1A, 0x1A, 0x1A, 0x1B, 
   0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x18, 0x1A, 0x18, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 
   0x19, 0x18, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 
   0x16, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x12, 0x13, 0x12, 0x13, 0x14, 0x13, 
   0x14, 0x15, 0x14, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1B, 0x1A, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16, 
   0x16, 0x18, 0x17, 0x18, 0x18, 0x18, 0x18, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1E, 0x1C, 
   0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 
   0x25, 0x24, 0x27, 0x25, 0x27, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x28, 
   0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 
   0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2D, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x39, 
   0x38, 0x39, 0x39, 0x3A, 0x39, 0x3D, 0x3B, 0x3D, 0x40, 0x3E, 0x40, 0x3F, 0x41, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x28, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 
   0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x31, 0x33, 
   0x31, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x38, 0x37, 
   0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3A, 0x3C, 0x3B, 0x3B, 0x3B, 
   0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x40, 0x42, 0x41, 0x42, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x42, 0x40, 0x42, 
   0x44, 0x42, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x42, 0x42, 0x42, 0x40, 
   0x40, 0x40, 0x3D, 0x3E, 0x3D, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x34, 
   0x36, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 
   0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2C, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x27, 0x28, 0x27, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x21, 
   0x21, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1C, 0x1B, 0x1B, 0x1B, 
   0x19, 0x1B, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x16, 0x18, 0x16, 0x18, 0x18, 0x18, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 
   0x16, 0x15, 0x15, 0x15, 0x15, 0x14, 0x15, 0x15, 0x13, 0x15, 0x12, 0x13, 0x12, 0x14, 0x13, 0x14, 
   0x15, 0x15, 0x15, 0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 
   0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1B, 
   0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 
   0x18, 0x19, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 
   0x16, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x14, 0x15, 0x13, 0x14, 0x13, 0x14, 0x14, 0x14, 
   0x14, 0x15, 0x14, 0x15, 0x15, 0x15, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 
   0x17, 0x17, 0x18, 0x17, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 
   0x1E, 0x1E, 0x1E, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 
   0x23, 0x23, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2D, 
   0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x34, 0x33, 0x34, 0x37, 0x36, 0x37, 0x37, 
   0x38, 0x37, 0x3B, 0x39, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 
   0x41, 0x45, 0x43, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x26, 0x27, 0x26, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x29, 
   0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 
   0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x34, 0x32, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x32, 0x34, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 
   0x35, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3C, 0x3A, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 
   0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 
   0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x3F, 0x3F, 0x3F, 0x3B, 0x3B, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x37, 0x35, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x37, 
   0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x27, 0x28, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 
   0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x16, 0x16, 0x16, 0x15, 0x15, 
   0x15, 0x12, 0x14, 0x12, 0x14, 0x13, 0x14, 0x12, 0x13, 0x12, 0x12, 0x13, 0x12, 0x14, 0x14, 0x14, 
   0x15, 0x15, 0x15, 0x15, 0x17, 0x15, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x19, 
   0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1D, 0x1C, 0x1D, 0x1A, 0x1B, 
   0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1C, 0x1B, 0x1C, 0x1C, 0x1B, 0x1C, 0x1A, 0x1B, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x17, 
   0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x15, 0x16, 0x15, 0x15, 0x17, 0x15, 0x16, 0x16, 
   0x16, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x15, 0x15, 0x15, 0x13, 0x14, 0x13, 0x13, 0x14, 0x13, 
   0x15, 0x15, 0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x19, 
   0x1A, 0x19, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x16, 0x18, 0x16, 0x17, 0x18, 
   0x17, 0x17, 0x18, 0x17, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x1A, 0x1A, 0x1A, 
   0x1C, 0x1D, 0x1C, 0x1F, 0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x23, 
   0x22, 0x23, 0x24, 0x25, 0x24, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x29, 0x2A, 0x29, 0x27, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x28, 0x27, 
   0x28, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2F, 0x2E, 0x31, 0x31, 0x31, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x40, 0x40, 0x40, 0x42, 0x41, 
   0x42, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 
   0x28, 0x29, 0x2B, 0x29, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x35, 0x35, 
   0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 
   0x3C, 0x3D, 0x3C, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x40, 
   0x41, 0x40, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x41, 0x40, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 
   0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x43, 0x42, 0x40, 
   0x42, 0x40, 0x40, 0x3F, 0x40, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x37, 0x39, 0x37, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x23, 0x22, 0x23, 0x21, 0x20, 
   0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1B, 0x1C, 0x1A, 0x1C, 0x1A, 0x1B, 0x1B, 0x1B, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x19, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x16, 0x18, 0x16, 0x16, 0x16, 0x16, 0x14, 0x15, 
   0x14, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 
   0x15, 0x15, 0x15, 0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x19, 0x19, 0x1B, 0x19, 0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 
   0x1A, 0x19, 0x1B, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x19, 0x1A, 0x19, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x17, 
   0x19, 0x17, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x17, 0x15, 0x17, 0x17, 
   0x17, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 0x15, 0x15, 0x15, 0x13, 0x14, 0x13, 0x13, 0x14, 0x13, 
   0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x19, 0x17, 0x1A, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x18, 0x19, 
   0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x19, 0x18, 
   0x1A, 0x1B, 0x1A, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x21, 
   0x21, 0x21, 0x23, 0x22, 0x23, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x28, 0x29, 0x28, 0x2A, 0x28, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x27, 0x29, 0x27, 0x29, 0x27, 0x29, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x25, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x27, 0x29, 0x27, 0x29, 0x28, 0x29, 0x29, 0x28, 
   0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 
   0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2E, 0x2D, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x31, 0x30, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x38, 
   0x37, 0x38, 0x39, 0x3A, 0x39, 0x39, 0x3B, 0x39, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x41, 0x40, 
   0x41, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 
   0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 
   0x33, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x35, 0x35, 
   0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 
   0x3C, 0x3C, 0x3C, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 
   0x41, 0x40, 0x3F, 0x41, 0x3F, 0x3F, 0x41, 0x3F, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x40, 0x3F, 0x40, 0x3D, 0x3C, 0x3D, 0x3C, 0x3A, 0x3C, 0x3A, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x19, 
   0x19, 0x19, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x16, 0x16, 0x16, 0x14, 0x15, 
   0x14, 0x13, 0x14, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x13, 0x14, 0x13, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x19, 
   0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1C, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 
   0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x19, 0x1A, 0x19, 
   0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
   0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x17, 
   0x15, 0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x14, 0x15, 0x14, 0x15, 0x15, 0x15, 
   0x15, 0x15, 0x15, 0x16, 0x15, 0x16, 0x15, 0x17, 0x15, 0x17, 0x17, 0x17, 0x16, 0x18, 0x16, 0x17, 
   0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19, 
   0x18, 0x18, 0x1A, 0x18, 0x19, 0x1A, 0x19, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x1A, 0x19, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1D, 0x1C, 0x1F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1F, 0x22, 
   0x20, 0x22, 0x24, 0x22, 0x24, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x29, 0x27, 0x29, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x29, 
   0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 
   0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2F, 0x2E, 0x30, 0x2E, 0x30, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x38, 
   0x37, 0x38, 0x39, 0x38, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 
   0x3F, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 
   0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x31, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 
   0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x31, 0x2F, 0x32, 0x32, 0x32, 0x34, 0x34, 
   0x34, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x39, 0x37, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x3D, 0x3C, 0x3D, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x37, 0x37, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2C, 0x2D, 0x29, 
   0x2A, 0x29, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x23, 0x25, 0x23, 0x23, 0x22, 0x23, 0x21, 0x20, 
   0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 
   0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x18, 
   0x1A, 0x18, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x15, 0x15, 
   0x15, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x10, 0x12, 0x10, 0x12, 0x12, 0x12, 0x11, 0x12, 0x11, 
   0x13, 0x13, 0x13, 0x15, 0x17, 0x15, 0x18, 0x18, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 
   0x1B, 0x1C, 0x1B, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 
   0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x19, 0x17, 0x17, 0x18, 0x17, 0x16, 
   0x18, 0x16, 0x17, 0x17, 0x17, 0x16, 0x15, 0x16, 0x14, 0x16, 0x14, 0x14, 0x16, 0x14, 0x15, 0x16, 
   0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 
   0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 
   0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x18, 0x17, 0x16, 0x18, 0x16, 0x19, 0x18, 0x19, 0x19, 0x1A, 
   0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 0x1E, 0x21, 0x20, 0x21, 0x22, 
   0x22, 0x22, 0x24, 0x23, 0x24, 0x24, 0x25, 0x24, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x26, 0x25, 0x26, 0x29, 0x27, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x28, 0x27, 0x2A, 0x28, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x38, 
   0x36, 0x38, 0x38, 0x38, 0x38, 0x38, 0x3A, 0x38, 0x3B, 0x3B, 0x3B, 0x3E, 0x3D, 0x3E, 0x3F, 0x40, 
   0x3F, 0x3F, 0x41, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 0x44, 0x43, 0x42, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x26, 0x27, 0x26, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 
   0x30, 0x31, 0x30, 0x30, 0x30, 0x32, 0x30, 0x32, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 
   0x33, 0x34, 0x34, 0x34, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x33, 0x34, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x2E, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 
   0x2A, 0x2A, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x26, 0x24, 0x26, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x20, 0x20, 0x20, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1B, 
   0x1A, 0x1B, 0x18, 0x19, 0x18, 0x16, 0x18, 0x16, 0x17, 0x18, 0x17, 0x16, 0x16, 0x16, 0x16, 0x15, 
   0x16, 0x13, 0x14, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 
   0x13, 0x15, 0x13, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x1B, 0x19, 0x1B, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1A, 0x1B, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 
   0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x18, 
   0x17, 0x18, 0x16, 0x17, 0x16, 0x15, 0x15, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x15, 
   0x15, 0x15, 0x15, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 
   0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x18, 0x16, 0x17, 0x19, 0x17, 0x18, 0x19, 0x18, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x18, 0x1A, 0x18, 0x18, 0x19, 0x18, 
   0x17, 0x19, 0x17, 0x19, 0x1A, 0x19, 0x1C, 0x1B, 0x1C, 0x1D, 0x1E, 0x1D, 0x21, 0x21, 0x21, 0x22, 
   0x23, 0x22, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x25, 
   0x24, 0x25, 0x26, 0x26, 0x26, 0x27, 0x28, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x35, 0x35, 0x38, 0x37, 0x38, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3C, 0x3E, 0x3F, 0x40, 
   0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 
   0x2B, 0x29, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x31, 0x32, 
   0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 
   0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x31, 
   0x32, 0x34, 0x33, 0x34, 0x36, 0x36, 0x36, 0x37, 0x39, 0x37, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3D, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 0x42, 
   0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3C, 0x3A, 0x3C, 0x39, 0x39, 
   0x39, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 
   0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 
   0x3A, 0x38, 0x3A, 0x38, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 
   0x2C, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 
   0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2C, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2A, 
   0x2A, 0x2A, 0x28, 0x28, 0x28, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x25, 0x23, 0x25, 0x21, 0x20, 
   0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1D, 0x1C, 0x1D, 0x19, 
   0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 
   0x14, 0x13, 0x15, 0x13, 0x14, 0x13, 0x14, 0x11, 0x12, 0x11, 0x12, 0x12, 0x12, 0x11, 0x12, 0x11, 
   0x12, 0x13, 0x12, 0x15, 0x16, 0x15, 0x17, 0x18, 0x17, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1B, 
   0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 
   0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x16, 
   0x17, 0x16, 0x15, 0x17, 0x15, 0x14, 0x16, 0x14, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x14, 0x15, 
   0x14, 0x15, 0x15, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x14, 0x16, 0x14, 
   0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x14, 0x16, 0x14, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x15, 
   0x16, 0x15, 0x15, 0x16, 0x15, 0x17, 0x17, 0x17, 0x16, 0x19, 0x16, 0x19, 0x19, 0x19, 0x19, 0x1A, 
   0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 
   0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1B, 0x1B, 0x1B, 0x1E, 0x1E, 0x1E, 0x21, 0x21, 0x21, 0x24, 
   0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 
   0x25, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x25, 
   0x25, 0x25, 0x26, 0x26, 0x26, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 
   0x27, 0x29, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x36, 0x37, 0x36, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x41, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x00, 0x00, 
};

static RESOURCEDATA g_rd_consolbk(TEXT(""), TEXT("consolbk.bmp"), g_consolbk, sizeof(g_consolbk));

extern "C" LPVOID d3dlocus_consolbk = (LPVOID)&g_rd_consolbk;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\client.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    client.cpp

Author:

    Matt Bronder

Description:

    Client code for remote reference verification.

*******************************************************************************/

#include "d3dlocus.h"
#include "transprt.h"

#define SIG_MACRO(f,s) s,
LPCSTR CClient::m_szSigs[] = {
#include "sigs.h"
};

//******************************************************************************
CClient::CClient() {

    m_sEnumerate = INVALID_SOCKET;
    m_sListen = INVALID_SOCKET;
    m_sServer = INVALID_SOCKET;
    m_pPacket = NULL;
#ifdef UNDER_XBOX
    m_bXnetStartup = FALSE;
#endif // UNDER_XBOX
    m_bWSAStartup = FALSE;
    m_bMCallsEnabled = TRUE;
}

//******************************************************************************
CClient::~CClient() {

    // Close the broadcast socket
    if (m_sEnumerate != INVALID_SOCKET) {
        shutdown(m_sEnumerate, SD_BOTH);
        closesocket(m_sEnumerate);
        m_sEnumerate = INVALID_SOCKET;
    }

    // Close the listen socket
    if (m_sListen != INVALID_SOCKET) {
        shutdown(m_sListen, SD_BOTH);
        closesocket(m_sListen);
        m_sListen = INVALID_SOCKET;
    }

    // Close the server socket
    if (m_sServer != INVALID_SOCKET) {
        shutdown(m_sServer, SD_BOTH);
        closesocket(m_sServer);
        m_sServer = INVALID_SOCKET;
    }

    // Delete the packet
    if (m_pPacket) {
        delete [] m_pPacket;
        m_pPacket = NULL;
    }

    if (m_bWSAStartup) {
        WSACleanup();
    }

#ifdef UNDER_XBOX
    if (m_bXnetStartup) {
        if (GetStartupContext() & TSTART_HARNESS) {
            XNetRelease();
        }
        else {
            XNetCleanup();
        }
    }
#endif // UNDER_XBOX
}

//******************************************************************************
BOOL CClient::Create() {

    WSADATA         wsa;
    SOCKADDR_IN     addr;
    int             nSize;
    DWORD           dwRet;
    BOOL            bBroadcast = TRUE;
    BOOL            bKeepAlive = TRUE;
#ifndef UNDER_XBOX
    ULONG           uNonBlocking = 0;
    WSAEVENT        hAcceptEvent;
#else
    fd_set          readfds;
    TIMEVAL         timeout;
#endif // UNDER_XBOX

#ifdef UNDER_XBOX
    if (GetStartupContext() & TSTART_HARNESS) {
        XNetAddRef();
    }
    else {
        XNetStartupParams xnsp;
        memset(&xnsp, 0, sizeof(XNetStartupParams));
        xnsp.cfgSizeOfStruct = sizeof(XNetStartupParams);
        xnsp.cfgFlags = XNET_STARTUP_BYPASS_SECURITY;
        XNetStartup(&xnsp);
    }
    m_bXnetStartup = TRUE;
#endif // UNDER_XBOX

    // Perform socket initilization for version 2 of the socket API's
    if (WSAStartup(MAKEWORD(2, 2), &wsa)) {
        DebugString(TEXT("WSAStartup() failed [%d]"), WSAGetLastError());
        return FALSE;
    }
    m_bWSAStartup = TRUE;

    // Get the client machine address and initialize the enumeration packet with
    // address and port information (we could simply get the necessary information
    // on the server side from the recvfrom call, but this gives us the option of
    // redirecting the server in the future)
    if (gethostaddr(&(m_pkEnum.s_addrClient))) {
        return FALSE;
    }
    m_pkEnum.uPort = PORT_SERVICE;

    // Create a datagram socket to broadcast enumeration requests
    m_sEnumerate = socket(AF_INET, SOCK_DGRAM, 0);
    if (m_sEnumerate == INVALID_SOCKET) {
        DebugString(TEXT("socket() failed [%d]"), WSAGetLastError());
        return FALSE;
    }

    // Enable broadcasting in the socket
    if (setsockopt(m_sEnumerate, SOL_SOCKET, SO_BROADCAST, (LPSTR)&bBroadcast, 
                                            sizeof(BOOL)) == SOCKET_ERROR) {
        DebugString(TEXT("setsockopt() failed [%d]"), WSAGetLastError());
        return FALSE;
    }

    // Bind the socket to the broadcast port
    ZeroMemory(&addr, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_port = htons(PORT_ENUMERATE);
    addr.sin_addr.s_addr = htonl(INADDR_ANY);

    if (bind(m_sEnumerate, (LPSOCKADDR)&addr, sizeof(addr)) == SOCKET_ERROR) {
        DebugString(TEXT("bind() failed [%d]"), WSAGetLastError());
        return FALSE;
    }

    // Create a listen socket to handle enumeration responses
    m_sListen = socket(AF_INET, SOCK_STREAM, 0);
    if (m_sListen == INVALID_SOCKET) {
        DebugString(TEXT("socket() failed [%d]"), WSAGetLastError());
        return FALSE;        
    }

    // Bind the socket to the service port
    ZeroMemory(&addr, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_port = htons(PORT_SERVICE);
    addr.sin_addr.s_addr = htonl(INADDR_ANY);

    if (bind(m_sListen, (LPSOCKADDR)&addr, sizeof(addr)) == SOCKET_ERROR) {
        DebugString(TEXT("bind() failed [%d]"), WSAGetLastError());
        return FALSE;
    }

    // Allow the listen socket to handle only 1 pending connection
    if (listen(m_sListen, 1) == SOCKET_ERROR) {
        DebugString(TEXT("listen() failed [%d]"), WSAGetLastError());
        return FALSE;
    }

#ifndef UNDER_XBOX

    // Create an event to signal an accepted connection
    hAcceptEvent = WSACreateEvent();
    if (hAcceptEvent == WSA_INVALID_EVENT) {
        return FALSE;
    }

    // Switch to asynchronous mode
    if (WSAEventSelect(m_sListen, hAcceptEvent, FD_ACCEPT) == SOCKET_ERROR) {
        DebugString(TEXT("WSAEventSelect() failed [%d]"), WSAGetLastError());
        return FALSE;
    }

#endif // !UNDER_XBOX

    // Broadcast an enumeration request to the network
    ZeroMemory(&addr, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_port = htons(PORT_BROADCAST);
    addr.sin_addr.s_addr = inet_addr("255.255.255.255");

    if (sendto(m_sEnumerate, (LPCSTR)&m_pkEnum, sizeof(m_pkEnum), 0, 
        (LPSOCKADDR)&addr, sizeof(SOCKADDR_IN)) == SOCKET_ERROR) 
    {
        DebugString(TEXT("sendto() failed [%d]"), WSAGetLastError());
        return FALSE;
    }

    ZeroMemory(&addr, sizeof(SOCKADDR_IN));
    nSize = sizeof(SOCKADDR_IN);

#ifndef UNDER_XBOX

    // Wait for the server to respond to our enumeration request and connect
    m_sServer = accept(m_sListen, (LPSOCKADDR)&addr, &nSize);
    if (m_sServer == INVALID_SOCKET) {

        if (WSAGetLastError() != WSAEWOULDBLOCK) {
            WSACloseEvent(hAcceptEvent);
            return FALSE;
        }
        else {

            dwRet = WSAWaitForMultipleEvents(1, &hAcceptEvent, FALSE, 500, FALSE);
            if (dwRet != 0) {
                if (dwRet == WSA_WAIT_FAILED) {
                    DebugString(TEXT("WSAWaitForMultipleEvents() failed [%d]"), WSAGetLastError());
                }
                else if (dwRet == WSA_WAIT_TIMEOUT) {
                    Log(LOG_COMMENT, TEXT("Unable to connect to reference verification server.  Rendered images will not be verified."));
                }
                WSACloseEvent(hAcceptEvent);
                return FALSE;
            }

            m_sServer = accept(m_sListen, (LPSOCKADDR)&addr, &nSize);
            if (m_sServer == INVALID_SOCKET) {
                WSACloseEvent(hAcceptEvent);
                return FALSE;
            }
        }
    }

    // Switch back to synchronous mode
    if (WSAEventSelect(m_sServer, hAcceptEvent, 0) == SOCKET_ERROR) {
        DebugString(TEXT("WSAEventSelect() failed [%d]"), WSAGetLastError());
        WSACloseEvent(hAcceptEvent);
        return FALSE;
    }

    if (ioctlsocket(m_sServer, FIONBIO, &uNonBlocking) == SOCKET_ERROR) {
        DebugString(TEXT("ioctsocket() failed [%d]"), WSAGetLastError());
    }

    WSACloseEvent(hAcceptEvent);

    // Enable keep-alive on the socket
    if (setsockopt(m_sServer, SOL_SOCKET, SO_KEEPALIVE, (LPSTR)&bKeepAlive, 
                                            sizeof(BOOL)) == SOCKET_ERROR) {
        DebugString(TEXT("setsockopt() failed [%d]"), WSAGetLastError());
    }

#else

    FD_ZERO(&readfds);
    FD_SET(m_sListen, &readfds);

    timeout.tv_sec = 0;
    timeout.tv_usec = 500000;

    select(0, &readfds, NULL, NULL, &timeout);

    if (!FD_ISSET(m_sListen, &readfds)) {
        Log(LOG_COMMENT, TEXT("Unable to connect to reference verification server.  Rendered images will not be verified."));
        return FALSE;
    }

    m_sServer = accept(m_sListen, (LPSOCKADDR)&addr, &nSize);
    if (m_sServer == INVALID_SOCKET) {
        return FALSE;
    }

#endif // UNDER_XBOX

    return TRUE;
}

//******************************************************************************
void CClient::Disconnect() {

    Log(LOG_WARN, TEXT("Disconnecting from the reference machine.  Subsequent frames will not be verified."));

    // Close the server socket
    if (m_sServer != INVALID_SOCKET) {
        shutdown(m_sServer, SD_BOTH);
        closesocket(m_sServer);
        m_sServer = INVALID_SOCKET;
    }
}

//******************************************************************************
BOOL CClient::IsConnected() {

    return (m_sServer != INVALID_SOCKET);
}

//******************************************************************************
void CClient::EnableMethodCalls(BOOL bEnable) {

    m_bMCallsEnabled = bEnable;
}

//******************************************************************************
BOOL CClient::MethodCallsEnabled() {

    return m_bMCallsEnabled;
}

//***********************************************************************************
BOOL CClient::CheckDeviceAffinity(CDirect3D8* pDirect3D, BOOL* bEquivalent) {

    PACKET_CS_CHECKDEVICEAFFINITY pkCheckAffinity;

    // Verify the connection
    if (m_sServer == INVALID_SOCKET) {
        return FALSE;
    }

    pkCheckAffinity.pvDirect3D = pDirect3D;

    if (!SendPacket(&pkCheckAffinity)) {
        Disconnect();
        return FALSE;
    }

    if (!RecvPacket()) {
        Disconnect();
        return FALSE;
    }

    *bEquivalent = (m_pPacket->packetID == PACKETID_SC_DEVICEAFFINITY) && ((PPACKET_SC_DEVICEAFFINITY)m_pPacket)->bEquivalent;

    return TRUE;
}

//***********************************************************************************
BOOL CClient::CallDirect3DCreate8(LPVOID pvDirect3D) {

    PACKET_CS_DIRECT3DCREATE8 pkCreate;

    // Verify the connection
    if (m_sServer == INVALID_SOCKET) {
        return FALSE;
    }

    pkCreate.pvDirect3D = pvDirect3D;
    if (!SendPacket(&pkCreate)) {
        Disconnect();
        return FALSE;
    }

    if (!RecvPacket()) {
        Disconnect();
        return FALSE;
    }

    if (m_pPacket->packetID != PACKETID_SC_SUCCESS) {
        Disconnect();
        return FALSE;
    }

    return TRUE;
}

//***********************************************************************************
BOOL CClient::CallMethod(METHODID methodID, LPVOID pvObject, ...) {

    PPACKET_CS_CALLMETHOD   ppkCallMethod;
    va_list                 vl;
    LPCSTR                  pszSigs;
    LPDWORD                 pdwArg;
    LPBYTE                  pData;
    LPVOID                  pvData;
    DWORD                   dwArg;
    DWORD                   dwArgSize, dwDataSize;
    LPDWORD                 pdwOut;

    // Return if method calls have been disabled
    if (!m_bMCallsEnabled) {
        return FALSE;
    }

    // Verify the connection
    if (m_sServer == INVALID_SOCKET) {
        return FALSE;
    }

    // Determine the size of the packet
    dwArgSize = 0;
    dwDataSize = 0;

    va_start(vl, pvObject);

    for (pszSigs = m_szSigs[methodID]; *pszSigs; pszSigs += 2) {

        va_arg(vl, DWORD);

        if (*pszSigs != __OUT) {

            dwArgSize += 4;

            if (*pszSigs == __PIN) {
                dwDataSize += va_arg(vl, DWORD);
                // ##TODO: Pad data so each data segment begins on a DWORD boundary
            }
            else if (*pszSigs == __POUT) {
                va_arg(vl, DWORD);
            }
        }
    }

    // Allocate memory for the packet
    ppkCallMethod = (PPACKET_CS_CALLMETHOD)MemAlloc32(sizeof(PACKET_CS_CALLMETHOD) + dwArgSize + dwDataSize - sizeof(DWORD));
    if (!ppkCallMethod) {
        DebugString(TEXT("Failed to allocate memory for PACKET_CS_CALLMETHOD for method %d"), methodID); 
        Disconnect();
        return FALSE;
    }

    // Initialize the packet header
    ppkCallMethod->dwSize = sizeof(PACKET_CS_CALLMETHOD) + dwArgSize + dwDataSize - sizeof(DWORD);
    ppkCallMethod->packetID = methodID;
    ppkCallMethod->pvObject = pvObject;

    // Fill in the method arguments
    pdwArg = ppkCallMethod->pdwArguments;//(LPDWORD)&(ppkCallMethod->pvArguments);
    pData = (LPBYTE)pdwArg + dwArgSize;

    va_start(vl, pvObject);

    for (pszSigs = m_szSigs[methodID]; *pszSigs; pszSigs += 2) {

        switch (*pszSigs) {
            case __OUT:
                va_arg(vl, DWORD);
                break;
            case __PIN:
                pvData = (LPVOID)va_arg(vl, DWORD);
                dwDataSize = va_arg(vl, DWORD);
                if (pvData) {
                    memcpy(pData, pvData, dwDataSize);
                    *pdwArg++ = (DWORD)pData - (DWORD)pdwArg;
                    pData += dwDataSize;
                }
                else {
                    *pdwArg++ = 0;
                }
                break;
            case __POUT:
                if (va_arg(vl, DWORD)) {
                    *pdwArg++ = va_arg(vl, DWORD);
                }
                else {
                    va_arg(vl, DWORD);
                    *pdwArg++ = 0;
                }
                break;
            case __BI:
            case __ADD:
                pdwOut = (LPDWORD)va_arg(vl, DWORD);
                if (pdwOut) {
                    *pdwArg++ = *pdwOut;
                }
                else {
                    *pdwArg++ = 0;
                }
                break;
            case __IN:
            case __DEL:
                *pdwArg++ = va_arg(vl, DWORD);
                break;
        }
    }

    va_end(vl);

/*
{
UINT i;
LPDWORD pdwArgs = (LPDWORD)&ppkCallMethod->pvArguments;
DebugString(TEXT("Args for packet %d:"), ppkCallMethod->packetID);
for (i = 0; i < dwArgSize / 4; i++) {
DebugString(TEXT("0x%X"), *pdwArgs++);
}
}
*/

    // Perform a remote call of the method
    if (!SendPacket(ppkCallMethod)) {
        DebugString(TEXT("Failed to send the call method packet for method %d"), methodID);
        MemFree32(ppkCallMethod);
        Disconnect();
        return FALSE;
    }

    MemFree32(ppkCallMethod);

    // Obtain the method results
    if (!RecvPacket()) {
        DebugString(TEXT("Failed to receive the result packet for method call %d"), methodID);
        Disconnect();
        return FALSE;
    }

    // Verify the method was actually executed (even if it failed)
    if (m_pPacket->packetID != (DWORD)methodID) {
        DebugString(TEXT("The server returned a fault when attempting to call method %d"), methodID);
        Disconnect();
        return FALSE;
    }

    // Copy the returned data to the locations passed in
    pdwArg = (LPDWORD)((LPBYTE)m_pPacket + sizeof(PACKET));

    va_start(vl, pvObject);

    for (pszSigs = m_szSigs[methodID]; *pszSigs; pszSigs += 2) {

        if (*pszSigs == __POUT || *pszSigs == __OUT || *pszSigs == __ADD || *pszSigs == __BI) {

            pdwOut = (LPDWORD)va_arg(vl, DWORD);

            if (*pszSigs == __POUT) {
                dwDataSize = va_arg(vl, DWORD);
                if (pdwOut) {
                    memcpy(pdwOut, (LPBYTE)pdwArg + *pdwArg, dwDataSize);
                }
            }
            else {
                if (pdwOut) {
                    *pdwOut = *pdwArg;
                }
            }

            pdwArg++;
        }
        else {
            va_arg(vl, DWORD);
            if (*pszSigs == __PIN) {
                va_arg(vl, DWORD);
            }
        }
    }

    va_end(vl);

    return TRUE;
}

//***********************************************************************************
BOOL CClient::GetRefFrameCRC32(CDevice8* pDevice, LPDWORD pdwCRC) {

    PACKET_CS_GETREFFRAMECRC32 pkGetCRC;

    // Verify the connection
    if (m_sServer == INVALID_SOCKET) {
        return FALSE;
    }

    pkGetCRC.pvDevice = pDevice;

    if (!SendPacket(&pkGetCRC)) {
        Disconnect();
        return FALSE;
    }

    if (!RecvPacket()) {
        Disconnect();
        return FALSE;
    }

    if (m_pPacket->packetID != PACKETID_SC_REFFRAMECRC32) {
        Disconnect();
        return FALSE;
    }

    *pdwCRC = ((PPACKET_SC_REFFRAMECRC32)m_pPacket)->dwRefCRC;

    return TRUE;
}

//***********************************************************************************
BOOL CClient::GetRefFrame(CDevice8* pDevice, DWORD dwWidth, DWORD dwHeight, DWORD dwPitch, LPVOID pvBits) {

    PACKET_CS_GETREFFRAME   pkGetRef;
    PACKET_SC_REFFRAME      pkRef;
    UINT                    i;

    // Verify the connection
    if (m_sServer == INVALID_SOCKET) {
        return FALSE;
    }

    pkGetRef.pvDevice = pDevice;

    if (!SendPacket(&pkGetRef)) {
        Disconnect();
        return FALSE;
    }

    // Get the packet header
    if (!Recv(&pkRef, sizeof(PACKET)) || pkRef.packetID != PACKETID_SC_REFFRAME ||
        pkRef.dwSize != sizeof(PACKET) + dwWidth * dwHeight * 4)
    {
        Disconnect();
        return FALSE;
    }

    // Get the reference frame buffer contents
    for (i = 0; i < dwHeight; i++) {
        if (!Recv((LPBYTE)pvBits + i * dwPitch, dwWidth * 4)) {
            Disconnect();
            return FALSE;
        }
    }

    return TRUE;
}

//***********************************************************************************
int CClient::Send(LPVOID pv, int nSize, SOCKET s) {

    int size, total = 0;

    if (s == INVALID_SOCKET) {
        s = m_sServer;
    }

    do {
        size = send(s, (char*)pv + total, nSize - total, 0);
        if (size == SOCKET_ERROR) {
            return 0;
        }
        total += size;

    } while (total < nSize);

    return total;
}

//***********************************************************************************
int CClient::SendPacket(PPACKET ppk, SOCKET s) {

    return Send(ppk, ppk->dwSize, s);
}

//***********************************************************************************
int CClient::Recv(LPVOID pv, int nSize, SOCKET s) {

    int size, total = 0;

    if (s == INVALID_SOCKET) {
        s = m_sServer;
    }

    do {
        size = recv(s, (char*)pv + total, nSize - total, 0);
        if (!size || size == SOCKET_ERROR) {
            return 0;
        }
        total += size;

    } while (total < nSize);

    return total;
}

//***********************************************************************************
BOOL CClient::RecvPacket(PPACKET ppk, SOCKET s) {

    DWORD   dwSize;

    if (!ppk) {

        // If a packet has already been allocated, free it
        if (m_pPacket) {
            delete [] m_pPacket;
            m_pPacket = NULL;
        }

        // Get the size of the packet
        if (!Recv((LPVOID)&dwSize, sizeof(DWORD))) {
            return FALSE;
        }

        m_pPacket = (PPACKET)new BYTE[dwSize];
        if (!m_pPacket) {
            return FALSE;
        }
        m_pPacket->dwSize = dwSize;

        // Retrieve the rest of the packet
        if (!Recv((LPVOID)((LPBYTE)m_pPacket + sizeof(DWORD)), dwSize - sizeof(DWORD))) {
            return FALSE;
        }
    }
    else {
        // Retrieve the packet
        if (!Recv((LPVOID)ppk, ppk->dwSize, s)) {
            return FALSE;
        }
    }

    return TRUE;
}

//******************************************************************************
int gethostaddr(IN_ADDR* psin) {

#ifndef UNDER_XBOX
    // Return the first IP address of the host
    char            hostname[256];
    PHOSTENT        phostent;
#else
    XNADDR          XnAddr;
    DWORD           dwStart;
#endif

    // Parameter validation
    if (!psin) {
        WSASetLastError(WSAEINVAL);
        return SOCKET_ERROR;
    }

#ifndef UNDER_XBOX
    // Get the name of the host
    if (gethostname(hostname, sizeof(hostname))) {
        return SOCKET_ERROR;
    }

    // Use the name to get the host information
    phostent = gethostbyname(hostname);
    if (!phostent) {
        return SOCKET_ERROR;
    }

    // Get a string of the IP address from the host information
    psin->S_un.S_addr = *((ULONG*)phostent->h_addr_list[0]);
#else
    // Get the host address
    dwStart = GetTickCount();
    do {
        if (GetTickCount() > dwStart + 5000) {
            return SOCKET_ERROR;
        }
    } while (XNetGetTitleXnAddr(&XnAddr) == 0);

    memcpy(psin, &XnAddr.ina.s_addr, sizeof(*psin));
#endif

    return 0;
}

//******************************************************************************
int gethostaddr(char* addr, int addrlen) {

    // Return the first IP address of the host
    IN_ADDR         sin;
    int             ret = 0;

    // Parameter validation
    if (!addr || addrlen <= 0) {
        WSASetLastError(WSAEINVAL);
        return SOCKET_ERROR;
    }

    // Get the address of the host
    ret = gethostaddr(&sin);

    if (!ret) {

        // Verify the buffer is large enough for the address
        if (16 > (UINT)addrlen) {
            DebugString(TEXT("The address buffer is %d bytes.  It needs to be %d ")
                     TEXT("bytes\n"), addrlen, 16);
            WSASetLastError(WSAEFAULT);
            return SOCKET_ERROR;
        }

        // Copy the address string into the buffer
        sprintf(addr, "%u.%u.%u.%u", sin.S_un.S_un_b.s_b1, sin.S_un.S_un_b.s_b2, sin.S_un.S_un_b.s_b3, sin.S_un.S_un_b.s_b4);
    }

    return ret;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\conio.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    conio.cpp

Author:

    Matt Bronder

Description:

    Console and text output functions.

*******************************************************************************/

#define DXCONIO_NO_OVERRIDES

#include "d3dlocus.h"
#include "fontmap.h"
#include "conio.h"
#ifdef UNDER_XBOX
#include <xboxverp.h>
#endif // UNDER_XBOX

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define TAB_LENGTH          8

#define BORDER_LEFT         10.0f
#define BORDER_RIGHT        10.0f
#define BORDER_TOP          10.0f
#define BORDER_BOTTOM       10.0f

#define SHADOW_OFFSET_X     4.0f
#define SHADOW_OFFSET_Y     4.0f
#define SHADOW_INTENSITY    191.0f

#define BACKTEX_WIDTH       256
#define BACKTEX_HEIGHT      256

#define MAX_TEXTOUT_LENGTH  256

#define POS_BLANK           -3.402823466e+36F

//******************************************************************************
// Globals
//******************************************************************************

CDevice8*                   g_pDevice = NULL;

// Console text output buffer
LPSTR                       g_pchOut = NULL;
UINT                        g_uOutSize = 4096;
UINT                        g_uOutHead = 0;
UINT                        g_uOutTail = 0;
UINT                        g_uOutWidth = 80;

// Console text vertex layout
UINT                        g_uTextSize = 0;
UINT                        g_uTextHead = 0;
UINT                        g_uTextTail = 0;
UINT                        g_uTextLine = 0;
UINT                        g_uTextHeight = 1;
UINT                        g_uTextCol = 0;
UINT                        g_uTextCursor = 0;
float                       g_fTextX;

// Visible console text vertices
UINT                        g_uVStart1;
UINT                        g_uVStart2;
UINT                        g_uVCount1;
UINT                        g_uVCount2;

// xTextOut vertices
PTLVERTEX                   g_prTextOut = NULL;
LPWORD                      g_pwTextOut = NULL;

// Console vertices
CVertexBuffer8*             g_pd3drPosition = NULL;
UINT                        g_uVBPositionSize;
CVertexBuffer8*             g_pd3drTexCoord = NULL;
UINT                        g_uVBTexCoordSize;
CIndexBuffer8*              g_pd3diText = NULL;
UINT                        g_uIBTextSize;
// ##DELETE
CVertexBuffer8*             g_pd3drDeleteMe = NULL;
UINT                        g_uVBDeleteMeSize;
// ##END DELETE

// Console background
CVertexBuffer8*             g_pd3drBack = NULL;
CTexture8*                  g_pd3dtBackBase = NULL;
CTexture8*                  g_pd3dtBackBump = NULL;
CTexture8*                  g_pd3dtBackEnv = NULL;
CPerlinNoise2D*             g_pNoise = NULL;

// Console state
float                       g_fCharWidth = 8.0f;
float                       g_fCharHeight = 15.0f; //(CHAR_ASPECT * g_fCharWidth);
DWORD                       g_dwTextColor = 0xFFFFFFFF;
//DWORD                       g_dwBackgroundColor = 0xBFFFFF00;
DWORD                       g_dwBackgroundColor = 0xBF7F7F00;
//DWORD                       g_dwBackgroundColor = 0xBF44FF44;
TCHAR                       g_szBackImage[MAX_PATH] = {0};
BOOL                        g_bUseBackground = TRUE;
BOOL                        g_bInScene = FALSE;
BOOL                        g_bDoConsoleUpdate = TRUE;

// Device information
float                       g_fTargetWidth;
float                       g_fTargetHeight;
ADAPTERDESC                 g_adpd;
DEVICEDESC                  g_devd;
DISPLAYMODE                 g_dm;

// Console scrolling
D3DVECTOR                   g_vTranslate;

float                       g_fMaxRowScroll = 0.0f;
float                       g_fMaxColScroll = 0.0f;
float                       g_fCurrentRow = 0.0f;
float                       g_fCurrentCol = 0.0f;

// Serial access to dxconio functions
CRITICAL_SECTION            g_csConsoleLock;

BOOL                        g_bInitialized = FALSE;

//******************************************************************************
// Function prototypes
//******************************************************************************

void                        PutStringA(LPCSTR pszString);
void                        PutStringW(LPCWSTR pszString);

BOOL                        InitConsole();
void                        EffaceConsole();

static void                 UpdateConsole(UINT uStart);
static void                 RefreshConsole();
static void                 DrawConsole();

static BOOL                 UpdateVisibility();

static BOOL                 CreateGeometry(UINT uNumChars);
static void                 ReleaseGeometry();

static BOOL                 SetBackgroundImage(LPCTSTR pszImage);

static void                 UpdateConsoleScrollY();

static BOOL                 BeginConsoleScene();
static void                 EndConsoleScene();
static void                 DrawConsoleBackground();
static void                 DrawConsoleText();

static void                 DrawTextQuads(LPCSTR szText, UINT uCount, float fX, 
                                float fY, float fHeight, float fWidth, 
                                D3DCOLOR c, float fLeftMargin);

BOOL                        ValidateDisplay(LPDIRECT3D8 pd3d, 
                                    D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm);

inline void                 LockConsole() { EnterCriticalSection(&g_csConsoleLock); }
inline void                 UnlockConsole() { LeaveCriticalSection(&g_csConsoleLock); }

//******************************************************************************
// Startup and shutdown routines
//******************************************************************************

#ifdef UNDER_XBOX

#ifdef __cplusplus
extern "C" {
#endif

// Initialize startup and shutdown routines with the CRT
#pragma data_seg(".CRT$XIU")
PROC dxconio_startup = (PROC)LoadConsole;
#pragma data_seg()

#pragma data_seg(".CRT$XTU")
PROC dxconio_shutdown = (PROC)UnloadConsole;
#pragma data_seg()

#ifdef __cplusplus
}
#endif

#endif // UNDER_XBOX

//******************************************************************************
// Console management functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     LoadConsole
//
// Description:
//
//     Create a heap for the console and allocate a buffer to contain the
//     output stream.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     0 on success, 1 on failure.
//
//******************************************************************************
BOOL __cdecl LoadConsole() {

#ifndef UNDER_XBOX
    OSVERSIONINFO osvi;
#else
//    extern PULONG NtBuildVersion
#endif

    // Initialize the critical section
    InitializeCriticalSection(&g_csConsoleLock);

    g_uOutHead = 0;
    g_uOutTail = 0;

    // Allocate a buffer for the output stream
    g_pchOut = (LPSTR)HeapAlloc(GetProcessHeap(), 0, g_uOutSize);
    if (!g_pchOut) {
        UnloadConsole();
        return 1;
    }

#ifndef UNDER_XBOX
    memset(&osvi, 0, sizeof(OSVERSIONINFO));
    osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
    GetVersionEx(&osvi);

    xprintf("Microsoft Windows 2000 [Version %d.%02d.%04d]\n", 
            osvi.dwMajorVersion, osvi.dwMinorVersion, osvi.dwBuildNumber);
    xputs("(C) Copyright 1985-1999 Microsoft Corp.\n");
#else
//    xprintf("Microsoft Xbox OS [Version %08x]\n", *NtBuildVersion);
    xprintf("Microsoft Xbox OS [Version %02d.%02d.%04d.%02d]\n", VER_PRODUCTVERSION);
    xputs("(C) Copyright 1999-2000 Microsoft Corp.\n");
#endif // UNDER_XBOX

    return 0;
}

//******************************************************************************
//
// Function:
//
//     UnloadConsole
//
// Description:
//
//     Free the console output buffer and release the heap.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void __cdecl UnloadConsole() {

    if (g_pchOut) {
        HeapFree(GetProcessHeap(), 0, g_pchOut);
        g_pchOut = NULL;
    }

    // Release the critical section
    DeleteCriticalSection(&g_csConsoleLock);
}

//******************************************************************************
//
// Function:
//
//     xCreateConsole
//
// Description:
//
//     Create all Direct3D and related objects necessary for rendering the
//     console output stream to the screen.
//
// Arguments:
//
//     LPVOID pvDevice                - Pointer to the device object
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xCreateConsole(LPVOID pvDevice) {

    USHORT i, j, k;

    if (!pvDevice) {
        return FALSE;
    }

    LockConsole();

    xReleaseConsole();

    g_pDevice = (CDevice8*)pvDevice;

    // Create a perlin noise object
    g_pNoise = new CPerlinNoise2D(0.5f, 5, GetTickCount(), INTERPOLATE_COSINE, FALSE, FALSE);
    if (!g_pNoise) {
        UnlockConsole();
        return FALSE;
    }

    g_uTextHead = 0;
    g_uTextTail = 0;
    g_uTextLine = 0;
    g_uTextHeight = 1;
    g_uTextCol = 0;
    g_uTextCursor = 0;
    g_fTextX = 0.0f;

    // Initialize the device objects for the console
    if (!InitConsole()) {
        xReleaseConsole();
        UnlockConsole();
        return FALSE;
    }

    // Allocate memory for the xTextOut vertices
    g_prTextOut = (PTLVERTEX)MemAlloc32(MAX_TEXTOUT_LENGTH * 2 * 4 * sizeof(TLVERTEX));
    if (!g_prTextOut) {
        xReleaseConsole();
        UnlockConsole();
        return FALSE;
    }
    memset(g_prTextOut, 0, MAX_TEXTOUT_LENGTH * 2 * 4 * sizeof(TLVERTEX));
    for (i = 0; i < MAX_TEXTOUT_LENGTH * 2 * 4; i++) {
        g_prTextOut[i].vPosition.z = 0.00001f;
        g_prTextOut[i].fRHW = 100000.0f;
    }

    // Allocate memory for the xTextOut indices
    g_pwTextOut = (LPWORD)MemAlloc32(MAX_TEXTOUT_LENGTH * 6 * sizeof(WORD));
    if (!g_pwTextOut) {
        xReleaseConsole();
        UnlockConsole();
        return FALSE;
    }

    // Initialize the xTextOut indices
    for (i = 0, j = 0, k = 0; i < MAX_TEXTOUT_LENGTH; i++, j += 4, k += 6) {
        g_pwTextOut[k]   = j;
        g_pwTextOut[k+1] = j + 2;
        g_pwTextOut[k+2] = j + 1;
        g_pwTextOut[k+3] = j + 1;
        g_pwTextOut[k+4] = j + 2;
        g_pwTextOut[k+5] = j + 3;
    }

    g_bInitialized = TRUE;

    RefreshConsole();

    UnlockConsole();

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     xReleaseConsole
//
// Description:
//
//     Release all Direct3D and related objects created by the console.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xReleaseConsole() {

    if (g_bInitialized) {

        LockConsole();

        EffaceConsole();

        if (g_pNoise) {
            delete g_pNoise;
            g_pNoise = NULL;
        }

        g_bInitialized = FALSE;

        UnlockConsole();
    }
}

//******************************************************************************
//
// Function:
//
//     xClearScreen
//
// Description:
//
//     Clear the console output stream buffer of its contents.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xClearScreen(void) {

    LockConsole();

    g_uOutHead = 0;
    g_uOutTail = 0;

    if (g_bInitialized) {

        g_fCurrentRow = 0.0f;
        g_fCurrentCol = 0.0f;

        RefreshConsole();
    }

    UnlockConsole();
}

//******************************************************************************
//
// Function:
//
//     xSetCharSize
//
// Description:
//
//     Set the width and height of the characters used in outputting the console
//     text.
//
// Arguments:
//
//     float fWidth             - Width of a console character in pixels
//
//     float fHeight            - Height of a console character in pixels
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xSetCharSize(float fWidth, float fHeight) {

    LockConsole();

    g_fCharWidth = fWidth;
    g_fCharHeight = fHeight;
    if (g_bInitialized) {
        xResetConsole();
    }

    UnlockConsole();
}

//******************************************************************************
//
// Function:
//
//     xSetTextColor
//
// Description:
//
//     Set the color of the console text.
//
// Arguments:
//
//     BYTE red                 - Red intensity of the text color
//
//     BYTE green               - Green intensity of the text color
//
//     BYTE blue                - Blue intensity of the text color
//
//     BYTE alpha               - Alpha intensity of the text color (where
//                                0 indicates transparent and 255 indicates
//                                opaque)
//
// Return Value:
//
//     The old color of the console text.
//
//******************************************************************************
XCOLOR DXCIOAPI xSetTextColor(BYTE red, BYTE green, BYTE blue, BYTE alpha) {

    DWORD dwColor;

    LockConsole();

    dwColor = g_dwTextColor;
    g_dwTextColor = RGBA_MAKE(red, green, blue, alpha);

    UnlockConsole();

    return dwColor;
}

//******************************************************************************
//
// Function:
//
//     xSetBackgroundColor
//
// Description:
//
//     Set the background color of the console.  If a background texture has
//     been specified, the background color will be modulated with it.
//
// Arguments:
//
//     BYTE red                 - Red intensity of the background color
//
//     BYTE green               - Green intensity of the background color
//
//     BYTE blue                - Blue intensity of the background color
//
//     BYTE alpha               - Alpha intensity of the background color (where
//                                0 indicates transparent and 255 indicates
//                                opaque).  This value will be ignored if
//                                the console is managing Direct3D
//
// Return Value:
//
//     The old background color of the console.
//
//******************************************************************************
XCOLOR DXCIOAPI xSetBackgroundColor(BYTE red, BYTE green, BYTE blue, BYTE alpha) {

    PTLBVERTEX prBack;
    DWORD      dwColor;
    UINT       i;
    HRESULT    hr;

    LockConsole();

    dwColor = g_dwBackgroundColor;
    g_dwBackgroundColor = RGBA_MAKE(red, green, blue, alpha);

    if (g_bInitialized) {

        if (g_pd3drBack) {

            hr = g_pd3drBack->Lock(0, 4 * sizeof(TLBVERTEX), (LPBYTE*)&prBack, 0);
            if (SUCCEEDED(hr)) {
                for (i = 0; i < 4; i++) {
                    prBack[i].cDiffuse = g_dwBackgroundColor;
                }
                g_pd3drBack->Unlock();
            }
        }
    }

    UnlockConsole();

    return dwColor;
}

//******************************************************************************
//
// Function:
//
//     xSetBackgroundImageA
//
// Description:
//
//     Set the background texture for the console.
//
// Arguments:
//
//     LPCSTR pszImage          - A string containing the file or resource
//                                name of the image to use as the background
//                                texture.  If set to NULL, the current
//                                background texture will be released and
//                                no background texture will be used
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xSetBackgroundImageA(LPCSTR pszImage) {

    BOOL bRet;

    LockConsole();

    if (!pszImage) {
        bRet = SetBackgroundImage(NULL);
    }
    else {
#ifndef UNICODE
        bRet = SetBackgroundImage(pszImage);
#else
        WCHAR wszImage[MAX_PATH];
        mbstowcs(wszImage, pszImage, MAX_PATH);
        bRet = SetBackgroundImage(wszImage);
#endif // !UNICODE
    }

    UnlockConsole();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     xSetBackgroundImageW
//
// Description:
//
//     Set the background texture for the console.
//
// Arguments:
//
//     LPCWSTR pszImage         - A string containing the file or resource
//                                name of the image to use as the background
//                                texture.  If set to NULL, the current
//                                background texture will be released and
//                                no background texture will be used
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xSetBackgroundImageW(LPCWSTR pszImage) {

    BOOL bRet;

    LockConsole();

    if (!pszImage) {
        bRet = SetBackgroundImage(NULL);
    }
    else {
#ifndef UNICODE
        char szImage[MAX_PATH];
        wcstombs(szImage, pszImage, MAX_PATH);
        bRet = SetBackgroundImage(szImage);
#else
        bRet = SetBackgroundImage(pszImage);
#endif // !UNICODE
    }

    UnlockConsole();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     SetBackgroundImage
//
// Description:
//
//     Set the background texture for the console.
//
// Arguments:
//
//     LPCTSTR pszImage         - A string containing the file or resource
//                                name of the image to use as the background
//                                texture.  If set to NULL, the current
//                                background texture will be released and
//                                no background texture will be used
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetBackgroundImage(LPCTSTR pszImage) {

    CTexture8* pd3dt = NULL;

    if (!pszImage) {
        g_bUseBackground = FALSE;
    }
    else {
        _tcscpy(g_szBackImage, pszImage);
    }

    if (!g_bInitialized) {
        return TRUE;
    }

    if (pszImage) {

        pd3dt = (CTexture8*)CreateTexture(g_pDevice, pszImage, D3DFMT_A8R8G8B8, TTYPE_TEXTURE);
        if (!pd3dt) {
            return FALSE;
        }
#ifdef DEMO_HACK
        pd3dt->GetIDirect3DTexture8()->MoveResourceMemory(D3DMEM_VIDEO);
#endif // DEMO_HACK
        RemoveTexture(pd3dt);
        g_bUseBackground = TRUE;
    }

    if (!pszImage || pd3dt) {
        if (g_pd3dtBackEnv) {
            ReleaseTexture(g_pd3dtBackEnv);
            g_pd3dtBackEnv = NULL;
        }
        if (g_pd3dtBackBump) {
            ReleaseTexture(g_pd3dtBackBump);
            g_pd3dtBackBump = NULL;
        }
        if (g_pd3dtBackBase) {
            g_pd3dtBackBase->Release();
            g_pd3dtBackBase = NULL;
        }
        g_pd3dtBackBase = pd3dt;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     xScrollConsole
//
// Description:
//
//     Scroll the console according to the scroll flag(s) specified.
//
// Arguments:
//
//     DWORD dwScroll           - Scrolling flags that indicate the direction
//                                and amount to scroll the console
//
//     float* pfHorz            - Pointer to a floating point value indicating 
//                                the amount to scroll the console horizontally
//                                in pixels if the XSCROLL_HORZ flag has been 
//                                specified.  On return, this value will contain 
//                                the horizontal amount the console has been 
//                                scrolled.
//
//     float* pfVert            - Pointer to a floating point value indicating 
//                                the amount to scroll the console vertically
//                                in pixels if the XSCROLL_VERT flag has been 
//                                specified.  On return, this value will contain 
//                                the vertical amount the console has been 
//                                scrolled.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xScrollConsole(DWORD dwScroll, float* pfHorz, float* pfVert) {

    float fX = 0.0f, 
          fY = 0.0f;

    if (!g_bInitialized) {
        return;
    }

    LockConsole();

    if (dwScroll & XSCROLL_LINEUP) {
        fY -= 1.0f;
    }
    if (dwScroll & XSCROLL_LINEDOWN) {
        fY += 1.0f;
    }
    if (dwScroll & XSCROLL_LINELEFT) {
        fX -= 1.0f;
    }
    if (dwScroll & XSCROLL_LINERIGHT) {
        fX += 1.0f;
    }
    if (dwScroll & XSCROLL_PAGEUP) {
        fY -= (g_fTargetHeight - BORDER_TOP - BORDER_BOTTOM) / g_fCharHeight - 1.0f;
    }
    if (dwScroll & XSCROLL_PAGEDOWN) {
        fY += (g_fTargetHeight - BORDER_TOP - BORDER_BOTTOM) / g_fCharHeight - 1.0f;
    }
    if (dwScroll & XSCROLL_PAGELEFT) {
        fX -= (g_fTargetWidth - BORDER_LEFT - BORDER_RIGHT) / g_fCharWidth;
    }
    if (dwScroll & XSCROLL_PAGERIGHT) {
        fX += (g_fTargetWidth - BORDER_LEFT - BORDER_RIGHT) / g_fCharWidth;
    }
    if (dwScroll & XSCROLL_HORZ && pfHorz) {
        fX += *pfHorz;
    }
    if (dwScroll & XSCROLL_VERT && pfVert) {
        fY += *pfVert;
    }

    fX = (float)(int)(fX * 100.0f) / 100.0f;
    fY = (float)(int)(fY * 100.0f) / 100.0f;

    if (g_fMaxColScroll > 0.0f) {

        if (dwScroll & XSCROLL_LEFT) {
            g_fCurrentCol = 0.0f;
        }
        else if (dwScroll & XSCROLL_RIGHT) {
            g_fCurrentCol = g_fMaxColScroll;
        }
        else {
            g_fCurrentCol += fX;

            if (g_fCurrentCol < 0.0f) {
                g_fCurrentCol = 0.0f;
            }
            else if (g_fCurrentCol > g_fMaxColScroll) {
                g_fCurrentCol = g_fMaxColScroll;
            }
        }

        g_vTranslate.x = BORDER_LEFT - g_fCurrentCol * g_fCharWidth;
    }

    if (g_fMaxRowScroll > 0.0f) {

        if (dwScroll & XSCROLL_TOP) {
            g_fCurrentRow = g_fMaxRowScroll;
        }
        else if (dwScroll & XSCROLL_BOTTOM) {
            g_fCurrentRow = 0.0f;
        }
        else {
            g_fCurrentRow -= fY;
        }

        UpdateConsoleScrollY();

        UpdateVisibility();
    }

    if (pfHorz) {
        *pfHorz = g_fCurrentCol;
    }
    if (pfVert) {
        *pfVert = g_fMaxRowScroll - g_fCurrentRow;
    }

    UnlockConsole();
}

//******************************************************************************
//
// Function:
//
//     UpdateConsoleScrollY
//
// Description:
//
//     Update the vertical translation value for the console.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void UpdateConsoleScrollY() {

    if (g_fCurrentRow < 0.0f) {
        g_fCurrentRow = 0.0f;
    }
    else if (g_fMaxRowScroll > 0.0f && g_fCurrentRow > g_fMaxRowScroll) {
        g_fCurrentRow = g_fMaxRowScroll;
    }

    if (g_fMaxRowScroll <= 0.0f) {
        g_vTranslate.y = g_fTargetHeight - BORDER_BOTTOM + g_fMaxRowScroll * g_fCharHeight;
    }
    else {
        g_vTranslate.y = g_fTargetHeight - BORDER_BOTTOM + g_fCurrentRow * g_fCharHeight;
    }
}

//******************************************************************************
//
// Function:
//
//     xSetOutputBufferSize
//
// Description:
//
//     Set the size of the console output stream buffer.
//
// Arguments:
//
//     UINT uBytes              - Size of the output stream buffer in bytes
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xSetOutputBufferSize(UINT uBytes) {

    CVertexBuffer8* pd3drPos;
    CVertexBuffer8* pd3drTC;
    CIndexBuffer8*  pd3diText;
    LPSTR           pchNewOut;

    if (uBytes > 10922) {
        DebugString(TEXT("xSetOutputBufferSize: DXCONIO does not support buffer sizes > 10922")); // Limited by 16 bit index buffers
        return FALSE;
    }

    LockConsole();

    pchNewOut = (LPSTR)HeapAlloc(GetProcessHeap(), 0, uBytes);
    if (!pchNewOut) {
        UnlockConsole();
        return FALSE;
    }

    if (g_bInitialized) {

        pd3drPos = g_pd3drPosition;
        pd3drTC = g_pd3drTexCoord;
        pd3diText = g_pd3diText;

        pd3drPos->AddRef();
        pd3drTC->AddRef();
        pd3diText->AddRef();
        ReleaseGeometry();

        if (!CreateGeometry(uBytes)) {
            HeapFree(GetProcessHeap(), 0, pchNewOut);
            g_pd3drPosition = pd3drPos;
            g_pd3drTexCoord = pd3drTC;
            g_pd3diText = pd3diText;
            UnlockConsole();
            return FALSE;
        }
    }

    xClearScreen();

    if (g_pchOut) {
        HeapFree(GetProcessHeap(), 0, g_pchOut);
    }

    if (g_bInitialized) {    
        pd3drPos->Release();
        pd3drTC->Release();
        pd3diText->Release();
    }

    g_pchOut = pchNewOut;
    g_uOutSize = uBytes;

    UnlockConsole();

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     xSetDisplayWidth
//
// Description:
//
//     Set the width of the console display, in characters.  This width will
//     determine how long a line of console text can be before it is wrapped
//     to the next line.
//
// Arguments:
//
//     UINT uWidth              - Width of the console in characters
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xSetDisplayWidth(UINT uWidth) {

    if (uWidth == 0) {
        return FALSE;
    }

    LockConsole();

    xClearScreen();

    if (g_bInitialized) {
        g_fMaxColScroll = (float)uWidth - ((g_fTargetWidth - BORDER_LEFT - BORDER_RIGHT) / g_fCharWidth);
    }

    g_uOutWidth = uWidth;

    UnlockConsole();

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     xDisplayConsole
//
// Description:
//
//     Draw the console on the screen.  If the console manages Direct3D and
//     text has been drawn to the frame buffer using xTextOut, the console
//     will be overlayed in the scene and the frame buffer will be presented.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xDisplayConsole(void) {

    LockConsole();
    DrawConsole();
    UnlockConsole();
}

//******************************************************************************
//
// Function:
//
//     xResetConsole
//
// Description:
//
//     Reset the console in response to a device loss or change.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xResetConsole(void) {

    LockConsole();

    EffaceConsole();

    if (!InitConsole()) {
        UnlockConsole();
        return FALSE;
    }

    RefreshConsole();

    UnlockConsole();

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     xTextOutA
//
// Description:
//
//     Draw the given text string on the frame buffer.
//
// Arguments:
//
//     float fXStart            - x screen coordinate of the upper left corner 
//                                of the start of the string
//
//     float fYStart            - y screen coordinate of the upper left corner
//                                of the start of the string
//
//     float fCWidth            - Width in pixels of the characters to be used
//                                to display the string
//
//     float fCHeight           - Height in pixels of the characters to be used
//                                to display the string
//
//     XCOLOR xcColor           - Text color used to display the string
//
//     LPCSTR pszString         - String to output on the screen
//
//     UINT uCount              - Number of characters in the string
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xTextOutA(float fXStart, float fYStart, float fCWidth, 
                        float fCHeight, XCOLOR xcColor, LPCSTR pszString, 
                        UINT uCount)
{
/*
    CBaseTexture8*  pd3dt;
    CVertexBuffer8* pd3dr;
    CIndexBuffer8*  pd3di;
    UINT            uStride;
    UINT            uBaseIndex;
    DWORD           dwSrcBlend, dwDstBlend, dwAlphaBlend, dwColorOp0, 
                    dwColorOp1, dwAlphaOp0, dwColorArg1, dwColorArg2, 
                    dwAlphaArg1, dwAlphaArg2, dwAlphaTest, dwShader;
*/
    HRESULT hr;
    DWORD dwBlock;

    if (!g_bInitialized) {
        return FALSE;
    }

    LockConsole();

    // Save the device state
    hr = g_pDevice->CreateStateBlock(D3DSBT_ALL, &dwBlock);
    if (FAILED(hr)) {
        UnlockConsole();
        return FALSE;
    }
/*
    g_pDevice->GetRenderState(D3DRS_SRCBLEND, &dwSrcBlend);
    g_pDevice->GetRenderState(D3DRS_DESTBLEND, &dwDstBlend);
    g_pDevice->GetRenderState(D3DRS_ALPHABLENDENABLE, &dwAlphaBlend);
    g_pDevice->GetRenderState(D3DRS_ALPHATESTENABLE, &dwAlphaTest);
    g_pDevice->GetTextureStageState(0, D3DTSS_COLOROP, &dwColorOp0);
    g_pDevice->GetTextureStageState(0, D3DTSS_COLORARG1, &dwColorArg1);
    g_pDevice->GetTextureStageState(0, D3DTSS_COLORARG2, &dwColorArg2);
    g_pDevice->GetTextureStageState(0, D3DTSS_ALPHAOP, &dwAlphaOp0);
    g_pDevice->GetTextureStageState(0, D3DTSS_ALPHAARG1, &dwAlphaArg1);
    g_pDevice->GetTextureStageState(0, D3DTSS_ALPHAARG2, &dwAlphaArg2);
    g_pDevice->GetTextureStageState(1, D3DTSS_COLOROP, &dwColorOp1);
    g_pDevice->GetStreamSource(0, &pd3dr, &uStride);
    g_pDevice->GetIndices(&pd3di, &uBaseIndex);
    g_pDevice->GetTexture(0, &pd3dt);
    g_pDevice->GetVertexShader(&dwShader);
*/
    // Prepare to render the text
    g_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    g_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    g_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, (DWORD)FALSE);

    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD)TRUE);
    SetColorStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    SetAlphaStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    g_pDevice->SetTexture(0, g_pd3dtFontMap);
    g_pDevice->SetVertexShader(FVF_TLVERTEX);

    // Draw the text
    DrawTextQuads(pszString, uCount, fXStart, fYStart, fCWidth, 
                  fCHeight, (D3DCOLOR)xcColor, fXStart);

    // Restore the device state
/*
    g_pDevice->SetVertexShader(dwShader);
    if (pd3di) {
        g_pDevice->SetIndices(pd3di, uBaseIndex);
    }
    if (pd3dr) {
        g_pDevice->SetStreamSource(0, pd3dr, uStride);
    }
    g_pDevice->SetTexture(0, pd3dt);
    SetColorStage(g_pDevice, 0, dwColorArg1, dwColorArg2, (D3DTEXTUREOP)dwColorOp0);
    SetAlphaStage(g_pDevice, 0, dwAlphaArg1, dwAlphaArg2, (D3DTEXTUREOP)dwAlphaOp0);
    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, dwColorOp1);
    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, dwAlphaBlend);
    g_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, dwAlphaTest);
    g_pDevice->SetRenderState(D3DRS_SRCBLEND, dwSrcBlend);
    g_pDevice->SetRenderState(D3DRS_DESTBLEND, dwDstBlend);
*/
    g_pDevice->ApplyStateBlock(dwBlock);
    g_pDevice->DeleteStateBlock(dwBlock);

    UnlockConsole();

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     xTextOutW
//
// Description:
//
//     Draw the given text string on the frame buffer.
//
// Arguments:
//
//     float fXStart            - x screen coordinate of the upper left corner 
//                                of the start of the string
//
//     float fYStart            - y screen coordinate of the upper left corner
//                                of the start of the string
//
//     float fCWidth            - Width in pixels of the characters to be used
//                                to display the string
//
//     float fCHeight           - Height in pixels of the characters to be used
//                                to display the string
//
//     XCOLOR xcColor           - Text color used to display the string
//
//     LPCWSTR pszString        - String to output on the screen
//
//     UINT uCount              - Number of characters in the string
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xTextOutW(float fXStart, float fYStart, float fCWidth,
                        float fCHeight, XCOLOR xcColor, LPCWSTR pszString, 
                        UINT uCount) 
{
    BOOL bRet;
#ifndef UNDER_XBOX
    char szBuffer[MAX_TCHAR_OUTPUT];
#else
    char* szBuffer = (LPSTR)MemAlloc(MAX_TCHAR_OUTPUT);
    if (!szBuffer) {
//        __asm int 3;
        return FALSE;
    }
#endif // UNDER_XBOX
    wcstombs(szBuffer, pszString, MAX_TCHAR_OUTPUT);
    bRet = xTextOutA(fXStart, fYStart, fCWidth, fCHeight, xcColor, szBuffer, uCount);
#ifdef UNDER_XBOX
    MemFree(szBuffer);
#endif // UNDER_XBOX
    return bRet;
}

//******************************************************************************
//
// Function:
//
//     xDebugStringA
//
// Description:
//
//     Take the formatted output and send it to both the console output stream
//     and to the debugger.
//
// Arguments:
//
//     LPCSTR pszFormat         - Formatted string describing the output
//
//     Varaiable argument list  - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xDebugStringA(const char* pszFormat, ...) {

#ifndef UNDER_XBOX
    char szBuffer[MAX_TCHAR_OUTPUT];
#else
    char* szBuffer = (LPSTR)HeapAlloc(GetProcessHeap(), 0, MAX_TCHAR_OUTPUT);
    if (!szBuffer) {
//        __asm int 3;
        return;
    }
#endif // UNDER_XBOX
    va_list vl;
    va_start(vl, pszFormat);
    xvprintf(pszFormat, vl);
    vsprintf(szBuffer, pszFormat, vl);
    va_end(vl);
    OutputDebugStringA(szBuffer);
#ifdef UNDER_XBOX
    HeapFree(GetProcessHeap(), 0, szBuffer);
#endif // UNDER_XBOX
}

//******************************************************************************
//
// Function:
//
//     xDebugStringW
//
// Description:
//
//     Take the formatted output and send it to both the console output stream
//     and to the debugger.
//
// Arguments:
//
//     LPCWSTR pszFormat        - Formatted string describing the output
//
//     Varaiable argument list  - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xDebugStringW(const wchar_t* pszFormat, ...) {

#ifndef UNDER_XBOX
    wchar_t wszBuffer[MAX_TCHAR_OUTPUT];
#else
    wchar_t* wszBuffer = (LPWSTR)HeapAlloc(GetProcessHeap(), 0, MAX_TCHAR_OUTPUT * sizeof(wchar_t));
    if (!wszBuffer) {
//        __asm int 3;
        return;
    }
#endif // UNDER_XBOX
    va_list vl;
    va_start(vl, pszFormat);
    xvwprintf(pszFormat, vl);
    vswprintf(wszBuffer, pszFormat, vl);
    va_end(vl);
    OutputDebugStringW(wszBuffer);

#ifdef UNDER_XBOX
    HeapFree(GetProcessHeap(), 0, wszBuffer);
#endif // UNDER_XBOX
}

//******************************************************************************
// stdio functions
//******************************************************************************

//******************************************************************************
int DXCIOAPI xprintf(const char* format, ...) {

    va_list vl;
    int     nPrinted;

    va_start(vl, format);
    nPrinted = xvprintf(format, vl);
    va_end(vl);

    return nPrinted;
}

//******************************************************************************
int DXCIOAPI xwprintf(const wchar_t* format, ...) {

    va_list vl;
    int     nPrinted;

    va_start(vl, format);
    nPrinted = xvwprintf(format, vl);
    va_end(vl);

    return nPrinted;
}

//******************************************************************************
int DXCIOAPI xvprintf(const char* format, va_list argptr) {

    int  nWritten;
#ifndef UNDER_XBOX
    char szBuffer[MAX_TCHAR_OUTPUT];
#else
    char* szBuffer = (LPSTR)HeapAlloc(GetProcessHeap(), 0, MAX_TCHAR_OUTPUT);
    if (!szBuffer) {
//        __asm int 3;
        return 0;
    }
#endif // UNDER_XBOX
    
    nWritten = vsprintf(szBuffer, format, argptr);
    LockConsole();
    PutStringA(szBuffer);
    UnlockConsole();

#ifdef UNDER_XBOX
    HeapFree(GetProcessHeap(), 0, szBuffer);
#endif // UNDER_XBOX

    return nWritten;
}

//******************************************************************************
int DXCIOAPI xvwprintf(const wchar_t* format, va_list argptr) {

    int     nWritten;
#ifndef UNDER_XBOX
    wchar_t wszBuffer[MAX_TCHAR_OUTPUT];
#else
    wchar_t* wszBuffer = (LPWSTR)HeapAlloc(GetProcessHeap(), 0, MAX_TCHAR_OUTPUT * sizeof(wchar_t));
    if (!wszBuffer) {
//        __asm int 3;
        return 0;
    }
#endif // UNDER_XBOX

    nWritten = vswprintf(wszBuffer, format, argptr);
    LockConsole();
    PutStringW(wszBuffer);
    UnlockConsole();

#ifdef UNDER_XBOX
    HeapFree(GetProcessHeap(), 0, wszBuffer);
#endif // UNDER_XBOX

    return nWritten;
}

//******************************************************************************
int DXCIOAPI xputchar(int c) {

    char sz[2];

    sz[0] = (char)c;
    sz[1] = '\0';
    LockConsole();
    PutStringA(sz);
    UnlockConsole();

    return (int)sz[0];
}

//******************************************************************************
wint_t DXCIOAPI xputwchar(wint_t c) {

    wchar_t wsz[2];

    wsz[0] = c;
    wsz[1] = L'\0';
    LockConsole();
    PutStringW(wsz);
    UnlockConsole();

    return wsz[0];
}

//******************************************************************************
int DXCIOAPI xputs(const char* string) {

    LockConsole();
    PutStringA(string);
    PutStringA("\n");
    UnlockConsole();
    return 0;
}

//******************************************************************************
int DXCIOAPI xputws(const wchar_t* string) {

    LockConsole();
    PutStringW(string);
    PutStringW(L"\n");
    UnlockConsole();
    return 0;
}

//******************************************************************************
// Output buffer functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     PutStringA
//
// Description:
//
//     Append the given string to the end of the output stream buffer.
//
// Arguments:
//
//     LPCSTR                   - Null-terminated string to add to the stream
//
// Return Value:
//
//     None.
//
//******************************************************************************
void PutStringA(LPCSTR pszString) {

    LPCSTR psz;
    UINT   uStart;
    UINT   i;

    if (!pszString) {
        return;
    }

    uStart = g_uOutTail;

    for (psz = pszString; *psz; psz++) {

        g_pchOut[g_uOutTail++] = *psz;
        if (g_uOutTail == g_uOutSize) {
            g_uOutTail = 0;
        }
        if (g_uOutTail == g_uOutHead) {
            for (i = 0; g_pchOut[g_uOutHead] != '\n'; ) {
                switch (g_pchOut[g_uOutHead]) {
                    case '\t':
                        i += (i / TAB_LENGTH + 1) * TAB_LENGTH - i;
                        break;
                    case '\r':
                        i = 0;
                        break;
                    case '\b':
                        if (i > 0) i--;
                        break;
                    default:
                        i++;
                        break;
                }
                if (i >= g_uOutWidth) {
                    break;
                }
                if (++g_uOutHead == g_uOutSize) {
                    g_uOutHead = 0;
                }
                if (g_uOutHead == g_uOutTail) {
                    // Complete wraparound (the buffer is too small
                    // relative to the width of the margin and the length
                    // of the line.
                    uStart = g_uOutHead + 1;
                    if (uStart == g_uOutSize) {
                        uStart = 0;
                    }
                    if (g_bInitialized) {
                        g_uTextHead = 0;
                        g_uTextTail = 0;
                        g_uTextLine = 0;
                        g_uTextCol = 0;
                        g_uTextCursor = 0;
                    }
                    break;
                }
            }
            if (++g_uOutHead == g_uOutSize) {
                g_uOutHead = 0;
            }
        }
    }

    if (g_bInitialized) {
        UpdateConsole(uStart);
    }
}

//******************************************************************************
//
// Function:
//
//     PutStringW
//
// Description:
//
//     Append the given string to the end of the output stream buffer.
//
// Arguments:
//
//     LPCWSTR                  - Null-terminated string to add to the stream
//
// Return Value:
//
//     None.
//
//******************************************************************************
void PutStringW(LPCWSTR pszString) {

#ifndef UNDER_XBOX
    char szBuffer[MAX_TCHAR_OUTPUT];
#else
    char* szBuffer = (LPSTR)HeapAlloc(GetProcessHeap(), 0, MAX_TCHAR_OUTPUT);
    if (!szBuffer) {
//        __asm int 3;
        return;
    }
#endif // UNDER_XBOX
    wcstombs(szBuffer, pszString, MAX_TCHAR_OUTPUT);
    PutStringA(szBuffer);
#ifdef UNDER_XBOX
    HeapFree(GetProcessHeap(), 0, szBuffer);
#endif // UNDER_XBOX
}

//******************************************************************************
// Display functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     InitConsole
//
// Description:
//
//     Initialize the console's textures, vertex buffers, and index buffers.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL InitConsole() {

    CSurface8*          pd3ds;
    D3DSURFACE_DESC     d3dsd;
// ##TODO: Switch to bump mapping a noise background when DX8 supports it on the GeForce2
    D3DLOCKED_RECT      d3dlr;
    LPDWORD             pdwPixel;
    DWORD               dwPitch;
    UINT                i, j;
    float               fX, fY, fDX, fDY, fIntensity;
    HRESULT             hr;

#ifndef UNDER_XBOX
    hr = g_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DDevice8::GetBackBuffer"));
        xReleaseConsole();
        return FALSE;
    }
    hr = pd3ds->GetDesc(&d3dsd);
    pd3ds->Release();
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDesc"))) {
        xReleaseConsole();
        return FALSE;
    }
#else
    d3dsd.Width = 640;
    d3dsd.Height = 480;
#endif // UNDER_XBOX

    g_fTargetWidth = (float)d3dsd.Width;
    g_fTargetHeight = (float)d3dsd.Height;

    g_fMaxColScroll = (float)g_uOutWidth - ((g_fTargetWidth - BORDER_LEFT - BORDER_RIGHT) / g_fCharWidth);
    g_fMaxRowScroll = (float)g_uTextHeight - ((g_fTargetHeight - BORDER_TOP - BORDER_BOTTOM) / g_fCharHeight);
    g_fCurrentRow = 0.0f;
    g_fCurrentCol = 0.0f;

    g_vTranslate.x = BORDER_LEFT;
    g_vTranslate.y = g_fTargetHeight - BORDER_BOTTOM - g_fMaxRowScroll * g_fCharHeight;

    // Create a font map to use in displaying the output text on the screen
    if (!CreateFontMap(g_pDevice)) {
        return FALSE;
    }

    if (!CreateGeometry(g_uOutSize)) {
        EffaceConsole();
        return FALSE;
    }

    if (g_bUseBackground) {

        if (*g_szBackImage) {
            g_pd3dtBackBase = (CTexture8*)CreateTexture(g_pDevice, g_szBackImage, D3DFMT_A8R8G8B8, TTYPE_TEXTURE);
            if (!g_pd3dtBackBase) {
                g_bUseBackground = FALSE;
            }
            else {
#ifdef DEMO_HACK
                g_pd3dtBackBase->GetIDirect3DTexture8()->MoveResourceMemory(D3DMEM_VIDEO);
#endif // DEMO_HACK
                RemoveTexture(g_pd3dtBackBase);
            }
        }

        else {

#ifdef UNDER_XBOX
            Swizzler swz(BACKTEX_WIDTH, BACKTEX_HEIGHT, 1);
#endif
            g_pd3dtBackBase = (CTexture8*)CreateTexture(g_pDevice, TEXT("consolbk.bmp"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE);
            if (!g_pd3dtBackBase) {
//##DELETE
                g_pd3dtBackBase = (CTexture8*)CreateTexture(g_pDevice, BACKTEX_WIDTH, BACKTEX_HEIGHT, D3DFMT_A8R8G8B8, TTYPE_TEXTURE);
                if (!g_pd3dtBackBase) {
                    EffaceConsole();
                    return FALSE;
                }
                RemoveTexture(g_pd3dtBackBase);

                hr = g_pd3dtBackBase->LockRect(0, &d3dlr, NULL, 0);
                if (FAILED(hr)) {
                    ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"));
                    EffaceConsole();
                    return FALSE;
                }

                pdwPixel = (LPDWORD)d3dlr.pBits;

                dwPitch = d3dlr.Pitch >> 2;

                g_pNoise->SetRange(0.0f, 255.0f);

                fDX = 1.0f / (float)(BACKTEX_WIDTH - 1) * g_fTargetWidth / ((float)BACKTEX_WIDTH / 4.0f);
                fDY = 1.0f / (float)(BACKTEX_HEIGHT - 1) * g_fTargetHeight / ((float)BACKTEX_HEIGHT / 4.0f);

#ifdef UNDER_XBOX
                swz.SetU(0);
                swz.SetV(0);
#endif

                for (i = 0, fY = 0.0f; i < BACKTEX_HEIGHT; i++, fY += fDY) {

                    for (j = 0, fX = 0.0f; j < BACKTEX_WIDTH; j++, fX += fDX) {

                        fIntensity = g_pNoise->GetIntensity(fX, fY);
#ifndef UNDER_XBOX
                        pdwPixel[j] = RGBA_MAKE((BYTE)fIntensity, (BYTE)fIntensity, (BYTE)fIntensity, 255);
#else
                        pdwPixel[swz.Get2D()] = RGBA_MAKE((BYTE)fIntensity, (BYTE)fIntensity, (BYTE)fIntensity, 255);
                        swz.IncU();
#endif
                    }

#ifndef UNDER_XBOX
                    pdwPixel += dwPitch;
#else
                    swz.IncV();
#endif
                }

                hr = g_pd3dtBackBase->UnlockRect(0);
                if (FAILED(hr)) {
                    ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"));
                    EffaceConsole();
                    return FALSE;
                }
//##END DELETE
//                g_bUseBackground = FALSE;
            }
            else {
#ifdef DEMO_HACK
                g_pd3dtBackBase->GetIDirect3DTexture8()->MoveResourceMemory(D3DMEM_VIDEO);
#endif // DEMO_HACK
                RemoveTexture(g_pd3dtBackBase);
            }
/*
            // ##TODO: Switch to bump mapping a noise background when DX8 supports it on the GeForce2

            g_pd3dtBackBase = (CTexture8*)CreateTexture(g_pDevice, BACKTEX_WIDTH, BACKTEX_HEIGHT, D3DFMT_A8R8G8B8, TTYPE_TEXTURE);
            if (!g_pd3dtBackBase) {
                EffaceConsole();
                return FALSE;
            }
            RemoveTexture(g_pd3dtBackBase);

            hr = g_pd3dtBackBase->LockRect(0, &d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"));
                EffaceConsole();
                return FALSE;
            }

            pdwPixel = (LPDWORD)d3dlr.pBits;

            dwPitch = d3dlr.Pitch >> 2;

            g_pNoise->SetRange(0.0f, 255.0f);

            fDX = 1.0f / (float)(BACKTEX_WIDTH - 1) * g_fTargetWidth / ((float)BACKTEX_WIDTH / 4.0f);
            fDY = 1.0f / (float)(BACKTEX_HEIGHT - 1) * g_fTargetHeight / ((float)BACKTEX_HEIGHT / 4.0f);

#ifdef UNDER_XBOX
            swz.SetU(0);
            swz.SetV(0);
#endif

            for (i = 0, fY = 0.0f; i < BACKTEX_HEIGHT; i++, fY += fDY) {

                for (j = 0, fX = 0.0f; j < BACKTEX_WIDTH; j++, fX += fDX) {


                    fIntensity = g_pNoise->GetIntensity(fX, fY);
#ifndef UNDER_XBOX
                    pdwPixel[j] = RGBA_MAKE((BYTE)fIntensity, (BYTE)fIntensity, (BYTE)fIntensity, 255);
#else
                    pdwPixel[swz.Get2D()] = RGBA_MAKE((BYTE)fIntensity, (BYTE)fIntensity, (BYTE)fIntensity, 255);
                    swz.IncU();
#endif
                }

#ifndef UNDER_XBOX
                pdwPixel += dwPitch;
#else
                swz.IncV();
#endif
            }

            hr = g_pd3dtBackBase->UnlockRect(0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"));
                EffaceConsole();
                return FALSE;
            }

            g_pd3dtBackBump = (CTexture8*)CreateTexture(g_pDevice, TEXT("T_XBump"), D3DFMT_V8U8, TTYPE_BUMPMAP);
            if (!g_pd3dtBackBump) {
                EffaceConsole();
                return FALSE;
            }
            RemoveTexture(g_pd3dtBackBump);

            g_pd3dtBackEnv = (CTexture8*)CreateDiffuseMap(g_pDevice, BACKTEX_WIDTH, BACKTEX_HEIGHT, RGBA_MAKE(255, 255, 255, 255), D3DFMT_A8R8G8B8, FALSE);
            if (!g_pd3dtBackEnv) {
                EffaceConsole();
                return FALSE;
            }
            RemoveTexture(g_pd3dtBackEnv);
*/
        }
    }

    g_bInScene = FALSE;

    g_bDoConsoleUpdate = TRUE;

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     EffaceConsole
//
// Description:
//
//     Release the textures, vertex buffers, and index buffers used by the 
//     console.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void EffaceConsole() {

    g_bDoConsoleUpdate = FALSE;

    if (g_pd3dtBackEnv) {
        ReleaseTexture(g_pd3dtBackEnv);
        g_pd3dtBackEnv = NULL;
    }
    if (g_pd3dtBackBump) {
        ReleaseTexture(g_pd3dtBackBump);
        g_pd3dtBackBump = NULL;
    }
    if (g_pd3dtBackBase) {
        g_pd3dtBackBase->Release();
        g_pd3dtBackBase = NULL;
    }

    ReleaseGeometry();

    ReleaseFontMap();
}

//******************************************************************************
//
// Function:
//
//     CreateGeometry
//
// Description:
//
//     Create and initialize the vertex and index buffers used by the console
//     in drawing the background and outputting text.
//
// Arguments:
//
//     UINT uNumChars           - Number of quads to be used in displaying
//                                output stream text on the screen
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateGeometry(UINT uNumChars) {

    LPBYTE     pData;
    D3DVECTOR* pvPos;
    PTLBVERTEX prBack;
    D3DXMATRIX mIdentity;
    LPWORD     pwText;
    USHORT     i, j, k;
    HRESULT    hr;

// ##DELETE: Until support for vertex shaders is introduced, use a temporary vertex buffer to hold transformed vertices
// Create a vertex buffer to hold the positions of text quads
g_uVBDeleteMeSize = uNumChars * 4 * sizeof(TLVERTEX);
hr = g_pDevice->CreateVertexBuffer(g_uVBDeleteMeSize,
                                        0, 0, POOL_DEFAULT, 
                                        &g_pd3drDeleteMe);
if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
    return FALSE;
}
// ##END DELETE

    // Create a vertex buffer to hold the positions of text quads
    g_uVBPositionSize = uNumChars * 4 * sizeof(D3DVECTOR);
    hr = g_pDevice->CreateVertexBuffer(g_uVBPositionSize,
                                            0, 0, POOL_DEFAULT, 
                                            &g_pd3drPosition);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        return FALSE;
    }
OutputDebugString(TEXT("DXCONIO: Position vertex buffer created\n"));

    // Initialize position vertices to zero so nothing will be initially drawn
    hr = g_pd3drPosition->Lock(0, g_uVBPositionSize, &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
        ReleaseGeometry();
        return FALSE;
    }
    pvPos = (D3DVECTOR*)pData;

    for (i = 0; i < uNumChars * 4; i++) {
        pvPos[i].x = POS_BLANK;
        pvPos[i].y = POS_BLANK;
        pvPos[i].z = 0.0f;
    }

    hr = g_pd3drPosition->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
        ReleaseGeometry();
        return FALSE;
    }

    // Create a vertex buffer to hold the texture coordinates of text quads
    g_uVBTexCoordSize = uNumChars * 4 * sizeof(TCOORD2);
    hr = g_pDevice->CreateVertexBuffer(g_uVBTexCoordSize,
                                            0, 0, POOL_DEFAULT, 
                                            &g_pd3drTexCoord);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        ReleaseGeometry();
        return FALSE;
    }

    // Create an index buffer for the text geometry
    g_uIBTextSize = uNumChars * 6 * sizeof(WORD);
    hr = g_pDevice->CreateIndexBuffer(g_uIBTextSize,
                                            0, D3DFMT_INDEX16, POOL_DEFAULT,
                                            &g_pd3diText);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateIndexBuffer"))) {
        ReleaseGeometry();
        return FALSE;
    }

    hr = g_pd3diText->Lock(0, g_uIBTextSize, &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DIndexBuffer8::Lock"));
        ReleaseGeometry();
        return FALSE;
    }

    // Initialize the indices
    for (pwText = (LPWORD)pData, i = 0, j = 0, k = 0; i < uNumChars; i++, j += 4, k += 6) {
        pwText[k]   = j;
        pwText[k+1] = j + 2;
        pwText[k+2] = j + 1;
        pwText[k+3] = j + 1;
        pwText[k+4] = j + 2;
        pwText[k+5] = j + 3;
    }

    hr = g_pd3diText->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DIndexBuffer8::Unlock"));
        ReleaseGeometry();
        return FALSE;
    }

    // Create a vertex buffer the hold the background vertices
    hr = g_pDevice->CreateVertexBuffer(4 * sizeof(TLBVERTEX),
                                            0, FVF_TLBVERTEX, POOL_DEFAULT, 
                                            &g_pd3drBack);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        ReleaseGeometry();
        return FALSE;
    }

    // Initialize the background vertices
    hr = g_pd3drBack->Lock(0, 4 * sizeof(TLBVERTEX), &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
        ReleaseGeometry();
        return FALSE;
    }

    prBack = (PTLBVERTEX)pData;
    *prBack++ = TLBVERTEX(D3DXVECTOR3(0.0f, g_fTargetHeight, 0.9999f), 0.0001f, g_dwBackgroundColor, 0, 0.0f, 1.0f, 0.0f, 0.0f);
    *prBack++ = TLBVERTEX(D3DXVECTOR3(0.0f, 0.0f, 0.9999f), 0.0001f, g_dwBackgroundColor, 0, 0.0f, 0.0f, 0.0f, 0.0f);
    *prBack++ = TLBVERTEX(D3DXVECTOR3(g_fTargetWidth, 0.0f, 0.9999f), 0.0001f, g_dwBackgroundColor, 0, 1.0f, 0.0f, 0.0f, 0.0f);
    *prBack   = TLBVERTEX(D3DXVECTOR3(g_fTargetWidth, g_fTargetHeight, 0.9999f), 0.0001f, g_dwBackgroundColor, 0, 1.0f, 1.0f, 0.0f, 0.0f);

    prBack = (PTLBVERTEX)pData;
    D3DXMatrixIdentity(&mIdentity);
//    SetDiffuseMapCoords(&D3DXVECTOR3(0.0f, 0.0f, -1.0f), 0, 
//                       (PTCOORD2)&prBack[0].u1, sizeof(TLBVERTEX), 
//                       4, &mIdentity, &D3DXVECTOR3(0.0f, 1.0f, 0.5f), M_3PIDIV2);

    hr = g_pd3drBack->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
        ReleaseGeometry();
        return FALSE;
    }

    g_uTextSize = uNumChars;

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseGeometry
//
// Description:
//
//     Release the vertex and index buffers used by the console.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseGeometry() {

// ##DELETE: Until support for vertex shaders is introduced, use a temporary vertex buffer to hold transformed vertices
if (g_pd3drDeleteMe){
g_pd3drDeleteMe->Release();
g_pd3drDeleteMe = NULL;
}
// ##END DELETE

    if (g_pd3drBack) {
        g_pd3drBack->Release();
        g_pd3drBack = NULL;
    }

    if (g_pd3drPosition) {
        g_pd3drPosition->Release();
        g_pd3drPosition = NULL;
OutputDebugString(TEXT("DXCONIO: Position vertex buffer released\n"));
    }

    if (g_pd3drTexCoord) {
        g_pd3drTexCoord->Release();
        g_pd3drTexCoord = NULL;
    }

    if (g_pd3diText) {
        g_pd3diText->Release();
        g_pd3diText = NULL;
    }
}

//******************************************************************************
//
// Function:
//
//     RefreshConsole
//
// Description:
//
//     Recalculate all vertex data pertaining to the display of text for the 
//     console from the output stream buffer.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void RefreshConsole() {

    LPBYTE      pData;
    D3DVECTOR*  pvPos;
    HRESULT     hr;
    UINT        i;

    g_uTextHead = 0;
    g_uTextTail = 0;
    g_uTextLine = 0;
    g_uTextHeight = 1;
    g_uTextCol = 0;
    g_uTextCursor = 0;
    g_fTextX = 0.0f;

    // Clear the position buffer (such that it won't get displayed)
    hr = g_pd3drPosition->Lock(0, g_uVBPositionSize, &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
        return;
    }
    pvPos = (D3DVECTOR*)pData;

    for (i = 0; i < g_uTextSize * 4; i++) {
        pvPos[i].x = POS_BLANK;
        pvPos[i].y = POS_BLANK;
        pvPos[i].z = 0.0f;
    }

    hr = g_pd3drPosition->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
        return;
    }

    UpdateConsole(g_uOutHead);
}

//******************************************************************************
//
// Function:
//
//     UpdateConsole
//
// Description:
//
//     Update the vertex buffers with new data from the console output stream.
//
// Arguments:
//
//     UINT uStart              - Starting index into the console output buffer
//                                from which to update the console with new text
//
// Return Value:
//
//     None.
//
//******************************************************************************
void UpdateConsole(UINT uStart) {

    UINT  src;
    LPBYTE pData;
    D3DVECTOR* pvPos;
    PTCOORD2   ptcUV, ptcChar;
    UINT i, j;
    UINT uSpaces;
    HRESULT hr;

    if (!g_bDoConsoleUpdate) {
        return;
    }

    g_bDoConsoleUpdate = FALSE;

    // Lock the vertex buffers
if (!g_pd3drPosition) {
__asm int 3;
}
    hr = g_pd3drPosition->Lock(0, g_uVBPositionSize, &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
        g_bDoConsoleUpdate = TRUE;
        return;
    }
    pvPos = (D3DVECTOR*)pData;

    hr = g_pd3drTexCoord->Lock(0, g_uVBTexCoordSize, &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
        g_bDoConsoleUpdate = TRUE;
        return;
    }
    ptcUV = (PTCOORD2)pData;

    for (src = uStart; src != g_uOutTail; ) {

        if (g_pchOut[src] == '\n' || g_uTextCol >= g_uOutWidth) {
            g_fTextX = 0.0f;
            g_uTextLine = g_uTextTail;
            g_uTextCursor = g_uTextTail;
            g_uTextCol = 0;
            for (i = g_uTextHead; i != g_uTextTail; ) {
                pvPos[i * 4].y     -= g_fCharHeight;
                pvPos[i * 4 + 1].y -= g_fCharHeight;
                pvPos[i * 4 + 2].y -= g_fCharHeight;
                pvPos[i * 4 + 3].y -= g_fCharHeight;

                if (++i == g_uTextSize) {
                    i = 0;
                }
            }
            g_uTextHeight++;
            g_fMaxRowScroll = (float)g_uTextHeight - ((g_fTargetHeight - BORDER_TOP - BORDER_BOTTOM) / g_fCharHeight);
            if (g_fCurrentRow != 0.0f) {
                g_fCurrentRow += 1.0f;
            }
            UpdateConsoleScrollY();
        }

        uSpaces = 0;

        switch (g_pchOut[src]) {

            case '\r':
                g_uTextCursor = g_uTextLine;
                g_uTextCol = 0;
                g_fTextX = 0.0f;
                break;

            case '\b':
                if (g_uTextCursor != g_uTextLine) {
                    if (g_uTextCursor > 0) {
                        g_uTextCursor--;
                    }
                    else {
                        g_uTextCursor = g_uTextSize - 1;
                    }
                    g_uTextCol--;
                    g_fTextX -= g_fCharWidth;
                }
                break;

            case '\n':
                // Already handled
                break;

            case '\t':
                uSpaces = (g_uTextCol / TAB_LENGTH + 1) * TAB_LENGTH - g_uTextCol;
                if (g_uTextCol + uSpaces >= g_uOutWidth) {
                    uSpaces = g_uOutWidth - g_uTextCol;
                }
                // Fall through

            default:
                if (uSpaces) {
                    ptcChar = CHAR_TO_TCOORD(' ');
                    i = 1;
                }
                else {
                    ptcChar = CHAR_TO_TCOORD(g_pchOut[src]);
                    i = 0;
                }

                for (; i <= uSpaces; i++) {

                    pvPos[g_uTextCursor * 4].x        = g_fTextX;
                    pvPos[g_uTextCursor * 4].y        = -g_fCharHeight;
                    ptcUV[g_uTextCursor * 4].u        = ptcChar->u;
                    ptcUV[g_uTextCursor * 4].v        = ptcChar->v;

                    pvPos[g_uTextCursor * 4 + 1].x    = g_fTextX;
                    pvPos[g_uTextCursor * 4 + 1].y    = 0.0f;
                    ptcUV[g_uTextCursor * 4 + 1].u    = ptcChar->u;
                    ptcUV[g_uTextCursor * 4 + 1].v    = ptcChar->v + FONT_TCOORD_HEIGHT;

                    pvPos[g_uTextCursor * 4 + 2].x    = g_fTextX + g_fCharWidth;
                    pvPos[g_uTextCursor * 4 + 2].y    = -g_fCharHeight;
                    ptcUV[g_uTextCursor * 4 + 2].u    = ptcChar->u + FONT_TCOORD_WIDTH;
                    ptcUV[g_uTextCursor * 4 + 2].v    = ptcChar->v;

                    pvPos[g_uTextCursor * 4 + 3].x    = g_fTextX + g_fCharWidth;
                    pvPos[g_uTextCursor * 4 + 3].y    = 0.0f;
                    ptcUV[g_uTextCursor * 4 + 3].u    = ptcChar->u + FONT_TCOORD_WIDTH;
                    ptcUV[g_uTextCursor * 4 + 3].v    = ptcChar->v + FONT_TCOORD_HEIGHT;

                    if (g_uTextCursor == g_uTextTail) {
                        if (++g_uTextTail == g_uTextSize) {
                            g_uTextTail = 0;
                        }
                        if (g_uTextTail == g_uTextHead) {

                            float       y;
                            D3DVECTOR*  pv;

                            // Advance the head of the list to the start of the 
                            // next line, clearing the text in between
                            for (y = pvPos[g_uTextHead * 4].y; y == pvPos[g_uTextHead * 4].y; ) {
                                for (j = 0, pv = pvPos + g_uTextHead * 4; j < 4; j++, pv++) {
                                    pv->x = POS_BLANK;
                                    pv->y = POS_BLANK;
                                    pv->z = 0.0f;
                                }

                                if (++g_uTextHead == g_uTextSize) {
                                    g_uTextHead = 0;
                                }
                            }

                            g_uTextHeight -= (UINT)((pvPos[g_uTextHead * 4].y - y) / g_fCharHeight + 0.5f);
                            g_fMaxRowScroll = (float)g_uTextHeight - ((g_fTargetHeight - BORDER_TOP - BORDER_BOTTOM) / g_fCharHeight);
                            UpdateConsoleScrollY();
                        }
                    }
                    if (++g_uTextCursor == g_uTextSize) {
                        g_uTextCursor = 0;
                    }

                    g_fTextX += g_fCharWidth;
                    g_uTextCol++;
                }
                break;
        }

        if (++src == g_uOutSize) {
            src = 0;
        }
    }

    // Unlock the vertex buffers
    hr = g_pd3drPosition->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
        g_bDoConsoleUpdate = TRUE;
        return;
    }

    hr = g_pd3drTexCoord->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
        g_bDoConsoleUpdate = TRUE;
        return;
    }

    // Calculate the visible portions of the vertex buffer
    UpdateVisibility();

    g_bDoConsoleUpdate = TRUE;
}

//******************************************************************************
//
// Function:
//
//     BeginConsoleScene
//
// Description:
//
//     Pump messages, check for a lost device, clear the background, and begin a 
//     new scene for the console.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
static BOOL BeginConsoleScene() {

    HRESULT hr;
#ifndef UNDER_XBOX
    MSG     msg;

    while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {

        // If a message is ready, process it and proceed to
        // check for another message
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
#endif // !UNDER_XBOX

    hr = g_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return FALSE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!xResetConsole()) {
                return FALSE;
            }
        }
    }

    // Clear the rendering target
    if (!g_bUseBackground) {
        g_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, g_dwBackgroundColor, 1.0f, 0);
    }

    // Begin the scene
    g_pDevice->BeginScene();

    g_bInScene = TRUE;

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     EndConsoleScene
//
// Description:
//
//     End a console scene and present the frame buffer.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
static void EndConsoleScene() {

    // End the scene
    g_pDevice->EndScene();

    // Update the screen
    g_pDevice->Present(NULL, NULL, NULL, NULL);

    g_bInScene = FALSE;
}

//******************************************************************************
//
// Function:
//
//     DrawConsoleBackground
//
// Description:
//
//     Draw the background for the console.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
static void DrawConsoleBackground() {

    g_pDevice->SetVertexShader(FVF_TLBVERTEX);

    // Set textures
/*
    // ##TODO: Switch to bump mapping a noise background when DX8 supports it on the GeForce2

    g_pDevice->SetTexture(0, g_pd3dtBackBase);
    g_pDevice->SetTexture(1, g_pd3dtBackBump);
    g_pDevice->SetTexture(2, g_pd3dtBackEnv);

    g_pDevice->SetTextureStageState(0, D3DTSS_TEXCOORDINDEX, 0);
    g_pDevice->SetTextureStageState(1, D3DTSS_TEXCOORDINDEX, 0);
    g_pDevice->SetTextureStageState(2, D3DTSS_TEXCOORDINDEX, 1);

    SetColorStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    if (g_pd3dtBackBump) {
        SetColorStage(g_pDevice, 1, D3DTA_TEXTURE, D3DTA_CURRENT, D3DTOP_BUMPENVMAP);
        SetColorStage(g_pDevice, 2, D3DTA_TEXTURE, D3DTA_CURRENT, D3DTOP_MODULATE4X);
    }
    else {
        g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    }

    g_pDevice->SetTextureStageState(1, D3DTSS_BUMPENVMAT00, F2DW(1.0f));
    g_pDevice->SetTextureStageState(1, D3DTSS_BUMPENVMAT01, F2DW(0.0f));
    g_pDevice->SetTextureStageState(1, D3DTSS_BUMPENVMAT10, F2DW(0.0f));
    g_pDevice->SetTextureStageState(1, D3DTSS_BUMPENVMAT11, F2DW(1.0f));

    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD)FALSE);
//    SetColorStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
//    SetAlphaStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
//    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
//    g_pDevice->SetTexture(0, g_pd3dtBackBase);
*/

    g_pDevice->SetTextureStageState(0, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
    g_pDevice->SetTextureStageState(0, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD)TRUE);
    SetColorStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    SetAlphaStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    g_pDevice->SetTexture(0, g_pd3dtBackBase);

    g_pDevice->SetStreamSource(0, g_pd3drBack, sizeof(TLBVERTEX));

    g_pDevice->DrawPrimitive(D3DPT_TRIANGLEFAN, 0, 2);

    g_pDevice->SetTextureStageState(0, D3DTSS_MINFILTER, (DWORD)D3DTEXF_POINT);
    g_pDevice->SetTextureStageState(0, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_POINT);
}

//******************************************************************************
//
// Function:
//
//     DrawConsoleText
//
// Description:
//
//     Draw the console text.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
static void DrawConsoleText() {

    D3DCOLOR    cShadow;
// ##DELETE: Until support for vertex shaders is introduced, transform the vertices
LPBYTE pData, pPos, pTex;
D3DVECTOR* pvPos;
PTCOORD2 ptc;
PTLVERTEX pr;
UINT    i;
// ##END DELETE

    // ##REVIEW: When supported, switch to using vertex shaders to translate the vertices.
    // The output from the shader must be in clip-space
    // (0.0f to 1.0f) and will later be mapped to the viewport.  Any
    // clipping will be performed by d3d after shading.

    g_pDevice->SetVertexShader(FVF_TLVERTEX);

    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD)TRUE);
    SetColorStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    SetAlphaStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    g_pDevice->SetTexture(0, g_pd3dtFontMap);
    g_pDevice->SetTexture(1, NULL);
#ifndef DEMO_HACK
    g_pDevice->SetTexture(2, NULL);
#endif

    g_pDevice->SetIndices(g_pd3diText, 0);

    cShadow = RGBA_MAKE(0, 0, 0, (BYTE)((float)RGBA_GETALPHA(g_dwTextColor) / 255.0f * SHADOW_INTENSITY));

// ##DELETE: Until support for vertex shaders is introduced, transform the vertices
// Transform the vertices
g_pd3drDeleteMe->Lock(0, g_uVBDeleteMeSize, &pData, 0);
g_pd3drPosition->Lock(0, g_uVBPositionSize, &pPos, 0);
g_pd3drTexCoord->Lock(0, g_uVBTexCoordSize, &pTex, 0);
//pr = (PTLVERTEX)pData;
//pvPos = (D3DVECTOR*)pPos;
//ptc = (PTCOORD2)pTex;

for (i = 0, pvPos = ((D3DVECTOR*)pPos) + g_uVStart1, pr = ((PTLVERTEX)pData) + g_uVStart1, ptc = ((PTCOORD2)pTex) + g_uVStart1; i < g_uVCount1; i++, pr++, pvPos++, ptc++) {

    pr->fRHW = 110000.0f;
    pr->vPosition.x = pvPos->x + g_vTranslate.x + SHADOW_OFFSET_X;
    pr->vPosition.y = pvPos->y + g_vTranslate.y + SHADOW_OFFSET_Y;
    pr->vPosition.z = 0.000009f;
    pr->cDiffuse = cShadow;
    pr->cSpecular = 0;
    pr->u0 = ptc->u;
    pr->v0 = ptc->v;
}
for (i = 0, pvPos = ((D3DVECTOR*)pPos) + g_uVStart2, pr = ((PTLVERTEX)pData) + g_uVStart2, ptc = ((PTCOORD2)pTex) + g_uVStart2; i < g_uVCount2; i++, pr++, pvPos++, ptc++) {

    pr->fRHW = 110000.0f;
    pr->vPosition.x = pvPos->x + g_vTranslate.x + SHADOW_OFFSET_X;
    pr->vPosition.y = pvPos->y + g_vTranslate.y + SHADOW_OFFSET_Y;
    pr->vPosition.z = 0.000009f;
    pr->cDiffuse = cShadow;
    pr->cSpecular = 0;
    pr->u0 = ptc->u;
    pr->v0 = ptc->v;
}

g_pd3drTexCoord->Unlock();
g_pd3drPosition->Unlock();
g_pd3drDeleteMe->Unlock();
// ##END DELETE

    g_pDevice->SetStreamSource(0, g_pd3drDeleteMe, sizeof(TLVERTEX));

    if (g_uVCount1) {
        g_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, g_uVStart1, g_uVCount1, g_uVStart1 / 4 * 6, g_uVCount1 / 2);
    }
    if (g_uVCount2) {
        g_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, g_uVStart2, g_uVCount2, g_uVStart2 / 4 * 6, g_uVCount2 / 2);
    }

// ##DELETE: Until support for vertex shaders is introduced, transform the vertices
// Transform the vertices
g_pd3drDeleteMe->Lock(0, g_uVBDeleteMeSize, &pData, 0);
g_pd3drPosition->Lock(0, g_uVBPositionSize, &pPos, 0);
g_pd3drTexCoord->Lock(0, g_uVBTexCoordSize, &pTex, 0);
pr = (PTLVERTEX)pData;
pvPos = (D3DVECTOR*)pPos;
ptc = (PTCOORD2)pTex;

for (i = 0, pvPos = ((D3DVECTOR*)pPos) + g_uVStart1, pr = ((PTLVERTEX)pData) + g_uVStart1, ptc = ((PTCOORD2)pTex) + g_uVStart1; i < g_uVCount1; i++, pr++, pvPos++, ptc++) {

    pr->fRHW = 120000.0f;
    pr->vPosition.x = pvPos->x + g_vTranslate.x;
    pr->vPosition.y = pvPos->y + g_vTranslate.y;
    pr->vPosition.z = 0.000008f;
    pr->cDiffuse = g_dwTextColor;
    pr->cSpecular = 0;
    pr->u0 = ptc->u;
    pr->v0 = ptc->v;
}
for (i = 0, pvPos = ((D3DVECTOR*)pPos) + g_uVStart2, pr = ((PTLVERTEX)pData) + g_uVStart2, ptc = ((PTCOORD2)pTex) + g_uVStart2; i < g_uVCount2; i++, pr++, pvPos++, ptc++) {

    pr->fRHW = 120000.0f;
    pr->vPosition.x = pvPos->x + g_vTranslate.x;
    pr->vPosition.y = pvPos->y + g_vTranslate.y;
    pr->vPosition.z = 0.000008f;
    pr->cDiffuse = g_dwTextColor;
    pr->cSpecular = 0;
    pr->u0 = ptc->u;
    pr->v0 = ptc->v;
}
g_pd3drTexCoord->Unlock();
g_pd3drPosition->Unlock();
g_pd3drDeleteMe->Unlock();
// ##END DELETE

    g_pDevice->SetStreamSource(0, g_pd3drDeleteMe, sizeof(TLVERTEX));

    if (g_uVCount1) {
        g_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, g_uVStart1, g_uVCount1, g_uVStart1 / 4 * 6, g_uVCount1 / 2);
    }
    if (g_uVCount2) {
        g_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, g_uVStart2, g_uVCount2, g_uVStart2 / 4 * 6, g_uVCount2 / 2);
    }
}

//******************************************************************************
//
// Function:
//
//     DrawConsole
//
// Description:
//
//     Draw the console to the screen.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DrawConsole() {

/*
    CBaseTexture8*  pd3dt;
    CVertexBuffer8* pd3dr;
    CIndexBuffer8*  pd3di;
    UINT            uStride;
    UINT            uBaseIndex;
    DWORD           dwSrcBlend, dwDstBlend, dwAlphaBlend, dwColorOp0, 
                    dwColorOp1, dwAlphaOp0, dwColorArg1, dwColorArg2, 
                    dwAlphaArg1, dwAlphaArg2, dwAlphaTest, dwShader;
    DWORD           dwZCmp, dwTexFMin, dwTexFMag;
*/
    DWORD           dwBlock;
    HRESULT         hr;

    if (!g_bInitialized) {
        return;
    }

    if (g_bInScene) {
        return;
    }

    // Save the device state
    hr = g_pDevice->CreateStateBlock(D3DSBT_ALL, &dwBlock);
    if (FAILED(hr)) {
        return;
    }
/*
    g_pDevice->GetRenderState(D3DRS_SRCBLEND, &dwSrcBlend);
    g_pDevice->GetRenderState(D3DRS_DESTBLEND, &dwDstBlend);
    g_pDevice->GetRenderState(D3DRS_ALPHABLENDENABLE, &dwAlphaBlend);
    g_pDevice->GetRenderState(D3DRS_ALPHATESTENABLE, &dwAlphaTest);
    g_pDevice->GetTextureStageState(0, D3DTSS_COLOROP, &dwColorOp0);
    g_pDevice->GetTextureStageState(0, D3DTSS_COLORARG1, &dwColorArg1);
    g_pDevice->GetTextureStageState(0, D3DTSS_COLORARG2, &dwColorArg2);
    g_pDevice->GetTextureStageState(0, D3DTSS_ALPHAOP, &dwAlphaOp0);
    g_pDevice->GetTextureStageState(0, D3DTSS_ALPHAARG1, &dwAlphaArg1);
    g_pDevice->GetTextureStageState(0, D3DTSS_ALPHAARG2, &dwAlphaArg2);
    g_pDevice->GetTextureStageState(1, D3DTSS_COLOROP, &dwColorOp1);
    g_pDevice->GetStreamSource(0, &pd3dr, &uStride);
    g_pDevice->GetIndices(&pd3di, &uBaseIndex);
    g_pDevice->GetTexture(0, &pd3dt);
    g_pDevice->GetVertexShader(&dwShader);

    // Prepare to render the text
    g_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    g_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    g_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, (DWORD)FALSE);

    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD)TRUE);
    SetColorStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    SetAlphaStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    g_pDevice->SetTexture(0, g_pd3dtFontMap);
    g_pDevice->SetVertexShader(FVF_TLVERTEX);
*/

    g_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, (DWORD)FALSE);
//    g_pDevice->GetRenderState(D3DRS_ZFUNC, &dwZCmp);
    g_pDevice->SetRenderState(D3DRS_ZFUNC, D3DCMP_ALWAYS);
//    g_pDevice->GetTextureStageState(0, D3DTSS_MINFILTER, &dwTexFMin);
//    g_pDevice->GetTextureStageState(0, D3DTSS_MAGFILTER, &dwTexFMag);

    DrawConsoleBackground();
    DrawConsoleText();

/*
    g_pDevice->SetTexture(1, NULL);
    g_pDevice->SetTexture(2, NULL);
    g_pDevice->SetRenderState(D3DRS_ZFUNC, dwZCmp);
    g_pDevice->SetTextureStageState(0, D3DTSS_MINFILTER, dwTexFMin);
    g_pDevice->SetTextureStageState(0, D3DTSS_MAGFILTER, dwTexFMag);

    // Restore the device state
    g_pDevice->SetVertexShader(dwShader);
    if (pd3di) {
        g_pDevice->SetIndices(pd3di, uBaseIndex);
    }
    if (pd3dr) {
        g_pDevice->SetStreamSource(0, pd3dr, uStride);
    }
    g_pDevice->SetTexture(0, pd3dt);
    SetColorStage(g_pDevice, 0, dwColorArg1, dwColorArg2, (D3DTEXTUREOP)dwColorOp0);
    SetAlphaStage(g_pDevice, 0, dwAlphaArg1, dwAlphaArg2, (D3DTEXTUREOP)dwAlphaOp0);
    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, dwColorOp1);
    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, dwAlphaBlend);
    g_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, dwAlphaTest);
    g_pDevice->SetRenderState(D3DRS_SRCBLEND, dwSrcBlend);
    g_pDevice->SetRenderState(D3DRS_DESTBLEND, dwDstBlend);
*/
    g_pDevice->ApplyStateBlock(dwBlock);
    g_pDevice->DeleteStateBlock(dwBlock);
}

//******************************************************************************
//
// Function:
//
//     DrawTextQuads
//
// Description:
//
//     Draw the given text string on the frame buffer.
//
// Arguments:
//
//     LPCSTR szText            - String to output on the screen
//
//     UINT uCount              - Number of characters in the string
//
//     float fXStart            - x screen coordinate of the upper left corner 
//                                of the start of the string
//
//     float fYStart            - y screen coordinate of the upper left corner
//                                of the start of the string
//
//     float fWidth             - Width in pixels of the characters to be used
//                                to display the string
//
//     float fHeight            - Height in pixels of the characters to be used
//                                to display the string
//
//     D3DCOLOR c               - Text color used to display the string
//
//     float fLeftMargin        - Location of the left margin for the text in
//                                screen coordinates.  If a newline character
//                                is encountered the continuation of the
//                                string will begin at this point.
//
// Return Value:
//
//     None.
//
//******************************************************************************
static void DrawTextQuads(LPCSTR szText, UINT uCount, float fX, float fY, 
                          float fWidth, float fHeight, D3DCOLOR c,
                          float fLeftMargin)
{
    PTCOORD2 ptcChar;
    UINT uLen = uCount;
//    D3DCOLOR cShadow;
    UINT i, j;

    if (uCount > MAX_TEXTOUT_LENGTH) {
        uLen = MAX_TEXTOUT_LENGTH;
    }

    for (i = 0, j = 0; i < uLen; i++) {

        if (szText[i] == '\n') {
            fX = fLeftMargin;
            fY += fHeight;
            continue;
        }

        ptcChar = CHAR_TO_TCOORD(szText[i]);

        g_prTextOut[j].vPosition.x     = fX;
        g_prTextOut[j].vPosition.y     = fY;
        g_prTextOut[j].cDiffuse        = c;
        g_prTextOut[j].u0              = ptcChar->u;
        g_prTextOut[j].v0              = ptcChar->v;

        g_prTextOut[j+1].vPosition.x   = fX;
        g_prTextOut[j+1].vPosition.y   = fY + fHeight;
        g_prTextOut[j+1].cDiffuse      = c;
        g_prTextOut[j+1].u0            = ptcChar->u;
        g_prTextOut[j+1].v0            = ptcChar->v + FONT_TCOORD_HEIGHT;

        g_prTextOut[j+2].vPosition.x   = fX + fWidth;
        g_prTextOut[j+2].vPosition.y   = fY;
        g_prTextOut[j+2].cDiffuse      = c;
        g_prTextOut[j+2].u0            = ptcChar->u + FONT_TCOORD_WIDTH;
        g_prTextOut[j+2].v0            = ptcChar->v;

        g_prTextOut[j+3].vPosition.x   = fX + fWidth;
        g_prTextOut[j+3].vPosition.y   = fY + fHeight;
        g_prTextOut[j+3].cDiffuse      = c;
        g_prTextOut[j+3].u0            = ptcChar->u + FONT_TCOORD_WIDTH;
        g_prTextOut[j+3].v0            = ptcChar->v + FONT_TCOORD_HEIGHT;

        fX += fWidth;

        j += 4;
    }

/*
    if (!g_bAttached) {

        cShadow = RGBA_MAKE(0, 0, 0, (BYTE)((float)RGBA_GETALPHA(c) / 255.0f * SHADOW_INTENSITY));

        for (i = 0; i < j; i++) {
            g_prTextOut[MAX_TEXTOUT_LENGTH+i].vPosition.x = g_prTextOut[i].vPosition.x + SHADOW_OFFSET_X;
            g_prTextOut[MAX_TEXTOUT_LENGTH+i].vPosition.y = g_prTextOut[i].vPosition.y - SHADOW_OFFSET_Y;
            g_prTextOut[MAX_TEXTOUT_LENGTH+i].cDiffuse = cShadow;
            g_prTextOut[MAX_TEXTOUT_LENGTH+i].u0 = g_prTextOut[i].u0;
            g_prTextOut[MAX_TEXTOUT_LENGTH+i].v0 = g_prTextOut[i].v0;
        }

        if (j) {
            g_pDevice->DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 
                            j, j / 2, g_pwTextOut, D3DFMT_INDEX16, 
                            g_prTextOut + MAX_TEXTOUT_LENGTH, sizeof(TLVERTEX));
        }
    }
*/

    if (j) {
        g_pDevice->DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 
                        j, j / 2, g_pwTextOut, 
                        D3DFMT_INDEX16, g_prTextOut, sizeof(TLVERTEX));
    }

    if (uCount > MAX_TEXTOUT_LENGTH) {
        DrawTextQuads(szText + MAX_TEXTOUT_LENGTH, uCount - MAX_TEXTOUT_LENGTH, fX, fY, fWidth, 
                        fHeight, c, fLeftMargin);
    }
}

//******************************************************************************
//
// Function:
//
//     UpdateVisibility
//
// Description:
//
//     Update the visibility information for the console so only the visible
//     text will be drawn.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL UpdateVisibility() {

    LPBYTE      pData;
    D3DVECTOR*  pvPos;
    float       fTop, fBottom;
    UINT        uTextVertices;
    UINT        i;
    HRESULT     hr;

    // Lock the position buffer
    hr = g_pd3drPosition->Lock(0, g_uVBPositionSize, &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
        return FALSE;
    }
    pvPos = (D3DVECTOR*)pData;

    fTop = -g_fTargetHeight - g_fCurrentRow * g_fCharHeight - g_fCharHeight;
    fBottom = -g_fCurrentRow * g_fCharHeight + g_fCharHeight;

    // Identify the visible text vertices
    uTextVertices = g_uTextSize * 4;
    for (i = 0; i < uTextVertices; i += 4) {
        if (pvPos[i].y > fTop && pvPos[i].y < fBottom) {
            g_uVStart1 = i;
            break;
        }
    }
    for (g_uVCount1 = 0; i < uTextVertices && (pvPos[i].y > fTop && pvPos[i].y < fBottom); i += 4, g_uVCount1 += 4);
    for (i += 4; i < uTextVertices; i += 4) {
        if (pvPos[i].y > fTop && pvPos[i].y < fBottom) {
            g_uVStart2 = i;
            break;
        }
    }
    for (g_uVCount2 = 0; i < uTextVertices && (pvPos[i].y > fTop && pvPos[i].y < fBottom); i += 4, g_uVCount2 += 4);

    hr = g_pd3drPosition->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
        return FALSE;
    }

    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\direct3d.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    direct3d.cpp

Author:

    Matt Bronder

Description:

    CDirect3D methods.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// CDirect3D
//******************************************************************************

//******************************************************************************
CDirect3D::CDirect3D() {
}

//******************************************************************************
CDirect3D::~CDirect3D() {
}

//******************************************************************************
// CDirect3D8
//******************************************************************************

//******************************************************************************
CDirect3D8::CDirect3D8() {

    m_pd3d = NULL;
}

//******************************************************************************
CDirect3D8::~CDirect3D8() {
}

//******************************************************************************
BOOL CDirect3D8::Create() {

    m_pd3d = Direct3DCreate8(D3D_SDK_VERSION);
    return (BOOL)m_pd3d;
}

//******************************************************************************
ULONG CDirect3D8::AddRef() {

    ULONG uRef = 0;

    if (m_pd3d) {
        uRef = m_pd3d->AddRef();
        CObject::AddRef();
    }

    return uRef;
}

//******************************************************************************
ULONG CDirect3D8::Release() {

    ULONG uRef = 0;

    if (m_pd3d) {
        uRef = m_pd3d->Release();
        CObject::Release();
    }

    return uRef;
}

//******************************************************************************
LPDIRECT3D8 CDirect3D8::GetIDirect3D8() {

    return m_pd3d;
}

//******************************************************************************
UINT CDirect3D8::GetAdapterCount() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return 0;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3d->GetAdapterCount();
}

//******************************************************************************
HRESULT CDirect3D8::GetAdapterDisplayMode(UINT uAdapter, D3DDISPLAYMODE* pd3ddm) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3d->GetAdapterDisplayMode(uAdapter, pd3ddm);
}

//******************************************************************************
HRESULT CDirect3D8::GetAdapterIdentifier(UINT uAdapter, DWORD dwFlags, D3DADAPTER_IDENTIFIER8* pd3dai) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3d->GetAdapterIdentifier(uAdapter, dwFlags, pd3dai);
}

//******************************************************************************
UINT CDirect3D8::GetAdapterModeCount(UINT uAdapter) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return 0;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3d->GetAdapterModeCount(uAdapter);
}

//******************************************************************************
HMONITOR CDirect3D8::GetAdapterMonitor(UINT uAdapter) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return NULL;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3d->GetAdapterMonitor(uAdapter);
#else
    Log(LOG_FAIL, TEXT("IDirect3D8::GetAdapterMonitor is not implemented on XBox"));
    return NULL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDirect3D8::GetDeviceCaps(UINT uAdapter, D3DDEVTYPE d3ddt, D3DCAPS8* pd3dcaps) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3d->GetDeviceCaps(uAdapter, d3ddt, pd3dcaps);
}

//******************************************************************************
HRESULT CDirect3D8::EnumAdapterModes(UINT uAdapter, UINT uMode, D3DDISPLAYMODE* pd3ddm) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3d->EnumAdapterModes(uAdapter, uMode, pd3ddm);
}

//******************************************************************************
HRESULT CDirect3D8::RegisterSoftwareDevice(void* pfnInitialize) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3d->RegisterSoftwareDevice(pfnInitialize);
#else
    Log(LOG_FAIL, TEXT("IDirect3D8::RegisterSoftwareDevice is not implemented on XBox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDirect3D8::CheckDeviceFormat(UINT uAdapter, D3DDEVTYPE d3ddt, D3DFORMAT fmtAdapter, DWORD dwUsage, D3DRESOURCETYPE d3drt, D3DFORMAT fmtCheck) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3d->CheckDeviceFormat(uAdapter, d3ddt, fmtAdapter, dwUsage, d3drt, fmtCheck);
}

//******************************************************************************
HRESULT CDirect3D8::CheckDeviceMultiSampleType(UINT uAdapter, D3DDEVTYPE d3ddt, D3DFORMAT fmtRenderTarget, BOOL bWindowed, D3DMULTISAMPLE_TYPE d3dmst) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3d->CheckDeviceMultiSampleType(uAdapter, d3ddt, fmtRenderTarget, bWindowed, d3dmst);
}

//******************************************************************************
HRESULT CDirect3D8::CheckDeviceType(UINT uAdapter, D3DDEVTYPE d3ddtCheck, D3DFORMAT fmtDisplayMode, D3DFORMAT fmtBackBuffer, BOOL bWindowed) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3d->CheckDeviceType(uAdapter, d3ddtCheck, fmtDisplayMode, fmtBackBuffer, bWindowed);
}

//******************************************************************************
HRESULT CDirect3D8::CheckDepthStencilMatch(UINT uAdapter, D3DDEVTYPE d3ddt, D3DFORMAT fmtAdapter, D3DFORMAT fmtrRenderTarget, D3DFORMAT fmtdDepthStencil) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3d->CheckDepthStencilMatch(uAdapter, d3ddt, fmtAdapter, fmtrRenderTarget, fmtdDepthStencil);
}

//******************************************************************************
HRESULT CDirect3D8::CreateDevice(UINT uAdapter, D3DDEVTYPE d3ddt, HWND hWndFocus, DWORD dwBehaviorFlags, D3DPRESENT_PARAMETERS* pd3dpp, CDevice8** ppDevice) {

    CDevice8*           pDevice;
    LPDIRECT3DDEVICE8   pd3dd;
    HRESULT             hr;

#ifdef D3DLOCUS_DEBUG

    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }

    if (!ppDevice) {
        return D3DERR_INVALIDCALL;
    }

#endif // D3DLOCUS_DEBUG

    *ppDevice = NULL;

    hr = m_pd3d->CreateDevice(uAdapter, d3ddt, hWndFocus, dwBehaviorFlags, pd3dpp, &pd3dd);
    if (SUCCEEDED(hr)) {
        pDevice = new CDevice8();
        if (!pDevice) {
            pd3dd->Release();
            return E_OUTOFMEMORY;
        }

        if (!pDevice->Create(this, pd3dd)) {
            pd3dd->Release();
            return ERR_LOCUSFAIL;
        }

        *ppDevice = pDevice;
    }

    return hr;
}

#ifdef UNDER_XBOX
//******************************************************************************
HRESULT CDirect3D8::SetPushBufferSize(DWORD dwPushBufferSize, DWORD dwKickOffSize) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3d->SetPushBufferSize(dwPushBufferSize, dwKickOffSize);
}
#endif // UNDER_XBOX

//******************************************************************************
// CCDirect3D8
//******************************************************************************

//******************************************************************************
CCDirect3D8::CCDirect3D8() {

    m_pClient = NULL;
}

//******************************************************************************
CCDirect3D8::~CCDirect3D8() {
}

//******************************************************************************
BOOL CCDirect3D8::Create(CClient* pClient) {

    BOOL bRet;

    if (!pClient) {
        return FALSE;
    }
    m_pClient = pClient;

    bRet = CDirect3D8::Create();
    if (bRet) {
        m_pClient->CallDirect3DCreate8(this);
    }

    return bRet;
}

//******************************************************************************
ULONG CCDirect3D8::AddRef() {

    ULONG uRefC, uRefS;

    uRefC = CDirect3D8::AddRef();

    if (m_pClient->CallMethod(MID_D3D8_AddRef, this, &uRefS)) {
#ifndef UNDER_XBOX
        if (uRefC != uRefS) {
            Log(LOG_WARN, TEXT("IDirect3D8::AddRef result inconsistent [C: %d, S: %d]"), uRefC, uRefS);
        }
#endif // !UNDER_XBOX
    }

    return uRefC;
}

//******************************************************************************
ULONG CCDirect3D8::Release() {

    ULONG uRefC = 0, uRefS;

    if (m_pd3d) {

        uRefC = m_pd3d->Release();
        if (m_pClient->CallMethod(MID_D3D8_Release, this, &uRefS)) {
#ifndef UNDER_XBOX
            if (uRefC != uRefS) {
                Log(LOG_WARN, TEXT("IDirect3D8::Release result inconsistent [C: %d, S: %d]"), uRefC, uRefS);
            }
#endif // !UNDER_XBOX
        }
        CObject::Release();
    }

    return uRefC;
}

//******************************************************************************
UINT CCDirect3D8::GetAdapterCount() {

    UINT uCountC, uCountS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return 0;
    }
#endif // D3DLOCUS_DEBUG

    uCountC = m_pd3d->GetAdapterCount();

    m_pClient->CallMethod(MID_D3D8_GetAdapterCount, this, &uCountS);

    return uCountC;
}

//******************************************************************************
HRESULT CCDirect3D8::GetAdapterDisplayMode(UINT uAdapter, D3DDISPLAYMODE* pd3ddm) {

    D3DDISPLAYMODE  d3ddm;
    HRESULT         hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3d->GetAdapterDisplayMode(uAdapter, pd3ddm);

    m_pClient->CallMethod(MID_D3D8_GetAdapterDisplayMode, this, &hrS, uAdapter, &d3ddm, sizeof(D3DDISPLAYMODE));

    return hrC;
}

//******************************************************************************
HRESULT CCDirect3D8::GetAdapterIdentifier(UINT uAdapter, DWORD dwFlags, D3DADAPTER_IDENTIFIER8* pd3dai) {

    D3DADAPTER_IDENTIFIER8 d3dai;
    HRESULT                hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3d->GetAdapterIdentifier(uAdapter, dwFlags, pd3dai);

    m_pClient->CallMethod(MID_D3D8_GetAdapterIdentifier, this, &hrS, uAdapter, dwFlags, &d3dai, sizeof(D3DADAPTER_IDENTIFIER8));

    return hrC;
}

//******************************************************************************
UINT CCDirect3D8::GetAdapterModeCount(UINT uAdapter) {

    UINT uCountC, uCountS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return 0;
    }
#endif // D3DLOCUS_DEBUG

    uCountC = m_pd3d->GetAdapterModeCount(uAdapter);

    m_pClient->CallMethod(MID_D3D8_GetAdapterModeCount, this, &uCountS, uAdapter);

    return uCountC;
}

//******************************************************************************
HMONITOR CCDirect3D8::GetAdapterMonitor(UINT uAdapter) {

#ifndef UNDER_XBOX
    HMONITOR hmonC, hmonS;
#endif

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return NULL;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    hmonC = m_pd3d->GetAdapterMonitor(uAdapter);
    m_pClient->CallMethod(MID_D3D8_GetAdapterMonitor, this, &hmonS, uAdapter);
    return hmonC;
#else
    Log(LOG_FAIL, TEXT("IDirect3D8::GetAdapterMonitor is not implemented on XBox"));
    return NULL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CCDirect3D8::GetDeviceCaps(UINT uAdapter, D3DDEVTYPE d3ddt, D3DCAPS8* pd3dcaps) {

    D3DCAPS8    d3dcaps;
    HRESULT     hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3d->GetDeviceCaps(uAdapter, d3ddt, pd3dcaps);

    m_pClient->CallMethod(MID_D3D8_GetDeviceCaps, this, &hrS, uAdapter, d3ddt, &d3dcaps, sizeof(D3DCAPS8));

    return hrC;
}

//******************************************************************************
HRESULT CCDirect3D8::EnumAdapterModes(UINT uAdapter, UINT uMode, D3DDISPLAYMODE* pd3ddm) {

    D3DDISPLAYMODE d3ddm;
    HRESULT        hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3d->EnumAdapterModes(uAdapter, uMode, pd3ddm);

    m_pClient->CallMethod(MID_D3D8_EnumAdapterModes, this, &hrS, uAdapter, uMode, &d3ddm, sizeof(D3DDISPLAYMODE));

    return hrC;
}

//******************************************************************************
HRESULT CCDirect3D8::RegisterSoftwareDevice(void* pfnInitialize) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3d->RegisterSoftwareDevice(pfnInitialize);
#else
    Log(LOG_FAIL, TEXT("IDirect3D8::RegisterSoftwareDevice is not implemented on XBox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CCDirect3D8::CheckDeviceFormat(UINT uAdapter, D3DDEVTYPE d3ddt, D3DFORMAT fmtAdapter, DWORD dwUsage, D3DRESOURCETYPE d3drt, D3DFORMAT fmtCheck) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3d->CheckDeviceFormat(uAdapter, d3ddt, fmtAdapter, dwUsage, d3drt, fmtCheck);

    m_pClient->CallMethod(MID_D3D8_CheckDeviceFormat, this, &hrS, uAdapter, d3ddt, fmtAdapter, dwUsage, d3drt, fmtCheck);

    return hrC;
}

//******************************************************************************
HRESULT CCDirect3D8::CheckDeviceMultiSampleType(UINT uAdapter, D3DDEVTYPE d3ddt, D3DFORMAT fmtRenderTarget, BOOL bWindowed, D3DMULTISAMPLE_TYPE d3dmst) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3d->CheckDeviceMultiSampleType(uAdapter, d3ddt, fmtRenderTarget, bWindowed, d3dmst);

    m_pClient->CallMethod(MID_D3D8_CheckDeviceMultiSampleType, this, &hrS, uAdapter, d3ddt, fmtRenderTarget, bWindowed, d3dmst);

    return hrC;
}

//******************************************************************************
HRESULT CCDirect3D8::CheckDeviceType(UINT uAdapter, D3DDEVTYPE d3ddtCheck, D3DFORMAT fmtDisplayMode, D3DFORMAT fmtBackBuffer, BOOL bWindowed) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3d->CheckDeviceType(uAdapter, d3ddtCheck, fmtDisplayMode, fmtBackBuffer, bWindowed);

    m_pClient->CallMethod(MID_D3D8_CheckDeviceType, this, &hrS, uAdapter, d3ddtCheck, fmtDisplayMode, fmtBackBuffer, bWindowed);

    return hrC;
}

//******************************************************************************
HRESULT CCDirect3D8::CheckDepthStencilMatch(UINT uAdapter, D3DDEVTYPE d3ddt, D3DFORMAT fmtAdapter, D3DFORMAT fmtrRenderTarget, D3DFORMAT fmtdDepthStencil) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3d->CheckDepthStencilMatch(uAdapter, d3ddt, fmtAdapter, fmtrRenderTarget, fmtdDepthStencil);

    m_pClient->CallMethod(MID_D3D8_CheckDepthStencilMatch, this, &hrS, uAdapter, d3ddt, fmtAdapter, fmtrRenderTarget, fmtdDepthStencil);

    return hrC;
}

//******************************************************************************
HRESULT CCDirect3D8::CreateDevice(UINT uAdapter, D3DDEVTYPE d3ddt, HWND hWndFocus, DWORD dwBehaviorFlags, D3DPRESENT_PARAMETERS* pd3dpp, CDevice8** ppDevice) {

    CCDevice8*          pDevice;
    LPDIRECT3DDEVICE8   pd3dd;
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG

    if (!m_pd3d) {
        return ERR_NOTCREATED;
    }

    if (!ppDevice) {
        return D3DERR_INVALIDCALL;
    }

#endif // D3DLOCUS_DEBUG

    *ppDevice = NULL;

    hrC = m_pd3d->CreateDevice(uAdapter, d3ddt, hWndFocus, dwBehaviorFlags, pd3dpp, &pd3dd);
    if (SUCCEEDED(hrC)) {

        pDevice = new CCDevice8();
        if (!pDevice) {
            pd3dd->Release();
            return E_OUTOFMEMORY;
        }

        if (!pDevice->Create(m_pClient, this, pd3dd)) {
            pd3dd->Release();
            return ERR_LOCUSFAIL;
        }

        *ppDevice = pDevice;

        if (m_pClient->CallMethod(MID_D3D8_CreateDevice, this, &hrS, uAdapter, d3ddt, hWndFocus, dwBehaviorFlags, pd3dpp, sizeof(D3DPRESENT_PARAMETERS), &pDevice)) {
            if (hrC != hrS) {
                Log(LOG_WARN, TEXT("IDirect3D8::CreateDevice result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
                m_pClient->Disconnect();
            }
        }
    }

    return hrC;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\dtypes.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    dtypes.h

Author:

    Matt Bronder

Description:

    Various type definitions.

*******************************************************************************/

#ifndef __DTYPES_H__
#define __DTYPES_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FVF_VERTEX              (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1)
#define FVF_BVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3)
#define FVF_BVERTEX2            (D3DFVF_XYZ | D3DFVF_TEX2)
#define FVF_NVERTEX             (D3DFVF_XYZ | D3DFVF_TEX3 | \
                                              D3DFVF_TEXCOORDSIZE2(0) | \
                                              D3DFVF_TEXCOORDSIZE2(1) | \
                                              D3DFVF_TEXCOORDSIZE3(2))
#define FVF_LVERTEX             (D3DFVF_XYZ | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLVERTEX            (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX1)
#define FVF_TLBVERTEX           (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | \
                                 D3DFVF_SPECULAR | D3DFVF_TEX2)
#define FVF_CVERTEX             (D3DFVF_XYZ | D3DFVF_NORMAL)
#define FVF_CVERTEX1_3          (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 | \
                                 D3DFVF_TEXCOORDSIZE3(0))

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _TCOORD {
    float               u;
    float               v;
} TCOORD, *PTCOORD;

//******************************************************************************
typedef struct _TCOORD2 {
    float               u;
    float               v;
} TCOORD2, *PTCOORD2;

//******************************************************************************
typedef struct _TCOORD3 {
    float               u;
    float               v;
    float               t;
} TCOORD3, *PTCOORD3;

//******************************************************************************
typedef struct _MATRIX3X3 {
    union {
        struct {
            float _11, _12, _13;
            float _21, _22, _23;
            float _31, _32, _33;
        };
        float m[3][3];
        struct {
            D3DXVECTOR3 r1;
            D3DXVECTOR3 r2;
            D3DXVECTOR3 r3;
        };
    };
} MATRIX3X3, *PMATRIX3X3;

//******************************************************************************
typedef struct _VERTEX {
    D3DXVECTOR3 vPosition;
    D3DXVECTOR3 vNormal;
    float       u0, v0;

    _VERTEX() {}
    _VERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0;
    }
} VERTEX, *PVERTEX;

//******************************************************************************
typedef struct _BVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (bump) map coordinates
    float       u2, v2;         // Diffuse light map coordinates

    _BVERTEX() {}
    _BVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2;
    }
} BVERTEX, *PBVERTEX;

//******************************************************************************
typedef struct _BVERTEX2 {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates and height (bump) map coordinates
    float       u1, v1;         // Diffuse light map coordinates

    _BVERTEX2() {}
    _BVERTEX2(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} BVERTEX2, *PBVERTEX2;

//******************************************************************************
typedef struct _NVERTEX {
    D3DXVECTOR3 vPosition;
    float       u0, v0;         // Base texture coordinates
    float       u1, v1;         // Height (normal) map coordinates
    float       u2, v2, t2;     // Light direction in tangent space

    _NVERTEX() {}
    _NVERTEX(const D3DVECTOR& v, float _u0, float _v0, float _u1, float _v1, float _u2, float _v2, float _t2) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1; u2 = _u2; v2 = _v2; t2 = _t2;
    }
} NVERTEX, *PNVERTEX;

//******************************************************************************
typedef struct _LVERTEX {
    D3DXVECTOR3 vPosition;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _LVERTEX() { }
    _LVERTEX(const D3DVECTOR& v, D3DCOLOR _cDiffuse, D3DCOLOR _cSpecular, float _u0, float _v0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} LVERTEX, *PLVERTEX;

//******************************************************************************
typedef struct _TLVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;

    _TLVERTEX() {}
    _TLVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0;
    }
} TLVERTEX, *PTLVERTEX;

//******************************************************************************
typedef struct _TLBVERTEX {
    D3DXVECTOR3 vPosition;
    float       fRHW;
    D3DCOLOR    cDiffuse;
    D3DCOLOR    cSpecular;
    float       u0, v0;
    float       u1, v1;

    _TLBVERTEX() {}
    _TLBVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
              D3DCOLOR _cSpecular, float _u0, float _v0, float _u1, float _v1) 
    { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
        cDiffuse = _cDiffuse; cSpecular = _cSpecular;
        u0 = _u0; v0 = _v0; u1 = _u1; v1 = _v1;
    }
} TLBVERTEX, *PTLBVERTEX;

//******************************************************************************
typedef struct _CVERTEX {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;

    _CVERTEX() { }
    _CVERTEX(const D3DVECTOR& v, const D3DVECTOR& n) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
    }
} CVERTEX, *PCVERTEX;

//******************************************************************************
typedef struct _VERTEX1_3 {
    D3DXVECTOR3   vPosition;
    D3DXVECTOR3   vNormal;
    float         u0, v0, t0;

    _VERTEX1_3() { }
    _VERTEX1_3(const D3DVECTOR& v, const D3DVECTOR& n, float _u0, float _v0, float _t0) { 
        vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z;
        vNormal.x = n.x; vNormal.y = n.y; vNormal.z = n.z;
        u0 = _u0; v0 = _v0; t0 = _t0;
    }
} VERTEX1_3, *PVERTEX1_3;

#endif //__DTYPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\device.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    device.h

Description:

    IDirect3DDevice classes.

*******************************************************************************/

#ifndef __DEVICE_H__
#define __DEVICE_H__

//******************************************************************************
// CDevice
//******************************************************************************

//******************************************************************************
class CDevice : public CObject {

protected:

public:

                        CDevice();
                        ~CDevice();
};

//******************************************************************************
class CDevice8 : public CDevice {

protected:

    LPDIRECT3DDEVICE8   m_pd3dd;
    CDirect3D8*         m_pDirect3D;
    CMap32*             m_pObjectMap;

public:

                        CDevice8();
                        ~CDevice8();
    virtual BOOL        Create(CDirect3D8* pDirect3D, LPDIRECT3DDEVICE8 pd3dd);

    virtual 
    LPDIRECT3DDEVICE8   GetIDirect3DDevice8();

    virtual BOOL        AddObject(LPVOID pvInterface, LPVOID pvObject);
    virtual BOOL        RemoveObject(LPVOID pvInterface);
    virtual BOOL        FindObject(LPVOID pvInterface, LPVOID* ppvObject);

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Resource Creation

#ifndef UNDER_XBOX
    virtual HRESULT     CreateAdditionalSwapChain(D3DPRESENT_PARAMETERS* pd3dpp, CSwapChain8** ppSwapChain);
#endif // !UNDER_XBOX
    virtual HRESULT     CreateCubeTexture(UINT uEdgeLength, UINT uLevels, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CCubeTexture8** ppCubeTexture);
    virtual HRESULT     CreateDepthStencilSurface(UINT uWidth, UINT uHeight, D3DFORMAT fmt, D3DMULTISAMPLE_TYPE mst, CSurface8** ppSurface);
    virtual HRESULT     CreateImageSurface(UINT uWidth, UINT uHeight, D3DFORMAT fmt, CSurface8** ppSurface);
    virtual HRESULT     CreateIndexBuffer(UINT uLength, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CIndexBuffer8** ppIndexBuffer);
    virtual HRESULT     CreateRenderTarget(UINT uWidth, UINT uHeight, D3DFORMAT fmt, D3DMULTISAMPLE_TYPE mst, BOOL bLockable, CSurface8** ppSurface);
    virtual HRESULT     CreateTexture(UINT uWidth, UINT uHeight, UINT uLevels, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CTexture8** ppTexture);
    virtual HRESULT     CreateVertexBuffer(UINT uLength, DWORD dwUsage, DWORD dwFVF, D3DPOOL pool, CVertexBuffer8** ppVertexBuffer);
    virtual HRESULT     CreateVolumeTexture(UINT uWidth, UINT uHeight, UINT uDepth, UINT uLevels, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CVolumeTexture8** ppVolumeTexture);
#ifdef UNDER_XBOX
    virtual HRESULT     CreatePalette(D3DPALETTESIZE Size, CPalette8** ppPalette);
#endif

    // Device states

    virtual HRESULT     ApplyStateBlock(DWORD dwToken);
    virtual HRESULT     BeginStateBlock();
    virtual HRESULT     EndStateBlock(DWORD* pdwToken);
    virtual HRESULT     CreateStateBlock(D3DSTATEBLOCKTYPE sbt, DWORD* pdwToken);
    virtual HRESULT     DeleteStateBlock(DWORD dwToken);
    virtual HRESULT     CaptureStateBlock(DWORD dwToken);
#ifndef UNDER_XBOX
    virtual HRESULT     GetClipStatus(D3DCLIPSTATUS8* pd3dcs);
    virtual HRESULT     SetClipStatus(D3DCLIPSTATUS8* pd3dcs);
#endif // !UNDER_XBOX
    virtual HRESULT     GetRenderState(D3DRENDERSTATETYPE rst, DWORD* pdwValue);
    virtual HRESULT     SetRenderState(D3DRENDERSTATETYPE rst, DWORD dwValue);
    virtual HRESULT     GetRenderTarget(CSurface8** ppRenderTarget);
    virtual HRESULT     SetRenderTarget(CSurface8* pRenderTarget, CSurface8* pDepthStencil);
    virtual HRESULT     GetTransform(D3DTRANSFORMSTATETYPE tst, D3DMATRIX* pm);
    virtual HRESULT     SetTransform(D3DTRANSFORMSTATETYPE tst, D3DMATRIX* pm);
    virtual HRESULT     MultiplyTransform(D3DTRANSFORMSTATETYPE tst, D3DMATRIX* pm);

    // Viewports

    virtual HRESULT     Clear(DWORD dwCount, D3DRECT* prc, DWORD dwFlags, D3DCOLOR c, float fZ, DWORD dwStencil);
    virtual HRESULT     GetViewport(D3DVIEWPORT8* pviewport);
    virtual HRESULT     SetViewport(D3DVIEWPORT8* pviewport);

    // User-defined clip planes

    virtual HRESULT     GetClipPlane(DWORD dwIndex, float* pfPlane);
    virtual HRESULT     SetClipPlane(DWORD dwIndex, float* pfPlane);

    // Lights and materials

    virtual HRESULT     GetLight(DWORD dwIndex, D3DLIGHT8* plight);
    virtual HRESULT     SetLight(DWORD dwIndex, D3DLIGHT8* plight);
    virtual HRESULT     LightEnable(DWORD dwIndex, BOOL bEnable);
    virtual HRESULT     GetLightEnable(DWORD dwIndex, BOOL* pbEnable);
    virtual HRESULT     GetMaterial(D3DMATERIAL8* pmaterial);
    virtual HRESULT     SetMaterial(D3DMATERIAL8* pmaterial);
#ifdef UNDER_XBOX
    virtual HRESULT     GetBackMaterial(D3DMATERIAL8* pmaterial);
    virtual HRESULT     SetBackMaterial(D3DMATERIAL8* pmaterial);
#endif

    // Textures

    virtual HRESULT     GetTexture(DWORD dwStage, CBaseTexture8** ppTexture);
    virtual HRESULT     SetTexture(DWORD dwStage, CBaseTexture8* pTexture);
    virtual HRESULT     GetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE txsst, DWORD* pdwValue);
    virtual HRESULT     SetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE txsst, DWORD dwValue);
    virtual HRESULT     UpdateTexture(CBaseTexture8* pSourceTexture, CBaseTexture8* pDestinationTexture);
    virtual HRESULT     ValidateDevice(DWORD* pdwNumPasses);

    // Palettes

    virtual HRESULT     GetCurrentTexturePalette(UINT* puPaletteNumber);
    virtual HRESULT     SetCurrentTexturePalette(UINT uPaletteNumber);
    virtual HRESULT     GetPaletteEntries(UINT uPaletteNumber, PALETTEENTRY* ppe);
    virtual HRESULT     SetPaletteEntries(UINT uPaletteNumber, PALETTEENTRY* ppe);
#ifdef UNDER_XBOX
    virtual HRESULT     GetPalette(DWORD dwStage, CPalette8** ppPalette);
    virtual HRESULT     SetPalette(DWORD dwStage, CPalette8* pPalette);
#endif

    // Vertex shaders

    virtual HRESULT     CreateVertexShader(DWORD* pdwDeclaration, DWORD* pdwFunction, DWORD* pdwHandle, DWORD dwUsage);
    virtual HRESULT     CreateVertexShaderTok(DWORD* pdwDeclaration, DWORD* pdwFunction, DWORD* pdwHandle, DWORD dwUsage);
    virtual HRESULT     CreateVertexShaderAsm(DWORD* pdwDeclaration, LPVOID pvSourceCode, UINT uCodeLength, DWORD* pdwHandle, DWORD dwUsage);
    virtual HRESULT     DeleteVertexShader(DWORD dwHandle);
    virtual HRESULT     GetVertexShader(DWORD* pdwHandle);
    virtual HRESULT     SetVertexShader(DWORD dwHandle);
    virtual HRESULT     GetVertexShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount);
    virtual HRESULT     SetVertexShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount);
    virtual HRESULT     GetVertexShaderDeclaration(DWORD dwHandle, void* pvData, DWORD* pdwSizeOfData);
    virtual HRESULT     GetVertexShaderFunction(DWORD dwHandle, void* pvData, DWORD* pdwSizeOfData);
#ifdef UNDER_XBOX
    virtual HRESULT     SetShaderConstantMode(D3DSHADERCONSTANTMODE Mode);
    virtual HRESULT     GetShaderConstantMode(D3DSHADERCONSTANTMODE *pMode);
    virtual HRESULT     LoadVertexShader(DWORD dwHandle, DWORD dwAddress);
    virtual HRESULT     SelectVertexShader(DWORD dwHandle, DWORD dwAddress);
    virtual HRESULT     RunVertexStateShader(DWORD dwAddress, CONST float* pfData);
    virtual HRESULT     GetVertexShaderSize(DWORD dwHandle, UINT* puSize);
    virtual HRESULT     GetVertexShaderType(DWORD dwHandle, DWORD* pdwType);
#endif

    // Pixel shaders

#ifndef UNDER_XBOX
    virtual HRESULT     CreatePixelShader(DWORD* pdwFunction, DWORD* pdwHandle);
#else
    virtual HRESULT     CreatePixelShader(const D3DPIXELSHADERDEF* pd3dpsdFunction, DWORD* pdwHandle);
#endif // UNDER_XBOX
    virtual HRESULT     CreatePixelShaderTok(DWORD* pdwFunction, DWORD* pdwHandle);
    virtual HRESULT     CreatePixelShaderAsm(LPVOID pvSourceCode, UINT uCodeLength, DWORD* pdwHandle);
    virtual HRESULT     DeletePixelShader(DWORD dwHandle);
    virtual HRESULT     GetPixelShader(DWORD* pdwHandle);
    virtual HRESULT     SetPixelShader(DWORD dwHandle);
    virtual HRESULT     GetPixelShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount);
    virtual HRESULT     SetPixelShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount);
#ifndef UNDER_XBOX
    virtual HRESULT     GetPixelShaderFunction(DWORD dwHandle, void* pvData, DWORD* pdwSizeOfData);
#else
    virtual HRESULT     GetPixelShaderFunction(DWORD dwHandle, D3DPIXELSHADERDEF* pd3dpsd);
#endif // UNDER_XBOX

    // Presentation

#ifndef UNDER_XBOX
    virtual HRESULT     Present(RECT* prectSrc, RECT* prectDst, HWND hDestWindowOverride, RGNDATA* prgnDirtyRegion);
#else
    virtual HRESULT     Present(RECT* prectSrc, RECT* prectDst, void* hDestWindowOverride, void* prgnDirtyRegion);
#endif // UNDER_XBOX
    virtual HRESULT     Reset(D3DPRESENT_PARAMETERS* pd3dpp);

    // Scenes

    virtual HRESULT     BeginScene();
    virtual HRESULT     EndScene();

    // Rendering

    virtual HRESULT     DrawIndexedPrimitive(D3DPRIMITIVETYPE d3dpt, UINT uMinVertexToShade, UINT uNumVerticesToShade, UINT uStartIndex, UINT uPrimitiveCount);
    virtual HRESULT     DrawIndexedPrimitiveUP(D3DPRIMITIVETYPE d3dpt, UINT uMinVertexToShade, UINT uNumVerticesToShade, UINT uPrimitiveCount, void* pvIndices, D3DFORMAT fmtIndex, void* pvVertices, UINT uStride);
    virtual HRESULT     DrawPrimitive(D3DPRIMITIVETYPE d3dpt, UINT uStartVertex, UINT uPrimitiveCount);
    virtual HRESULT     DrawPrimitiveUP(D3DPRIMITIVETYPE d3dpt, UINT uPrimitiveCount, void* pvVertices, UINT uStride);
#ifdef UNDER_XBOX
    virtual HRESULT     DrawVertices(D3DPRIMITIVETYPE d3dpt, UINT uStartVertex, UINT uVertexCount);
    virtual HRESULT     DrawIndexedVertices(D3DPRIMITIVETYPE d3dpt, UINT uStartIndex, CONST WORD* pwIndices);
    virtual HRESULT     DrawVerticesUP(D3DPRIMITIVETYPE d3dpt, UINT uVertexCount, CONST void* pvVertices, UINT uStride);
    virtual HRESULT     DrawIndexedVerticesUP(D3DPRIMITIVETYPE d3dpt, UINT uVertexCount, CONST void* pvIndices, CONST void* pvVertices, UINT uStride);
    virtual HRESULT     PrimeVertexCache(UINT VertexCount, CONST WORD *pIndexData);
    virtual HRESULT     Begin(D3DPRIMITIVETYPE d3dpt);
    virtual HRESULT     End();
    virtual void        KickPushBuffer();
#endif

    // High order surfaces

    virtual HRESULT     DeletePatch(UINT uHandle);
    virtual HRESULT     DrawRectPatch(UINT uHandle, float* pfNumSegs, D3DRECTPATCH_INFO* prpi);
    virtual HRESULT     DrawTriPatch(UINT uHandle, float* pfNumSegs, D3DTRIPATCH_INFO* ptpi);

    // Stream data

    virtual HRESULT     GetStreamSource(UINT uStream, CVertexBuffer8** ppVertexData, UINT* puStride);
    virtual HRESULT     SetStreamSource(UINT uStream, CVertexBuffer8* pVertexData, UINT uStride);

    // Index data

    virtual HRESULT     GetIndices(CIndexBuffer8** ppIndexData, UINT* puBaseIndex);
    virtual HRESULT     SetIndices(CIndexBuffer8* pIndexData, UINT uBaseIndex);

    // Information

    virtual UINT        GetAvailableTextureMem();
    virtual HRESULT     GetCreationParameters(D3DDEVICE_CREATION_PARAMETERS* pd3dcp);
    virtual HRESULT     GetDeviceCaps(D3DCAPS8* pd3dcaps);
    virtual HRESULT     GetDirect3D(CDirect3D8** ppDirect3D8);
    virtual HRESULT     GetInfo(DWORD dwDevInfoType, void* pvDevInfo, DWORD dwDevInfoSize);
    virtual HRESULT     GetRasterStatus(D3DRASTER_STATUS* prast);
    virtual HRESULT     GetDisplayMode(D3DDISPLAYMODE* pMode);

    // Surfaces

    virtual HRESULT     GetBackBuffer(UINT uBackBuffer, D3DBACKBUFFER_TYPE bbt, CSurface8** ppBackBuffer);
    virtual HRESULT     GetDepthStencilSurface(CSurface8** ppZStencilSurface);

    // Gamma ramps

    virtual void        GetGammaRamp(D3DGAMMARAMP* pgrRamp);
    virtual void        SetGammaRamp(DWORD dwFlags, D3DGAMMARAMP* pgrRamp);

    // Miscellaneous

    virtual HRESULT     CopyRects(CSurface8* pSrcSurface, RECT* prectSrcRects, UINT uNumSrcRects, CSurface8* pDstSurface, POINT* ppntDstPoints);
    virtual HRESULT     GetFrontBuffer(CSurface8* pDstSurface);
    virtual HRESULT     ProcessVertices(UINT uStartVertexSrc, UINT uStartVertexDst, UINT uNumVertices, CVertexBuffer8* pDstBuffer, DWORD dwFlags);
    virtual HRESULT     ResourceManagerDiscardBytes(DWORD dwNumBytes);
    virtual HRESULT     TestCooperativeLevel();
#ifdef UNDER_XBOX
    virtual HRESULT     PersistDisplay();
    virtual HRESULT     SetTile(DWORD dwIndex, D3DTILE* pTile);
    virtual HRESULT     GetTile(DWORD dwIndex, D3DTILE* pTile);
#endif

    // Cursors

    virtual void        SetCursorPosition(UINT uSX, UINT uSY, DWORD dwFlags);
    virtual HRESULT     SetCursorProperties(UINT uHotSpotX, UINT uHotSpotY, CSurface8* pCursorBitmap);
    virtual BOOL        ShowCursor(BOOL bShow);

#ifdef UNDER_XBOX

    // Visibility testing

    virtual HRESULT     BeginVisibilityTest();
    virtual HRESULT     EndVisibilityTest(DWORD dwIndex);
    virtual HRESULT     GetVisibilityTestResult(DWORD dwIndex, UINT* puResult, ULONGLONG* puuTimeStamp);

    // Persistent vertex attributes

    virtual HRESULT     SetVertexData2f(int nRegister, float a, float b);
    virtual HRESULT     SetVertexData4f(int nRegister, float a, float b, float c, float d);
    virtual HRESULT     SetVertexData2s(int nRegister, short a, short b);
    virtual HRESULT     SetVertexData4s(int nRegister, short a, short b, short c, short d);
    virtual HRESULT     SetVertexData4ub(int nRegister, BYTE a, BYTE b, BYTE c, BYTE d);

    // Notifications

    virtual BOOL        IsBusy();
    virtual void        BlockUntilIdle();
#ifndef UNDER_XBOX
    virtual void        SetVerticalBlankCallback(D3DCALLBACK pCallback);
#else
    virtual void        SetVerticalBlankCallback(D3DVBLANKCALLBACK pCallback);
#endif
    virtual void        BlockUntilVerticalBlank();
    virtual DWORD       InsertFence();
    virtual BOOL        IsFencePending(DWORD dwFence);
    virtual void        BlockOnFence(DWORD dwFence);
    virtual void        InsertCallback(D3DCALLBACKTYPE Type, D3DCALLBACK pCallback, DWORD dwContext);

    // Push buffers

    virtual HRESULT     BeginPushBuffer(void* pvBuffer, UINT uSize);
    virtual HRESULT     EndPushBuffer(D3DPushBuffer* pPushBuffer);
    virtual HRESULT     RunPushBuffer(D3DPushBuffer* pPushBuffer, DWORD* pdwFixUps);
    virtual HRESULT     GetPushBufferOffset(DWORD* pdwOffset);
    virtual HRESULT     GetProjectionViewportMatrix(D3DMATRIX* pmMatrix);
    virtual HRESULT     SetModelView(CONST D3DMATRIX* pmModelView, CONST D3DMATRIX* pmInverseModelView, CONST D3DMATRIX* pmComposite);
    virtual HRESULT     GetModelView(D3DMATRIX* pmModelView);

    virtual HRESULT     SetVertexBlendModelView(UINT uCount, CONST D3DMATRIX* pmModelViews, CONST D3DMATRIX* pmInverseModelViews, CONST D3DMATRIX* pProjectionViewport);
    virtual HRESULT     GetVertexBlendModelView(UINT uCount, D3DMATRIX* pmModelViews, D3DMATRIX* pProjectionViewport);
    virtual HRESULT     SetVertexInput(ULONG uCount, CONST DWORD* pdwAddresses, CONST DWORD* pdwFormats);
    virtual HRESULT     GetVertexInput(ULONG uCount, DWORD* pdwAddresses, DWORD* pdwFormats);
    virtual void        FlushVertexCache();

#endif
};

//******************************************************************************
class CCDevice8 : public CDevice8 {

protected:

    CClient*            m_pClient;

    BOOL                m_bServerAffinity;
    BOOL                m_bVerifyFrames;
    float               m_fThreshold;
    float               m_fFrameMatch;
    UINT                m_uFramesPresented;
    DWORD               m_dwCRCTable[256];

    CTexture8*          m_pd3dtFrameSrc;
    CTexture8*          m_pd3dtFrameRef;
    CTexture8*          m_pd3dtFrameVar;
    UINT                m_uShowVerification;

    virtual void        OverlayVerificationResults();
    virtual BOOL        UpdateFBTexture(CTexture8* pd3dtDst, LPDIRECT3DSURFACE8 pd3dsSrc);

public:

                        CCDevice8();
                        ~CCDevice8();
    virtual BOOL        Create(CClient* pClient, CDirect3D8* pDirect3D, LPDIRECT3DDEVICE8 pd3dd);

    virtual 
    LPDIRECT3DSURFACE8  GetFrontBufferContents();
    virtual DWORD       ComputeSurfaceCRC32(LPDIRECT3DSURFACE8 pd3ds);
    virtual float       CompareFrames(LPDIRECT3DSURFACE8 pd3dsSrc, LPDIRECT3DSURFACE8 pd3dsRef, LPDIRECT3DSURFACE8 pd3dsDelta);

    virtual void        EnableFrameVerification(BOOL bEnable);
    virtual void        SetVerificationThreshold(float fThreshold);
    virtual void        EnableVerificationDisplay(BOOL bEnable);
    virtual void        ToggleVerificationDisplay();

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Resource Creation

#ifndef UNDER_XBOX
    virtual HRESULT     CreateAdditionalSwapChain(D3DPRESENT_PARAMETERS* pd3dpp, CSwapChain8** ppSwapChain);
#endif // !UNDER_XBOX
    virtual HRESULT     CreateCubeTexture(UINT uEdgeLength, UINT uLevels, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CCubeTexture8** ppCubeTexture);
    virtual HRESULT     CreateDepthStencilSurface(UINT uWidth, UINT uHeight, D3DFORMAT fmt, D3DMULTISAMPLE_TYPE mst, CSurface8** ppSurface);
    virtual HRESULT     CreateImageSurface(UINT uWidth, UINT uHeight, D3DFORMAT fmt, CSurface8** ppSurface);
    virtual HRESULT     CreateIndexBuffer(UINT uLength, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CIndexBuffer8** ppIndexBuffer);
    virtual HRESULT     CreateRenderTarget(UINT uWidth, UINT uHeight, D3DFORMAT fmt, D3DMULTISAMPLE_TYPE mst, BOOL bLockable, CSurface8** ppSurface);
    virtual HRESULT     CreateTexture(UINT uWidth, UINT uHeight, UINT uLevels, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CTexture8** ppTexture);
    virtual HRESULT     CreateVertexBuffer(UINT uLength, DWORD dwUsage, DWORD dwFVF, D3DPOOL pool, CVertexBuffer8** ppVertexBuffer);
    virtual HRESULT     CreateVolumeTexture(UINT uWidth, UINT uHeight, UINT uDepth, UINT uLevels, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CVolumeTexture8** ppVolumeTexture);

    // Device states

    virtual HRESULT     ApplyStateBlock(DWORD dwToken);
    virtual HRESULT     BeginStateBlock();
    virtual HRESULT     EndStateBlock(DWORD* pdwToken);
    virtual HRESULT     CreateStateBlock(D3DSTATEBLOCKTYPE sbt, DWORD* pdwToken);
    virtual HRESULT     DeleteStateBlock(DWORD dwToken);
    virtual HRESULT     CaptureStateBlock(DWORD dwToken);
#ifndef UNDER_XBOX
    virtual HRESULT     GetClipStatus(D3DCLIPSTATUS8* pd3dcs);
    virtual HRESULT     SetClipStatus(D3DCLIPSTATUS8* pd3dcs);
#endif // !UNDER_XBOX
    virtual HRESULT     GetRenderState(D3DRENDERSTATETYPE rst, DWORD* pdwValue);
    virtual HRESULT     SetRenderState(D3DRENDERSTATETYPE rst, DWORD dwValue);
    virtual HRESULT     GetRenderTarget(CSurface8** ppRenderTarget);
    virtual HRESULT     SetRenderTarget(CSurface8* pRenderTarget, CSurface8* pDepthStencil);
    virtual HRESULT     GetTransform(D3DTRANSFORMSTATETYPE tst, D3DMATRIX* pm);
    virtual HRESULT     SetTransform(D3DTRANSFORMSTATETYPE tst, D3DMATRIX* pm);
    virtual HRESULT     MultiplyTransform(D3DTRANSFORMSTATETYPE tst, D3DMATRIX* pm);

    // Viewports

    virtual HRESULT     Clear(DWORD dwCount, D3DRECT* prc, DWORD dwFlags, D3DCOLOR c, float fZ, DWORD dwStencil);
    virtual HRESULT     GetViewport(D3DVIEWPORT8* pviewport);
    virtual HRESULT     SetViewport(D3DVIEWPORT8* pviewport);

    // User-defined clip planes

    virtual HRESULT     GetClipPlane(DWORD dwIndex, float* pfPlane);
    virtual HRESULT     SetClipPlane(DWORD dwIndex, float* pfPlane);

    // Lights and materials

    virtual HRESULT     GetLight(DWORD dwIndex, D3DLIGHT8* plight);
    virtual HRESULT     SetLight(DWORD dwIndex, D3DLIGHT8* plight);
    virtual HRESULT     LightEnable(DWORD dwIndex, BOOL bEnable);
    virtual HRESULT     GetLightEnable(DWORD dwIndex, BOOL* pbEnable);
    virtual HRESULT     GetMaterial(D3DMATERIAL8* pmaterial);
    virtual HRESULT     SetMaterial(D3DMATERIAL8* pmaterial);

    // Textures

    virtual HRESULT     GetTexture(DWORD dwStage, CBaseTexture8** ppTexture);
    virtual HRESULT     SetTexture(DWORD dwStage, CBaseTexture8* pTexture);
    virtual HRESULT     GetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE txsst, DWORD* pdwValue);
    virtual HRESULT     SetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE txsst, DWORD dwValue);
    virtual HRESULT     UpdateTexture(CBaseTexture8* pSourceTexture, CBaseTexture8* pDestinationTexture);
    virtual HRESULT     ValidateDevice(DWORD* pdwNumPasses);

    // Palettes

    virtual HRESULT     GetCurrentTexturePalette(UINT* puPaletteNumber);
    virtual HRESULT     SetCurrentTexturePalette(UINT uPaletteNumber);
    virtual HRESULT     GetPaletteEntries(UINT uPaletteNumber, PALETTEENTRY* ppe);
    virtual HRESULT     SetPaletteEntries(UINT uPaletteNumber, PALETTEENTRY* ppe);

    // Vertex shaders

    virtual HRESULT     CreateVertexShader(DWORD* pdwDeclaration, DWORD* pdwFunction, DWORD* pdwHandle, DWORD dwUsage);
    virtual HRESULT     CreateVertexShaderTok(DWORD* pdwDeclaration, DWORD* pdwFunction, DWORD* pdwHandle, DWORD dwUsage);
    virtual HRESULT     CreateVertexShaderAsm(DWORD* pdwDeclaration, LPVOID pvSourceCode, UINT uCodeLength, DWORD* pdwHandle, DWORD dwUsage);
    virtual HRESULT     DeleteVertexShader(DWORD dwHandle);
    virtual HRESULT     GetVertexShader(DWORD* pdwHandle);
    virtual HRESULT     SetVertexShader(DWORD dwHandle);
    virtual HRESULT     GetVertexShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount);
    virtual HRESULT     SetVertexShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount);
    virtual HRESULT     GetVertexShaderDeclaration(DWORD dwHandle, void* pvData, DWORD* pdwSizeOfData);
    virtual HRESULT     GetVertexShaderFunction(DWORD dwHandle, void* pvData, DWORD* pdwSizeOfData);

    // Pixel shaders

#ifndef UNDER_XBOX
    virtual HRESULT     CreatePixelShader(DWORD* pdwFunction, DWORD* pdwHandle);
#else
    virtual HRESULT     CreatePixelShader(const D3DPIXELSHADERDEF* pd3dpsdFunction, DWORD* pdwHandle);
#endif // UNDER_XBOX
    virtual HRESULT     CreatePixelShaderTok(DWORD* pdwFunction, DWORD* pdwHandle);
    virtual HRESULT     CreatePixelShaderAsm(LPVOID pvSourceCode, UINT uCodeLength, DWORD* pdwHandle);
    virtual HRESULT     DeletePixelShader(DWORD dwHandle);
    virtual HRESULT     GetPixelShader(DWORD* pdwHandle);
    virtual HRESULT     SetPixelShader(DWORD dwHandle);
    virtual HRESULT     GetPixelShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount);
    virtual HRESULT     SetPixelShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount);
#ifndef UNDER_XBOX
    virtual HRESULT     GetPixelShaderFunction(DWORD dwHandle, void* pvData, DWORD* pdwSizeOfData);
#else
    virtual HRESULT     GetPixelShaderFunction(DWORD dwHandle, D3DPIXELSHADERDEF* pd3dpsd);
#endif // UNDER_XBOX

    // Presentation

#ifndef UNDER_XBOX
    virtual HRESULT     Present(RECT* prectSrc, RECT* prectDst, HWND hDestWindowOverride, RGNDATA* prgnDirtyRegion);
#else
    virtual HRESULT     Present(RECT* prectSrc, RECT* prectDst, void* hDestWindowOverride, void* prgnDirtyRegion);
#endif // UNDER_XBOX
    virtual HRESULT     Reset(D3DPRESENT_PARAMETERS* pd3dpp);

    // Scenes

    virtual HRESULT     BeginScene();
    virtual HRESULT     EndScene();

    // Rendering

    virtual HRESULT     DrawIndexedPrimitive(D3DPRIMITIVETYPE d3dpt, UINT uMinVertexToShade, UINT uNumVerticesToShade, UINT uStartIndex, UINT uPrimitiveCount);
    virtual HRESULT     DrawIndexedPrimitiveUP(D3DPRIMITIVETYPE d3dpt, UINT uMinVertexToShade, UINT uNumVerticesToShade, UINT uPrimitiveCount, void* pvIndices, D3DFORMAT fmtIndex, void* pvVertices, UINT uStride);
    virtual HRESULT     DrawPrimitive(D3DPRIMITIVETYPE d3dpt, UINT uStartVertex, UINT uPrimitiveCount);
    virtual HRESULT     DrawPrimitiveUP(D3DPRIMITIVETYPE d3dpt, UINT uPrimitiveCount, void* pvVertices, UINT uStride);

    // High order surfaces

    virtual HRESULT     DeletePatch(UINT uHandle);
    virtual HRESULT     DrawRectPatch(UINT uHandle, float* pfNumSegs, D3DRECTPATCH_INFO* prpi);
    virtual HRESULT     DrawTriPatch(UINT uHandle, float* pfNumSegs, D3DTRIPATCH_INFO* ptpi);

    // Stream data

    virtual HRESULT     GetStreamSource(UINT uStream, CVertexBuffer8** ppVertexData, UINT* puStride);
    virtual HRESULT     SetStreamSource(UINT uStream, CVertexBuffer8* pVertexData, UINT uStride);

    // Index data

    virtual HRESULT     GetIndices(CIndexBuffer8** ppIndexData, UINT* puBaseIndex);
    virtual HRESULT     SetIndices(CIndexBuffer8* pIndexData, UINT uBaseIndex);

    // Information

    virtual UINT        GetAvailableTextureMem();
    virtual HRESULT     GetCreationParameters(D3DDEVICE_CREATION_PARAMETERS* pd3dcp);
    virtual HRESULT     GetDeviceCaps(D3DCAPS8* pd3dcaps);
    virtual HRESULT     GetDirect3D(CDirect3D8** ppDirect3D8);
    virtual HRESULT     GetInfo(DWORD dwDevInfoType, void* pvDevInfo, DWORD dwDevInfoSize);
    virtual HRESULT     GetRasterStatus(D3DRASTER_STATUS* prast);
    virtual HRESULT     GetDisplayMode(D3DDISPLAYMODE* pMode);

    // Surfaces

    virtual HRESULT     GetBackBuffer(UINT uBackBuffer, D3DBACKBUFFER_TYPE bbt, CSurface8** ppBackBuffer);
    virtual HRESULT     GetDepthStencilSurface(CSurface8** ppZStencilSurface);

    // Gamma ramps

    virtual void        GetGammaRamp(D3DGAMMARAMP* pgrRamp);
    virtual void        SetGammaRamp(DWORD dwFlags, D3DGAMMARAMP* pgrRamp);

    // Miscellaneous

    virtual HRESULT     CopyRects(CSurface8* pSrcSurface, RECT* prectSrcRects, UINT uNumSrcRects, CSurface8* pDstSurface, POINT* ppntDstPoints);
    virtual HRESULT     GetFrontBuffer(CSurface8* pDstSurface);
    virtual HRESULT     ProcessVertices(UINT uStartVertexSrc, UINT uStartVertexDst, UINT uNumVertices, CVertexBuffer8* pDstBuffer, DWORD dwFlags);
    virtual HRESULT     ResourceManagerDiscardBytes(DWORD dwNumBytes);
    virtual HRESULT     TestCooperativeLevel();

    // Cursors

    virtual void        SetCursorPosition(UINT uSX, UINT uSY, DWORD dwFlags);
    virtual HRESULT     SetCursorProperties(UINT uHotSpotX, UINT uHotSpotY, CSurface8* pCursorBitmap);
    virtual BOOL        ShowCursor(BOOL bShow);
};

#endif //__DEVICE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\cubetex.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    cubetex.h

Description:

    IDirect3DTexture classes.

*******************************************************************************/

#ifndef __CUBETEX_H__
#define __CUBETEX_H__

//******************************************************************************
// CBaseTexture
//******************************************************************************

//******************************************************************************
class CCubeTexture : public CBaseTexture {

protected:

public:

                        CCubeTexture();
                        ~CCubeTexture();
};

//******************************************************************************
class CCubeTexture8 : public CBaseTexture8 {

protected:

    LPDIRECT3DCUBETEXTURE8 m_pd3dtc;

public:

                        CCubeTexture8();
                        ~CCubeTexture8();
    virtual BOOL        Create(CDevice8* pDevice, LPDIRECT3DCUBETEXTURE8 pd3dtc);

    virtual LPDIRECT3DCUBETEXTURE8 GetIDirect3DCubeTexture8();

    // Information

    virtual HRESULT     GetLevelDesc(UINT uLevel, D3DSURFACE_DESC* pd3dsd);

    // Locking surfaces

    virtual HRESULT     LockRect(D3DCUBEMAP_FACES d3dcf, UINT uLevel, D3DLOCKED_RECT* pd3dlr, RECT* prect, DWORD dwFlags);
    virtual HRESULT     UnlockRect(D3DCUBEMAP_FACES d3dcf, UINT uLevel);

    // Miscellaneous

    virtual HRESULT     AddDirtyRect(D3DCUBEMAP_FACES d3dcf, RECT* prectDirty);
    virtual HRESULT     GetCubeMapSurface(D3DCUBEMAP_FACES d3dcf, UINT uLevel, CSurface8** ppCubeMapSurface);
};

//******************************************************************************
class CCCubeTexture8 : public CCubeTexture8 {

protected:

    CClient*            m_pClient;

    PSLOCKDESC          m_pslockd[6];

public:

                        CCCubeTexture8();
                        ~CCCubeTexture8();
    virtual BOOL        Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DCUBETEXTURE8 pd3dtc);

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Resource information

    virtual 
    D3DRESOURCETYPE     GetType();
    virtual HRESULT     GetDevice(CDevice8** ppDevice);

    // Resource private surface data

    virtual HRESULT     GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData);
    virtual HRESULT     SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags);
    virtual HRESULT     FreePrivateData(REFGUID refguid);

    // Resource management

    virtual DWORD       GetPriority();
    virtual DWORD       SetPriority(DWORD dwNewPriority);
    virtual void        PreLoad();

    // Base texture information

    virtual DWORD       GetLevelCount();

    // Base texture detail

    virtual DWORD       GetLOD();
    virtual DWORD       SetLOD(DWORD dwNewLOD);

    // Information

    virtual HRESULT     GetLevelDesc(UINT uLevel, D3DSURFACE_DESC* pd3dsd);

    // Locking surfaces

    virtual HRESULT     LockRect(D3DCUBEMAP_FACES d3dcf, UINT uLevel, D3DLOCKED_RECT* pd3dlr, RECT* prect, DWORD dwFlags);
    virtual HRESULT     UnlockRect(D3DCUBEMAP_FACES d3dcf, UINT uLevel);

    // Miscellaneous

    virtual HRESULT     AddDirtyRect(D3DCUBEMAP_FACES d3dcf, RECT* prectDirty);
    virtual HRESULT     GetCubeMapSurface(D3DCUBEMAP_FACES d3dcf, UINT uLevel, CSurface8** ppCubeMapSurface);
};

#endif // __CUBETEX_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\display.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    display.h

Author:

    Matt Bronder

Description:

    Direct3D initialization routines.

*******************************************************************************/

#ifndef __INIT_H__
#define __INIT_H__

#include "enum.h"
#include "input.h"

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define KEY_LEFT                0x0001
#define KEY_RIGHT               0x0002
#define KEY_UP                  0x0004
#define KEY_DOWN                0x0008
#define KEY_ADD                 0x0010
#define KEY_SUBTRACT            0x0020
#define KEY_HOME                0x0040
#define KEY_END                 0x0080
#define KEY_INSERT              0x0100
#define KEY_DELETE              0x0200
#define KEY_PAGEUP              0x0400
#define KEY_PAGEDOWN            0x0800
#define KEY_SHIFT               0x1000

//******************************************************************************
// Data types
//******************************************************************************

typedef DWORD                   KEYSDOWN;

typedef BOOL                    (* SETDEVICEPROC)(LPVOID);
typedef void                    (* CLEARDEVICEPROC)(LPVOID);
typedef BOOL                    (* SUBWNDPROC)(LPVOID, LRESULT*, HWND, UINT, WPARAM, LPARAM);

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _DISPLAYDESC {
    PADAPTERDESC        padpd;
    PDEVICEDESC         pdevd;
    PDISPLAYMODE        pdm;
    UINT                uNumBackBuffers;
    BOOL                bWindowed;
    BOOL                bDepthBuffer;
    BOOL                bAntialias;
} DISPLAYDESC, *PDISPLAYDESC;

//******************************************************************************
typedef struct _D3DCREATIONDESC {
    D3DDEVTYPE          d3ddt;
    BOOL                bWindowed;
    D3DDISPLAYMODE      d3ddm;
    RECT                rectWnd;
    BOOL                bDepthBuffer;
    D3DFORMAT           fmtd;
    BOOL                bAntialias;
    D3DMULTISAMPLE_TYPE mst;
    UINT                uNumBackBuffers;
    UINT                uPresentInterval;
    DWORD               dwBehavior;
} D3DCREATIONDESC, *PD3DCREATIONDESC;

//******************************************************************************
typedef struct _CAMERA {
	D3DXVECTOR3         vPosition;
	D3DXVECTOR3         vInterest;
	float               fRoll;
	float               fFieldOfView;
	float               fNearPlane;
	float               fFarPlane;
} CAMERA, *PCAMERA;

//******************************************************************************
typedef enum _SERVERSTATUS {
    SERVER_NOTCONNECTED = 0,
    SERVER_CONNECTED    = 1,
    SERVER_DISCONNECTED = 2
} SERVERSTATUS;

//******************************************************************************
// CDisplay
//******************************************************************************

//******************************************************************************
class CDisplay : public CObject {

public:

    BOOL                        m_bTimeSync;

protected:

    CDirect3D8*                 m_pDirect3D;
    CDevice8*                   m_pDevice;

#ifdef UNDER_XBOX
    D3DSurface                  m_d3dsColorBuffer[3];
    D3DSurface                  m_d3dsDepthBuffer;
    LPVOID                      m_pvColorBuffer[3];
    LPVOID                      m_pvDepthBuffer;
#endif

    PADAPTERDESC                m_padpdList;
    DISPLAYDESC                 m_disdCurrent;

    HWND                        m_hWnd;
    RECT                        m_rectWnd;
    D3DPRESENT_PARAMETERS       m_d3dpp;
    D3DSURFACE_DESC             m_d3dsdBack;

    BOOL                        m_bActive;

    KEYSDOWN                    m_kdKeys;
    JOYSTATE                    m_jsJoys;
    JOYSTATE                    m_jsLast;

    CAMERA                      m_cam;
    float                       m_fCameraTDelta;
    float                       m_fCameraRDelta;

    BOOL                        m_bShowConsole;

    RECT                        m_rectBorder;

    BOOL                        m_bUseInput;
    BOOL                        m_bSwapSticks;

    DISPLAYDESC                 m_disdSelect;

    SETDEVICEPROC               m_pfnSetDevice;
    CLEARDEVICEPROC             m_pfnClearDevice;
    SUBWNDPROC                  m_pfnSubWndProc;

    LPVOID                      m_pvSetDeviceParam;
    LPVOID                      m_pvClearDeviceParam;
    LPVOID                      m_pvSubWndProcParam;

    CClient*                    m_pClient;

    static UINT                 m_uCreated;
    BOOL                        m_bCreated;

public:

                                CDisplay();
                                ~CDisplay();

    virtual BOOL                Create(PD3DCREATIONDESC pd3dcd = NULL);
    virtual BOOL                Reset(D3DPRESENT_PARAMETERS* pd3dpp);
    virtual BOOL                CreateDevice(D3DPRESENT_PARAMETERS* pd3dpp = NULL);
    virtual void                ReleaseDevice();
    virtual BOOL                ResetDevice();

    virtual BOOL                Update(PDISPLAYMODE pdm, BOOL bWindowed, 
                                    BOOL bDepthBuffer, BOOL bAntialias);
    virtual void                Select();

    virtual void                EnableInput(BOOL bEnable);
    virtual void                EnableRMC(BOOL bEnable);

    virtual void                ProcessInput();

    virtual void                EnableConsoleVisibility(BOOL bEnable);
    virtual void                ShowConsole();

    virtual BOOL                SetView(PCAMERA pcam = NULL);

    virtual void                InitSetDeviceProc(SETDEVICEPROC pfnSetDevice, LPVOID pvParam);
    virtual void                InitClearDeviceProc(CLEARDEVICEPROC pfnClearDevice, LPVOID pvParam);
    virtual void                InitSubWindowProc(SUBWNDPROC pfnSubWndProc, LPVOID pvParam);

    virtual void                EnableFrameVerification(BOOL bEnable);
    virtual void                SetVerificationThreshold(float fThreshold);

    virtual CDirect3D8*         GetDirect3D8();
    virtual CDevice8*           GetDevice8();
    virtual void                GetCurrentDisplay(PDISPLAYDESC pdisd);
    virtual PADAPTERDESC        GetDisplayList();
    virtual BOOL                IsActive();
    virtual HWND                GetWindow();
    virtual void                GetPresentParameters(D3DPRESENT_PARAMETERS* pd3dpp);
    virtual UINT                GetWidth();
    virtual UINT                GetHeight();
    virtual KEYSDOWN            GetKeyState();
    virtual void                GetJoyState(PJOYSTATE pjsCurrent, PJOYSTATE pjsLast);
    virtual void                GetCamera(PCAMERA pcam);
    virtual void                SetCamera(PCAMERA pcam);
    virtual void                SetCameraOffsets(float fTranslation, float fRotation);
    virtual BOOL                ConsoleVisible();
    virtual BOOL                IsWindowed();
    virtual BOOL                IsDepthBuffered();
    virtual SERVERSTATUS        GetConnectionStatus();
    virtual BOOL                RMCEnabled();

protected:

    LRESULT                     WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
    BOOL                        DisplayDlgProc(HWND hDlg, UINT message, WPARAM wParam, 
                                    LPARAM lParam);

    BOOL                        CreateDevice(PADAPTERDESC padpd, PDEVICEDESC pdevd, 
                                    PDISPLAYMODE pdm, UINT uNumBackBuffers, BOOL bWindowed, 
                                    BOOL bDepthBuffer, BOOL bAntialias);

#ifdef UNDER_XBOX

    HRESULT                     CreateDeviceAB(UINT uAdapter, D3DDEVTYPE d3ddt, void*, 
                                    DWORD dwFlags, D3DPRESENT_PARAMETERS* pd3dpp, 
                                    CDevice8** ppDevice);

    HRESULT                     ResetAB(D3DPRESENT_PARAMETERS* pd3dpp);

    HRESULT                     AllocateDeviceSurfaces(D3DPRESENT_PARAMETERS* pd3dpp, 
                                    D3DTILE* ptileColor, D3DTILE* ptileDepth);

#endif

    BOOL                        InitDeviceState();
    BOOL                        SetViewport(DWORD dwWidth, DWORD dwHeight);

    void                        UpdateCamera(PCAMERA pcam);

    BOOL                        MoveWindowTarget(int x, int y);
    BOOL                        SizeWindowTarget(int width, int height);

    HMENU                       CreateMainMenu();

    void                        AddDlgItemTemplate(LPWORD* ppw, WORD wClass, 
                                    LPWSTR wszText, WORD wId, short x, short y, 
                                    short cx, short cy, DWORD dwStyle);

    friend LRESULT CALLBACK     WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
    friend BOOL CALLBACK        DisplayDlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, 
                                    LPARAM lParam);
};

#endif //__INIT_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\direct3d.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    direct3d.h

Description:

    IDirect3D classes.

*******************************************************************************/

#ifndef __DIRECT3D_H__
#define __DIRECT3D_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#if defined(DEBUG) || defined(_DEBUG)
#define D3DLOCUS_DEBUG
#endif

#define ERR_NOTCREATED          CO_E_NOTINITIALIZED
#define ERR_LOCUSFAIL           E_FAIL

//******************************************************************************
// CDirect3D
//******************************************************************************

//******************************************************************************
class CDirect3D : public CObject {

protected:

public:

                        CDirect3D();
                        ~CDirect3D();
};

//******************************************************************************
class CDirect3D8 : public CDirect3D {

protected:

    LPDIRECT3D8         m_pd3d;

public:

                        CDirect3D8();
                        ~CDirect3D8();
    virtual BOOL        Create();

    virtual LPDIRECT3D8 GetIDirect3D8();

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Information

    virtual UINT        GetAdapterCount();
    virtual HRESULT     GetAdapterDisplayMode(UINT uAdapter, D3DDISPLAYMODE* pd3ddm);
    virtual HRESULT     GetAdapterIdentifier(UINT uAdapter, DWORD dwFlags, D3DADAPTER_IDENTIFIER8* pd3dai);
    virtual UINT        GetAdapterModeCount(UINT uAdapter);
    virtual HMONITOR    GetAdapterMonitor(UINT uAdapter);
    virtual HRESULT     GetDeviceCaps(UINT uAdapter, D3DDEVTYPE d3ddt, D3DCAPS8* pd3dcaps);

    // Enumeration

    virtual HRESULT     EnumAdapterModes(UINT uAdapter, UINT uMode, D3DDISPLAYMODE* pd3ddm);

    // Resistration

    virtual HRESULT     RegisterSoftwareDevice(void* pfnInitialize);
    
    // Verification

    virtual HRESULT     CheckDeviceFormat(UINT uAdapter, D3DDEVTYPE d3ddt, D3DFORMAT fmtAdapter, DWORD dwUsage, D3DRESOURCETYPE d3drt, D3DFORMAT fmtCheck);
    virtual HRESULT     CheckDeviceMultiSampleType(UINT uAdapter, D3DDEVTYPE d3ddt, D3DFORMAT fmtRenderTarget, BOOL bWindowed, D3DMULTISAMPLE_TYPE d3dmst);
    virtual HRESULT     CheckDeviceType(UINT uAdapter, D3DDEVTYPE d3ddtCheck, D3DFORMAT fmtDisplayMode, D3DFORMAT fmtBackBuffer, BOOL bWindowed);
    virtual HRESULT     CheckDepthStencilMatch(UINT uAdapter, D3DDEVTYPE d3ddt, D3DFORMAT fmtAdapter, D3DFORMAT fmtrRenderTarget, D3DFORMAT fmtdDepthStencil);

    // Creation

    virtual HRESULT     CreateDevice(UINT uAdapter, D3DDEVTYPE d3ddt, HWND hWndFocus, DWORD dwBehaviorFlags, D3DPRESENT_PARAMETERS* pd3dpp, class CDevice8** ppDevice);

#ifdef UNDER_XBOX
    virtual HRESULT     SetPushBufferSize(DWORD dwPushBufferSize, DWORD dwKickOffSize);
#endif
};

class CCDirect3D8 : public CDirect3D8 {

protected:

    CClient*            m_pClient;

public:
                        CCDirect3D8();
                        ~CCDirect3D8();
    virtual BOOL        Create(CClient* pClient);

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Information

    virtual UINT        GetAdapterCount();
    virtual HRESULT     GetAdapterDisplayMode(UINT uAdapter, D3DDISPLAYMODE* pd3ddm);
    virtual HRESULT     GetAdapterIdentifier(UINT uAdapter, DWORD dwFlags, D3DADAPTER_IDENTIFIER8* pd3dai);
    virtual UINT        GetAdapterModeCount(UINT uAdapter);
    virtual HMONITOR    GetAdapterMonitor(UINT uAdapter);
    virtual HRESULT     GetDeviceCaps(UINT uAdapter, D3DDEVTYPE d3ddt, D3DCAPS8* pd3dcaps);

    // Enumeration

    virtual HRESULT     EnumAdapterModes(UINT uAdapter, UINT uMode, D3DDISPLAYMODE* pd3ddm);

    // Resistration

    virtual HRESULT     RegisterSoftwareDevice(void* pfnInitialize);
    
    // Verification

    virtual HRESULT     CheckDeviceFormat(UINT uAdapter, D3DDEVTYPE d3ddt, D3DFORMAT fmtAdapter, DWORD dwUsage, D3DRESOURCETYPE d3drt, D3DFORMAT fmtCheck);
    virtual HRESULT     CheckDeviceMultiSampleType(UINT uAdapter, D3DDEVTYPE d3ddt, D3DFORMAT fmtRenderTarget, BOOL bWindowed, D3DMULTISAMPLE_TYPE d3dmst);
    virtual HRESULT     CheckDeviceType(UINT uAdapter, D3DDEVTYPE d3ddtCheck, D3DFORMAT fmtDisplayMode, D3DFORMAT fmtBackBuffer, BOOL bWindowed);
    virtual HRESULT     CheckDepthStencilMatch(UINT uAdapter, D3DDEVTYPE d3ddt, D3DFORMAT fmtAdapter, D3DFORMAT fmtrRenderTarget, D3DFORMAT fmtdDepthStencil);

    // Creation

    virtual HRESULT     CreateDevice(UINT uAdapter, D3DDEVTYPE d3ddt, HWND hWndFocus, DWORD dwBehaviorFlags, D3DPRESENT_PARAMETERS* pd3dpp, class CDevice8** ppDevice);
};

#endif // __DIRECT3D_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\device.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    device.cpp

Author:

    Matt Bronder

Description:

    CDevice methods.

*******************************************************************************/

#include "d3dlocus.h"

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif // UNDER_XBOX

#define FBSCALE 0.3f

//******************************************************************************
#ifdef UNDER_XBOX

#define RDH_RECTANGLES  1

typedef struct _RGNDATAHEADER {
    DWORD   dwSize;
    DWORD   iType;
    DWORD   nCount;
    DWORD   nRgnSize;
    RECT    rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER   rdh;
    char            Buffer[1];
} RGNDATA, *PRGNDATA, NEAR *NPRGNDATA, FAR *LPRGNDATA;

#endif // UNDER_XBOX

//******************************************************************************
// CDevice
//******************************************************************************

//******************************************************************************
CDevice::CDevice() {
}

//******************************************************************************
CDevice::~CDevice() {
}

//******************************************************************************
// CDevice8
//******************************************************************************

//******************************************************************************
CDevice8::CDevice8() {

    m_pd3dd = NULL;
    m_pObjectMap = NULL;
}

//******************************************************************************
CDevice8::~CDevice8() {

    if (m_pObjectMap) {
        delete m_pObjectMap;
    }
}

//******************************************************************************
BOOL CDevice8::Create(CDirect3D8* pDirect3D, LPDIRECT3DDEVICE8 pd3dd) {

    if (m_pd3dd) {
        return FALSE;
    }

    if (pDirect3D && pd3dd) {

        m_pObjectMap = new CMap32();
        if (!m_pObjectMap) {
            return FALSE;
        }

        m_pDirect3D = pDirect3D;

        m_pd3dd = pd3dd;
    }

    return (BOOL)m_pd3dd;
}

//******************************************************************************
ULONG CDevice8::AddRef() {

    ULONG uRef = 0;

    if (m_pd3dd) {
        uRef = m_pd3dd->AddRef();
        CObject::AddRef();
    }

    return uRef;
}

//******************************************************************************
ULONG CDevice8::Release() {

    ULONG uRef = 0;

    if (m_pd3dd) {
        uRef = m_pd3dd->Release();
        CObject::Release();
    }

    return uRef;
}

//******************************************************************************
LPDIRECT3DDEVICE8 CDevice8::GetIDirect3DDevice8() {

    return m_pd3dd;
}

//******************************************************************************
BOOL CDevice8::AddObject(LPVOID pvInterface, LPVOID pvObject) {

#ifdef D3DLOCUS_DEBUG
    if (!pvInterface || !pvObject || !m_pObjectMap) {
        return FALSE;
    }
#endif // D3DLOCUS_DEBUG

    return m_pObjectMap->Add((DWORD)pvInterface, (DWORD)pvObject);
}

//******************************************************************************
BOOL CDevice8::RemoveObject(LPVOID pvInterface) {

#ifdef D3DLOCUS_DEBUG
    if (!pvInterface || !m_pObjectMap) {
        return FALSE;
    }
#endif // D3DLOCUS_DEBUG

    return m_pObjectMap->Remove((DWORD)pvInterface);
}

//******************************************************************************
BOOL CDevice8::FindObject(LPVOID pvInterface, LPVOID* ppvObject) {

    LPVOID  pvObject;
    BOOL    bRet;

#ifdef D3DLOCUS_DEBUG
    if (!pvInterface) {
        return FALSE;
    }
#endif // D3DLOCUS_DEBUG

    bRet = m_pObjectMap->Find((DWORD)pvInterface, (LPDWORD)&pvObject);
    if (bRet && ppvObject) {
        *ppvObject = pvObject;
    }

    return bRet;
}

#ifndef UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::CreateAdditionalSwapChain(D3DPRESENT_PARAMETERS* pd3dpp, CSwapChain8** ppSwapChain) {

    CSwapChain8*         pSwapChain;
    LPDIRECT3DSWAPCHAIN8 pd3dsw;
    HRESULT              hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppSwapChain) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppSwapChain = NULL;

#ifndef DEMO_HACK
    hr = m_pd3dd->CreateAdditionalSwapChain(pd3dpp, &pd3dsw);
#else
    hr = E_NOTIMPL;
    pd3dsw = NULL;
#endif
    if (SUCCEEDED(hr)) {
        pSwapChain = new CSwapChain8();
        if (!pSwapChain) {
            pd3dsw->Release();
            return E_OUTOFMEMORY;
        }

        if (!pSwapChain->Create(this, pd3dsw)) {
            pd3dsw->Release();
            return ERR_LOCUSFAIL;
        }

        *ppSwapChain = pSwapChain;
    }

    return hr;
}

#endif // !UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::CreateCubeTexture(UINT uEdgeLength, UINT uLevels, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CCubeTexture8** ppCubeTexture) {

    CCubeTexture8*         pCubeTexture;
    LPDIRECT3DCUBETEXTURE8 pd3dtc;
    HRESULT                hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppCubeTexture) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppCubeTexture = NULL;

    hr = m_pd3dd->CreateCubeTexture(uEdgeLength, uLevels, dwUsage, fmt, pool, &pd3dtc);
    if (SUCCEEDED(hr)) {
        pCubeTexture = new CCubeTexture8();
        if (!pCubeTexture) {
            pd3dtc->Release();
            return E_OUTOFMEMORY;
        }

        if (!pCubeTexture->Create(this, pd3dtc)) {
            pd3dtc->Release();
            return ERR_LOCUSFAIL;
        }

        *ppCubeTexture = pCubeTexture;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::CreateDepthStencilSurface(UINT uWidth, UINT uHeight, D3DFORMAT fmt, D3DMULTISAMPLE_TYPE mst, CSurface8** ppSurface) {

    CSurface8*         pSurface;
    LPDIRECT3DSURFACE8 pd3ds;
    HRESULT            hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppSurface) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppSurface = NULL;

    hr = m_pd3dd->CreateDepthStencilSurface(uWidth, uHeight, fmt, mst, &pd3ds);
    if (SUCCEEDED(hr)) {
        pSurface = new CSurface8();
        if (!pSurface) {
            pd3ds->Release();
            return E_OUTOFMEMORY;
        }

        if (!pSurface->Create(this, pd3ds)) {
            pd3ds->Release();
            return ERR_LOCUSFAIL;
        }

        *ppSurface = pSurface;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::CreateImageSurface(UINT uWidth, UINT uHeight, D3DFORMAT fmt, CSurface8** ppSurface) {

    CSurface8*         pSurface;
    LPDIRECT3DSURFACE8 pd3ds;
    HRESULT            hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppSurface) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppSurface = NULL;

    hr = m_pd3dd->CreateImageSurface(uWidth, uHeight, fmt, &pd3ds);
    if (SUCCEEDED(hr)) {
        pSurface = new CSurface8();
        if (!pSurface) {
            pd3ds->Release();
            return E_OUTOFMEMORY;
        }

        if (!pSurface->Create(this, pd3ds)) {
            pd3ds->Release();
            return ERR_LOCUSFAIL;
        }

        *ppSurface = pSurface;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::CreateIndexBuffer(UINT uLength, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CIndexBuffer8** ppIndexBuffer) {

    CIndexBuffer8*         pIndexBuffer;
    LPDIRECT3DINDEXBUFFER8 pd3di;
    HRESULT                hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppIndexBuffer) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppIndexBuffer = NULL;

    hr = m_pd3dd->CreateIndexBuffer(uLength, dwUsage, fmt, pool, &pd3di);
    if (SUCCEEDED(hr)) {
        pIndexBuffer = new CIndexBuffer8();
        if (!pIndexBuffer) {
            pd3di->Release();
            return E_OUTOFMEMORY;
        }

        if (!pIndexBuffer->Create(this, pd3di)) {
            pd3di->Release();
            return ERR_LOCUSFAIL;
        }

        *ppIndexBuffer = pIndexBuffer;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::CreateRenderTarget(UINT uWidth, UINT uHeight, D3DFORMAT fmt, D3DMULTISAMPLE_TYPE mst, BOOL bLockable, CSurface8** ppSurface) {

    CSurface8*         pSurface;
    LPDIRECT3DSURFACE8 pd3ds;
    HRESULT            hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppSurface) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppSurface = NULL;

    hr = m_pd3dd->CreateRenderTarget(uWidth, uHeight, fmt, mst, bLockable, &pd3ds);
    if (SUCCEEDED(hr)) {
        pSurface = new CSurface8();
        if (!pSurface) {
            pd3ds->Release();
            return E_OUTOFMEMORY;
        }

        if (!pSurface->Create(this, pd3ds)) {
            pd3ds->Release();
            return ERR_LOCUSFAIL;
        }

        *ppSurface = pSurface;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::CreateTexture(UINT uWidth, UINT uHeight, UINT uLevels, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CTexture8** ppTexture) {

    CTexture8*         pTexture;
    LPDIRECT3DTEXTURE8 pd3dt;
    HRESULT            hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppTexture) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppTexture = NULL;

    hr = m_pd3dd->CreateTexture(uWidth, uHeight, uLevels, dwUsage, fmt, pool, &pd3dt);
    if (SUCCEEDED(hr)) {
        pTexture = new CTexture8();
        if (!pTexture) {
            pd3dt->Release();
            return E_OUTOFMEMORY;
        }

        if (!pTexture->Create(this, pd3dt)) {
            pd3dt->Release();
            return ERR_LOCUSFAIL;
        }

        *ppTexture = pTexture;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::CreateVertexBuffer(UINT uLength, DWORD dwUsage, DWORD dwFVF, D3DPOOL pool, CVertexBuffer8** ppVertexBuffer) {

    CVertexBuffer8*         pVertexBuffer;
    LPDIRECT3DVERTEXBUFFER8 pd3dr;
    HRESULT                 hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppVertexBuffer) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppVertexBuffer = NULL;

    hr = m_pd3dd->CreateVertexBuffer(uLength, dwUsage, dwFVF, pool, &pd3dr);
    if (SUCCEEDED(hr)) {
        pVertexBuffer = new CVertexBuffer8();
        if (!pVertexBuffer) {
            pd3dr->Release();
            return E_OUTOFMEMORY;
        }

        if (!pVertexBuffer->Create(this, pd3dr)) {
            pd3dr->Release();
            return ERR_LOCUSFAIL;
        }

        *ppVertexBuffer = pVertexBuffer;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::CreateVolumeTexture(UINT uWidth, UINT uHeight, UINT uDepth, UINT uLevels, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CVolumeTexture8** ppVolumeTexture) {

    CVolumeTexture8*         pVolumeTexture;
    LPDIRECT3DVOLUMETEXTURE8 pd3dtv;
    HRESULT                  hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppVolumeTexture) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppVolumeTexture = NULL;

    hr = m_pd3dd->CreateVolumeTexture(uWidth, uHeight, uDepth, uLevels, dwUsage, fmt, pool, &pd3dtv);
    if (SUCCEEDED(hr)) {
        pVolumeTexture = new CVolumeTexture8();
        if (!pVolumeTexture) {
            pd3dtv->Release();
            return E_OUTOFMEMORY;
        }

        if (!pVolumeTexture->Create(this, pd3dtv)) {
            pd3dtv->Release();
            return ERR_LOCUSFAIL;
        }

        *ppVolumeTexture = pVolumeTexture;
    }

    return hr;
}

#ifdef UNDER_XBOX
//******************************************************************************
HRESULT CDevice8::CreatePalette(D3DPALETTESIZE Size, CPalette8** ppPalette) {

    CPalette8*         pPalette;
    LPDIRECT3DPALETTE8 pd3dp;
    HRESULT            hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppPalette) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppPalette = NULL;

    hr = m_pd3dd->CreatePalette(Size, &pd3dp);
    if (SUCCEEDED(hr)) {
        pPalette = new CPalette8();
        if (!pPalette) {
            pd3dp->Release();
            return E_OUTOFMEMORY;
        }

        if (!pPalette->Create(this, pd3dp)) {
            pd3dp->Release();
            return ERR_LOCUSFAIL;
        }

        *ppPalette = pPalette;
    }

    return hr;
}
#endif // UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::ApplyStateBlock(DWORD dwToken) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->ApplyStateBlock(dwToken);
}

//******************************************************************************
HRESULT CDevice8::BeginStateBlock() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->BeginStateBlock();
}

//******************************************************************************
HRESULT CDevice8::EndStateBlock(DWORD* pdwToken) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->EndStateBlock(pdwToken);
}

//******************************************************************************
HRESULT CDevice8::CreateStateBlock(D3DSTATEBLOCKTYPE sbt, DWORD* pdwToken) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->CreateStateBlock(sbt, pdwToken);
}

//******************************************************************************
HRESULT CDevice8::DeleteStateBlock(DWORD dwToken) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DeleteStateBlock(dwToken);
}

//******************************************************************************
HRESULT CDevice8::CaptureStateBlock(DWORD dwToken) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->CaptureStateBlock(dwToken);
}

#ifndef UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::GetClipStatus(D3DCLIPSTATUS8* pd3dcs) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->GetClipStatus(pd3dcs);
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetClipStatus is not implemented on Xbox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDevice8::SetClipStatus(D3DCLIPSTATUS8* pd3dcs) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->SetClipStatus(pd3dcs);
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::SetClipStatus is not implemented on Xbox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

#endif // !UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::GetRenderState(D3DRENDERSTATETYPE rst, DWORD* pdwValue) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetRenderState(rst, pdwValue);
}

//******************************************************************************
HRESULT CDevice8::SetRenderState(D3DRENDERSTATETYPE rst, DWORD dwValue) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetRenderState(rst, dwValue);
}

//******************************************************************************
HRESULT CDevice8::GetRenderTarget(CSurface8** ppRenderTarget) {

    LPDIRECT3DSURFACE8  pd3ds;
    CSurface8*          pSurface;
    HRESULT             hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppRenderTarget) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppRenderTarget = NULL;

    hr = m_pd3dd->GetRenderTarget(&pd3ds);
    if (SUCCEEDED(hr)) {
        
        if (!m_pObjectMap->Find((DWORD)pd3ds, (LPDWORD)&pSurface)) {

            pSurface = new CSurface8();
            if (!pSurface) {
                pd3ds->Release();
                return E_OUTOFMEMORY;
            }

            if (!pSurface->Create(this, pd3ds)) {
                pd3ds->Release();
                return ERR_LOCUSFAIL;
            }
        }

        pSurface->CObject::AddRef();

        *ppRenderTarget = pSurface;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::SetRenderTarget(CSurface8* pRenderTarget, CSurface8* pDepthStencil) {

    LPDIRECT3DSURFACE8 pd3dsRenderTarget = NULL, pd3dsDepthStencil = NULL;
    LPDIRECT3DSURFACE8 pd3dsOldTarget, pd3dsOldDepth;
    CSurface8*         pSurface;
    HRESULT            hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    if (pRenderTarget) {
        pd3dsRenderTarget = pRenderTarget->GetIDirect3DSurface8();
        if (FAILED(m_pd3dd->GetRenderTarget(&pd3dsOldTarget))) {
            return ERR_LOCUSFAIL;
        }
        pd3dsOldTarget->Release();
    }
    if (pDepthStencil) {
        pd3dsDepthStencil = pDepthStencil->GetIDirect3DSurface8();
        if (FAILED(m_pd3dd->GetDepthStencilSurface(&pd3dsOldDepth))) {
            pd3dsOldDepth = NULL;
        }
        else {
            pd3dsOldDepth->Release();
        }
    }

    hr = m_pd3dd->SetRenderTarget(pd3dsRenderTarget, pd3dsDepthStencil);

    if (SUCCEEDED(hr)) {

        if (pRenderTarget) {
            pRenderTarget->CObject::AddRef();
            if (m_pObjectMap->Find((DWORD)pd3dsOldTarget, (LPDWORD)&pSurface)) {
                pSurface->CObject::Release();
            }
        }
        if (pDepthStencil) {
            pDepthStencil->CObject::AddRef();
            if (pd3dsOldDepth && m_pObjectMap->Find((DWORD)pd3dsOldDepth, (LPDWORD)&pSurface)) {
                pSurface->CObject::Release();
            }
        }
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::GetTransform(D3DTRANSFORMSTATETYPE tst, D3DMATRIX* pm) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetTransform(tst, pm);
}

//******************************************************************************
HRESULT CDevice8::SetTransform(D3DTRANSFORMSTATETYPE tst, D3DMATRIX* pm) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetTransform(tst, pm);
}

//******************************************************************************
HRESULT CDevice8::MultiplyTransform(D3DTRANSFORMSTATETYPE tst, D3DMATRIX* pm) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->MultiplyTransform(tst, pm);
}

//******************************************************************************
HRESULT CDevice8::Clear(DWORD dwCount, D3DRECT* prc, DWORD dwFlags, D3DCOLOR c, float fZ, DWORD dwStencil) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->Clear(dwCount, prc, dwFlags, c, fZ, dwStencil);
}

//******************************************************************************
HRESULT CDevice8::GetViewport(D3DVIEWPORT8* pviewport) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetViewport(pviewport);
}

//******************************************************************************
HRESULT CDevice8::SetViewport(D3DVIEWPORT8* pviewport) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetViewport(pviewport);
}

//******************************************************************************
HRESULT CDevice8::GetClipPlane(DWORD dwIndex, float* pfPlane) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->GetClipPlane(dwIndex, pfPlane);
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetClipPlane is not implemented on Xbox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDevice8::SetClipPlane(DWORD dwIndex, float* pfPlane) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->SetClipPlane(dwIndex, pfPlane);
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetClipPlane is not implemented on Xbox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDevice8::GetLight(DWORD dwIndex, D3DLIGHT8* plight) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetLight(dwIndex, plight);
}

//******************************************************************************
HRESULT CDevice8::SetLight(DWORD dwIndex, D3DLIGHT8* plight) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetLight(dwIndex, plight);
}

//******************************************************************************
HRESULT CDevice8::LightEnable(DWORD dwIndex, BOOL bEnable) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->LightEnable(dwIndex, bEnable);
}

//******************************************************************************
HRESULT CDevice8::GetLightEnable(DWORD dwIndex, BOOL* pbEnable) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetLightEnable(dwIndex, pbEnable);
}

//******************************************************************************
HRESULT CDevice8::GetMaterial(D3DMATERIAL8* pmaterial) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetMaterial(pmaterial);
}

//******************************************************************************
HRESULT CDevice8::SetMaterial(D3DMATERIAL8* pmaterial) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetMaterial(pmaterial);
}

#ifdef UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::GetBackMaterial(D3DMATERIAL8* pmaterial) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetBackMaterial(pmaterial);
}

//******************************************************************************
HRESULT CDevice8::SetBackMaterial(D3DMATERIAL8* pmaterial) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetBackMaterial(pmaterial);
}

#endif // UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::GetTexture(DWORD dwStage, CBaseTexture8** ppTexture) {

    CBaseTexture8*         pTexture;
    LPDIRECT3DBASETEXTURE8 pd3dt;
    HRESULT                hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppTexture) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppTexture = NULL;

    hr = m_pd3dd->GetTexture(dwStage, &pd3dt);
    if (SUCCEEDED(hr)) {
        if (!m_pObjectMap->Find((DWORD)pd3dt, (LPDWORD)&pTexture)) {
            return ERR_LOCUSFAIL;
        }
        pTexture->CObject::AddRef();
        *ppTexture = pTexture;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::SetTexture(DWORD dwStage, CBaseTexture8* pTexture) {

    LPDIRECT3DBASETEXTURE8 pd3dt = NULL;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG
    
    if (pTexture) {
        pd3dt = pTexture->GetIDirect3DBaseTexture8();
    }
    return m_pd3dd->SetTexture(dwStage, pd3dt);
}

//******************************************************************************
HRESULT CDevice8::GetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE txsst, DWORD* pdwValue) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetTextureStageState(dwStage, txsst, pdwValue);
}

//******************************************************************************
HRESULT CDevice8::SetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE txsst, DWORD dwValue) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetTextureStageState(dwStage, txsst, dwValue);
}

//******************************************************************************
HRESULT CDevice8::UpdateTexture(CBaseTexture8* pSourceTexture, CBaseTexture8* pDestinationTexture) {

    LPDIRECT3DBASETEXTURE8 pd3dtSrc = NULL, pd3dtDst = NULL;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    if (pSourceTexture) {
        pd3dtSrc = pSourceTexture->GetIDirect3DBaseTexture8();
    }
    if (pDestinationTexture) {
        pd3dtDst = pDestinationTexture->GetIDirect3DBaseTexture8();
    }

#ifdef D3DLOCUS_DEBUG
    if (!pd3dtSrc || !pd3dtDst) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->UpdateTexture(pd3dtSrc, pd3dtDst);

#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::UpdateTexture is not implemented on Xbox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDevice8::ValidateDevice(DWORD* pdwNumPasses) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->ValidateDevice(pdwNumPasses);
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::ValidateDevice is not implemented on Xbox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDevice8::GetCurrentTexturePalette(UINT* puPaletteNumber) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return E_NOTIMPL;
}

//******************************************************************************
HRESULT CDevice8::SetCurrentTexturePalette(UINT uPaletteNumber) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return E_NOTIMPL;
}

//******************************************************************************
HRESULT CDevice8::GetPaletteEntries(UINT uPaletteNumber, PALETTEENTRY* ppe) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return E_NOTIMPL;
}

//******************************************************************************
HRESULT CDevice8::SetPaletteEntries(UINT uPaletteNumber, PALETTEENTRY* ppe) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return E_NOTIMPL;
}

#ifdef UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::GetPalette(DWORD dwStage, CPalette8** ppPalette) {

    CPalette8*         pPalette;
    LPDIRECT3DPALETTE8 pd3dp;
    HRESULT            hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppPalette) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppPalette = NULL;

    hr = m_pd3dd->GetPalette(dwStage, &pd3dp);
    if (SUCCEEDED(hr)) {
        if (!m_pObjectMap->Find((DWORD)pd3dp, (LPDWORD)&pPalette)) {
            return ERR_LOCUSFAIL;
        }
        pPalette->CObject::AddRef();
        *ppPalette = pPalette;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::SetPalette(DWORD dwStage, CPalette8* pPalette) {

    LPDIRECT3DPALETTE8 pd3dp = NULL;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG
    
    if (pPalette) {
        pd3dp = pPalette->GetIDirect3DPalette8();
    }
    return m_pd3dd->SetPalette(dwStage, pd3dp);
}

#endif // UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::CreateVertexShader(DWORD* pdwDeclaration, DWORD* pdwFunction, DWORD* pdwHandle, DWORD dwUsage) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->CreateVertexShader(pdwDeclaration, pdwFunction, pdwHandle, dwUsage);
}

//******************************************************************************
HRESULT CDevice8::CreateVertexShaderTok(DWORD* pdwDeclaration, DWORD* pdwFunction, DWORD* pdwHandle, DWORD dwUsage) {

#ifdef UNDER_XBOX
    LPXGBUFFER  pxgbufShader, pxgbufErrors;
#endif // UNDER_XBOX
    DWORD       dwFuncSize;
    LPDWORD     pdw;
    HRESULT     hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hr = m_pd3dd->CreateVertexShader(pdwDeclaration, pdwFunction, pdwHandle, dwUsage);

#else

    if (!pdwFunction) {
        hr = m_pd3dd->CreateVertexShader(pdwDeclaration, pdwFunction, pdwHandle, dwUsage);
    }
    else {

        for (pdw = pdwFunction, dwFuncSize = 4; *pdw != D3DVS_END(); pdw++, dwFuncSize += 4);

        hr = AssembleShader("<token-stream>", (LPVOID)pdwFunction, dwFuncSize, SASM_INPUT_VERTEXSHADER_TOKENS, NULL, 
                            &pxgbufShader, &pxgbufErrors, NULL, NULL, NULL, NULL);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("AssembleShader"));
            if (pxgbufErrors) {
                if (pxgbufErrors->GetBufferPointer()) {
                    DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxgbufErrors->GetBufferPointer());
                }
                pxgbufErrors->Release();
            }
            return hr;
        }

        pxgbufErrors->Release();

        hr = m_pd3dd->CreateVertexShader(pdwDeclaration, (LPDWORD)pxgbufShader->GetBufferPointer(), pdwHandle, dwUsage);

        pxgbufShader->Release();
    }

#endif // UNDER_XBOX

    return hr;
}

//******************************************************************************
HRESULT CDevice8::CreateVertexShaderAsm(DWORD* pdwDeclaration, LPVOID pvSourceCode, UINT uCodeLength, DWORD* pdwHandle, DWORD dwUsage) {

#ifndef UNDER_XBOX
    LPD3DXBUFFER pxbufShader, pxbufErrors;
#else
    LPXGBUFFER   pxgbufShader, pxgbufErrors;
#endif // UNDER_XBOX
    HRESULT      hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hr = D3DXAssembleShader(pvSourceCode, uCodeLength, 0, NULL, &pxbufShader, &pxbufErrors);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("D3DXAssembleShader"));
        if (pxbufErrors) {
            if (!pxbufErrors->GetBufferPointer()) {
                __asm int 3;
            }
            DebugString(TEXT("Assembly errors:\n%s"), (LPSTR)pxbufErrors->GetBufferPointer());
            pxbufErrors->Release();
        }
        return hr;
    }

    pxbufErrors->Release();

    hr = m_pd3dd->CreateVertexShader(pdwDeclaration, (LPDWORD)pxbufShader->GetBufferPointer(), pdwHandle, dwUsage);

    pxbufShader->Release();

#else

    hr = AssembleShader("<memory>", pvSourceCode, uCodeLength, 0, NULL, 
                        &pxgbufShader, &pxgbufErrors, NULL, NULL, NULL, NULL);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("AssembleShader"));
        if (pxgbufErrors) {
            if (pxgbufErrors->GetBufferPointer()) {
                DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxgbufErrors->GetBufferPointer());
            }
            pxgbufErrors->Release();
        }
        return hr;
    }

    pxgbufErrors->Release();

    hr = m_pd3dd->CreateVertexShader(pdwDeclaration, (LPDWORD)pxgbufShader->GetBufferPointer(), pdwHandle, dwUsage);

    pxgbufShader->Release();

#endif // UNDER_XBOX

    return hr;
}

//******************************************************************************
HRESULT CDevice8::DeleteVertexShader(DWORD dwHandle) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DeleteVertexShader(dwHandle);
}

//******************************************************************************
HRESULT CDevice8::GetVertexShader(DWORD* pdwHandle) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetVertexShader(pdwHandle);
}

//******************************************************************************
HRESULT CDevice8::SetVertexShader(DWORD dwHandle) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetVertexShader(dwHandle);
}

//******************************************************************************
HRESULT CDevice8::GetVertexShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetVertexShaderConstant(dwRegister, pvConstantData, dwConstantCount);
}

//******************************************************************************
HRESULT CDevice8::SetVertexShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetVertexShaderConstant(dwRegister, pvConstantData, dwConstantCount);
}

//******************************************************************************
HRESULT CDevice8::GetVertexShaderDeclaration(DWORD dwHandle, void* pvData, DWORD* pdwSizeOfData) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetVertexShaderDeclaration(dwHandle, pvData, pdwSizeOfData);
}

//******************************************************************************
HRESULT CDevice8::GetVertexShaderFunction(DWORD dwHandle, void* pvData, DWORD* pdwSizeOfData) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetVertexShaderFunction(dwHandle, pvData, pdwSizeOfData);
}

#ifdef UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::SetShaderConstantMode(D3DSHADERCONSTANTMODE Mode) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetShaderConstantMode(Mode);
}

//******************************************************************************
HRESULT CDevice8::GetShaderConstantMode(D3DSHADERCONSTANTMODE *pMode) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetShaderConstantMode(pMode);
}

//******************************************************************************
HRESULT CDevice8::LoadVertexShader(DWORD dwHandle, DWORD dwAddress) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->LoadVertexShader(dwHandle, dwAddress);
}

//******************************************************************************
HRESULT CDevice8::SelectVertexShader(DWORD dwHandle, DWORD dwAddress) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SelectVertexShader(dwHandle, dwAddress);
}

//******************************************************************************
HRESULT CDevice8::RunVertexStateShader(DWORD dwAddress, CONST float* pfData) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->RunVertexStateShader(dwAddress, pfData);
}

//******************************************************************************
HRESULT CDevice8::GetVertexShaderSize(DWORD dwHandle, UINT* puSize) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetVertexShaderSize(dwHandle, puSize);
}

//******************************************************************************
HRESULT CDevice8::GetVertexShaderType(DWORD dwHandle, DWORD* pdwType) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetVertexShaderType(dwHandle, pdwType);
}

#endif // UNDER_XBOX

//******************************************************************************
#ifndef UNDER_XBOX
HRESULT CDevice8::CreatePixelShader(DWORD* pdwFunction, DWORD* pdwHandle) {
#else
HRESULT CDevice8::CreatePixelShader(const D3DPIXELSHADERDEF* pd3dpsdFunction, DWORD* pdwHandle) {
#endif // UNDER_XBOX

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->CreatePixelShader(pdwFunction, pdwHandle);
#else
    return m_pd3dd->CreatePixelShader(pd3dpsdFunction, pdwHandle);
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDevice8::CreatePixelShaderTok(DWORD* pdwFunction, DWORD* pdwHandle) {

#ifdef UNDER_XBOX
    LPXGBUFFER  pxgbufShader, pxgbufErrors;
#endif // UNDER_XBOX
    DWORD       dwFuncSize;
    LPDWORD     pdw;
    HRESULT     hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hr = m_pd3dd->CreatePixelShader(pdwFunction, pdwHandle);

#else

    for (pdw = pdwFunction, dwFuncSize = 4; *pdw != D3DPS_END(); pdw++, dwFuncSize += 4);

    hr = AssembleShader("<token-stream>", (LPVOID)pdwFunction, dwFuncSize, SASM_INPUT_PIXELSHADER_TOKENS, NULL, 
                        &pxgbufShader, &pxgbufErrors, NULL, NULL, NULL, NULL);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("AssembleShader"));
        if (pxgbufErrors) {
            if (pxgbufErrors->GetBufferPointer()) {
                DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxgbufErrors->GetBufferPointer());
            }
            pxgbufErrors->Release();
        }
        return hr;
    }

    pxgbufErrors->Release();

    hr = m_pd3dd->CreatePixelShader((D3DPIXELSHADERDEF*)pxgbufShader->GetBufferPointer(), pdwHandle);

    pxgbufShader->Release();

#endif // UNDER_XBOX

    return hr;
}

//******************************************************************************
HRESULT CDevice8::CreatePixelShaderAsm(LPVOID pvSourceCode, UINT uCodeLength, DWORD* pdwHandle) {

#ifndef UNDER_XBOX
    LPD3DXBUFFER pxbufShader, pxbufErrors;
#else
    LPXGBUFFER   pxgbufShader, pxgbufErrors;
#endif // UNDER_XBOX
    HRESULT      hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hr = D3DXAssembleShader(pvSourceCode, uCodeLength, 0, NULL, &pxbufShader, &pxbufErrors);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("D3DXAssembleShader"));
        DebugString(TEXT("Assembly errors:\n%s"), (LPSTR)pxbufErrors->GetBufferPointer());
        pxbufErrors->Release();
        return hr;
    }

    pxbufErrors->Release();

    hr = m_pd3dd->CreatePixelShader((LPDWORD)pxbufShader->GetBufferPointer(), pdwHandle);

    pxbufShader->Release();

#else

    hr = AssembleShader("<memory>", pvSourceCode, uCodeLength, 0, NULL, 
                        &pxgbufShader, &pxgbufErrors, NULL, NULL, NULL, NULL);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("AssembleShader"));
        if (pxgbufErrors) {
            if (pxgbufErrors->GetBufferPointer()) {
                DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxgbufErrors->GetBufferPointer());
            }
            pxgbufErrors->Release();
        }
        return hr;
    }

    pxgbufErrors->Release();

    hr = m_pd3dd->CreatePixelShader((D3DPIXELSHADERDEF*)pxgbufShader->GetBufferPointer(), pdwHandle);

    pxgbufShader->Release();

#endif // UNDER_XBOX

    return hr;
}

//******************************************************************************
HRESULT CDevice8::DeletePixelShader(DWORD dwHandle) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DeletePixelShader(dwHandle);
}

//******************************************************************************
HRESULT CDevice8::GetPixelShader(DWORD* pdwHandle) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetPixelShader(pdwHandle);
}

//******************************************************************************
HRESULT CDevice8::SetPixelShader(DWORD dwHandle) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetPixelShader(dwHandle);
}

//******************************************************************************
HRESULT CDevice8::GetPixelShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetPixelShaderConstant(dwRegister, pvConstantData, dwConstantCount);
}

//******************************************************************************
HRESULT CDevice8::SetPixelShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetPixelShaderConstant(dwRegister, pvConstantData, dwConstantCount);
}

//******************************************************************************
#ifndef UNDER_XBOX
HRESULT CDevice8::GetPixelShaderFunction(DWORD dwHandle, void* pvData, DWORD* pdwSizeOfData) {
#else
HRESULT CDevice8::GetPixelShaderFunction(DWORD dwHandle, D3DPIXELSHADERDEF* pd3dpsd) {
#endif // UNDER_XBOX

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->GetPixelShaderFunction(dwHandle, pvData, pdwSizeOfData);
#else
    return m_pd3dd->GetPixelShaderFunction(dwHandle, pd3dpsd);
#endif // UNDER_XBOX
}

/*
#ifdef UNDER_XBOX
//******************************************************************************
HRESULT CDevice8::GetPixelShaderFunction(DWORD dwHandle, D3DPIXELSHADERDEF* pd3dpsd, void* pvData, DWORD* pdwSizeOfData) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    if (pdwSizeOfData) {
        *pdwSizeOfData = 0;
    }
    return m_pd3dd->GetPixelShaderFunction(dwHandle, pd3dpsd);
}
#endif // UNDER_XBOX
*/

//******************************************************************************
#ifndef UNDER_XBOX
HRESULT CDevice8::Present(RECT* prectSrc, RECT* prectDst, HWND hDestWindowOverride, RGNDATA* prgnDirtyRegion)
#else
HRESULT CDevice8::Present(RECT* prectSrc, RECT* prectDst, void* hDestWindowOverride, void* prgnDirtyRegion)
#endif // UNDER_XBOX
{
#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->Present(prectSrc, prectDst, hDestWindowOverride, prgnDirtyRegion);
}

//******************************************************************************
HRESULT CDevice8::Reset(D3DPRESENT_PARAMETERS* pd3dpp) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->Reset(pd3dpp);
}

//******************************************************************************
HRESULT CDevice8::BeginScene() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->BeginScene();
}

//******************************************************************************
HRESULT CDevice8::EndScene() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

// ##DELETE
// ##HACK to make diffuse modulated blending work on Inspiron 5000
#ifndef UNDER_XBOX
    typedef struct _DUMMYVERTEX {
        D3DXVECTOR3 vPosition;
        float       fRHW;
        D3DCOLOR    cDiffuse;
        D3DCOLOR    cSpecular;
        float       u0, v0;

        _DUMMYVERTEX() {}
        _DUMMYVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
                  D3DCOLOR _cSpecular, float _u0, float _v0) 
        { 
            vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
            cDiffuse = _cDiffuse; cSpecular = _cSpecular;
            u0 = _u0; v0 = _v0;
        }
    } DUMMYVERTEX;
    DUMMYVERTEX rDummy[3];
    rDummy[0] = DUMMYVERTEX(D3DXVECTOR3(0.0f, (float)0.0f, 0.000009f), 110000.0f, 0xFF000000, 0, 0.0f, 1.0f);
    rDummy[1] = DUMMYVERTEX(D3DXVECTOR3(0.0f, 0.0f, 0.000009f), 110000.0f, 0xFF000000, 0, 0.0f, 0.0f);
    rDummy[2] = DUMMYVERTEX(D3DXVECTOR3((float)0.0f, 0.0f, 0.000009f), 110000.0f, 0xFF000000, 0, 1.0f, 0.0f);
    m_pd3dd->SetVertexShader(D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1);
    m_pd3dd->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG2);
    m_pd3dd->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    m_pd3dd->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG2);
    m_pd3dd->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    m_pd3dd->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 1, rDummy, sizeof(DUMMYVERTEX));
    m_pd3dd->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);
    m_pd3dd->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    m_pd3dd->SetVertexShader(D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1);
#endif // !UNDER_XBOX
// ##END HACK
// ##END DELETE

    return m_pd3dd->EndScene();
}

//******************************************************************************
HRESULT CDevice8::DrawIndexedPrimitive(D3DPRIMITIVETYPE d3dpt, UINT uMinVertexToShade, UINT uNumVerticesToShade, UINT uStartIndex, UINT uPrimitiveCount) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DrawIndexedPrimitive(d3dpt, uMinVertexToShade, uNumVerticesToShade, uStartIndex, uPrimitiveCount);
}

//******************************************************************************
HRESULT CDevice8::DrawIndexedPrimitiveUP(D3DPRIMITIVETYPE d3dpt, UINT uMinVertexToShade, UINT uNumVerticesToShade, UINT uPrimitiveCount, void* pvIndices, D3DFORMAT fmtIndex, void* pvVertices, UINT uStride) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DrawIndexedPrimitiveUP(d3dpt, uMinVertexToShade, uNumVerticesToShade, uPrimitiveCount, pvIndices, fmtIndex, pvVertices, uStride);
}

//******************************************************************************
HRESULT CDevice8::DrawPrimitive(D3DPRIMITIVETYPE d3dpt, UINT uStartVertex, UINT uPrimitiveCount) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DrawPrimitive(d3dpt, uStartVertex, uPrimitiveCount);
}

//******************************************************************************
HRESULT CDevice8::DrawPrimitiveUP(D3DPRIMITIVETYPE d3dpt, UINT uPrimitiveCount, void* pvVertices, UINT uStride) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DrawPrimitiveUP(d3dpt, uPrimitiveCount, pvVertices, uStride);
}

#ifdef UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::DrawVertices(D3DPRIMITIVETYPE d3dpt, UINT uStartVertex, UINT uVertexCount) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DrawVertices(d3dpt, uStartVertex, uVertexCount);
}

//******************************************************************************
HRESULT CDevice8::DrawIndexedVertices(D3DPRIMITIVETYPE d3dpt, UINT uStartIndex, CONST WORD* pwIndices) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DrawIndexedVertices(d3dpt, uStartIndex, pwIndices);
}

//******************************************************************************
HRESULT CDevice8::DrawVerticesUP(D3DPRIMITIVETYPE d3dpt, UINT uVertexCount, CONST void* pvVertices, UINT uStride) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DrawVerticesUP(d3dpt, uVertexCount, pvVertices, uStride);
}

//******************************************************************************
HRESULT CDevice8::DrawIndexedVerticesUP(D3DPRIMITIVETYPE d3dpt, UINT uVertexCount, CONST void* pvIndices, CONST void* pvVertices, UINT uStride) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DrawIndexedVerticesUP(d3dpt, uVertexCount, pvIndices, pvVertices, uStride);
}

//******************************************************************************
HRESULT CDevice8::PrimeVertexCache(UINT VertexCount, CONST WORD *pIndexData) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->PrimeVertexCache(VertexCount, pIndexData);
}

//******************************************************************************
HRESULT CDevice8::Begin(D3DPRIMITIVETYPE d3dpt) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->Begin(d3dpt);
}

//******************************************************************************
HRESULT CDevice8::End() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->End();
}

//******************************************************************************
void CDevice8::KickPushBuffer() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dd->KickPushBuffer();
}

#endif // UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::DeletePatch(UINT uHandle) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DeletePatch(uHandle);
}

//******************************************************************************
HRESULT CDevice8::DrawRectPatch(UINT uHandle, float* pfNumSegs, D3DRECTPATCH_INFO* prpi) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DrawRectPatch(uHandle, pfNumSegs, prpi);
}

//******************************************************************************
HRESULT CDevice8::DrawTriPatch(UINT uHandle, float* pfNumSegs, D3DTRIPATCH_INFO* ptsi) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->DrawTriPatch(uHandle, pfNumSegs, ptsi);
}

//******************************************************************************
HRESULT CDevice8::GetStreamSource(UINT uStream, CVertexBuffer8** ppVertexData, UINT* puStride) {

    CVertexBuffer8*         pVertexBuffer;
    LPDIRECT3DVERTEXBUFFER8 pd3dr;
    HRESULT                 hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppVertexData) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppVertexData = NULL;

    hr = m_pd3dd->GetStreamSource(uStream, &pd3dr, puStride);
    if (SUCCEEDED(hr)) {
        if (!m_pObjectMap->Find((DWORD)pd3dr, (LPDWORD)&pVertexBuffer)) {
            return ERR_LOCUSFAIL;
        }
        pVertexBuffer->CObject::AddRef();
        *ppVertexData = pVertexBuffer;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::SetStreamSource(UINT uStream, CVertexBuffer8* pVertexData, UINT uStride) {

    LPDIRECT3DVERTEXBUFFER8 pd3dr = NULL;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    if (pVertexData) {
        pd3dr = pVertexData->GetIDirect3DVertexBuffer8();
    }
    return m_pd3dd->SetStreamSource(uStream, pd3dr, uStride);
}

//******************************************************************************
HRESULT CDevice8::GetIndices(CIndexBuffer8** ppIndexData, UINT* puBaseIndex) {

    CIndexBuffer8*         pIndexBuffer;
    LPDIRECT3DINDEXBUFFER8 pd3di;
    HRESULT                hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppIndexData) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppIndexData = NULL;

    hr = m_pd3dd->GetIndices(&pd3di, puBaseIndex);
    if (SUCCEEDED(hr)) {
        if (!m_pObjectMap->Find((DWORD)pd3di, (LPDWORD)&pIndexBuffer)) {
            return ERR_LOCUSFAIL;
        }
        pIndexBuffer->CObject::AddRef();
        *ppIndexData = pIndexBuffer;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::SetIndices(CIndexBuffer8* pIndexData, UINT uBaseIndex) {

    LPDIRECT3DINDEXBUFFER8 pd3di = NULL;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    if (pIndexData) {
        pd3di = pIndexData->GetIDirect3DIndexBuffer8();
    }
    return m_pd3dd->SetIndices(pd3di, uBaseIndex);
}

//******************************************************************************
UINT CDevice8::GetAvailableTextureMem() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return 0;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->GetAvailableTextureMem();
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetAvailableTextureMem is not implemented on XBox"));
    return 0;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDevice8::GetCreationParameters(D3DDEVICE_CREATION_PARAMETERS* pd3dcp) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef DEMO_HACK
    return m_pd3dd->GetCreationParameters(pd3dcp);
#else
    return E_NOTIMPL;
#endif // DEMO_HACK
}

//******************************************************************************
HRESULT CDevice8::GetDeviceCaps(D3DCAPS8* pd3dcaps) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetDeviceCaps(pd3dcaps);
}

//******************************************************************************
HRESULT CDevice8::GetDirect3D(CDirect3D8** ppDirect3D8) {

    LPDIRECT3D8 pd3d;
    HRESULT     hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
    if (!ppDirect3D8) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppDirect3D8 = NULL;

    hr = m_pd3dd->GetDirect3D(&pd3d);
    if (SUCCEEDED(hr)) {
        if (pd3d != m_pDirect3D->GetIDirect3D8()) {
            DebugString(TEXT("Interface pointers differ for IDirect3D8"));
            DebugBreak();
        }
        m_pDirect3D->CObject::AddRef();
        *ppDirect3D8 = m_pDirect3D;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::GetInfo(DWORD dwDevInfoType, void* pvDevInfo, DWORD dwDevInfoSize) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->GetInfo(dwDevInfoType, pvDevInfo, dwDevInfoSize);
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetInfo is not implemented on Xbox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDevice8::GetRasterStatus(D3DRASTER_STATUS* prast) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetRasterStatus(prast);
}

//******************************************************************************
HRESULT CDevice8::GetDisplayMode(D3DDISPLAYMODE* pMode) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetDisplayMode(pMode);
}

//******************************************************************************
HRESULT CDevice8::GetBackBuffer(UINT uBackBuffer, D3DBACKBUFFER_TYPE bbt, CSurface8** ppBackBuffer) {

    LPDIRECT3DSURFACE8  pd3ds;
    CSurface8*          pSurface;
    HRESULT             hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppBackBuffer) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppBackBuffer = NULL;

    hr = m_pd3dd->GetBackBuffer(uBackBuffer, bbt, &pd3ds);
    if (SUCCEEDED(hr)) {
        
        if (!m_pObjectMap->Find((DWORD)pd3ds, (LPDWORD)&pSurface)) {

            pSurface = new CSurface8();
            if (!pSurface) {
                pd3ds->Release();
                return E_OUTOFMEMORY;
            }

            if (!pSurface->Create(this, pd3ds)) {
                pd3ds->Release();
                return ERR_LOCUSFAIL;
            }
        }

        pSurface->CObject::AddRef();

        *ppBackBuffer = pSurface;
    }

    return hr;
}

//******************************************************************************
HRESULT CDevice8::GetDepthStencilSurface(CSurface8** ppZStencilSurface) {

    LPDIRECT3DSURFACE8  pd3ds;
    CSurface8*          pSurface;
    HRESULT             hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppZStencilSurface) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppZStencilSurface = NULL;

    hr = m_pd3dd->GetDepthStencilSurface(&pd3ds);
    if (SUCCEEDED(hr)) {
        
        if (!m_pObjectMap->Find((DWORD)pd3ds, (LPDWORD)&pSurface)) {

            pSurface = new CSurface8();
            if (!pSurface) {
                pd3ds->Release();
                return E_OUTOFMEMORY;
            }

            if (!pSurface->Create(this, pd3ds)) {
                pd3ds->Release();
                return ERR_LOCUSFAIL;
            }
        }

        pSurface->CObject::AddRef();

        *ppZStencilSurface = pSurface;
    }

    return hr;
}

//******************************************************************************
void CDevice8::GetGammaRamp(D3DGAMMARAMP* pgrRamp) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dd->GetGammaRamp(pgrRamp);
}

//******************************************************************************
void CDevice8::SetGammaRamp(DWORD dwFlags, D3DGAMMARAMP* pgrRamp) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dd->SetGammaRamp(dwFlags, pgrRamp);
}

//******************************************************************************
HRESULT CDevice8::CopyRects(CSurface8* pSrcSurface, RECT* prectSrcRects, UINT uNumSrcRects, CSurface8* pDstSurface, POINT* ppntDstPoints) {

#ifdef D3DLOCUS_DEBUG
    if (!pSrcSurface || !pDstSurface) {
        return D3DERR_INVALIDCALL;
    }
    if (!m_pd3dd || !pSrcSurface->GetIDirect3DSurface8() || !pDstSurface->GetIDirect3DSurface8()) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->CopyRects(pSrcSurface->GetIDirect3DSurface8(), prectSrcRects, uNumSrcRects, pDstSurface->GetIDirect3DSurface8(), ppntDstPoints);
}

//******************************************************************************
HRESULT CDevice8::GetFrontBuffer(CSurface8* pDstSurface) {

#ifdef D3DLOCUS_DEBUG
    if (!pDstSurface) {
        return D3DERR_INVALIDCALL;
    }
    if (!m_pd3dd || !pDstSurface->GetIDirect3DSurface8()) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->GetFrontBuffer(pDstSurface->GetIDirect3DSurface8());
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetFrontBuffer is not implemented on Xbox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDevice8::ProcessVertices(UINT uStartVertexSrc, UINT uStartVertexDst, UINT uNumVertices, CVertexBuffer8* pDstBuffer, DWORD dwFlags) {

#ifdef D3DLOCUS_DEBUG
    if (!pDstBuffer) {
        return D3DERR_INVALIDCALL;
    }
    if (!m_pd3dd || !pDstBuffer->GetIDirect3DVertexBuffer8()) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->ProcessVertices(uStartVertexSrc, uStartVertexDst, uNumVertices, pDstBuffer->GetIDirect3DVertexBuffer8(), dwFlags);
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::ProcessVertices is not implemented on Xbox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDevice8::ResourceManagerDiscardBytes(DWORD dwNumBytes) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->ResourceManagerDiscardBytes(dwNumBytes);
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::ResourceManagerDiscardBytes is not implemented on XBox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDevice8::TestCooperativeLevel() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->TestCooperativeLevel();
#else
    return D3D_OK;
#endif // UNDER_XBOX
}

#ifdef UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::PersistDisplay() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->PersistDisplay();
}

//******************************************************************************
HRESULT CDevice8::SetTile(DWORD dwIndex, D3DTILE* pTile) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetTile(dwIndex, pTile);
}

//******************************************************************************
HRESULT CDevice8::GetTile(DWORD dwIndex, D3DTILE* pTile) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetTile(dwIndex, pTile);
}

#endif // UNDER_XBOX

//******************************************************************************
void CDevice8::SetCursorPosition(UINT uSX, UINT uSY, DWORD dwFlags) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    m_pd3dd->SetCursorPosition(uSX, uSY, dwFlags);
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::SetCursorPosition is not implemented on Xbox"));
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CDevice8::SetCursorProperties(UINT uHotSpotX, UINT uHotSpotY, CSurface8* pCursorBitmap) {

    LPDIRECT3DSURFACE8 pd3ds = NULL;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    if (pCursorBitmap) {
        pd3ds = pCursorBitmap->GetIDirect3DSurface8();
    }
    return m_pd3dd->SetCursorProperties(uHotSpotX, uHotSpotY, pd3ds);
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::SetCursorProperties is not implemented on Xbox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
BOOL CDevice8::ShowCursor(BOOL bShow) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return FALSE;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dd->ShowCursor(bShow);
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::ShowCursor is not implemented on Xbox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

#ifdef UNDER_XBOX

//******************************************************************************
HRESULT CDevice8::BeginVisibilityTest() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->BeginVisibilityTest();
}

//******************************************************************************
HRESULT CDevice8::EndVisibilityTest(DWORD dwIndex) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->EndVisibilityTest(dwIndex);
}

//******************************************************************************
HRESULT CDevice8::GetVisibilityTestResult(DWORD dwIndex, UINT* puResult, ULONGLONG* puuTimeStamp) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetVisibilityTestResult(dwIndex, puResult, puuTimeStamp);
}

//******************************************************************************
HRESULT CDevice8::SetVertexData2f(int nRegister, float a, float b) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetVertexData2f(nRegister, a, b);
}

//******************************************************************************
HRESULT CDevice8::SetVertexData4f(int nRegister, float a, float b, float c, float d) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetVertexData4f(nRegister, a, b, c, d);
}

//******************************************************************************
HRESULT CDevice8::SetVertexData2s(int nRegister, short a, short b) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetVertexData2s(nRegister, a, b);
}

//******************************************************************************
HRESULT CDevice8::SetVertexData4s(int nRegister, short a, short b, short c, short d) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetVertexData4s(nRegister, a, b, c, d);
}

//******************************************************************************
HRESULT CDevice8::SetVertexData4ub(int nRegister, BYTE a, BYTE b, BYTE c, BYTE d) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetVertexData4ub(nRegister, a, b, c, d);
}

//******************************************************************************
BOOL CDevice8::IsBusy() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return FALSE;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->IsBusy();
}

//******************************************************************************
void CDevice8::BlockUntilIdle() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dd->BlockUntilIdle();
}

//******************************************************************************
#ifndef UNDER_XBOX
void CDevice8::SetVerticalBlankCallback(D3DCALLBACK pCallback) {
#else
void CDevice8::SetVerticalBlankCallback(D3DVBLANKCALLBACK pCallback) {
#endif

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dd->SetVerticalBlankCallback(pCallback);
}

//******************************************************************************
void CDevice8::BlockUntilVerticalBlank() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dd->BlockUntilVerticalBlank();
}

//******************************************************************************
DWORD CDevice8::InsertFence() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return -1;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->InsertFence();
}

//******************************************************************************
BOOL CDevice8::IsFencePending(DWORD dwFence) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return FALSE;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->IsFencePending(dwFence);
}

//******************************************************************************
void CDevice8::BlockOnFence(DWORD dwFence) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dd->BlockOnFence(dwFence);
}

//******************************************************************************
void CDevice8::InsertCallback(D3DCALLBACKTYPE Type, D3DCALLBACK pCallback, DWORD dwContext) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dd->InsertCallback(Type, pCallback, dwContext);
}

//******************************************************************************
HRESULT CDevice8::BeginPushBuffer(void* pvBuffer, UINT uSize) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return S_OK; // !!! m_pd3dd->BeginPushBuffer(pvBuffer, uSize);
}

//******************************************************************************
HRESULT CDevice8::EndPushBuffer(D3DPushBuffer* pPushBuffer) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return S_OK; // !!! m_pd3dd->EndPushBuffer(pPushBuffer);
}

//******************************************************************************
HRESULT CDevice8::RunPushBuffer(D3DPushBuffer* pPushBuffer, DWORD* pdwFixUps) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return S_OK; // !!! m_pd3dd->RunPushBuffer(pPushBuffer, pdwFixUps);
}

//******************************************************************************
HRESULT CDevice8::GetPushBufferOffset(DWORD* pdwOffset) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetPushBufferOffset(pdwOffset);
}

//******************************************************************************
HRESULT CDevice8::GetProjectionViewportMatrix(D3DMATRIX* pmMatrix) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetProjectionViewportMatrix(pmMatrix);
}

//******************************************************************************
HRESULT CDevice8::SetModelView(CONST D3DMATRIX* pmModelView, CONST D3DMATRIX* pmInverseModelView, CONST D3DMATRIX* pmComposite) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetModelView(pmModelView, pmInverseModelView, pmComposite);
}

//******************************************************************************
HRESULT CDevice8::GetModelView(D3DMATRIX* pmModelView) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetModelView(pmModelView);
}

//******************************************************************************
HRESULT CDevice8::SetVertexBlendModelView(UINT uCount, CONST D3DMATRIX* pmModelViews, CONST D3DMATRIX* pmInverseModelViews, CONST D3DMATRIX* pProjectionViewport) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->SetVertexBlendModelView(uCount, pmModelViews, pmInverseModelViews, pProjectionViewport);
}

//******************************************************************************
HRESULT CDevice8::GetVertexBlendModelView(UINT uCount, D3DMATRIX* pmModelViews, D3DMATRIX* pProjectionViewport) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dd->GetVertexBlendModelView(uCount, pmModelViews, pProjectionViewport);
}

//******************************************************************************
HRESULT CDevice8::SetVertexInput(ULONG uCount, CONST DWORD* pdwAddresses, CONST DWORD* pdwFormats) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return S_OK; // !!! m_pd3dd->SetVertexInput(uCount, pdwAddresses, pdwFormats);
}

//******************************************************************************
HRESULT CDevice8::GetVertexInput(ULONG uCount, DWORD* pdwAddresses, DWORD* pdwFormats) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return S_OK; // !!! m_pd3dd->GetVertexInput(uCount, pdwAddresses, pdwFormats);
}

//******************************************************************************
void CDevice8::FlushVertexCache() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dd->FlushVertexCache();
}

#endif // UNDER_XBOX

//******************************************************************************
// CCDevice8
//******************************************************************************

//******************************************************************************
CCDevice8::CCDevice8() {

    DWORD dwCRC;
    UINT  i, j;

    m_bServerAffinity = FALSE;
    m_bVerifyFrames = TRUE;
    m_fThreshold = 0.9f;
    m_fFrameMatch = 1.0f;
    m_uFramesPresented = 0;
    m_pd3dtFrameSrc = NULL;
    m_pd3dtFrameRef = NULL;
    m_pd3dtFrameVar = NULL;
    m_uShowVerification = 0;

    // Initialize the CRC table
    for (i = 0; i < 256; i++) {
        dwCRC = i;
        for (j = 0; j < 8; j++) {
            dwCRC = (dwCRC & 1) ? ((dwCRC >> 1) ^ 0xEDB88320L) : (dwCRC >> 1);
        }
        m_dwCRCTable[i] = dwCRC;
    }
}

//******************************************************************************
CCDevice8::~CCDevice8() {

    EnableVerificationDisplay(FALSE);
}

//******************************************************************************
BOOL CCDevice8::Create(CClient* pClient, CDirect3D8* pDirect3D, LPDIRECT3DDEVICE8 pd3dd) {

    if (!pClient) {
        return FALSE;
    }

    m_pClient = pClient;

    if (!CDevice8::Create(pDirect3D, pd3dd)) {
        return FALSE;
    }

    if (!pClient->CheckDeviceAffinity(pDirect3D, &m_bServerAffinity)) {
        m_bServerAffinity = FALSE;
    }

    return TRUE;
}

//******************************************************************************
void CCDevice8::EnableFrameVerification(BOOL bEnable) {

    m_bVerifyFrames = bEnable;
}

//******************************************************************************
void CCDevice8::SetVerificationThreshold(float fThreshold) {

    m_fThreshold = fThreshold;
}

//******************************************************************************
void CCDevice8::EnableVerificationDisplay(BOOL bEnable) {

    if (bEnable && m_uShowVerification) {
        return;
    }

    if (bEnable) {

        HRESULT hr;

        hr = CreateTexture(256, 256, 1, 0, D3DFMT_A8R8G8B8, POOL_DEFAULT, &m_pd3dtFrameSrc);
        if (FAILED(hr)) {
            return;
        }

        hr = CreateTexture(256, 256, 1, 0, D3DFMT_A8R8G8B8, POOL_DEFAULT, &m_pd3dtFrameRef);
        if (FAILED(hr)) {
            m_pd3dtFrameSrc->Release();
            m_pd3dtFrameSrc = NULL;
            return;
        }

        hr = CreateTexture(256, 256, 1, 0, D3DFMT_A8R8G8B8, POOL_DEFAULT, &m_pd3dtFrameVar);
        if (FAILED(hr)) {
            m_pd3dtFrameSrc->Release();
            m_pd3dtFrameSrc = NULL;
            m_pd3dtFrameRef->Release();
            m_pd3dtFrameRef = NULL;
            return;
        }
    }
    else {
        if (m_pd3dtFrameSrc) {
            m_pd3dtFrameSrc->Release();
            m_pd3dtFrameSrc = NULL;
        }
        if (m_pd3dtFrameRef) {
            m_pd3dtFrameRef->Release();
            m_pd3dtFrameRef = NULL;
        }
        if (m_pd3dtFrameVar) {
            m_pd3dtFrameVar->Release();
            m_pd3dtFrameVar = NULL;
        }
    }

    m_uShowVerification = bEnable ? 1 : 0;
}

//******************************************************************************
void CCDevice8::ToggleVerificationDisplay() {

    if (m_uShowVerification == 1) {
        m_uShowVerification = 2;
    }
    else {
        EnableVerificationDisplay(!(BOOL)m_uShowVerification);
    }
}

//******************************************************************************
LPDIRECT3DSURFACE8 CCDevice8::GetFrontBufferContents() {

    LPDIRECT3DSURFACE8 pd3ds;
#ifndef UNDER_XBOX
    D3DDISPLAYMODE     d3ddm;
    D3DSURFACE_DESC    d3dsd;
    HRESULT            hr;

    hr = m_pd3dd->GetDisplayMode(&d3ddm);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDisplayMode"))) {
        return NULL;
    }

    hr = m_pd3dd->CreateImageSurface(d3ddm.Width, d3ddm.Height, D3DFMT_A8R8G8B8, &pd3ds);
    if (FAILED(hr)) {
        return NULL;
    }

    hr = m_pd3dd->GetFrontBuffer(pd3ds);
    if (FAILED(hr)) {
        pd3ds->Release();
        return NULL;
    }

#else
    m_pd3dd->GetBackBuffer(-1, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
#endif // UNDER_XBOX

    return pd3ds;
}

//******************************************************************************
DWORD CCDevice8::ComputeSurfaceCRC32(LPDIRECT3DSURFACE8 pd3ds) {

    D3DSURFACE_DESC d3dsd;
    D3DLOCKED_RECT  d3dlr;
    DWORD           dwCRC = 0;
    LPBYTE          pbData;
    UINT            i, j, k;
    HRESULT         hr;

    hr = pd3ds->GetDesc(&d3dsd);
    if (FAILED(hr)) {
        return 0;
    }

#ifndef UNDER_XBOX
    hr = pd3ds->LockRect(&d3dlr, NULL, 0);
#else
    hr = pd3ds->LockRect(&d3dlr, NULL, D3DLOCK_TILED);
#endif
    if (FAILED(hr)) {
        return 0;
    }

    switch (d3dsd.Format) {

#ifdef UNDER_XBOX
        case D3DFMT_LIN_R5G6B5:
#endif
        case D3DFMT_R5G6B5: {
            DWORD  dwPixel;
            LPWORD pwPixel = (LPWORD)d3dlr.pBits;
            for (i = 0; i < d3dsd.Height; i++) {
                for (j = 0; j < d3dsd.Width; j++) {
                    dwPixel = (pwPixel[j] & 0xF800) << 8 |
                              (pwPixel[j] & 0x07E0) << 5 |
                              (pwPixel[j] & 0x001F) << 3;
                    pbData = (LPBYTE)&dwPixel;
                    for (k = 0; k < 3; k++) {
                        dwCRC = m_dwCRCTable[(dwCRC ^ pbData[k]) & 0xFF] ^ (dwCRC >> 8);
                    }
                }
                pwPixel += d3dlr.Pitch >> 1;
            }
            break;
        }

#ifdef UNDER_XBOX
        case D3DFMT_LIN_X1R5G5B5:
        case D3DFMT_LIN_A1R5G5B5:
#endif
        case D3DFMT_X1R5G5B5:
        case D3DFMT_A1R5G5B5: {
            DWORD  dwPixel;
            LPWORD pwPixel = (LPWORD)d3dlr.pBits;
            for (i = 0; i < d3dsd.Height; i++) {
                for (j = 0; j < d3dsd.Width; j++) {
                    dwPixel = (pwPixel[j] & 0x7C00) << 9 |
                              (pwPixel[j] & 0x03E0) << 6 |
                              (pwPixel[j] & 0x001F) << 3;
                    pbData = (LPBYTE)&dwPixel;
                    for (k = 0; k < 3; k++) {
                        dwCRC = m_dwCRCTable[(dwCRC ^ pbData[k]) & 0xFF] ^ (dwCRC >> 8);
                    }
                }
                pwPixel += d3dlr.Pitch >> 1;
            }
            break;
        }

#ifdef UNDER_XBOX
        case D3DFMT_LIN_X8R8G8B8:
        case D3DFMT_LIN_A8R8G8B8:
#endif
        case D3DFMT_X8R8G8B8:
        case D3DFMT_A8R8G8B8: {
            LPDWORD pdwPixel = (LPDWORD)d3dlr.pBits;
            for (i = 0; i < d3dsd.Height; i++) {
                for (j = 0; j < d3dsd.Width; j++) {
                    pbData = (LPBYTE)&pdwPixel[j];
                    for (k = 0; k < 3; k++) {
                        dwCRC = m_dwCRCTable[(dwCRC ^ pbData[k]) & 0xFF] ^ (dwCRC >> 8);
                    }
                }
                pdwPixel += d3dlr.Pitch >> 2;
            }
            break;
        }
    }

    pd3ds->UnlockRect();

    return dwCRC;
}

//******************************************************************************
void CCDevice8::OverlayVerificationResults() {

    DWORD           dwBlock;
    D3DDISPLAYMODE  d3ddm;
    float           fWidth, fHeight, fX, fY, fOffsetX, fOffsetY;
    struct _FBOVERTEX {
        D3DXVECTOR3 vPosition;
        float       fRHW;
        float       u0;
        float       v0;
    } prOverlay[12];

    CreateStateBlock(D3DSBT_ALL, &dwBlock);

    GetDisplayMode(&d3ddm);
    fWidth = (float)d3ddm.Width * FBSCALE;
    fHeight = (float)d3ddm.Height * FBSCALE;
    fX = (float)d3ddm.Width / 2.0f;
    fY = (float)d3ddm.Height / 2.0f;
    fOffsetX = (fX - fWidth) / 2.0f;
    fOffsetY = (fY - fHeight) / 2.0f;

    prOverlay[0].vPosition = D3DXVECTOR3(fX - fWidth - fOffsetX, fY - fOffsetY, 0.0000085f);
    prOverlay[0].fRHW = 120000.0f;
    prOverlay[0].u0 = 0.0f;
    prOverlay[0].v0 = 1.0f;
    prOverlay[1].vPosition = D3DXVECTOR3(fX - fWidth - fOffsetX, fY - fHeight - fOffsetY, 0.0000085f);
    prOverlay[1].fRHW = 120000.0f;
    prOverlay[1].u0 = 0.0f;
    prOverlay[1].v0 = 0.0f;
    prOverlay[2].vPosition = D3DXVECTOR3(fX - fOffsetX, fY - fHeight - fOffsetY, 0.0000085f);
    prOverlay[2].fRHW = 120000.0f;
    prOverlay[2].u0 = 1.0f;
    prOverlay[2].v0 = 0.0f;
    prOverlay[3].vPosition = D3DXVECTOR3(fX - fOffsetX, fY - fOffsetY, 0.0000085f);
    prOverlay[3].fRHW = 120000.0f;
    prOverlay[3].u0 = 1.0f;
    prOverlay[3].v0 = 1.0f;

    prOverlay[4].vPosition = D3DXVECTOR3(fX + fOffsetX, fY - fOffsetY, 0.0000085f);
    prOverlay[4].fRHW = 120000.0f;
    prOverlay[4].u0 = 0.0f;
    prOverlay[4].v0 = 1.0f;
    prOverlay[5].vPosition = D3DXVECTOR3(fX + fOffsetX, fY - fHeight - fOffsetY, 0.0000085f);
    prOverlay[5].fRHW = 120000.0f;
    prOverlay[5].u0 = 0.0f;
    prOverlay[5].v0 = 0.0f;
    prOverlay[6].vPosition = D3DXVECTOR3(fX + fWidth + fOffsetX, fY - fHeight - fOffsetY, 0.0000085f);
    prOverlay[6].fRHW = 120000.0f;
    prOverlay[6].u0 = 1.0f;
    prOverlay[6].v0 = 0.0f;
    prOverlay[7].vPosition = D3DXVECTOR3(fX + fWidth + fOffsetX, fY - fOffsetY, 0.0000085f);
    prOverlay[7].fRHW = 120000.0f;
    prOverlay[7].u0 = 1.0f;
    prOverlay[7].v0 = 1.0f;

    prOverlay[8].vPosition = D3DXVECTOR3(fX - fWidth / 2.0f, fY + fHeight + fOffsetY, 0.0000085f);
    prOverlay[8].fRHW = 120000.0f;
    prOverlay[8].u0 = 0.0f;
    prOverlay[8].v0 = 1.0f;
    prOverlay[9].vPosition = D3DXVECTOR3(fX - fWidth / 2.0f, fY + fOffsetY, 0.0000085f);
    prOverlay[9].fRHW = 120000.0f;
    prOverlay[9].u0 = 0.0f;
    prOverlay[9].v0 = 0.0f;
    prOverlay[10].vPosition = D3DXVECTOR3(fX + fWidth / 2.0f, fY + fOffsetY, 0.0000085f);
    prOverlay[10].fRHW = 120000.0f;
    prOverlay[10].u0 = 1.0f;
    prOverlay[10].v0 = 0.0f;
    prOverlay[11].vPosition = D3DXVECTOR3(fX + fWidth / 2.0f, fY + fHeight + fOffsetY, 0.0000085f);
    prOverlay[11].fRHW = 120000.0f;
    prOverlay[11].u0 = 1.0f;
    prOverlay[11].v0 = 1.0f;

    BeginScene();
    SetVertexShader(D3DFVF_XYZRHW | D3DFVF_TEX1);
    SetRenderState(D3DRS_LIGHTING, FALSE);
    SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);
    SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);
    SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
    if (m_uShowVerification == 2) {
        SetTexture(0, m_pd3dtFrameSrc);
        DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, prOverlay, sizeof(prOverlay[0]));
        SetTexture(0, m_pd3dtFrameRef);
        DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, prOverlay + 4, sizeof(prOverlay[0]));
    }
    if (m_uShowVerification) {
        SetTexture(0, m_pd3dtFrameVar);
        DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, prOverlay + 8, sizeof(prOverlay[0]));
    }
    EndScene();

    ApplyStateBlock(dwBlock);
    DeleteStateBlock(dwBlock);
}

//******************************************************************************
BOOL CCDevice8::UpdateFBTexture(CTexture8* pd3dtDst, LPDIRECT3DSURFACE8 pd3dsSrc) {

    D3DSURFACE_DESC d3dsdSrc, d3dsdDst;
    D3DLOCKED_RECT  d3dlrSrc, d3dlrDst;
    LPDWORD         pdwDst;
    float           fWidthRatio, fHeightRatio;
    UINT            i, j;
    HRESULT         hr;

    hr = pd3dtDst->GetLevelDesc(0, &d3dsdDst);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
        return FALSE;
    }

    hr = pd3dsSrc->GetDesc(&d3dsdSrc);
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDesc"))) {
        return FALSE;
    }

    fWidthRatio = (float)d3dsdSrc.Width / (float)d3dsdDst.Width;
    fHeightRatio = (float)d3dsdSrc.Height / (float)d3dsdDst.Height;

    hr = pd3dtDst->LockRect(0, &d3dlrDst, NULL, 0);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"))) {
        return FALSE;
    }

#ifndef UNDER_XBOX
    hr = pd3dsSrc->LockRect(&d3dlrSrc, NULL, 0);
#else
    if (d3dsdSrc.Usage == D3DUSAGE_RENDERTARGET) {
        hr = pd3dsSrc->LockRect(&d3dlrSrc, NULL, D3DLOCK_TILED);
    }
    else {
        hr = pd3dsSrc->LockRect(&d3dlrSrc, NULL, 0);
    }
#endif
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"))) {
        pd3dtDst->UnlockRect(0);
        return FALSE;
    }

    pdwDst = (LPDWORD)d3dlrDst.pBits;

    // The source surface has a linear format so it does not need to be deswizzled
#ifdef UNDER_XBOX
    if (!XGIsSwizzledFormat(d3dsdDst.Format)) {
#endif
        for (i = 0; i < d3dsdDst.Height; i++) {

            for (j = 0; j < d3dsdDst.Width; j++) {

                pdwDst[j] = *((LPDWORD)((LPBYTE)d3dlrSrc.pBits + (UINT)((float)i * fHeightRatio) * d3dlrSrc.Pitch) + (UINT)((float)j * fWidthRatio));
            }

            pdwDst += d3dlrDst.Pitch >> 2;
        }
#ifdef UNDER_XBOX
    }
    else {

        Swizzler swz(d3dsdDst.Width, d3dsdDst.Height, 1);
        swz.SetU(0);
        swz.SetV(0);

        for (i = 0; i < d3dsdDst.Height; i++, swz.IncV()) {
            for (j = 0; j < d3dsdDst.Width; j++, swz.IncU()) {
                pdwDst[swz.Get2D()] = *((LPDWORD)((LPBYTE)d3dlrSrc.pBits + (UINT)((float)i * fHeightRatio) * d3dlrSrc.Pitch) + (UINT)((float)j * fWidthRatio));
            }
        }
    }
#endif

    pd3dsSrc->UnlockRect();
    pd3dtDst->UnlockRect(0);

    return TRUE;
}

//******************************************************************************
float CCDevice8::CompareFrames(LPDIRECT3DSURFACE8 pd3dsSrc, LPDIRECT3DSURFACE8 pd3dsRef, LPDIRECT3DSURFACE8 pd3dsVar) {

    D3DSURFACE_DESC d3dsd, d3dsdVar;
    D3DLOCKED_RECT  d3dlrSrc, d3dlrRef, d3dlrVar;
    int             r, g, b;
    float           fPixelMagSq, fMaxMagSq;
    float           fDelta, fMaxDelta = 0.0f;
    LPDWORD         pdwSrc, pdwRef;
    float           fWidthRatio, fHeightRatio;
    UINT            i, j;
    HRESULT         hr;

    fMaxMagSq = D3DXVec3LengthSq(&(D3DXVECTOR3(255.0f, 255.0f, 255.0f) - D3DXVECTOR3(0.0f, 0.0f, 0.0f)));

    hr = pd3dsSrc->GetDesc(&d3dsd);
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDesc"))) {
        return 0.0f;
    }

    if (pd3dsVar) {
        hr = pd3dsVar->GetDesc(&d3dsdVar);
        if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDesc"))) {
            return 0.0f;
        }

        fWidthRatio = (float)d3dsdVar.Width / (float)d3dsd.Width;
        fHeightRatio = (float)d3dsdVar.Height / (float)d3dsd.Height;
    }

#ifndef UNDER_XBOX
    hr = pd3dsSrc->LockRect(&d3dlrSrc, NULL, 0);
#else
    hr = pd3dsSrc->LockRect(&d3dlrSrc, NULL, D3DLOCK_TILED);
#endif
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"))) {
        return 0.0f;
    }

    hr = pd3dsRef->LockRect(&d3dlrRef, NULL, 0);
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"))) {
        pd3dsSrc->UnlockRect();
        return 0.0f;
    }

    if (pd3dsVar) {
        hr = pd3dsVar->LockRect(&d3dlrVar, NULL, 0);
        if (ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"))) {
            pd3dsSrc->UnlockRect();
            pd3dsRef->UnlockRect();
            return 0.0f;
        }
    }

    pdwSrc = (LPDWORD)d3dlrSrc.pBits;
    pdwRef = (LPDWORD)d3dlrRef.pBits;

#ifdef UNDER_XBOX
    Swizzler swz(d3dsdVar.Width, d3dsdVar.Height, 1);
    BOOL bSwizzled = XGIsSwizzledFormat(d3dsdVar.Format);
#endif

    for (i = 0; i < d3dsd.Height; i++) {

        for (j = 0; j < d3dsd.Width; j++) {

            r = (int)RGBA_GETRED(pdwSrc[j]) - (int)RGBA_GETRED(pdwRef[j]);
            g = (int)RGBA_GETGREEN(pdwSrc[j]) - (int)RGBA_GETGREEN(pdwRef[j]);
            b = (int)RGBA_GETBLUE(pdwSrc[j]) - (int)RGBA_GETBLUE(pdwRef[j]);;
            fPixelMagSq = D3DXVec3LengthSq(&D3DXVECTOR3((float)r, (float)g, (float)b));
            fDelta = fPixelMagSq / fMaxMagSq;
            if (fDelta > fMaxDelta) {
                fMaxDelta = fDelta;
            }
            if (pd3dsVar) {
#ifdef UNDER_XBOX
                if (!bSwizzled) {
#endif
                    *((LPDWORD)((LPBYTE)d3dlrVar.pBits + (UINT)((float)i * fHeightRatio) * d3dlrVar.Pitch) + (UINT)((float)j * fWidthRatio)) = RGBA_MAKE((r < 0 ? -r : r), (g < 0 ? -g : g), (b < 0 ? -b : b), 255);
#ifdef UNDER_XBOX
                }
                else {
                    *((LPDWORD)d3dlrVar.pBits + (swz.SwizzleU((UINT)((float)j * fWidthRatio)) | swz.SwizzleV((UINT)((float)i * fHeightRatio)))) = RGBA_MAKE((r < 0 ? -r : r), (g < 0 ? -g : g), (b < 0 ? -b : b), 255);
                }
#endif
            }
        }

        pdwSrc += d3dlrSrc.Pitch >> 2;
        pdwRef += d3dlrRef.Pitch >> 2;
    }
    
    if (pd3dsVar) {
        pd3dsVar->UnlockRect();
    }
    pd3dsRef->UnlockRect();
    pd3dsSrc->UnlockRect();
    
    return 1.0f - fMaxDelta;    
}

//******************************************************************************
ULONG CCDevice8::AddRef() {

    ULONG uRefC = 0, uRefS;

    if (m_pd3dd) {
        uRefC = m_pd3dd->AddRef();
        if (m_pClient->CallMethod(MID_DEV8_AddRef, this, &uRefS)) {
#ifndef UNDER_XBOX
            if (uRefC != uRefS) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::AddRef result inconsistent [C: %d, S: %d]"), uRefC, uRefS);
            }
#endif // !UNDER_XBOX
        }
        CObject::AddRef();
    }

    return uRefC;
}

//******************************************************************************
ULONG CCDevice8::Release() {

    ULONG uRefC = 0, uRefS;

    if (m_pd3dd) {

        uRefC = m_pd3dd->Release();
        if (m_pClient->CallMethod(MID_DEV8_Release, this, &uRefS)) {
#ifndef UNDER_XBOX
            if (uRefC != uRefS) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::Release result inconsistent [C: %d, S: %d]"), uRefC, uRefS);
            }
#endif // !UNDER_XBOX
        }
        CObject::Release();
    }

    return uRefC;
}

#ifndef UNDER_XBOX

//******************************************************************************
HRESULT CCDevice8::CreateAdditionalSwapChain(D3DPRESENT_PARAMETERS* pd3dpp, CSwapChain8** ppSwapChain) {

    CCSwapChain8*        pSwapChain;
    LPDIRECT3DSWAPCHAIN8 pd3dsw;
    HRESULT              hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppSwapChain) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppSwapChain = NULL;

#ifndef DEMO_HACK
    hrC = m_pd3dd->CreateAdditionalSwapChain(pd3dpp, &pd3dsw);
#else
    hrC = E_NOTIMPL;
    pd3dsw = NULL;
#endif
    if (SUCCEEDED(hrC)) {
        pSwapChain = new CCSwapChain8();
        if (!pSwapChain) {
            pd3dsw->Release();
            return E_OUTOFMEMORY;
        }

        if (!pSwapChain->Create(m_pClient, this, pd3dsw)) {
            pd3dsw->Release();
            return ERR_LOCUSFAIL;
        }

        *ppSwapChain = pSwapChain;
    }
    else {
        pSwapChain = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_CreateAdditionalSwapChain, this, &hrS, pd3dpp, sizeof(D3DPRESENT_PARAMETERS), &pSwapChain)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateAdditionalSwapChain result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

#endif // !UNDER_XBOX

//******************************************************************************
HRESULT CCDevice8::CreateCubeTexture(UINT uEdgeLength, UINT uLevels, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CCubeTexture8** ppCubeTexture) {

    CCCubeTexture8*        pCubeTexture;
    LPDIRECT3DCUBETEXTURE8 pd3dtc;
    HRESULT                hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppCubeTexture) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppCubeTexture = NULL;

    hrC = m_pd3dd->CreateCubeTexture(uEdgeLength, uLevels, dwUsage, fmt, pool, &pd3dtc);
    if (SUCCEEDED(hrC)) {
        pCubeTexture = new CCCubeTexture8();
        if (!pCubeTexture) {
            pd3dtc->Release();
            return E_OUTOFMEMORY;
        }

        if (!pCubeTexture->Create(m_pClient, this, pd3dtc)) {
            pd3dtc->Release();
            return ERR_LOCUSFAIL;
        }

        *ppCubeTexture = pCubeTexture;
    }
    else {
        pCubeTexture = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_CreateCubeTexture, this, &hrS, uEdgeLength, uLevels, dwUsage, fmt, pool, &pCubeTexture)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateCubeTexture result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreateDepthStencilSurface(UINT uWidth, UINT uHeight, D3DFORMAT fmt, D3DMULTISAMPLE_TYPE mst, CSurface8** ppSurface) {

    CCSurface8*        pSurface;
    LPDIRECT3DSURFACE8 pd3ds;
    HRESULT            hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppSurface) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppSurface = NULL;

    hrC = m_pd3dd->CreateDepthStencilSurface(uWidth, uHeight, fmt, mst, &pd3ds);
    if (SUCCEEDED(hrC)) {
        pSurface = new CCSurface8();
        if (!pSurface) {
            pd3ds->Release();
            return E_OUTOFMEMORY;
        }

        if (!pSurface->Create(m_pClient, this, pd3ds)) {
            pd3ds->Release();
            return ERR_LOCUSFAIL;
        }

        *ppSurface = pSurface;
    }
    else {
        pSurface = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_CreateDepthStencilSurface, this, &hrS, uWidth, uHeight, fmt, mst, &pSurface)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateDepthStencilSurface result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreateImageSurface(UINT uWidth, UINT uHeight, D3DFORMAT fmt, CSurface8** ppSurface) {

    CCSurface8*        pSurface;
    LPDIRECT3DSURFACE8 pd3ds;
    HRESULT            hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppSurface) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppSurface = NULL;

    hrC = m_pd3dd->CreateImageSurface(uWidth, uHeight, fmt, &pd3ds);
    if (SUCCEEDED(hrC)) {
        pSurface = new CCSurface8();
        if (!pSurface) {
            pd3ds->Release();
            return E_OUTOFMEMORY;
        }

        if (!pSurface->Create(m_pClient, this, pd3ds)) {
            pd3ds->Release();
            return ERR_LOCUSFAIL;
        }

        *ppSurface = pSurface;
    }
    else {
        pSurface = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_CreateImageSurface, this, &hrS, uWidth, uHeight, fmt, &pSurface)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateImageSurface result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreateIndexBuffer(UINT uLength, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CIndexBuffer8** ppIndexBuffer) {

    CCIndexBuffer8*        pIndexBuffer;
    LPDIRECT3DINDEXBUFFER8 pd3di;
    HRESULT                hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppIndexBuffer) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppIndexBuffer = NULL;

    hrC = m_pd3dd->CreateIndexBuffer(uLength, dwUsage, fmt, pool, &pd3di);
    if (SUCCEEDED(hrC)) {
        pIndexBuffer = new CCIndexBuffer8();
        if (!pIndexBuffer) {
            pd3di->Release();
            return E_OUTOFMEMORY;
        }

        if (!pIndexBuffer->Create(m_pClient, this, pd3di)) {
            pd3di->Release();
            return ERR_LOCUSFAIL;
        }

        *ppIndexBuffer = pIndexBuffer;
    }
    else {
        pIndexBuffer = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_CreateIndexBuffer, this, &hrS, uLength, dwUsage, fmt, pool, &pIndexBuffer)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateIndexBuffer result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreateRenderTarget(UINT uWidth, UINT uHeight, D3DFORMAT fmt, D3DMULTISAMPLE_TYPE mst, BOOL bLockable, CSurface8** ppSurface) {

    CCSurface8*        pSurface;
    LPDIRECT3DSURFACE8 pd3ds;
    HRESULT            hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppSurface) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppSurface = NULL;

    hrC = m_pd3dd->CreateRenderTarget(uWidth, uHeight, fmt, mst, bLockable, &pd3ds);
    if (SUCCEEDED(hrC)) {
        pSurface = new CCSurface8();
        if (!pSurface) {
            pd3ds->Release();
            return E_OUTOFMEMORY;
        }

        if (!pSurface->Create(m_pClient, this, pd3ds)) {
            pd3ds->Release();
            return ERR_LOCUSFAIL;
        }

        *ppSurface = pSurface;
    }
    else {
        pSurface = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_CreateRenderTarget, this, &hrS, uWidth, uHeight, fmt, mst, bLockable, &pSurface)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateRenderTarget result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreateTexture(UINT uWidth, UINT uHeight, UINT uLevels, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CTexture8** ppTexture) {

    CCTexture8*        pTexture;
    LPDIRECT3DTEXTURE8 pd3dt;
    HRESULT            hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppTexture) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppTexture = NULL;

    hrC = m_pd3dd->CreateTexture(uWidth, uHeight, uLevels, dwUsage, fmt, pool, &pd3dt);
    if (SUCCEEDED(hrC)) {
        pTexture = new CCTexture8();
        if (!pTexture) {
            pd3dt->Release();
            return E_OUTOFMEMORY;
        }

        if (!pTexture->Create(m_pClient, this, pd3dt)) {
            pd3dt->Release();
            return ERR_LOCUSFAIL;
        }

        *ppTexture = pTexture;
    }
    else {
        pTexture = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_CreateTexture, this, &hrS, uWidth, uHeight, uLevels, dwUsage, fmt, pool, &pTexture)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateTexture result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreateVertexBuffer(UINT uLength, DWORD dwUsage, DWORD dwFVF, D3DPOOL pool, CVertexBuffer8** ppVertexBuffer) {

    CCVertexBuffer8*        pVertexBuffer;
    LPDIRECT3DVERTEXBUFFER8 pd3dr;
    HRESULT                 hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppVertexBuffer) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppVertexBuffer = NULL;

    hrC = m_pd3dd->CreateVertexBuffer(uLength, dwUsage, dwFVF, pool, &pd3dr);
    if (SUCCEEDED(hrC)) {
        pVertexBuffer = new CCVertexBuffer8();
        if (!pVertexBuffer) {
            pd3dr->Release();
            return E_OUTOFMEMORY;
        }

        if (!pVertexBuffer->Create(m_pClient, this, pd3dr)) {
            pd3dr->Release();
            return ERR_LOCUSFAIL;
        }

        *ppVertexBuffer = pVertexBuffer;
    }
    else {
        pVertexBuffer = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_CreateVertexBuffer, this, &hrS, uLength, dwUsage, dwFVF, pool, &pVertexBuffer)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateVertexBuffer result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreateVolumeTexture(UINT uWidth, UINT uHeight, UINT uDepth, UINT uLevels, DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool, CVolumeTexture8** ppVolumeTexture) {

    CCVolumeTexture8*        pVolumeTexture;
    LPDIRECT3DVOLUMETEXTURE8 pd3dtv;
    HRESULT                  hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppVolumeTexture) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppVolumeTexture = NULL;

    hrC = m_pd3dd->CreateVolumeTexture(uWidth, uHeight, uDepth, uLevels, dwUsage, fmt, pool, &pd3dtv);
    if (SUCCEEDED(hrC)) {
        pVolumeTexture = new CCVolumeTexture8();
        if (!pVolumeTexture) {
            pd3dtv->Release();
            return E_OUTOFMEMORY;
        }

        if (!pVolumeTexture->Create(m_pClient, this, pd3dtv)) {
            pd3dtv->Release();
            return ERR_LOCUSFAIL;
        }

        *ppVolumeTexture = pVolumeTexture;
    }
    else {
        pVolumeTexture = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_CreateVolumeTexture, this, &hrS, uWidth, uHeight, uDepth, uLevels, dwUsage, fmt, pool, &pVolumeTexture)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateVolumeTexture result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::ApplyStateBlock(DWORD dwToken) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->ApplyStateBlock(dwToken);

    if (m_pClient->CallMethod(MID_DEV8_ApplyStateBlock, this, &hrS, dwToken)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::ApplyStateBlock result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::BeginStateBlock() {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->BeginStateBlock();

    if (m_pClient->CallMethod(MID_DEV8_BeginStateBlock, this, &hrS)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::BeginStateBlock result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::EndStateBlock(DWORD* pdwToken) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->EndStateBlock(pdwToken);

    if (m_pClient->CallMethod(MID_DEV8_EndStateBlock, this, &hrS, pdwToken)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::EndStateBlock result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreateStateBlock(D3DSTATEBLOCKTYPE sbt, DWORD* pdwToken) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->CreateStateBlock(sbt, pdwToken);

    if (m_pClient->CallMethod(MID_DEV8_CreateStateBlock, this, &hrS, sbt, pdwToken)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateStateBlock result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::DeleteStateBlock(DWORD dwToken) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->DeleteStateBlock(dwToken);

    if (m_pClient->CallMethod(MID_DEV8_DeleteStateBlock, this, &hrS, dwToken)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::DeleteStateBlock result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CaptureStateBlock(DWORD dwToken) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->CaptureStateBlock(dwToken);

    if (m_pClient->CallMethod(MID_DEV8_CaptureStateBlock, this, &hrS, dwToken)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CaptureStateBlock result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

#ifndef UNDER_XBOX

//******************************************************************************
HRESULT CCDevice8::GetClipStatus(D3DCLIPSTATUS8* pd3dcs) {

    D3DCLIPSTATUS8  d3dcs;
    HRESULT         hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = m_pd3dd->GetClipStatus(pd3dcs);

    if (m_pClient->CallMethod(MID_DEV8_GetClipStatus, this, &hrS, &d3dcs, sizeof(D3DCLIPSTATUS8))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetClipStatus result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pd3dcs, &d3dcs, sizeof(D3DCLIPSTATUS8))) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetClipStatus returned an inconsistent clip status"));
            }
        }
    }

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetClipStatus is not implemented on Xbox"));
    return E_NOTIMPL;

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetClipStatus(D3DCLIPSTATUS8* pd3dcs) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = m_pd3dd->SetClipStatus(pd3dcs);

    if (m_pClient->CallMethod(MID_DEV8_SetClipStatus, this, &hrS, pd3dcs, sizeof(D3DCLIPSTATUS8))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetClipStatus result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::SetClipStatus is not implemented on Xbox"));
    return E_NOTIMPL;

#endif // UNDER_XBOX

    return hrC;
}

#endif // !UNDER_XBOX

//******************************************************************************
HRESULT CCDevice8::GetRenderState(D3DRENDERSTATETYPE rst, DWORD* pdwValue) {

    DWORD   dwState;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetRenderState(rst, pdwValue);

    if (m_pClient->CallMethod(MID_DEV8_GetRenderState, this, &hrS, rst, &dwState)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetRenderState result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (*pdwValue != dwState) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetRenderState returned an inconsistent state [C: %d, S: %d]"), *pdwValue, dwState);
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetRenderState(D3DRENDERSTATETYPE rst, DWORD dwValue) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->SetRenderState(rst, dwValue);

    if (m_pClient->CallMethod(MID_DEV8_SetRenderState, this, &hrS, rst, dwValue)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetRenderState result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetRenderTarget(CSurface8** ppRenderTarget) {

    LPDIRECT3DSURFACE8  pd3ds;
    CCSurface8*         pSurface;
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppRenderTarget) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppRenderTarget = NULL;

    hrC = m_pd3dd->GetRenderTarget(&pd3ds);
    if (SUCCEEDED(hrC)) {
        
        if (!m_pObjectMap->Find((DWORD)pd3ds, (LPDWORD)&pSurface)) {

            pSurface = new CCSurface8();
            if (!pSurface) {
                pd3ds->Release();
                return E_OUTOFMEMORY;
            }

            if (!pSurface->Create(m_pClient, this, pd3ds)) {
                pd3ds->Release();
                return ERR_LOCUSFAIL;
            }
        }

        pSurface->CObject::AddRef();

        *ppRenderTarget = pSurface;
    }
    else {
        pSurface = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetRenderTarget, this, &hrS, &pSurface)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetRenderTarget result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetRenderTarget(CSurface8* pRenderTarget, CSurface8* pDepthStencil) {

    LPDIRECT3DSURFACE8 pd3dsRenderTarget = NULL, pd3dsDepthStencil = NULL;
    LPDIRECT3DSURFACE8 pd3dsOldTarget, pd3dsOldDepth;
    CCSurface8*        pSurface;
    HRESULT            hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    if (pRenderTarget) {
        pd3dsRenderTarget = pRenderTarget->GetIDirect3DSurface8();
        if (FAILED(m_pd3dd->GetRenderTarget(&pd3dsOldTarget))) {
            return ERR_LOCUSFAIL;
        }
        pd3dsOldTarget->Release();
    }
    if (pDepthStencil) {
        pd3dsDepthStencil = pDepthStencil->GetIDirect3DSurface8();
        if (FAILED(m_pd3dd->GetDepthStencilSurface(&pd3dsOldDepth))) {
            pd3dsOldDepth = NULL;
        }
        else {
            pd3dsOldDepth->Release();
        }
    }

    hrC = m_pd3dd->SetRenderTarget(pd3dsRenderTarget, pd3dsDepthStencil);

    if (SUCCEEDED(hrC)) {

        if (pRenderTarget) {
            pRenderTarget->CObject::AddRef();
            if (m_pObjectMap->Find((DWORD)pd3dsOldTarget, (LPDWORD)&pSurface)) {
                pSurface->CObject::Release();
            }
        }
        if (pDepthStencil) {
            pDepthStencil->CObject::AddRef();
            if (pd3dsOldDepth && m_pObjectMap->Find((DWORD)pd3dsOldDepth, (LPDWORD)&pSurface)) {
                pSurface->CObject::Release();
            }
        }
    }

    if (m_pClient->CallMethod(MID_DEV8_SetRenderTarget, this, &hrS, pRenderTarget, pDepthStencil)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetRenderTarget result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetTransform(D3DTRANSFORMSTATETYPE tst, D3DMATRIX* pm) {

    D3DMATRIX   m;
    HRESULT     hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetTransform(tst, pm);

    if (m_pClient->CallMethod(MID_DEV8_GetTransform, this, &hrS, tst, &m, sizeof(D3DMATRIX))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetTransform result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pm, &m, sizeof(D3DMATRIX))) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetTransform returned an inconsistent matrix"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetTransform(D3DTRANSFORMSTATETYPE tst, D3DMATRIX* pm) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->SetTransform(tst, pm);

    if (m_pClient->CallMethod(MID_DEV8_SetTransform, this, &hrS, tst, pm, sizeof(D3DMATRIX))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetTransform result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::MultiplyTransform(D3DTRANSFORMSTATETYPE tst, D3DMATRIX* pm) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->MultiplyTransform(tst, pm);

    if (m_pClient->CallMethod(MID_DEV8_MultiplyTransform, this, &hrS, tst, pm, sizeof(D3DMATRIX))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::MultiplyTransform result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::Clear(DWORD dwCount, D3DRECT* prc, DWORD dwFlags, D3DCOLOR c, float fZ, DWORD dwStencil) {

    D3DRECT rcNULL = {-1, -1, -1, -1};
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->Clear(dwCount, prc, dwFlags, c, fZ, dwStencil);

    if (!prc) {
        prc = &rcNULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_Clear, this, &hrS, dwCount, prc, sizeof(D3DRECT), dwFlags, c, F2DW(fZ), dwStencil)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::Clear result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetViewport(D3DVIEWPORT8* pviewport) {

    D3DVIEWPORT8 viewport;
    HRESULT      hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetViewport(pviewport);

    if (m_pClient->CallMethod(MID_DEV8_GetViewport, this, &hrS, &viewport, sizeof(D3DVIEWPORT8))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetViewport result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pviewport, &viewport, sizeof(D3DVIEWPORT8))) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetViewport returned an inconsistent viewport"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetViewport(D3DVIEWPORT8* pviewport) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->SetViewport(pviewport);

    if (m_pClient->CallMethod(MID_DEV8_SetViewport, this, &hrS, pviewport, sizeof(D3DVIEWPORT8))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetViewport result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetClipPlane(DWORD dwIndex, float* pfPlane) {

    float   pfPlaneS[4];
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = m_pd3dd->GetClipPlane(dwIndex, pfPlane);

    if (m_pClient->CallMethod(MID_DEV8_GetClipPlane, this, &hrS, dwIndex, pfPlaneS, 4 * sizeof(float))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetClipPlane result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pfPlane, pfPlaneS, 4 * sizeof(float))) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetClipPlane returned an inconsistent plane"));
            }
        }
    }

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetClipPlane is not implemented on Xbox"));
    return E_NOTIMPL;

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetClipPlane(DWORD dwIndex, float* pfPlane) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = m_pd3dd->SetClipPlane(dwIndex, pfPlane);

    if (m_pClient->CallMethod(MID_DEV8_SetClipPlane, this, &hrS, dwIndex, pfPlane, 4 * sizeof(float))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetClipPlane result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::SetClipPlane is not implemented on Xbox"));
    return E_NOTIMPL;

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetLight(DWORD dwIndex, D3DLIGHT8* plight) {

    D3DLIGHT8   light;
    HRESULT     hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetLight(dwIndex, plight);

    if (m_pClient->CallMethod(MID_DEV8_GetLight, this, &hrS, dwIndex, &light, sizeof(D3DLIGHT8))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetLight result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(plight, &light, sizeof(D3DLIGHT8))) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetLight returned an inconsistent light"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetLight(DWORD dwIndex, D3DLIGHT8* plight) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->SetLight(dwIndex, plight);

    if (m_pClient->CallMethod(MID_DEV8_SetLight, this, &hrS, dwIndex, plight, sizeof(D3DLIGHT8))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetLight result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::LightEnable(DWORD dwIndex, BOOL bEnable) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->LightEnable(dwIndex, bEnable);

    if (m_pClient->CallMethod(MID_DEV8_LightEnable, this, &hrS, dwIndex, bEnable)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::LightEnable result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetLightEnable(DWORD dwIndex, BOOL* pbEnable) {

    BOOL    bEnable;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetLightEnable(dwIndex, pbEnable);

    if (m_pClient->CallMethod(MID_DEV8_GetLightEnable, this, &hrS, dwIndex, &bEnable)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetLightEnable result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (*pbEnable != bEnable) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetLightEnable returned an inconsistent state"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetMaterial(D3DMATERIAL8* pmaterial) {

    D3DMATERIAL8    material;
    HRESULT         hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetMaterial(pmaterial);

    if (m_pClient->CallMethod(MID_DEV8_GetMaterial, this, &hrS, &material, sizeof(D3DMATERIAL8))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetMaterial result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pmaterial, &material, sizeof(D3DMATERIAL8))) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetMaterial returned an inconsistent material"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetMaterial(D3DMATERIAL8* pmaterial) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->SetMaterial(pmaterial);

    if (m_pClient->CallMethod(MID_DEV8_SetMaterial, this, &hrS, pmaterial, sizeof(D3DMATERIAL8))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetMaterial result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetTexture(DWORD dwStage, CBaseTexture8** ppTexture) {

    CBaseTexture8*         pTexture;
    LPDIRECT3DBASETEXTURE8 pd3dt;
    HRESULT                hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppTexture) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppTexture = NULL;

    hrC = m_pd3dd->GetTexture(dwStage, &pd3dt);
    if (SUCCEEDED(hrC)) {
        if (!m_pObjectMap->Find((DWORD)pd3dt, (LPDWORD)&pTexture)) {
            return ERR_LOCUSFAIL;
        }
        pTexture->CObject::AddRef();
        *ppTexture = pTexture;
    }
    else {
        pTexture = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetTexture, this, &hrS, dwStage, &pTexture)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetTexture result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetTexture(DWORD dwStage, CBaseTexture8* pTexture) {

    LPDIRECT3DBASETEXTURE8  pd3dt = NULL;
    HRESULT                 hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG
    
    if (pTexture) {
        pd3dt = pTexture->GetIDirect3DBaseTexture8();
    }

    hrC = m_pd3dd->SetTexture(dwStage, pd3dt);

    if (m_pClient->CallMethod(MID_DEV8_SetTexture, this, &hrS, dwStage, pTexture)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetTexture result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE txsst, DWORD* pdwValue) {

    DWORD   dwState;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetTextureStageState(dwStage, txsst, pdwValue);

    if (m_pClient->CallMethod(MID_DEV8_GetTextureStageState, this, &hrS, dwStage, txsst, &dwState)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetTextureStageState result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (*pdwValue != dwState) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetTextureStageState returned an inconsistent state"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetTextureStageState(DWORD dwStage, D3DTEXTURESTAGESTATETYPE txsst, DWORD dwValue) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->SetTextureStageState(dwStage, txsst, dwValue);

    if (m_pClient->CallMethod(MID_DEV8_SetTextureStageState, this, &hrS, dwStage, txsst, dwValue)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetTextureStageState result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::UpdateTexture(CBaseTexture8* pSourceTexture, CBaseTexture8* pDestinationTexture) {

    LPDIRECT3DBASETEXTURE8 pd3dtSrc = NULL, pd3dtDst = NULL;
    HRESULT                hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    if (pSourceTexture) {
        pd3dtSrc = pSourceTexture->GetIDirect3DBaseTexture8();
    }
    if (pDestinationTexture) {
        pd3dtDst = pDestinationTexture->GetIDirect3DBaseTexture8();
    }

#ifdef D3DLOCUS_DEBUG
    if (!pd3dtSrc || !pd3dtDst) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->UpdateTexture(pd3dtSrc, pd3dtDst);

    if (m_pClient->CallMethod(MID_DEV8_UpdateTexture, this, &hrS, pSourceTexture, pDestinationTexture)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::UpdateTexture result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::UpdateTexture is not implemented on Xbox"));
    return E_NOTIMPL;

#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CCDevice8::ValidateDevice(DWORD* pdwNumPasses) {

    DWORD   dwNumPasses;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = m_pd3dd->ValidateDevice(pdwNumPasses);

    if (m_pClient->CallMethod(MID_DEV8_ValidateDevice, this, &hrS, &dwNumPasses)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::ValidateDevice result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (*pdwNumPasses != dwNumPasses) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::ValidateDevice returned an inconsistent number of passes"));
            }
        }
    }

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::ValidateDevice is not implemented on Xbox"));
    return E_NOTIMPL;

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetCurrentTexturePalette(UINT* puPaletteNumber) {

    UINT    uPaletteNumber;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = E_NOTIMPL;

    if (m_pClient->CallMethod(MID_DEV8_GetCurrentTexturePalette, this, &hrS, &uPaletteNumber)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetCurrentTexturePalette result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (*puPaletteNumber != uPaletteNumber) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetCurrentTexturePalette returned an inconsistent palette number"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetCurrentTexturePalette(UINT uPaletteNumber) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = E_NOTIMPL;

    if (m_pClient->CallMethod(MID_DEV8_SetCurrentTexturePalette, this, &hrS, uPaletteNumber)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetCurrentTexturePalette result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetPaletteEntries(UINT uPaletteNumber, PALETTEENTRY* ppe) {

    PALETTEENTRY ppeS[256];
    HRESULT      hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = E_NOTIMPL;

    if (m_pClient->CallMethod(MID_DEV8_GetPaletteEntries, this, &hrS, uPaletteNumber, ppeS, 256 * sizeof(PALETTEENTRY))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetPaletteEntries result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(ppe, ppeS, 256 * sizeof(PALETTEENTRY))) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetPaletteEntries returned an inconsistent palette"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetPaletteEntries(UINT uPaletteNumber, PALETTEENTRY* ppe) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = E_NOTIMPL;

    if (m_pClient->CallMethod(MID_DEV8_SetPaletteEntries, this, &hrS, uPaletteNumber, ppe, 256 * sizeof(PALETTEENTRY))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetPaletteEntries result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreateVertexShader(DWORD* pdwDeclaration, DWORD* pdwFunction, DWORD* pdwHandle, DWORD dwUsage) {

    DWORD   dwDeclSize = 0;
    DWORD   dwFuncSize = 0;
    LPDWORD pdw;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->CreateVertexShader(pdwDeclaration, pdwFunction, pdwHandle, dwUsage);

#ifndef UNDER_XBOX

    if (pdwDeclaration) {
        for (pdw = pdwDeclaration, dwDeclSize = 4; *pdw != D3DVSD_END(); pdw++, dwDeclSize += 4);
    }
    if (pdwFunction) {
        for (pdw = pdwFunction, dwFuncSize = 4; *pdw != D3DVS_END(); pdw++, dwFuncSize += 4);
    }

    if (m_pClient->CallMethod(MID_DEV8_CreateVertexShader, this, &hrS, pdwDeclaration, dwDeclSize, pdwFunction, dwFuncSize, pdwHandle, dwUsage)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateVertexShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

#endif // !UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreateVertexShaderTok(DWORD* pdwDeclaration, DWORD* pdwFunction, DWORD* pdwHandle, DWORD dwUsage) {

#ifdef UNDER_XBOX
    LPXGBUFFER  pxgbufShader, pxgbufErrors;
#endif // UNDER_XBOX
    DWORD       dwDeclSize = 0;
    DWORD       dwFuncSize = 0;
    LPDWORD     pdw;
    HRESULT     hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = CreateVertexShader(pdwDeclaration, pdwFunction, pdwHandle, dwUsage);

#else

    if (!pdwFunction) {
        hrC = m_pd3dd->CreateVertexShader(pdwDeclaration, pdwFunction, pdwHandle, dwUsage);
    }
    else {

        for (pdw = pdwFunction, dwFuncSize = 4; *pdw != D3DVS_END(); pdw++, dwFuncSize += 4);

        hrC = AssembleShader("<token-stream>", (LPVOID)pdwFunction, dwFuncSize, SASM_INPUT_VERTEXSHADER_TOKENS, NULL, 
                            &pxgbufShader, &pxgbufErrors, NULL, NULL, NULL, NULL);
        if (FAILED(hrC)) {
            ResultFailed(hrC, TEXT("AssembleShader"));
            DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxgbufErrors->GetBufferPointer());
            pxgbufErrors->Release();
            return hrC;
        }

        pxgbufErrors->Release();

        hrC = m_pd3dd->CreateVertexShader(pdwDeclaration, (LPDWORD)pxgbufShader->GetBufferPointer(), pdwHandle, dwUsage);

        pxgbufShader->Release();
    }

    if (pdwDeclaration) {
        for (pdw = pdwDeclaration, dwDeclSize = 4; *pdw != D3DVSD_END(); pdw++, dwDeclSize += 4);
    }

    if (m_pClient->CallMethod(MID_DEV8_CreateVertexShader, this, &hrS, pdwDeclaration, dwDeclSize, pdwFunction, dwFuncSize, pdwHandle, dwUsage)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateVertexShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreateVertexShaderAsm(DWORD* pdwDeclaration, LPVOID pvSourceCode, UINT uCodeLength, DWORD* pdwHandle, DWORD dwUsage) {

#ifndef UNDER_XBOX
    LPD3DXBUFFER pxbufShader, pxbufErrors;
#else
    LPXGBUFFER   pxgbufShader, pxgbufErrors;
#endif // UNDER_XBOX
    DWORD        dwDeclSize = 0;
    DWORD        dwFuncSize = 0;
    LPDWORD      pdw;
    HRESULT      hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = D3DXAssembleShader(pvSourceCode, uCodeLength, 0, NULL, &pxbufShader, &pxbufErrors);
    if (FAILED(hrC)) {
        ResultFailed(hrC, TEXT("D3DXAssembleShader"));
        DebugString(TEXT("Assembly errors:\n%s"), (LPSTR)pxbufErrors->GetBufferPointer());
        pxbufErrors->Release();
        return hrC;
    }

    pxbufErrors->Release();

    hrC = m_pd3dd->CreateVertexShader(pdwDeclaration, (LPDWORD)pxbufShader->GetBufferPointer(), pdwHandle, dwUsage);

    if (pdwDeclaration) {
        for (pdw = pdwDeclaration, dwDeclSize = 4; *pdw != D3DVSD_END(); pdw++, dwDeclSize += 4);
    }
    for (pdw = (LPDWORD)pxbufShader->GetBufferPointer(), dwFuncSize = 4; *pdw != D3DVS_END(); pdw++, dwFuncSize += 4);

    if (m_pClient->CallMethod(MID_DEV8_CreateVertexShader, this, &hrS, pdwDeclaration, dwDeclSize, (LPDWORD)pxbufShader->GetBufferPointer(), dwFuncSize, pdwHandle, dwUsage)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateVertexShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    pxbufShader->Release();

#else

    hrC = AssembleShader("<memory>", pvSourceCode, uCodeLength, 0, NULL, 
                        &pxgbufShader, &pxgbufErrors, NULL, NULL, NULL, NULL);
    if (FAILED(hrC)) {
        ResultFailed(hrC, TEXT("AssembleShader"));
        DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxgbufErrors->GetBufferPointer());
        pxgbufErrors->Release();
        return hrC;
    }

    pxgbufErrors->Release();

    hrC = m_pd3dd->CreateVertexShader(pdwDeclaration, (LPDWORD)pxgbufShader->GetBufferPointer(), pdwHandle, dwUsage);

    pxgbufShader->Release();

    hrS = AssembleShader("<memory>", pvSourceCode, uCodeLength, SASM_OUTPUTTOKENS, NULL, 
                        &pxgbufShader, &pxgbufErrors, NULL, NULL, NULL, NULL);
    if (FAILED(hrS)) {
        ResultFailed(hrS, TEXT("AssembleShader(..., SASM_OUTPUTTOKENS, ...)"));
        DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxgbufErrors->GetBufferPointer());
        pxgbufErrors->Release();
        return hrC;
    }

    pxgbufErrors->Release();

    if (pdwDeclaration) {
        for (pdw = pdwDeclaration, dwDeclSize = 4; *pdw != D3DVSD_END(); pdw++, dwDeclSize += 4);
    }
    for (pdw = (LPDWORD)pxgbufShader->GetBufferPointer(), dwFuncSize = 4; *pdw != D3DVS_END(); pdw++, dwFuncSize += 4);

    if (m_pClient->CallMethod(MID_DEV8_CreateVertexShader, this, &hrS, pdwDeclaration, dwDeclSize, (LPDWORD)pxgbufShader->GetBufferPointer(), dwFuncSize, pdwHandle, dwUsage)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreateVertexShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    pxgbufShader->Release();

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::DeleteVertexShader(DWORD dwHandle) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->DeleteVertexShader(dwHandle);

    if (m_pClient->CallMethod(MID_DEV8_DeleteVertexShader, this, &hrS, dwHandle)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::DeleteVertexShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetVertexShader(DWORD* pdwHandle) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetVertexShader(pdwHandle);

    if (m_pClient->CallMethod(MID_DEV8_GetVertexShader, this, &hrS, pdwHandle)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetVertexShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetVertexShader(DWORD dwHandle) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->SetVertexShader(dwHandle);

    if (m_pClient->CallMethod(MID_DEV8_SetVertexShader, this, &hrS, dwHandle)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetVertexShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetVertexShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount) {

    LPDWORD pdwData;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetVertexShaderConstant(dwRegister, pvConstantData, dwConstantCount);

    pdwData = (LPDWORD)MemAlloc32(dwConstantCount * 4 * sizeof(float));
    if (!pdwData) {
        return hrC;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetVertexShaderConstant, this, &hrS, dwRegister, pdwData, dwConstantCount * 4 * sizeof(float), dwConstantCount)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetVertexShaderConstant result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pvConstantData, pdwData, dwConstantCount * 4 * sizeof(float))) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetVertexShaderConstant returned inconsistent constant data"));
            }
        }
    }

    MemFree32(pdwData);

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetVertexShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->SetVertexShaderConstant(dwRegister, pvConstantData, dwConstantCount);

    if (m_pClient->CallMethod(MID_DEV8_SetVertexShaderConstant, this, &hrS, dwRegister, pvConstantData, dwConstantCount * 4 * sizeof(float), dwConstantCount)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetVertexShaderConstant result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetVertexShaderDeclaration(DWORD dwHandle, void* pvData, DWORD* pdwSizeOfData) {

    LPBYTE  pData;
    DWORD   dwSize, dwInitSize;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    dwInitSize = *pdwSizeOfData;
    dwSize = *pdwSizeOfData;

    hrC = m_pd3dd->GetVertexShaderDeclaration(dwHandle, pvData, pdwSizeOfData);

    if (dwInitSize && pvData) {
        pData = (LPBYTE)MemAlloc32(dwInitSize);
        if (!pData) {
            return hrC;
        }
    }
    else {
        pData = 0;
        dwInitSize = 0;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetVertexShaderDeclaration, this, &hrS, dwHandle, pData, dwInitSize, &dwSize)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetVertexShaderDeclaration result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (hrC == D3DERR_MOREDATA) {
            if (*pdwSizeOfData != dwSize) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetVertexShaderDeclaration returned an inconsistent size"));
            }
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pvData, pData, dwInitSize)) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetVertexShaderDeclaration returned an inconsistent declaration"));
            }
        }
    }

    if (dwInitSize) {
        MemFree32(pData);
    }

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetVertexShaderDeclaration is not implemented on Xbox"));
    hrC = E_NOTIMPL;

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetVertexShaderFunction(DWORD dwHandle, void* pvData, DWORD* pdwSizeOfData) {

    LPBYTE  pData;
    DWORD   dwSize, dwInitSize;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    dwInitSize = *pdwSizeOfData;
    dwSize = *pdwSizeOfData;

    hrC = m_pd3dd->GetVertexShaderFunction(dwHandle, pvData, pdwSizeOfData);

    if (dwInitSize && pvData) {
        pData = (LPBYTE)MemAlloc32(dwInitSize);
        if (!pData) {
            return hrC;
        }
    }
    else {
        pData = 0;
        dwInitSize = 0;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetVertexShaderFunction, this, &hrS, dwHandle, pData, dwInitSize, &dwSize)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetVertexShaderFunction result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (hrC == D3DERR_MOREDATA) {
            if (*pdwSizeOfData != dwSize) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetVertexShaderFunction returned an inconsistent size"));
            }
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pvData, pData, dwInitSize)) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetVertexShaderFunction returned an inconsistent function"));
            }
        }
    }

    if (dwInitSize) {
        MemFree32(pData);
    }

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetVertexShaderFunction is not implemented on Xbox"));
    hrC = E_NOTIMPL;

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
#ifndef UNDER_XBOX
HRESULT CCDevice8::CreatePixelShader(DWORD* pdwFunction, DWORD* pdwHandle) {
#else
HRESULT CCDevice8::CreatePixelShader(const D3DPIXELSHADERDEF* pd3dpsdFunction, DWORD* pdwHandle) {
#endif // UNDER_XBOX

    LPDWORD pdw;
    DWORD   dwFuncSize;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = m_pd3dd->CreatePixelShader(pdwFunction, pdwHandle);

    for (pdw = pdwFunction, dwFuncSize = 4; *pdw != D3DPS_END(); pdw++, dwFuncSize += 4);

    if (m_pClient->CallMethod(MID_DEV8_CreatePixelShader, this, &hrS, pdwFunction, dwFuncSize, pdwHandle)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreatePixelShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

#else

    hrC = m_pd3dd->CreatePixelShader(pd3dpsdFunction, pdwHandle);

    Log(LOG_WARN, TEXT("CCDevice8::CreatePixelShader called without specifying token function.  Server pixel shader will not be created"));

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreatePixelShaderTok(DWORD* pdwFunction, DWORD* pdwHandle) {

#ifdef UNDER_XBOX
    LPXGBUFFER  pxgbufShader, pxgbufErrors;
#endif // UNDER_XBOX
    DWORD       dwDeclSize = 0;
    DWORD       dwFuncSize = 0;
    LPDWORD     pdw;
    HRESULT     hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = CreatePixelShader(pdwFunction, pdwHandle);

#else

    for (pdw = pdwFunction, dwFuncSize = 4; *pdw != D3DPS_END(); pdw++, dwFuncSize += 4);

    hrC = AssembleShader("<token-stream>", (LPVOID)pdwFunction, dwFuncSize, SASM_INPUT_PIXELSHADER_TOKENS, NULL, 
                        &pxgbufShader, &pxgbufErrors, NULL, NULL, NULL, NULL);
    if (FAILED(hrC)) {
        ResultFailed(hrC, TEXT("AssembleShader"));
        DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxgbufErrors->GetBufferPointer());
        pxgbufErrors->Release();
        return hrC;
    }

    pxgbufErrors->Release();

    hrC = m_pd3dd->CreatePixelShader((D3DPIXELSHADERDEF*)pxgbufShader->GetBufferPointer(), pdwHandle);

    pxgbufShader->Release();

    if (m_pClient->CallMethod(MID_DEV8_CreatePixelShader, this, &hrS, pdwFunction, dwFuncSize, pdwHandle)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreatePixelShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::CreatePixelShaderAsm(LPVOID pvSourceCode, UINT uCodeLength, DWORD* pdwHandle) {

#ifndef UNDER_XBOX
    LPD3DXBUFFER pxbufShader, pxbufErrors;
#else
    LPXGBUFFER   pxgbufShader, pxgbufErrors;
#endif // UNDER_XBOX
    DWORD        dwFuncSize = 0;
    LPDWORD      pdw;
    HRESULT      hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = D3DXAssembleShader(pvSourceCode, uCodeLength, 0, NULL, &pxbufShader, &pxbufErrors);
    if (FAILED(hrC)) {
        ResultFailed(hrC, TEXT("D3DXAssembleShader"));
        DebugString(TEXT("Assembly errors:\n%s"), (LPSTR)pxbufErrors->GetBufferPointer());
        pxbufErrors->Release();
        return hrC;
    }

    pxbufErrors->Release();

    hrC = m_pd3dd->CreatePixelShader((LPDWORD)pxbufShader->GetBufferPointer(), pdwHandle);

    for (pdw = (LPDWORD)pxbufShader->GetBufferPointer(), dwFuncSize = 4; *pdw != D3DPS_END(); pdw++, dwFuncSize += 4);

    if (m_pClient->CallMethod(MID_DEV8_CreatePixelShader, this, &hrS, (LPDWORD)pxbufShader->GetBufferPointer(), dwFuncSize, pdwHandle)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreatePixelShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    pxbufShader->Release();

#else

    hrC = AssembleShader("<memory>", pvSourceCode, uCodeLength, 0, NULL, 
                        &pxgbufShader, &pxgbufErrors, NULL, NULL, NULL, NULL);
    if (FAILED(hrC)) {
        ResultFailed(hrC, TEXT("AssembleShader"));
        DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxgbufErrors->GetBufferPointer());
        pxgbufErrors->Release();
        return hrC;
    }

    pxgbufErrors->Release();

    hrC = m_pd3dd->CreatePixelShader((D3DPIXELSHADERDEF*)pxgbufShader->GetBufferPointer(), pdwHandle);

    pxgbufShader->Release();

    hrS = AssembleShader("<memory>", pvSourceCode, uCodeLength, SASM_OUTPUTTOKENS, NULL, 
                        &pxgbufShader, &pxgbufErrors, NULL, NULL, NULL, NULL);
    if (FAILED(hrS)) {
        ResultFailed(hrS, TEXT("AssembleShader(..., SASM_OUTPUTTOKENS, ...)"));
        DebugString(TEXT("Assembly errors:\n%S"), (LPSTR)pxgbufErrors->GetBufferPointer());
        pxgbufErrors->Release();
        return hrC;
    }

    pxgbufErrors->Release();

    for (pdw = (LPDWORD)pxgbufShader->GetBufferPointer(), dwFuncSize = 4; *pdw != D3DPS_END(); pdw++, dwFuncSize += 4);

    if (m_pClient->CallMethod(MID_DEV8_CreatePixelShader, this, &hrS, (LPDWORD)pxgbufShader->GetBufferPointer(), dwFuncSize, pdwHandle)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CreatePixelShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    pxgbufShader->Release();

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::DeletePixelShader(DWORD dwHandle) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->DeletePixelShader(dwHandle);

    if (m_pClient->CallMethod(MID_DEV8_DeletePixelShader, this, &hrS, dwHandle)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::DeletePixelShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetPixelShader(DWORD* pdwHandle) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetPixelShader(pdwHandle);

    if (m_pClient->CallMethod(MID_DEV8_GetPixelShader, this, &hrS, pdwHandle)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetPixelShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetPixelShader(DWORD dwHandle) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->SetPixelShader(dwHandle);

    if (m_pClient->CallMethod(MID_DEV8_SetPixelShader, this, &hrS, dwHandle)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetPixelShader result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetPixelShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount) {

    LPDWORD pdwData;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetPixelShaderConstant(dwRegister, pvConstantData, dwConstantCount);

    pdwData = (LPDWORD)MemAlloc32(dwConstantCount * 4 * sizeof(float));
    if (!pdwData) {
        return hrC;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetPixelShaderConstant, this, &hrS, dwRegister, pdwData, dwConstantCount * 4 * sizeof(float), dwConstantCount)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetPixelShaderConstant result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pvConstantData, pdwData, dwConstantCount * 4 * sizeof(float))) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetPixelShaderConstant returned inconsistent constant data"));
            }
        }
    }

    MemFree32(pdwData);

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetPixelShaderConstant(DWORD dwRegister, void* pvConstantData, DWORD dwConstantCount) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->SetPixelShaderConstant(dwRegister, pvConstantData, dwConstantCount);

    if (m_pClient->CallMethod(MID_DEV8_SetPixelShaderConstant, this, &hrS, dwRegister, pvConstantData, dwConstantCount * 4 * sizeof(float), dwConstantCount)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetPixelShaderConstant result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
#ifndef UNDER_XBOX
HRESULT CCDevice8::GetPixelShaderFunction(DWORD dwHandle, void* pvData, DWORD* pdwSizeOfData) {
#else
HRESULT CCDevice8::GetPixelShaderFunction(DWORD dwHandle, D3DPIXELSHADERDEF* pd3dpsd) {
#endif // UNDER_XBOX

    LPBYTE  pData;
    DWORD   dwSize, dwInitSize;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    dwInitSize = *pdwSizeOfData;
    dwSize = *pdwSizeOfData;

    hrC = m_pd3dd->GetPixelShaderFunction(dwHandle, pvData, pdwSizeOfData);

    if (dwInitSize && pvData) {
        pData = (LPBYTE)MemAlloc32(dwInitSize);
        if (!pData) {
            return hrC;
        }
    }
    else {
        pData = 0;
        dwInitSize = 0;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetPixelShaderFunction, this, &hrS, dwHandle, pData, dwInitSize, &dwSize)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetPixelShaderFunction result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (hrC == D3DERR_MOREDATA) {
            if (*pdwSizeOfData != dwSize) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetPixelShaderFunction returned an inconsistent size"));
            }
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pvData, pData, dwInitSize)) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetPixelShaderFunction returned an inconsistent function"));
            }
        }
    }

    if (dwInitSize) {
        MemFree32(pData);
    }

#else

    hrC = m_pd3dd->GetPixelShaderFunction(dwHandle, pd3dpsd);

#endif // UNDER_XBOX

    return hrC;
}

/*
#ifdef UNDER_XBOX
//******************************************************************************
HRESULT CCDevice8::GetPixelShaderFunction(DWORD dwHandle, D3DPIXELSHADERDEF* pd3dpsd, void* pvData, DWORD* pdwSizeOfData) {

    LPBYTE  pData;
    DWORD   dwSize, dwInitSize;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    dwInitSize = *pdwSizeOfData;
    dwSize = *pdwSizeOfData;

    hrC = m_pd3dd->GetPixelShaderFunction(dwHandle, pd3dpsd);

    if (dwInitSize && pvData) {
        pData = (LPBYTE)MemAlloc32(dwInitSize);
        if (!pData) {
            return hrC;
        }
    }
    else {
        pData = 0;
        dwInitSize = 0;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetPixelShaderFunction, this, &hrS, dwHandle, pData, dwInitSize, &dwSize)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetPixelShaderFunction result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (hrC == D3DERR_MOREDATA) {
            if (*pdwSizeOfData != dwSize) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetPixelShaderFunction returned an inconsistent size"));
            }
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pvData, pData, dwInitSize)) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetPixelShaderFunction returned an inconsistent function"));
            }
        }
    }

    if (dwInitSize) {
        MemFree32(pData);
    }

    return hrC;
}
#endif // UNDER_XBOX
*/

//******************************************************************************
#ifndef UNDER_XBOX
HRESULT CCDevice8::Present(RECT* prectSrc, RECT* prectDst, HWND hDestWindowOverride, RGNDATA* prgnDirtyRegion)
#else
HRESULT CCDevice8::Present(RECT* prectSrc, RECT* prectDst, void* hDestWindowOverride, void* prgnDirtyRegion)
#endif // UNDER_XBOX
{
    static RECT     rectNULL = {-1, -1, -1, -1};
    static RGNDATA  rgnNULL = {{sizeof(RGNDATAHEADER), RDH_RECTANGLES, 0, 0, {-1, -1, -1, -1}}, '\0'};
    HRESULT         hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    if (m_uShowVerification) {
        OverlayVerificationResults();
    }

    hrC = m_pd3dd->Present(prectSrc, prectDst, hDestWindowOverride, prgnDirtyRegion);

    if (!prectSrc) {
        prectSrc = &rectNULL;
    }
    if (!prectDst) {
        prectDst = &rectNULL;
    }
#ifndef UNDER_XBOX
    if (!prgnDirtyRegion) {
        prgnDirtyRegion = &rgnNULL;
    }
#else
    prgnDirtyRegion = &rgnNULL;
#endif // UNDER_XBOX

    if (m_pClient->CallMethod(MID_DEV8_Present, this, &hrS, prectSrc, sizeof(RECT), prectDst, sizeof(RECT), hDestWindowOverride, prgnDirtyRegion, sizeof(RGNDATA))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::Present result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    m_uFramesPresented++;

    // Verify the frame
    if (m_bVerifyFrames && m_pClient->IsConnected()) {

        LPDIRECT3DSURFACE8 pd3ds;
        BOOL bPerPixelCompare = TRUE;

        // Temporarily disable remote method calls
        m_pClient->EnableMethodCalls(FALSE);

#ifndef UNDER_XBOX
        pd3ds = GetFrontBufferContents();
#else
        m_pd3dd->GetBackBuffer(-1, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
#endif // UNDER_XBOX

        if (m_bServerAffinity && !(BOOL)m_uShowVerification) {

            DWORD dwSrcCRC, dwRefCRC;

            dwSrcCRC = ComputeSurfaceCRC32(pd3ds);

            if (!m_pClient->GetRefFrameCRC32(this, &dwRefCRC)) {
                Log(LOG_FAIL, TEXT("Unable to obtain the CRC of the reference frame for image validation"));
                m_fFrameMatch = 0.0f;
            }
            else {
                if (dwSrcCRC == dwRefCRC) {
                    m_fFrameMatch = 1.0f;
                    bPerPixelCompare = FALSE;
                }
            }
        }

        if (bPerPixelCompare) {

            LPDIRECT3DSURFACE8  pd3dsRef;
            D3DSURFACE_DESC     d3dsd;
            D3DLOCKED_RECT      d3dlr;
            BOOL                bResult;
            HRESULT             hr;

            pd3ds->GetDesc(&d3dsd);

#ifndef UNDER_XBOX
            hr = m_pd3dd->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_X8R8G8B8, &pd3dsRef);
#else
            hr = m_pd3dd->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_LIN_X8R8G8B8, &pd3dsRef);
#endif // UNDER_XBOX
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateImageSurface"))) {
                Log(LOG_FAIL, TEXT("Unable to obtain the contents of the reference frame for image validation"));
                m_fFrameMatch = 0.0f;
            }
            else {

                pd3dsRef->LockRect(&d3dlr, NULL, 0);
                bResult = m_pClient->GetRefFrame(this, d3dsd.Width, d3dsd.Height, d3dlr.Pitch, d3dlr.pBits);
                pd3dsRef->UnlockRect();
                if (!bResult) {
                    Log(LOG_FAIL, TEXT("Unable to obtain the contents of the reference frame for image validation"));
                    m_fFrameMatch = 0.0f;
                }
                else {

                    float fThreshold;

                    m_pClient->EnableMethodCalls(TRUE);

                    if (m_pd3dtFrameVar) {
                        CSurface8* pd3dsFrameVar;
                        m_pd3dtFrameVar->GetSurfaceLevel(0, &pd3dsFrameVar);
                        m_fFrameMatch = CompareFrames(pd3ds, pd3dsRef, pd3dsFrameVar->GetIDirect3DSurface8());
                        pd3dsFrameVar->LockRect(&d3dlr, NULL, 0);
                        pd3dsFrameVar->UnlockRect();
                        pd3dsFrameVar->Release();
                    }
                    else {
                        m_fFrameMatch = CompareFrames(pd3ds, pd3dsRef, NULL);
                    }

                    if (m_bServerAffinity) {
                        fThreshold = 1.0f;
                    }
                    else {
                        fThreshold = m_fThreshold;
                    }
                    if (m_fFrameMatch < fThreshold) {

                        TCHAR szFile[128];
                        LPDIRECT3DSURFACE8 pd3dsVariance;

                        Log(LOG_FAIL, TEXT("The composition of frame %d differs from the composition of the reference frame (%3.3f variance)"), m_uFramesPresented, 1.0f - m_fFrameMatch);

                        GetModuleName(GetTestInstance(), szFile, 128);
                        wsprintf(szFile + _tcslen(szFile), TEXT("_%d_s"), m_uFramesPresented);
                        CaptureSurface(pd3ds, szFile, TRUE);
                        *(szFile + _tcslen(szFile) - 1) = TEXT('r');
                        CaptureSurface(pd3dsRef, szFile);
                        m_pClient->EnableMethodCalls(FALSE);
#ifndef UNDER_XBOX
                        hr = m_pd3dd->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_X8R8G8B8, &pd3dsVariance);
#else
                        hr = m_pd3dd->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_LIN_X8R8G8B8, &pd3dsVariance);
#endif // UNDER_XBOX
                        if (SUCCEEDED(hr)) {
                            CompareFrames(pd3ds, pd3dsRef, pd3dsVariance);
                            *(szFile + _tcslen(szFile) - 1) = TEXT('v');
                            CaptureSurface(pd3dsVariance, szFile);
                            pd3dsVariance->Release();
                        }
                        m_pClient->EnableMethodCalls(TRUE);
                    }

                    if (m_pd3dtFrameSrc) {
                        UpdateFBTexture(m_pd3dtFrameSrc, pd3ds);
                    }

                    if (m_pd3dtFrameRef) {
                        UpdateFBTexture(m_pd3dtFrameRef, pd3dsRef);
                    }

                    m_pClient->EnableMethodCalls(FALSE);
                }

                pd3dsRef->Release();
            }
        }

        pd3ds->Release();

        // Restore remote method calls
        m_pClient->EnableMethodCalls(TRUE);
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::Reset(D3DPRESENT_PARAMETERS* pd3dpp) {

#ifndef UNDER_XBOX
    LPDIRECT3DSURFACE8 pd3ds;
    D3DSURFACE_DESC    d3dsd;
#endif
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->Reset(pd3dpp);

    if (m_pClient->CallMethod(MID_DEV8_Reset, this, &hrS, pd3dpp, sizeof (D3DPRESENT_PARAMETERS))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::Reset result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::BeginScene() {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->BeginScene();

    if (m_pClient->CallMethod(MID_DEV8_BeginScene, this, &hrS)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::BeginScene result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::EndScene() {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

// ##DELETE
// ##HACK to make diffuse modulated blending work on Inspiron 5000
#ifndef UNDER_XBOX
    typedef struct _DUMMYVERTEX {
        D3DXVECTOR3 vPosition;
        float       fRHW;
        D3DCOLOR    cDiffuse;
        D3DCOLOR    cSpecular;
        float       u0, v0;

        _DUMMYVERTEX() {}
        _DUMMYVERTEX(const D3DVECTOR& v, float _fRHW, D3DCOLOR _cDiffuse, 
                  D3DCOLOR _cSpecular, float _u0, float _v0) 
        { 
            vPosition.x = v.x; vPosition.y = v.y; vPosition.z = v.z; fRHW = _fRHW;
            cDiffuse = _cDiffuse; cSpecular = _cSpecular;
            u0 = _u0; v0 = _v0;
        }
    } DUMMYVERTEX;
    DUMMYVERTEX rDummy[3];
    rDummy[0] = DUMMYVERTEX(D3DXVECTOR3(0.0f, (float)0.0f, 0.000009f), 110000.0f, 0xFF000000, 0, 0.0f, 1.0f);
    rDummy[1] = DUMMYVERTEX(D3DXVECTOR3(0.0f, 0.0f, 0.000009f), 110000.0f, 0xFF000000, 0, 0.0f, 0.0f);
    rDummy[2] = DUMMYVERTEX(D3DXVECTOR3((float)0.0f, 0.0f, 0.000009f), 110000.0f, 0xFF000000, 0, 1.0f, 0.0f);
    m_pd3dd->SetVertexShader(D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1);
    m_pd3dd->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG2);
    m_pd3dd->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    m_pd3dd->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG2);
    m_pd3dd->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    m_pd3dd->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 1, rDummy, sizeof(DUMMYVERTEX));
    m_pd3dd->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);
    m_pd3dd->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    m_pd3dd->SetVertexShader(D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1);
#endif // !UNDER_XBOX
// ##END HACK
// ##END DELETE

    hrC = m_pd3dd->EndScene();

    if (m_pClient->CallMethod(MID_DEV8_EndScene, this, &hrS)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::EndScene result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::DrawIndexedPrimitive(D3DPRIMITIVETYPE d3dpt, UINT uMinVertexToShade, UINT uNumVerticesToShade, UINT uStartIndex, UINT uPrimitiveCount) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->DrawIndexedPrimitive(d3dpt, uMinVertexToShade, uNumVerticesToShade, uStartIndex, uPrimitiveCount);

    if (m_pClient->CallMethod(MID_DEV8_DrawIndexedPrimitive, this, &hrS, d3dpt, uMinVertexToShade, uNumVerticesToShade, uStartIndex, uPrimitiveCount)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::DrawIndexedPrimitive result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::DrawIndexedPrimitiveUP(D3DPRIMITIVETYPE d3dpt, UINT uMinVertexToShade, UINT uNumVerticesToShade, UINT uPrimitiveCount, void* pvIndices, D3DFORMAT fmtIndex, void* pvVertices, UINT uStride) {

    UINT    uNumIndices;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->DrawIndexedPrimitiveUP(d3dpt, uMinVertexToShade, uNumVerticesToShade, uPrimitiveCount, pvIndices, fmtIndex, pvVertices, uStride);

    switch (d3dpt) {
        case D3DPT_POINTLIST:
            uNumIndices = uPrimitiveCount;
            break;
        case D3DPT_LINELIST:
            uNumIndices = uPrimitiveCount * 2;
            break;
        case D3DPT_LINESTRIP:
            uNumIndices = uPrimitiveCount + 1;
            break;
        case D3DPT_TRIANGLELIST:
            uNumIndices = uPrimitiveCount * 3;
            break;
        case D3DPT_TRIANGLESTRIP:
        case D3DPT_TRIANGLEFAN:
            uNumIndices = uPrimitiveCount + 2;
            break;
    }

    if (m_pClient->CallMethod(MID_DEV8_DrawIndexedPrimitiveUP, this, &hrS, d3dpt, uMinVertexToShade, uNumVerticesToShade, uPrimitiveCount, pvIndices, uNumIndices * (fmtIndex == D3DFMT_INDEX16 ? 2 : 4), fmtIndex, pvVertices, (uMinVertexToShade + uNumVerticesToShade) * uStride, uStride)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::DrawIndexedPrimitiveUP result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::DrawPrimitive(D3DPRIMITIVETYPE d3dpt, UINT uStartVertex, UINT uPrimitiveCount) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->DrawPrimitive(d3dpt, uStartVertex, uPrimitiveCount);

    if (m_pClient->CallMethod(MID_DEV8_DrawPrimitive, this, &hrS, d3dpt, uStartVertex, uPrimitiveCount)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::DrawPrimitive result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::DrawPrimitiveUP(D3DPRIMITIVETYPE d3dpt, UINT uPrimitiveCount, void* pvVertices, UINT uStride) {

    UINT    uNumVertices;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->DrawPrimitiveUP(d3dpt, uPrimitiveCount, pvVertices, uStride);

    switch (d3dpt) {
        case D3DPT_POINTLIST:
            uNumVertices = uPrimitiveCount;
            break;
        case D3DPT_LINELIST:
            uNumVertices = uPrimitiveCount * 2;
            break;
        case D3DPT_LINESTRIP:
            uNumVertices = uPrimitiveCount + 1;
            break;
        case D3DPT_TRIANGLELIST:
            uNumVertices = uPrimitiveCount * 3;
            break;
        case D3DPT_TRIANGLESTRIP:
        case D3DPT_TRIANGLEFAN:
            uNumVertices = uPrimitiveCount + 2;
            break;
    }

    if (m_pClient->CallMethod(MID_DEV8_DrawPrimitiveUP, this, &hrS, d3dpt, uPrimitiveCount, pvVertices, uNumVertices * uStride, uStride)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::DrawPrimitiveUP result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::DeletePatch(UINT uHandle) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->DeletePatch(uHandle);

    if (m_pClient->CallMethod(MID_DEV8_DeletePatch, this, &hrS, uHandle)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::DeletePatch result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::DrawRectPatch(UINT uHandle, float* pfNumSegs, D3DRECTPATCH_INFO* prpi) {

    float   fNumSegs;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    fNumSegs = *pfNumSegs;

    hrC = m_pd3dd->DrawRectPatch(uHandle, pfNumSegs, prpi);

    if (m_pClient->CallMethod(MID_DEV8_DrawRectPatch, this, &hrS, uHandle, &fNumSegs, prpi, sizeof(D3DRECTPATCH_INFO))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::DrawRectPatch result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (*pfNumSegs != fNumSegs) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::DrawRectPatch returned an inconsistent number of segments"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::DrawTriPatch(UINT uHandle, float* pfNumSegs, D3DTRIPATCH_INFO* ptsi) {

    float   fNumSegs;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->DrawTriPatch(uHandle, pfNumSegs, ptsi);

    if (m_pClient->CallMethod(MID_DEV8_DrawTriPatch, this, &hrS, uHandle, &fNumSegs, ptsi, sizeof(D3DTRIPATCH_INFO))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::DrawTriPatch result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (*pfNumSegs != fNumSegs) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::DrawTriPatch returned an inconsistent number of segments"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetStreamSource(UINT uStream, CVertexBuffer8** ppVertexData, UINT* puStride) {

    CVertexBuffer8*         pVertexBuffer;
    LPDIRECT3DVERTEXBUFFER8 pd3dr;
    UINT                    uStride;
    HRESULT                 hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppVertexData) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppVertexData = NULL;

    hrC = m_pd3dd->GetStreamSource(uStream, &pd3dr, puStride);
    if (SUCCEEDED(hrC)) {
        if (!m_pObjectMap->Find((DWORD)pd3dr, (LPDWORD)&pVertexBuffer)) {
            return ERR_LOCUSFAIL;
        }
        pVertexBuffer->CObject::AddRef();
        *ppVertexData = pVertexBuffer;
    }
    else {
        pVertexBuffer = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetStreamSource, this, &hrS, uStream, &pVertexBuffer, &uStride)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetStreamSource result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        if (SUCCEEDED(hrC)) {
            if (*puStride != uStride) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetStreamSource returned an inconsistent stride"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetStreamSource(UINT uStream, CVertexBuffer8* pVertexData, UINT uStride) {

    LPDIRECT3DVERTEXBUFFER8 pd3dr = NULL;
    HRESULT                 hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    if (pVertexData) {
        pd3dr = pVertexData->GetIDirect3DVertexBuffer8();
    }

    hrC = m_pd3dd->SetStreamSource(uStream, pd3dr, uStride);

    if (m_pClient->CallMethod(MID_DEV8_SetStreamSource, this, &hrS, uStream, pVertexData, uStride)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetStreamSource result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetIndices(CIndexBuffer8** ppIndexData, UINT* puBaseIndex) {

    CIndexBuffer8*         pIndexBuffer;
    LPDIRECT3DINDEXBUFFER8 pd3di;
    UINT                   uBaseIndex;
    HRESULT                hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppIndexData) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppIndexData = NULL;

    hrC = m_pd3dd->GetIndices(&pd3di, puBaseIndex);
    if (SUCCEEDED(hrC)) {
        if (!m_pObjectMap->Find((DWORD)pd3di, (LPDWORD)&pIndexBuffer)) {
            return ERR_LOCUSFAIL;
        }
        pIndexBuffer->CObject::AddRef();
        *ppIndexData = pIndexBuffer;
    }
    else {
        pIndexBuffer = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetIndices, this, &hrS, &pIndexBuffer, &uBaseIndex)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetIndices result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        if (SUCCEEDED(hrC)) {
            if (*puBaseIndex != uBaseIndex) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetIndices returned an inconsistent base index"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::SetIndices(CIndexBuffer8* pIndexData, UINT uBaseIndex) {

    LPDIRECT3DINDEXBUFFER8 pd3di = NULL;
    HRESULT                hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    if (pIndexData) {
        pd3di = pIndexData->GetIDirect3DIndexBuffer8();
    }

    hrC = m_pd3dd->SetIndices(pd3di, uBaseIndex);

    if (m_pClient->CallMethod(MID_DEV8_SetIndices, this, &hrS, pIndexData, uBaseIndex)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetIndices result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
UINT CCDevice8::GetAvailableTextureMem() {

    UINT uMemC, uMemS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return 0;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    uMemC = m_pd3dd->GetAvailableTextureMem();

    if (m_pClient->CallMethod(MID_DEV8_GetAvailableTextureMem, this, &uMemS)) {
        if (uMemC != uMemS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetAvailableTextureMem returned an inconsistent amount of available memory"));
        }
    }

    return uMemC;
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetAvailableTextureMem is not implemented on XBox"));
    return 0;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CCDevice8::GetCreationParameters(D3DDEVICE_CREATION_PARAMETERS* pd3dcp) {

    D3DDEVICE_CREATION_PARAMETERS   d3dcp;
    HRESULT                         hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef DEMO_HACK
    hrC = m_pd3dd->GetCreationParameters(pd3dcp);

    if (m_pClient->CallMethod(MID_DEV8_GetCreationParameters, this, &hrS, &d3dcp, sizeof(D3DDEVICE_CREATION_PARAMETERS))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetCreationParameters result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pd3dcp, &d3dcp, sizeof(D3DDEVICE_CREATION_PARAMETERS))) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetCreationParameters returned inconsistent parameters"));
            }
        }
    }

    return hrC;
#else
    return E_NOTIMPL;
#endif // DEMO_HACK
}

//******************************************************************************
HRESULT CCDevice8::GetDeviceCaps(D3DCAPS8* pd3dcaps) {
    
    D3DCAPS8 d3dcaps;
    HRESULT  hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetDeviceCaps(pd3dcaps);

    if (m_pClient->CallMethod(MID_DEV8_GetDeviceCaps, this, &hrS, &d3dcaps, sizeof(D3DCAPS8))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetDeviceCaps result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
#ifndef UNDER_XBOX
            if (memcmp(pd3dcaps, &d3dcaps, sizeof(D3DCAPS8))) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetDeviceCaps returned inconsistent capabilities"));
            }
#endif // !UNDER_XBOX
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetDirect3D(CDirect3D8** ppDirect3D8) {

    CDirect3D8* pDirect3D;
    LPDIRECT3D8 pd3d;
    HRESULT     hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
    if (!ppDirect3D8) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppDirect3D8 = NULL;

    hrC = m_pd3dd->GetDirect3D(&pd3d);
    if (SUCCEEDED(hrC)) {
        if (pd3d != m_pDirect3D->GetIDirect3D8()) {
            DebugString(TEXT("Interface pointers differ for IDirect3D8"));
            DebugBreak();
        }
        m_pDirect3D->CObject::AddRef();
        *ppDirect3D8 = m_pDirect3D;
        pDirect3D = m_pDirect3D;
    }
    else {
        pDirect3D = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetDirect3D, this, &hrS, &pDirect3D)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetDirect3D result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetInfo(DWORD dwDevInfoType, void* pvDevInfo, DWORD dwDevInfoSize) {

    LPBYTE  pDevInfo;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = m_pd3dd->GetInfo(dwDevInfoType, pvDevInfo, dwDevInfoSize);

    pDevInfo = (LPBYTE)MemAlloc(dwDevInfoSize);
    if (!pDevInfo) {
        return hrC;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetInfo, this, &hrS, dwDevInfoType, pDevInfo, dwDevInfoSize, dwDevInfoSize)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetInfo result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pvDevInfo, pDevInfo, dwDevInfoSize)) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetInfo returned inconsistent info"));
            }
        }
    }

    MemFree(pDevInfo);

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetInfo is not implemented on Xbox"));
    return E_NOTIMPL;

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetRasterStatus(D3DRASTER_STATUS* prast) {

    D3DRASTER_STATUS    d3drs;
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetRasterStatus(prast);

    if (m_pClient->CallMethod(MID_DEV8_GetRasterStatus, this, &hrS, &d3drs, sizeof(D3DRASTER_STATUS))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetRasterStatus result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetDisplayMode(D3DDISPLAYMODE* pMode) {

    D3DDISPLAYMODE  d3ddm;
    HRESULT         hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->GetDisplayMode(pMode);

    if (m_pClient->CallMethod(MID_DEV8_GetDisplayMode, this, &hrS, &d3ddm, sizeof(D3DDISPLAYMODE))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetDisplayMode result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
            if (memcmp(pMode, &d3ddm, sizeof(D3DDISPLAYMODE))) {
                Log(LOG_WARN, TEXT("IDirect3DDevice8::GetDisplayMode returned an inconsistent mode"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetBackBuffer(UINT uBackBuffer, D3DBACKBUFFER_TYPE bbt, CSurface8** ppBackBuffer) {

    LPDIRECT3DSURFACE8  pd3ds;
    CCSurface8*         pSurface;
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppBackBuffer) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppBackBuffer = NULL;

    hrC = m_pd3dd->GetBackBuffer(uBackBuffer, bbt, &pd3ds);
    if (SUCCEEDED(hrC)) {
        
        if (!m_pObjectMap->Find((DWORD)pd3ds, (LPDWORD)&pSurface)) {

            pSurface = new CCSurface8();
            if (!pSurface) {
                pd3ds->Release();
                return E_OUTOFMEMORY;
            }

            if (!pSurface->Create(m_pClient, this, pd3ds)) {
                pd3ds->Release();
                return ERR_LOCUSFAIL;
            }
        }

        pSurface->CObject::AddRef();

        *ppBackBuffer = pSurface;
    }
    else {
        pSurface = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetBackBuffer, this, &hrS, uBackBuffer, bbt, &pSurface)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetBackBuffer result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetDepthStencilSurface(CSurface8** ppZStencilSurface) {

    LPDIRECT3DSURFACE8  pd3ds;
    CCSurface8*         pSurface;
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }

    if (!ppZStencilSurface) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppZStencilSurface = NULL;

    hrC = m_pd3dd->GetDepthStencilSurface(&pd3ds);
    if (SUCCEEDED(hrC)) {
        
        if (!m_pObjectMap->Find((DWORD)pd3ds, (LPDWORD)&pSurface)) {

            pSurface = new CCSurface8();
            if (!pSurface) {
                pd3ds->Release();
                return E_OUTOFMEMORY;
            }

            if (!pSurface->Create(m_pClient, this, pd3ds)) {
                pd3ds->Release();
                return ERR_LOCUSFAIL;
            }
        }

        pSurface->CObject::AddRef();

        *ppZStencilSurface = pSurface;
    }
    else {
        pSurface = NULL;
    }

    if (m_pClient->CallMethod(MID_DEV8_GetDepthStencilSurface, this, &hrS, &pSurface)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetDepthStencilSurface result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
void CCDevice8::GetGammaRamp(D3DGAMMARAMP* pgrRamp) {

    D3DGAMMARAMP d3dgr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dd->GetGammaRamp(pgrRamp);

    if (m_pClient->CallMethod(MID_DEV8_GetGammaRamp, this, &d3dgr, sizeof(D3DGAMMARAMP))) {
        if (memcmp(pgrRamp, &d3dgr, sizeof(D3DGAMMARAMP))) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetGammaRamp returned an inconsistent ramp"));
        }
    }
}

//******************************************************************************
void CCDevice8::SetGammaRamp(DWORD dwFlags, D3DGAMMARAMP* pgrRamp) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dd->SetGammaRamp(dwFlags, pgrRamp);

    m_pClient->CallMethod(MID_DEV8_SetGammaRamp, this, dwFlags, pgrRamp, sizeof(D3DGAMMARAMP));
}

//******************************************************************************
HRESULT CCDevice8::CopyRects(CSurface8* pSrcSurface, RECT* prectSrcRects, UINT uNumSrcRects, CSurface8* pDstSurface, POINT* ppntDstPoints) {

    DWORD   dwSize;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!pSrcSurface || !pDstSurface) {
        return D3DERR_INVALIDCALL;
    }
    if (!m_pd3dd || !pSrcSurface->GetIDirect3DSurface8() || !pDstSurface->GetIDirect3DSurface8()) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dd->CopyRects(pSrcSurface->GetIDirect3DSurface8(), prectSrcRects, uNumSrcRects, pDstSurface->GetIDirect3DSurface8(), ppntDstPoints);

    if (ppntDstPoints) {
        dwSize = uNumSrcRects * sizeof(POINT);
    }
    else {
        dwSize = 0;
    }

    if (m_pClient->CallMethod(MID_DEV8_CopyRects, this, &hrS, pSrcSurface, prectSrcRects, uNumSrcRects * sizeof(RECT), uNumSrcRects, pDstSurface, ppntDstPoints, dwSize)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::CopyRects result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::GetFrontBuffer(CSurface8* pDstSurface) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!pDstSurface) {
        return D3DERR_INVALIDCALL;
    }
    if (!m_pd3dd || !pDstSurface->GetIDirect3DSurface8()) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = m_pd3dd->GetFrontBuffer(pDstSurface->GetIDirect3DSurface8());

    if (m_pClient->CallMethod(MID_DEV8_GetFrontBuffer, this, &hrS, pDstSurface)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::GetFrontBuffer result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetFrontBuffer is not implemented on Xbox"));
    return E_NOTIMPL;

#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CCDevice8::ProcessVertices(UINT uStartVertexSrc, UINT uStartVertexDst, UINT uNumVertices, CVertexBuffer8* pDstBuffer, DWORD dwFlags) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!pDstBuffer) {
        return D3DERR_INVALIDCALL;
    }
    if (!m_pd3dd || !pDstBuffer->GetIDirect3DVertexBuffer8()) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    hrC = m_pd3dd->ProcessVertices(uStartVertexSrc, uStartVertexDst, uNumVertices, pDstBuffer->GetIDirect3DVertexBuffer8(), dwFlags);

    if (m_pClient->CallMethod(MID_DEV8_ProcessVertices, this, &hrS, uStartVertexSrc, uStartVertexDst, uNumVertices, pDstBuffer, dwFlags)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::ProcessVertices result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::ProcessVertices is not implemented on Xbox"));
    hrC = E_NOTIMPL;

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
HRESULT CCDevice8::ResourceManagerDiscardBytes(DWORD dwNumBytes) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    hrC = m_pd3dd->ResourceManagerDiscardBytes(dwNumBytes);

    if (m_pClient->CallMethod(MID_DEV8_ResourceManagerDiscardBytes, this, &hrS, dwNumBytes)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::ResourceManagerDiscardBytes result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
#else
    Log(LOG_FAIL, TEXT("IDirect3DDevice8::ResourceManagerDiscardBytes is not implemented on XBox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CCDevice8::TestCooperativeLevel() {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    hrC = m_pd3dd->TestCooperativeLevel();

    if (m_pClient->CallMethod(MID_DEV8_TestCooperativeLevel, this, &hrS)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::TestCooperativeLevel result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
#else
    return D3D_OK;
#endif // UNDER_XBOX
}

//******************************************************************************
void CCDevice8::SetCursorPosition(UINT uSX, UINT uSY, DWORD dwFlags) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    m_pd3dd->SetCursorPosition(uSX, uSY, dwFlags);

    m_pClient->CallMethod(MID_DEV8_SetCursorPosition, this, uSX, uSY, dwFlags);

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::SetCursorPosition is not implemented on Xbox"));

#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CCDevice8::SetCursorProperties(UINT uHotSpotX, UINT uHotSpotY, CSurface8* pCursorBitmap) {

    LPDIRECT3DSURFACE8 pd3ds = NULL;
    HRESULT            hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    if (pCursorBitmap) {
        pd3ds = pCursorBitmap->GetIDirect3DSurface8();
    }
    hrC = m_pd3dd->SetCursorProperties(uHotSpotX, uHotSpotY, pd3ds);

    if (m_pClient->CallMethod(MID_DEV8_SetCursorProperties, this, &hrS, uHotSpotX, uHotSpotY, pCursorBitmap)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::SetCursorProperties result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::SetCursorProperties is not implemented on Xbox"));
    hrC = E_NOTIMPL;

#endif // UNDER_XBOX

    return hrC;
}

//******************************************************************************
BOOL CCDevice8::ShowCursor(BOOL bShow) {

    BOOL bVisibleC, bVisibleS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dd) {
        return FALSE;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX

    bVisibleC = m_pd3dd->ShowCursor(bShow);

    if (m_pClient->CallMethod(MID_DEV8_ShowCursor, this, &bVisibleS, bShow)) {
        if (bVisibleC != bVisibleS) {
            Log(LOG_WARN, TEXT("IDirect3DDevice8::ShowCursor result inconsistent"));
        }
    }

#else

    Log(LOG_FAIL, TEXT("IDirect3DDevice8::ShowCursor is not implemented on Xbox"));
    bVisibleC = FALSE;

#endif // UNDER_XBOX

    return bVisibleC;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\dxconio.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

Author:

    Matt Bronder

File Name:

    dxconio.h

*******************************************************************************/

#ifndef __DXCONIO_H__
#define __DXCONIO_H__

#ifdef __cplusplus
extern "C"
{
#endif // __cplusplus

#define DXCIOAPI __cdecl
#define DXCONIOAPI

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define MAX_TCHAR_OUTPUT        4096

#define CHAR_ASPECT             1.875f

#define XSCROLL_LINEUP          0x0001
#define XSCROLL_LINELEFT        0x0002
#define XSCROLL_LINEDOWN        0x0004
#define XSCROLL_LINERIGHT       0x0008
#define XSCROLL_PAGEUP          0x0010
#define XSCROLL_PAGELEFT        0x0020
#define XSCROLL_PAGEDOWN        0x0040
#define XSCROLL_PAGERIGHT       0x0080
#define XSCROLL_TOP             0x0100
#define XSCROLL_LEFT            0x0200
#define XSCROLL_BOTTOM          0x0400
#define XSCROLL_RIGHT           0x0800
#define XSCROLL_HORZ            0x1000
#define XSCROLL_VERT            0x2000

#define RGBA_XCOLOR(r, g, b, a) ((XCOLOR)(((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

//******************************************************************************
// Data types
//******************************************************************************

typedef DWORD                   XCOLOR;

//******************************************************************************
// stdio functions
//******************************************************************************

// xprintf, xwprintf, and xtprintf

DXCONIOAPI
int
DXCIOAPI
xprintf(
    const char *, 
    ...
);
DXCONIOAPI
int
DXCIOAPI
xwprintf(
    const wchar_t *,
    ...
);
#ifndef UNICODE
#define xtprintf            xprintf
#else
#define xtprintf            xwprintf
#endif // UNICODE

// xvprintf, xvwprintf, and xvtprintf

DXCONIOAPI
int
DXCIOAPI
xvprintf(
    const char *,
    va_list
);
DXCONIOAPI
int
DXCIOAPI
xvwprintf(
    const wchar_t *,
    va_list
);
#ifndef UNICODE
#define xvtprintf           xvprintf
#else
#define xvtprintf           xvwprintf
#endif // UNICODE

// xputchar, xputwchar, and xputtchar

DXCONIOAPI
int
DXCIOAPI
xputchar(
    int
);
DXCONIOAPI
wint_t
DXCIOAPI
xputwchar(
    wint_t
);
#ifndef UNICODE
#define xputtchar           xputchar
#else
#define xputtchar           xputwchar
#endif // UNICODE

// xputs, xputws, and xputts

DXCONIOAPI
int
DXCIOAPI
xputs(
    const char *
);
DXCONIOAPI
int
DXCIOAPI
xputws(
    const wchar_t *
);
#ifndef UNICODE
#define xputts              xputs
#else
#define xputts              xputws
#endif // UNICODE

//******************************************************************************
// Console management functions
//******************************************************************************

// xCreateConsole

DXCONIOAPI
BOOL
DXCIOAPI
xCreateConsole(
    LPVOID pvDevice
);

// xReleaseConsole

DXCONIOAPI
void
DXCIOAPI
xReleaseConsole(
    void
);

// xClearScreen

DXCONIOAPI
void
DXCIOAPI
xClearScreen(
    void
);

// xSetCharSize

DXCONIOAPI
void
DXCIOAPI
xSetCharSize(
    float fWidth,
    float fHeight
);

// xSetTextColor

DXCONIOAPI
XCOLOR
DXCIOAPI
xSetTextColor(
    BYTE red, 
    BYTE green, 
    BYTE blue, 
    BYTE alpha
);

// xSetBackgroundColor

DXCONIOAPI
XCOLOR
DXCIOAPI
xSetBackgroundColor(
    BYTE red,
    BYTE green,
    BYTE blue,
    BYTE alpha
);

// xSetBackgroundImageA, xSetBackgroundImageW, and xSetBackgroundImage

DXCONIOAPI
BOOL
DXCIOAPI
xSetBackgroundImageA(
    LPCSTR pszImage
);
DXCONIOAPI
BOOL
DXCIOAPI
xSetBackgroundImageW(
    LPCWSTR pszImage
);
#ifndef UNICODE
#define xSetBackgroundImage xSetBackgroundImageA
#else
#define xSetBackgroundImage xSetBackgroundImageW
#endif // UNICODE

// xScrollConsoleX

DXCONIOAPI
void
DXCIOAPI
xScrollConsole(
    DWORD  dwScroll,
    float* pfHorz,
    float* pfVert
);

// xSetOutputBufferSize

DXCONIOAPI
BOOL
DXCIOAPI
xSetOutputBufferSize(
    UINT uBytes
);

// xSetDisplayWidth

DXCONIOAPI
BOOL
DXCIOAPI
xSetDisplayWidth(
    UINT uWidth
);

// xDisplayConsole

DXCONIOAPI
void
DXCIOAPI
xDisplayConsole(
    void
);

// xResetConsole

DXCONIOAPI
BOOL
DXCIOAPI
xResetConsole(
    void
);

// xTextOutA, xTextOutW, and xTextOut

DXCONIOAPI
BOOL
DXCIOAPI
xTextOutA(
    float   fXStart,
    float   fYStart,
    float   fCWidth,
    float   fCHeight,
    XCOLOR  xcColor,
    LPCSTR  pszString,
    UINT    uCount
);
DXCONIOAPI
BOOL
DXCIOAPI
xTextOutW(
    float   fXStart,
    float   fYStart,
    float   fCWidth,
    float   fCHeight,
    XCOLOR  xcColor,
    LPCWSTR pszString,
    UINT    uCount
);
#ifndef UNICODE
#define xTextOut            xTextOutA
#else
#define xTextOut            xTextOutW
#endif // UNICODE

// xDebugStringA, xDebugStringW, and xDebugString

DXCONIOAPI
void
DXCIOAPI
xDebugStringA(
    LPCSTR pszFormat,
    ...
);
DXCONIOAPI
void
DXCIOAPI
xDebugStringW(
    LPCWSTR pszFormat, 
    ...
);
#ifndef UNICODE
#define xDebugString        xDebugStringA
#else
#define xDebugString        xDebugStringW
#endif // UNICODE

//******************************************************************************
// stdio overrides
//******************************************************************************

#ifdef  printf
#undef  printf
#endif // printf
#define printf                  xprintf

#ifdef  wprintf
#undef  wprintf
#endif // wprintf
#define wprintf                 xwprintf

#ifdef  _tprintf
#undef  _tprintf
#endif // _tprintf
#define _tprintf                xtprintf

#ifdef  vprintf
#undef  vprintf
#endif // vprintf
#define vprintf                 xvprintf

#ifdef  vwprintf
#undef  vwprintf
#endif // vwprintf
#define vwprintf                xvwprintf

#ifdef  _vtprintf
#undef  _vtprintf
#endif // _vtprintf
#define _vtprintf               xvtprintf

#ifdef  putchar
#undef  putchar
#endif // putchar
#define putchar                 xputchar

#ifdef  putwchar
#undef  putwchar
#endif // putwchar
#define putwchar                xputwchar

#ifdef  _puttchar
#undef  _puttchar
#endif // _puttchar
#define _puttchar               xputtchar

#ifdef  puts
#undef  puts
#endif // puts
#define puts                    xputs

#ifdef  _putws
#undef  _putws
#endif // _putws
#define _putws                  xputws

#ifdef  _putts
#undef  _putts
#endif // _puttchar
#define _putts                  xputts

//******************************************************************************
// Debug output overrides
//******************************************************************************

#ifndef DXCONIO_NO_OVERRIDES

//#undef  OutputDebugString
//#define OutputDebugString(x)    xDebugString(TEXT("%s"), x)

#endif // !DXCONIO_NO_OVERRIDES

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __DXCONIO_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\display.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    display.cpp

Author:

    Matt Bronder

Description:

    Direct3D initialization routines.

*******************************************************************************/

#include "d3dlocus.h"
#include "conio.h"

#define DEMO_HACK

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

// View and projection transform data
#define VIEW_POS                    D3DXVECTOR3(0.0f, 0.0f, 0.0f)
#define VIEW_AT                     D3DXVECTOR3(0.0f, 0.0f, 1.0f)
#define VIEW_UP                     D3DXVECTOR3(0.0f, 1.0f, 0.0f)
#define PROJ_NEAR                   0.1f
#define PROJ_FAR                    1000.0f
#define PROJ_FOV                    (M_PI / 4.0f)

// Resource identifiers
#define IDM_DEFAULT_FILE_DISPLAY    1
#define IDM_DEFAULT_FILE_EXIT       2

#ifndef IDC_STATIC
#define IDC_STATIC                  (-1)
#endif
#define IDC_DISPLAY_ADAPTER         101
#define IDC_DISPLAY_DEVICE          102
#define IDC_DISPLAY_MODE            103
#define IDC_DISPLAY_FULLSCREEN      104
#define IDC_DISPLAY_DEPTHBUFFER     105
#define IDC_DISPLAY_ANTIALIAS       106

//******************************************************************************
// Function prototypes
//******************************************************************************

#ifndef UNDER_XBOX

static LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, 
                                        LPARAM lParam);

static BOOL CALLBACK    DisplayDlgProc(HWND hDlg, UINT message, WPARAM wParam, 
                                        LPARAM lParam);

#endif

//******************************************************************************
// Window procedures
//******************************************************************************

#ifndef UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Window procedure to process messages for the main application window.
//
// Arguments:
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     0 if the message was handled, the return of DefWindowProc otherwise.
//
//******************************************************************************
static LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    CDisplay* pDisplay;

    if (uMsg == WM_CREATE) {
        LPCREATESTRUCT pcs = (LPCREATESTRUCT)lParam;
        SetWindowLong(hWnd, GWL_USERDATA, (LONG)(pcs->lpCreateParams));
    }

    pDisplay = (CDisplay*)GetWindowLong(hWnd, GWL_USERDATA);
    if (pDisplay) {
        return pDisplay->WndProc(hWnd, uMsg, wParam, lParam);
    }
    else {
        return DefWindowProc(hWnd, uMsg, wParam, lParam);
    }
}

//******************************************************************************
//
// Function:
//
//     DisplayDlgProc
//
// Description:
//
//     Window procedure to process messages for the display dialog.
//
// Arguments:
//
//     HWND hDlg                - Dialog window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
static BOOL CALLBACK DisplayDlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    CDisplay* pDisplay;

    if (uMsg == WM_INITDIALOG) {
        SetWindowLong(hDlg, GWL_USERDATA, lParam);
    }

    pDisplay = (CDisplay*)GetWindowLong(hDlg, GWL_USERDATA);
    if (pDisplay) {
        return pDisplay->DisplayDlgProc(hDlg, uMsg, wParam, lParam);
    }
    else {
        return FALSE;
    }
}

#endif // !UNDER_XBOX

//******************************************************************************
// CDisplay
//******************************************************************************

UINT CDisplay::m_uCreated = 0;

//******************************************************************************
// Initialization methods
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CDisplay
//
// Description:
//
//     Initialize a display object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CDisplay::CDisplay() {

    m_pDirect3D = NULL;
    m_pDevice = NULL;
#ifdef UNDER_XBOX
    memset(m_pvColorBuffer, 0, 3 * sizeof(LPVOID));
    m_pvDepthBuffer = NULL;
#endif
    m_padpdList = NULL;
    memset(&m_disdCurrent, 0, sizeof(DISPLAYDESC));
    m_hWnd = NULL;
    m_kdKeys = 0;
    memset(&m_jsJoys, 0, sizeof(JOYSTATE));
    memset(&m_jsLast, 0, sizeof(JOYSTATE));
    m_bUseInput = TRUE;
    m_bSwapSticks = TRUE;
    m_bActive = TRUE;
    m_bTimeSync = FALSE;
    m_bShowConsole = FALSE;
    m_cam.vPosition     = VIEW_POS;
    m_cam.vInterest     = VIEW_AT;
    m_cam.fRoll         = 0.0f;
    m_cam.fFieldOfView  = PROJ_FOV;
    m_cam.fNearPlane    = PROJ_NEAR;
    m_cam.fFarPlane     = PROJ_FAR;
    m_fCameraTDelta = 0.5f;
    m_fCameraRDelta = 0.011415f;
    m_pfnSetDevice = NULL;
    m_pfnClearDevice = NULL;
    m_pfnSubWndProc = NULL;
    m_pvSetDeviceParam = NULL;
    m_pvClearDeviceParam = NULL;
    m_pvSubWndProcParam = NULL;
    m_pClient = NULL;
    m_uCreated++;
    m_bCreated = FALSE;
}

//******************************************************************************
//
// Method:
//
//     ~CDisplay
//
// Description:
//
//     Release all display objects.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CDisplay::~CDisplay() {

    PADAPTERDESC padpd;
    PDEVICEDESC  pdevd;
    PDISPLAYMODE pdm;

    // Release the device
    ReleaseDevice();

    // Release the Direct3D object
    if (m_pDirect3D) {
        m_pDirect3D->Release();
        m_pDirect3D = NULL;
    }

    if (m_pClient) {
        delete m_pClient;
        m_pClient = NULL;
    }

    // Release input
    ReleaseInput();

#ifndef UNDER_XBOX

    MoveWindow(m_hWnd, m_rectWnd.left, m_rectWnd.top, 
               m_rectWnd.right - m_rectWnd.left, 
               m_rectWnd.bottom - m_rectWnd.top, TRUE);

#endif // !UNDER_XBOX

    // Free the display device list
    for (padpd = m_padpdList; m_padpdList; padpd = m_padpdList) {
        m_padpdList = m_padpdList->padpdNext;
        for (pdevd = padpd->pdevdList; padpd->pdevdList; pdevd = padpd->pdevdList) {
            padpd->pdevdList = padpd->pdevdList->pdevdNext;
            for (pdm = pdevd->pdmList; pdevd->pdmList; pdm = pdevd->pdmList) {
                pdevd->pdmList = pdevd->pdmList->pdmNext;
                MemFree(pdm);
            }
            MemFree(pdevd);
        }
        MemFree(padpd);
    }

    // Reset any application supplied window procedure
    m_pfnSubWndProc = NULL;

#ifndef UNDER_XBOX

    // Unregister the window class
    UnregisterClass(TEXT("Direct3D Application"), GetTestInstance());

#endif // !UNDER_XBOX

#ifndef UNDER_XBOX
    // Free the console
    UnloadConsole();
#endif // !UNDER_XBOX

    if (--m_uCreated == 0) {
        RegisterDisplay(NULL);
    }
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Initialize DX objects needed for 3D rendering.
//
// Arguments:
//
//     PD3DCREATIONDESC pd3dcd          - Pointer to creation parameters
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::Create(PD3DCREATIONDESC pd3dcd) {

    TCHAR           szPath[MAX_PATH];
    LPTSTR          szFile, sz;
    BOOL            bWindowedDefault = TRUE;
    BOOL            bDepthBufferDefault = TRUE;
    BOOL            bAntialiasDefault = TRUE;
    UINT            uNumBackBuffers = 1;
    RECT            rect, rectWndDefault = {30, 30, 550, 460};
    POINT           point;
    PADAPTERDESC    padpd;
    PDEVICEDESC     pdevd;
    PDISPLAYMODE    pdm;
#ifndef UNDER_XBOX
	WNDCLASS        wc;
#endif

    if (m_bCreated || m_uCreated > 1) {
        return FALSE;
    }

#ifndef UNDER_XBOX
    // Load the console to buffer text output
    if (LoadConsole()) {
        return FALSE;
    }
#endif // !UNDER_XBOX

    // Set the creation parameters
    if (pd3dcd) {
#ifdef UNDER_XBOX
        if (pd3dcd->d3ddm.Format == D3DFMT_X8R8G8B8) pd3dcd->d3ddm.Format = D3DFMT_LIN_X8R8G8B8;
        if (pd3dcd->d3ddm.Format == D3DFMT_A8R8G8B8) pd3dcd->d3ddm.Format = D3DFMT_LIN_A8R8G8B8;
        if (pd3dcd->d3ddm.Format == D3DFMT_X1R5G5B5) pd3dcd->d3ddm.Format = D3DFMT_LIN_X1R5G5B5;
        if (pd3dcd->d3ddm.Format == D3DFMT_R5G6B5) pd3dcd->d3ddm.Format = D3DFMT_LIN_R5G6B5;
        if (pd3dcd->fmtd == D3DFMT_D16) pd3dcd->fmtd = D3DFMT_LIN_D16;
        if (pd3dcd->fmtd == D3DFMT_D24S8) pd3dcd->fmtd = D3DFMT_LIN_D24S8;
#endif // UNDER_XBOX
        if (pd3dcd->d3ddt == D3DDEVTYPE_HAL ||
            pd3dcd->d3ddt == D3DDEVTYPE_SW ||
            pd3dcd->d3ddt == D3DDEVTYPE_REF)
        {
            g_devdDefault.d3ddt = pd3dcd->d3ddt;
        }
        if (pd3dcd->d3ddm.Width != 0 && pd3dcd->d3ddm.Height != 0) {
            memcpy(&g_dmDefault.d3ddm, &pd3dcd->d3ddm, sizeof(D3DDISPLAYMODE));
        }
        g_fmtdDefault = pd3dcd->fmtd;
        if (pd3dcd->mst != D3DMULTISAMPLE_NONE) {
            g_mstDefault = pd3dcd->mst;
        }
        g_devdDefault.uPresentInterval = pd3dcd->uPresentInterval;
        g_devdDefault.dwBehavior = pd3dcd->dwBehavior;

        if (pd3dcd->rectWnd.right > 0 && pd3dcd->rectWnd.bottom > 0) {
            memcpy(&rectWndDefault, &pd3dcd->rectWnd, sizeof(RECT));
        }
        bWindowedDefault = pd3dcd->bWindowed;
        bDepthBufferDefault = pd3dcd->bDepthBuffer;
        bAntialiasDefault = pd3dcd->bAntialias;
        uNumBackBuffers = pd3dcd->uNumBackBuffers;
    }

#ifndef UNDER_XBOX

    // Register the window class
    memset(&wc, 0, sizeof(WNDCLASS));
    wc.style            = 0;
    wc.lpfnWndProc      = ::WndProc;
    wc.cbClsExtra       = 0;
    wc.cbWndExtra       = 0;
    wc.hInstance        = GetTestInstance();
    wc.hIcon            = NULL;
    wc.hbrBackground    = NULL;
    wc.hCursor          = LoadCursor(NULL, IDC_ARROW);
    wc.lpszMenuName     = NULL;
    wc.lpszClassName    = TEXT("Direct3D Application");

    if (!RegisterClass(&wc)) {
        DebugString(TEXT("RegisterClass failed"));
        return FALSE;
    }

    // Get the name of the executable
    _tcscpy(szPath, GetCommandLine());
    szFile = _tcstok(szPath, TEXT(" \t"));
    sz = szFile + _tcslen(szFile) - 1;
    if (*sz == TEXT('"')) {
        *sz = TEXT('\0');
    }
    sz = szFile + _tcslen(szFile) - 4;
    if (!_tcsncmp(sz, TEXT(".exe"), 4)) {
        *sz = TEXT('\0');
    }
    for (sz = szFile + _tcslen(szFile); sz != szFile && *(sz - 1) != TEXT('\\'); sz--);

    // Create the main application window
    m_hWnd = CreateWindowEx(0, TEXT("Direct3D Application"), 
                            sz, 
                            WS_OVERLAPPEDWINDOW | WS_VISIBLE,
                            rectWndDefault.left, rectWndDefault.top,
                            rectWndDefault.right - rectWndDefault.left, 
                            rectWndDefault.bottom - rectWndDefault.top,
                            NULL, CreateMainMenu(), GetTestInstance(), this);

    if (!m_hWnd) {
        DebugString(TEXT("CreateWindowEx failed"));
		return FALSE;
    }

    UpdateWindow(m_hWnd);

    // Get the client area of the window
    if (!GetClientRect(m_hWnd, &rect)) {
        return FALSE;
    }

    // Convert the client window coordinates to screen coordinates
    point.x = rect.left;
    point.y = rect.top;
    if (!ClientToScreen(m_hWnd, &point)) {
        return FALSE;
    }

    // Save the screen coordinates of the client window
    SetRect(&m_rectWnd, point.x, point.y, 
            point.x + rect.right, point.y + rect.bottom);

    // Get the size offsets of the window border
    GetWindowRect(m_hWnd, &m_rectBorder);
    SetRect(&m_rectBorder, m_rectWnd.left - m_rectBorder.left,
            m_rectWnd.top - m_rectBorder.top,
            m_rectBorder.right - m_rectWnd.right,
            m_rectBorder.bottom - m_rectWnd.bottom);

#else

    m_hWnd = NULL;

#endif // UNDER_XBOX

    // Initialize input
    if (m_bUseInput && !(GetStartupContext() & TSTART_PARALLEL)) {
        CreateInput(m_hWnd);
    }

    // Create the client object and connect to the server (if present)
    m_pClient = new CClient();
    if (m_pClient) {
        if (!m_pClient->Create()) {
            delete m_pClient;
            m_pClient = NULL;
        }
    }

    // Create the Direct3D object
    if (m_pClient) {
        m_pDirect3D = new CCDirect3D8();
        if (!m_pDirect3D) {
            DebugString(TEXT("CCDirect3D8::CCDirect3D8 failed"));
            return FALSE;
        }

        if (!((CCDirect3D8*)m_pDirect3D)->Create(m_pClient)) {
            DebugString(TEXT("CCDirect3D8::Create failed"));
            return FALSE;
        }
    }
    else {
        m_pDirect3D = new CDirect3D8();
        if (!m_pDirect3D) {
            DebugString(TEXT("CDirect3D8::CDirect3D8 failed"));
            return FALSE;
        }

        if (!m_pDirect3D->Create()) {
            DebugString(TEXT("CDirect3D8::Create failed"));
            return FALSE;
        }
    }

    // Enumerate all display devices in the system and store the information in
    // a driver list
    m_padpdList = EnumDisplays(m_pDirect3D);
    if (!m_padpdList) {
        return FALSE;
    }

    // Select a default driver
    padpd = SelectAdapter(m_padpdList);
    if (!padpd) {
        return FALSE;
    }

    // Select a default device
    pdevd = SelectDevice(padpd);
    if (!pdevd) {
        return FALSE;
    }

    // Select a default display mode (in case of full screen)
    pdm = SelectDisplayMode(pdevd);
    if (!pdm) {
        return FALSE;
    }

    m_bCreated = TRUE;

    // Create the device
    if (!CreateDevice(padpd, pdevd, pdm, uNumBackBuffers, bWindowedDefault, bDepthBufferDefault, bAntialiasDefault)) {
        m_bCreated = FALSE;
        return FALSE;
    }

    // Create a console to display text output
    if (!xCreateConsole(m_pDevice)) {
        m_bCreated = FALSE;
        return FALSE;
    }

    RegisterDisplay(this);

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     CreateDevice
//
// Description:
//
//     Create the device object using the given adapter, device, display
//     mode, and other information.
//
// Arguments:
//
//     PADAPTERDESC padpd       - The adapter to use in creating the device
//                                object
//
//     PDEVICEDESC pdevd        - The device to use in creating the device
//                                object
//
//     PDISPLAYMODE pdm         - The display mode to use in creating the
//                                device object (if full screen)
//
//     UINT uNumBackBuffers     - The number of back buffers (including
//                                prefilter buffer for FSAA) to create
//
//     BOOL bWindowed           - The windowed mode to use with the device
//                                (windowed or full screen)
//
//     BOOL bDepthBuffer        - Indicates whether or not to use an automatic
//                                depth/stencil buffer with the device
//
//     BOOL bAntialias          - Indicates whether or not to create a
//                                multi-sample swap chain for use in FSAA
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::CreateDevice(PADAPTERDESC padpd, PDEVICEDESC pdevd, 
                            PDISPLAYMODE pdm, UINT uNumBackBuffers, 
                            BOOL bWindowed, BOOL bDepthBuffer, BOOL bAntialias)
{
    CSurface8*  pd3ds;
    BOOL        bRMC;
    HRESULT     hr;

    if (!m_bCreated || !padpd || !pdevd || !pdm) {
        return FALSE;
    }

    // Check if windowed mode is available
    if (!pdevd->bCanRenderWindowed) {
        bWindowed = FALSE;
    }

    // Check if antialiasing is available
    if (!ANTIALIAS_SUPPORTED(pdevd, pdm, bWindowed)) {
        bAntialias = FALSE;
    }

    // Initialize the presentation parameters
    memset(&m_d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    if (bWindowed) {
        m_d3dpp.BackBufferFormat                  = padpd->d3ddmWindowed.Format;
        m_d3dpp.MultiSampleType                   = pdevd->d3dmstWindowed;
        m_d3dpp.AutoDepthStencilFormat            = pdevd->fmtdWindowed;
    }
    else {
        m_d3dpp.BackBufferWidth                   = pdm->d3ddm.Width;
        m_d3dpp.BackBufferHeight                  = pdm->d3ddm.Height;
        m_d3dpp.BackBufferFormat                  = pdm->d3ddm.Format;
        m_d3dpp.MultiSampleType                   = pdm->d3dmst;
        m_d3dpp.AutoDepthStencilFormat            = pdm->fmtd;
        m_d3dpp.FullScreen_RefreshRateInHz        = pdm->d3ddm.RefreshRate;
        m_d3dpp.FullScreen_PresentationInterval   = pdevd->uPresentInterval;
    }
    m_d3dpp.BackBufferCount                       = uNumBackBuffers;
    m_d3dpp.SwapEffect                            = D3DSWAPEFFECT_DISCARD;
    m_d3dpp.hDeviceWindow                         = m_hWnd;
    m_d3dpp.Windowed                              = bWindowed;
    m_d3dpp.EnableAutoDepthStencil                = bDepthBuffer;
    m_d3dpp.Flags                                 = D3DPRESENTFLAG_LOCKABLE_BACKBUFFER;
    if (!bAntialias) {
        m_d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    }

#ifdef DEMO_HACK
    m_pDevice = NULL;
#endif

    // Create the device
DebugString(TEXT("D3D - Startup context: 0x%X"), GetStartupContext());

#ifdef UNDER_XBOX
    if (GetStartupContext() & TSTART_STRESS) {
        hr = CreateDeviceAB(padpd->uAdapter, pdevd->d3ddt, m_hWnd, pdevd->dwBehavior, &m_d3dpp, &m_pDevice);
    }
    else {
#endif
        hr = m_pDirect3D->CreateDevice(padpd->uAdapter, pdevd->d3ddt, m_hWnd, pdevd->dwBehavior, &m_d3dpp, &m_pDevice);
#ifdef UNDER_XBOX
    }
#endif

    if (ResultFailed(hr, TEXT("IDirect3D8::CreateDevice"))) {
        return FALSE;
    }

#ifdef DEMO_HACK
    if (m_pDevice == NULL) {
        OutputDebugString(TEXT("D3D: Error - CreateDevice succeeded but returned a NULL device pointer"));
        __asm int 3;
    }
#endif

    // Get the surface description of the back buffer
    bRMC = RMCEnabled();
    EnableRMC(FALSE);

#ifndef UNDER_XBOX
    hr = m_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
#else
    hr = m_pDevice->GetBackBuffer(-1, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
#endif // UNDER_XBOX
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetBackBuffer"))) {
        return FALSE;
    }
    hr = pd3ds->GetDesc(&m_d3dsdBack);
    pd3ds->Release();
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDesc"))) {
        return FALSE;
    }

    EnableRMC(bRMC);

    // Initialize the viewport
    SetViewport(m_d3dsdBack.Width, m_d3dsdBack.Height);

    // Initialize the default states of the device
    if (!InitDeviceState()) {
        return FALSE;
    }

    // Initialize the camera
    if (!SetView(&m_cam)) {
        return FALSE;
    }

    m_pDevice->SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, bAntialias);

    m_disdCurrent.padpd = padpd;
    m_disdCurrent.pdevd = pdevd;
    m_disdCurrent.pdm = pdm;
    m_disdCurrent.uNumBackBuffers = uNumBackBuffers;
    m_disdCurrent.bWindowed = bWindowed;
    m_disdCurrent.bDepthBuffer = bDepthBuffer;
    m_disdCurrent.bAntialias = bAntialias;

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ResetDevice
//
// Description:
//
//     Release all device objects in a scene, reset the device with new
//     presentation parameters, and recreate the device objects in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::ResetDevice() {

    CSurface8*  pd3ds;
    BOOL        bRMC;
    HRESULT     hr;

    if (!m_bCreated) {
        return FALSE;
    }

    if (m_pfnClearDevice) {
        m_pfnClearDevice(m_pvClearDeviceParam);
    }

#ifdef UNDER_XBOX
    if (GetStartupContext() & TSTART_STRESS) {

        m_pDevice->BlockUntilIdle();

        if (m_pvColorBuffer[0]) {
            m_pDevice->SetTile(0, NULL);
        }
        if (m_pvDepthBuffer) {
            m_pDevice->SetTile(1, NULL);
        }
        for (UINT i = 0; i < 3; i++) {
            if (m_pvColorBuffer[i]) {
                D3D_FreeContiguousMemory(m_pvColorBuffer[i]);
                m_pvColorBuffer[i] = NULL;
            }
        }
        if (m_pvDepthBuffer) {
            D3D_FreeContiguousMemory(m_pvDepthBuffer);
            m_pvDepthBuffer = NULL;
        }

        hr = ResetAB(&m_d3dpp);
    }
    else {
#endif
        hr = m_pDevice->Reset(&m_d3dpp);
#ifdef UNDER_XBOX
    }
#endif

    if (ResultFailed(hr, TEXT("IDirect3DDevice8::Reset"))) {
        return FALSE;
    }

    // Get the surface description of the back buffer
    bRMC = RMCEnabled();
    EnableRMC(FALSE);

#ifndef UNDER_XBOX
    hr = m_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
#else
    hr = m_pDevice->GetBackBuffer(-1, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
#endif // UNDER_XBOX
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetBackBuffer"))) {
        return FALSE;
    }
    hr = pd3ds->GetDesc(&m_d3dsdBack);
    pd3ds->Release();
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDesc"))) {
        return FALSE;
    }

    EnableRMC(bRMC);

    // Initialize the viewport
    SetViewport(m_d3dsdBack.Width, m_d3dsdBack.Height);

#ifndef UNDER_XBOX  // Only reset the initial device state on WinX
    InitDeviceState();
#endif // !UNDER_XBOX

    // Initialize the camera
    if (!SetView(&m_cam)) {
        return FALSE;
    }

    if (!xResetConsole()) {
        return FALSE;
    }

    if (m_pfnSetDevice) {
        if (!m_pfnSetDevice(m_pvSetDeviceParam)) {
            return FALSE;
        }
    }

    return TRUE;
}

#ifdef UNDER_XBOX

//******************************************************************************
HRESULT CDisplay::CreateDeviceAB(UINT uAdapter, D3DDEVTYPE d3ddt, void*, 
                                    DWORD dwFlags, D3DPRESENT_PARAMETERS* pd3dpp, 
                                    CDevice8** ppDevice)
{
    D3DTILE tile[2];
    HRESULT hr;

    hr = AllocateDeviceSurfaces(pd3dpp, &tile[0], &tile[1]);

    if (SUCCEEDED(hr)) {

        hr = m_pDirect3D->CreateDevice(uAdapter, d3ddt, NULL, dwFlags, pd3dpp, ppDevice);

        if (SUCCEEDED(hr)) {
            (*ppDevice)->SetTile(0, &tile[0]);
            if (pd3dpp->EnableAutoDepthStencil) {
                (*ppDevice)->SetTile(1, &tile[1]);
            }
        }
    }

    return hr;
}

//******************************************************************************
HRESULT CDisplay::ResetAB(D3DPRESENT_PARAMETERS* pd3dpp) {

    D3DTILE tile[2];
    HRESULT hr;

    hr = AllocateDeviceSurfaces(pd3dpp, &tile[0], &tile[1]);

    if (SUCCEEDED(hr)) {

        hr = m_pDevice->Reset(pd3dpp);

        if (SUCCEEDED(hr)) {
            m_pDevice->SetTile(0, &tile[0]);
            if (pd3dpp->EnableAutoDepthStencil) {
                m_pDevice->SetTile(1, &tile[1]);
            }
        }
    }

    return hr;
}

//******************************************************************************
UINT AlignTilePitch(UINT uPitch) {

    UINT i;
    UINT uPitchAlignment[26] = {
        D3DTILE_PITCH_0200,
        D3DTILE_PITCH_0300,
        D3DTILE_PITCH_0400,
        D3DTILE_PITCH_0500,
        D3DTILE_PITCH_0600,
        D3DTILE_PITCH_0700,
        D3DTILE_PITCH_0800,
        D3DTILE_PITCH_0A00,
        D3DTILE_PITCH_0C00,
        D3DTILE_PITCH_0E00,
        D3DTILE_PITCH_1000,
        D3DTILE_PITCH_1400,
        D3DTILE_PITCH_1800,
        D3DTILE_PITCH_1C00,
        D3DTILE_PITCH_2000,
        D3DTILE_PITCH_2800,
        D3DTILE_PITCH_3000,
        D3DTILE_PITCH_3800,
        D3DTILE_PITCH_4000,
        D3DTILE_PITCH_5000,
        D3DTILE_PITCH_6000,
        D3DTILE_PITCH_7000,
        D3DTILE_PITCH_8000,
        D3DTILE_PITCH_A000,
        D3DTILE_PITCH_C000,
        D3DTILE_PITCH_E000,
    };

    for (i = 0; i < 26; i++) {
        if (uPitch <= uPitchAlignment[i]) {
            return uPitchAlignment[i];
        }
    }

    return 0;
}

//******************************************************************************
HRESULT CDisplay::AllocateDeviceSurfaces(D3DPRESENT_PARAMETERS* pd3dpp, D3DTILE* ptileColor, D3DTILE* ptileDepth) {

    D3DFORMAT fmt;
    UINT uWidth, uHeight, uBuffers;
    UINT uSize, uPitch;
    UINT i, j;
    HRESULT hr;

    if (!pd3dpp || !ptileColor) {
        return FALSE;
    }

    fmt = pd3dpp->BackBufferFormat;
    
    switch (pd3dpp->MultiSampleType & 0xF0000) {
        case D3DMULTISAMPLE_PREFILTER_FORMAT_X1R5G5B5:
            fmt = D3DFMT_LIN_X1R5G5B5;
            break;
        case D3DMULTISAMPLE_PREFILTER_FORMAT_R5G6B5:
            fmt = D3DFMT_LIN_R5G6B5;
            break;
        case D3DMULTISAMPLE_PREFILTER_FORMAT_X8R8G8B8:
            fmt = D3DFMT_LIN_X8R8G8B8;
            break;
        case D3DMULTISAMPLE_PREFILTER_FORMAT_A8R8G8B8:
            fmt = D3DFMT_LIN_A8R8G8B8;
            break;
    }

    uWidth = pd3dpp->BackBufferWidth;
    uHeight = pd3dpp->BackBufferHeight;

    switch (pd3dpp->MultiSampleType & 0xFFFF) {
        case D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR:
        case D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX:
        case D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR:
            uWidth *= 2;
            break;
        case D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR:
            uHeight *= 2;
            break;
        case D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR:
        case D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_GAUSSIAN:
        case D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_LINEAR:
        case D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_GAUSSIAN:
            uWidth *= 2;
            uHeight *= 2;
            break;
        case D3DMULTISAMPLE_9_SAMPLES_MULTISAMPLE_GAUSSIAN:
        case D3DMULTISAMPLE_9_SAMPLES_SUPERSAMPLE_GAUSSIAN:
            uWidth *= 3;
            uHeight *= 3;
            break;
    }

    if ((pd3dpp->MultiSampleType & 0xFFFF) == D3DMULTISAMPLE_NONE) {
        uBuffers = pd3dpp->BackBufferCount + 1;
        if (uBuffers == 1) {
            uBuffers = 2;
        }
    }
    else {
        uBuffers = 1;
    }

    uPitch = AlignTilePitch(uWidth * XGBytesPerPixelFromFormat(fmt));
    uSize = uPitch * uHeight * uBuffers;
    uSize = (uSize + D3DTILE_ALIGNMENT - 1) & ~(D3DTILE_ALIGNMENT - 1);

    m_pvColorBuffer[0] = D3D_AllocContiguousMemory(uSize, D3DTILE_ALIGNMENT);
    if (!m_pvColorBuffer[0]) {
        OutputDebugString(TEXT("Insufficient contiguous memory available to create color buffer surface(s)\r\n"));
        return E_OUTOFMEMORY;
    }

    memset(ptileColor, 0, sizeof(D3DTILE));
    ptileColor->Size = uSize;
    ptileColor->Pitch = uPitch;
    ptileColor->pMemory = m_pvColorBuffer[0];

    if ((pd3dpp->MultiSampleType & 0xFFFF) == D3DMULTISAMPLE_NONE) {

        for (i = 0; i < uBuffers; i++) {
            XGSetSurfaceHeader(pd3dpp->BackBufferWidth, pd3dpp->BackBufferHeight, pd3dpp->BackBufferFormat, &m_d3dsColorBuffer[i], 0, uPitch);
            m_d3dsColorBuffer[i].Register((LPBYTE)m_pvColorBuffer[0] + i * (uPitch * uHeight));
            pd3dpp->BufferSurfaces[i] = &m_d3dsColorBuffer[i];
        }
    }
    else {

        XGSetSurfaceHeader(uWidth, uHeight, fmt, &m_d3dsColorBuffer[0], 0, uPitch);
        m_d3dsColorBuffer[0].Register((LPBYTE)m_pvColorBuffer[0]);
        pd3dpp->BufferSurfaces[0] = &m_d3dsColorBuffer[0];

        uPitch = AlignTilePitch(pd3dpp->BackBufferWidth * XGBytesPerPixelFromFormat(pd3dpp->BackBufferFormat));
        uSize = uPitch * pd3dpp->BackBufferHeight;
        uBuffers = pd3dpp->BackBufferCount ? pd3dpp->BackBufferCount : 1;

        for (i = 1; i <= uBuffers; i++) {
            m_pvColorBuffer[i] = D3D_AllocContiguousMemory(uSize, D3DTILE_ALIGNMENT);
            if (!m_pvColorBuffer[i]) {
                OutputDebugString(TEXT("Insufficient contiguous memory available to create postfilter buffer surface\r\n"));
                for (j = 0; j < i; j++) {
                    if (m_pvColorBuffer[j]) {
                        D3D_FreeContiguousMemory(m_pvColorBuffer[j]);
                        m_pvColorBuffer[j] = NULL;
                    }
                }
                return E_OUTOFMEMORY;
            }

            XGSetSurfaceHeader(pd3dpp->BackBufferWidth, pd3dpp->BackBufferHeight, pd3dpp->BackBufferFormat, &m_d3dsColorBuffer[i], 0, uPitch);
            m_d3dsColorBuffer[i].Register((LPBYTE)m_pvColorBuffer[i]);
            pd3dpp->BufferSurfaces[i] = &m_d3dsColorBuffer[i];
        }
    }

    if (pd3dpp->EnableAutoDepthStencil) {

        uPitch = AlignTilePitch(uWidth * XGBytesPerPixelFromFormat(pd3dpp->AutoDepthStencilFormat));
        uSize = uPitch * uHeight;
        uSize = (uSize + D3DTILE_ALIGNMENT - 1) & ~(D3DTILE_ALIGNMENT - 1);

        m_pvDepthBuffer = D3D_AllocContiguousMemory(uSize, D3DTILE_ALIGNMENT);
        if (!m_pvDepthBuffer) {
            OutputDebugString(TEXT("Insufficient contiguous memory available to create depth buffer surface\r\n"));
            for (i = 0; i < 3; i++) {
                if (m_pvColorBuffer[i]) {
                    D3D_FreeContiguousMemory(m_pvColorBuffer[i]);
                    m_pvColorBuffer[i] = NULL;
                }
            }
            return E_OUTOFMEMORY;
        }

        if (ptileDepth) {
            memset(ptileDepth, 0, sizeof(D3DTILE));
            ptileDepth->Size = uSize;
            ptileDepth->Pitch = uPitch;
            ptileDepth->pMemory = m_pvDepthBuffer;
            ptileDepth->Flags = D3DTILE_FLAGS_ZBUFFER | D3DTILE_FLAGS_ZCOMPRESS;
            ptileDepth->ZStartTag = 0;
            ptileDepth->ZOffset = 0;
            if (XGBytesPerPixelFromFormat(pd3dpp->AutoDepthStencilFormat) == 4) {
                ptileDepth->Flags |= D3DTILE_FLAGS_Z32BITS;
            }
        }

        XGSetSurfaceHeader(uWidth, uHeight, pd3dpp->AutoDepthStencilFormat, &m_d3dsDepthBuffer, 0, uPitch);
        m_d3dsDepthBuffer.Register(m_pvDepthBuffer);

        pd3dpp->DepthStencilSurface = &m_d3dsDepthBuffer;
    }
    else {
        pd3dpp->DepthStencilSurface = NULL;
    }

    return D3D_OK;
}

#endif

//******************************************************************************
//
// Method:
//
//     InitDeviceState
//
// Description:
//
//     Initialize the default device states.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::InitDeviceState() {

    D3DMATRIX           mTransform;
    BOOL                bRet = TRUE;
    UINT                i;
    HRESULT             hr;

    if (!m_bCreated) {
        return FALSE;
    }

    // Begin the scene
    hr = m_pDevice->BeginScene();
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::BeginScene"))) {
        return FALSE;
    }

    // Set ambient lighting
    hr = m_pDevice->SetRenderState(D3DRS_AMBIENT, 
                                      (DWORD)RGBA_MAKE(32, 32, 32, 255));
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Set the texture filters
    for (i = 0; i < 4; i++) {
#if 0 // Non-KELVIN code
    for (i = 0; i < 2; i++) {
#endif // 0
        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
            bRet = FALSE;
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
            bRet = FALSE;
        }
    }

    // Set blend modes
    hr = m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Modulate color and alpha texture stages
    hr = m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    // Set the alpha comparison function
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, (DWORD)D3DCMP_GREATEREQUAL);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Set the alpha reference value to opaque
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0xFF);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Turn on specular highlights
    hr = m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)FALSE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Enable dithering
    hr = m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Disable per-vertex color
    hr = m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

/*  // ##DELETE: The following block does redundant render state calls
    // in that it sets the device to states that should already be the
    // default state.  When the default render states are incorrect
    // on a system the following block replaces the above block as a quick
    // test

    // Set ambient lighting
    hr = m_pDevice->SetRenderState(D3DRS_AMBIENT, 
                                      (DWORD)RGBA_MAKE(128, 128, 128, 128));
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Enable z-buffering
    hr = m_pDevice->SetRenderState(D3DRS_ZENABLE, (DWORD)D3DZB_TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetRenderState(D3DRS_ZWRITEENABLE, (DWORD)TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetRenderState(D3DRS_ZFUNC, (DWORD)D3DCMP_LESSEQUAL);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Set the texture filters
    for (i = 0; i < 4; i++) {
        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
            bRet = FALSE;
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
            bRet = FALSE;
        }

        hr = m_pDevice->SetTextureStageState(i, D3DTSS_MIPFILTER, (DWORD)D3DTEXF_NONE);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
            bRet = FALSE;
        }
    }

    // Use gouraud shading
    hr = m_pDevice->SetRenderState(D3DRS_SHADEMODE, (DWORD)D3DSHADE_GOURAUD);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Enable perspective correction
    hr = m_pDevice->SetRenderState(D3DRS_TEXTUREPERSPECTIVE, (DWORD)TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Set blend modes
    hr = m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }
    
    // Modulate color and alpha texture stages
    hr = SetColorStage(0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    hr = SetAlphaStage(0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    hr = m_pDevice->SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTextureStageState"))) {
        bRet = FALSE;
    }

    // Set the alpha comparison function
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAFUNC, (DWORD)D3DCMP_GREATEREQUAL);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Set the alpha reference value to opaque
    hr = m_pDevice->SetRenderState(D3DRS_ALPHAREF, 0xFF);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Use a solid fill mode
    hr = m_pDevice->SetRenderState(D3DRS_FILLMODE, (DWORD)D3DFILL_SOLID);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }
    
    // Turn on specular highlights
    hr = m_pDevice->SetRenderState(D3DRS_SPECULARENABLE, (DWORD)TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Disable texture wrapping
    for (i = 0; i < 4; i++) {
        hr = m_pDevice->SetRenderState((D3DRENDERSTATETYPE)((DWORD)D3DRS_WRAP0 + i), (DWORD)0);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            bRet = FALSE;
        }
    }

    // Enable dithering
    hr = m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }

    // Disable per-vertex color
    hr = m_pDevice->SetRenderState(D3DRS_COLORVERTEX, (DWORD)FALSE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
        bRet = FALSE;
    }
*/
    // End the scene
    hr = m_pDevice->EndScene();
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::EndScene"))) {
        bRet = FALSE;
    }

    // Initialize the world matrix to the identity matrix
    InitMatrix(&mTransform,
        1.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 1.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 1.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
    );

    hr = m_pDevice->SetTransform(D3DTS_WORLD, &mTransform);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTransform"))) {
        return FALSE;
    }

    return bRet;
}

//******************************************************************************
//
// Method:
//
//     SetViewport
//
// Description:
//
//     Initialize the viewport using the given dimensions for the frustum.
//
// Arguments:
//
//     DWORD dwWidth                    - Width of the viewport
//
//     DWORD dwHeight                   - Height of the viewport
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::SetViewport(DWORD dwWidth, DWORD dwHeight) {

    D3DVIEWPORT8    viewport;
    HRESULT         hr;

    if (!m_bCreated) {
        return FALSE;
    }

    // Set a viewport for the device
    viewport.X = 0;
    viewport.Y = 0;
    viewport.Width = dwWidth;
    viewport.Height = dwHeight;
    viewport.MinZ = 0.0f;
    viewport.MaxZ = 1.0f;

    hr = m_pDevice->SetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetViewport"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     WndProc
//
// Description:
//
//     Window procedure to process messages for the main application window.
//
// Arguments:
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     0 if the message was handled, the return of DefWindowProc otherwise.
//
//******************************************************************************
LRESULT CDisplay::WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    // If the application supplied a window procedure, give it a chance to
    // handle the message first
    if (m_pfnSubWndProc) {
        LRESULT lr;
        if (m_pfnSubWndProc(m_pvSubWndProcParam, &lr, hWnd, uMsg, wParam, lParam)) {
            return lr;  // The message was handled, return the given LRESULT
        }
    }

#ifdef UNDER_XBOX
    return 0;
#else
    switch (uMsg) {

        case WM_ACTIVATEAPP:

            // Suspend the application if it is running in full screen mode
            if (!m_disdCurrent.bWindowed) {
                m_bActive = (BOOL)wParam;
            }

            break;

        case WM_MOVE:

            if (!MoveWindowTarget((short)LOWORD(lParam), (short)HIWORD(lParam))) {
                DestroyWindow(hWnd);
            }

            break;

        case WM_SIZE:

            if (wParam != SIZE_MINIMIZED) {
                if (!SizeWindowTarget(LOWORD(lParam), HIWORD(lParam))) {
                    DestroyWindow(hWnd);
                }
            }
            break;

        case WM_SETCURSOR:

            if (m_bActive && !m_disdCurrent.bWindowed) {
                SetCursor(NULL);
                return TRUE;
            }
            break;

        case WM_MOUSEMOVE:

            if (m_bActive) {
                POINT point;
                GetCursorPos(&point);
                ScreenToClient(hWnd, &point);
                m_pDevice->SetCursorPosition(point.x, point.y, D3DCURSOR_IMMEDIATE_UPDATE);
            }
            break;

        case WM_ENTERMENULOOP:

            if (!m_disdCurrent.bWindowed) {
// ##REVIEW: Is FlipToGDISurface gone or has it been changed to something else?  Can we simply remove the call and still have things work?
//                m_pDevice->FlipToGDISurface();
                DrawMenuBar(hWnd);
                RedrawWindow(hWnd, NULL, NULL, RDW_FRAME);
            }
            break;

        case WM_EXITMENULOOP:

            // Do not include the amount of time the menu was up in game time calculations
            m_bTimeSync = TRUE;
            break;

        case WM_POWERBROADCAST:

            switch (wParam) {

                case PBT_APMQUERYSUSPEND:
                    if (!m_disdCurrent.bWindowed) {
//                        m_pDevice->FlipToGDISurface();
                        DrawMenuBar(hWnd);
                        RedrawWindow(hWnd, NULL, NULL, RDW_FRAME);
                    }
                    break;

                case PBT_APMRESUMESUSPEND:
                    // Do not include the amount of time power management was up in game time calculations
                    m_bTimeSync = TRUE;
                    break;
            }
            break;

        case WM_SYSCOMMAND:

            switch (wParam) {

                case SC_MOVE:
                case SC_SIZE:
                case SC_MAXIMIZE:
                case SC_MONITORPOWER:
                    if (!m_disdCurrent.bWindowed) {
                        return 1;
                    }
                    break;
            }
            break;

        case WM_COMMAND:

            switch (LOWORD(wParam)) {

                case IDM_DEFAULT_FILE_DISPLAY:
                    Select();
                    return 0;

                case IDM_DEFAULT_FILE_EXIT:
                    SendMessage(hWnd, WM_CLOSE, 0, 0);
                    return 0;
            }

            break;

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_LEFT:
                    m_kdKeys |= KEY_LEFT;
                    return 0;

                case VK_RIGHT:
                    m_kdKeys |= KEY_RIGHT;
                    return 0;

                case VK_UP:
                    m_kdKeys |= KEY_UP;
                    return 0;

                case VK_DOWN:
                    m_kdKeys |= KEY_DOWN;
                    return 0;

                case VK_ADD:
                    m_kdKeys |= KEY_ADD;
                    return 0;

                case VK_SUBTRACT:
                    m_kdKeys |= KEY_SUBTRACT;
                    return 0;

                case VK_INSERT:
                    m_kdKeys |= KEY_INSERT;
                    return 0;

                case VK_DELETE:
                    m_kdKeys |= KEY_DELETE;
                    return 0;

                case VK_HOME:
                    m_kdKeys |= KEY_HOME;
                    return 0;

                case VK_END:
                    m_kdKeys |= KEY_END;
                    return 0;

                case VK_PRIOR:
                    m_kdKeys |= KEY_PAGEUP;
                    return 0;

                case VK_NEXT:
                    m_kdKeys |= KEY_PAGEDOWN;
                    return 0;

                case VK_SHIFT:
                    m_kdKeys |= KEY_SHIFT;
                    return 0;

                case VK_ESCAPE: // Exit
                    SendMessage(hWnd, WM_CLOSE, 0, 0);
                    return 0;
            }

            break;

        case WM_KEYUP:

            switch (wParam) {

                case VK_LEFT:
                    m_kdKeys &= ~KEY_LEFT;
                    return 0;

                case VK_RIGHT:
                    m_kdKeys &= ~KEY_RIGHT;
                    return 0;

                case VK_UP:
                    m_kdKeys &= ~KEY_UP;
                    return 0;

                case VK_DOWN:
                    m_kdKeys &= ~KEY_DOWN;
                    return 0;

                case VK_ADD:
                    m_kdKeys &= ~KEY_ADD;
                    return 0;

                case VK_SUBTRACT:
                    m_kdKeys &= ~KEY_SUBTRACT;
                    return 0;

                case VK_INSERT:
                    m_kdKeys &= ~KEY_INSERT;
                    return 0;

                case VK_DELETE:
                    m_kdKeys &= ~KEY_DELETE;
                    return 0;

                case VK_HOME:
                    m_kdKeys &= ~KEY_HOME;
                    return 0;

                case VK_END:
                    m_kdKeys &= ~KEY_END;
                    return 0;

                case VK_PRIOR:
                    m_kdKeys &= ~KEY_PAGEUP;
                    return 0;

                case VK_NEXT:
                    m_kdKeys &= ~KEY_PAGEDOWN;
                    return 0;

                case VK_SHIFT:
                    m_kdKeys &= ~KEY_SHIFT;
                    return 0;

                case VK_F2:     // Open display dialog
                    Select();
                    return 0;
            }

            break;

        case WM_SYSKEYUP:

            switch (wParam) {

                case VK_RETURN:
                    Update(m_disdCurrent.pdm, !m_disdCurrent.bWindowed,
                                  m_disdCurrent.bDepthBuffer, 
                                  m_disdCurrent.bAntialias);
                    return 0;
            }

            break;

        case WM_CHAR:

            switch (wParam) {

                case TEXT('D'):
                case TEXT('d'):
                    Update(m_disdCurrent.pdm, m_disdCurrent.bWindowed, 
                        !m_disdCurrent.bDepthBuffer, m_disdCurrent.bAntialias);
                    return 0;

                case TEXT('A'):
                case TEXT('a'):
                    Update(m_disdCurrent.pdm, m_disdCurrent.bWindowed, 
                        m_disdCurrent.bDepthBuffer, !m_disdCurrent.bAntialias);
                    return 0;

                case TEXT('~'):
                case TEXT('`'):
                    m_bShowConsole = !m_bShowConsole;
                    return 0;

                case TEXT('>'):
                case TEXT('.'):
                    if (m_pClient) {
                        ((CCDevice8*)m_pDevice)->ToggleVerificationDisplay();
                    }
                    return 0;
            }

            break;

        case WM_CLOSE:
            DestroyWindow(hWnd);
            return 0;

        case WM_DESTROY:
            PostQuitMessage(0);
            return 0;
    }

    return DefWindowProc(hWnd, uMsg, wParam, lParam);

#endif // !UNDER_XBOX
}

//******************************************************************************
// Member access functions
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     GetDirect3D8
//
// Description:
//
//     Return a pointer to the Direct3D8 object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     IDirect3D8 interface pointer.
//
//******************************************************************************
CDirect3D8* CDisplay::GetDirect3D8() {

    return m_pDirect3D;
}

//******************************************************************************
//
// Method:
//
//     GetDevice8
//
// Description:
//
//     Return a pointer to the Direct3DDevice8 object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     IDirect3DDevice8 interface pointer.
//
//******************************************************************************
CDevice8* CDisplay::GetDevice8() {

    return m_pDevice;
}

//******************************************************************************
//
// Method:
//
//     GetCurrentDisplay
//
// Description:
//
//     Return a description of the current display.
//
// Arguments:
//
//     PDISPLAYDESC pdisd       - Pointer to a structure to be filled with
//                                a description of the current display
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::GetCurrentDisplay(PDISPLAYDESC pdisd) {

    if (pdisd) {
        memcpy(pdisd, &m_disdCurrent, sizeof(DISPLAYDESC));
    }
}

//******************************************************************************
//
// Method:
//
//     GetDisplayList
//
// Description:
//
//     Return a pointer to the head of the display list.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     A pointer to the head of the display adapter list.
//
//******************************************************************************
PADAPTERDESC CDisplay::GetDisplayList() {

    return m_padpdList;
}

//******************************************************************************
//
// Method:
//
//     IsActive
//
// Description:
//
//     Indicate whether or not the display is currently active.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the display is active, FALSE if not.
//
//******************************************************************************
BOOL CDisplay::IsActive() {

    return m_bActive;
}

//******************************************************************************
//
// Method:
//
//     GetWidth
//
// Description:
//
//     Return the width of the first back buffer in the device's swap chain.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     Width of the display.
//
//******************************************************************************
UINT CDisplay::GetWidth() {

    return m_d3dsdBack.Width;
}

//******************************************************************************
//
// Method:
//
//     GetHeight
//
// Description:
//
//     Return the height of the first back buffer in the device's swap chain.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     Height of the display.
//
//******************************************************************************
UINT CDisplay::GetHeight() {

    return m_d3dsdBack.Height;
}

//******************************************************************************
//
// Method:
//
//     GetWindow
//
// Description:
//
//     Return the focus window for the device.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     Handle of the focus window.
//
//******************************************************************************
HWND CDisplay::GetWindow() {

    return m_hWnd;
}

//******************************************************************************
//
// Method:
//
//     GetPresentParameters
//
// Description:
//
//     Return the presentation parameters used to Create (or last Reset) the 
//     current device.
//
// Arguments:
//
//     D3DPRESENT_PARAMETERS* pd3dpp    - Pointer to a structure that will contain
//                                        the presentation parameters on return
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::GetPresentParameters(D3DPRESENT_PARAMETERS* pd3dpp) {

    if (pd3dpp) {
        memcpy(pd3dpp, &m_d3dpp, sizeof(D3DPRESENT_PARAMETERS));
        memset(pd3dpp->BufferSurfaces, 0, 3 * sizeof(D3DSurface*));
        pd3dpp->DepthStencilSurface = NULL;
    }
}

//******************************************************************************
//
// Method:
//
//     GetKeyState
//
// Description:
//
//     Return the current state of the keyboard.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     A combination of key flags OR'd together indicating what keys are down.
//
//******************************************************************************
KEYSDOWN CDisplay::GetKeyState() {

    return m_kdKeys;
}

//******************************************************************************
//
// Method:
//
//     GetJoyState
//
// Description:
//
//     Return the current and last states of the joystick.
//
// Arguments:
//
//     PJOYSTATE pjsCurrent     - Pointer to a structure to be filled with the
//                                current state of the joystick
//
//     PJOYSTATE pjsLast        - Pointer to a structure to be filled with the
//                                state of the joystick on the previous poll
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::GetJoyState(PJOYSTATE pjsCurrent, PJOYSTATE pjsLast) {

    if (pjsCurrent) {
        memcpy(pjsCurrent, &m_jsJoys, sizeof(JOYSTATE));
    }
    if (pjsLast) {
        memcpy(pjsLast, &m_jsLast, sizeof(JOYSTATE));
    }
}

//******************************************************************************
//
// Method:
//
//     GetCamera
//
// Description:
//
//     Return a description of the display camera.
//
// Arguments:
//
//     PCAMERA pcam             - Pointer to a structure to be filled with
//                                the camera description
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::GetCamera(PCAMERA pcam) {

    if (pcam) {
        memcpy(pcam, &m_cam, sizeof(CAMERA));
    }
}

//******************************************************************************
//
// Method:
//
//     SetCamera
//
// Description:
//
//     Initialize the display camera to the given camera description.
//
// Arguments:
//
//     PCAMERA pcam             - Pointer to a camera description to use for
//                                the display camera
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::SetCamera(PCAMERA pcam) {

    if (pcam) {
        memcpy(&m_cam, pcam, sizeof(CAMERA));
    }
}

//******************************************************************************
//
// Method:
//
//     SetCameraOffsets
//
// Description:
//
//     Set the delta values for the translation and rotation of the camera
//     when it is moved in response to user input.
//
// Arguments:
//
//     float fTranslation       - Camera translation delta value
//
//     float fRotation          - Camera rotation delta value
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::SetCameraOffsets(float fTranslation, float fRotation) {

    m_fCameraTDelta = fTranslation;
    m_fCameraRDelta = fRotation;
}

//******************************************************************************
//
// Method:
//
//     ConsoleVisible
//
// Description:
//
//     Return the state of console visibility.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the console is currently being displayed, FALSE otherwise.
//
//******************************************************************************
BOOL CDisplay::ConsoleVisible() {

    return m_bShowConsole;
}

//******************************************************************************
//
// Method:
//
//     IsWindowed
//
// Description:
//
//     Indicate if the display is windowed or full screen.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the display is windowed, FALSE if it is full screen.
//
//******************************************************************************
BOOL CDisplay::IsWindowed() {

    return m_disdCurrent.bWindowed;
}

//******************************************************************************
//
// Method:
//
//     IsDepthBuffered
//
// Description:
//
//     Indicate whether or not the display is using a depth buffer.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the display is using a depth buffer, FALSE if it is not.
//
//******************************************************************************
BOOL CDisplay::IsDepthBuffered() {

    return m_disdCurrent.bDepthBuffer;
}

//******************************************************************************
// Utilitiy functions
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CreateDevice
//
// Description:
//
//     Create a new device using the current display settings.  If present
//     parameters are given, verify the parameters, update the state of CDisplay 
//     to be in sync with the parameters, and Reset the device using the 
//     parameters.
//
// Arguments:
//
//     D3DPRESENT_PARAMETERS pd3dpp     - Present parameters to use
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::CreateDevice(D3DPRESENT_PARAMETERS* pd3dpp) {

    if (m_pDevice) {
        return FALSE;
    }

    m_bCreated = TRUE;

    if (!CreateDevice(m_disdCurrent.padpd, m_disdCurrent.pdevd, m_disdCurrent.pdm, m_disdCurrent.uNumBackBuffers, m_disdCurrent.bWindowed, m_disdCurrent.bDepthBuffer, m_disdCurrent.bAntialias) ||
        !xCreateConsole(m_pDevice) ||
        (m_pfnSetDevice && !m_pfnSetDevice(m_pvSetDeviceParam))) 
    {
        return FALSE;
    }

    if (pd3dpp) {
        return Reset(pd3dpp);
    }
    else {
        return TRUE;
    }
}

//******************************************************************************
//
// Method:
//
//     ReleaseDevice
//
// Description:
//
//     Release the device and all device objects in the scene and console.  The
//     only valid CDisplay method calls after ReleaseDevice are CreateDevice and
//     Release.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::ReleaseDevice() {

    xReleaseConsole();

    if (m_pDevice) {

        if (m_pfnClearDevice) {
            m_pfnClearDevice(m_pvClearDeviceParam);
        }

#ifdef UNDER_XBOX
        if (m_pvColorBuffer[0]) {
            m_pDevice->SetTile(0, NULL);
        }
        if (m_pvDepthBuffer) {
            m_pDevice->SetTile(1, NULL);
        }
#endif

        m_pDevice->Release();
        m_pDevice = NULL;
    }

#ifdef UNDER_XBOX
    for (UINT i = 0; i < 3; i++) {
        if (m_pvColorBuffer[i]) {
            D3D_FreeContiguousMemory(m_pvColorBuffer[i]);
            m_pvColorBuffer[i] = NULL;
        }
    }
    if (m_pvDepthBuffer) {
        D3D_FreeContiguousMemory(m_pvDepthBuffer);
        m_pvDepthBuffer = NULL;
    }
#endif

    m_bCreated = FALSE;
}

//******************************************************************************
//
// Method:
//
//     Reset
//
// Description:
//
//     Verify the given present parameters, update the state of CDisplay to be
//     in sync with the parameters, and Reset the device.
//
// Arguments:
//
//     D3DPRESENT_PARAMETERS pd3dpp     - Present parameters to use in the Reset
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::Reset(D3DPRESENT_PARAMETERS* pd3dpp) {

    D3DPRESENT_PARAMETERS   d3dpp;
    DISPLAYDESC             disdLast;
    HWND                    hWndLast;
    PDISPLAYMODE            pdm;
    D3DFORMAT               fmtr, fmtd;
    D3DMULTISAMPLE_TYPE     mst;
    BOOL                    bRestorePos;
    HRESULT                 hr;

    if (!m_bCreated || !pd3dpp) {
        return FALSE;
    }

    // Check if windowed mode is available
    if (pd3dpp->Windowed && !m_disdCurrent.pdevd->bCanRenderWindowed) {
        return FALSE;
    }

    // If the application is going from full screen to windowed, the window
    // position must be restored
    bRestorePos = (pd3dpp->Windowed && !m_disdCurrent.bWindowed);

    if (pd3dpp->Windowed) {
        // Verify the format of the back buffer matches with the display mode of the adapter
        if (m_disdCurrent.padpd->d3ddmWindowed.Format != pd3dpp->BackBufferFormat) {
            DebugString(TEXT("The given back buffer format does not match the display mode of the adapter"));
            return FALSE;
        }
        fmtr = m_disdCurrent.padpd->d3ddmWindowed.Format;
        fmtd = m_disdCurrent.pdevd->fmtdWindowed;
        mst = m_disdCurrent.pdevd->d3dmstWindowed;
    }
    else {
        // Find the given display mode in the display list
        for (pdm = m_disdCurrent.pdevd->pdmList; pdm; pdm = pdm->pdmNext) {
            if (pdm->d3ddm.Width == pd3dpp->BackBufferWidth &&
                pdm->d3ddm.Height == pd3dpp->BackBufferHeight &&
                pdm->d3ddm.Format == pd3dpp->BackBufferFormat &&
                (pdm->d3ddm.RefreshRate == pd3dpp->FullScreen_RefreshRateInHz ||
                pd3dpp->FullScreen_RefreshRateInHz == 0))
            {
                break;
            }
        }

        if (!pdm) {
            DebugString(TEXT("The given display mode is not present in the display list"));
            return FALSE;
        }

        if (pd3dpp->FullScreen_PresentationInterval != m_disdCurrent.pdevd->uPresentInterval) {
            D3DCAPS8 d3dcaps;
            hr = m_pDirect3D->GetDeviceCaps(m_disdCurrent.padpd->uAdapter, m_disdCurrent.pdevd->d3ddt, &d3dcaps);
            if (ResultFailed(hr, TEXT("IDirect3D8::GetDeviceCaps"))) {
                return FALSE;
            }
            if (!d3dcaps.PresentationIntervals & pd3dpp->FullScreen_PresentationInterval) {
                DebugString(TEXT("The current device does not support the given presentation interval"));
                return FALSE;
            }
        }

        fmtr = pdm->d3ddm.Format;
        fmtd = pdm->fmtd;
        mst = pdm->d3dmst;
    }

    if (pd3dpp->EnableAutoDepthStencil && pd3dpp->AutoDepthStencilFormat != fmtd) {
        hr = m_pDirect3D->CheckDeviceFormat(m_disdCurrent.padpd->uAdapter, m_disdCurrent.pdevd->d3ddt, fmtr, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, pd3dpp->AutoDepthStencilFormat);
        if (FAILED(hr)) {
            DebugString(TEXT("AutoDepthStencilFormat %d is not available"), pd3dpp->AutoDepthStencilFormat);
            return FALSE;
        }
        hr = m_pDirect3D->CheckDepthStencilMatch(m_disdCurrent.padpd->uAdapter, m_disdCurrent.pdevd->d3ddt, fmtr, fmtr, pd3dpp->AutoDepthStencilFormat);
        if (FAILED(hr)) {
            DebugString(TEXT("AutoDepthStencilFormat %d is not compatible with render target format %d"), pd3dpp->AutoDepthStencilFormat, fmtr);
            return FALSE;
        }
    }

    if (pd3dpp->MultiSampleType != mst) {
        hr = m_pDirect3D->CheckDeviceMultiSampleType(m_disdCurrent.padpd->uAdapter, m_disdCurrent.pdevd->d3ddt, fmtr, pd3dpp->Windowed, pd3dpp->MultiSampleType);
        if (FAILED(hr)) {
            DebugString(TEXT("Multisample type %d is not available"), pd3dpp->MultiSampleType);
            return FALSE;
        }
    }

    memcpy(&disdLast, &m_disdCurrent, sizeof(DISPLAYDESC));

    // Update the display list
    if (pd3dpp->Windowed) {
        if (pd3dpp->EnableAutoDepthStencil) {
            m_disdCurrent.pdevd->fmtdWindowed = pd3dpp->AutoDepthStencilFormat;
        }
        m_disdCurrent.pdevd->d3dmstWindowed = pd3dpp->MultiSampleType;
    }
    else {
        if (pd3dpp->EnableAutoDepthStencil) {
            pdm->fmtd = pd3dpp->AutoDepthStencilFormat;
        }
        pdm->d3dmst = pd3dpp->MultiSampleType;
        m_disdCurrent.pdevd->uPresentInterval = pd3dpp->FullScreen_PresentationInterval;
        m_disdCurrent.pdm = pdm;
    }

    m_disdCurrent.bWindowed = pd3dpp->Windowed;
    m_disdCurrent.bDepthBuffer = pd3dpp->EnableAutoDepthStencil;
    m_disdCurrent.uNumBackBuffers = pd3dpp->BackBufferCount;
    m_disdCurrent.bAntialias = (pd3dpp->MultiSampleType != D3DMULTISAMPLE_NONE);

    hWndLast = m_hWnd;
    m_hWnd = pd3dpp->hDeviceWindow;
    memcpy(&d3dpp, &m_d3dpp, sizeof(D3DPRESENT_PARAMETERS));
    memcpy(&m_d3dpp, pd3dpp, sizeof(D3DPRESENT_PARAMETERS));

    if (!ResetDevice()) {
        // Restore the display description
        memcpy(&m_disdCurrent, &disdLast, sizeof(DISPLAYDESC));
        memcpy(&m_d3dpp, &d3dpp, sizeof(D3DPRESENT_PARAMETERS));
        m_hWnd = hWndLast;
        return FALSE;
    }

#ifndef UNDER_XBOX
    if (bRestorePos) {

        // Restore the window position
        MoveWindow(m_hWnd, m_rectWnd.left - m_rectBorder.left, 
                   m_rectWnd.top - m_rectBorder.top, 
                   m_rectWnd.right - (m_rectWnd.left - m_rectBorder.left) + m_rectBorder.right, 
                   m_rectWnd.bottom - (m_rectWnd.top - m_rectBorder.top) + m_rectBorder.bottom, TRUE);
    }
#endif // !UNDER_XBOX

    if (!m_disdCurrent.bAntialias) {
        m_pDevice->SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, FALSE);
    }

    // Do not include the amount of time the display took to update in game time calculations
    m_bTimeSync = TRUE;

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Reset the device with the given display mode, windowed mode, auto
//     depth/stencil buffer, and multi-sample swap chain.
//
// Arguments:
//
//     PDISPLAYMODE pdm         - The display mode to use in resetting the
//                                device object (if full screen)
//
//     BOOL bWindowed           - The windowed mode to use with the device
//                                (windowed or full screen)
//
//     BOOL bDepthBuffer        - Indicates whether or not to use an automatic
//                                depth/stencil buffer with the device
//
//     BOOL bAntialias          - Indicates whether or not to create a
//                                multi-sample swap chain for use in FSAA
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::Update(PDISPLAYMODE pdm, BOOL bWindowed, BOOL bDepthBuffer, BOOL bAntialias) {

    D3DPRESENT_PARAMETERS   d3dpp;
    DISPLAYDESC             disdLast;
    BOOL                    bRestorePos;

    if (!m_bCreated) {
        return TRUE;
    }

#ifdef UNDER_XBOX
    if (bWindowed) {
        return FALSE;
    }
#endif // UNDER_XBOX

    // Check if windowed mode is available
    if (bWindowed && !m_disdCurrent.pdevd->bCanRenderWindowed) {
        return FALSE;
    }

    // If no display mode was given, use the current
    if (!pdm) {
        pdm = m_disdCurrent.pdm;
    }

    // Check if antialiasing is available
    if (bAntialias && !ANTIALIAS_SUPPORTED(m_disdCurrent.pdevd, pdm, bWindowed)) {
        return FALSE;
    }

    // If the application is going from full screen to windowed, the window
    // position must be restored
    bRestorePos = (bWindowed && !m_disdCurrent.bWindowed);

    memcpy(&disdLast, &m_disdCurrent, sizeof(DISPLAYDESC));
    m_disdCurrent.pdm = pdm;
    m_disdCurrent.bWindowed = bWindowed;
    m_disdCurrent.bDepthBuffer = bDepthBuffer;
    m_disdCurrent.bAntialias = bAntialias;

    // Initialize the presentation parameters
    memcpy(&d3dpp, &m_d3dpp, sizeof(D3DPRESENT_PARAMETERS));
    memset(&m_d3dpp, 0, sizeof(D3DPRESENT_PARAMETERS));
    if (bWindowed) {
        m_d3dpp.BackBufferFormat                  = m_disdCurrent.padpd->d3ddmWindowed.Format;
        m_d3dpp.MultiSampleType                   = m_disdCurrent.pdevd->d3dmstWindowed;
        m_d3dpp.AutoDepthStencilFormat            = m_disdCurrent.pdevd->fmtdWindowed;
    }
    else {
        m_d3dpp.BackBufferWidth                   = pdm->d3ddm.Width;
        m_d3dpp.BackBufferHeight                  = pdm->d3ddm.Height;
        m_d3dpp.BackBufferFormat                  = pdm->d3ddm.Format;
        m_d3dpp.MultiSampleType                   = pdm->d3dmst;
        m_d3dpp.AutoDepthStencilFormat            = pdm->fmtd;
        m_d3dpp.FullScreen_RefreshRateInHz        = pdm->d3ddm.RefreshRate;
        m_d3dpp.FullScreen_PresentationInterval   = m_disdCurrent.pdevd->uPresentInterval;
    }
    m_d3dpp.BackBufferCount                       = 1;
    m_d3dpp.SwapEffect                            = D3DSWAPEFFECT_DISCARD;
    m_d3dpp.hDeviceWindow                         = m_hWnd;
    m_d3dpp.Windowed                              = bWindowed;
    m_d3dpp.EnableAutoDepthStencil                = bDepthBuffer;
    m_d3dpp.Flags                                 = D3DPRESENTFLAG_LOCKABLE_BACKBUFFER;
    if (!bAntialias) {
        m_d3dpp.MultiSampleType                   = D3DMULTISAMPLE_NONE;
    }

    if (!ResetDevice()) {
        // Restore the display description
        memcpy(&m_disdCurrent, &disdLast, sizeof(DISPLAYDESC));
        memcpy(&m_d3dpp, &d3dpp, sizeof(D3DPRESENT_PARAMETERS));
        return FALSE;
    }

#ifndef UNDER_XBOX
    if (bRestorePos) {

        // Restore the window position
        MoveWindow(m_hWnd, m_rectWnd.left - m_rectBorder.left, 
                   m_rectWnd.top - m_rectBorder.top, 
                   m_rectWnd.right - (m_rectWnd.left - m_rectBorder.left) + m_rectBorder.right, 
                   m_rectWnd.bottom - (m_rectWnd.top - m_rectBorder.top) + m_rectBorder.bottom, TRUE);
    }
#endif // !UNDER_XBOX

    m_pDevice->SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, bAntialias);

    // Do not include the amount of time the display took to update in game time calculations
    m_bTimeSync = TRUE;

    return TRUE;
}

/*
//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Reset the device with the given display mode, windowed mode, auto
//     depth/stencil buffer, and multi-sample swap chain.
//
// Arguments:
//
//     PDISPLAYMODE pdm         - The display mode to use in resetting the
//                                device object (if full screen)
//
//     BOOL bWindowed           - The windowed mode to use with the device
//                                (windowed or full screen)
//
//     BOOL bDepthBuffer        - Indicates whether or not to use an automatic
//                                depth/stencil buffer with the device
//
//     BOOL bAntialias          - Indicates whether or not to create a
//                                multi-sample swap chain for use in FSAA
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::Update(D3DDISPLAYMODE* pd3ddm, BOOL bWindowed, BOOL bDepthBuffer, 
                                                        D3DMULTISAMPLE_TYPE mst)
{
    PDISPLAYMODE pdm;

    if (!pd3ddm) {
        return FALSE;
    }

    // Find the given display mode in the display list
    for (pdm = m_disdCurrent.pdevd->pdmList; pdm; pdm = pdm->pdmNext) {
        if (pdm->d3ddm.Width == pd3ddm->Width &&
            pdm->d3ddm.Height == pd3ddm->Height &&
            pdm->d3ddm.Format == pd3ddm->Format &&
            pdm->d3ddm.RefreshRate == pd3ddm->RefreshRate)
        {
            break;
        }
    }

    if (!pdm) {
        return FALSE;
    }

    if (mst != D3DMULTISAMPLE_NONE && mst != pdm->d3dmst) {

        HRESULT hr = m_pDirect3D->CheckDeviceMultiSampleType(m_disdCurrent.padpd->uAdapter, m_disdCurrent.pdevd->d3ddt, bWindowed ? m_disdCurrent.padpd->d3ddmWindowed.Format : pdm->d3ddm.Format, bWindowed, mst);
        if (FAILED(hr)) {
            if (hr != D3DERR_NOTAVAILABLE) {
                ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceMultiSampleTypes"));
            }
            return FALSE;
        }
        else {
            if (bWindowed) {
                m_disdCurrent.pdevd->d3dmstWindowed = mst;
            }
            else {
                pdm->d3dmst = mst;
            }
        }
    }

    return Update(pdm, bWindowed, bDepthBuffer, mst != D3DMULTISAMPLE_NONE);
}
*/

//******************************************************************************
//
// Method:
//
//     EnableConsoleVisibility
//
// Description:
//
//     Enable the overlay of the console in the scene.
//
// Arguments:
//
//     BOOL bEnable             - TRUE to display the console, FALSE to hide it.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::EnableConsoleVisibility(BOOL bEnable) {

    m_bShowConsole = bEnable;
}

//******************************************************************************
//
// Method:
//
//     ShowConsole
//
// Description:
//
//     Overlay the console in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::ShowConsole() {

    if (!m_bCreated) {
        return;
    }

    if (m_bShowConsole) {
        xDisplayConsole();
    }
}

//******************************************************************************
void CDisplay::EnableFrameVerification(BOOL bEnable) {

    if (m_pClient) {
        ((CCDevice8*)m_pDevice)->EnableFrameVerification(bEnable);
    }
}

//******************************************************************************
void CDisplay::SetVerificationThreshold(float fThreshold) {

    if (m_pClient) {
        ((CCDevice8*)m_pDevice)->SetVerificationThreshold(fThreshold);
    }
}

//******************************************************************************
//
// Method:
//
//     InitSetDeviceProc
//
// Description:
//
//     Set the function used to perform all device initialization and object 
//     creation in a scene.  The function will be used in restoring
//     a scene after resetting a lost or changed device.
//
// Arguments:
//
//     SETDEVICEPROC pfnSetDevice       - Pointer to device initialization
//                                        function in the scene
//
//     LPVOID pvParam                   - Application data to supply as an
//                                        argument to the procedure callback
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::InitSetDeviceProc(SETDEVICEPROC pfnSetDevice, LPVOID pvParam) {

    m_pfnSetDevice = pfnSetDevice;
    m_pvSetDeviceParam = pvParam;
}

//******************************************************************************
//
// Method:
//
//     InitClearDeviceProc
//
// Description:
//
//     Set the function used to perform all device object clean up in a scene.
//     The function will be used in releasing all device objects in a scene
//     in preparation for resetting a lost or changed device.
//
// Arguments:
//
//     CLEARDEVICEPROC pfnClearDevice   - Pointer to device clean up function
//                                        in the scene
//
//     LPVOID pvParam                   - Application data to supply as an
//                                        argument to the procedure callback
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
void CDisplay::InitClearDeviceProc(CLEARDEVICEPROC pfnClearDevice, LPVOID pvParam) {

    m_pfnClearDevice = pfnClearDevice;
    m_pvClearDeviceParam = pvParam;
}

//******************************************************************************
//
// Method:
//
//     InitSubWindowProc
//
// Description:
//
//     Set the function a scene will use to process window messages.  The
//     function will be called by the main window procedure, giving the
//     scene the first crack at handling messages.
//
// Arguments:
//
//     SUBWNDPROC pfnSubWndProc         - Pointer to the scene window procedure
//
//     LPVOID pvParam                   - Application data to supply as an
//                                        argument to the procedure callback
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::InitSubWindowProc(SUBWNDPROC pfnSubWndProc, LPVOID pvParam) {

    m_pfnSubWndProc = pfnSubWndProc;
    m_pvSubWndProcParam = pvParam;
}

//******************************************************************************
//
// Method:
//
//     MoveWindowTarget
//
// Description:
//
//     Update the stored window position so the window may be correctly 
//     repositioned after a switch to full screen mode and back.
//
// Arguments:
//
//     int x                            - x coordinate of the upper left corner
//                                        of the window
//
//     int y                            - y coordinate of the upper left corner
//                                        of the window
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::MoveWindowTarget(int x, int y) {

#ifndef UNDER_XBOX
    if (m_disdCurrent.bWindowed && m_bCreated && m_pDevice) {
        SetRect(&m_rectWnd, x, y, x + m_d3dsdBack.Width, y + m_d3dsdBack.Height);
    }

    return TRUE;
#else
    return FALSE;
#endif // UNDER_XBOX
}

//******************************************************************************
//
// Method:
//
//     SizeWindowTarget
//
// Description:
//
//     Update the display dimensions corresponding to a change in window size.
//
// Arguments:
//
//     int width                        - Width of the window
//
//     int height                       - Height of the window
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::SizeWindowTarget(int width, int height) {

    if (m_disdCurrent.bWindowed && m_bCreated && m_pDevice) {
        m_rectWnd.right = m_rectWnd.left + width;
        m_rectWnd.bottom = m_rectWnd.top + height;
        return Update(m_disdCurrent.pdm, TRUE, m_disdCurrent.bDepthBuffer, 
                             m_disdCurrent.bAntialias);
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     EnableInput
//
// Description:
//
//     Enable or disable the use of joystick input.
//
// Arguments:
//
//     BOOL bEnable            - TRUE to enable input, FALSE to disable it
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::EnableInput(BOOL bEnable) {

    m_bUseInput = bEnable;
    if (!bEnable) {
        memset(&m_jsJoys, 0, sizeof(JOYSTATE));
    }
}

//******************************************************************************
//
// Method:
//
//     EnableRMC
//
// Description:
//
//     Enable or disable remote Direct3D method calls.
//
// Arguments:
//
//     BOOL bEnable            - TRUE to enable RMCs, FALSE to disable them
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::EnableRMC(BOOL bEnable) {

    if (m_pClient) {
        m_pClient->EnableMethodCalls(bEnable);
    }
}

//******************************************************************************
//
// Method:
//
//     RMCEnabled
//
// Description:
//
//     Return the enabled state of remote Direct3D method calls.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if remote method calls are enabled, FALSE if they are disabled.
//
//******************************************************************************
BOOL CDisplay::RMCEnabled() {

    if (m_pClient) {
        return m_pClient->MethodCallsEnabled();
    }

    return FALSE;
}

//******************************************************************************
//
// Method:
//
//     GetConnectionStatus
//
// Description:
//
//     Return the connection status of the verification server.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     Connection status of the server.
//
//******************************************************************************
SERVERSTATUS CDisplay::GetConnectionStatus() {

    if (m_pClient) {
        if (m_pClient->IsConnected()) {
            return SERVER_CONNECTED;
        }
        else {
            return SERVER_DISCONNECTED;
        }
    }
    else {
        return SERVER_NOTCONNECTED;
    }
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input from the keyboard or joystick.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::ProcessInput() {

    if (!m_bCreated) {
        return;
    }

    memcpy(&m_jsLast, &m_jsJoys, sizeof(JOYSTATE));

    // Poll the joystick
    if (m_bUseInput) {
        GetJoystickState(&m_jsJoys);
    }

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_BLACK)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BLACK)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
                if (m_pClient) {
                    ((CCDevice8*)m_pDevice)->ToggleVerificationDisplay();
                }
            }
            else {
                if (!(GetStartupContext() & TSTART_STRESS)) {
                    m_bShowConsole = !m_bShowConsole;
                }
            }
        }
    }

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_WHITE)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_WHITE) && BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
            m_bSwapSticks = !m_bSwapSticks;
        }
    }

#ifndef UNDER_XBOX
    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_BACK)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
            SendMessage(m_hWnd, WM_CLOSE, 0, 0);
        }
    }
#endif // !UNDER_XBOX

    if (!m_bShowConsole) {
        // Update the default camera
        UpdateCamera(&m_cam);
    }

    else {

        DWORD dwScroll = 0;
        float fHorz, fVert;

        // Update the console
        if (m_kdKeys & KEY_LEFT) {
            dwScroll |= XSCROLL_LINELEFT;
        }
        if (m_kdKeys & KEY_RIGHT) {
            dwScroll |= XSCROLL_LINERIGHT;
        }
        if (m_kdKeys & KEY_UP) {
            dwScroll |= XSCROLL_LINEUP;
        }
        if (m_kdKeys & KEY_DOWN) {
            dwScroll |= XSCROLL_LINEDOWN;
        }
        if (m_kdKeys & KEY_PAGEDOWN || BUTTON_PRESSED(m_jsJoys, JOYBUTTON_DOWN)) {
            dwScroll |= XSCROLL_PAGEDOWN;
        }
        if (m_kdKeys & KEY_PAGEUP || BUTTON_PRESSED(m_jsJoys, JOYBUTTON_UP)) {
            dwScroll |= XSCROLL_PAGEUP;
        }
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_LEFT)) {
            dwScroll |= XSCROLL_PAGELEFT;
        }
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_RIGHT)) {
            dwScroll |= XSCROLL_PAGERIGHT;
        }
        if (m_kdKeys & KEY_HOME) {
            dwScroll |= XSCROLL_LEFT;
        }
        if (m_kdKeys & KEY_END) {
            dwScroll |= XSCROLL_RIGHT;
        }
        if (m_kdKeys & KEY_INSERT || BUTTON_PRESSED(m_jsJoys, JOYBUTTON_Y)) {
            dwScroll |= XSCROLL_TOP;
        }
        if (m_kdKeys & KEY_DELETE || BUTTON_PRESSED(m_jsJoys, JOYBUTTON_X)) {
            dwScroll |= XSCROLL_BOTTOM;
        }
        fHorz = m_jsJoys.f1X;
        fVert = m_jsJoys.f1Y;
        if (fHorz != 0.0f) {
            dwScroll |= XSCROLL_HORZ;
        }
        if (fVert != 0.0f) {
            dwScroll |= XSCROLL_VERT;
        }
        if (dwScroll) {
            xScrollConsole(dwScroll, &fHorz, &fVert);
        }
    }
}

//******************************************************************************
//
// Method:
//
//     SetView
//
// Description:
//
//     Update the view and projection matrices based on the given camera data.
//
// Arguments:
//
//     PCAMERA pcam                 - Pointer to the camera information
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::SetView(PCAMERA pcam) {

    D3DXMATRIX      mTransform;
    HRESULT         hr;

    if (!m_bCreated) {
        return FALSE;
    }

    if (!pcam) {
        pcam = &m_cam;
    }

    // Initialize the view matrix
    ::SetView(&mTransform, &pcam->vPosition, &pcam->vInterest, 
            &D3DXVECTOR3((float)sin(pcam->fRoll), (float)cos(pcam->fRoll), 
            0.0f));

    if (GetStartupContext() & TSTART_STRESS) {
        float* fElement = &mTransform._11;
        UINT i;
        for (i = 0; i < 16; i++) {
            if (_isnan(fElement[i])) {
                TCHAR szOut[256];
                wsprintf(szOut, TEXT("Element %d of view transform is not a number (0x%X : %f)\r\n"), i, *(LPDWORD)&fElement[i], fElement[i]);
                OutputDebugString(szOut);
                for (i = 0; i < 16; i++) {
                    wsprintf(szOut, TEXT("View transform element %d - (0x%X : %f)\r\n"), i, *(LPDWORD)&fElement[i], fElement[i]);
                    OutputDebugString(szOut);
                }
                __asm int 3;
                break;
            }
        }
    }

    hr = m_pDevice->SetTransform(D3DTS_VIEW, &mTransform);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTransform"))) {
        return FALSE;
    }

    // Initialize the projection matrix
    SetPerspectiveProjection(&mTransform, pcam->fNearPlane, pcam->fFarPlane, 
            pcam->fFieldOfView, (float)m_d3dsdBack.Height / (float)m_d3dsdBack.Width);

    hr = m_pDevice->SetTransform(D3DTS_PROJECTION, &mTransform);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetTransform"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     UpdateCamera
//
// Description:
//
//     Update the camera state by polling user input from the keyboard and 
//     and joystick.
//
// Arguments:
//
//     PCAMERA pcam                 - Pointer to the camera information
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
void CDisplay::UpdateCamera(PCAMERA pcam) {

    static KEYSDOWN     kdLastKeys = 0;
    static D3DXVECTOR3  vViewTranslation = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    static D3DXVECTOR3  vViewRotation = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    static D3DXMATRIX   mViewRotationX = D3DXMATRIX(
                            1.0f, 0.0f, 0.0f, 0.0f,
                            0.0f, 1.0f, 0.0f, 0.0f,
                            0.0f, 0.0f, 1.0f, 0.0f,
                            0.0f, 0.0f, 0.0f, 1.0f
                        );
    static D3DXMATRIX   mViewRotationY = mViewRotationX;
    static BOOL         bOrbitStick = FALSE;

    if (!m_bCreated) {
        return;
    }

    // Poll the keyboard
    if (m_kdKeys != kdLastKeys) {

        if (m_kdKeys & KEY_PAGEDOWN) {
            vViewTranslation.x = -m_fCameraTDelta;
        }
        else if (m_kdKeys & KEY_DELETE) {
            vViewTranslation.x = m_fCameraTDelta;
        }
        else {
            vViewTranslation.x = 0.0f;
        }

        if (m_kdKeys & KEY_HOME) {
            vViewTranslation.y = -m_fCameraTDelta;
        }
        else if (m_kdKeys & KEY_END) {
            vViewTranslation.y = m_fCameraTDelta;
        }
        else {
            vViewTranslation.y = 0.0f;
        }

        if (m_kdKeys & KEY_ADD || m_kdKeys & KEY_PAGEUP) {
            vViewTranslation.z = -m_fCameraTDelta;
        }
        else if (m_kdKeys & KEY_SUBTRACT || m_kdKeys & KEY_INSERT) {
            vViewTranslation.z = m_fCameraTDelta;
        }
        else {
            vViewTranslation.z = 0.0f;
        }

        if (m_kdKeys & KEY_LEFT) {
            vViewRotation.y = -m_fCameraRDelta;
        }
        else if (m_kdKeys & KEY_RIGHT) {
            vViewRotation.y = m_fCameraRDelta;
        }
        else {
            vViewRotation.y = 0.0f;
        }

        if (m_kdKeys & KEY_UP) {
            vViewRotation.x = -m_fCameraRDelta;
        }
        else if (m_kdKeys & KEY_DOWN) {
            vViewRotation.x = m_fCameraRDelta;
        }
        else {
            vViewRotation.x = 0.0f;
        }
    }

    kdLastKeys = m_kdKeys;

    // Only update the camera when the start button is not pressed
    if (!BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {

        // Left keypad
        if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_LEFT)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_LEFT)) {
                vViewTranslation.x = m_fCameraTDelta;
            }
            else {
                vViewTranslation.x = 0.0f;
            }
        }

        // Right keypad
        if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_RIGHT)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_RIGHT)) {
                vViewTranslation.x = -m_fCameraTDelta;
            }
            else {
                vViewTranslation.x = 0.0f;
            }
        }

        // Up keypad
        if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_UP)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_UP)) {
                vViewTranslation.y = -m_fCameraTDelta;
            }
            else {
                vViewTranslation.y = 0.0f;
            }
        }

        // Down keypad
        if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_DOWN)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_DOWN)) {
                vViewTranslation.y = m_fCameraTDelta;
            }
            else {
                vViewTranslation.y = 0.0f;
            }
        }

        // Left trigger
        if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_LTRIG)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_LTRIG)) {
                vViewTranslation.z = m_fCameraTDelta;
            }
            else {
                vViewTranslation.z = 0.0f;
            }
        }

        // Right trigger
        if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_RTRIG)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_RTRIG)) {
                vViewTranslation.z = -m_fCameraTDelta;
            }
            else {
                vViewTranslation.z = 0.0f;
            }
        }

        // Joysticks
        if (m_jsJoys.f1X != m_jsLast.f1X ||
            m_jsJoys.f1Y != m_jsLast.f1Y ||
            m_jsJoys.f2X != m_jsLast.f2X ||
            m_jsJoys.f2Y != m_jsLast.f2Y)
        {
            float f1X, f1Y, f2X, f2Y;

            if (m_bSwapSticks) {
                f1X = m_jsJoys.f2X;
                f1Y = m_jsJoys.f2Y;
                f2X = m_jsJoys.f1X;
                f2Y = m_jsJoys.f1Y;
            }
            else {
                f1X = m_jsJoys.f1X;
                f1Y = m_jsJoys.f1Y;
                f2X = m_jsJoys.f2X;
                f2Y = m_jsJoys.f2Y;
            }
            if (f2X == 0.0f && f2Y == 0.0f) {
                vViewRotation.y = f1X * m_fCameraRDelta;
                vViewRotation.x = f1Y * m_fCameraRDelta;
                bOrbitStick = FALSE;
            }
            else {
                vViewRotation.y = f2X * m_fCameraRDelta;
                vViewRotation.x = f2Y * m_fCameraRDelta;
                bOrbitStick = TRUE;
            }
        }
    }

    if (pcam) {

        D3DXMATRIX  mView, mViewTransform;
        D3DXVECTOR3 vTranslation, vDirection, vUp, vProj, vCross;
        D3DXVECTOR3 vViewTrans = vViewTranslation;
        float       fMagnitude, fDot, fScaleX, fScaleY, fTheta;
        BOOL        bOrbit = (BOOL)((m_kdKeys & KEY_SHIFT) || bOrbitStick);


        if (GetStartupContext() & TSTART_STRESS) {
            float* fElement = (float*)pcam;
            UINT i;
            for (i = 0; i < 7; i++) {
                if (_isnan(fElement[i])) {
                    TCHAR szOut[256];
                    wsprintf(szOut, TEXT("Element %d of camera is not a number before update (0x%X : %f)\r\n"), i, *(LPDWORD)&fElement[i], fElement[i]);
                    OutputDebugString(szOut);
                    for (i = 0; i < 7; i++) {
                        wsprintf(szOut, TEXT("Camera element %d - (0x%X : %f)\r\n"), i, *(LPDWORD)&fElement[i], fElement[i]);
                        OutputDebugString(szOut);
                    }
                    __asm int 3;
                    break;
                }
            }
        }


        if (!bOrbit) {
            vDirection = pcam->vInterest - pcam->vPosition;
        }
        else {
            vDirection = pcam->vPosition - pcam->vInterest;
        }
        fMagnitude = D3DXVec3Length(&vDirection);
        D3DXVec3Normalize(&vDirection, &vDirection);
        vUp = D3DXVECTOR3((float)sin(pcam->fRoll), (float)cos(pcam->fRoll), 0.0f);
        // Project the direction vector into a plane orthogonal to the up vector.
        // The resulting vector will originate at the point the projected direction
        // vector intersects with the plane and terminate at the up vector/
        // The DotProduct gives the ratio between the magnitude of the direction
        // vector and the scalar projection of the direction vector onto the up
        // vector.  Multiplying by this scales the direction vector out to the
        // point that it will intersect with the up vector's orthogonal plane
        fDot = D3DXVec3Dot(&vUp, &vDirection);
        D3DXVec3Normalize(&vProj, &(vUp - (vDirection * fDot)));
        D3DXVec3Cross(&vCross, &vProj, &vDirection);

        fScaleY = (fDot < 0.0f) ? -fDot : fDot;
        fTheta = (float)acos(fScaleY);
        fScaleY = fTheta / M_PIDIV2;

        if (bOrbit) {
            fScaleY *= -3.0f;
            fScaleX = 3.0f;
        }
        else {
            fScaleX = 1.0f;
        }

        mViewRotationY._11 = (float)cos(vViewRotation.y * fScaleY);
        mViewRotationY._13 = (float)-sin(vViewRotation.y * fScaleY);
        mViewRotationY._31 = -mViewRotationY._13;
        mViewRotationY._33 = mViewRotationY._11;

        mViewRotationX._22 = (float)cos(vViewRotation.x * fScaleX);
        mViewRotationX._23 = (float)sin(vViewRotation.x * fScaleX);
        mViewRotationX._32 = -mViewRotationX._23;
        mViewRotationX._33 = mViewRotationX._22;

        InitMatrix(&mViewTransform,
            vCross.x,       vCross.y,       vCross.z,       0.0f,
            vProj.x,        vProj.y,        vProj.z,        0.0f,
            vDirection.x,   vDirection.y,   vDirection.z,   0.0f,
            0.0f,           0.0f,           0.0f,           1.0f
        );

        D3DXMatrixMultiply(&mView, &mViewRotationX, &mViewTransform);
        D3DXMatrixMultiply(&mViewTransform, &mViewRotationY, &mView);

        if (!bOrbit) {
            D3DXVec3TransformCoord(&pcam->vInterest, 
                                &D3DXVECTOR3(0.0f, 0.0f, fMagnitude), &mViewTransform);
            pcam->vInterest += pcam->vPosition;
        }
        else {
            D3DXVec3TransformCoord(&pcam->vPosition, 
                                &D3DXVECTOR3(0.0f, 0.0f, fMagnitude), &mViewTransform);
            pcam->vPosition += pcam->vInterest;
            vViewTrans.x = -vViewTrans.x;
            vViewTrans.z = -vViewTrans.z;
        }
        D3DXVec3TransformCoord(&vTranslation, &vViewTrans, &mViewTransform);
        pcam->vPosition -= vTranslation;
        pcam->vInterest -= vTranslation;

        if (fDot != 0.0f) {
            float fPol = (fDot < 0.0f) ? 1.0f : -1.0f;
            if ((fPol * vViewRotation.x * fScaleX) > fTheta) {
                pcam->fRoll += M_PI;
                if (pcam->fRoll > M_PI) {
                    pcam->fRoll -= M_2PI;
                }
            }
        }


        if (GetStartupContext() & TSTART_STRESS) {
            float* fElement = (float*)pcam;
            UINT i;
            for (i = 0; i < 7; i++) {
                if (_isnan(fElement[i])) {
                    TCHAR szOut[256];
                    wsprintf(szOut, TEXT("Element %d of camera is not a number after update (0x%X : %f)\r\n"), i, *(LPDWORD)&fElement[i], fElement[i]);
                    OutputDebugString(szOut);
                    for (i = 0; i < 7; i++) {
                        wsprintf(szOut, TEXT("Camera element %d - (0x%X : %f)\r\n"), i, *(LPDWORD)&fElement[i], fElement[i]);
                        OutputDebugString(szOut);
                    }
                    __asm int 3;
                    break;
                }
            }
        }

    }
}

//******************************************************************************
// Menu functions
//******************************************************************************

#ifndef UNDER_XBOX

//******************************************************************************
//
// Method:
//
//     CreateMainMenu
//
// Description:
//
//     Create the main menu for the application window
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     Handle to the created menu.
//
//******************************************************************************
HMENU CDisplay::CreateMainMenu() {

    HMENU hMenu, hMenuFile;

    // If the application has supplied a menu, load and return it
    hMenu = LoadMenu(GetTestInstance(), TEXT("IDR_MENU"));
    if (hMenu) {
        return hMenu;
    }

    // Otherwise create a default menu
    hMenu = CreateMenu();

    hMenuFile = CreateMenu();

    AppendMenu(hMenuFile, MF_STRING, IDM_DEFAULT_FILE_DISPLAY, TEXT("&Display...\tF2"));
    AppendMenu(hMenuFile, MF_SEPARATOR, 0, NULL);
    AppendMenu(hMenuFile, MF_STRING, IDM_DEFAULT_FILE_EXIT, TEXT("E&xit\tEsc"));

    AppendMenu(hMenu, MF_POPUP, (UINT)hMenuFile, TEXT("&File"));

    return hMenu;
}

//******************************************************************************
//
// Method:
//
//     DisplayDlgProc
//
// Description:
//
//     Window procedure to process messages for the display dialog.
//
// Arguments:
//
//     HWND hDlg                - Dialog window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CDisplay::DisplayDlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    PADAPTERDESC        padpd;
    PDEVICEDESC         pdevd;
    PDISPLAYMODE        pdm;
    TCHAR               szMode[512];
    int                 sel;
#ifdef UNICODE
    WCHAR               wszBuffer[512];
#endif // UNICODE
    TCHAR*              pszDevice[] = {
                            TEXT(""),
                            TEXT("NULL"),
                            TEXT("Abstraction (HAL)"),
                            TEXT("Reference (REF)"),
                            TEXT("Emulation (SW)"),
                        };

    switch (uMsg) {

        case WM_INITDIALOG:

            // Fill the adapter list
            for (padpd = m_padpdList; padpd; padpd = padpd->padpdNext) {
#ifndef UNICODE
                sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_ADDSTRING, 0, (LPARAM)padpd->d3dai.Description);
#else
                mbstowcs(wszBuffer, padpd->d3dai.Description, 512);
                sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_ADDSTRING, 0, (LPARAM)wszBuffer);
#endif // !UNICODE
                SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_SETITEMDATA, (WPARAM)sel, (LPARAM)padpd);
                if (m_disdSelect.padpd == padpd) {
                    SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_SETCURSEL, (WPARAM)sel, 0);
                }
            }

            // Fill the device list
            for (pdevd = m_disdSelect.padpd->pdevdList; pdevd; pdevd = pdevd->pdevdNext) {
                sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_ADDSTRING, 0, (LPARAM)pszDevice[pdevd->d3ddt]);
                SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_SETITEMDATA, (WPARAM)sel, (LPARAM)pdevd);
                if (m_disdSelect.pdevd == pdevd) {
                    SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_SETCURSEL, (WPARAM)sel, 0);
                }
            }

            // Fill the display mode
            for (pdm = m_disdSelect.pdevd->pdmList; pdm; pdm = pdm->pdmNext) {
                if (pdm->d3ddm.RefreshRate) {
                    wsprintf(szMode, TEXT("%d x %d x %d  %d Hz"), pdm->d3ddm.Width, pdm->d3ddm.Height, FormatToBitDepth(pdm->d3ddm.Format), pdm->d3ddm.RefreshRate);
                }
                else {
                    wsprintf(szMode, TEXT("%d x %d x %d"), pdm->d3ddm.Width, pdm->d3ddm.Height, FormatToBitDepth(pdm->d3ddm.Format));
                }
                sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_ADDSTRING, 0, (LPARAM)szMode);
                SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_SETITEMDATA, (WPARAM)sel, (LPARAM)pdm);
                if (pdm == m_disdSelect.pdm) {
                    SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_SETCURSEL, (WPARAM)sel, 0);
                }
            }

            SendDlgItemMessage(hDlg, IDC_DISPLAY_FULLSCREEN, BM_SETCHECK, (BOOL)!m_disdSelect.bWindowed, 0);
            EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_FULLSCREEN), m_disdSelect.pdevd->bCanRenderWindowed);
            EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_MODE), !m_disdSelect.bWindowed);

            SendDlgItemMessage(hDlg, IDC_DISPLAY_DEPTHBUFFER, BM_SETCHECK, m_disdSelect.bDepthBuffer, 0);
            if (ANTIALIAS_SUPPORTED(m_disdSelect.pdevd, m_disdSelect.pdm, m_disdSelect.bWindowed)) {
                SendDlgItemMessage(hDlg, IDC_DISPLAY_ANTIALIAS, BM_SETCHECK, m_disdSelect.bAntialias, 0);
            }
            else {
                SendDlgItemMessage(hDlg, IDC_DISPLAY_ANTIALIAS, BM_SETCHECK, FALSE, 0);
                EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_ANTIALIAS), FALSE);
            }

            return TRUE;

        case WM_COMMAND:

            switch (LOWORD(wParam)) {

                case IDC_DISPLAY_FULLSCREEN:
                    if (HIWORD(wParam) == BN_CLICKED) {
                        PDEVICEDESC pdevd;
                        PDISPLAYMODE pdm;
                        BOOL bAntialias;
                        BOOL bFullscreen = SendDlgItemMessage(hDlg, IDC_DISPLAY_FULLSCREEN, BM_GETCHECK, 0, 0);
                        EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_MODE), bFullscreen);

                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETCURSEL, 0, 0);
                        pdevd = (PDEVICEDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETITEMDATA, (WPARAM)sel, 0);
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETCURSEL, 0, 0);
                        pdm = (PDISPLAYMODE)SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETITEMDATA, (WPARAM)sel, 0);
                        bAntialias = ANTIALIAS_SUPPORTED(pdevd, pdm, !bFullscreen);
                        if (!bAntialias) {
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_ANTIALIAS, BM_SETCHECK, FALSE, 0);
                        }
                        EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_ANTIALIAS), bAntialias);
                        return TRUE;
                    }
                    break;

                case IDC_DISPLAY_ADAPTER:

                    if (HIWORD(wParam) == CBN_SELCHANGE) {

                        PADAPTERDESC padpdCurrent;
                        PDEVICEDESC  pdevdDefault, pdevdLast;
                        int          def;

                        // Get the current device selection
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETCURSEL, 0, 0);
                        pdevdLast = (PDEVICEDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETITEMDATA, (WPARAM)sel, 0);

                        // Clear the device list
                        SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_RESETCONTENT, 0, 0);

                        // Get the new adapter
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_GETCURSEL, 0, 0);
                        padpdCurrent = (PADAPTERDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_GETITEMDATA, (WPARAM)sel, 0);

                        // Select a default device for the adapter
                        pdevdDefault = SelectDevice(padpdCurrent);

                        // Add the devices for the new adapter
                        for (pdevd = padpdCurrent->pdevdList; pdevd; pdevd = pdevd->pdevdNext) {

                            sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_ADDSTRING, 0, (LPARAM)pszDevice[pdevd->d3ddt]);
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_SETITEMDATA, (WPARAM)sel, (LPARAM)pdevd);

                            // If the new adapter supports the same device that was selected for the old
                            // adapter, select the device again
                            if (pdevd->d3ddt == pdevdLast->d3ddt) {
                                SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_SETCURSEL, (WPARAM)sel, 0);
                            }

                            // If the device matches the default device, save the index
                            if (pdevd == pdevdDefault) {
                                def = sel;
                            }
                        }

                        // If no device has been selected (the new adapter does not support the old selected device)
                        // select the default as current
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETCURSEL, 0, 0);
                        if (sel == CB_ERR) {
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_SETCURSEL, (WPARAM)def, 0);
                        }

                        // Update the display mode list for the new device
                        SendMessage(hDlg, WM_COMMAND, MAKELPARAM(IDC_DISPLAY_DEVICE, CBN_SELCHANGE), (LPARAM)GetDlgItem(hDlg, IDC_DISPLAY_DEVICE));

                        return TRUE;
                    }
                    break;

                case IDC_DISPLAY_DEVICE:

                    if (HIWORD(wParam) == CBN_SELCHANGE) {

                        PDEVICEDESC  pdevdCurrent;
                        PDISPLAYMODE pdmDefault, pdmLast;
                        int          def;
                        BOOL         bEnable;

                        // Get the current display mode selection
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETCURSEL, 0, 0);
                        pdmLast = (PDISPLAYMODE)SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETITEMDATA, (WPARAM)sel, 0);

                        // Clear the display mode list
                        SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_RESETCONTENT, 0, 0);

                        // Get the new device
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETCURSEL, 0, 0);
                        pdevdCurrent = (PDEVICEDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETITEMDATA, (WPARAM)sel, 0);

                        // Select a default display mode for the device
                        pdmDefault = SelectDisplayMode(pdevdCurrent);

                        // Add the display modes for the new device
                        for (pdm = pdevdCurrent->pdmList; pdm; pdm = pdm->pdmNext) {

                            if (pdm->d3ddm.RefreshRate) {
                                wsprintf(szMode, TEXT("%d x %d x %d  %d Hz"), pdm->d3ddm.Width, pdm->d3ddm.Height, FormatToBitDepth(pdm->d3ddm.Format), pdm->d3ddm.RefreshRate);
                            }
                            else {
                                wsprintf(szMode, TEXT("%d x %d x %d"), pdm->d3ddm.Width, pdm->d3ddm.Height, FormatToBitDepth(pdm->d3ddm.Format));
                            }
                            sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_ADDSTRING, 0, (LPARAM)szMode);
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_SETITEMDATA, (WPARAM)sel, (LPARAM)pdm);

                            // If the new device supports the same display mode that was selected for the old
                            // device, select the mode again
                            if (pdm->d3ddm.Width == pdmLast->d3ddm.Width &&
                                pdm->d3ddm.Height == pdmLast->d3ddm.Height &&
                                pdm->d3ddm.Format == pdmLast->d3ddm.Format &&
                                pdm->d3ddm.RefreshRate == pdmLast->d3ddm.RefreshRate) 
                            {
                                SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_SETCURSEL, (WPARAM)sel, 0);
                            }

                            // If the display mode matches the default, save the index
                            if (pdm == pdmDefault) {
                                def = sel;
                            }
                        }

                        // If no mode has been selected (the new device does not support the old selected mode)
                        // select the default as current
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETCURSEL, 0, 0);
                        if (sel == CB_ERR) {
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_SETCURSEL, (WPARAM)def, 0);
                        }

                        // If the device does not supported rendering in a windowed state, select and
                        // disable the full screen check box
                        if (!pdevdCurrent->bCanRenderWindowed) {
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_FULLSCREEN, BM_SETCHECK, (WPARAM)TRUE, 0);
                        }
                        EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_FULLSCREEN), pdevdCurrent->bCanRenderWindowed);
                        bEnable = SendDlgItemMessage(hDlg, IDC_DISPLAY_FULLSCREEN, BM_GETCHECK, 0, 0);
                        EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_MODE), bEnable);

                        // Update the antialias check box
                        SendMessage(hDlg, WM_COMMAND, MAKELPARAM(IDC_DISPLAY_MODE, CBN_SELCHANGE), (LPARAM)GetDlgItem(hDlg, IDC_DISPLAY_MODE));

                        return TRUE;
                    }
                    break;

                case IDC_DISPLAY_MODE:

                    if (HIWORD(wParam) == CBN_SELCHANGE) {
                        PDEVICEDESC pdevd;
                        PDISPLAYMODE pdm;
                        BOOL bAntialias;
                        BOOL bFullscreen = SendDlgItemMessage(hDlg, IDC_DISPLAY_FULLSCREEN, BM_GETCHECK, 0, 0);
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETCURSEL, 0, 0);
                        pdevd = (PDEVICEDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETITEMDATA, (WPARAM)sel, 0);
                        sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETCURSEL, 0, 0);
                        pdm = (PDISPLAYMODE)SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETITEMDATA, (WPARAM)sel, 0);
                        bAntialias = ANTIALIAS_SUPPORTED(pdevd, pdm, !bFullscreen);
                        if (!bAntialias) {
                            SendDlgItemMessage(hDlg, IDC_DISPLAY_ANTIALIAS, BM_SETCHECK, FALSE, 0);
                        }
                        EnableWindow(GetDlgItem(hDlg, IDC_DISPLAY_ANTIALIAS), bAntialias);
                        return TRUE;
                    }
                    break;

                case IDOK:
                    // Update the current driver, device, window state, and display mode
                    sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_GETCURSEL, 0, 0);
                    m_disdSelect.padpd = (PADAPTERDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_ADAPTER, CB_GETITEMDATA, (WPARAM)sel, 0);
                    sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETCURSEL, 0, 0);
                    m_disdSelect.pdevd = (PDEVICEDESC)SendDlgItemMessage(hDlg, IDC_DISPLAY_DEVICE, CB_GETITEMDATA, (WPARAM)sel, 0);
                    sel = SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETCURSEL, 0, 0);
                    m_disdSelect.pdm = (PDISPLAYMODE)SendDlgItemMessage(hDlg, IDC_DISPLAY_MODE, CB_GETITEMDATA, (WPARAM)sel, 0);
                    m_disdSelect.bWindowed = !((BOOL)SendDlgItemMessage(hDlg, IDC_DISPLAY_FULLSCREEN, BM_GETCHECK, 0, 0));
                    m_disdSelect.bDepthBuffer = (BOOL)SendDlgItemMessage(hDlg, IDC_DISPLAY_DEPTHBUFFER, BM_GETCHECK, 0, 0);
                    m_disdSelect.bAntialias = (BOOL)SendDlgItemMessage(hDlg, IDC_DISPLAY_ANTIALIAS, BM_GETCHECK, 0, 0);

                case IDCANCEL:
                    EndDialog(hDlg, wParam);
                    return TRUE;
            }

            break;
    }

    return FALSE;
}

//******************************************************************************
//
// Method:
//
//     AddDlgItemTemplate
//
// Description:
//
//     Reset the device with the given display mode, windowed mode, auto
//     depth/stencil buffer, and multi-sample swap chain.
//
// Arguments:
//
//     LPWORD* ppw                      - Pointer to an item in the dialog
//                                        template
//
//     WORD wClass                      - Class ordinal
//
//     LPWSTR wszText                   - Text of the dialog item
//
//     WORD wID                         - Dialog item identifier
//
//     short x                          - x coordinate of the dialog item
//
//     short y                          - y coordinate of the dialog item
//
//     short cx                         - Width of the dialog item
//
//     short cy                         - Height of the dialog item
//
//     DWORD dwStyle                    - Style of the dialog item
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::AddDlgItemTemplate(LPWORD* ppw, WORD wClass, LPWSTR wszText, 
            WORD wId, short x, short y, short cx, short cy, DWORD dwStyle) 
{
    LPDLGITEMTEMPLATE pdit;
    LPWSTR            wsz;
    LPWORD            pw = *ppw;

    pdit = (LPDLGITEMTEMPLATE)((((DWORD)pw) + 3) & ~3);    // Align the data
    pdit->style           = WS_VISIBLE | WS_CHILD | dwStyle;
    pdit->dwExtendedStyle = 0;
    pdit->x               = x;
    pdit->y               = y;
    pdit->cx              = cx;
    pdit->cy              = cy;
    pdit->id              = wId;

    pw = (LPWORD)(pdit+1);
    *pw++ = 0xFFFF;                         // System class
    *pw++ = wClass;                         // Class ordinal
    wsz = (LPWSTR)pw;
    wcscpy(wsz, wszText);                   // Item text
    pw = (LPWORD)(wsz + wcslen(wsz) + 1);
    *pw++ = 0;                              // No creation data
    *ppw = pw;
}

#endif // !UNDER_XBOX

//******************************************************************************
//
// Method:
//
//     Select
//
// Description:
//
//     Build and create a display dialog to allow a selection of adapter, 
//     device, display mode, windowed mode, auto depth buffer, and multi-sample
//     type.  Reset or recreate the device based on the display configuration
//     selected.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CDisplay::Select() {

#ifdef UNDER_XBOX
    return;
#else

    LPDLGTEMPLATE     pTemplate;
    LPWORD            pw;
    LPWSTR            wsz;
    int               ret;

    if (!m_bCreated) {
        return;
    }

    // Save the current display state
    memcpy(&m_disdSelect, &m_disdCurrent, sizeof(DISPLAYDESC));

    pTemplate = (LPDLGTEMPLATE)MemAlloc(sizeof(DLGTEMPLATE) + 3 * sizeof(WORD) + 
                                        512 * sizeof(WCHAR) + 
                                        11 * (sizeof(DLGITEMTEMPLATE) +
                                        (5 * sizeof(WORD) + 256 * sizeof(WCHAR))));
    if (!pTemplate) {
        return;
    }

    // Initialize the dialog template
    pTemplate->style = WS_POPUP | WS_CAPTION | WS_SYSMENU | DS_MODALFRAME | DS_CENTER | DS_SETFONT;
    pTemplate->cdit  = 11;
    pTemplate->x     = 0;
    pTemplate->y     = 0;
    pTemplate->cx    = 149;
    pTemplate->cy    = 138;
    pTemplate->dwExtendedStyle = 0;

    pw = (LPWORD)(pTemplate+1);
    *pw++ = 0;                                  // No menu
    *pw++ = 0;                                  // Default dialog class
    
    // Specify the caption for the dialog
    wsz = (LPWSTR)pw;
    wcscpy(wsz, L"Display");                    // Caption
    pw = (LPWORD)(wsz + wcslen(wsz) + 1);
    *pw++ = 8;                                  // 8 point font
    wsz = (LPWSTR)pw;
    wcscpy(wsz, L"MS Sans Serif");              // MS Sans Serif typeface
    pw = (LPWORD)(wsz + wcslen(wsz) + 1);

    // Specify the controls of the dialog
    AddDlgItemTemplate(&pw, 0x0085, L"", IDC_DISPLAY_ADAPTER, 13, 16, 123, 50, CBS_DROPDOWNLIST | CBS_SORT | WS_VSCROLL | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0080, L"Adapter", IDC_STATIC, 7, 7, 135, 27, WS_GROUP | BS_GROUPBOX);
    AddDlgItemTemplate(&pw, 0x0085, L"", IDC_DISPLAY_DEVICE, 13, 48, 123, 50, CBS_DROPDOWNLIST | CBS_SORT | WS_VSCROLL | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0080, L"Device", IDC_STATIC, 7, 38, 135, 27, WS_GROUP | BS_GROUPBOX);
    AddDlgItemTemplate(&pw, 0x0080, L"", IDC_STATIC, 7, 70, 135, 27, WS_GROUP | BS_GROUPBOX);
    AddDlgItemTemplate(&pw, 0x0080, L"F&ull screen", IDC_DISPLAY_FULLSCREEN, 13, 68, 50, 10, BS_AUTOCHECKBOX | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0085, L"", IDC_DISPLAY_MODE, 13, 79, 123, 100, CBS_DROPDOWNLIST | WS_VSCROLL | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0080, L"&Depth Buffer", IDC_DISPLAY_DEPTHBUFFER, 13, 102, 56, 10, BS_AUTOCHECKBOX | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0080, L"&Antialias", IDC_DISPLAY_ANTIALIAS, 83, 102, 42, 10, BS_AUTOCHECKBOX | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0080, L"OK", IDOK, 38, 117, 50, 14, BS_DEFPUSHBUTTON | WS_TABSTOP);
    AddDlgItemTemplate(&pw, 0x0080, L"Cancel", IDCANCEL, 92, 117, 50, 14, WS_TABSTOP);

    // Display the dialog in a full screen state
    if (m_pDevice && !m_disdCurrent.bWindowed) {
//        m_pDevice->FlipToGDISurface();
        DrawMenuBar(m_hWnd);
        RedrawWindow(m_hWnd, NULL, NULL, RDW_FRAME);
    }

    // Create the display dialog
    ret = DialogBoxIndirectParam(GetTestInstance(), pTemplate, m_hWnd, ::DisplayDlgProc, (LPARAM)this);

    MemFree(pTemplate);

    // Do not include the amount of time the dialog was open in game time calculations
    m_bTimeSync = TRUE;

    if (ret != IDOK) {
        return;
    }

    // If the display driver or device has been changed, recreate everything
    if (m_disdCurrent.padpd != m_disdSelect.padpd || m_disdCurrent.pdevd != m_disdSelect.pdevd) {
        if (m_pfnClearDevice) {
            m_pfnClearDevice(m_pvClearDeviceParam);
        }
        xReleaseConsole();
        m_pDevice->Release();
        m_pDevice = NULL;
        if (!CreateDevice(m_disdSelect.padpd, m_disdSelect.pdevd, m_disdSelect.pdm, m_disdCurrent.uNumBackBuffers, m_disdSelect.bWindowed, m_disdSelect.bDepthBuffer, m_disdSelect.bAntialias) ||
            !xCreateConsole(m_pDevice) ||
            (m_pfnSetDevice && !m_pfnSetDevice(m_pvSetDeviceParam))) 
        {
            DestroyWindow(m_hWnd);
        }
    }

    // If the state of the display has changed, update the display
    else if (m_disdCurrent.pdm != m_disdSelect.pdm ||
             m_disdCurrent.bWindowed != m_disdSelect.bWindowed ||
             m_disdCurrent.bDepthBuffer != m_disdSelect.bDepthBuffer ||
             m_disdCurrent.bAntialias != m_disdSelect.bAntialias) 
    {
        Update(m_disdSelect.pdm, m_disdSelect.bWindowed, m_disdSelect.bDepthBuffer, m_disdSelect.bAntialias);
    }

#endif // !UNDER_XBOX
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\enum.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    enum.cpp

Author:

    Matt Bronder

Description:

    Direct3D initialization routines.

*******************************************************************************/

#include "d3dlocus.h"

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif // UNDER_XBOX

#define D3DDEVTYPE_NULL ((D3DDEVTYPE)0)

//******************************************************************************
// Local function prototypes
//******************************************************************************

static DWORD            SelectVertexPipeline(D3DCAPS8* pd3dcaps);
static UINT             SelectPresentationInterval(D3DCAPS8* pd3dcaps);
static D3DFORMAT        SelectDepthStencilFormat(CDirect3D8* pDirect3D, 
                            UINT uAdapter, D3DDEVTYPE d3ddt, 
                            D3DFORMAT d3dfmtMode);
static
D3DMULTISAMPLE_TYPE     SelectMultiSampleType(CDirect3D8* pDirect3D, 
                            UINT uAdapter, D3DDEVTYPE d3ddt, 
                            D3DFORMAT d3dfmtMode, BOOL bWindowed);

//******************************************************************************
// Globals
//******************************************************************************

ADAPTERDESC             g_adpdDefault = {
                            (UINT)(-1), {0}, D3DFMT_UNKNOWN, NULL, NULL
                        };
DEVICEDESC              g_devdDefault = {
                            D3DDEVTYPE_NULL, {D3DDEVTYPE_NULL, 0}, 
                            D3DCREATE_HARDWARE_VERTEXPROCESSING, D3DPRESENT_INTERVAL_ONE, 
                            TRUE, D3DFMT_UNKNOWN, D3DMULTISAMPLE_NONE, NULL, 
                            NULL
                        };
DISPLAYMODE             g_dmDefault = {
                            {0}, D3DFMT_UNKNOWN, D3DMULTISAMPLE_NONE, NULL
                        };
D3DFORMAT               g_fmtdDefault = D3DFMT_UNKNOWN;
#ifndef UNDER_XBOX
D3DMULTISAMPLE_TYPE     g_mstDefault = D3DMULTISAMPLE_4_SAMPLES;
#else
D3DMULTISAMPLE_TYPE     g_mstDefault = D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR;
#endif

static CHECKDISPLAYPROC g_pfnValidate = NULL;

//******************************************************************************
//
// Function:
//
//     EnumDisplays
//
// Description:
//
//     Build a display device list containing information about all supported
//     adapters, devices, and display modes present on the system at the time
//     the Direct3D object was created.
//
// Arguments:
//
//     CDirect3D8* pDirect3D        - Pointer to the Direct3D object
//
// Return Value:
//
//     A pointer to the head of the display adapter list (NULL if no adapters
//     are supported).
//
//******************************************************************************
PADAPTERDESC EnumDisplays(CDirect3D8* pDirect3D) {

    PADAPTERDESC        padpdHead = NULL, padpdNode;
    UINT                uAdapter, uNumAdapters;
    PDEVICEDESC         pdevdNode;
    D3DDISPLAYMODE      d3ddm;
    PDISPLAYMODE        pdmNode;
    UINT                uMode, uNumModes;
    D3DFORMAT           fmt;
    D3DMULTISAMPLE_TYPE d3dmst;
    HRESULT             hr;
    UINT                uDevice;
    D3DDEVTYPE          d3ddt[] = {
                            D3DDEVTYPE_HAL,
                            D3DDEVTYPE_SW,
                            D3DDEVTYPE_REF,
                        };

    if (!pDirect3D) {
        return NULL;
    }

    // Enumerate adapters
    uNumAdapters = pDirect3D->GetAdapterCount();

    for (uAdapter = 0; uAdapter < pDirect3D->GetAdapterCount(); uAdapter++) {

        // Allocate memory for the adapter information
        padpdNode = (PADAPTERDESC)MemAlloc(sizeof(ADAPTERDESC));
        if (!padpdNode) {
            DebugString(TEXT("ERROR: Not enough memory available to store adapter information"));
            break;
        }

        // Save the adapter number
        padpdNode->uAdapter = uAdapter;

        // Save the adapter idenifier
        hr = pDirect3D->GetAdapterIdentifier(uAdapter, 0, &padpdNode->d3dai);
        if (ResultFailed(hr, TEXT("IDirect3D8::GetDeviceIdentifier"))) {
            MemFree(padpdNode);
            continue;
        }

        // Save the initial display mode of the adapter (for use in windowed applications)
        hr = pDirect3D->GetAdapterDisplayMode(uAdapter, &padpdNode->d3ddmWindowed);
        if (ResultFailed(hr, TEXT("IDirect3D8::GetAdapterDisplayMode"))) {
            MemFree(padpdNode);
            continue;
        }

        padpdNode->pdevdList = NULL;

        // Enumerate devices
#ifndef DEMO_HACK
        for (uDevice = 0; uDevice < 3; uDevice++) {
#else
        for (uDevice = 0; !uDevice; uDevice++) {
#endif

            // Allocate memory for the device information
            pdevdNode = (PDEVICEDESC)MemAlloc(sizeof(DEVICEDESC));
            if (!pdevdNode) {
                DebugString(TEXT("ERROR: Not enough memory available to store device information"));
                break;
            }

            // Save the device type
            pdevdNode->d3ddt = d3ddt[uDevice];
            
            // Save the caps
            hr = pDirect3D->GetDeviceCaps(uAdapter, d3ddt[uDevice], &pdevdNode->d3dcaps);
            if (ResultFailed(hr, TEXT("IDirect3D8::GetDeviceCaps"))) {
                MemFree(pdevdNode);
                continue;
            }

            // The device supports windowed mode if the caps exposes it and
            // the device can render to the initial display mode of the adapter
#ifndef DEMO_HACK
            hr = pDirect3D->CheckDeviceType(uAdapter, d3ddt[uDevice], padpdNode->d3ddmWindowed.Format, padpdNode->d3ddmWindowed.Format, TRUE);
#else
            hr = D3DERR_NOTAVAILABLE;
#endif // DEMO_HACK
            pdevdNode->bCanRenderWindowed = ((pdevdNode->d3dcaps.Caps2 & D3DCAPS2_CANRENDERWINDOWED) && SUCCEEDED(hr));

            // Select where vertex processing is to be performed
            pdevdNode->dwBehavior = SelectVertexPipeline(&pdevdNode->d3dcaps);

            // Select the presentation swap interval
            pdevdNode->uPresentInterval = SelectPresentationInterval(&pdevdNode->d3dcaps);

            if (SUCCEEDED(hr)) {

                // Select a depth/stencil buffer format for a windowed device
                pdevdNode->fmtdWindowed = SelectDepthStencilFormat(pDirect3D, uAdapter, d3ddt[uDevice], padpdNode->d3ddmWindowed.Format);

                // Select a multisample type for a windowed device
                pdevdNode->d3dmstWindowed = SelectMultiSampleType(pDirect3D, uAdapter, d3ddt[uDevice], padpdNode->d3ddmWindowed.Format, TRUE);
            }

            // Save the display modes supported by the adapter, device, and application
            uNumModes = pDirect3D->GetAdapterModeCount(uAdapter);
            pdevdNode->pdmList = NULL;

            for (uMode = 0; uMode < uNumModes; uMode++) {

                hr = pDirect3D->EnumAdapterModes(uAdapter, uMode, &d3ddm);
                if (ResultFailed(hr, TEXT("IDirect3D8::EnumAdapterModes"))) {
                    continue;
                }

                // Select a depth/stencil buffer format for the full screen display mode
                fmt = SelectDepthStencilFormat(pDirect3D, uAdapter, d3ddt[uDevice], d3ddm.Format);

                // Select a multisample type for the full screen display mode
                d3dmst = SelectMultiSampleType(pDirect3D, uAdapter, d3ddt[uDevice], d3ddm.Format, FALSE);

                // Check if the device supports the display mode format
                hr = pDirect3D->CheckDeviceType(uAdapter, d3ddt[uDevice], d3ddm.Format, d3ddm.Format, FALSE);
                if (FAILED(hr)) {
#ifndef DEMO_HACK
                    if (hr != D3DERR_NOTAVAILABLE) {
                        ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceType"));
                    }
#endif
                    continue;
                }

                // Check if the application supports the display mode format
                if (g_pfnValidate && !g_pfnValidate(pDirect3D, &pdevdNode->d3dcaps, &d3ddm)) {
                    // The application rejected the mode, skip it
                    continue;
                }
                        
                // Allocate memory for the display mode information
                pdmNode = (PDISPLAYMODE)MemAlloc(sizeof(DISPLAYMODE));
                if (!pdmNode) {
                    DebugString(TEXT("ERROR: Not enough memory available to store display mode information"));
                    break;
                }

                // Save the display mode
                memcpy(&pdmNode->d3ddm, &d3ddm, sizeof(D3DDISPLAYMODE));

                // Save the selected depth/stencil format
                pdmNode->fmtd = fmt;

                // Save the selected multisample type
                pdmNode->d3dmst = d3dmst;

                // Add the display mode to the list
                pdmNode->pdmNext = pdevdNode->pdmList;
                pdevdNode->pdmList = pdmNode;
            }

            // If no display modes are supported by the device, skip it
            if (!pdevdNode->pdmList) {
                MemFree(pdevdNode);
                continue;
            }

            // Add the device to the list
            pdevdNode->pdevdNext = padpdNode->pdevdList;
            padpdNode->pdevdList = pdevdNode;
        }

        // If no devices are supported by the adapter, skip it
        if (!padpdNode->pdevdList) {
            MemFree(padpdNode);
            continue;
        }

        // Add the adapter to the list
        padpdNode->padpdNext = padpdHead;
        padpdHead = padpdNode;
    }

    return padpdHead;
}

//******************************************************************************
//
// Function:
//
//     InitCheckDisplayProc
//
// Description:
//
//     Set a validation function which will be used during enumeration to 
//     evaluate which display modes are acceptable to the application.
//
// Arguments:
//
//     CHECKDISPLAYPROC pfnValidate     - Validation function
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitCheckDisplayProc(CHECKDISPLAYPROC pfnValidate) {
    
    g_pfnValidate = pfnValidate;
}

//******************************************************************************
//
// Function:
//
//     SelectAdapter
//
// Description:
//
//     Select a default adapter for the application from a list of available
//     adapters.
//
// Arguments:
//
//     PADAPTERDESC padpdList   - List of the available adapters
//
// Return Value:
//
//     A pointer to the selected adapter in the list.
//
//******************************************************************************
PADAPTERDESC SelectAdapter(PADAPTERDESC padpdList) {

    PADAPTERDESC padpd;

    if (!padpdList) {
        return NULL;
    }

    // Look for the default adapter in the list
    if (g_adpdDefault.uAdapter != (UINT)(-1)) {
        for (padpd = padpdList; padpd; padpd = padpd->padpdNext) {
            if (padpd->uAdapter == g_adpdDefault.uAdapter) 
            {
                return padpd;
            }
        }
    }

    // Select the primary display adapter
    for (padpd = padpdList; padpd; padpd = padpd->padpdNext) {

        if (padpd->uAdapter == 0) {
            return padpd;
        }
    }

    return padpdList;
}

//******************************************************************************
//
// Function:
//
//     SelectDevice
//
// Description:
//
//     Select the default device for the application from a list of available
//     devices.
//
// Arguments:
//
//     PADAPTERDESC padpd       - The adapter from which to select the default
//                                device
//
// Return Value:
//
//     A pointer to the selected device in the list.
//
//******************************************************************************
PDEVICEDESC SelectDevice(PADAPTERDESC padpd) {

    PDEVICEDESC pdevd,
                pdevdSelection = NULL;

    if (!padpd) {
        return NULL;
    }

    // Look for the default device in the list
    if (g_devdDefault.d3ddt != D3DDEVTYPE_NULL) {
        for (pdevd = padpd->pdevdList; pdevd; pdevd = pdevd->pdevdNext) {
            if (pdevd->d3ddt == g_devdDefault.d3ddt) {
                return pdevd;
            }
        }
    }

    for (pdevd = padpd->pdevdList; pdevd; pdevd = pdevd->pdevdNext) {

        // If the device is a HAL device, select it and return
        if (pdevd->d3ddt == D3DDEVTYPE_HAL) {
            return pdevd;
        }

        // If the device is an emulation device, save it and keep looking
        if (pdevd->d3ddt == D3DDEVTYPE_SW) {
            pdevdSelection = pdevd;
        }

        // If no device has yet been selected, save the reference device 
        // and keep looking
        if (!pdevdSelection) {
            pdevdSelection = pdevd;
        }
    }

    return pdevdSelection;
}

//******************************************************************************
//
// Function:
//
//     SelectDisplayMode
//
// Description:
//
//     Select the default display mode for the application from a list of 
//     display modes available to the given device.
//
// Arguments:
//
//     PDEVICEDESC pdevd        - The device from which to select the default
//                                display mode
//
// Return Value:
//
//     A pointer to the selected display mode in the list.
//
//******************************************************************************
PDISPLAYMODE SelectDisplayMode(PDEVICEDESC pdevd) {

    PDISPLAYMODE pdm;

    if (!pdevd) {
        return NULL;
    }

    // Look for the default display mode in the list
    if (g_dmDefault.d3ddm.Width != 0 && g_dmDefault.d3ddm.Height != 0) {
        for (pdm = pdevd->pdmList; pdm; pdm = pdm->pdmNext) {
            if (pdm->d3ddm.Width == g_dmDefault.d3ddm.Width && 
                pdm->d3ddm.Height == g_dmDefault.d3ddm.Height &&
                pdm->d3ddm.Format == g_dmDefault.d3ddm.Format) 
            {
                if (pdm->d3ddm.RefreshRate == g_dmDefault.d3ddm.RefreshRate ||
                    g_dmDefault.d3ddm.RefreshRate == 0) 
                {
                    return pdm;
                }
            }
        }
    }

    for (pdm = pdevd->pdmList; pdm; pdm = pdm->pdmNext) {

        if (pdm->d3ddm.Width == 640 && pdm->d3ddm.Height == 480 &&
            FormatToBitDepth(pdm->d3ddm.Format) == 16) 
        {
            return pdm;
        }
    }

    return pdevd->pdmList;
}

//******************************************************************************
//
// Function:
//
//     SelectVertexPipeline
//
// Description:
//
//     Select what form(s) of vertex processing to use in a device.
//
// Arguments:
//
//     D3DCAPS8* pd3dcaps       - Capabilities of the device to evaluate
//
// Return Value:
//
//     A vertex processing behavior flag to be used in the creation of the 
//     device.
//
//******************************************************************************
static DWORD SelectVertexPipeline(D3DCAPS8* pd3dcaps) {

#ifndef DEMO_HACK

    if (g_devdDefault.dwBehavior & D3DCREATE_MIXED_VERTEXPROCESSING &&
        pd3dcaps->DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT)
    {
        return g_devdDefault.dwBehavior;
    }
    else if (g_devdDefault.dwBehavior & D3DCREATE_HARDWARE_VERTEXPROCESSING &&
        pd3dcaps->DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT)
    {
        return g_devdDefault.dwBehavior;
    }
    else if (g_devdDefault.dwBehavior & D3DCREATE_PUREDEVICE &&
        pd3dcaps->DevCaps & D3DDEVCAPS_PUREDEVICE)
    {
        return g_devdDefault.dwBehavior | D3DCREATE_HARDWARE_VERTEXPROCESSING;
    }
    else if (g_devdDefault.dwBehavior == D3DCREATE_SOFTWARE_VERTEXPROCESSING) {
        return g_devdDefault.dwBehavior;
    }
    else if (pd3dcaps->DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT) {
        return D3DCREATE_HARDWARE_VERTEXPROCESSING;
    }
    else if (pd3dcaps->DevCaps & D3DDEVCAPS_PUREDEVICE) {
        return D3DCREATE_PUREDEVICE | D3DCREATE_HARDWARE_VERTEXPROCESSING;
    }
    else {
        return D3DCREATE_SOFTWARE_VERTEXPROCESSING;
    }

#else

    return D3DCREATE_HARDWARE_VERTEXPROCESSING;

#endif // DEMO_HACK
}

//******************************************************************************
//
// Function:
//
//     SelectPresentationInterval
//
// Description:
//
//     Select what presentation swap interval to use in a device.
//
// Arguments:
//
//     D3DCAPS8* pd3dcaps       - Capabilities of the device to evaluate
//
// Return Value:
//
//     A presentation interval value to be used in the creation or reset of the 
//     device when it is placed in full screen mode.
//
//******************************************************************************
static UINT SelectPresentationInterval(D3DCAPS8* pd3dcaps) {

    if (pd3dcaps->PresentationIntervals & g_devdDefault.uPresentInterval) {
        return g_devdDefault.uPresentInterval;
    }
    if (pd3dcaps->PresentationIntervals & D3DPRESENT_INTERVAL_ONE) {
        return D3DPRESENT_INTERVAL_ONE;
    }
    else if (pd3dcaps->PresentationIntervals & D3DPRESENT_INTERVAL_IMMEDIATE) {
        return D3DPRESENT_INTERVAL_IMMEDIATE;
    }
    else if (pd3dcaps->PresentationIntervals & D3DPRESENT_INTERVAL_TWO) {
        return D3DPRESENT_INTERVAL_TWO;
    }
    else if (pd3dcaps->PresentationIntervals & D3DPRESENT_INTERVAL_THREE) {
        return D3DPRESENT_INTERVAL_THREE;
    }
    else if (pd3dcaps->PresentationIntervals & D3DPRESENT_INTERVAL_FOUR) {
        return D3DPRESENT_INTERVAL_FOUR;
    }
    else {
        return D3DPRESENT_INTERVAL_IMMEDIATE;
    }
}

//******************************************************************************
//
// Function:
//
//     SelectDepthStencilFormat
//
// Description:
//
//     Select the default format of the depth/stencil buffer to be used for 
//     the given adapter, device, and display mode format.
//
// Arguments:
//
//     CDirect3D8* pDirect3D    - Pointer to the Direct3D object
//
//     UINT uAdapter            - Ordinal of the adapter
//
//     D3DDEVTYPE d3ddt         - Device type
//
//     D3DFORMAT d3dfmtMode     - Display mode format
//
// Return Value:
//
//     The depth buffer format to use for the given adapter, device, and 
//     display mode format.
//
//******************************************************************************
static D3DFORMAT SelectDepthStencilFormat(CDirect3D8* pDirect3D, 
                                UINT uAdapter, D3DDEVTYPE d3ddt, 
                                D3DFORMAT d3dfmtMode)
{
    HRESULT     hr;
    UINT        i;
    D3DFORMAT   d3dfmt[] = {
                    D3DFMT_D24S8,
#ifndef UNDER_XBOX
                    D3DFMT_D24X4S4,
                    D3DFMT_D15S1,
                    D3DFMT_D32,
                    D3DFMT_D24X8,
#else
                    D3DFMT_F24S8,
#endif // UNDER_XBOX
                    D3DFMT_D16_LOCKABLE,
                    D3DFMT_D16,
#ifdef UNDER_XBOX
                    D3DFMT_F16,
#endif // UNDER_XBOX
                };

    if (g_fmtdDefault != D3DFMT_UNKNOWN) {
        hr = pDirect3D->CheckDeviceFormat(uAdapter, d3ddt, d3dfmtMode, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, g_fmtdDefault);
        if (FAILED(hr)) {
            if (hr != D3DERR_NOTAVAILABLE) {
                ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceFormat"));
            }
        }
        else {
            hr = pDirect3D->CheckDepthStencilMatch(uAdapter, d3ddt, d3dfmtMode, d3dfmtMode, g_fmtdDefault);
            if (FAILED(hr)) {
                if (hr != D3DERR_NOTAVAILABLE) {
                    ResultFailed(hr, TEXT("IDirect3D8::CheckDepthStencilMatch"));
                }
            }
            else {
                return g_fmtdDefault;
            }
        }
    }

    for (i = 0; i < 7; i++) {
        hr = pDirect3D->CheckDeviceFormat(uAdapter, d3ddt, d3dfmtMode, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, d3dfmt[i]);
        if (FAILED(hr)) {
            if (hr != D3DERR_NOTAVAILABLE) {
                ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceFormat"));
            }
        }
        else {
            hr = pDirect3D->CheckDepthStencilMatch(uAdapter, d3ddt, d3dfmtMode, d3dfmtMode, d3dfmt[i]);
            if (FAILED(hr)) {
                if (hr != D3DERR_NOTAVAILABLE) {
                    ResultFailed(hr, TEXT("IDirect3D8::CheckDepthStencilMatch"));
                }
            }
            else {
                return d3dfmt[i];
            }
        }
    }

    return D3DFMT_UNKNOWN;
}

//******************************************************************************
//
// Function:
//
//     SelectMultiSampleType
//
// Description:
//
//     Select the default multi-sample type for the given adapter, device,
//     display mode format, and windowed mode.
//
// Arguments:
//
//     CDirect3D8 pDirect3D     - Pointer to the Direct3D object
//
//     UINT uAdapter            - Ordinal of the adapter
//
//     D3DDEVTYPE d3ddt         - Device type
//
//     D3DFORMAT d3dfmtMode     - Display mode format
//
//     BOOL bWindowed           - Windowed mode
//
// Return Value:
//
//     The multi-sample type to use for the given adapter, device, display mode
//     format, and windowed mode.
//
//******************************************************************************
static D3DMULTISAMPLE_TYPE SelectMultiSampleType(CDirect3D8* pDirect3D, 
                                UINT uAdapter, D3DDEVTYPE d3ddt, 
                                D3DFORMAT d3dfmtMode, BOOL bWindowed)
{
    UINT                    i;
    HRESULT                 hr;
    D3DMULTISAMPLE_TYPE     mst[] = {
#ifndef UNDER_XBOX
                                D3DMULTISAMPLE_4_SAMPLES,
                                D3DMULTISAMPLE_2_SAMPLES,
                                D3DMULTISAMPLE_9_SAMPLES,
                                D3DMULTISAMPLE_12_SAMPLES,
                                D3DMULTISAMPLE_16_SAMPLES,
                                D3DMULTISAMPLE_3_SAMPLES,
                                D3DMULTISAMPLE_5_SAMPLES,
                                D3DMULTISAMPLE_6_SAMPLES,
                                D3DMULTISAMPLE_7_SAMPLES,
                                D3DMULTISAMPLE_8_SAMPLES,
                                D3DMULTISAMPLE_10_SAMPLES,
                                D3DMULTISAMPLE_11_SAMPLES,
                                D3DMULTISAMPLE_13_SAMPLES,
                                D3DMULTISAMPLE_14_SAMPLES,
                                D3DMULTISAMPLE_15_SAMPLES,
                                D3DMULTISAMPLE_NONE
#else
                                D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR,
                                D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_GAUSSIAN,
                                D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX,
                                D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR,
                                D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR,
                                D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR,
                                D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_LINEAR,
                                D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_GAUSSIAN,
                                D3DMULTISAMPLE_9_SAMPLES_MULTISAMPLE_GAUSSIAN,
                                D3DMULTISAMPLE_9_SAMPLES_SUPERSAMPLE_GAUSSIAN,
                                D3DMULTISAMPLE_NONE
#endif // UNDER_XBOX
    };

#ifdef DEMO_HACK
    return g_mstDefault;
#endif

    hr = pDirect3D->CheckDeviceMultiSampleType(uAdapter, d3ddt, d3dfmtMode, bWindowed, g_mstDefault);
    if (FAILED(hr)) {
        if (hr != D3DERR_NOTAVAILABLE) {
            ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceMultiSampleTypes"));
        }
    }
    else {
        return g_mstDefault;
    }

    for (i = 0; i < countof(mst); i++) {

        hr = pDirect3D->CheckDeviceMultiSampleType(uAdapter, d3ddt, d3dfmtMode, bWindowed, mst[i]);
        if (FAILED(hr)) {
            if (hr != D3DERR_NOTAVAILABLE) {
                ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceMultiSampleTypes"));
            }
        }
        else {
            return mst[i];
        }
    }

    return D3DMULTISAMPLE_NONE;
}

//******************************************************************************
//
// Function:
//
//     FormatToBitDepth
//
// Description:
//
//     Convert the given format to the number of bits needed to represent it.
//
// Arguments:
//
//     D3DFORMAT d3dfmt         - Resource format
//
// Return Value:
//
//     The number of bits required to represent the given format in memory.
//
//******************************************************************************
DWORD FormatToBitDepth(D3DFORMAT d3dfmt) {

    switch (d3dfmt) {
        case D3DFMT_DXT1:
            return 4;
        case D3DFMT_R3G3B2:
        case D3DFMT_A8:
        case D3DFMT_P8:
        case D3DFMT_L8:
        case D3DFMT_A4L4:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A8:
        case D3DFMT_LIN_L8:
        case D3DFMT_LIN_AL8:
#endif // UNDER_XBOX
        case D3DFMT_DXT2:
        case D3DFMT_DXT4:
#ifndef UNDER_XBOX
        case D3DFMT_DXT3:
        case D3DFMT_DXT5:
#endif // !UNDER_XBOX
            return 8;
        case D3DFMT_R5G6B5:
        case D3DFMT_X1R5G5B5:
        case D3DFMT_A1R5G5B5:
        case D3DFMT_A4R4G4B4:
        case D3DFMT_A8R3G3B2:
        case D3DFMT_X4R4G4B4:
        case D3DFMT_A8P8:
        case D3DFMT_A8L8:
        case D3DFMT_V8U8:
        case D3DFMT_L6V5U5:
#ifndef UNDER_XBOX
        case D3DFMT_D16_LOCKABLE:
#endif // !UNDER_XBOX
        case D3DFMT_D16:
        case D3DFMT_D15S1:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A1R5G5B5:
        case D3DFMT_LIN_A4R4G4B4:
        case D3DFMT_LIN_G8B8:
        case D3DFMT_LIN_R4G4B4A4:
        case D3DFMT_LIN_R5G5B5A1:
        case D3DFMT_LIN_R5G6B5:
        case D3DFMT_LIN_R6G5B5:
        case D3DFMT_LIN_R8B8:
        case D3DFMT_LIN_X1R5G5B5:
        case D3DFMT_LIN_A8L8:
        case D3DFMT_LIN_L16:
        case D3DFMT_LIN_D16:
        case D3DFMT_LIN_F16:
#endif // UNDER_XBOX
            return 16;
        case D3DFMT_R8G8B8:
            return 24;
        case D3DFMT_A8R8G8B8:
        case D3DFMT_X8R8G8B8:
#ifndef UNDER_XBOX
        case D3DFMT_X8L8V8U8:
#endif // !UNDER_XBOX
        case D3DFMT_Q8W8V8U8:
        case D3DFMT_V16U16:
        case D3DFMT_W11V11U10:
        case D3DFMT_D32:
        case D3DFMT_D24S8:
#ifndef UNDER_XBOX
        case D3DFMT_D24X8:
#endif // !UNDER_XBOX
        case D3DFMT_D24X4S4:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A8B8G8R8:
        case D3DFMT_LIN_A8R8G8B8:
        case D3DFMT_LIN_B8G8R8A8:
        case D3DFMT_LIN_R8G8B8A8:
        case D3DFMT_LIN_X8R8G8B8:
        case D3DFMT_LIN_D24S8:
        case D3DFMT_LIN_F24S8:
#endif // UNDER_XBOX
            return 32;
        default:
            return 0;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\enum.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    enum.h

Author:

    Matt Bronder

Description:

    Direct3D enumeration routines.

*******************************************************************************/

#ifndef __ENUM_H__
#define __ENUM_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

//******************************************************************************
// Macros
//******************************************************************************

#define ANTIALIAS_SUPPORTED(pdevd, pdm, bWindowed) \
    ((bWindowed && pdevd->d3dmstWindowed != D3DMULTISAMPLE_NONE) || \
    (!bWindowed && pdm->d3dmst != D3DMULTISAMPLE_NONE))

//******************************************************************************
// Data types
//******************************************************************************

typedef BOOL (* CHECKDISPLAYPROC)(CDirect3D8*, D3DCAPS8*, D3DDISPLAYMODE*);

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
// Description of a display mode
typedef struct _DISPLAYMODE {
    D3DDISPLAYMODE              d3ddm;
    D3DFORMAT                   fmtd;
    D3DMULTISAMPLE_TYPE         d3dmst;
    struct _DISPLAYMODE*        pdmNext;
} DISPLAYMODE, *PDISPLAYMODE;

//******************************************************************************
// Description of a device
typedef struct _DEVICEDESC {
    D3DDEVTYPE                  d3ddt;
    D3DCAPS8                    d3dcaps;
    DWORD                       dwBehavior;
    UINT                        uPresentInterval;
    BOOL                        bCanRenderWindowed;
    D3DFORMAT                   fmtdWindowed;
    D3DMULTISAMPLE_TYPE         d3dmstWindowed;
    PDISPLAYMODE                pdmList;
    struct _DEVICEDESC*         pdevdNext;
} DEVICEDESC, *PDEVICEDESC;

//******************************************************************************
// Description of an adapter
typedef struct _ADAPTERDESC {
    UINT                        uAdapter;
    D3DADAPTER_IDENTIFIER8      d3dai;
    D3DDISPLAYMODE              d3ddmWindowed;
    PDEVICEDESC                 pdevdList;
    struct _ADAPTERDESC*        padpdNext;
} ADAPTERDESC, *PADAPTERDESC;

//******************************************************************************
// Globals
//******************************************************************************

extern ADAPTERDESC              g_adpdDefault;
extern DEVICEDESC               g_devdDefault;
extern DISPLAYMODE              g_dmDefault;
extern D3DFORMAT                g_fmtdDefault;
extern D3DMULTISAMPLE_TYPE      g_mstDefault;

//******************************************************************************
// Function prototypes
//******************************************************************************

PADAPTERDESC        EnumDisplays(CDirect3D8* pd3d);

PADAPTERDESC        SelectAdapter(PADAPTERDESC padpdList);
PDEVICEDESC         SelectDevice(PADAPTERDESC padpd);
PDISPLAYMODE        SelectDisplayMode(PDEVICEDESC pdevd);

DWORD               FormatToBitDepth(D3DFORMAT d3dfmt);

void                InitCheckDisplayProc(CHECKDISPLAYPROC pfnValidate);

#endif //__ENUM_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\fontmap.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    fontmap.cpp

Author:

    Matt Bronder

Description:

    Functions for creating and indexing into a font texture.

*******************************************************************************/

#include "d3dlocus.h"
#include "fontmap.h"

//******************************************************************************
// Globals
//******************************************************************************

CTexture8*                  g_pd3dtFontMap = NULL;
TCOORD2                     g_ptcFont[96];

static BYTE                 g_bFontPixels[120][12] = {

    {0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x18, 0x66, 0x36, 0x3C, 0xD8, 0x38, 0x18, 0x0C, 0x30, 0x00, 0x00},
    {0x00, 0x3C, 0x66, 0x36, 0x66, 0xDA, 0x6C, 0x18, 0x18, 0x18, 0x00, 0x00},
    {0x00, 0x3C, 0x66, 0x7F, 0x60, 0x76, 0x6C, 0x18, 0x18, 0x18, 0x36, 0x18},
    {0x00, 0x3C, 0x00, 0x36, 0x30, 0x0C, 0x38, 0x00, 0x30, 0x0C, 0x1C, 0x18},
    {0x00, 0x18, 0x00, 0x36, 0x18, 0x18, 0x60, 0x00, 0x30, 0x0C, 0x7F, 0x7E},
    {0x00, 0x18, 0x00, 0x36, 0x0C, 0x30, 0x6F, 0x00, 0x30, 0x0C, 0x1C, 0x18},
    {0x00, 0x00, 0x00, 0x7F, 0x06, 0x6E, 0x66, 0x00, 0x30, 0x0C, 0x36, 0x18},
    {0x00, 0x18, 0x00, 0x36, 0x66, 0x5B, 0x66, 0x00, 0x30, 0x0C, 0x00, 0x00},
    {0x00, 0x18, 0x00, 0x36, 0x3C, 0x1B, 0x3B, 0x00, 0x18, 0x18, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x18, 0x0E, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x06, 0x1E, 0x0C, 0x3C, 0x3C, 0x30, 0x7E, 0x1C, 0x7E},
    {0x00, 0x00, 0x00, 0x06, 0x33, 0x1C, 0x66, 0x66, 0x30, 0x60, 0x18, 0x06},
    {0x00, 0x00, 0x00, 0x0C, 0x37, 0x7C, 0x66, 0x66, 0x36, 0x60, 0x30, 0x0C},
    {0x00, 0x00, 0x00, 0x0C, 0x37, 0x0C, 0x06, 0x06, 0x36, 0x60, 0x7C, 0x0C},
    {0x00, 0x7E, 0x00, 0x18, 0x33, 0x0C, 0x0C, 0x1C, 0x36, 0x7C, 0x66, 0x18},
    {0x00, 0x00, 0x00, 0x18, 0x3B, 0x0C, 0x18, 0x06, 0x66, 0x06, 0x66, 0x18},
    {0x00, 0x00, 0x00, 0x30, 0x3B, 0x0C, 0x30, 0x66, 0x7F, 0x06, 0x66, 0x30},
    {0x1C, 0x00, 0x1C, 0x30, 0x33, 0x0C, 0x60, 0x66, 0x06, 0x0C, 0x66, 0x30},
    {0x1C, 0x00, 0x1C, 0x60, 0x1E, 0x0C, 0x7E, 0x3C, 0x06, 0x78, 0x3C, 0x30},
    {0x0C, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x3C, 0x3C, 0x00, 0x00, 0x06, 0x00, 0x60, 0x3C, 0x7E, 0x18, 0x7C, 0x3C},
    {0x66, 0x66, 0x00, 0x00, 0x0C, 0x00, 0x30, 0x66, 0xC3, 0x3C, 0x66, 0x66},
    {0x66, 0x66, 0x1C, 0x1C, 0x18, 0x00, 0x18, 0x66, 0xC3, 0x66, 0x66, 0x66},
    {0x76, 0x66, 0x1C, 0x1C, 0x30, 0x7E, 0x0C, 0x0C, 0xCF, 0x66, 0x66, 0x60},
    {0x3C, 0x66, 0x00, 0x00, 0x60, 0x00, 0x06, 0x18, 0xDB, 0x66, 0x7C, 0x60},
    {0x6E, 0x3E, 0x00, 0x00, 0x30, 0x7E, 0x0C, 0x18, 0xDB, 0x7E, 0x66, 0x60},
    {0x66, 0x0C, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0xCF, 0x66, 0x66, 0x66},
    {0x66, 0x18, 0x1C, 0x1C, 0x0C, 0x00, 0x30, 0x18, 0xC0, 0x66, 0x66, 0x66},
    {0x3C, 0x38, 0x1C, 0x1C, 0x06, 0x00, 0x60, 0x18, 0x7F, 0x66, 0x7C, 0x3C},
    {0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x78, 0x7E, 0x7E, 0x3C, 0x66, 0x3C, 0x06, 0x66, 0x60, 0x63, 0x63, 0x3C},
    {0x6C, 0x60, 0x60, 0x66, 0x66, 0x18, 0x06, 0x66, 0x60, 0x63, 0x63, 0x66},
    {0x66, 0x60, 0x60, 0x66, 0x66, 0x18, 0x06, 0x6C, 0x60, 0x77, 0x73, 0x66},
    {0x66, 0x60, 0x60, 0x60, 0x66, 0x18, 0x06, 0x6C, 0x60, 0x6B, 0x7B, 0x66},
    {0x66, 0x7C, 0x7C, 0x60, 0x7E, 0x18, 0x06, 0x78, 0x60, 0x6B, 0x6F, 0x66},
    {0x66, 0x60, 0x60, 0x6E, 0x66, 0x18, 0x06, 0x6C, 0x60, 0x6B, 0x67, 0x66},
    {0x66, 0x60, 0x60, 0x66, 0x66, 0x18, 0x66, 0x6C, 0x60, 0x63, 0x63, 0x66},
    {0x6C, 0x60, 0x60, 0x66, 0x66, 0x18, 0x66, 0x66, 0x60, 0x63, 0x63, 0x66},
    {0x78, 0x7E, 0x60, 0x3E, 0x66, 0x3C, 0x3C, 0x66, 0x7E, 0x63, 0x63, 0x3C},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x7C, 0x3C, 0x7C, 0x3C, 0x7E, 0x66, 0x66, 0x63, 0x66, 0x66, 0x7E, 0x3C},
    {0x66, 0x66, 0x66, 0x66, 0x18, 0x66, 0x66, 0x63, 0x66, 0x66, 0x06, 0x30},
    {0x66, 0x66, 0x66, 0x60, 0x18, 0x66, 0x66, 0x63, 0x34, 0x66, 0x06, 0x30},
    {0x66, 0x66, 0x66, 0x30, 0x18, 0x66, 0x66, 0x6B, 0x18, 0x66, 0x0C, 0x30},
    {0x7C, 0x66, 0x7C, 0x18, 0x18, 0x66, 0x66, 0x6B, 0x18, 0x3C, 0x18, 0x30},
    {0x60, 0x66, 0x6C, 0x0C, 0x18, 0x66, 0x66, 0x6B, 0x2C, 0x18, 0x30, 0x30},
    {0x60, 0x66, 0x66, 0x06, 0x18, 0x66, 0x66, 0x36, 0x66, 0x18, 0x60, 0x30},
    {0x60, 0x66, 0x66, 0x66, 0x18, 0x66, 0x3C, 0x36, 0x66, 0x18, 0x60, 0x30},
    {0x60, 0x3C, 0x66, 0x3C, 0x18, 0x3C, 0x18, 0x36, 0x66, 0x18, 0x7E, 0x30},
    {0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30},
    {0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x18, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x3C, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x60, 0x3C, 0x66, 0x00, 0x0C, 0x00, 0x60, 0x00, 0x06, 0x00, 0x1E, 0x00},
    {0x60, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x06, 0x00, 0x30, 0x00},
    {0x30, 0x0C, 0x00, 0x00, 0x00, 0x3C, 0x7C, 0x3C, 0x3E, 0x3C, 0x30, 0x3E},
    {0x30, 0x0C, 0x00, 0x00, 0x00, 0x06, 0x66, 0x66, 0x66, 0x66, 0x30, 0x66},
    {0x18, 0x0C, 0x00, 0x00, 0x00, 0x06, 0x66, 0x60, 0x66, 0x66, 0x7E, 0x66},
    {0x18, 0x0C, 0x00, 0x00, 0x00, 0x3E, 0x66, 0x60, 0x66, 0x7E, 0x30, 0x66},
    {0x0C, 0x0C, 0x00, 0x00, 0x00, 0x66, 0x66, 0x60, 0x66, 0x60, 0x30, 0x66},
    {0x0C, 0x0C, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x60, 0x30, 0x66},
    {0x06, 0x0C, 0x00, 0x00, 0x00, 0x3E, 0x7C, 0x3C, 0x3E, 0x3C, 0x30, 0x3E},
    {0x06, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06},
    {0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06},
    {0x00, 0x3C, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x60, 0x18, 0x0C, 0x60, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x60, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x7C, 0x78, 0x3C, 0x66, 0x18, 0x7E, 0x7C, 0x3C, 0x7C, 0x3E, 0x66, 0x3E},
    {0x66, 0x18, 0x0C, 0x66, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x6E, 0x60},
    {0x66, 0x18, 0x0C, 0x6C, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x70, 0x60},
    {0x66, 0x18, 0x0C, 0x78, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x60, 0x3C},
    {0x66, 0x18, 0x0C, 0x6C, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x60, 0x06},
    {0x66, 0x18, 0x0C, 0x66, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x60, 0x06},
    {0x66, 0x7E, 0x0C, 0x66, 0x7E, 0x63, 0x66, 0x3C, 0x7C, 0x3E, 0x60, 0x7C},
    {0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00},
    {0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00},
    {0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x30, 0x71, 0x7E},
    {0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xDB, 0x7E},
    {0x7E, 0x66, 0x66, 0x63, 0x66, 0x66, 0x7E, 0x18, 0x18, 0x18, 0x8E, 0x7E},
    {0x30, 0x66, 0x66, 0x6B, 0x66, 0x66, 0x06, 0x18, 0x18, 0x18, 0x00, 0x7E},
    {0x30, 0x66, 0x66, 0x6B, 0x3C, 0x66, 0x0C, 0x30, 0x18, 0x0C, 0x00, 0x7E},
    {0x30, 0x66, 0x66, 0x6B, 0x18, 0x66, 0x18, 0x60, 0x18, 0x06, 0x00, 0x7E},
    {0x30, 0x66, 0x66, 0x6B, 0x3C, 0x66, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x7E},
    {0x30, 0x66, 0x3C, 0x36, 0x66, 0x66, 0x60, 0x18, 0x18, 0x18, 0x00, 0x7E},
    {0x1E, 0x3E, 0x18, 0x36, 0x66, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x00, 0x7E},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x0C, 0x18, 0x30, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
};

//******************************************************************************
//
// Function:
//
//     CreateFontMap
//
// Description:
//
//     Create a texture and populate it with font information to be used to
//     output text.  Build a texture coordinate table containing the positions
//     of characters in the font map.
//
// Arguments:
//
//     CDevice8*                - Pointer to the device object
//
//     D3DFORMAT fmt            - Format of the texture
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateFontMap(CDevice8* pDevice, D3DFORMAT fmt) {

    D3DLOCKED_RECT  d3dlr;
    UINT            i, j;
    float           fU, fV;
    HRESULT         hr;
#ifdef UNDER_XBOX
    Swizzler        swz(128, 128, 1);
#endif

    if (!pDevice) {
        return FALSE;
    }

    if (!fmt) {
        fmt = D3DFMT_A4R4G4B4;
    }

    // Verify the current device supports the given format
    hr = CheckCurrentDeviceFormat(pDevice, 0, D3DRTYPE_TEXTURE, fmt);
    if (FAILED(hr)) {
        if (hr != D3DERR_NOTAVAILABLE) {
            ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceFormats"));
        }
        return FALSE;
    }

    // Create the text map texture
    hr = pDevice->CreateTexture(128, 128, 1, 0, 
                                    fmt, POOL_DEFAULT, &g_pd3dtFontMap);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DDevice8::CreateMipMap"));
        return FALSE;
    }

    // Lock the texture
    hr = g_pd3dtFontMap->LockRect(0, &d3dlr, NULL, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DMipMap8::LockRect"));
        ReleaseFontMap();
        return FALSE;
    }

#ifdef UNDER_XBOX
    swz.SetU(0);
    swz.SetV(0);
#endif

    if (FormatToBitDepth(fmt) == 16) {

        WORD    wBlack = 0;
        WORD    wWhite = 0xFFFF;
        LPWORD  pwPixel;
        DWORD   dwPitch;
        UINT    i, j;

        pwPixel = (LPWORD)d3dlr.pBits;

        dwPitch = d3dlr.Pitch >> 1;

#ifdef UNDER_XBOX
        if (!XGIsSwizzledFormat(fmt)) {
#endif

            for (i = 0; i < 128; i++) {

                for (j = 0; j < 128; j++) {

                    if (i < 120 && j < 96 && 
                        (g_bFontPixels[i][j/8] & (0x1 << (7-j%8))))
                    {
                        pwPixel[j] = wWhite;
                    }
                    else {
                        pwPixel[j] = wBlack;
                    }
                }

                pwPixel += dwPitch;
            }

#ifdef UNDER_XBOX

        }
        else {

            for (i = 0; i < 128; i++, swz.IncV()) {

                for (j = 0; j < 128; j++, swz.IncU()) {

                    if (i < 120 && j < 96 && 
                        (g_bFontPixels[i][j/8] & (0x1 << (7-j%8))))
                    {
                        pwPixel[swz.Get2D()] = wWhite;
                    }
                    else {
                        pwPixel[swz.Get2D()] = wBlack;
                    }
                }
            }
        }
#endif

    }

    else if (FormatToBitDepth(fmt) == 32) {

        DWORD   dwBlack = 0;
        DWORD   dwWhite = 0xFFFFFFFF;
        LPDWORD pdwPixel;
        DWORD   dwPitch;
        UINT    i, j;

        pdwPixel = (LPDWORD)d3dlr.pBits;

        dwPitch = d3dlr.Pitch >> 2;

#ifdef UNDER_XBOX
        if (!XGIsSwizzledFormat(fmt)) {
#endif

            for (i = 0; i < 128; i++) {

                for (j = 0; j < 128; j++) {

                    if (i < 120 && j < 96 && 
                        (g_bFontPixels[i][j/8] & (0x1 << (7-j%8))))
                    {
                        pdwPixel[j] = dwWhite;
                    }
                    else {
                        pdwPixel[j] = dwBlack;
                    }
                }

                pdwPixel += dwPitch;
            }

#ifdef UNDER_XBOX

        }
        else {

            for (i = 0; i < 128; i++, swz.IncV()) {

                for (j = 0; j < 128; j++, swz.IncU()) {

                    if (i < 120 && j < 96 && 
                        (g_bFontPixels[i][j/8] & (0x1 << (7-j%8))))
                    {
                        pdwPixel[swz.Get2D()] = dwWhite;
                    }
                    else {
                        pdwPixel[swz.Get2D()] = dwBlack;
                    }
                }
            }
        }
#endif

    }

    else {

        return FALSE;
    }

    // Unlock the texture
    hr = g_pd3dtFontMap->UnlockRect(0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DMipMap8::UnlockRect"));
        ReleaseFontMap();
        return FALSE;
    }

#ifdef DEMO_HACK
    g_pd3dtFontMap->GetIDirect3DTexture8()->MoveResourceMemory(D3DMEM_VIDEO);
#endif // DEMO_HACK

    // Build the texture coordinate table
    for (i = 0, fV = 0.0f; i < 8; i++, fV += FONT_TCOORD_HEIGHT) {

        for (j = 0, fU = 0.0f; j < 12; j++, fU += FONT_TCOORD_WIDTH) {

            g_ptcFont[i*12+j].u = fU + 0.00390625f; // add a half texel bias
            g_ptcFont[i*12+j].v = fV - 0.00390625f; // add a half texel bias
        }
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseFontMap
//
// Description:
//
//     Release the font texture map.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseFontMap() {

    if (g_pd3dtFontMap) {
        g_pd3dtFontMap->Release();
        g_pd3dtFontMap = NULL;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\fontmap.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    fontmap.h

Author:

    Matt Bronder

Description:

    Functions for creating and indexing into a font texture.

*******************************************************************************/

#ifndef __FONTMAP_H__
#define __FONTMAP_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FONT_TCOORD_WIDTH   0.0625f
#define FONT_TCOORD_HEIGHT  0.1171875f

//******************************************************************************
// Macros
//******************************************************************************

#define CHAR_TO_TCOORD(c)  (&g_ptcFont[(c < ' ' || c > '~') ? (' ') : (c - ' ')])

//******************************************************************************
// Globals
//******************************************************************************

extern CTexture8*           g_pd3dtFontMap;
extern TCOORD2              g_ptcFont[96];

//******************************************************************************
// Function prototypes
//******************************************************************************

BOOL                        CreateFontMap(CDevice8* pDevice, D3DFORMAT fmt = D3DFMT_A1R5G5B5);
void                        ReleaseFontMap();

#endif //__FONTMAP_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\indxbuff.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    indxbuff.h

Description:

    IDirect3DIndexBuffer classes.

*******************************************************************************/

#ifndef __INDXBUFF_H__
#define __INDXBUFF_H__

//******************************************************************************
// CIndexBuffer
//******************************************************************************

//******************************************************************************
class CIndexBuffer : public CResource {

protected:

public:

                        CIndexBuffer();
                        ~CIndexBuffer();
};

//******************************************************************************
class CIndexBuffer8 : public CResource8 {

protected:

    LPDIRECT3DINDEXBUFFER8 m_pd3di;

public:

                        CIndexBuffer8();
                        ~CIndexBuffer8();
    virtual BOOL        Create(CDevice8* pDevice, LPDIRECT3DINDEXBUFFER8 pd3di);

    virtual LPDIRECT3DINDEXBUFFER8 GetIDirect3DIndexBuffer8();

    // Information

    virtual HRESULT     GetDesc(D3DINDEXBUFFER_DESC* pd3dibd);

    // Locking

    virtual HRESULT     Lock(UINT uOffsetToLock, UINT uSizeToLock, BYTE** ppdata, DWORD dwFlags);
    virtual HRESULT     Unlock();
};

//******************************************************************************
class CCIndexBuffer8 : public CIndexBuffer8 {

protected:

    CClient*            m_pClient;

    ILOCKDESC           m_ilockd;

public:

                        CCIndexBuffer8();
                        ~CCIndexBuffer8();
    virtual BOOL        Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DINDEXBUFFER8 pd3di);

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Resource information

    virtual 
    D3DRESOURCETYPE     GetType();
    virtual HRESULT     GetDevice(CDevice8** ppDevice);

    // Resource private surface data

    virtual HRESULT     GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData);
    virtual HRESULT     SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags);
    virtual HRESULT     FreePrivateData(REFGUID refguid);

    // Resource management

    virtual DWORD       GetPriority();
    virtual DWORD       SetPriority(DWORD dwNewPriority);
    virtual void        PreLoad();

    // Information

    virtual HRESULT     GetDesc(D3DINDEXBUFFER_DESC* pd3dibd);

    // Locking

    virtual HRESULT     Lock(UINT uOffsetToLock, UINT uSizeToLock, BYTE** ppdata, DWORD dwFlags);
    virtual HRESULT     Unlock();
};

#endif // __INDXBUFF_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\input.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    input.h

Author:

    Matt Bronder

Description:

    DirectInput initialization routines.

*******************************************************************************/

#ifndef __INPUT_H__
#define __INPUT_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define NUM_JOYSTICK_BUTTONS     17

#define JOYBUTTON_X              0  // Analog
#define JOYBUTTON_Y              1  // Analog
#define JOYBUTTON_WHITE          2  // Analog
#define JOYBUTTON_A              3  // Analog
#define JOYBUTTON_B              4  // Analog
#define JOYBUTTON_BLACK          5  // Analog
#define JOYBUTTON_LTRIG          6  // Analog
#define JOYBUTTON_RTRIG          7  // Analog
#define JOYBUTTON_LSTICK         9  // Digital
#define JOYBUTTON_RSTICK         10 // Digital
#define JOYBUTTON_UP             11 // Digital
#define JOYBUTTON_DOWN           12 // Digital
#define JOYBUTTON_LEFT           13 // Digital
#define JOYBUTTON_RIGHT          14 // Digital
#define JOYBUTTON_BACK           15 // Digital
#define JOYBUTTON_START          16 // Digital

//******************************************************************************
// Macros
//******************************************************************************

#define BUTTON_PRESSED(joystate, button) \
                                (joystate.buttons[button] & 0x80)

#define BUTTON_CHANGED(joycurrent, joylast, button) \
                                ((joycurrent.buttons[button] & 0x80) != (joylast.buttons[button] & 0x80))

//******************************************************************************
// Data types
//******************************************************************************

typedef struct _JOYSTATE {
    float                       f1X; // Analog joystick 1 (left joystick)
    float                       f1Y;
    float                       f2X; // Analog joystick 2 (right joystick)
    float                       f2Y;
    BYTE                        buttons[NUM_JOYSTICK_BUTTONS];
} JOYSTATE, *PJOYSTATE;

//******************************************************************************
// Function prototypes
//******************************************************************************

BOOL                            CreateInput(HWND hWnd);
void                            ReleaseInput(void);
BOOL                            GetJoystickState(PJOYSTATE pjs);

#endif //__INPUT_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\indxbuff.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    indxbuff.cpp

Author:

    Matt Bronder

Description:

    CIndexBuffer methods.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// CIndexBuffer
//******************************************************************************

//******************************************************************************
CIndexBuffer::CIndexBuffer() {
}

//******************************************************************************
CIndexBuffer::~CIndexBuffer() {
}

//******************************************************************************
// CIndexBuffer8
//******************************************************************************

//******************************************************************************
CIndexBuffer8::CIndexBuffer8() {

    m_pd3di = NULL;
}

//******************************************************************************
CIndexBuffer8::~CIndexBuffer8() {
}

//******************************************************************************
BOOL CIndexBuffer8::Create(CDevice8* pDevice, LPDIRECT3DINDEXBUFFER8 pd3di) {

    if (m_pd3di) {
        return FALSE;
    }

    if (pDevice && pd3di) {

        if (CResource8::Create(pDevice, (LPDIRECT3DRESOURCE8)pd3di)) {
            m_pd3di = pd3di;
        }
    }

    return (BOOL)m_pd3di;
}

//******************************************************************************
LPDIRECT3DINDEXBUFFER8 CIndexBuffer8::GetIDirect3DIndexBuffer8() {

    return m_pd3di;
}

//******************************************************************************
HRESULT CIndexBuffer8::GetDesc(D3DINDEXBUFFER_DESC* pd3dibd) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3di) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3di->GetDesc(pd3dibd);
}

//******************************************************************************
HRESULT CIndexBuffer8::Lock(UINT uOffsetToLock, UINT uSizeToLock, BYTE** ppdata, DWORD dwFlags) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3di) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3di->Lock(uOffsetToLock, uSizeToLock, ppdata, dwFlags);
}

//******************************************************************************
HRESULT CIndexBuffer8::Unlock() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3di) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3di->Unlock();
}

//******************************************************************************
// CCIndexBuffer8
//******************************************************************************

//******************************************************************************
CCIndexBuffer8::CCIndexBuffer8() {
}

//******************************************************************************
CCIndexBuffer8::~CCIndexBuffer8() {
}

//******************************************************************************
BOOL CCIndexBuffer8::Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DINDEXBUFFER8 pd3di) {

    if (!pClient) {
        return FALSE;
    }
    m_pClient = pClient;
    return CIndexBuffer8::Create(pDevice, pd3di);
}

//******************************************************************************
ULONG CCIndexBuffer8::AddRef() {

    return CCResource8_AddRef(this, m_pClient);
}

//******************************************************************************
ULONG CCIndexBuffer8::Release() {

    return CCResource8_Release(this, m_pClient);
}

//******************************************************************************
D3DRESOURCETYPE CCIndexBuffer8::GetType() {

    return CCResource8_GetType(this, m_pClient);
}

//******************************************************************************
HRESULT CCIndexBuffer8::GetDevice(CDevice8** ppDevice) {

    return CCResource8_GetDevice(this, m_pClient, ppDevice);
}

//******************************************************************************
HRESULT CCIndexBuffer8::GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData) {

    return CCResource8_GetPrivateData(this, m_pClient, refguid, pvData, pdwSizeOfData);
}

//******************************************************************************
HRESULT CCIndexBuffer8::SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags) {

    return CCResource8_SetPrivateData(this, m_pClient, refguid, pvData, dwSizeOfData, dwFlags);
}

//******************************************************************************
HRESULT CCIndexBuffer8::FreePrivateData(REFGUID refguid) {

    return CCResource8_FreePrivateData(this, m_pClient, refguid);
}

//******************************************************************************
DWORD CCIndexBuffer8::GetPriority() {

    return CCResource8_GetPriority(this, m_pClient);
}

//******************************************************************************
DWORD CCIndexBuffer8::SetPriority(DWORD dwNewPriority) {

    return CCResource8_SetPriority(this, m_pClient, dwNewPriority);
}

//******************************************************************************
void CCIndexBuffer8::PreLoad() {

    CCResource8_PreLoad(this, m_pClient);
}

//******************************************************************************
HRESULT CCIndexBuffer8::GetDesc(D3DINDEXBUFFER_DESC* pd3dibd) {

#ifndef UNDER_XBOX
    D3DINDEXBUFFER_DESC         d3dibd;
#else
    WINX_D3DINDEXBUFFER_DESC    d3dibd;
#endif // UNDER_XBOX
    HRESULT                     hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3di) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3di->GetDesc(pd3dibd);

#ifndef UNDER_XBOX
    if (m_pClient->CallMethod(MID_IXB8_GetDesc, this, &hrS, &d3dibd, sizeof(D3DINDEXBUFFER_DESC))) {
#else
    if (m_pClient->CallMethod(MID_IXB8_GetDesc, this, &hrS, &d3dibd, sizeof(WINX_D3DINDEXBUFFER_DESC))) {
#endif // UNDER_XBOX
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DIndexBuffer8::GetDesc result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else {
#ifndef UNDER_XBOX
            if (memcmp(pd3dibd, &d3dibd, sizeof(D3DINDEXBUFFER_DESC))) {
#else
            if (pd3dibd->Format != d3dibd.Format || pd3dibd->Type != d3dibd.Format) {
#endif // UNDER_XBOX
                Log(LOG_WARN, TEXT("IDirect3DIndexBuffer8::GetDesc returned an inconsistent description"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCIndexBuffer8::Lock(UINT uOffsetToLock, UINT uSizeToLock, BYTE** ppdata, DWORD dwFlags) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3di) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3di->Lock(uOffsetToLock, uSizeToLock, ppdata, dwFlags);

    if (dwFlags & D3DLOCK_READONLY) {
        m_ilockd.pData = NULL;
        m_ilockd.uSize = 0;
    }
    else {
        m_ilockd.pData = *ppdata;
        if (uSizeToLock) {
            m_ilockd.uSize = uSizeToLock;
        }
        else {
#ifndef UNDER_XBOX
            D3DINDEXBUFFER_DESC d3dibd;
            m_pd3di->GetDesc(&d3dibd);
#else
            WINX_D3DINDEXBUFFER_DESC d3dibd;
            if (!m_pClient->CallMethod(MID_IXB8_GetDesc, this, &hrS, &d3dibd, sizeof(WINX_D3DINDEXBUFFER_DESC)) || FAILED(hrS)) {
                d3dibd.Size = 0;
            }
#endif // UNDER_XBOX
            m_ilockd.uSize = d3dibd.Size;
        }
    }

    if (m_pClient->CallMethod(MID_IXB8_Lock, this, &hrS, uOffsetToLock, uSizeToLock, &m_ilockd.pDataSrv, dwFlags)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DIndexBuffer8::Lock result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCIndexBuffer8::Unlock() {

    HRESULT hrC, hrS;
    BOOL    bRet;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3di) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    bRet = m_pClient->CallMethod(MID_IXB8_Unlock, this, &hrS, m_ilockd.pDataSrv, m_ilockd.uSize, m_ilockd.pData, m_ilockd.uSize);

    hrC = m_pd3di->Unlock();

    if (bRet) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DIndexBuffer8::Unlock result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\mesh.h ===
/*******************************************************************************

Copyright (c) 1998 Microsoft Corporation.  All rights reserved.

File Name:

    mesh.h

Description:

    Direct3D mesh routines.

*******************************************************************************/

#ifndef __MESH_H__
#define __MESH_H__

//******************************************************************************
// Structures
//******************************************************************************

typedef struct _MESH {
    PVERTEX         prVertices;
    UINT            uNumVertices;
    LPWORD          pwIndices;
    UINT            uNumIndices;
} MESH, *PMESH;

//******************************************************************************
// Function prototypes
//******************************************************************************

BOOL                CreateMesh(LPCTSTR szMesh, PMESH pmesh);
void                ReleaseMesh(PMESH pmesh);

#endif //__MESH_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\input.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    input.cpp

Author:

    Matt Bronder

Description:

    DirectInput initialization routines.

*******************************************************************************/

#include "d3dlocus.h"
#ifndef UNDER_XBOX
#include <dinput.h>
#else
#include <xbox.h>
#endif // UNDER_XBOX

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif // UNDER_XBOX

//******************************************************************************
// Local function prototypes
//******************************************************************************

#ifndef UNDER_XBOX
static LPDIRECTINPUTDEVICE8     CreateInputDevice(int nPort = -1);
#else
static HANDLE                   CreateInputDevice(int nPort = -1);
#endif // UNDER_XBOX

//******************************************************************************
// Globals
//******************************************************************************

#ifndef UNDER_XBOX
static HWND                     g_hWnd = NULL;
LPDIRECTINPUT8                  g_pdi;
LPDIRECTINPUTDEVICE8            g_pdid;
#else
HANDLE                          g_hDevice = NULL;
BOOL                            g_bInitDevices = TRUE;
#endif // UNDER_XBOX


int                             g_nEnumPort;
// Array of joystick button indices, arranged by usage.
BYTE                            g_rgbButtons[NUM_JOYSTICK_BUTTONS];
LONG                            g_lJoyMinX,
                                g_lJoyMaxX,
                                g_lJoyMinY,
                                g_lJoyMaxY;

//******************************************************************************
// Callback functions
//******************************************************************************

#ifndef UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     DIDeviceEnumCallback
//
// Description:
//
//     Enumerate DirectInput devices for a joystick of the given port.  If
//     found, create a DirectInputDevice object using the guid of the device
//     instance, query for the IDirectInputDevice2 interface, and return a 
//     pointer to it through the application-defined context.
//
// Arguments:
//
//     LPCDIDEVICEINSTANCE pdidi    - Description of the device
//
//     LPVOID pvContext (Out)       - Pointer to an IDirectInputDevice2 interface
//
// Return Value:
//
//     DIENUM_CONTINUE to continue the enumeration or DIENUM_STOP to stop it.
//
//     If the enumeration succesfully found a joystick device corresponding to
//     the given port, pvRef will contain a pointer to an IDirectInputDevice2
//     interface on the device.
//
//******************************************************************************
static BOOL CALLBACK DIDeviceEnumCallback(LPCDIDEVICEINSTANCE pdidi, LPVOID pvContext) {

    LPDIRECTINPUTDEVICE8*   pdid8 = (LPDIRECTINPUTDEVICE8*)pvContext;
    HRESULT                 hr;

    if (!g_pdi) {
        return DIENUM_STOP;
    }

    // Since we don't really have the concept of a port, we'll
    // use the port number to decide which enumerated joystick to choose
    // (port 0 will yield the first joystick enumerated, port 1 will yield
    // the second, etc.)
    if (g_nEnumPort > 0) {
        g_nEnumPort--;
        return DIENUM_CONTINUE;
    }

    // Sanity check: Is this device a joystick?
    if (DIDFT_GETTYPE(pdidi->dwDevType) != DI8DEVTYPE_JOYSTICK)
    {
        DebugString(TEXT("Warning: Joystick enumeration callback enumerated ")
                            TEXT("a device not identified as a joystick"));
    }

    // Attempt to create the device
    hr = g_pdi->CreateDevice(pdidi->guidInstance, pdid8, NULL);
    ResultFailed(hr, TEXT("IDirectInput::CreateDevice"));

    return DIENUM_STOP;
}

//******************************************************************************
//
// Function:
//
//     DIObjectsEnumCallback
//
// Description:
//
//     Enumerate the objects (buttons and axes) on a DirectInput device.
//     Store the indices for the objects in a global array according to the
//     usages of the objects.
//
// Arguments:
//
//     LPCDIDEVICEOBJECTINSTANCE pddio  - Description of the object
//
//     LPVOID pvContext                 - Number of buttons enumerated
//
// Return Value:
//
//     DIENUM_CONTINUE to continue the enumeration or DIENUM_STOP to stop it.
//
//******************************************************************************
static BOOL CALLBACK DIObjectsEnumCallback(LPCDIDEVICEOBJECTINSTANCE pddio, 
                                            LPVOID pvContext) {

    UINT* puButtons = (UINT*)pvContext;

    // Store the index in the array, according to its usage.  We can
    // assume that the buttons on a device are enumerated in order,
    // by index.
#ifdef UNDER_CE
    g_rgbButtons[pddio->wUsage - USAGE_FIRST_BUTTON] = (*puButtons)++;
#else
    g_rgbButtons[*puButtons] = (*puButtons)++;
#endif // UNDER_CE

    return DIENUM_CONTINUE;
}

#endif // !UNDER_XBOX

//******************************************************************************
// Initialization functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateInput
//
// Description:
//
//     Initialize all DirectInput objects necessary for obtaining joystick input.
//
// Arguments:
//
//     HWND hWnd                - Window handle to be associated with 
//                                DirectInput
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateInput(HWND hWnd) {

#ifndef UNDER_XBOX

    HRESULT hr;

    if (!hWnd) {
        return FALSE;
    }

    g_hWnd = hWnd;

#ifndef UNICODE
    hr = DirectInput8Create(GetTestInstance(), DIRECTINPUT_VERSION, IID_IDirectInput8A, (LPVOID*)&g_pdi, NULL);
#else
    hr = DirectInput8Create(GetTestInstance(), DIRECTINPUT_VERSION, IID_IDirectInput8W, (LPVOID*)&g_pdi, NULL);
#endif // !UNICODE
    if (ResultFailed(hr, TEXT("DirectInputCreate"))) {
        return FALSE;
    }

    // Create a joystick device using the first port with a joystick plugged in
    g_pdid = CreateInputDevice();

    return TRUE;

#else

    if (g_bInitDevices) {

        if (!(GetStartupContext() & TSTART_HARNESS)) {
            XInitDevices(0,NULL);
        }

        g_bInitDevices = FALSE;
    }

    g_hDevice = CreateInputDevice();

    return TRUE;

#endif // UNDER_XBOX
}

#ifndef UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     CreateInputDevice
//
// Description:
//
//     Create a DirectInputDevice joystick object using the given port
//
// Arguments:
//
//     int nPort               - Joystick port to create the device on (a 
//                               negative port number will cause the first
//                               joystick enumerated to be chosen)
//
// Return Value:
//
//     A pointer to the created IDirectInputDevice2 object on success,
//     NULL on failure.
//
//******************************************************************************
static LPDIRECTINPUTDEVICE8 CreateInputDevice(int nPort) {

    LPDIRECTINPUTDEVICE8    pDevice = NULL;
    DIPROPRANGE             dipr;
    UINT                    uNumButtons = 0;
    HRESULT                 hr;

    if (!g_pdi) {
        return NULL;
    }

    g_nEnumPort = nPort;

    hr = g_pdi->EnumDevices(DI8DEVTYPE_JOYSTICK, DIDeviceEnumCallback, 
        (LPVOID)&pDevice, DIEDFL_ATTACHEDONLY);

    if (ResultFailed(hr, TEXT("IDirectInput::EnumDevices"))) {
        return NULL;
    }

    // Return false if the joystick is not currently attached, or no such
    // port exists
    if (!pDevice) {
        return NULL;
    }

    // Enumerate the buttons that are available with the joystick
    hr = pDevice->EnumObjects(DIObjectsEnumCallback, &uNumButtons, DIDFT_BUTTON);
    if (ResultFailed(hr, TEXT("IDirectInputDevice2::EnumObjects"))) {
        pDevice->Release();
        return NULL;
    }

    // Set the translation array
    g_rgbButtons[JOYBUTTON_X] = 0;
    g_rgbButtons[JOYBUTTON_Y] = 1;
    g_rgbButtons[JOYBUTTON_WHITE] = 2;
    g_rgbButtons[JOYBUTTON_A] = 3;
    g_rgbButtons[JOYBUTTON_B] = 4;
    g_rgbButtons[JOYBUTTON_BLACK] = 5;
    g_rgbButtons[JOYBUTTON_LTRIG] = 6; 
    g_rgbButtons[JOYBUTTON_RTRIG] = 7;
    g_rgbButtons[JOYBUTTON_LSTICK] = 8;
    g_rgbButtons[JOYBUTTON_RSTICK] = 9;
    g_rgbButtons[JOYBUTTON_UP] = 12;
    g_rgbButtons[JOYBUTTON_DOWN] = 13;
    g_rgbButtons[JOYBUTTON_LEFT] = 14;
    g_rgbButtons[JOYBUTTON_RIGHT] = 15;
    g_rgbButtons[JOYBUTTON_BACK] = 11;
    g_rgbButtons[JOYBUTTON_START] = 10;

    // Set the data format for the joystick
    hr = pDevice->SetDataFormat(&c_dfDIJoystick);
    if (ResultFailed(hr, TEXT("IDirectInputDevice::SetDataFormat"))) {
        pDevice->Release();
        return NULL;
    }

    // Set the cooperative level
    hr = pDevice->SetCooperativeLevel(g_hWnd, DISCL_EXCLUSIVE 
                                            | DISCL_FOREGROUND);
    if (ResultFailed(hr, TEXT("IDirectInputDevice::SetCooperativeLevel"))) {
        pDevice->Release();
        return NULL;
    }

    // Get the range of the joystick
    memset(&dipr, 0, sizeof(DIPROPRANGE));
    dipr.diph.dwSize = sizeof(DIPROPRANGE);
    dipr.diph.dwHeaderSize = sizeof(dipr.diph);
    dipr.diph.dwObj = DIJOFS_X;
    dipr.diph.dwHow = DIPH_BYOFFSET;

    hr = pDevice->GetProperty(DIPROP_RANGE, (LPDIPROPHEADER)&dipr);
    if (ResultFailed(hr, TEXT("IDirectInputDevice::GetProperty"))) {
        pDevice->Release();
        return NULL;
    }

    g_lJoyMinX = dipr.lMin;
    g_lJoyMaxX = dipr.lMax;

    dipr.diph.dwObj = DIJOFS_Y;

    hr = pDevice->GetProperty(DIPROP_RANGE, (LPDIPROPHEADER)&dipr);
    if (ResultFailed(hr, TEXT("IDirectInputDevice::GetProperty"))) {
        pDevice->Release();
        return NULL;
    }

    g_lJoyMinY = dipr.lMin;
    g_lJoyMaxY = dipr.lMax;

    // Acquire the joystick
    hr = pDevice->Acquire();
    if (ResultFailed(hr, TEXT("IDirectInputDevice::Acquire"))) {
        pDevice->Release();
        return NULL;
    }

    // Initiate a poll to prepare data for the first GetDeviceState call
    hr = pDevice->Poll();
    if (ResultFailed(hr, TEXT("IDirectInputDevice::Acquire"))) {
        pDevice->Release();
        return NULL;
    }

    // We're now connected and ready to go
    return pDevice;
}

#else 

//******************************************************************************
static HANDLE CreateInputDevice(int nPort) {

    XINPUT_POLLING_PARAMETERS   ipp;
    DWORD                       dwInputDevices;
    UINT                        uPorts, i;
    HANDLE                      hDevice = NULL;

    memset(&ipp, 0, sizeof(XINPUT_POLLING_PARAMETERS));
    ipp.fAutoPoll = 0;
    ipp.fInterruptOut = 0; // ##REVIEW: IS THIS THE BEST CHOICE??
    ipp.bInputInterval = 8;
    ipp.bOutputInterval = 8;

    dwInputDevices = XGetDevices(XDEVICE_TYPE_GAMEPAD);
    if (!dwInputDevices) {  // Save time and drop out now if no joysticks are plugged in
        return NULL;
    }

    if (nPort >= 0) {
        hDevice = XInputOpen(XDEVICE_TYPE_GAMEPAD, nPort, 0, &ipp);
    }

    else {

        uPorts = XGetPortCount();

        for (i = 0; i < uPorts; i++) {
            if (dwInputDevices & (1 << i)) {
                hDevice = XInputOpen(XDEVICE_TYPE_GAMEPAD, i, 0, &ipp);
                if (hDevice != NULL) {
                    break;
                }
            }
        }
    }

    if (hDevice != NULL) {
        // Initiate a poll to prepare data for the first GetDeviceState call
        XInputPoll(hDevice);
    }

    return hDevice;
}

#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     ReleaseInput
//
// Description:
//
//     Release all input objects created by the InitDirectInput function.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseInput(void) {

#ifndef UNDER_XBOX

    if (g_pdid) {
        g_pdid->Release();
        g_pdid = NULL;
    }

    if (g_pdi) {
        g_pdi->Release();
        g_pdi = NULL;
    }

#else

    if (g_hDevice != NULL) {
        XInputClose(g_hDevice);
        g_hDevice = NULL;
    }

#endif // UNDER_XBOX
}

//******************************************************************************
//
// Function:
//
//     GetJoystickState
//
// Description:
//
//     Poll the joystick to obtain the state of its buttons and axes.
//
// Arguments:
//
//     LPDIJOYSTATE pdijs       - Pointer to a structure describing the state 
//                                of the joystick
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL GetJoystickState(PJOYSTATE pjs) {

#ifndef UNDER_XBOX

    DIJOYSTATE  dijs;
    static LONG lJoyMaxX = (g_lJoyMaxX - g_lJoyMinX) / 2;
    static LONG lJoyCenterX = g_lJoyMinX + lJoyMaxX;
    static LONG lJoyMaxY = (g_lJoyMaxY - g_lJoyMinY) / 2;
    static LONG lJoyCenterY = g_lJoyMinY + lJoyMaxY;
    UINT        i;
    HRESULT     hr;

    if (!pjs) {
        return FALSE;
    }

    if (!g_pdid) {

        memset(pjs, 0, sizeof(JOYSTATE));

        if (!g_pdi) {
            return FALSE;
        }

#ifdef UNDER_CE
        // Check to see if a joystick has been plugged in since we last checked
        g_pdid = CreateDevice();
        if (g_pdid) {
            g_pdid->GetDeviceState(sizeof(DIJOYSTATE), &dijs);
            g_pdid->Poll();
        }
        return FALSE;
#else
        return FALSE;
#endif // UNDER_CE
    }

    memset(&dijs, 0, sizeof(DIJOYSTATE));

    // Get the joystick data
    hr = g_pdid->GetDeviceState(sizeof(DIJOYSTATE), &dijs);
    if (FAILED(hr)) {
        if (hr == DIERR_UNPLUGGED) {
            // The joystick has been unplugged, delete the device since
            // we'll have to recreate it once the joystick is plugged
            // back in
            g_pdid->Release();
            g_pdid = NULL;
            return GetJoystickState(pjs);
        }
        ResultFailed(hr, TEXT("IDirectInputDevice::GetDeviceState"));
        return FALSE;
    }

    // Update the joystick for next time
    hr = g_pdid->Poll();
    if (hr == DIERR_UNPLUGGED) {
        g_pdid->Release();
        g_pdid = NULL;
        return GetJoystickState(pjs);
    }
    else if (hr == DIERR_INPUTLOST) {
        hr = g_pdid->Acquire();
        if (ResultFailed(hr, TEXT("IDirectInputDevice::Acquire"))) {
            return FALSE;
        }
    }
    else {
        if (ResultFailed(hr, TEXT("IDirectInputDevice::Poll"))) {
            return FALSE;
        }
    }

    // Translate the joystick information
    pjs->f1X = (float)(dijs.lX - lJoyCenterX) / (float)(lJoyMaxX);
    pjs->f1Y = (float)(dijs.lY - lJoyCenterY) / (float)(lJoyMaxY);
    pjs->f2Y = (float)dijs.lRz - (float)0x7F7C;
    if (pjs->f2Y < 0.0f) pjs->f2Y /= (float)0x7F7C;
    else pjs->f2Y /= (float)0x8083;
    for (i = 0; i < NUM_JOYSTICK_BUTTONS; i++) {
        pjs->buttons[i] = dijs.rgbButtons[g_rgbButtons[i]];
    }
    switch (dijs.rgdwPOV[0]) {
        case 0x0:
            pjs->buttons[JOYBUTTON_UP] = 0xFF;
            break;
        case 0x1194:
            pjs->buttons[JOYBUTTON_UP] = 0xFF;
            pjs->buttons[JOYBUTTON_RIGHT] = 0xFF;
            break;
        case 0x2328:
            pjs->buttons[JOYBUTTON_RIGHT] = 0xFF;
            break;
        case 0x34bc:
            pjs->buttons[JOYBUTTON_DOWN] = 0xFF;
            pjs->buttons[JOYBUTTON_RIGHT] = 0xFF;
            break;
        case 0x4650:
            pjs->buttons[JOYBUTTON_DOWN] = 0xFF;
            break;
        case 0x57e4:
            pjs->buttons[JOYBUTTON_LEFT] = 0xFF;
            pjs->buttons[JOYBUTTON_DOWN] = 0xFF;
            break;
        case 0x6978:
            pjs->buttons[JOYBUTTON_LEFT] = 0xFF;
            break;
        case 0x7B0C:
            pjs->buttons[JOYBUTTON_UP] = 0xFF;
            pjs->buttons[JOYBUTTON_LEFT] = 0xFF;
            break;
    }

//##HACK to work around a sidewinder bug where the lX and lY values of
// DIJOYSTATE change for an unmoving joystick after any of the buttons
// have been pressed
//#define FABS(x) (x < 0.0f ? -x : x)
if (FABS(pjs->f1X) < 0.01) pjs->f1X = 0.0f;
if (FABS(pjs->f1Y) < 0.01) pjs->f1Y = 0.0f;
if (FABS(pjs->f2X) < 0.01) pjs->f2X = 0.0f;
if (FABS(pjs->f2Y) < 0.01) pjs->f2Y = 0.0f;

    return TRUE;

#else
    
    XINPUT_STATE istate;
    DWORD        dwResult;

    memset(pjs, 0, sizeof(JOYSTATE));

    if (!g_hDevice) {
        g_hDevice = CreateInputDevice();
        return FALSE;
    }

    dwResult = XInputGetState(g_hDevice, &istate);
    if (dwResult != ERROR_SUCCESS) {
        if (dwResult == ERROR_DEVICE_NOT_CONNECTED) {
            XInputClose(g_hDevice);
            g_hDevice = CreateInputDevice();
        }
        return FALSE;
    }

    XInputPoll(g_hDevice);

    pjs->f1X =  (float)istate.Gamepad.sThumbLX / 32768.0f;
    pjs->f1Y = -(float)istate.Gamepad.sThumbLY / 32768.0f;
    pjs->f2X =  (float)istate.Gamepad.sThumbRX / 32768.0f;
    pjs->f2Y = -(float)istate.Gamepad.sThumbRY / 32768.0f;

    pjs->buttons[JOYBUTTON_X] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_X];
    pjs->buttons[JOYBUTTON_Y] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_Y];
    pjs->buttons[JOYBUTTON_WHITE] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_WHITE];
    pjs->buttons[JOYBUTTON_A] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_A];
    pjs->buttons[JOYBUTTON_B] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_B];
    pjs->buttons[JOYBUTTON_BLACK] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_BLACK];
    pjs->buttons[JOYBUTTON_LTRIG] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_LEFT_TRIGGER];
    pjs->buttons[JOYBUTTON_RTRIG] = istate.Gamepad.bAnalogButtons[XINPUT_GAMEPAD_RIGHT_TRIGGER];

    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_LEFT_THUMB) {
        pjs->buttons[JOYBUTTON_LSTICK] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_RIGHT_THUMB) {
        pjs->buttons[JOYBUTTON_RSTICK] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_UP) {
        pjs->buttons[JOYBUTTON_UP] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_DOWN) {
        pjs->buttons[JOYBUTTON_DOWN] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_LEFT) {
        pjs->buttons[JOYBUTTON_LEFT] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_RIGHT) {
        pjs->buttons[JOYBUTTON_RIGHT] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_BACK) {
        pjs->buttons[JOYBUTTON_BACK] = 0xFF;
    }
    if (istate.Gamepad.wButtons & XINPUT_GAMEPAD_START) {
        pjs->buttons[JOYBUTTON_START] = 0xFF;
    }

    pjs->f1X *= 1.2f;
    pjs->f1Y *= 1.2f;
    pjs->f2X *= 1.2f;
    pjs->f2Y *= 1.2f;
    if (pjs->f1X > 0.0f) {
        pjs->f1X -= 0.2f; 
        if (pjs->f1X < 0.0f) {
            pjs->f1X = 0.0f; 
        }
    }
    else {
        pjs->f1X += 0.2f;
        if (pjs->f1X > 0.0f) {
            pjs->f1X = 0.0f; 
        }
    }
    if (pjs->f1Y > 0.0f) {
        pjs->f1Y -= 0.2f; 
        if (pjs->f1Y < 0.0f) {
            pjs->f1Y = 0.0f; 
        }
    }
    else {
        pjs->f1Y += 0.2f;
        if (pjs->f1Y > 0.0f) {
            pjs->f1Y = 0.0f; 
        }
    }
    if (pjs->f2X > 0.0f) {
        pjs->f2X -= 0.2f; 
        if (pjs->f2X < 0.0f) {
            pjs->f2X = 0.0f; 
        }
    }
    else {
        pjs->f2X += 0.2f;
        if (pjs->f2X > 0.0f) {
            pjs->f2X = 0.0f; 
        }
    }
    if (pjs->f2Y > 0.0f) {
        pjs->f2Y -= 0.2f; 
        if (pjs->f2Y < 0.0f) {
            pjs->f2Y = 0.0f; 
        }
    }
    else {
        pjs->f2Y += 0.2f;
        if (pjs->f2Y > 0.0f) {
            pjs->f2Y = 0.0f; 
        }
    }

    return TRUE;

#endif // UNDER_XBOX
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\light.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    light.h

Author:

    Matt Bronder

Description:

    Direct3D lighting routines.

*******************************************************************************/

#ifndef __LIGHT_H__
#define __LIGHT_H__

//##HACK: Remove this when d3d8 starts defining it again
#ifndef D3DLIGHT_RANGE_MAX
#define D3DLIGHT_RANGE_MAX          ((float)sqrt(FLT_MAX))
#endif

//******************************************************************************
// Function prototypes
//******************************************************************************

BOOL                SetDirectionalLight(CDevice8* pDevice, DWORD dwIndex,
                                    D3DXVECTOR3 vDir, D3DCOLOR c = 0xFFFFFF);
void                SetDirectionalLight(D3DLIGHT8* plight, 
                                    D3DXVECTOR3 vDir, D3DCOLOR c = 0xFFFFFF);
BOOL                SetPointLight(CDevice8* pDevice, DWORD dwIndex,
                                    D3DXVECTOR3 vPos, D3DCOLOR c = 0xFFFFFF, 
                                    float fRange = D3DLIGHT_RANGE_MAX, 
                                    float fAttenuation0 = 1.0f, 
                                    float fAttenuation1 = 0.0f, 
                                    float fAttenuation2 = 0.0f);
void                SetPointLight(D3DLIGHT8* plight, 
                                    D3DXVECTOR3 vPos, D3DCOLOR c = 0xFFFFFF, 
                                    float fRange = D3DLIGHT_RANGE_MAX, 
                                    float fAttenuation0 = 1.0f, 
                                    float fAttenuation1 = 0.0f, 
                                    float fAttenuation2 = 0.0f);
BOOL                SetSpotLight(CDevice8* pDevice, DWORD dwIndex,
                                    D3DXVECTOR3 vPos, D3DXVECTOR3 vDir, 
                                    D3DCOLOR c = 0xFFFFFF, 
                                    float fRange = D3DLIGHT_RANGE_MAX, 
                                    float fFalloff = 1.0f, 
                                    float fAttenuation0 = 1.0f, 
                                    float fAttenuation1 = 0.0f, 
                                    float fAttenuation2 = 0.0f, 
                                    float fTheta = 0.523598f, 
                                    float fPhi = 0.785397f);
void                SetSpotLight(D3DLIGHT8* plight, 
                                    D3DXVECTOR3 vPos, D3DXVECTOR3 vDir, 
                                    D3DCOLOR c = 0xFFFFFF, 
                                    float fRange = D3DLIGHT_RANGE_MAX, 
                                    float fFalloff = 1.0f, 
                                    float fAttenuation0 = 1.0f, 
                                    float fAttenuation1 = 0.0f, 
                                    float fAttenuation2 = 0.0f, 
                                    float fTheta = 0.523598f, 
                                    float fPhi = 0.785397f);
BOOL                SetLight(CDevice8* pDevice, DWORD dwIndex,
                                    D3DLIGHTTYPE d3dlt,
                                    D3DXVECTOR3 vPos, D3DXVECTOR3 vDir, 
                                    D3DCOLOR cDiffuse = 0xFFFFFFFF, 
                                    D3DCOLOR cSpecular = 0xFFFFFFFF,
                                    D3DCOLOR cAmbient = 0xFFFFFFFF,
                                    float fRange = D3DLIGHT_RANGE_MAX, 
                                    float fFalloff = 1.0f, 
                                    float fAttenuation0 = 1.0f, 
                                    float fAttenuation1 = 0.0f, 
                                    float fAttenuation2 = 0.0f, 
                                    float fTheta = 0.523598f, 
                                    float fPhi = 0.785397f);
void                SetLight(D3DLIGHT8* plight, 
                                    D3DLIGHTTYPE d3dlt,
                                    D3DXVECTOR3 vPos, D3DXVECTOR3 vDir, 
                                    D3DCOLOR cDiffuse = 0xFFFFFFFF, 
                                    D3DCOLOR cSpecular = 0xFFFFFFFF,
                                    D3DCOLOR cAmbient = 0xFFFFFFFF,
                                    float fRange = D3DLIGHT_RANGE_MAX, 
                                    float fFalloff = 1.0f, 
                                    float fAttenuation0 = 1.0f, 
                                    float fAttenuation1 = 0.0f, 
                                    float fAttenuation2 = 0.0f, 
                                    float fTheta = 0.523598f, 
                                    float fPhi = 0.785397f);

void                SetMaterial(D3DMATERIAL8* pmaterial,
                                    D3DCOLOR cDiffuse = 0xFFFFFFFF, 
                                    D3DCOLOR cAmbient = 0xFF595959,
                                    D3DCOLOR cSpecular = 0xFF404040, 
                                    D3DCOLOR cEmissive = 0xFF000000,
                                    float fPower = 20.0f);
void                SetMaterial(D3DMATERIAL8* pmaterial,
                                    D3DXVECTOR4 vDiffuse = D3DXVECTOR4(1.0f, 1.0f, 1.0f, 1.0f), 
                                    D3DXVECTOR4 vAmbient = D3DXVECTOR4(0.35f, 0.35f, 0.35f, 1.0f),
                                    D3DXVECTOR4 vSpecular = D3DXVECTOR4(0.25f, 0.25f, 0.25f, 1.0f),
                                    D3DXVECTOR4 vEmissive = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f),
                                    float fPower = 20.0f);
BOOL                SetMaterial(CDevice8* pDevice,
                                    D3DCOLOR cDiffuse = 0xFFFFFFFF, 
                                    D3DCOLOR cAmbient = 0xFF595959,
                                    D3DCOLOR cSpecular = 0xFF404040,
                                    D3DCOLOR cEmissive = 0xFF000000,
                                    float fPower = 20.0f);
BOOL                SetMaterial(CDevice8* pDevice,
                                    D3DXVECTOR4 vDiffuse = D3DXVECTOR4(1.0f, 1.0f, 1.0f, 1.0f), 
                                    D3DXVECTOR4 vAmbient = D3DXVECTOR4(0.35f, 0.35f, 0.35f, 1.0f),
                                    D3DXVECTOR4 vSpecular = D3DXVECTOR4(0.25f, 0.25f, 0.25f, 1.0f),
                                    D3DXVECTOR4 vEmissive = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f),
                                    float fPower = 20.0f);
#ifdef UNDER_XBOX
BOOL                SetBackMaterial(CDevice8* pDevice,
                                    D3DCOLOR cDiffuse = 0xFFFFFFFF, 
                                    D3DCOLOR cAmbient = 0xFF595959,
                                    D3DCOLOR cSpecular = 0xFF404040,
                                    D3DCOLOR cEmissive = 0xFF000000,
                                    float fPower = 20.0f);
BOOL                SetBackMaterial(CDevice8* pDevice,
                                    D3DXVECTOR4 vDiffuse = D3DXVECTOR4(1.0f, 1.0f, 1.0f, 1.0f), 
                                    D3DXVECTOR4 vAmbient = D3DXVECTOR4(0.35f, 0.35f, 0.35f, 1.0f),
                                    D3DXVECTOR4 vSpecular = D3DXVECTOR4(0.25f, 0.25f, 0.25f, 1.0f),
                                    D3DXVECTOR4 vEmissive = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f),
                                    float fPower = 20.0f);
#endif // UNDER_XBOX
void                SetMaterialTranslucency(D3DMATERIAL8* pmaterial, float fAlpha);
BOOL                SetMaterialTranslucency(CDevice8* pDevice, float fAlpha);
#ifdef UNDER_XBOX
BOOL                SetBackMaterialTranslucency(CDevice8* pDevice, float fAlpha);
#endif // UNDER_XBOX

#ifndef UNDER_XBOX
BOOL                SetVertexFog(CDevice8* pDevice, D3DCOLOR c, 
                                    float fStart, float fEnd, 
                                    float fDensity, D3DFOGMODE d3dfm = D3DFOG_LINEAR);
#endif // !UNDER_XBOX
BOOL                SetPixelFog(CDevice8* pDevice, D3DCOLOR c, 
                                    float fStart, float fEnd, 
                                    float fDensity, D3DFOGMODE d3dfm = D3DFOG_LINEAR);

#endif //__LIGHT_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\light.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    light.cpp

Author:

    Matt Bronder

Description:

    Direct3D lighting routines.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// Light functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     SetDirectionalLight
//
// Description:
//
//     Set a directional light using the given light data.
//
// Arguments:
//
//     CDevice8* pDevice            - Pointer to the device object
//
//     DWORD dwIndex                - Index of the light to set
//
//     D3DXVECTOR3 vDir             - Direction of the light
//
//     D3DCOLOR c (Optional)        - Color of the light
//
// Return Value:
//
//     A pointer to the created IDirect3DLight object on success,
//     NULL on failure.
//
//******************************************************************************
BOOL SetDirectionalLight(CDevice8* pDevice, DWORD dwIndex, D3DXVECTOR3 vDir, D3DCOLOR c) {

    return SetLight(pDevice, dwIndex, D3DLIGHT_DIRECTIONAL, D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
                       vDir, c, c, c, D3DLIGHT_RANGE_MAX, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f);
}

//******************************************************************************
//
// Function:
//
//     SetDirectionalLight
//
// Description:
//
//     Set a directional light using the given light data.
//
// Arguments:
//
//     D3DLIGHT8* plight            - Pointer to the light to set
//
//     D3DXVECTOR3 vDir             - Direction of the light
//
//     D3DCOLOR c (Optional)        - Color of the light
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
void SetDirectionalLight(D3DLIGHT8* plight, D3DXVECTOR3 vDir, D3DCOLOR c) {

    SetLight(plight, D3DLIGHT_DIRECTIONAL, D3DXVECTOR3(0.0f, 0.0f, 0.0f), 
                       vDir, c, c, c, D3DLIGHT_RANGE_MAX, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f,
                       0.0f);
}

//******************************************************************************
//
// Function:
//
//     SetPointLight
//
// Description:
//
//     Set a point light using the given light data.
//
// Arguments:
//
//     CDevice8* pDevice            - Pointer to the device object
//
//     DWORD dwIndex                - Index of the light to set
//
//     D3DXVECTOR3 vPos             - Position of the light
//
//     D3DCOLOR c (Optional)        - Color of the light
//
//     float fRange (Optional)      - Range of the light
//
//     float fAttenuation0          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation1          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation2          - Change in the light's intensity
//              (Optional)
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetPointLight(CDevice8* pDevice, DWORD dwIndex, D3DXVECTOR3 vPos, 
                                 D3DCOLOR c, float fRange, 
                                 float fAttenuation0, float fAttenuation1, 
                                 float fAttenuation2)
{
    return SetLight(pDevice, dwIndex, D3DLIGHT_POINT, vPos, D3DXVECTOR3(0.0f, 0.0f, 0.0f), c, c, c,
                       fRange, 1.0f, fAttenuation0, fAttenuation1, fAttenuation2, 
                       0.0f, 0.0f);
}

//******************************************************************************
//
// Function:
//
//     SetPointLight
//
// Description:
//
//     Set a point light using the given light data.
//
// Arguments:
//
//     CDevice8* pDevice            - Pointer to the device object
//
//     D3DXVECTOR3 vPos             - Position of the light
//
//     D3DCOLOR c (Optional)        - Color of the light
//
//     float fRange (Optional)      - Range of the light
//
//     float fAttenuation0          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation1          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation2          - Change in the light's intensity
//              (Optional)
//
// Return Value:
//
//     None.
//
//******************************************************************************
void SetPointLight(D3DLIGHT8* plight, D3DXVECTOR3 vPos, 
                                 D3DCOLOR c, float fRange, 
                                 float fAttenuation0, float fAttenuation1, 
                                 float fAttenuation2)
{
    SetLight(plight, D3DLIGHT_POINT, vPos, D3DXVECTOR3(0.0f, 0.0f, 0.0f), c, c, c,
                       fRange, 1.0f, fAttenuation0, fAttenuation1, fAttenuation2, 
                       0.0f, 0.0f);
}

//******************************************************************************
//
// Function:
//
//     SetSpotLight
//
// Description:
//
//     Set a spot light using the given light data.
//
// Arguments:
//
//     CDevice8* pDevice            - Pointer to the device object
//
//     DWORD dwIndex                - Index of the light to set
//
//     D3DXVECTOR3 vPos             - Position of the light
//
//     D3DXVECTOR3 vDir             - Direction of the light
//
//     D3DCOLOR c (Optional)        - Color of the light
//
//     float fRange (Optional)      - Range of the light
//
//     float fFalloff (Optional)    - Falloff of a spotlight's penumbra
//
//     float fAttenuation0          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation1          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation2          - Change in the light's intensity
//              (Optional)
//
//     float fTheta (Optional)      - Angle of a spotlight's umbra
//
//     float fPhi (Optional)        - Angle of a spotlight's penumbra
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetSpotLight(CDevice8* pDevice, DWORD dwIndex, D3DXVECTOR3 vPos, 
                                D3DXVECTOR3 vDir, D3DCOLOR c, float fRange, 
                                float fFalloff, float fAttenuation0, 
                                float fAttenuation1, float fAttenuation2, 
                                float fTheta, float fPhi)
{
    return SetLight(pDevice, dwIndex, D3DLIGHT_SPOT, vPos, vDir, c, c, c,
                       fRange, fFalloff, fAttenuation0, fAttenuation1, 
                       fAttenuation2, fTheta, fPhi);
}

//******************************************************************************
//
// Function:
//
//     SetSpotLight
//
// Description:
//
//     Set a spot light using the given light data.
//
// Arguments:
//
//     D3DLIGHT8* plight            - Pointer to the light to set
//
//     D3DXVECTOR3 vPos             - Position of the light
//
//     D3DXVECTOR3 vDir             - Direction of the light
//
//     D3DCOLOR c (Optional)        - Color of the light
//
//     float fRange (Optional)      - Range of the light
//
//     float fFalloff (Optional)    - Falloff of a spotlight's penumbra
//
//     float fAttenuation0          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation1          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation2          - Change in the light's intensity
//              (Optional)
//
//     float fTheta (Optional)      - Angle of a spotlight's umbra
//
//     float fPhi (Optional)        - Angle of a spotlight's penumbra
//
// Return Value:
//
//     None.
//
//******************************************************************************
void SetSpotLight(D3DLIGHT8* plight, D3DXVECTOR3 vPos, 
                                D3DXVECTOR3 vDir, D3DCOLOR c, float fRange, 
                                float fFalloff, float fAttenuation0, 
                                float fAttenuation1, float fAttenuation2, 
                                float fTheta, float fPhi)
{
    SetLight(plight, D3DLIGHT_SPOT, vPos, vDir, c, c, c,
                       fRange, fFalloff, fAttenuation0, fAttenuation1, 
                       fAttenuation2, fTheta, fPhi);
}

//******************************************************************************
//
// Function:
//
//     SetLight
//
// Description:
//
//     Set a light using the given light data.
//
// Arguments:
//
//     CDevice8* pDevice            - Pointer to the device object
//
//     DWORD dwIndex                - Index of the light to set
//
//     D3DLIGHTTYPE d3dlt           - Type of light to Set
//
//     D3DXVECTOR3 vPos             - Position of the light
//
//     D3DXVECTOR3 vDir             - Direction of the light
//
//     D3DCOLOR cDiffuse (Optional) - Diffuse color of the light
//
//     D3DCOLOR cSpecular(Optional) - Specular color of the light
//
//     D3DCOLOR cAmbient (Optional) - Ambient color of the light
//
//     float fRange (Optional)      - Range of the light
//
//     float fFalloff (Optional)    - Falloff of a spotlight's penumbra
//
//     float fAttenuation0          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation1          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation2          - Change in the light's intensity
//              (Optional)
//
//     float fTheta (Optional)      - Angle of a spotlight's umbra
//
//     float fPhi (Optional)        - Angle of a spotlight's penumbra
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetLight(CDevice8* pDevice, DWORD dwIndex, D3DLIGHTTYPE d3dlt,
                             D3DXVECTOR3 vPos, D3DXVECTOR3 vDir, 
                             D3DCOLOR cDiffuse, D3DCOLOR cSpecular,
                             D3DCOLOR cAmbient,
                             float fRange, float fFalloff, 
                             float fAttenuation0, float fAttenuation1, 
                             float fAttenuation2, float fTheta, 
                             float fPhi)
{
    D3DLIGHT8   light;
    HRESULT     hr;

    // Parameter validation
    if (!pDevice) {
        return NULL;
    }

    // Initialize the light
    SetLight(&light, d3dlt, vPos, vDir, cDiffuse, cSpecular, cAmbient,
                fRange, fFalloff, fAttenuation0, fAttenuation1,
                fAttenuation2, fTheta, fPhi);

    // Set the light
    hr = pDevice->SetLight(dwIndex, &light);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetLight"))) {
        return FALSE;
    }

    // Turn on the light
    hr = pDevice->LightEnable(dwIndex, TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::LightEnable"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SetLight
//
// Description:
//
//     Set a light using the given light data.
//
// Arguments:
//
//     D3DLIGHT8* plight            - Pointer to the light to set
//
//     D3DLIGHTTYPE d3dlt           - Type of light to Set
//
//     D3DXVECTOR3 vPos             - Position of the light
//
//     D3DXVECTOR3 vDir             - Direction of the light
//
//     D3DCOLOR cDiffuse (Optional) - Diffuse color of the light
//
//     D3DCOLOR cSpecular(Optional) - Specular color of the light
//
//     D3DCOLOR cAmbient (Optional) - Ambient color of the light
//
//     float fRange (Optional)      - Range of the light
//
//     float fFalloff (Optional)    - Falloff of a spotlight's penumbra
//
//     float fAttenuation0          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation1          - Change in the light's intensity
//              (Optional)
//
//     float fAttenuation2          - Change in the light's intensity
//              (Optional)
//
//     float fTheta (Optional)      - Angle of a spotlight's umbra
//
//     float fPhi (Optional)        - Angle of a spotlight's penumbra
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
void SetLight(D3DLIGHT8* plight, D3DLIGHTTYPE d3dlt,
                             D3DXVECTOR3 vPos, D3DXVECTOR3 vDir, 
                             D3DCOLOR cDiffuse, D3DCOLOR cSpecular,
                             D3DCOLOR cAmbient,
                             float fRange, float fFalloff, 
                             float fAttenuation0, float fAttenuation1, 
                             float fAttenuation2, float fTheta, 
                             float fPhi)
{
    if (plight) {

        // Initialize the light data
        memset(plight, 0, sizeof(D3DLIGHT8));
        plight->Type = d3dlt;
        plight->Diffuse.r = (float)RGBA_GETRED(cDiffuse) / 255.0f;
        plight->Diffuse.g = (float)RGBA_GETGREEN(cDiffuse) / 255.0f;
        plight->Diffuse.b = (float)RGBA_GETBLUE(cDiffuse) / 255.0f;
        plight->Diffuse.a = (float)RGBA_GETALPHA(cDiffuse) / 255.0f;
        plight->Specular.r = (float)RGBA_GETRED(cSpecular) / 255.0f;
        plight->Specular.g = (float)RGBA_GETGREEN(cSpecular) / 255.0f;
        plight->Specular.b = (float)RGBA_GETBLUE(cSpecular) / 255.0f;
        plight->Specular.a = (float)RGBA_GETALPHA(cSpecular) / 255.0f;
        plight->Ambient.r = (float)RGBA_GETRED(cAmbient) / 255.0f;
        plight->Ambient.g = (float)RGBA_GETGREEN(cAmbient) / 255.0f;
        plight->Ambient.b = (float)RGBA_GETBLUE(cAmbient) / 255.0f;
        plight->Ambient.a = (float)RGBA_GETALPHA(cAmbient) / 255.0f;
        plight->Position = vPos;
        plight->Direction = vDir;
        plight->Range = fRange;
        plight->Falloff = fFalloff;
        plight->Attenuation0 = fAttenuation0;
        plight->Attenuation1 = fAttenuation1;
        plight->Attenuation2 = fAttenuation2;
        plight->Theta = fTheta;
        plight->Phi = fPhi;
    }
}

//******************************************************************************
// Material functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     SetMaterial
//
// Description:
//
//     Initialize a material with the given color information.
//
// Arguments:
//
//     D3DMATERIAL8* pmaterial          - Pointer to the material
//
//     D3DCOLOR cDiffuse (Optional)     - Diffuse component of the material
//
//     D3DCOLOR cAmbient (Optional)     - Ambient component of the material
//
//     D3DCOLOR cSpecular (Optional)    - Specular component of the material
//
//     D3DCOLOR cEmissive (Optional)    - Emissive component of the material
//
//     float fPower (Optional)          - Sharpness of the specular highlights
//
// Return Value:
//
//     None.
//
//******************************************************************************
void SetMaterial(D3DMATERIAL8* pmaterial,
                       D3DCOLOR cDiffuse, D3DCOLOR cAmbient,
                       D3DCOLOR cSpecular, D3DCOLOR cEmissive,
                       float fPower) 
{
    if (pmaterial) {

        // Intialize the material
        memset(pmaterial, 0, sizeof(D3DMATERIAL8));
        pmaterial->Ambient.r = (float)RGBA_GETRED(cAmbient) / 255.0f;
        pmaterial->Ambient.g = (float)RGBA_GETGREEN(cAmbient) / 255.0f;
        pmaterial->Ambient.b = (float)RGBA_GETBLUE(cAmbient) / 255.0f;
        pmaterial->Ambient.a = (float)RGBA_GETALPHA(cAmbient) / 255.0f;
        pmaterial->Diffuse.r = (float)RGBA_GETRED(cDiffuse) / 255.0f;
        pmaterial->Diffuse.g = (float)RGBA_GETGREEN(cDiffuse) / 255.0f;
        pmaterial->Diffuse.b = (float)RGBA_GETBLUE(cDiffuse) / 255.0f;
        pmaterial->Diffuse.a = (float)RGBA_GETALPHA(cDiffuse) / 255.0f;
        pmaterial->Specular.r = (float)RGBA_GETRED(cSpecular) / 255.0f;
        pmaterial->Specular.g = (float)RGBA_GETGREEN(cSpecular) / 255.0f;
        pmaterial->Specular.b = (float)RGBA_GETBLUE(cSpecular) / 255.0f;
        pmaterial->Specular.a = (float)RGBA_GETALPHA(cSpecular) / 255.0f;
        pmaterial->Emissive.r = (float)RGBA_GETRED(cEmissive) / 255.0f;
        pmaterial->Emissive.g = (float)RGBA_GETGREEN(cEmissive) / 255.0f;
        pmaterial->Emissive.b = (float)RGBA_GETBLUE(cEmissive) / 255.0f;
        pmaterial->Emissive.a = (float)RGBA_GETALPHA(cEmissive) / 255.0f;
        pmaterial->Power = fPower;
    }
}

//******************************************************************************
//
// Function:
//
//     SetMaterial
//
// Description:
//
//     Initialize a material with the given color information.
//
// Arguments:
//
//     D3DMATERIAL8* pmaterial          - Pointer to the material
//
//     D3DXVECTOR4 vDiffuse (Optional)  - Diffuse component of the material
//
//     D3DXVECTOR4 vAmbient (Optional)  - Ambient component of the material
//
//     D3DXVECTOR4 vSpecular (Optional) - Specular component of the material
//
//     D3DXVECTOR4 vEmissive (Optional) - Emissive component of the material
//
//     float fPower (Optional)          - Sharpness of the specular highlights
//
// Return Value:
//
//     None.
//
//******************************************************************************
void SetMaterial(D3DMATERIAL8* pmaterial,
                       D3DXVECTOR4 vDiffuse, D3DXVECTOR4 vAmbient,
                       D3DXVECTOR4 vSpecular, D3DXVECTOR4 vEmissive,
                       float fPower) 
{
    if (pmaterial) {

        // Intialize the material
        memset(pmaterial, 0, sizeof(D3DMATERIAL8));
        pmaterial->Ambient.r = vAmbient.x;
        pmaterial->Ambient.g = vAmbient.y;
        pmaterial->Ambient.b = vAmbient.z;
        pmaterial->Ambient.a = vAmbient.w;
        pmaterial->Diffuse.r = vDiffuse.x;
        pmaterial->Diffuse.g = vDiffuse.y;
        pmaterial->Diffuse.b = vDiffuse.z;
        pmaterial->Diffuse.a = vDiffuse.w;
        pmaterial->Specular.r = vSpecular.x;
        pmaterial->Specular.g = vSpecular.y;
        pmaterial->Specular.b = vSpecular.z;
        pmaterial->Specular.a = vSpecular.w;
        pmaterial->Emissive.r = vEmissive.x;
        pmaterial->Emissive.g = vEmissive.y;
        pmaterial->Emissive.b = vEmissive.z;
        pmaterial->Emissive.a = vEmissive.w;
        pmaterial->Power = fPower;
    }
}

//******************************************************************************
//
// Function:
//
//     SetMaterial
//
// Description:
//
//     Set a material in the device.
//
// Arguments:
//
//     CDevice8* pDevice                - Pointer to the device object
//
//     D3DCOLOR cDiffuse (Optional)     - Diffuse component of the material
//
//     D3DCOLOR cAmbient (Optional)     - Ambient component of the material
//
//     D3DCOLOR cSpecular (Optional)    - Specular component of the material
//
//     D3DCOLOR cEmissive (Optional)    - Emissive component of the material
//
//     float fPower (Optional)          - Sharpness of the specular highlights
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetMaterial(CDevice8* pDevice,
                       D3DCOLOR cDiffuse, D3DCOLOR cAmbient,
                       D3DCOLOR cSpecular, D3DCOLOR cEmissive,
                       float fPower) 
{
    D3DMATERIAL8    material;
    HRESULT         hr;

    if (!pDevice) {
        return FALSE;
    }

    // Intialize the material
    SetMaterial(&material, cDiffuse, cAmbient, cSpecular, cEmissive, fPower);

    // Set the material
    hr = pDevice->SetMaterial(&material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetMaterial"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SetMaterial
//
// Description:
//
//     Set a material in the device.
//
// Arguments:
//
//     CDevice8* pDevice                - Pointer to the device object
//
//     D3DXVECTOR4 vDiffuse (Optional)  - Diffuse component of the material
//
//     D3DXVECTOR4 vAmbient (Optional)  - Ambient component of the material
//
//     D3DXVECTOR4 vSpecular (Optional) - Specular component of the material
//
//     D3DXVECTOR4 vEmissive (Optional) - Emissive component of the material
//
//     float fPower (Optional)          - Sharpness of the specular highlights
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetMaterial(CDevice8* pDevice,
                       D3DXVECTOR4 vDiffuse, D3DXVECTOR4 vAmbient,
                       D3DXVECTOR4 vSpecular, D3DXVECTOR4 vEmissive,
                       float fPower)
{
    D3DMATERIAL8    material;
    HRESULT         hr;

    if (!pDevice) {
        return FALSE;
    }

    // Intialize the material
    SetMaterial(&material, vDiffuse, vAmbient, vSpecular, vEmissive, fPower);

    // Set the material
    hr = pDevice->SetMaterial(&material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetMaterial"))) {
        return FALSE;
    }

    return TRUE;
}

#ifdef UNDER_XBOX
//******************************************************************************
//
// Function:
//
//     SetBackMaterial
//
// Description:
//
//     Set a back material in the device.
//
// Arguments:
//
//     CDevice8* pDevice                - Pointer to the device object
//
//     D3DCOLOR cDiffuse (Optional)     - Diffuse component of the material
//
//     D3DCOLOR cAmbient (Optional)     - Ambient component of the material
//
//     D3DCOLOR cSpecular (Optional)    - Specular component of the material
//
//     D3DCOLOR cEmissive (Optional)    - Emissive component of the material
//
//     float fPower (Optional)          - Sharpness of the specular highlights
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetBackMaterial(CDevice8* pDevice,
                       D3DCOLOR cDiffuse, D3DCOLOR cAmbient,
                       D3DCOLOR cSpecular, D3DCOLOR cEmissive,
                       float fPower) 
{
    D3DMATERIAL8    material;
    HRESULT         hr;

    if (!pDevice) {
        return FALSE;
    }

    // Intialize the material
    SetMaterial(&material, cDiffuse, cAmbient, cSpecular, cEmissive, fPower);

    // Set the material
    hr = pDevice->SetBackMaterial(&material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetMaterial"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SetBackMaterial
//
// Description:
//
//     Set a back material in the device.
//
// Arguments:
//
//     CDevice8* pDevice                - Pointer to the device object
//
//     D3DXVECTOR4 vDiffuse (Optional)  - Diffuse component of the material
//
//     D3DXVECTOR4 vAmbient (Optional)  - Ambient component of the material
//
//     D3DXVECTOR4 vSpecular (Optional) - Specular component of the material
//
//     D3DXVECTOR4 vEmissive (Optional) - Emissive component of the material
//
//     float fPower (Optional)          - Sharpness of the specular highlights
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetBackMaterial(CDevice8* pDevice,
                       D3DXVECTOR4 vDiffuse, D3DXVECTOR4 vAmbient,
                       D3DXVECTOR4 vSpecular, D3DXVECTOR4 vEmissive,
                       float fPower)
{
    D3DMATERIAL8    material;
    HRESULT         hr;

    if (!pDevice) {
        return FALSE;
    }

    // Intialize the material
    SetMaterial(&material, vDiffuse, vAmbient, vSpecular, vEmissive, fPower);

    // Set the material
    hr = pDevice->SetBackMaterial(&material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetMaterial"))) {
        return FALSE;
    }

    return TRUE;
}
#endif // UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     SetMaterialTranslucency
//
// Description:
//
//     Set the alpha channel information on a material.
//
// Arguments:
//
//     D3DMATERIAL8* pmaterial              - Material to make translucent
//
//     float fAlpha                         - Translucency value ranging from
//                                            0.0 to 1.0, where 0.0 is 
//                                            transparent and 1.0 is opaque
//
// Return Value:
//
//     None.
//
//******************************************************************************
void SetMaterialTranslucency(D3DMATERIAL8* pmaterial, float fAlpha) {

    if (pmaterial) {

        // Set the alpha information
        pmaterial->Ambient.a = fAlpha;
        pmaterial->Diffuse.a = fAlpha;
        pmaterial->Specular.a = fAlpha;
        pmaterial->Emissive.a = fAlpha;
    }
}

//******************************************************************************
//
// Function:
//
//     SetMaterialTranslucency
//
// Description:
//
//     Set the alpha channel information on a material.
//
// Arguments:
//
//     CDevice8* pDevice                    - Device containing the material to
//                                            make translucent
//
//     float fAlpha                         - Translucency value ranging from
//                                            0.0 to 1.0, where 0.0 is 
//                                            transparent and 1.0 is opaque
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetMaterialTranslucency(CDevice8* pDevice, float fAlpha) {

    D3DMATERIAL8 material;
    HRESULT      hr;

    if (!pDevice) {
        return FALSE;
    }

    // Get the material data
    memset(&material, 0, sizeof(D3DMATERIAL8));
    hr = pDevice->GetMaterial(&material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetMaterial"))) {
        return FALSE;
    }

    // Set the alpha information
    SetMaterialTranslucency(&material, fAlpha);

    // Set the material
    hr = pDevice->SetMaterial(&material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetMaterial"))) {
        return FALSE;
    }

    return TRUE;
}

#ifdef UNDER_XBOX
//******************************************************************************
//
// Function:
//
//     SetMaterialTranslucency
//
// Description:
//
//     Set the alpha channel information on a back material.
//
// Arguments:
//
//     CDevice8* pDevice                    - Device containing the material to
//                                            make translucent
//
//     float fAlpha                         - Translucency value ranging from
//                                            0.0 to 1.0, where 0.0 is 
//                                            transparent and 1.0 is opaque
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetBackMaterialTranslucency(CDevice8* pDevice, float fAlpha) {

    D3DMATERIAL8 material;
    HRESULT      hr;

    if (!pDevice) {
        return FALSE;
    }

    // Get the material data
    memset(&material, 0, sizeof(D3DMATERIAL8));
    hr = pDevice->GetBackMaterial(&material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetMaterial"))) {
        return FALSE;
    }

    // Set the alpha information
    SetMaterialTranslucency(&material, fAlpha);

    // Set the material
    hr = pDevice->SetBackMaterial(&material);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetBackMaterial"))) {
        return FALSE;
    }

    return TRUE;
}
#endif // UNDER_XBOX

// ##TODO: Incorporate settings for z, w, and range based fog

#ifndef UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     SetVertexFog
//
// Description:
//
//     Set the appropriate render states to initialize vertex fog in a
//     scene.
//
// Arguments:
//
//     CDevice8* pDevice                - Pointer to the device object
//
//     D3DCOLOR c                       - Fog color
//
//     float fStart                     - Distance at which the fog will begin
//
//     float fEnd                       - Distance at which the fog will end
//
//     float fDensity                   - Density of the fog
//
//     D3DFOGMODE d3dfm                 - Fog intensification
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetVertexFog(CDevice8* pDevice, D3DCOLOR c, float fStart, 
                  float fEnd, float fDensity, D3DFOGMODE d3dfm)
{
    D3DCAPS8 d3dcaps;
    HRESULT hr;

    if (!pDevice) {
        return FALSE;
    }

    hr = pDevice->GetDeviceCaps(&d3dcaps);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
        return FALSE;
    }

    if (d3dcaps.RasterCaps & D3DPRASTERCAPS_FOGVERTEX) {

        hr = pDevice->SetRenderState(D3DRS_FOGCOLOR, (DWORD)c);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGSTART, *((LPDWORD)&fStart));
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGEND, *((LPDWORD)&fEnd));
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGDENSITY, *((LPDWORD)&fDensity));
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGVERTEXMODE, (DWORD)d3dfm);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        return TRUE;
    }

    else {
        return FALSE;
    }
}

#endif // !UNDER_XBOX

//******************************************************************************
//
// Function:
//
//     SetPixelFog
//
// Description:
//
//     Set the appropriate render states to initialize pixel fog in a
//     scene.
//
// Arguments:
//
//     CDevice8* pDevice                - Pointer to the device object
//
//     D3DCOLOR c                       - Fog color
//
//     float fStart                     - Distance at which the fog will begin
//
//     float fEnd                       - Distance at which the fog will end
//
//     float fDensity                   - Density of the fog
//
//     D3DFOGMODE d3dfm                 - Fog intensification
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetPixelFog(CDevice8* pDevice, D3DCOLOR c, float fStart, 
                  float fEnd, float fDensity, D3DFOGMODE d3dfm)
{
    D3DCAPS8 d3dcaps;
    HRESULT hr;

    if (!pDevice) {
        return FALSE;
    }

    hr = pDevice->GetDeviceCaps(&d3dcaps);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
        return FALSE;
    }

    if (d3dcaps.RasterCaps & D3DPRASTERCAPS_FOGTABLE) {

        hr = pDevice->SetRenderState(D3DRS_FOGCOLOR, (DWORD)c);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGSTART, *((LPDWORD)&fStart));
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGEND, *((LPDWORD)&fEnd));
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGDENSITY, *((LPDWORD)&fDensity));
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        hr = pDevice->SetRenderState(D3DRS_FOGTABLEMODE, (DWORD)d3dfm);
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetRenderState"))) {
            return FALSE;
        }

        return TRUE;
    }

    else {
        return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\log.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    log.cpp

Description:

    Logging functions.

*******************************************************************************/

#include "d3dlocus.h"
#ifdef UNDER_XBOX
#include "xlog.h"
#endif // UNDER_XBOX

//******************************************************************************
// Globals
//******************************************************************************

static HANDLE g_hLog = INVALID_HANDLE_VALUE;
static TCHAR  g_szTextLog[2048] = {0};
static BOOL   m_bCreated = FALSE;

//******************************************************************************
void CreateLog(HANDLE hLog) {

#ifdef UNDER_XBOX
    WEB_SERVER_INFO wsi, *pwsi;
#endif // UNDER_XBOX

    ReleaseLog();

#ifndef UNDER_XBOX

    hLog = INVALID_HANDLE_VALUE;

#else

    if (GetStartupContext() & TSTART_STRESS) {
        hLog = INVALID_HANDLE_VALUE;
    }
    else {
        memset(&wsi, 0, sizeof(WEB_SERVER_INFO));
        wsi.lpszHttpServer = TEXT("157.56.11.21");
        wsi.lpszConfigPage = TEXT("/regression/submit/sysConfig.asp");
        wsi.lpszLogPage = TEXT("/regression/submit/log.asp");

        if (hLog == INVALID_HANDLE_VALUE) {
#if WEBLOG
            pwsi = &wsi;
#else
            pwsi = NULL;
#endif
            hLog = xCreateLog_W(L"t:\\d3d.log", pwsi, INVALID_SOCKET, XLL_LOGALL, XLO_CONFIG | XLO_REFRESH);
            if (hLog != INVALID_HANDLE_VALUE) {
                m_bCreated = TRUE;
            }
        }
    }

#endif // UNDER_XBOX

    g_hLog = hLog;

    if (g_hLog != INVALID_HANDLE_VALUE) {
        LogComponent(TEXT("Direct3D"), TEXT("Framework"));
        LogFunction(TEXT("Initialization"));
    }
}

//******************************************************************************
void ReleaseLog() {

#ifdef UNDER_XBOX
    if (g_hLog != INVALID_HANDLE_VALUE && m_bCreated) {
        xCloseLog(g_hLog);
        m_bCreated = FALSE;
    }
    g_hLog = INVALID_HANDLE_VALUE;
#endif

    *g_szTextLog = TEXT('\0');
}

//******************************************************************************
BOOL LogComponent(LPCTSTR szComponent, LPCTSTR szSubcomponent) {

#ifdef UNDER_XBOX

    if (g_hLog != INVALID_HANDLE_VALUE) {
#ifdef UNICODE
        char szComp[512], szSub[512];
        wcstombs(szComp, szComponent, 512);
        wcstombs(szSub, szSubcomponent, 512);
        xSetComponent(g_hLog, szComp, szSub);
#else
        xSetComponent(g_hLog, (LPSTR)szComponent, (LPSTR)szSubcomponent);
#endif // UNICODE        
    }

#endif

    return TRUE;
}

//******************************************************************************
BOOL LogFunction(LPCTSTR szFunction) {

#ifdef UNDER_XBOX

    if (g_hLog != INVALID_HANDLE_VALUE) {
#ifdef UNICODE
        char szFunc[512];
        wcstombs(szFunc, szFunction, 512);
        xSetFunctionName(g_hLog, szFunc);
#else
        xSetFunctionName(g_hLog, (LPSTR)szFunction);
#endif // UNICODE
    }

#endif

    Log(LOG_COMMENT, TEXT("Function: %s"), szFunction);

    return TRUE;
}

//******************************************************************************
BOOL LogBeginVariation(LPCTSTR szFormat, ...) {

    TCHAR   szBuffer[512];
    va_list vl;

    va_start(vl, szFormat);
    wvsprintf(szBuffer, szFormat, vl);
//    _vstprintf(szBuffer+8, szFormat, vl);
    va_end(vl);

#ifdef UNDER_XBOX

//    if (!(GetStartupContext() & TSTART_HARNESS)) {

        if (g_hLog != INVALID_HANDLE_VALUE) {
#ifdef UNICODE
            char szVariation[512];
            wcstombs(szVariation, szBuffer, 512);
            xStartVariation(g_hLog, szVariation);
#else
            xStartVariation(g_hLog, szBuffer);
#endif // UNICODE
        }
//    }

#endif

    Log(LOG_TEXT, TEXT("BEGIN VARIATION: %s\n"), szBuffer);

    return TRUE;
}

//******************************************************************************
BOOL LogEndVariation() {

#ifdef UNDER_XBOX

//    if (!(GetStartupContext() & TSTART_HARNESS)) {
        if (g_hLog != INVALID_HANDLE_VALUE) {
            xEndVariation(g_hLog);
        }
//    }

#endif

    Log(LOG_TEXT, TEXT("END VARIATION\n"));

    return TRUE;
}

//******************************************************************************
BOOL Log(LOGLEVEL ll, LPCTSTR szFormat, ...) {

    va_list vl;
    TCHAR   *pchH, *pchT;
    DWORD   dwLevel;
#ifndef UNDER_XBOX
    TCHAR   szBuffer[16384];
    TCHAR   szLog[18432];
#else
    TCHAR*  szBuffer;
    TCHAR*  szLog;
    LPTSTR  pszBuffer;

    if (GetStartupContext() & TSTART_STRESS) {
        return TRUE;
    }

    pszBuffer = (LPTSTR)MemAlloc32(34816 * sizeof(TCHAR) + 18432 * sizeof(char));
    if (!pszBuffer) {
        OutputDebugString(TEXT("Insufficient memory for logging buffer allocation\n"));
        __asm int 3;
    }
    szBuffer = pszBuffer;
    szLog = pszBuffer + 16384;
#endif // UNDER_XBOX

    va_start(vl, szFormat);
//    wvsprintf(szBuffer, szFormat, vl);
    _vstprintf(szBuffer, szFormat, vl);
    va_end(vl);

    if (ll == LOG_TEXT) {

        pchH = szBuffer;
        pchT = szBuffer;

        do {
            for (; !(*pchT == TEXT('\n') || *pchT == TEXT('\0')); pchT++);
            if (*pchT == TEXT('\n')) {
                *pchT++ = TEXT('\0');
                _tcscat(g_szTextLog, pchH);
                DebugString(g_szTextLog);
                *g_szTextLog = TEXT('\0');
                pchH = pchT;
            }
        } while (*pchT != TEXT('\0'));

        _tcscat(g_szTextLog, pchH);

#ifdef UNDER_XBOX
        MemFree32(pszBuffer);
#endif // UNDER_XBOX

        return TRUE;
    }

    switch (ll) {

        case LOG_EXCEPTION:
            dwLevel = XLL_EXCEPTION;
            _tcscpy(szLog, TEXT("EXCEPTION: "));
            break;
        case LOG_FAIL:
            _tcscpy(szLog, TEXT("FAIL: "));
            dwLevel = XLL_FAIL;
            break;
        case LOG_ABORT:
            _tcscpy(szLog, TEXT("ABORT: "));
            dwLevel = XLL_BLOCK;
            break;
        case LOG_WARN:
            _tcscpy(szLog, TEXT("WARNING: "));
            dwLevel = XLL_WARN;
            break;
        case LOG_SKIP:
            _tcscpy(szLog, TEXT("SKIP: "));
            dwLevel = XLL_WARN;
            break;
        case LOG_NOTIMPL:
            _tcscpy(szLog, TEXT("NOT IMPLEMENTED: "));
            dwLevel = XLL_WARN;
            break;
        case LOG_PASS:
            _tcscpy(szLog, TEXT("PASS: "));
            dwLevel = XLL_PASS;
            break;
        case LOG_DETAIL:
            _tcscpy(szLog, TEXT("DETAIL: "));
            dwLevel = XLL_INFO;
            break;
        case LOG_COMMENT:
        default:
            *szLog = TEXT('\0');
            dwLevel = XLL_INFO;
            break;
    }

    _tcscat(szLog, szBuffer);

#ifdef UNDER_XBOX

//    if (!(GetStartupContext() & TSTART_HARNESS) || ll == LOG_FAIL || ll == LOG_EXCEPTION || ll == LOG_ABORT) {

        if (g_hLog != INVALID_HANDLE_VALUE) {
#ifdef UNICODE
#ifndef UNDER_XBOX
            char szLogA[18432];
#else
            char* szLogA = (char*)(pszBuffer + 34816);
#endif // UNDER_XBOX
            wcstombs(szLogA, szLog, 18432);
            xLog(g_hLog, dwLevel, szLogA);
    //        xputs(szLogA);
#else
            xLog(g_hLog, dwLevel, szLog);
    //        xputs(szLog);
#endif // UNICODE
        }
//    }

#endif

    // Echo logging to the debugger
    DebugString(szLog);

#ifdef UNDER_XBOX
    MemFree32(pszBuffer);
#endif // UNDER_XBOX

    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\modulex.h ===
#pragma comment(linker, "/include:_d3dlocus_consolbk")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\misc.cpp ===
/*******************************************************************************

Copyright (c) 1998 Microsoft Corporation.  All rights reserved.

File Name:

    misc.cpp

Author:

    Matt Bronder

Description:

    Miscellaneous functions.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
//
// Function:
//
//     CheckCurrentDeviceFormat
//
// Description:
//
//     Check if the given format is available in the current device
//     configuration. 
//
// Arguments:
//
//     CDevice8* pDevice        - Pointer to the device object
//
//     DWORD dwUsage            - Usage for the resource
//
//     D3DRESOURCETYPE d3drt    - Type of the resource
//
//     D3DFORMAT fmt            - Format of the resource
//
// Return Value:
//
//     An HRESULT set to D3D_OK if the format is available, D3DERR_NOTAVAILABLE
//     if the format is not available, or the code of the failed method if a 
//     failure occurs.
//
//******************************************************************************
HRESULT CheckCurrentDeviceFormat(CDevice8* pDevice, DWORD dwUsage, D3DRESOURCETYPE d3drt, D3DFORMAT fmt) {

    CDirect3D8*     pDirect3D;
    D3DCAPS8        d3dcaps;
    D3DDISPLAYMODE  d3ddm;
    HRESULT         hr;

    hr = pDevice->GetDeviceCaps(&d3dcaps);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
        return hr;
    }

    hr = pDevice->GetDirect3D(&pDirect3D);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDirect3D"))) {
        return hr;
    }

    hr = pDirect3D->GetAdapterDisplayMode(d3dcaps.AdapterOrdinal, &d3ddm);
    if (ResultFailed(hr, TEXT("IDirect3D8::GetAdapterDisplayMode"))) {
        pDirect3D->Release();
        return hr;
    }

    // Check if the current device supports the given format
    hr = pDirect3D->CheckDeviceFormat(d3dcaps.AdapterOrdinal, 
                                    d3dcaps.DeviceType, 
                                    d3ddm.Format, 
                                    dwUsage, d3drt, fmt);

    pDirect3D->Release();

    return hr;
}

//******************************************************************************
BOOL IsCompressedFormat(D3DFORMAT d3dfmt) {

    switch (d3dfmt) {
        case D3DFMT_DXT1:
        case D3DFMT_DXT2:
        case D3DFMT_DXT4:
#ifndef UNDER_XBOX
        case D3DFMT_DXT3:
        case D3DFMT_DXT5:
#endif
            return TRUE;
        default:
            return FALSE;
    }
}

//******************************************************************************
// Vertex transformation routine
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     TransformVertices
//
// Description:
//
//     Transform a set of vertices using the current world, view, and projection
//     matrices set in the device. 
//
// Arguments:
//
//     CDevice8* pDevice        - Pointer to the device object
//
//     LPVOID pvDst (Out)       - A pointer to the first vertex in the set
//                                that will contain the transformed vertices.
//                                (These vertices must consist of a D3DVECTOR
//                                to contain the position followed by a
//                                float to contain the reciprocal of 
//                                homogeneous w)
//
//     LPVOID pvSrc             - A pointer to the first position vector 
//                                in the set of vertices to be transformed
//
//     DWORD dwNumVertices      - Number of vertices to be transformed
//
//     DWORD dwStrideDst        - Size (in bytes) from one destination vertex
//                                to the next
//
//     DWORD dwStrideSrc        - Size (in bytes) from one source vertex
//                                (position vector) to the next
//
//     LPDWORD pdwClip (Out)    - A pointer to an array of DWORDs which, on
//                                return, will contain clip flags for each of
//                                the transformed vertices
//
// Return Value:
//
//     An HRESULT set to D3D_OK if the transformation is successful, or the error
//     code of the failed method if a failure occurs.
//
//******************************************************************************
HRESULT TransformVertices(CDevice8* pDevice, LPVOID pvDst, LPVOID pvSrc, 
                          DWORD dwNumVertices, DWORD dwStrideDst, DWORD dwStrideSrc, 
                          LPDWORD pdwClip) 
{
    D3DXMATRIX              mWorld, mView, mProj, mClip, mR1, mR2;
    D3DVIEWPORT8            viewport;
    UINT                    i;
    HRESULT                 hr;
    float                   fW;
    LPBYTE                  pdst, psrc;
    D3DVECTOR*              prSrc;
    struct _TVERTEX {
        D3DVECTOR v;
        float     fRHW;
    }                       *prDst;

    // Get the viewport dimensions
    memset(&viewport, 0, sizeof(D3DVIEWPORT8));
    hr = pDevice->GetViewport(&viewport);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetViewport"))) {
        return hr;
    }

    // Build a transformation matrix from the current world, view, and
    // projection matrices

    hr = pDevice->GetTransform(D3DTS_PROJECTION, &mProj);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetTransform"))) {
        return hr;
    }

    InitMatrix(&mClip,
         0.5f,  0.0f,  0.0f,  0.0f,
         0.0f,  0.5f,  0.0f,  0.0f,
         0.0f,  0.0f,  1.0f,  0.0f,
         0.5f,  0.5f,  0.0f,  1.0f
    );

    D3DXMatrixMultiply(&mR1, &mProj, &mClip);

    hr = pDevice->GetTransform(D3DTS_VIEW, &mView);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetTransform"))) {
        return hr;
    }

    D3DXMatrixMultiply(&mR2, &mView, &mR1);

    hr = pDevice->GetTransform(D3DTS_WORLD, &mWorld);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetTransform"))) {
        return hr;
    }

    D3DXMatrixMultiply(&mR1, &mWorld, &mR2);

    // Clear the clipping flags
    if (pdwClip) {
        memset(pdwClip, 0, dwNumVertices * sizeof(DWORD));
    }

    // Apply the transformation matrix to the given vertices
    for (i = 0, pdst = (LPBYTE)pvDst, psrc = (LPBYTE)pvSrc; 
         i < dwNumVertices; 
         i++, pdst += dwStrideDst, psrc += dwStrideSrc) 
    {
        prSrc = (D3DVECTOR*)psrc;
        prDst = (struct _TVERTEX*)pdst;

        // Calculate the homogeneous coordinates
        fW = mR1._14 * prSrc->x + mR1._24 * prSrc->y + mR1._34 * prSrc->z + mR1._44;
        prDst->fRHW = 1.0f / fW;
        prDst->v.x = (prSrc->x * mR1._11 + prSrc->y * mR1._21 + prSrc->z * mR1._31 + mR1._41) * prDst->fRHW;
        prDst->v.y = (prSrc->x * mR1._12 + prSrc->y * mR1._22 + prSrc->z * mR1._32 + mR1._42) * prDst->fRHW;
        prDst->v.z = (prSrc->x * mR1._13 + prSrc->y * mR1._23 + prSrc->z * mR1._33 + mR1._43) * prDst->fRHW;

        // Clip test the coordinates
        if (pdwClip) {
            pdwClip[i] |= (prDst->v.x > 0.0f) ? 0 : CLIP_LEFT;
            pdwClip[i] |= (prDst->v.x < fW)   ? 0 : CLIP_RIGHT;
            pdwClip[i] |= (prDst->v.y > 0.0f) ? 0 : CLIP_BOTTOM;
            pdwClip[i] |= (prDst->v.y < fW)   ? 0 : CLIP_TOP;
            pdwClip[i] |= (prDst->v.z > 0.0f) ? 0 : CLIP_FRONT;
            pdwClip[i] |= (prDst->v.z < fW)   ? 0 : CLIP_BACK;
        }

        // Scale and offset x and y into screen coordinates
        prDst->v.x = prDst->v.x *  (float)viewport.Width  + (float)viewport.X;
        prDst->v.y = prDst->v.y * -(float)viewport.Height + (float)viewport.Height + (float)viewport.Y;
    }

    return hr;
}

//******************************************************************************
// Directional lighting function
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     LightVertices
//
// Description:
//
//     Calculate the diffuse and specular lighting intensities for the given
//     vertices using the given material and light.  The lighting information
//     is stored in the vertices, overwriting the normal information.  The
//     light is assumed to be directional and the vertices are assume to be
//     in world space.
//
// Arguments:
//
//     PVERTEX prSrc            - List of vertices to be lit
//
//     PLVERTEX prDst           - Result of the lighting operation
//
//     UINT uNumVertices        - Number of vertices to light
//
//     D3DMATERIAL8* pmaterial  - Material color
//
//     D3DLIGHT8* plight        - Light color and direction
//
//     D3DCOLOR cAmbient        - Ambient color
//
//     D3DXVECTOR3* pvViewPos   - View position
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL LightVertices(PVERTEX prSrc, PLVERTEX prDst, UINT uNumVertices, 
                      D3DMATERIAL8* pmaterial, D3DLIGHT8* plight, 
                      D3DCOLOR cAmbient, D3DXVECTOR3* pvViewPos)
{
    return LightVertices((LPVOID)&prSrc->vNormal, sizeof(VERTEX),
                         &prDst->cDiffuse, sizeof(LVERTEX),
                         uNumVertices, pmaterial, plight,
                         cAmbient, (LPVOID)&prSrc->vPosition, 
                         sizeof(VERTEX), &prDst->cSpecular,
                         sizeof(LVERTEX), pvViewPos);
}

//******************************************************************************
//
// Function:
//
//     LightVertices
//
// Description:
//
//     Calculate the diffuse and specular lighting intensities for the given
//     vertices using the given material and light.  The lighting information
//     is stored in the vertices, overwriting the normal information.  The
//     light is assumed to be directional and the vertices are assume to be
//     in world space.
//
// Arguments:
//
//     LPVOID pvNormal          - Pointer to the first vertex normal component
//                                in the source vertex list
//
//     DWORD dwStrideNormal     - Distance in bytes to the next vertex normal
//
//     LPVOID pcDiffuse         - Pointer to the first diffuse color component
//                                in the destination vertex list
//
//     DWORD dwStrideDiffuse    - Distance in bytes to the next vertex diffuse 
//                                color
//
//     UINT uNumVertices        - Number of vertices to light
//
//     D3DMATERIAL8* pmaterial  - Material color
//
//     D3DLIGHT8* plight        - Light color and direction
//
//     D3DCOLOR cAmbient        - Ambient color
//
//     LPVOID pvPosition        - Pointer to the first vertex position component
//                                in the source vertex list (for specular
//                                lighting.  If NULL specular lighting will not
//                                be performed)
//
//     DWORD dwStridePosition   - Distance in bytes to the next vertex position
//
//     LPVOID pcSpecular        - Pointer to the first specular color component
//                                in the destination vertex list
//
//     DWORD dwStrideSpecular   - Distance in bytes to the next vertex specular
//                                color
//
//     D3DXVECTOR3* pvViewPos   - View position
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL LightVertices(LPVOID pvNormal, DWORD dwStrideNormal,
                   D3DCOLOR* pcDiffuse, DWORD dwStrideDiffuse,
                   UINT uNumVertices, D3DMATERIAL8* pmaterial, 
                   D3DLIGHT8* plight, D3DCOLOR cAmbient, 
                   LPVOID pvPosition, DWORD dwStridePosition,
                   D3DCOLOR* pcSpecular, DWORD dwStrideSpecular,
                   D3DXVECTOR3* pvViewPos)
{
    D3DXVECTOR3  vMDiffuse, vMAmbient, vMSpecular, vMEmissive, vRAmbient, vLDiffuse, 
                 vLSpecular, vLAmbient, vBase, vSBase, vOffset, vLightDir, vNorm, v1, v2;
    D3DXVECTOR3* pvPos, *pvNorm;
    float        fIntensity, fSIntensity;
    UINT         i;

    if (!pvNormal || !pcDiffuse || !pmaterial || !plight) {
        return FALSE;
    }
    if (pvPosition && !(pcSpecular && pvViewPos)) {
        return FALSE;
    }

    vRAmbient.x = ((float)(RGB_GETRED(cAmbient)) / 255.0f);
    vRAmbient.y = ((float)(RGB_GETGREEN(cAmbient)) / 255.0f);
    vRAmbient.z = ((float)(RGB_GETBLUE(cAmbient)) / 255.0f);

    vMDiffuse.x = pmaterial->Diffuse.r;
    vMDiffuse.y = pmaterial->Diffuse.g;
    vMDiffuse.z = pmaterial->Diffuse.b;

    vMAmbient.x = pmaterial->Ambient.r;
    vMAmbient.y = pmaterial->Ambient.g;
    vMAmbient.z = pmaterial->Ambient.b;

    vMSpecular.x = pmaterial->Specular.r;
    vMSpecular.y = pmaterial->Specular.g;
    vMSpecular.z = pmaterial->Specular.b;

    vMEmissive.x = pmaterial->Emissive.r;
    vMEmissive.y = pmaterial->Emissive.g;
    vMEmissive.z = pmaterial->Emissive.b;

    vLDiffuse.x = plight->Diffuse.r;
    vLDiffuse.y = plight->Diffuse.g;
    vLDiffuse.z = plight->Diffuse.b;

    vLAmbient.x = plight->Ambient.r;
    vLAmbient.y = plight->Ambient.g;
    vLAmbient.z = plight->Ambient.b;

    vLSpecular.x = plight->Specular.r;
    vLSpecular.y = plight->Specular.g;
    vLSpecular.z = plight->Specular.b;

    v1 = vRAmbient + vLAmbient;
    v2.x = v1.x * vMAmbient.x;
    v2.y = v1.y * vMAmbient.y;
    v2.z = v1.z * vMAmbient.z;

    vOffset = v2 + vMEmissive;

    vBase.x = vLDiffuse.x * vMDiffuse.x;
    vBase.y = vLDiffuse.y * vMDiffuse.y;
    vBase.z = vLDiffuse.z * vMDiffuse.z;

    vSBase.x = vLSpecular.x * vMSpecular.x;
    vSBase.y = vLSpecular.y * vMSpecular.y;
    vSBase.z = vLSpecular.z * vMSpecular.z;

    D3DXVec3Normalize(&vLightDir, (D3DXVECTOR3*)&plight->Direction);

    for (i = 0, pvPos = (D3DXVECTOR3*)pvPosition, pvNorm = (D3DXVECTOR3*)pvNormal; 
         i < uNumVertices; 
         i++, pvPos = (D3DXVECTOR3*)((LPBYTE)pvPos + dwStridePosition), 
         pvNorm = (D3DXVECTOR3*)((LPBYTE)pvNorm + dwStrideNormal), 
         pcDiffuse = (D3DCOLOR*)((LPBYTE)pcDiffuse + dwStrideDiffuse), 
         pcSpecular = (D3DCOLOR*)((LPBYTE)pcSpecular + dwStrideSpecular)) 
    {
        fIntensity = -D3DXVec3Dot(pvNorm, &vLightDir);
        if (fIntensity < 0.0f) fIntensity = 0.0f;
        vMDiffuse = (fIntensity * vBase + vOffset) * 255.0f;
        if (vMDiffuse.x > 255.0f) vMDiffuse.x = 255.0f;
        if (vMDiffuse.y > 255.0f) vMDiffuse.y = 255.0f;
        if (vMDiffuse.z > 255.0f) vMDiffuse.z = 255.0f;
        *pcDiffuse = RGBA_MAKE((BYTE)vMDiffuse.x, (BYTE)vMDiffuse.y, (BYTE)vMDiffuse.z, 255);
        if (pvPosition) {
            D3DXVec3Normalize(&vNorm, &(*pvPos - *pvViewPos));
            D3DXVec3Normalize(&vNorm, &(vNorm + vLightDir));
            fSIntensity = -D3DXVec3Dot(pvNorm, &vNorm);
            if (fSIntensity < 0.0f) fSIntensity = 0.0f;
            fSIntensity = (float)(pow(fSIntensity, pmaterial->Power));
            vMSpecular = fSIntensity * vSBase * 255.0f;
            if (vMSpecular.x > 255.0f) vMSpecular.x = 255.0f;
            if (vMSpecular.y > 255.0f) vMSpecular.y = 255.0f;
            if (vMSpecular.z > 255.0f) vMSpecular.z = 255.0f;
            *pcSpecular = RGBA_MAKE((BYTE)vMSpecular.x, (BYTE)vMSpecular.y, (BYTE)vMSpecular.z, 255);
        }
    }

    return TRUE;
}

//******************************************************************************
// Matrix utility functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     InitMatrix
//
// Description:
//
//     Initialize the given matrix with the given values.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Matrix to initialize
//
//     float _11 to _44         - Initialization values
//
// Return Value:
//
//     None.
//
//******************************************************************************
void InitMatrix(D3DMATRIX* pd3dm,
                float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44) 
{
    if (pd3dm) {

        pd3dm->_11 = _11;
        pd3dm->_12 = _12;
        pd3dm->_13 = _13;
        pd3dm->_14 = _14;
        pd3dm->_21 = _21;
        pd3dm->_22 = _22;
        pd3dm->_23 = _23;
        pd3dm->_24 = _24;
        pd3dm->_31 = _31;
        pd3dm->_32 = _32;
        pd3dm->_33 = _33;
        pd3dm->_34 = _34;
        pd3dm->_41 = _41;
        pd3dm->_42 = _42;
        pd3dm->_43 = _43;
        pd3dm->_44 = _44;
    }
}

//******************************************************************************
//
// Function:
//
//     SetView
//
// Description:
//
//     Align the given view matrix along the given direction and up vectors with
//     the position vector as the origin.
//
// Arguments:
//
//     LPD3DXMATRIX pd3dm       - View matrix to initialize
//
//     LPD3DXVECTOR3 pvPos      - View origin
//
//     LPD3DXVECTOR3 pvAt       - View interest vector
//
//     LPD3DXVECTOR3 pvUp       - View up vector
//
// Return Value:
//
//     Initialized view matrix.
//
//******************************************************************************
void SetView(D3DXMATRIX* pd3dm, LPD3DXVECTOR3 pvPos, LPD3DXVECTOR3 pvAt, 
                                                      LPD3DXVECTOR3 pvUp) 
{
    D3DXVECTOR3  d, u, r;

    if (pd3dm && pvPos && pvAt && pvUp && !(*pvPos == *pvAt) 
                                 && !(*pvUp == D3DXVECTOR3(0.0f, 0.0f, 0.0f))) {

        D3DXVec3Normalize(&d, &(*pvAt - *pvPos));
        u = *pvUp;

        // Project the up vector into the plane of the direction vector
        D3DXVec3Normalize(&u, &(u - (d * D3DXVec3Dot(&u, &d))));

        // Get the cross product
        D3DXVec3Cross(&r, &u, &d);

        // Initialize the view transform
        InitMatrix(pd3dm,
            r.x, u.x, d.x, 0.0f,
            r.y, u.y, d.y, 0.0f,
            r.z, u.z, d.z, 0.0f,
            -(pvPos->x * r.x + pvPos->y * r.y + pvPos->z * r.z), 
            -(pvPos->x * u.x + pvPos->y * u.y + pvPos->z * u.z), 
            -(pvPos->x * d.x + pvPos->y * d.y + pvPos->z * d.z), 
            1.0f
        );
    }
}

//******************************************************************************
//
// Function:
//
//     SetPerspectiveProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fFieldOfView, float fAspect) {

    float fTanHalfFOV = (float)tan((double)fFieldOfView / 2.0);
    float fFar = fBack / (fBack - fFront);

    InitMatrix(pd3dm,
        1.0f, 0.0f,           0.0f,                         0.0f,
        0.0f, 1.0f / fAspect, 0.0f,                         0.0f,
        0.0f, 0.0f,           fTanHalfFOV * fFar,           fTanHalfFOV,
        0.0f, 0.0f,           -fFront * fTanHalfFOV * fFar, 0.0f
    );
}

//******************************************************************************
//
// Function:
//
//     SetParallelProjection
//
// Description:
//
//     Initialize the given projection matrix using the given front and back
//     clipping planes, field of view, and aspect ratio.
//
// Arguments:
//
//     LPD3DMATRIX pd3dm        - Projection matrix to initialize
//
//     float fFront             - Front clipping plane
//
//     float fBack              - Back clipping plane
//
//     float fFieldOfView       - Angle, in radians, of the field of view
//
//     float fAspect            - Aspect ratio (y / x) of the view plane
//
// Return Value:
//
//     Initialized projection matrix.
//
//******************************************************************************
void SetParallelProjection(D3DMATRIX* pd3dm, float fFront, float fBack, 
                                    float fWidth, float fHeight) {

    InitMatrix(pd3dm,
        2.0f / fWidth, 0.0f, 0.0f, 0.0f,
        0.0f, 2.0f / fHeight, 0.0f, 0.0f,
        0.0f, 0.0f, 1.0f / (fBack - fFront), 0.0f,
        0.0f, 0.0f, fFront / (fFront - fBack), 1.0f
    );
}

//******************************************************************************
BOOL CreateSphere(PVERTEX* pprVertices, LPDWORD pdwNumVertices,
                  LPWORD* ppwIndices, LPDWORD pdwNumIndices,
                  float fRadius, UINT uStepsU, UINT uStepsV,
                  float fTileU, float fTileV) {

    PVERTEX     prVertices;
    PVERTEX     pr;
    DWORD       dwNumVertices;
    LPWORD      pwIndices;
    DWORD       dwNumIndices;
    UINT        uIndex = 0;
    UINT        i, j;
    float       fX, fY, fTX, fSinY, fCosY;

    if (!pprVertices || !pdwNumVertices || !ppwIndices || !pdwNumIndices) {
        return FALSE;
    }

    *pprVertices = NULL;
    *pdwNumVertices = 0;
    *ppwIndices = NULL;
    *pdwNumIndices = 0;

    dwNumVertices = (uStepsU + 1) * uStepsV;

    // Allocate memory for the vertices
    prVertices = (PVERTEX)MemAlloc32(dwNumVertices * sizeof(VERTEX));
    if (!prVertices) {
        return FALSE;
    }

    // Allocate memory for the indices
    dwNumIndices = uStepsU * (uStepsV - 1) * 6;

    pwIndices = (LPWORD)MemAlloc32(dwNumIndices * sizeof(WORD));
    if (!pwIndices) {
        MemFree32(prVertices);
        return FALSE;
    }

    // Create the sphere
    for (j = 0; j < uStepsV; j++) {

        fY = (float)j / (float)(uStepsV - 1);
        fSinY = (float)(sin(fY * M_PI));
        fCosY = (float)(cos(fY * M_PI));

        for (i = 0; i <= uStepsU; i++) {

            pr = &prVertices[(uStepsU + 1) * j + i];
            fX = (float)i / (float)uStepsU;
            fTX = fX * M_2PI;

            pr->vNormal = D3DXVECTOR3((float)cos(fTX) * fSinY, fCosY, (float)sin(fTX) * fSinY);
            pr->vPosition = pr->vNormal * fRadius;
            pr->u0 = fX * fTileU;
            pr->v0 = fY * fTileV;
        }
    }

    for (j = 0; j < uStepsV - 1; j++) {

        for (i = 0; i < uStepsU; i++) {

            pwIndices[uIndex++] = (j + 1) * (uStepsU + 1) + i;
            pwIndices[uIndex++] = j * (uStepsU + 1) + i;
            pwIndices[uIndex++] = (j + 1) * (uStepsU + 1) + i + 1;
            pwIndices[uIndex++] = j * (uStepsU + 1) + i;
            pwIndices[uIndex++] = j * (uStepsU + 1) + i + 1;
            pwIndices[uIndex++] = (j + 1) * (uStepsU + 1) + i + 1;
        }
    }

    *pprVertices = prVertices;
    *pdwNumVertices = dwNumVertices;
    *ppwIndices = pwIndices;
    *pdwNumIndices = dwNumIndices;

    return TRUE;
}

//******************************************************************************
void ReleaseSphere(PVERTEX* ppr, LPWORD* ppw) {

    if (ppr && *ppr) {
        MemFree32(*ppr);
        *ppr = NULL;
    }
    if (ppw && *ppw) {
        MemFree32(*ppw);
        *ppw = NULL;
    }
}

//******************************************************************************
BOOL CaptureTexture(LPDIRECT3DTEXTURE8 pd3dt, LPCTSTR szName, BOOL bTiled) {

    LPDIRECT3DSURFACE8 pd3ds;
    BOOL bRet;
    HRESULT hr;

    hr = pd3dt->GetSurfaceLevel(0, &pd3ds);
    if (FAILED(hr)) {
        return FALSE;
    }

    bRet = CaptureSurface(pd3ds, szName, bTiled);

    pd3ds->Release();

    return bRet;
}

//******************************************************************************
BOOL CaptureSurface(LPDIRECT3DSURFACE8 pd3ds, LPCTSTR szName, BOOL bTiled) {

    BITMAPFILEHEADER    bfh;
    BITMAPINFOHEADER    bmih;
    HANDLE              hFile;
    DWORD               dwWritten;
    D3DSURFACE_DESC     d3dsd;
    D3DLOCKED_RECT      d3dlr;
    UINT                uBPP;
    char                szFile[MAX_PATH];
    UINT                uAlpha, i, j, k;
    LPVOID              pvBuffer;
    DWORD               dwSize;
    struct _COLOR24 {
        BYTE blue;
        BYTE green;
        BYTE red;
    } c, *pc;

    if (!pd3ds || !szName || *szName == TEXT('\0')) {
        return FALSE;
    }

    pd3ds->GetDesc(&d3dsd);

#ifdef UNDER_XBOX
    uBPP = XGBytesPerPixelFromFormat(d3dsd.Format);
#else
    uBPP = FormatToBitDepth(d3dsd.Format) / 8;
#endif
    if (!(uBPP == 2 || uBPP == 4)) {
        OutputDebugString(TEXT("CAPTURETEXTURE: Unsupported texture format"));
        return FALSE;
    }

#ifdef UNDER_XBOX
    Swizzler swz(d3dsd.Width, d3dsd.Height, 1);
#endif

    memset(&bfh, 0, sizeof(BITMAPFILEHEADER));
    memset(&bmih, 0, sizeof(BITMAPINFOHEADER));

    bfh.bfType = 0x4D42;
    bfh.bfSize = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + d3dsd.Width * d3dsd.Height * 3;
    bfh.bfOffBits = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);

    bmih.biSize = sizeof(BITMAPINFOHEADER);
    bmih.biWidth = d3dsd.Width;
    bmih.biHeight = d3dsd.Height;
    bmih.biPlanes = 1;
    bmih.biBitCount = 24;

#ifndef UNDER_XBOX
    pd3ds->LockRect(&d3dlr, NULL, 0);
#else
    pd3ds->LockRect(&d3dlr, NULL, bTiled ? D3DLOCK_TILED : 0);
#endif

    for (uAlpha = 0; uAlpha < 2; uAlpha++) {

        if (uAlpha && (
#ifdef UNDER_XBOX
            d3dsd.Format == D3DFMT_LIN_X8R8G8B8 ||
            d3dsd.Format == D3DFMT_LIN_R5G6B5 ||
            d3dsd.Format == D3DFMT_LIN_X1R5G5B5 ||
#endif
            d3dsd.Format == D3DFMT_X8R8G8B8 ||
            d3dsd.Format == D3DFMT_R5G6B5 ||
            d3dsd.Format == D3DFMT_X1R5G5B5
        )) {
            break;
        }

        if (!uAlpha) {
            sprintf(szFile, "t:\\%S.bmp", szName);
        }
        else {
            sprintf(szFile, "t:\\%S_alpha.bmp", szName);
        }

        // Create the bitmap file
        hFile = CreateFile(szFile, GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
        if (hFile == INVALID_HANDLE_VALUE) {
            pd3ds->UnlockRect();
            return FALSE;
        }

        if (!WriteFile(hFile, &bfh, sizeof(BITMAPFILEHEADER), &dwWritten, NULL)) {
            pd3ds->UnlockRect();
            CloseHandle(hFile);
            return FALSE;
        }

        if (!WriteFile(hFile, &bmih, sizeof(BITMAPINFOHEADER), &dwWritten, NULL)) {
            pd3ds->UnlockRect();
            CloseHandle(hFile);
            return FALSE;
        }

        dwSize = d3dsd.Width * d3dsd.Height * sizeof(c);
        pvBuffer = MemAlloc(dwSize);
        if (!pvBuffer) {
            pd3ds->UnlockRect();
            CloseHandle(hFile);
            return FALSE;
        }
        pc = (struct _COLOR24*)pvBuffer;

#ifdef UNDER_XBOX
        if (XGIsSwizzledFormat(d3dsd.Format)) {

            swz.SetU(0);
            swz.SetV(swz.SwizzleV(d3dsd.Height - 1));

            switch (d3dsd.Format) {

                case D3DFMT_X1R5G5B5:
                case D3DFMT_A1R5G5B5: {
                    LPWORD pwTexel = (LPWORD)d3dlr.pBits;
                    WORD wTexel;
                    for (i = 0; i < d3dsd.Height; i++, swz.DecV()) {
                        for (j = 0; j < d3dsd.Width; j++, swz.IncU(), pc++) {
                            wTexel = pwTexel[swz.Get2D()];
                            if (!uAlpha) {
                                pc->red = (BYTE)((wTexel & 0x7C00) >> 7);
                                pc->green = (BYTE)((wTexel & 0x03E0) >> 2);
                                pc->blue = (BYTE)((wTexel & 0x1F) << 3);
                            }
                            else {
                                if (wTexel >> 15) {
                                    pc->red = pc->green = pc->blue = 0xFF;
                                }
                                else {
                                    pc->red = pc->green = pc->blue = 0;
                                }
                            }
                        }
                    }
                    break;
                }

                case D3DFMT_R5G6B5: {
                    LPWORD pwTexel = (LPWORD)d3dlr.pBits;
                    WORD wTexel;
                    for (i = 0; i < d3dsd.Height; i++, swz.DecV()) {
                        for (j = 0; j < d3dsd.Width; j++, swz.IncU(), pc++) {
                            wTexel = pwTexel[swz.Get2D()];
                            pc->red = (BYTE)((wTexel & 0xF800) >> 8);
                            pc->green = (BYTE)((wTexel & 0x07E0) >> 3);
                            pc->blue = (BYTE)((wTexel & 0x1F) << 3);
                        }
                    }
                    break;
                }

                case D3DFMT_X8R8G8B8:
                case D3DFMT_A8R8G8B8: {
                    LPDWORD pdwTexel = (LPDWORD)d3dlr.pBits;
                    DWORD dwTexel;
                    for (i = 0; i < d3dsd.Height; i++, swz.DecV()) {
                        for (j = 0; j < d3dsd.Width; j++, swz.IncU(), pc++) {
                            dwTexel = pdwTexel[swz.Get2D()];
                            if (!uAlpha) {
                                pc->red = (BYTE)((dwTexel >> 16) & 0xFF);
                                pc->green = (BYTE)((dwTexel >> 8) & 0xFF);
                                pc->blue = (BYTE)(dwTexel & 0xFF);
                            }
                            else {
                                pc->red = pc->green = pc->blue = (BYTE)((dwTexel >> 24) & 0xFF);
                            }
                        }
                    }
                }
            }
        }
        else {
#endif
            switch (d3dsd.Format) {

#ifdef UNDER_XBOX
                case D3DFMT_LIN_X1R5G5B5:
                case D3DFMT_LIN_A1R5G5B5: {
#else
                case D3DFMT_X1R5G5B5:
                case D3DFMT_A1R5G5B5: {
#endif
                    LPWORD pwTexel = (LPWORD)d3dlr.pBits + (d3dsd.Height - 1) * (d3dlr.Pitch >> 1);
                    WORD wTexel;
                    for (i = 0; i < d3dsd.Height; i++) {
                        for (j = 0; j < d3dsd.Width; j++, pc++) {
                            wTexel = pwTexel[j];
                            if (!uAlpha) {
                                pc->red = (BYTE)((wTexel & 0x7C00) >> 7);
                                pc->green = (BYTE)((wTexel & 0x03E0) >> 2);
                                pc->blue = (BYTE)((wTexel & 0x1F) << 3);
                            }
                            else {
                                if (wTexel >> 15) {
                                    pc->red = pc->green = pc->blue = 0xFF;
                                }
                                else {
                                    pc->red = pc->green = pc->blue = 0;
                                }
                            }
                        }
                        pwTexel -= d3dlr.Pitch >> 1;
                    }
                    break;
                }

#ifdef UNDER_XBOX
                case D3DFMT_LIN_R5G6B5: {
#else
                case D3DFMT_R5G6B5: {
#endif
                    LPWORD pwTexel = (LPWORD)d3dlr.pBits + (d3dsd.Height - 1) * (d3dlr.Pitch >> 1);
                    WORD wTexel;
                    for (i = 0; i < d3dsd.Height; i++) {
                        for (j = 0; j < d3dsd.Width; j++, pc++) {
                            wTexel = pwTexel[j];
                            pc->red = (BYTE)((wTexel & 0xF800) >> 8);
                            pc->green = (BYTE)((wTexel & 0x07E0) >> 3);
                            pc->blue = (BYTE)((wTexel & 0x1F) << 3);
                        }
                        pwTexel -= d3dlr.Pitch >> 1;
                    }
                    break;
                }

#ifdef UNDER_XBOX
                case D3DFMT_LIN_X8R8G8B8:
                case D3DFMT_LIN_A8R8G8B8: {
#else
                case D3DFMT_X8R8G8B8:
                case D3DFMT_A8R8G8B8: {
#endif
                    LPDWORD pdwTexel = (LPDWORD)d3dlr.pBits + (d3dsd.Height - 1) * (d3dlr.Pitch >> 2);
                    DWORD dwTexel;
                    for (i = 0; i < d3dsd.Height; i++) {
                        for (j = 0; j < d3dsd.Width; j++, pc++) {
                            dwTexel = pdwTexel[j];
                            if (!uAlpha) {
                                pc->red = (BYTE)((dwTexel >> 16) & 0xFF);
                                pc->green = (BYTE)((dwTexel >> 8) & 0xFF);
                                pc->blue = (BYTE)(dwTexel & 0xFF);
                            }
                            else {
                                pc->red = pc->green = pc->blue = (BYTE)((dwTexel >> 24) & 0xFF);
                            }
                        }
                        pdwTexel -= d3dlr.Pitch >> 2;
                    }
                    break;
                }
            }
#ifdef UNDER_XBOX
        }
#endif

        if (!WriteFile(hFile, pvBuffer, dwSize, &dwWritten, NULL)) {
            pd3ds->UnlockRect();
            CloseHandle(hFile);
            return FALSE;
        }

        MemFree(pvBuffer);

        CloseHandle(hFile);
    }

    pd3ds->UnlockRect();

    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\misc.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    misc.h

Author:

    Matt Bronder

Description:

    Miscellaneous functions.

*******************************************************************************/

#ifndef __MISC_H__
#define __MISC_H__

//******************************************************************************
// Precomputed fractions of pi
//******************************************************************************

#define M_PI        3.14159265359f
#define M_2PI       6.28318530718f
#define M_PIDIV2    1.57079632680f
#define M_3PIDIV2   4.71238898039f
#define M_PIDIV4    0.78539816340f
#define M_3PIDIV4   2.35619449019f
#define M_5PIDIV4   3.92699081699f
#define M_7PIDIV4   5.49778714378f

//******************************************************************************
// Macros
//******************************************************************************

#define countof(x)  (sizeof(x) / sizeof(*(x)))

#define RND()       ((float)rand() / (float)RAND_MAX)
#define FRND(x)     (RND() * (x))
#define NRND()      (-1.0f + 2.0f * RND())
#define SFRND(x)    (NRND() * (x))
//#define FABS(x)     ((float)((DWORD)(x) & 0x7FFF))
#define FABS(x)     ((x) < 0.0f ? -(x) : (x))

#ifndef RGB_MAKE
/*
 * Format of CI colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |         color index           |   fraction    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define CI_GETALPHA(ci)    ((ci) >> 24)
#define CI_GETINDEX(ci)    (((ci) >> 8) & 0xffff)
#define CI_GETFRACTION(ci) ((ci) & 0xff)
#define CI_ROUNDINDEX(ci)  CI_GETINDEX((ci) + 0x80)
#define CI_MASKALPHA(ci)   ((ci) & 0xffffff)
#define CI_MAKE(a, i, f)    (((a) << 24) | ((i) << 8) | (f))

/*
 * Format of RGBA colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGBA_GETALPHA(rgb)      ((rgb) >> 24)
#define RGBA_GETRED(rgb)        (((rgb) >> 16) & 0xff)
#define RGBA_GETGREEN(rgb)      (((rgb) >> 8) & 0xff)
#define RGBA_GETBLUE(rgb)       ((rgb) & 0xff)
#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

/* D3DRGB and D3DRGBA may be used as initialisers for D3DCOLORs
 * The float values must be in the range 0..1
 */
#define D3DRGB(r, g, b) \
    (0xff000000L | ( ((long)((r) * 255)) << 16) | (((long)((g) * 255)) << 8) | (long)((b) * 255))
#define D3DRGBA(r, g, b, a) \
    (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
    |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
    )

/*
 * Format of RGB colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    ignored    |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGB_GETRED(rgb)         (((rgb) >> 16) & 0xff)
#define RGB_GETGREEN(rgb)       (((rgb) >> 8) & 0xff)
#define RGB_GETBLUE(rgb)        ((rgb) & 0xff)
#define RGBA_SETALPHA(rgba, x) (((x) << 24) | ((rgba) & 0x00ffffff))
#define RGB_MAKE(r, g, b)       ((D3DCOLOR) (((r) << 16) | ((g) << 8) | (b)))
#define RGBA_TORGB(rgba)       ((D3DCOLOR) ((rgba) & 0xffffff))
#define RGB_TORGBA(rgb)        ((D3DCOLOR) ((rgb) | 0xff000000))

#endif

// Clip flags
#define CLIP_LEFT               0x0001;
#define CLIP_RIGHT              0x0002;
#define CLIP_BOTTOM             0x0004;
#define CLIP_TOP                0x0008;
#define CLIP_FRONT              0x0010;
#define CLIP_BACK               0x0020;

//******************************************************************************
// Resource format validation
//******************************************************************************

HRESULT CheckCurrentDeviceFormat(CDevice8* pDevice, DWORD dwUsage, 
                        D3DRESOURCETYPE d3drt, D3DFORMAT fmt);

BOOL IsCompressedFormat(D3DFORMAT d3dfmt);

//******************************************************************************
// Vertex transformation routine
//******************************************************************************

HRESULT TransformVertices(CDevice8* pDevice, LPVOID pvDst, LPVOID pvSrc, 
                        DWORD dwNumVertices, DWORD dwStrideDst, DWORD dwStrideSrc, 
                        LPDWORD pdwClip = NULL);

//******************************************************************************
// Directional lighting function
//******************************************************************************

BOOL LightVertices(PVERTEX prSrc, PLVERTEX prDst, UINT uNumVertices, 
                        D3DMATERIAL8* pmaterial, D3DLIGHT8* plight, 
                        D3DCOLOR cAmbient, D3DXVECTOR3* pvViewPos);

BOOL LightVertices(LPVOID pvNormal, DWORD dwStrideNormal,
                        D3DCOLOR* pcDiffuse, DWORD dwStrideDiffuse,
                        UINT uNumVertices, D3DMATERIAL8* pmaterial, 
                        D3DLIGHT8* plight, D3DCOLOR cAmbient, 
                        LPVOID pvPosition = NULL, DWORD dwStridePosition = 0,
                        D3DCOLOR* pcSpecular = NULL, DWORD dwStrideSpecular = 0,
                        D3DXVECTOR3* pvViewPos = NULL);

//******************************************************************************
// Matrix utility function prototypes
//******************************************************************************

void                InitMatrix(D3DMATRIX* pd3dm,
                        float _11, float _12, float _13, float _14,
                        float _21, float _22, float _23, float _24,
                        float _31, float _32, float _33, float _34,
                        float _41, float _42, float _43, float _44);

void                SetView(D3DXMATRIX* pd3dm, LPD3DXVECTOR3 pvPos, 
                        LPD3DXVECTOR3 pvAt, LPD3DXVECTOR3 pvUp);

void                SetPerspectiveProjection(D3DMATRIX* pd3dm, float fFront, 
                        float fBack, float fFieldOfView, float fAspect);

void                SetParallelProjection(D3DMATRIX* pd3dm, float fFront, 
                        float fBack, float fFieldOfView, float fAspect);
//******************************************************************************
// Geometry functions
//******************************************************************************

BOOL                CreateSphere(PVERTEX* pprVertices, LPDWORD pdwNumVertices,
                        LPWORD* ppwIndices, LPDWORD pdwNumIndices,
                        float fRadius = 1.0f, UINT uStepsU = 16, 
                        UINT uStepsV = 16, float fTileU = 1.0f, float fTileV = 1.0f);

void                ReleaseSphere(PVERTEX* ppr, LPWORD* ppw);

//******************************************************************************
// Surface data exported to bitmap files
//******************************************************************************

BOOL                CaptureTexture(LPDIRECT3DTEXTURE8 pd3dt, LPCTSTR szName, BOOL bTiled = FALSE);
BOOL                CaptureSurface(LPDIRECT3DSURFACE8 pd3dt, LPCTSTR szName, BOOL bTiled = FALSE);

//******************************************************************************
// Miscellaneous functions
//******************************************************************************

inline DWORD        F2DW(float f) {return *((LPDWORD)&f);}

#endif // __MISC_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\mesh.cpp ===
/*******************************************************************************

Copyright (c) 1998 Microsoft Corporation.  All rights reserved.

File Name:

    mesh.cpp

Description:

    Direct3D mesh routines.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// Mesh functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateMesh
//
// Description:
//
//     Create vertex and index geometry for use with DrawIndexedPrimitve from
//     a given .xdg file or resources.
//
// Arguments:
//
//     LPCTSTR szMesh                       - File or resource name of the 
//                                            .xdg file to create the mesh 
//                                            from
//
//     PMESH pmesh (Out)                    - Structure to be initialized
//                                            with the geometry of the mesh
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateMesh(LPCTSTR szMesh, PMESH pmesh) {

    MESH    mesh;
    LPBYTE  pData;
    DWORD   dwSize;

    if (!pmesh) {
        return FALSE;
    }

    memset(pmesh, 0, sizeof(MESH));

    if (!LoadResourceData(szMesh, (LPVOID*)&pData, &dwSize)) {

#ifndef UNDER_XBOX

        HGLOBAL     hg;
        HRSRC       hrsrc;

        if (hrsrc = FindResource(GetTestInstance(), szMesh, RT_RCDATA)) {
            if (hg = LoadResource(GetTestInstance(), hrsrc)) {
                pData = (LPBYTE)LockResource(hg);
            }
        }
#else
        pData = NULL;
#endif // UNDER_XBOX
    }

    if (pData) {

        // Get the number of vertices
        memcpy(&(mesh.uNumVertices), pData, sizeof(DWORD));
        pData += sizeof(DWORD);

        // Get the vertices
        mesh.prVertices = (PVERTEX)MemAlloc32(mesh.uNumVertices * 
                                                  sizeof(VERTEX));
        if (!mesh.prVertices) {
            return FALSE;
        }

        memcpy(mesh.prVertices, pData, mesh.uNumVertices * sizeof(VERTEX));
        pData += (mesh.uNumVertices * sizeof(VERTEX));

        // Get the number of indices
        memcpy(&(mesh.uNumIndices), pData, sizeof(DWORD));
        pData += sizeof(DWORD);

        // Get the indices
        mesh.pwIndices = (LPWORD)MemAlloc32(mesh.uNumIndices * sizeof(WORD));
        if (!mesh.pwIndices) {
            MemFree32(mesh.prVertices);
            return FALSE;
        }

        memcpy(mesh.pwIndices, pData, mesh.uNumIndices * sizeof(WORD));

        UnloadResourceData(szMesh);
    }
    else {

        // The mesh is a file
        DWORD   dwRead;
        HANDLE  hFile;
#ifdef UNDER_XBOX
        char    aszMesh[MAX_PATH];

        wcstombs(aszMesh, szMesh, MAX_PATH);
        hFile = CreateFile(aszMesh, GENERIC_READ, 0, NULL, OPEN_EXISTING, 
                                  FILE_ATTRIBUTE_NORMAL, NULL);
#else
        hFile = CreateFile(szMesh, GENERIC_READ, 0, NULL, OPEN_EXISTING, 
                                  FILE_ATTRIBUTE_NORMAL, NULL);
#endif // !UNDER_XBOX

        if (hFile == INVALID_HANDLE_VALUE) {
            DebugString(TEXT("Mesh %s was not found"), szMesh);
            return FALSE;
        }

        // Get the number of vertices
        if (!ReadFile(hFile, &(mesh.uNumVertices), sizeof(DWORD), &dwRead, NULL) 
            || dwRead != sizeof(DWORD)) 
        {
            CloseHandle(hFile);
            return FALSE;
        }

        // Get the vertices
        mesh.prVertices = (PVERTEX)MemAlloc32(mesh.uNumVertices * 
                                                  sizeof(VERTEX));
        if (!mesh.prVertices) {
            CloseHandle(hFile);
            return FALSE;
        }

        if (!ReadFile(hFile, mesh.prVertices, 
            mesh.uNumVertices * sizeof(VERTEX), &dwRead, NULL) 
            || dwRead != mesh.uNumVertices * sizeof(VERTEX)) 
        {
            MemFree32(mesh.prVertices);
            CloseHandle(hFile);
            return FALSE;
        }

        // Get the number of indices
        if (!ReadFile(hFile, &(mesh.uNumIndices), sizeof(DWORD), &dwRead, NULL) 
            || dwRead != sizeof(DWORD)) 
        {
            MemFree32(mesh.prVertices);
            CloseHandle(hFile);
            return FALSE;
        }

        // Get the indices
        mesh.pwIndices = (LPWORD)MemAlloc32(mesh.uNumIndices * sizeof(WORD));
        if (!mesh.pwIndices) {
            MemFree32(mesh.prVertices);
            CloseHandle(hFile);
            return FALSE;
        }

        if (!ReadFile(hFile, mesh.pwIndices, 
            mesh.uNumIndices * sizeof(WORD), &dwRead, NULL) 
            || dwRead != mesh.uNumIndices * sizeof(WORD)) 
        {
            MemFree32(mesh.prVertices);
            MemFree32(mesh.pwIndices);
            CloseHandle(hFile);
            return FALSE;
        }

        CloseHandle(hFile);
    }

    memcpy(pmesh, &mesh, sizeof(MESH));
    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseMesh
//
// Description:
//
//     Release the allocated vertex and index geometry of a created mesh.
//
// Arguments:
//
//     PMESH pmesh                          - Pointer to the mesh structure
//                                            to release
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseMesh(PMESH pmesh) {

    if (pmesh) {
        if (pmesh->prVertices) {
            MemFree32(pmesh->prVertices);
        }
        if (pmesh->pwIndices) {
            MemFree32(pmesh->pwIndices);
        }
    }
    memset(pmesh, 0, sizeof(MESH));
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\object.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    object.h

Description:

    Fundamental base class.

*******************************************************************************/

#ifndef __OBJECT_H__
#define __OBJECT_H__

//******************************************************************************
// CObject
//******************************************************************************

class CObject {

private:

    ULONG                       m_uRef;

public:

                                CObject();
    virtual                     ~CObject();

    virtual ULONG               AddRef();
    virtual ULONG               Release();

    virtual ULONG               RefCount();
};

#endif //__OBJECT_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\object.cpp ===
/*******************************************************************************

Copyright (c) 1998 Microsoft Corporation.  All rights reserved.

File Name:

    object.cpp

Description:

    Fundamental base class.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// CObject
//******************************************************************************

//******************************************************************************
CObject::CObject() {

    m_uRef = 1;
}

//******************************************************************************
CObject::~CObject() {

    m_uRef = 0;
}

//******************************************************************************
ULONG CObject::AddRef() {

    return ++m_uRef;
}

//******************************************************************************
ULONG CObject::Release() {

    UINT uRef = --m_uRef;
    if (uRef == 0) {
        delete this;
    }
    return uRef;
}

//******************************************************************************
ULONG CObject::RefCount() {

    return m_uRef;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\noise.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    noise.cpp

Author:

    Matt Bronder

Description:

    Perlin noise generation.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// CPerlinNoise
//******************************************************************************

UINT CPerlinNoise::m_puPrimes[3][PRIME_TABLE_ENTRIES] = {0};

//******************************************************************************
//
// Method:
//
//     CPerlinNoise
//
// Description:
//
//     Construct a CPerlinNoise object.
//
// Arguments:
//
//     float fPersistence               - Persistence of the noise (the
//                                        amplitude of each frequency)
//
//     UINT uOctaves                    - Number of octaves to add together
//
//     DWORD dwSeed                     - Seed value for the noise
//
//     INTERPOLATIONTYPE irp            - Function to use in interpolating
//                                        between noise sample points
//
//     BOOL bClamp                      - Indicates whether to scale the 
//                                        computed noise function so it falls
//                                        entirely within its given range or to 
//                                        allow the positive interference of 
//                                        successive octaves to naturally exceed 
//                                        the the given range and then clamp the 
//                                        function to that range.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise::CPerlinNoise(float fPersistence, UINT uOctaves, DWORD dwSeed, 
                                            INTERPOLATIONTYPE irp, BOOL bClamp) 
{
    if (!m_puPrimes[0][0]) {

        UINT i, j, k;
        UINT uBase[] = {
                10000,
                770000,
                1376310000,
        };

        // Find the first PRIME_TABLE_ENTRIES prime numbers that proceed 3 base numbers
        for (i = 0; i < 3; i++) {
            for (j = 0, k = uBase[i]; j < PRIME_TABLE_ENTRIES; k++) {
                if (IsPrime(k)) {
                    m_puPrimes[i][j++] = k;
                }
            }
        }
    }

    m_fPersistence = fPersistence;
    m_uOctaves = uOctaves;
    m_dwSeed = dwSeed;
    switch (irp) {
        case INTERPOLATE_LINEAR:
            m_pfnInterpolate = CPerlinNoise::InterpolateLinear;
            break;
        case INTERPOLATE_COSINE:
        default:
            m_pfnInterpolate = CPerlinNoise::InterpolateCosine;
            break;
    }
    m_bClamp = bClamp;
    m_fRangeBase = 0.0f;
    m_fRangeMagnitude = 1.0f;

    if (uOctaves > MAX_OCTAVES) {
        DebugBreak();
    }

    InitPrimesList(uOctaves, dwSeed);
}

//******************************************************************************
//
// Method:
//
//     ~CPerlinNoise
//
// Description:
//
//     Destruct a CPerlinNoise object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise::~CPerlinNoise() {
}

//******************************************************************************
//
// Method:
//
//     SetPersistence
//
// Description:
//
//     Set the persistence value for the noise function.
//
// Arguments:
//
//     float fPersistence               - Persistence of the noise (the
//                                        amplitude of each frequency)
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::SetPersistence(float fPersistence) {

    m_fPersistence = fPersistence;
}

//******************************************************************************
//
// Method:
//
//     SetOctaves
//
// Description:
//
//     Set the number of octaves to use in the noise function
//
// Arguments:
//
//     UINT uOctaves                    - Number of octaves to add together
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::SetOctaves(UINT uOctaves) {

    if (uOctaves > MAX_OCTAVES) {
        return;
    }

    m_uOctaves = uOctaves;

    InitPrimesList(uOctaves, m_dwSeed);
}

//******************************************************************************
//
// Method:
//
//     SetSeed
//
// Description:
//
//     Set the pseudo-random seed value to use in sampling noise values at
//     discrete points.
//
// Arguments:
//
//     DWORD dwSeed                     - Seed value for the noise
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::SetSeed(DWORD dwSeed) {

    m_dwSeed = dwSeed;

    InitPrimesList(m_uOctaves, dwSeed);
}

//******************************************************************************
//
// Method:
//
//     SetInterpolation
//
// Description:
//
//     Identify the interpolation function to be used in calculating noise 
//     values between sample points.
//
// Arguments:
//
//     INTERPOLATIONTYPE irp            - Function to use in interpolating
//                                        between noise sample points
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::SetInterpolation(INTERPOLATIONTYPE irp) {

    switch (irp) {
        case INTERPOLATE_LINEAR:
            m_pfnInterpolate = CPerlinNoise::InterpolateLinear;
            break;
        case INTERPOLATE_COSINE:
            m_pfnInterpolate = CPerlinNoise::InterpolateCosine;
            break;
    }
}

//******************************************************************************
//
// Method:
//
//     EnableClamp
//
// Description:
//
//     Indicate whether to scale or clamp the noise function to the given range.
//
// Arguments:
//
//     BOOL bEnable                     - Indicates whether to scale the 
//                                        computed noise function so it falls
//                                        entirely within its given range or to 
//                                        allow the positive interference of 
//                                        successive octaves to naturally exceed 
//                                        the the given range and then clamp the 
//                                        function to that range.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::EnableClamp(BOOL bEnable) {

    m_bClamp = bEnable;
}

//******************************************************************************
//
// Method:
//
//     SetRange
//
// Description:
//
//     Set the upper and lower limits for the noise function.
//
// Arguments:
//
//     float fMin                       - Minimum value for the noise
//
//     float fMax                       - Maximum value for the noise
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::SetRange(float fMin, float fMax) {

    if (fMax > fMin) {

        m_fRangeBase = fMin;
        m_fRangeMagnitude = fMax - fMin;
    }
}

//******************************************************************************
//
// Method:
//
//     InterpolateLinear
//
// Description:
//
//     Calculate the value of a point lying a given distance on a line between
//     two given end points.
//
// Arguments:
//
//     float f1                         - Value of the first end point
//
//     float f2                         - Value of the second end point
//
//     float fBeta                      - Percentage of the distance between the 
//                                        points (where 0.0 is f1 and 1.0 is f2)
//
// Return Value:
//
//     Interpolated value between the given points.
//
//******************************************************************************
float CPerlinNoise::InterpolateLinear(float f1, float f2, float fBeta) {

    return f1 * (1.0f - fBeta) + f2 * fBeta;
}

//******************************************************************************
//
// Method:
//
//     InterpolateCosine
//
// Description:
//
//     Calculate the value of a point lying a given distance between two given
//     end points using the cosine of the percentage of the distance to provide
//     a smooth curve between the points.
//
// Arguments:
//
//     float f1                         - Value of the first end point
//
//     float f2                         - Value of the second end point
//
//     float fBeta                      - Percentage of the distance between the 
//                                        points (where 0.0 is f1 and 1.0 is f2)
//
// Return Value:
//
//     Interpolated value between the given points.
//
//******************************************************************************
float CPerlinNoise::InterpolateCosine(float f1, float f2, float fBeta) {

    float f = (1.0f - (float)cos(fBeta * 3.14159265359f)) * 0.5f;
    return f1 * (1.0f - f) + f2 * f;
}

//******************************************************************************
//
// Method:
//
//     Rand32
//
// Description:
//
//     Return a pseudo-random 32 bit number corresponding to the given seed.
//
// Arguments:
//
//     DWORD dwSeed                     - Seed value
//
// Return Value:
//
//     The random number corresponding to the given seed.
//
//******************************************************************************
DWORD CPerlinNoise::Rand32(DWORD dwSeed) {

    dwSeed = (dwSeed << 13) ^ dwSeed;
    return ((dwSeed * (dwSeed * dwSeed * 9973 + 769999) + 1376309969) & 0xFFFFFFFF);
}

//******************************************************************************
//
// Method:
//
//     IsPrime
//
// Description:
//
//     Evaluate the given integer and determine whether or not it is a prime
//     number.
//
// Arguments:
//
//     UINT u                           - Unsigned integer to evaluate
//
// Return Value:
//
//     TRUE if the number is a prime, FALSE if not.
//
//******************************************************************************
BOOL CPerlinNoise::IsPrime(UINT u) {

    UINT i = 1, j, k = 0;

    do {
        j = k;
        k = i;
        i = (k + (u / k));
        i >>= 1;
    } while(j != i);

    for (j = 2; j <= i; j++) {
        if (u % j == 0) {
            return FALSE;
        }
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     InitPrimesList
//
// Description:
//
//     Initialize a table of prime numbers to enable separate pseudo-random
//     noise functions to be used for each octave of perlin noise generation.
//
// Arguments:
//
//     UINT uOctaves                    - Number of octaves used in noise
//                                        generation.
//
//     DWORD dwSeed                     - Seed to use in constructing the table
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise::InitPrimesList(UINT uOctaves, DWORD dwSeed) {

    DWORD dwRandFunc, dwRand;
    UINT  i;

    for (i = 0, dwRandFunc = dwSeed; i < uOctaves; i++) {

        dwRand = Rand32(dwRandFunc);
        m_plPrimesList[i].uPrime1 = m_puPrimes[0][dwRand % PRIME_TABLE_ENTRIES];
        dwRand = Rand32(dwRand);
        m_plPrimesList[i].uPrime2 = m_puPrimes[1][dwRand % PRIME_TABLE_ENTRIES];
        dwRand = Rand32(dwRand);
        m_plPrimesList[i].uPrime3 = m_puPrimes[2][dwRand % PRIME_TABLE_ENTRIES];
        dwRandFunc = Rand32(dwRandFunc);
    }
}

//******************************************************************************
// CPerlinNoise1D
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CPerlinNoise1D
//
// Description:
//
//     Construct a CPerlinNoise1D object.
//
// Arguments:
//
//     float fPersistence               - Persistence of the noise (the
//                                        amplitude of each frequency)
//
//     UINT uOctaves                    - Number of octaves to add together
//
//     DWORD dwSeed                     - Seed value for the noise
//
//     INTERPOLATIONTYPE irp            - Function to use in interpolating
//                                        between noise sample points
//
//     BOOL bClamp                      - Indicates whether to scale the 
//                                        computed noise function so it falls
//                                        entirely within its given range or to 
//                                        allow the positive interference of 
//                                        successive octaves to naturally exceed 
//                                        the the given range and then clamp the 
//                                        function to that range.
//
//     BOOL bSmooth                     - Indicates whether or not to use a
//                                        filter to smooth the noise
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise1D::CPerlinNoise1D(float fPersistence, UINT uOctaves, DWORD dwSeed, 
                    INTERPOLATIONTYPE irp, BOOL bClamp, BOOL bSmooth) :
                    CPerlinNoise(fPersistence, uOctaves, dwSeed, irp, bClamp)
{
    if (bSmooth) {
        m_pfnNoise = CPerlinNoise1D::SmoothNoise1D;
    }
    else {
        m_pfnNoise = CPerlinNoise1D::Noise1D;
    }
}

//******************************************************************************
//
// Method:
//
//     ~CPerlinNoise1D
//
// Description:
//
//     Destruct a CPerlinNoise1D object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise1D::~CPerlinNoise1D() {
}

//******************************************************************************
//
// Method:
//
//     EnableSmoothing
//
// Description:
//
//     Enable or disable the use of a filter to smooth the noise.
//
// Arguments:
//
//     BOOL bEnable                     - TRUE to enable the filter, FALSE
//                                        to disable it
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise1D::EnableSmoothing(BOOL bEnable) {

    if (bEnable) {
        m_pfnNoise = CPerlinNoise1D::SmoothNoise1D;
    }
    else {
        m_pfnNoise = CPerlinNoise1D::Noise1D;
    }
}

//******************************************************************************
//
// Method:
//
//     GetIntensity
//
// Description:
//
//     Calculate the intensity (amplitude) of the noise function at the given
//     coordinate.
//
// Arguments:
//
//     float x                          - x coordinate
//
// Return Value:
//
//     The intensity of the noise at the given coordinate.
//
//******************************************************************************
float CPerlinNoise1D::GetIntensity(float x) {

    float fIntensity = 0.0f, fAmplitude, fFrequency, fTotalAmp = 0.0f;

    fAmplitude = 1.0f;

    for (m_uOctave = 0; m_uOctave < m_uOctaves; m_uOctave++) {

//        fFrequency = (float)pow(2.0, (double)m_uOctave);
        fFrequency = (float)(0x1 << m_uOctave);
//        fAmplitude = (float)pow(m_fPersistence, (double)m_uOctave);
        fIntensity = fIntensity + InterpolatedNoise1D(x * fFrequency) * fAmplitude;
        fTotalAmp += fAmplitude;
        fAmplitude *= m_fPersistence;
    }

    if (m_bClamp) {
        fTotalAmp = 1.0f;
        if (fIntensity < -1.0f) {
            fIntensity = -1.0f;
        }
        else if (fIntensity > 1.0f) {
            fIntensity = 1.0f;
        }
    }

    return m_fRangeBase + m_fRangeMagnitude * ((fIntensity + fTotalAmp) / (fTotalAmp * 2.0f));
}

//******************************************************************************
//
// Method:
//
//     InterpolatedNoise1D
//
// Description:
//
//     Calculate the noise value that corresponds to the given coordinate
//     for the given octave.  Noise values are calculated
//     for the integer points that bound the given coordinate and the noise
//     value for the coordinate is then interpolated from the results based
//     on where the coordinate lies between the bounding points and on the
//     interpolation function set for the object.
//
// Arguments:
//
//     float x                          - x coordinate
//
// Return Value:
//
//     The interpolated value of the noise at the given coordinate.
//
//******************************************************************************
float CPerlinNoise1D::InterpolatedNoise1D(float x) {

    int     nx;
    float   fx;

    nx = (int)floor(x);
    fx = x - (float)nx;

    return (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx), (this->*m_pfnNoise)(nx+1), fx);
}

//******************************************************************************
//
// Method:
//
//     Noise1D
//
// Description:
//
//     Calculate the noise value that corresponds to the given coordinate
//     for the given octave.
//
// Arguments:
//
//     int x                            - x coordinate
//
// Return Value:
//
//     The value of the noise at the given coordinate.
//
//******************************************************************************
float CPerlinNoise1D::Noise1D(int x) {

    DWORD   dwSeed;

    dwSeed = (x << 13) ^ x;

    return (1.0f - ((dwSeed * (dwSeed * dwSeed * m_plPrimesList[m_uOctave].uPrime1 + m_plPrimesList[m_uOctave].uPrime2) + m_plPrimesList[m_uOctave].uPrime3) & 0x7FFFFFFF) / 1073741824.0f);
}

//******************************************************************************
//
// Method:
//
//     SmoothNoise1D
//
// Description:
//
//     Calculate the filtered noise value that corresponds to the given 
//     coordinate for the given octave.  Noise values are calculated
//     for neighboring coordinates and then used to bias the noise for the
//     given coordinate.
//
// Arguments:
//
//     int x                            - x coordinate
//
//     int y                            - y coordinate
//
// Return Value:
//
//     The value of the filtered noise at the given coordinate.
//
//******************************************************************************
float CPerlinNoise1D::SmoothNoise1D(int x) {

    return Noise1D(x) / 2.0f + Noise1D(x-1) / 4.0f + Noise1D(x+1) / 4.0f;
}

//******************************************************************************
// CPerlinNoise2D
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CPerlinNoise2D
//
// Description:
//
//     Construct a CPerlinNoise2D object.
//
// Arguments:
//
//     float fPersistence               - Persistence of the noise (the
//                                        amplitude of each frequency)
//
//     UINT uOctaves                    - Number of octaves to add together
//
//     DWORD dwSeed                     - Seed value for the noise
//
//     INTERPOLATIONTYPE irp            - Function to use in interpolating
//                                        between noise sample points
//
//     BOOL bClamp                      - Indicates whether to scale the 
//                                        computed noise function so it falls
//                                        entirely within its given range or to 
//                                        allow the positive interference of 
//                                        successive octaves to naturally exceed 
//                                        the the given range and then clamp the 
//                                        function to that range.
//
//     BOOL bSmooth                     - Indicates whether or not to use a
//                                        filter to smooth the noise
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise2D::CPerlinNoise2D(float fPersistence, UINT uOctaves, DWORD dwSeed, 
                    INTERPOLATIONTYPE irp, BOOL bClamp, BOOL bSmooth) :
                    CPerlinNoise(fPersistence, uOctaves, dwSeed, irp, bClamp)
{
    if (bSmooth) {
        m_pfnNoise = CPerlinNoise2D::SmoothNoise2D;
    }
    else {
        m_pfnNoise = CPerlinNoise2D::Noise2D;
    }
}

//******************************************************************************
//
// Method:
//
//     ~CPerlinNoise2D
//
// Description:
//
//     Destruct a CPerlinNoise2D object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise2D::~CPerlinNoise2D() {
}

//******************************************************************************
//
// Method:
//
//     EnableSmoothing
//
// Description:
//
//     Enable or disable the use of a filter to smooth the noise.
//
// Arguments:
//
//     BOOL bEnable                     - TRUE to enable the filter, FALSE
//                                        to disable it
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise2D::EnableSmoothing(BOOL bEnable) {

    if (bEnable) {
        m_pfnNoise = CPerlinNoise2D::SmoothNoise2D;
    }
    else {
        m_pfnNoise = CPerlinNoise2D::Noise2D;
    }
}

//******************************************************************************
//
// Method:
//
//     GetIntensity
//
// Description:
//
//     Calculate the intensity (amplitude) of the noise function at the given
//     coordinates.
//
// Arguments:
//
//     float x                          - x coordinate
//
//     float y                          - y coordinate
//
// Return Value:
//
//     The intensity of the noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise2D::GetIntensity(float x, float y) {

    float fIntensity = 0.0f, fAmplitude, fFrequency, fTotalAmp = 0.0f;

    fAmplitude = 1.0f;

    for (m_uOctave = 0; m_uOctave < m_uOctaves; m_uOctave++) {

//        fFrequency = (float)pow(2.0, (double)m_uOctave);
        fFrequency = (float)(0x1 << m_uOctave);
//        fAmplitude = (float)pow(m_fPersistence, (double)m_uOctave);
        fIntensity = fIntensity + InterpolatedNoise2D(x * fFrequency, y * fFrequency) * fAmplitude;
        fTotalAmp += fAmplitude;
        fAmplitude *= m_fPersistence;
    }

    if (m_bClamp) {
        fTotalAmp = 1.0f;
        if (fIntensity < -1.0f) {
            fIntensity = -1.0f;
        }
        else if (fIntensity > 1.0f) {
            fIntensity = 1.0f;
        }
    }

    return m_fRangeBase + m_fRangeMagnitude * ((fIntensity + fTotalAmp) / (fTotalAmp * 2.0f));
}

//******************************************************************************
//
// Method:
//
//     InterpolatedNoise2D
//
// Description:
//
//     Calculate the noise value that corresponds to the given two 
//     dimesnional coordinates for the given octave.  Noise values are calculated
//     for the integer points that bound the given coordinates and the noise
//     value for the coordinates are then interpolated from the results based
//     on where the coordinates lie between the bounding points and on the
//     interpolation function set for the object.
//
// Arguments:
//
//     float x                          - x coordinate
//
//     float y                          - y coordinate
//
// Return Value:
//
//     The interpolated value of the noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise2D::InterpolatedNoise2D(float x, float y) {

    int     nx, ny;
    float   fx, fy;
    float   i1, i2;

    nx = (int)floor(x);
    ny = (int)floor(y);
    fx = x - (float)nx;
    fy = y - (float)ny;

    i1 = (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx, ny  ), (this->*m_pfnNoise)(nx+1, ny  ), fx);
    i2 = (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx, ny+1), (this->*m_pfnNoise)(nx+1, ny+1), fx);

    return (this->*m_pfnInterpolate)(i1, i2, fy);
}

//******************************************************************************
//
// Method:
//
//     Noise2D
//
// Description:
//
//     Calculate the noise value that corresponds to the given two dimesnional
//     coordinates for the given octave.
//
// Arguments:
//
//     int x                            - x coordinate
//
//     int y                            - y coordinate
//
// Return Value:
//
//     The value of the noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise2D::Noise2D(int x, int y) {

    DWORD   dwSeed;

    dwSeed = x + y * 57;
    dwSeed = (dwSeed << 13) ^ dwSeed;

    return (1.0f - ((dwSeed * (dwSeed * dwSeed * m_plPrimesList[m_uOctave].uPrime1 + m_plPrimesList[m_uOctave].uPrime2) + m_plPrimesList[m_uOctave].uPrime3) & 0x7FFFFFFF) / 1073741824.0f);
}

//******************************************************************************
//
// Method:
//
//     SmoothNoise2D
//
// Description:
//
//     Calculate the filtered noise value that corresponds to the given two 
//     dimesnional coordinates for the given octave.  Noise values are calculated
//     for neighboring coordinates and then used to bias the noise for the
//     given coordinates.
//
// Arguments:
//
//     int x                            - x coordinate
//
//     int y                            - y coordinate
//
// Return Value:
//
//     The value of the filtered noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise2D::SmoothNoise2D(int x, int y) {

    float fCorners, fSides, fCenter;

    fCorners = (Noise2D(x-1, y-1) + Noise2D(x+1, y-1) + 
                Noise2D(x-1, y+1) + Noise2D(x+1, y+1)) / 16.0f;
    fSides =   (Noise2D(x-1, y) + Noise2D(x+1, y) +
                Noise2D(x, y-1) + Noise2D(x, y+1)) / 8.0f;
    fCenter =   Noise2D(x, y) / 4.0f;

    return fCorners + fSides + fCenter;
}

//******************************************************************************
// CPerlinNoise3D
//******************************************************************************

//******************************************************************************
//
// Method:
//
//     CPerlinNoise3D
//
// Description:
//
//     Construct a CPerlinNoise3D object.
//
// Arguments:
//
//     float fPersistence               - Persistence of the noise (the
//                                        amplitude of each frequency)
//
//     UINT uOctaves                    - Number of octaves to add together
//
//     DWORD dwSeed                     - Seed value for the noise
//
//     INTERPOLATIONTYPE irp            - Function to use in interpolating
//                                        between noise sample points
//
//     BOOL bClamp                      - Indicates whether to scale the 
//                                        computed noise function so it falls
//                                        entirely within its given range or to 
//                                        allow the positive interference of 
//                                        successive octaves to naturally exceed 
//                                        the the given range and then clamp the 
//                                        function to that range.
//
//     BOOL bSmooth                     - Indicates whether or not to use a
//                                        filter to smooth the noise
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise3D::CPerlinNoise3D(float fPersistence, UINT uOctaves, DWORD dwSeed, 
                    INTERPOLATIONTYPE irp, BOOL bClamp, BOOL bSmooth) :
                    CPerlinNoise(fPersistence, uOctaves, dwSeed, irp, bClamp)
{
    if (bSmooth) {
        m_pfnNoise = CPerlinNoise3D::SmoothNoise3D;
    }
    else {
        m_pfnNoise = CPerlinNoise3D::Noise3D;
    }
}

//******************************************************************************
//
// Method:
//
//     ~CPerlinNoise3D
//
// Description:
//
//     Destruct a CPerlinNoise3D object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CPerlinNoise3D::~CPerlinNoise3D() {
}

//******************************************************************************
//
// Method:
//
//     EnableSmoothing
//
// Description:
//
//     Enable or disable the use of a filter to smooth the noise.
//
// Arguments:
//
//     BOOL bEnable                     - TRUE to enable the filter, FALSE
//                                        to disable it
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CPerlinNoise3D::EnableSmoothing(BOOL bEnable) {

    if (bEnable) {
        m_pfnNoise = CPerlinNoise3D::SmoothNoise3D;
    }
    else {
        m_pfnNoise = CPerlinNoise3D::Noise3D;
    }
}

//******************************************************************************
//
// Method:
//
//     GetIntensity
//
// Description:
//
//     Calculate the intensity (amplitude) of the noise function at the given
//     coordinates.
//
// Arguments:
//
//     float x                          - x coordinate
//
//     float y                          - y coordinate
//
//     float z                          - z coordinate
//
// Return Value:
//
//     The intensity of the noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise3D::GetIntensity(float x, float y, float z) {

    float fIntensity = 0.0f, fAmplitude, fFrequency, fTotalAmp = 0.0f;

    fAmplitude = 1.0f;

    for (m_uOctave = 0; m_uOctave < m_uOctaves; m_uOctave++) {

//        fFrequency = (float)pow(2.0, (double)m_uOctave);
        fFrequency = (float)(0x1 << m_uOctave);
//        fAmplitude = (float)pow(m_fPersistence, (double)m_uOctave);
        fIntensity = fIntensity + InterpolatedNoise3D(x * fFrequency, y * fFrequency, z * fFrequency) * fAmplitude;
        fTotalAmp += fAmplitude;
        fAmplitude *= m_fPersistence;
    }

    if (m_bClamp) {
        fTotalAmp = 1.0f;
        if (fIntensity < -1.0f) {
            fIntensity = -1.0f;
        }
        else if (fIntensity > 1.0f) {
            fIntensity = 1.0f;
        }
    }

    return m_fRangeBase + m_fRangeMagnitude * ((fIntensity + fTotalAmp) / (fTotalAmp * 2.0f));
}

//******************************************************************************
//
// Method:
//
//     InterpolatedNoise3D
//
// Description:
//
//     Calculate the noise value that corresponds to the given three
//     dimesnional coordinates for the given octave.  Noise values are calculated
//     for the integer points that bound the given coordinates and the noise
//     value for the coordinates are then interpolated from the results based
//     on where the coordinates lie between the bounding points and on the
//     interpolation function set for the object.
//
// Arguments:
//
//     float x                          - x coordinate
//
//     float y                          - y coordinate
//
//     float z                          - z coordinate
//
// Return Value:
//
//     The interpolated value of the noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise3D::InterpolatedNoise3D(float x, float y, float z) {

    int     nx, ny, nz;
    float   fx, fy, fz;
    float   i1, i2, i3, i4, i5, i6;

    nx = (int)floor(x);
    ny = (int)floor(y);
    nz = (int)floor(z);
    fx = x - (float)nx;
    fy = y - (float)ny;
    fz = z - (float)nz;

    i3 = (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx,   ny,   nz),   
                                   (this->*m_pfnNoise)(nx+1, ny  , nz),   fx);
    i4 = (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx,   ny+1, nz),   
                                   (this->*m_pfnNoise)(nx+1, ny+1, nz),   fx);

    i5 = (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx,   ny,   nz+1), 
                                   (this->*m_pfnNoise)(nx+1, ny,   nz+1), fx);
    i6 = (this->*m_pfnInterpolate)((this->*m_pfnNoise)(nx,   ny+1, nz+1), 
                                   (this->*m_pfnNoise)(nx+1, ny+1, nz+1), fx);

    i1 = (this->*m_pfnInterpolate)(i3, i4, fy);
    i2 = (this->*m_pfnInterpolate)(i5, i6, fy);

    return (this->*m_pfnInterpolate)(i1, i2, fz);
}

//******************************************************************************
//
// Method:
//
//     Noise3D
//
// Description:
//
//     Calculate the noise value that corresponds to the given three dimesnional
//     coordinates for the given octave.
//
// Arguments:
//
//     int x                            - x coordinate
//
//     int y                            - y coordinate
//
//     int z                            - z coordinate
//
// Return Value:
//
//     The value of the noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise3D::Noise3D(int x, int y, int z) {

    DWORD   dwSeed;

    dwSeed = x + y * 57 + z * 117;
    dwSeed = (dwSeed << 13) ^ dwSeed;

    return (1.0f - ((dwSeed * (dwSeed * dwSeed * m_plPrimesList[m_uOctave].uPrime1 + m_plPrimesList[m_uOctave].uPrime2) + m_plPrimesList[m_uOctave].uPrime3) & 0x7FFFFFFF) / 1073741824.0f);
}

//******************************************************************************
//
// Method:
//
//     SmoothNoise3D
//
// Description:
//
//     Calculate the filtered noise value that corresponds to the given three
//     dimesnional coordinates for the given octave.  Noise values are calculated
//     for neighboring coordinates and then used to bias the noise for the
//     given coordinates.
//
// Arguments:
//
//     int x                            - x coordinate
//
//     int y                            - y coordinate
//
//     int z                            - z coordinate
//
// Return Value:
//
//     The value of the filtered noise at the given coordinates.
//
//******************************************************************************
float CPerlinNoise3D::SmoothNoise3D(int x, int y, int z) {

    float fEnds, fCorners, fSides, fCenter;

    fEnds =    (Noise3D(x-1, y-1, z-1) + Noise3D(x+1, y-1, z-1) +
                Noise3D(x-1, y+1, z-1) + Noise3D(x+1, y+1, z-1) +
                Noise3D(x-1, y-1, z+1) + Noise3D(x+1, y-1, z+1) +
                Noise3D(x-1, y+1, z+1) + Noise3D(x+1, y+1, z+1)) / 64.0f;
    fCorners = (Noise3D(x-1, y-1, z) + Noise3D(x+1, y-1, z) + 
                Noise3D(x-1, y+1, z) + Noise3D(x+1, y+1, z) +
                Noise3D(x-1, y, z-1) + Noise3D(x+1, y, z-1) +
                Noise3D(x, y-1, z-1) + Noise3D(x, y+1, z-1) +
                Noise3D(x-1, y, z+1) + Noise3D(x+1, y, z+1) +
                Noise3D(x, y-1, z+1) + Noise3D(x, y+1, z+1)) / 32.0f;
    fSides =   (Noise3D(x-1, y, z) + Noise3D(x+1, y, z) +
                Noise3D(x, y-1, z) + Noise3D(x, y+1, z) +
                Noise3D(x, y, z-1) + Noise3D(x, y, z+1)) / 16.0f;
    fCenter =   Noise3D(x, y, z) / 8.0f;

    return fEnds + fCorners + fSides + fCenter;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\log.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    log.h

Description:

    Direct3D logging functions.

*******************************************************************************/

#ifndef __LOG_H__
#define __LOG_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define LOG_EXCEPTION           0
#define LOG_FAIL                2
#define LOG_ABORT               4
#define LOG_WARN                5
#define LOG_SKIP                6
#define LOG_NOTIMPL             8
#define LOG_PASS                10
#define LOG_DETAIL              12
#define LOG_COMMENT             14
#define LOG_TEXT                16
//#define LOG_BREAK?
//#define LOG_RESULT?

#ifndef UNDER_XBOX

// XLL_ logging levels
#define XLL_LOGNONE             0x00000000L  // Disables all logging
#define XLL_LOGALL              0xFFFFFFFFL  // Enables logging at all levels

#define XLL_EXCEPTION           0x00000001L  // Enables logging of exception events
#define XLL_BREAK               0x00000002L  // Enables logging to break into the debugger
#define XLL_FAIL                0x00000004L  // Enables logging of failure events
#define XLL_WARN                0x00000008L  // Enables logging of warning events
#define XLL_BLOCK               0x00000010L  // Enables logging of blocking events
#define XLL_PASS                0x00000020L  // Enables logging of pass events
#define XLL_INFO                0x00000040L  // Enables logging of informational events
#define XLL_VARIATION           0x00000080L  // Enables logging of variation start/end events

// XLO_ logging options
#define XLO_DEBUG	            0x00000001L  // Log output is echoed to the debugger
#define XLO_CONFIG	            0x00000002L  // Enables logging of system configuration when the log object is created
#define XLO_STATE	            0x00000004L  // Enables logging of system state when the log object is created and again when the log object is closed
#define XLO_REFRESH	            0x00000008L  // Creates a new log file.  If the log file already exists, overwrites the file and clears the existing attributes.

typedef struct _WEB_SERVER_INFO_W {
    LPWSTR  lpszHttpServer;                    // Pointer to a null-terminated string (UNICODE) that specifies the http server to which the web posts will be directed.  This member is NULL if no web posts will be made.
    LPWSTR  lpszConfigPage;                    // Pointer to a null-terminated string (UNICODE) that specifies the web page to which the system configuration will be web posted.  This member is NULL if no web posts will be made.
    LPWSTR  lpszStatePage;                     // Pointer to a null-terminated string (UNICODE) that specifies the web page to which the system state will be web posted.  This member is NULL if no web posts will be made.
    LPWSTR  lpszLogPage;                       // Pointer to a null-terminated string (UNICODE) that specifies the web page to which the log output will be web posted.  This member is NULL if no web posts will be made.
    LPWSTR  lpszWebPostFileName;               // Pointer to a null-terminated string (UNICODE) that specifies the file to which the web posts will be cache.  This member is NULL if web posts will not be cached and instead be made immediately.
} WEB_SERVER_INFO_W, *PWEB_SERVER_INFO_W;

#endif // !UNDER_XBOX

//******************************************************************************
// Data types
//******************************************************************************

typedef DWORD LOGLEVEL;

//******************************************************************************
// Logging function prototypes
//******************************************************************************

void                            CreateLog(HANDLE hLog);
void                            ReleaseLog();
BOOL                            LogComponent(LPCTSTR szComponent, LPCTSTR szSubcomponent);
BOOL                            LogFunction(LPCTSTR szFunction);
BOOL                            LogBeginVariation(LPCTSTR szFormat, ...);
BOOL                            LogEndVariation();
BOOL                            Log(LOGLEVEL ll, LPCTSTR szFormat, ...);

#endif //__LOG_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\noise.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    noise.h

Author:

    Matt Bronder

Description:

    Perlin noise generation.

*******************************************************************************/

#ifndef __NOISE_H__
#define __NOISE_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define PRIME_TABLE_ENTRIES     256
#define MAX_OCTAVES             20

//******************************************************************************
// Forward declarations
//******************************************************************************

class CPerlinNoise;
class CPerlinNoise1D;
class CPerlinNoise2D;
class CPerlinNoise3D;

//******************************************************************************
// Data types
//******************************************************************************

typedef float (CPerlinNoise::* INTERPOLATEPROC)(float f1, float f2, float fBeta);
typedef float (CPerlinNoise1D::* NOISE1DPROC)(int x);
typedef float (CPerlinNoise2D::* NOISE2DPROC)(int x, int y);
typedef float (CPerlinNoise3D::* NOISE3DPROC)(int x, int y, int z);

typedef enum _INTERPOLATIONTYPE {
    INTERPOLATE_LINEAR = 0,
    INTERPOLATE_COSINE = 1,
} INTERPOLATIONTYPE, *PINTERPOLATIONTYPE;

//******************************************************************************
// CPerlinNoise
//******************************************************************************

//******************************************************************************
class CPerlinNoise {

protected:

    static UINT         m_puPrimes[3][PRIME_TABLE_ENTRIES];
    float               m_fPersistence;
    UINT                m_uOctaves;
    DWORD               m_dwSeed;
    INTERPOLATEPROC     m_pfnInterpolate;
    BOOL                m_bClamp;
    float               m_fRangeBase;
    float               m_fRangeMagnitude;
    DWORD               m_uOctave;
    struct
    {
        UINT            uPrime1;
        UINT            uPrime2;
        UINT            uPrime3;
    }                   m_plPrimesList[MAX_OCTAVES];

public:

                        CPerlinNoise(float fPersistence = 0.75f, UINT uOctaves = 6, DWORD dwSeed = 0, INTERPOLATIONTYPE irp = INTERPOLATE_COSINE, BOOL bClamp = TRUE);
                        ~CPerlinNoise();

    void                SetPersistence(float fPersistence);
    void                SetOctaves(UINT uOctaves);
    void                SetSeed(DWORD dwSeed);
    void                SetInterpolation(INTERPOLATIONTYPE irp);
    void                EnableClamp(BOOL bEnable);
    void                SetRange(float fMin, float fMax);

protected:

    float               InterpolateLinear(float f1, float f2, float fBeta);
    float               InterpolateCosine(float f1, float f2, float fBeta);
    DWORD               Rand32(DWORD dwSeed);
    BOOL                IsPrime(UINT u);
    void                InitPrimesList(UINT uOctaves, DWORD dwSeed);
};

//******************************************************************************
// CPerlinNoise1D
//******************************************************************************

//******************************************************************************
class CPerlinNoise1D : public CPerlinNoise {

protected:

    NOISE1DPROC         m_pfnNoise;

public:

                        CPerlinNoise1D(float fPersistence = 0.75f, UINT uOctaves = 6, DWORD dwSeed = 0, INTERPOLATIONTYPE irp = INTERPOLATE_COSINE, BOOL bClamp = TRUE, BOOL bSmooth = FALSE);
                        ~CPerlinNoise1D();

    float               GetIntensity(float x);
    void                EnableSmoothing(BOOL bEnable);

protected:

    float               Noise1D(int x);
    float               SmoothNoise1D(int x);
    float               InterpolatedNoise1D(float x);
};

//******************************************************************************
// CPerlinNoise2D
//******************************************************************************

//******************************************************************************
class CPerlinNoise2D : public CPerlinNoise {

protected:

    NOISE2DPROC         m_pfnNoise;

public:

                        CPerlinNoise2D(float fPersistence = 0.75f, UINT uOctaves = 6, DWORD dwSeed = 0, INTERPOLATIONTYPE irp = INTERPOLATE_COSINE, BOOL bClamp = TRUE, BOOL bSmooth = FALSE);
                        ~CPerlinNoise2D();

    float               GetIntensity(float x, float y);
    void                EnableSmoothing(BOOL bEnable);

protected:

    float               Noise2D(int x, int y);
    float               SmoothNoise2D(int x, int y);
    float               InterpolatedNoise2D(float x, float y);
};

//******************************************************************************
// CPerlinNoise3D
//******************************************************************************

//******************************************************************************
class CPerlinNoise3D : public CPerlinNoise {

protected:

    NOISE3DPROC         m_pfnNoise;

public:

                        CPerlinNoise3D(float fPersistence = 0.75f, UINT uOctaves = 6, DWORD dwSeed = 0, INTERPOLATIONTYPE irp = INTERPOLATE_COSINE, BOOL bClamp = TRUE, BOOL bSmooth = FALSE);
                        ~CPerlinNoise3D();

    float               GetIntensity(float x, float y, float z);
    void                EnableSmoothing(BOOL bEnable);

protected:

    float               Noise3D(int x, int y, int z);
    float               SmoothNoise3D(int x, int y, int z);
    float               InterpolatedNoise3D(float x, float y, float z);
};

#endif // __NOISE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\pal.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    pal.cpp

Author:

    Matt Bronder

Description:

    CPalette methods.

*******************************************************************************/

#include "d3dlocus.h"

#ifdef UNDER_XBOX

//******************************************************************************
// CIndexBuffer
//******************************************************************************

//******************************************************************************
CPalette::CPalette() {
}

//******************************************************************************
CPalette::~CPalette() {
}

//******************************************************************************
// CIndexBuffer8
//******************************************************************************

//******************************************************************************
CPalette8::CPalette8() {

    m_pd3dp = NULL;
}

//******************************************************************************
CPalette8::~CPalette8() {
}

//******************************************************************************
BOOL CPalette8::Create(CDevice8* pDevice, LPDIRECT3DPALETTE8 pd3dp) {

    if (m_pd3dp) {
        return FALSE;
    }

    if (pDevice && pd3dp) {

        if (CResource8::Create(pDevice, (LPDIRECT3DRESOURCE8)pd3dp)) {
            m_pd3dp = pd3dp;
        }
    }

    return (BOOL)m_pd3dp;
}

//******************************************************************************
LPDIRECT3DPALETTE8 CPalette8::GetIDirect3DPalette8() {

    return m_pd3dp;
}

//******************************************************************************
D3DPALETTESIZE CPalette8::GetSize() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dp) {
        return D3DPALETTE_256;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dp->GetSize();
}

//******************************************************************************
HRESULT CPalette8::Lock(D3DCOLOR** ppColors, DWORD dwFlags) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dp) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dp->Lock(ppColors, dwFlags);
}

//******************************************************************************
HRESULT CPalette8::Unlock() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dp) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dp->Unlock();
}

#endif // UNDER_XBOX
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\resource.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    resource.cpp

Author:

    Matt Bronder

Description:

    CResource methods.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// CResource
//******************************************************************************

//******************************************************************************
CResource::CResource() {
}

//******************************************************************************
CResource::~CResource() {
}

//******************************************************************************
// CResource8
//******************************************************************************

//******************************************************************************
CResource8::CResource8() {

    m_pd3dres = NULL;
}

//******************************************************************************
CResource8::~CResource8() {

    if (m_pDevice) {
        m_pDevice->RemoveObject(m_pd3dres);
    }
}

//******************************************************************************
BOOL CResource8::Create(CDevice8* pDevice, LPDIRECT3DRESOURCE8 pd3dres) {

    if (m_pd3dres) {
        return FALSE;
    }

    if (pDevice && pd3dres) {

        if (!pDevice->AddObject(pd3dres, this)) {
            return FALSE;
        }

        m_pDevice = pDevice;

        m_pd3dres = pd3dres;
    }

    return (BOOL)m_pd3dres;
}

//******************************************************************************
ULONG CResource8::AddRef() {

    ULONG uRef = 0;

    if (m_pd3dres) {
        uRef = m_pd3dres->AddRef();
        CObject::AddRef();
    }

    return uRef;
}

//******************************************************************************
ULONG CResource8::Release() {

    ULONG uRef = 0;

    if (m_pd3dres) {
        uRef = m_pd3dres->Release();
        CObject::Release();
    }

    return uRef;
}

//******************************************************************************
LPDIRECT3DRESOURCE8 CResource8::GetIDirect3DResource8() {

    return m_pd3dres;
}

//******************************************************************************
CDevice8* CResource8::GetDevice8() {

    return m_pDevice;
}

//******************************************************************************
D3DRESOURCETYPE CResource8::GetType() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dres) {
        return (D3DRESOURCETYPE)0;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dres->GetType();
}

//******************************************************************************
HRESULT CResource8::GetDevice(CDevice8** ppDevice) {

    LPDIRECT3DDEVICE8 pd3dd;
    HRESULT           hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dres) {
        return ERR_NOTCREATED;
    }
    if (!ppDevice) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppDevice = NULL;

    hr = m_pd3dres->GetDevice(&pd3dd);
    if (SUCCEEDED(hr)) {
        if (pd3dd != m_pDevice->GetIDirect3DDevice8()) {
            DebugString(TEXT("Interface pointers differ for IDirect3DDevice8"));
            DebugBreak();
        }
        m_pDevice->CObject::AddRef();
        *ppDevice = m_pDevice;
    }

    return hr;
}

//******************************************************************************
HRESULT CResource8::GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dres) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dres->GetPrivateData(refguid, pvData, pdwSizeOfData);
}

//******************************************************************************
HRESULT CResource8::SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dres) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dres->SetPrivateData(refguid, pvData, dwSizeOfData, dwFlags);
}

//******************************************************************************
HRESULT CResource8::FreePrivateData(REFGUID refguid) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dres) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dres->FreePrivateData(refguid);
}

//******************************************************************************
DWORD CResource8::GetPriority() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dres) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dres->GetPriority();
#else
    Log(LOG_FAIL, TEXT("IDirect3DResource8::GetPriority is not implemented on XBox"));
    return 0;
#endif // UNDER_XBOX
}

//******************************************************************************
DWORD CResource8::SetPriority(DWORD dwNewPriority) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dres) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dres->SetPriority(dwNewPriority);
#else
    Log(LOG_FAIL, TEXT("IDirect3DResource8::SetPriority is not implemented on XBox"));
    return 0;
#endif // UNDER_XBOX
}

//******************************************************************************
void CResource8::PreLoad() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dres) {
        return;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    m_pd3dres->PreLoad();
#else
    Log(LOG_FAIL, TEXT("IDirect3DResource8::PreLoad is not implemented on XBox"));
    return;
#endif // UNDER_XBOX
}

//******************************************************************************
// CCResource8
//******************************************************************************

//******************************************************************************
ULONG CCResource8_AddRef(CResource8* pResource, CClient* pClient) {

    LPDIRECT3DRESOURCE8 pd3dres = pResource->GetIDirect3DResource8();
    ULONG               uRefC = 0, uRefS;

    if (pd3dres) {
        uRefC = pd3dres->AddRef();
        if (pClient->CallMethod(MID_RES8_AddRef, pResource, &uRefS)) {
#ifndef UNDER_XBOX
            if (uRefC != uRefS) {
                Log(LOG_WARN, TEXT("IDirect3DResource8::AddRef result inconsistent [C: %d, S: %d]"), uRefC, uRefS);
            }
#endif // !UNDER_XBOX
        }
        pResource->CObject::AddRef();
    }

    return uRefC;
}

//******************************************************************************
ULONG CCResource8_Release(CResource8* pResource, CClient* pClient) {

    LPDIRECT3DRESOURCE8 pd3dres = pResource->GetIDirect3DResource8();
    ULONG               uRefC = 0, uRefS;

    if (pd3dres) {
        uRefC = pd3dres->Release();
        if (pClient->CallMethod(MID_RES8_Release, pResource, &uRefS)) {
#ifndef UNDER_XBOX
            if (uRefC != uRefS) {
                Log(LOG_WARN, TEXT("IDirect3DResource8::Release result inconsistent [C: %d, S: %d]"), uRefC, uRefS);
            }
#endif // !UNDER_XBOX
        }
        pResource->CObject::Release();
    }

    return uRefC;
}

//******************************************************************************
D3DRESOURCETYPE CCResource8_GetType(CResource8* pResource, CClient* pClient) {

    LPDIRECT3DRESOURCE8 pd3dres = pResource->GetIDirect3DResource8();
    D3DRESOURCETYPE     d3drtC, d3drtS;

#ifdef D3DLOCUS_DEBUG
    if (!pd3dres) {
        return (D3DRESOURCETYPE)0;
    }
#endif // D3DLOCUS_DEBUG

    d3drtC = pd3dres->GetType();

    if (pClient->CallMethod(MID_RES8_GetType, pResource, &d3drtS)) {
        if (d3drtC != d3drtS) {
            Log(LOG_WARN, TEXT("IDirect3DResource8::GetType result inconsistent [C: %d, S: %d]"), d3drtC, d3drtS);
        }
    }

    return d3drtC;
}

//******************************************************************************
HRESULT CCResource8_GetDevice(CResource8* pResource, CClient* pClient, CDevice8** ppDevice) {

    LPDIRECT3DRESOURCE8 pd3dres = pResource->GetIDirect3DResource8();
    LPDIRECT3DDEVICE8   pd3dd;
    CDevice8*           pDevice;
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!pd3dres) {
        return ERR_NOTCREATED;
    }
    if (!ppDevice) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppDevice = NULL;

    hrC = pd3dres->GetDevice(&pd3dd);
    if (SUCCEEDED(hrC)) {
        pDevice = pResource->GetDevice8();
        if (pd3dd != pDevice->GetIDirect3DDevice8()) {
            DebugString(TEXT("Interface pointers differ for IDirect3DDevice8"));
            DebugBreak();
        }
        pDevice->CObject::AddRef();
        *ppDevice = pDevice;
    }
    else {
        pDevice = NULL;
    }

    if (pClient->CallMethod(MID_RES8_GetDevice, pResource, &hrS, &pDevice)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DResource8::GetDevice result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCResource8_GetPrivateData(CResource8* pResource, CClient* pClient, REFGUID refguid, void* pvData, DWORD* pdwSizeOfData) {

    LPDIRECT3DRESOURCE8 pd3dres = pResource->GetIDirect3DResource8();
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!pd3dres) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = pd3dres->GetPrivateData(refguid, pvData, pdwSizeOfData);

    if (pClient->CallMethod(MID_RES8_GetPrivateData, pResource, &hrS, &refguid, sizeof(GUID), pvData, *pdwSizeOfData, pdwSizeOfData)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DResource8::GetPrivateData result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCResource8_SetPrivateData(CResource8* pResource, CClient* pClient, REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags) {

    LPDIRECT3DRESOURCE8 pd3dres = pResource->GetIDirect3DResource8();
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!pd3dres) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = pd3dres->SetPrivateData(refguid, pvData, dwSizeOfData, dwFlags);

    if (pClient->CallMethod(MID_RES8_SetPrivateData, pResource, &hrS, &refguid, sizeof(GUID), pvData, dwSizeOfData, dwSizeOfData, dwFlags)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DResource8::SetPrivateData result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCResource8_FreePrivateData(CResource8* pResource, CClient* pClient, REFGUID refguid) {

    LPDIRECT3DRESOURCE8 pd3dres = pResource->GetIDirect3DResource8();
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!pd3dres) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = pd3dres->FreePrivateData(refguid);

    if (pClient->CallMethod(MID_RES8_FreePrivateData, pResource, &hrS, &refguid, sizeof(GUID))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DResource8::FreePrivateData result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
DWORD CCResource8_GetPriority(CResource8* pResource, CClient* pClient) {

    LPDIRECT3DRESOURCE8 pd3dres = pResource->GetIDirect3DResource8();
    DWORD               dwPriorityC, dwPriorityS;

#ifdef D3DLOCUS_DEBUG
    if (!pd3dres) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    dwPriorityC = pd3dres->GetPriority();
    if (pClient->CallMethod(MID_RES8_GetPriority, pResource, &dwPriorityS)) {
        if (dwPriorityC != dwPriorityS) {
            Log(LOG_WARN, TEXT("IDirect3DResource8::GetPriority result inconsistent [C: 0x%X, S: 0x%X]"), dwPriorityC, dwPriorityS);
        }
    }
    return dwPriorityC;
#else
    Log(LOG_FAIL, TEXT("IDirect3DResource8::GetPriority is not implemented on XBox"));
    return 0;
#endif // UNDER_XBOX
}

//******************************************************************************
DWORD CCResource8_SetPriority(CResource8* pResource, CClient* pClient, DWORD dwNewPriority) {

    LPDIRECT3DRESOURCE8 pd3dres = pResource->GetIDirect3DResource8();
    DWORD               dwPriorityC, dwPriorityS;

#ifdef D3DLOCUS_DEBUG
    if (!pd3dres) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    dwPriorityC = pd3dres->SetPriority(dwNewPriority);
    if (pClient->CallMethod(MID_RES8_SetPriority, pResource, &dwPriorityS, dwNewPriority)) {
        if (dwPriorityC != dwPriorityS) {
            Log(LOG_WARN, TEXT("IDirect3DResource8::SetPriority result inconsistent [C: 0x%X, S: 0x%X]"), dwPriorityC, dwPriorityS);
        }
    }
    return dwPriorityC;
#else
    Log(LOG_FAIL, TEXT("IDirect3DResource8::SetPriority is not implemented on XBox"));
    return 0;
#endif // UNDER_XBOX
}

//******************************************************************************
void CCResource8_PreLoad(CResource8* pResource, CClient* pClient) {

    LPDIRECT3DRESOURCE8 pd3dres = pResource->GetIDirect3DResource8();

#ifdef D3DLOCUS_DEBUG
    if (!pd3dres) {
        return;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    pd3dres->PreLoad();
    pClient->CallMethod(MID_RES8_PreLoad, pResource);
#else
    Log(LOG_FAIL, TEXT("IDirect3DResource8::PreLoad is not implemented on XBox"));
    return;
#endif // UNDER_XBOX
}

#ifdef UNDER_XBOX

//******************************************************************************
BOOL CResource8::IsBusy() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dres) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dres->IsBusy();
}

//******************************************************************************
void CResource8::BlockUntilNotBusy() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dres) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dres->BlockUntilNotBusy();
}

//******************************************************************************
void CResource8::MoveResourceMemory(D3DMEMORY d3dmem) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dres) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dres->MoveResourceMemory(d3dmem);
}

//******************************************************************************
void CResource8::Register(void *pvBase) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dres) {
        return;
    }
#endif // D3DLOCUS_DEBUG

    m_pd3dres->Register(pvBase);
}

#endif // UNDER_XBOX
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\resource.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    resource.h

Description:

    IDirect3DResource classes.

*******************************************************************************/

#ifndef __RESOURCE_H__
#define __RESOURCE_H__

//******************************************************************************
// CResource
//******************************************************************************

//******************************************************************************
class CResource : public CObject {

protected:

public:

                        CResource();
                        ~CResource();
};

//******************************************************************************
class CResource8 : public CResource {

protected:

    LPDIRECT3DRESOURCE8 m_pd3dres;
    CDevice8*           m_pDevice;

public:

                        CResource8();
                        ~CResource8();
    virtual BOOL        Create(CDevice8* pDevice, LPDIRECT3DRESOURCE8 pd3dres);

    virtual 
    LPDIRECT3DRESOURCE8 GetIDirect3DResource8();
    virtual CDevice8*   GetDevice8();

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Information

    virtual 
    D3DRESOURCETYPE     GetType();
    virtual HRESULT     GetDevice(CDevice8** ppDevice);

    // Private surface data

    virtual HRESULT     GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData);
    virtual HRESULT     SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags);
    virtual HRESULT     FreePrivateData(REFGUID refguid);

    // Resource management

    virtual DWORD       GetPriority();
    virtual DWORD       SetPriority(DWORD dwNewPriority);
    virtual void        PreLoad();

#ifdef UNDER_XBOX

    // Miscellaneous

    virtual BOOL        IsBusy();
    virtual void        BlockUntilNotBusy();
    virtual void        MoveResourceMemory(D3DMEMORY d3dmem);
    virtual void        Register(void *pvBase);

#endif
};

//******************************************************************************
// Client resource function prototypes
//******************************************************************************

ULONG           CCResource8_AddRef(CResource8* pResource, CClient* pClient);
ULONG           CCResource8_Release(CResource8* pResource, CClient* pClient);

D3DRESOURCETYPE CCResource8_GetType(CResource8* pResource, CClient* pClient);
HRESULT         CCResource8_GetDevice(CResource8* pResource, CClient* pClient, CDevice8** ppDevice);

HRESULT         CCResource8_GetPrivateData(CResource8* pResource, CClient* pClient, REFGUID refguid, void* pvData, DWORD* pdwSizeOfData);
HRESULT         CCResource8_SetPrivateData(CResource8* pResource, CClient* pClient, REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags);
HRESULT         CCResource8_FreePrivateData(CResource8* pResource, CClient* pClient, REFGUID refguid);

DWORD           CCResource8_GetPriority(CResource8* pResource, CClient* pClient);
DWORD           CCResource8_SetPriority(CResource8* pResource, CClient* pClient, DWORD dwNewPriority);
void            CCResource8_PreLoad(CResource8* pResource, CClient* pClient);

#endif // __RESOURCE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\palette.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    palette.h

Description:

    Direct3D palette routines.

*******************************************************************************/

#ifndef __PALETTE_H__
#define __PALETTE_H__

#ifdef UNDER_XBOX

//******************************************************************************
// Function prototypes
//******************************************************************************

CPalette8*              CreatePalette(CDevice8* pDevice, D3DCOLOR* pcColors = NULL, 
                                      D3DPALETTESIZE palsSize = D3DPALETTE_256);
void                    ReleasePalette(CPalette8* pd3dp);
void                    ReleasePalettes();
void                    RemovePalette(CPalette8* pd3dp);

#endif // UNDER_XBOX

#endif // __PALETTE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\palette.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    palette.cpp

Author:

    Matt Bronder

Description:

    Direct3D palette routines.

*******************************************************************************/

#include "d3dlocus.h"

#ifdef UNDER_XBOX

//******************************************************************************
// Structures
//******************************************************************************

typedef struct _PALETTEDESC {
    CPalette8*                  pd3dp;
    D3DPALETTESIZE              palsSize;
    UINT                        uEntries;
    struct _PALETTEDESC*        ppaldNext;
} PALETTEDESC, *PPALETTEDESC;

//******************************************************************************
// Globals
//******************************************************************************

PPALETTEDESC                    g_ppaldList = NULL;

//******************************************************************************
// Palette functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreatePalette
//
// Description:
//
//     Create an palette object of the given size and populate it with the 
//     given palette colors.  The size of the palette entries must
//     be at least as large as the palette being created.
//
// Arguments:
//
//     CDevice8* pDevice                    - Pointer to the device object
//
//     D3DCOLOR* pcColors                   - Colors to store in the palette
//
//     D3DPALETTESIZE palsSize              - Number of entries in the palette
//
// Return Value:
//
//     A pointer to the created palette object on success, NULL on 
//     failure.
//
//******************************************************************************
CPalette8* CreatePalette(CDevice8* pDevice, D3DCOLOR* pcColors, D3DPALETTESIZE palsSize) {

    CPalette8*              pd3dp;
    PPALETTEDESC            ppaldNode;
    D3DCOLOR*               pcData;
    UINT                    uEntries;
    HRESULT                 hr;

    hr = pDevice->CreatePalette(palsSize, &pd3dp);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DDevice8::CreatePalette"));
        return NULL;
    }

    switch (palsSize) {
        case D3DPALETTE_32:
            uEntries = 32;
            break;
        case D3DPALETTE_64:
            uEntries = 64;
            break;
        case D3DPALETTE_128:
            uEntries = 128;
            break;
        case D3DPALETTE_256:
        default:
            uEntries = 256;
            break;
    }

    if (pcColors) {

        hr = pd3dp->Lock(&pcData, 0);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DPalette8::Lock"));
            pd3dp->Release();
            return NULL;
        }

        memcpy(pcData, pcColors, uEntries * sizeof(D3DCOLOR));

        hr = pd3dp->Unlock();
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DPalette8::Unlock"));
            pd3dp->Release();
            return NULL;
        }
    }

    // Add the palette to the list
    ppaldNode = (PPALETTEDESC)MemAlloc(sizeof(PALETTEDESC));
    if (!ppaldNode) {
        pd3dp->Release();
        return NULL;
    }
    memset(ppaldNode, 0, sizeof(PALETTEDESC));
    ppaldNode->pd3dp = pd3dp;
    ppaldNode->palsSize = palsSize;
    ppaldNode->uEntries = uEntries;
    ppaldNode->ppaldNext = g_ppaldList;
    g_ppaldList = ppaldNode;

    return pd3dp;
}

//******************************************************************************
//
// Function:
//
//     ReleasePalette
//
// Description:
//
//     Release the given palette object and remove it from the palette table.
//
// Arguments:
//
//     CPalette8* pd3dp               - Pointer to the palette object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleasePalette(CPalette8* pd3dp) {

    PPALETTEDESC    ppald, ppaldDel;
#if defined(DEBUG) || defined(_DEBUG)
    UINT            uRef;
#endif

    if (!pd3dp) {
        return;
    }

    if (g_ppaldList) {

        if (g_ppaldList->pd3dp == pd3dp) {
            ppald = g_ppaldList->ppaldNext;
            MemFree(g_ppaldList);
            g_ppaldList = ppald;
        }

        else {

            for (ppald = g_ppaldList; 
                 ppald->ppaldNext && ppald->ppaldNext->pd3dp != pd3dp; 
                 ppald = ppald->ppaldNext
            );

            if (ppald->ppaldNext) {
                ppaldDel = ppald->ppaldNext;
                ppald->ppaldNext = ppaldDel->ppaldNext;
                MemFree(ppaldDel);
            }
        }
    }

#if defined(DEBUG) || defined(_DEBUG)
    uRef = pd3dp->Release();
    if (uRef != 0) {
        DebugString(TEXT("WARNING: Palette has a ref count of %d on release"), uRef);
    }
#else
    pd3dp->Release();
#endif
}

//******************************************************************************
//
// Function:
//
//     ReleasePalette
//
// Description:
//
//     Release all palettes.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleasePalettes() {

    while (g_ppaldList) {
        ReleasePalette(g_ppaldList->pd3dp);
    }
}

//******************************************************************************
//
// Function:
//
//     RemovePalette
//
// Description:
//
//     Remove the given palette from the palette table (if present)
//
// Arguments:
//
//     CPalette8* pd3dp         - Pointer to the palette object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void RemovePalette(CPalette8* pd3dp) {

    PPALETTEDESC    ppald, ppaldDel;

    if (!pd3dp) {
        return;
    }

    if (g_ppaldList) {

        if (g_ppaldList->pd3dp == pd3dp) {
            ppald = g_ppaldList->ppaldNext;
            MemFree(g_ppaldList);
            g_ppaldList = ppald;
        }

        else {

            for (ppald = g_ppaldList; 
                 ppald->ppaldNext && ppald->ppaldNext->pd3dp != pd3dp; 
                 ppald = ppald->ppaldNext
            );

            if (ppald->ppaldNext) {
                ppaldDel = ppald->ppaldNext;
                ppald->ppaldNext = ppaldDel->ppaldNext;
                MemFree(ppaldDel);
            }
        }
    }
}

#endif // UNDER_XBOX
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\pal.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    pal.h

Description:

    IDirect3DPalette classes.

*******************************************************************************/

#ifndef __PAL_H__
#define __PAL_H__

#ifdef UNDER_XBOX

//******************************************************************************
// CPalette
//******************************************************************************

//******************************************************************************
class CPalette : public CResource {

protected:

public:

                        CPalette();
                        ~CPalette();
};

//******************************************************************************
class CPalette8 : public CResource8 {

protected:

    LPDIRECT3DPALETTE8  m_pd3dp;

public:

                        CPalette8();
                        ~CPalette8();
    virtual BOOL        Create(CDevice8* pDevice, LPDIRECT3DPALETTE8 pd3dp);

    virtual LPDIRECT3DPALETTE8 GetIDirect3DPalette8();

    // Information

    virtual D3DPALETTESIZE GetSize();

    // Locking

    virtual HRESULT     Lock(D3DCOLOR** ppColors, DWORD dwFlags);
    virtual HRESULT     Unlock();
};

#endif // UNDER_XBOX

#endif // __PAL_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\rsrcdata.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    rsrcdata.cpp

Author:

    Matt Bronder

Description:

    Resource data list.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// Globals
//******************************************************************************

PRESOURCEDATA g_prdResourceList = NULL;

//******************************************************************************
_RESOURCEDATA::_RESOURCEDATA(LPCTSTR _szModule, LPCTSTR _szName, LPVOID _pvData, DWORD _dwSize) {

    _tcscpy(szModule, _szModule);
    _tcscpy(szName, _szName);
    pvData = _pvData;
    dwSize = _dwSize;
    prdNext = g_prdResourceList;
    g_prdResourceList = this;
}

//******************************************************************************
BOOL LoadResourceData(LPCTSTR szName, LPVOID* ppvData, LPDWORD pdwSize) {

    PRESOURCEDATA prd;
#ifdef UNDER_XBOX
    PVOID pvData;
#ifdef UNICODE
    char szBuffer[MAX_PATH];
#endif
    TCHAR szFullName[MAX_PATH];
    LPSTR szResource;
#endif
    TCHAR szModule[128];
    BOOL bRet = FALSE;

    // If the high order word of the name is zero, the name is a resource
    // identifier rather than a pointer to the name string
    if (!(BOOL)((DWORD)szName >> 16)) {
        return FALSE;
    }

    GetModuleName(GetTestInstance(), szModule, 128);

    for (prd = g_prdResourceList; prd; prd = prd->prdNext) {
#ifndef UNDER_XBOX
        if (!_tcscmp(szName, prd->szName)) {
#else
        if ((*prd->szModule == TEXT('\0') || !_tcscmp(szModule, prd->szModule)) && !_tcscmp(szName, prd->szName)) {
#endif // UNDER_XBOX
            if (ppvData) {
                *ppvData = prd->pvData;
            }
            if (pdwSize) {
                *pdwSize = prd->dwSize;
            }
            return TRUE;
        }
    }

#ifdef UNDER_XBOX

    wsprintf(szFullName, TEXT("%s_%s"), szModule, szName);
#ifndef UNICODE
    szResource = szFullName;
#else
    wcstombs(szBuffer, szFullName, MAX_PATH);
    szResource = szBuffer;
#endif

    pvData = XLoadSection(szResource);
    if (pvData) {
        if (ppvData) {
            *ppvData = pvData;
        }
        if (pdwSize) {
            HANDLE hSection = XGetSectionHandle(szResource);
            *pdwSize = XGetSectionSize(hSection);
        }
        bRet = TRUE;
    }

#endif // UNDER_XBOX

    return bRet;
}

//******************************************************************************
void UnloadResourceData(LPCTSTR szName) {

#ifdef UNDER_XBOX

#ifdef UNICODE
    char szBuffer[MAX_PATH];
#endif
    TCHAR szFullName[MAX_PATH];
    LPSTR szResource;
    TCHAR szModule[128];

    // If the high order word of the name is zero, the name is a resource
    // identifier rather than a pointer to the name string
    if (!(BOOL)((DWORD)szName >> 16)) {
        return;
    }

    GetModuleName(GetTestInstance(), szModule, 128);

    wsprintf(szFullName, TEXT("%s_%s"), szModule, szName);
#ifndef UNICODE
    szResource = szFullName;
#else
    wcstombs(szBuffer, szFullName, MAX_PATH);
    szResource = szBuffer;
#endif

    XFreeSection(szResource);

#endif // UNDER_XBOX
}

#ifdef UNDER_XBOX

//******************************************************************************
BOOL LoadResourceFile(LPCTSTR szName, LPVOID* ppvData, LPDWORD pdwSize) {

    PVOID pvFile;
    BOOL bRet = FALSE;
#ifdef UNICODE
    char szBuffer[MAX_PATH];
    LPSTR szResource;
#endif

    // If the high order word of the name is zero, the name is a resource
    // identifier rather than a pointer to the name string
    if (!(BOOL)((DWORD)szName >> 16)) {
        return FALSE;
    }

#ifndef UNICODE
    szResource = szName;
#else
    wcstombs(szBuffer, szName, MAX_PATH);
    szResource = szBuffer;
#endif

    pvFile = XLoadSection(szResource);
    if (pvFile) {
        if (ppvData) {
            *ppvData = pvFile;
        }
        if (pdwSize) {
            HANDLE hSection = XGetSectionHandle(szResource);
            *pdwSize = XGetSectionSize(hSection);
        }
        bRet = TRUE;
    }

    return bRet;
}

//******************************************************************************
void UnloadResourceFile(LPCTSTR szName) {

#ifdef UNICODE
    char szBuffer[MAX_PATH];
    LPSTR szResource;
#endif

    // If the high order word of the name is zero, the name is a resource
    // identifier rather than a pointer to the name string
    if (!(BOOL)((DWORD)szName >> 16)) {
        return;
    }

#ifndef UNICODE
    szResource = szName;
#else
    wcstombs(szBuffer, szName, MAX_PATH);
    szResource = szBuffer;
#endif

    XFreeSection(szResource);
}

#endif // UNDER_XBOX
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=d3dlocus
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

!if defined(USE_VC7)
C_DEFINES=$(C_DEFINES) -Zm200
!endif

SOURCES=\
    basetex.cpp \
    client.cpp \
    conio.cpp \
    cubetex.cpp \
    device.cpp \
    direct3d.cpp \
    display.cpp \
    enum.cpp \
    fontmap.cpp \
    indxbuff.cpp \
    input.cpp \
    light.cpp \
    log.cpp \
    mesh.cpp \
    misc.cpp \
    noise.cpp \
    object.cpp \
    pal.cpp \
    palette.cpp \
    resource.cpp \
    rsrcdata.cpp \
    scene.cpp \
    surface.cpp \
    swapchn.cpp \
    tex.cpp \
    texture.cpp \
    util.cpp \
    vertbuff.cpp \
    vibuffer.cpp \
    voltex.cpp \
    volume.cpp \
    vpshader.cpp \
    consolbk.bmp.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\rsrcdata.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    rsrcdata.h

Author:

    Matt Bronder

Description:

    Resource data list.

*******************************************************************************/

#ifndef __RSRCDATA_H__
#define __RSRCDATA_H__

//******************************************************************************
typedef struct _RESOURCEDATA {

    TCHAR                   szModule[128];
    TCHAR                   szName[128];
    LPVOID                  pvData;
    DWORD                   dwSize;
    struct _RESOURCEDATA*   prdNext;

    _RESOURCEDATA(LPCTSTR _szModule, LPCTSTR _szName, LPVOID _pvData, DWORD _dwSize);

} RESOURCEDATA, *PRESOURCEDATA;

extern PRESOURCEDATA g_prdResourceList;

BOOL LoadResourceData(LPCTSTR szName, LPVOID* ppvData, LPDWORD pdwSize);
void UnloadResourceData(LPCTSTR szName);

#ifdef UNDER_XBOX

BOOL LoadResourceFile(LPCTSTR szName, LPVOID* ppvData, LPDWORD pdwSize);
void UnloadResourceFile(LPCTSTR szName);

#endif // UNDER_XBOX

#endif // __RSRCDATA_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\scene.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    scene.h

Author:

    Matt Bronder

Description:

    Direct3D scene functions.

*******************************************************************************/

#ifndef __SCENE_H__
#define __SCENE_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define FLT_INFINITE                3.402823466e+38F //FLT_MAX

#ifdef UNDER_XBOX
#define D3D_SECTION_NAME            ".D3D$TEST"
#endif // UNDER_XBOX

//******************************************************************************
// Forward declarations
//******************************************************************************

class CScene;

//******************************************************************************
// Data types
//******************************************************************************

typedef void (CScene::* FADEPROC)(void);

#ifdef UNDER_XBOX

typedef BOOL (*VALIDATEPROC)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm);
typedef int  (*EXHIBITPROC)(CDisplay* pDisplay, int *pnExitCode);

typedef struct _D3DTESTFUNCTIONDESC {
    LPTSTR          szModule;
    VALIDATEPROC    pfnValidate;
    EXHIBITPROC     pfnExhibit;
} D3DTESTFUNCTIONDESC, *PD3DTESTFUNCTIONDESC;

extern D3DTESTFUNCTIONDESC D3D_BeginTestFunctionTable;
extern D3DTESTFUNCTIONDESC D3D_EndTestFunctionTable;

#endif // UNDER_XBOX

//******************************************************************************
class CScene : public CObject {

private:

    D3DPRESENT_PARAMETERS           m_d3dppInitial;
    BOOL                            m_bRestoreMode;

protected:

    CDisplay*                       m_pDisplay;
    CDevice8*                       m_pDevice;

    BOOL                            m_bDisplayOK;

    BOOL                            m_bPaused;
    BOOL                            m_bAdvance;
    static float                    m_fTimeDilation;
    float                           m_fFPS;
    static BOOL                     m_bShowFPS;
    static BOOL                     m_bShowMode;
    TCHAR                           m_szDisplayMode[64];

    DWORD                           m_dwInitialState;

    CAMERA                          m_camInitial;

    D3DPRESENT_PARAMETERS           m_d3dpp;

    float                           m_fFrameDuration;
    float                           m_fTimeDuration;
    float                           m_fTime;
    float                           m_fLastTime;
    float                           m_fTimeDelta;
    float                           m_fFrame;
    float                           m_fLastFrame;
    float                           m_fFrameDelta;

#ifdef UNDER_XBOX
    BOOL                            m_bQuit;
#endif // UNDER_XBOX

    JOYSTATE                        m_jsJoys;
    JOYSTATE                        m_jsLast;

    D3DXMATRIX                      m_mIdentity;

    TLVERTEX                        m_prBackground[4];

    BOOL                            m_bFade;
    FADEPROC                        m_pfnFade;
    TLVERTEX                        m_prFade[4];
    BYTE                            m_fadeAlpha;

    static UINT                     m_uCreated;
    BOOL                            m_bCreated;

public:

                                    CScene();
                                    ~CScene();

    virtual ULONG                   Release();

    virtual BOOL                    Create(CDisplay* pDisplay);
    virtual BOOL                    Exhibit(int *pnExitCode);

    virtual void                    SetFrameDuration(float fNumFrames);
    virtual void                    SetTimeDuration(float fSeconds);

protected:

    virtual BOOL                    Prepare();
    virtual BOOL                    Setup();
    virtual BOOL                    Initialize();
    virtual void                    Efface();
    virtual void                    Update();
    virtual BOOL                    Render();
    virtual BOOL                    Reset();

    virtual void                    ProcessInput();
    virtual BOOL                    InitView();

    virtual BOOL                    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                                            WPARAM wParam, LPARAM lParam);

    virtual void                    ShowFrameRate();
    virtual void                    ShowDisplayMode();
    virtual void                    InitDisplayModeString();

    virtual void                    FadeOut();
    virtual void                    ApplyFade();

    friend BOOL                     InitScene(LPVOID pvParam);
    friend void                     EffaceScene(LPVOID pvParam);

    friend BOOL                     SceneWndProc(LPVOID pvParam, LRESULT* plr, 
                                             HWND hWnd, UINT uMsg, 
                                             WPARAM wParam, LPARAM lParam);
};

#endif //__SCENE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\surface.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    surface.cpp

Author:

    Matt Bronder

Description:

    CSurface methods.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// CSurface
//******************************************************************************

//******************************************************************************
CSurface::CSurface() {
}

//******************************************************************************
CSurface::~CSurface() {
}

//******************************************************************************
// CSurface8
//******************************************************************************

//******************************************************************************
CSurface8::CSurface8() {

    m_pd3ds = NULL;
}

//******************************************************************************
CSurface8::~CSurface8() {

    if (m_pDevice) {
        m_pDevice->RemoveObject(m_pd3ds);
    }
}

//******************************************************************************
BOOL CSurface8::Create(CDevice8* pDevice, LPDIRECT3DSURFACE8 pd3ds) {

    if (m_pd3ds) {
        return FALSE;
    }

    if (pDevice && pd3ds) {

        if (!pDevice->AddObject(pd3ds, this)) {
            return FALSE;
        }

        m_pDevice = pDevice;

        m_pd3ds = pd3ds;
    }

    return (BOOL)m_pd3ds;
}

//******************************************************************************
ULONG CSurface8::AddRef() {

    ULONG uRef = 0;

    if (m_pd3ds) {
        uRef = m_pd3ds->AddRef();
        CObject::AddRef();
    }

    return uRef;
}

//******************************************************************************
ULONG CSurface8::Release() {

    ULONG uRef = 0;

    if (m_pd3ds) {
        uRef = m_pd3ds->Release();
        CObject::Release();
    }

    return uRef;
}

//******************************************************************************
LPDIRECT3DSURFACE8 CSurface8::GetIDirect3DSurface8() {

    return m_pd3ds;
}

//******************************************************************************
HRESULT CSurface8::GetContainer(REFIID riid, CBaseTexture8** ppContainer) {

    LPDIRECT3DBASETEXTURE8 pd3dtb;
    CBaseTexture8*         pBaseTexture;
    HRESULT                hr = ERR_NOTCREATED;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#ifndef UNDER_XBOX
    if (!(riid == IID_IDirect3DTexture8 || riid == IID_IDirect3DCubeTexture8)) {
        return D3DERR_INVALIDCALL;
    }
#endif // !UNDER_XBOX
    if (!ppContainer) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppContainer = NULL;

#ifndef UNDER_XBOX
    hr = m_pd3ds->GetContainer(riid, (LPVOID*)&pd3dtb);
#else
    hr = m_pd3ds->GetContainer(&pd3dtb);
#endif // UNDER_XBOX
    if (SUCCEEDED(hr)) {
        if (!m_pDevice->FindObject(pd3dtb, (LPVOID*)&pBaseTexture)) {
            pd3dtb->Release();
            return ERR_NOTCREATED;
        }
        else {
            pBaseTexture->CObject::AddRef();
            *ppContainer = pBaseTexture;
        }
    }

    return hr;
}

//******************************************************************************
HRESULT CSurface8::GetDevice(CDevice8** ppDevice) {

    LPDIRECT3DDEVICE8 pd3dd;
    HRESULT           hr = ERR_NOTCREATED;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds || !m_pDevice) {
        return ERR_NOTCREATED;
    }
    if (!ppDevice) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppDevice = NULL;

    hr = m_pd3ds->GetDevice(&pd3dd);
    if (SUCCEEDED(hr)) {
        if (pd3dd != m_pDevice->GetIDirect3DDevice8()) {
            DebugString(TEXT("Interface pointers differ for IDirect3DDevice8"));
            DebugBreak();
        }
        m_pDevice->CObject::AddRef();
        *ppDevice = m_pDevice;
    }

    return hr;
}

//******************************************************************************
HRESULT CSurface8::GetDesc(D3DSURFACE_DESC* pd3dsd) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3ds->GetDesc(pd3dsd);
}

//******************************************************************************
HRESULT CSurface8::LockRect(D3DLOCKED_RECT* pd3dlr, RECT* prect, DWORD dwFlags) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3ds->LockRect(pd3dlr, prect, dwFlags);
}

//******************************************************************************
HRESULT CSurface8::UnlockRect() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3ds->UnlockRect();
}

//******************************************************************************
HRESULT CSurface8::GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3ds->GetPrivateData(refguid, pvData, pdwSizeOfData);
}

//******************************************************************************
HRESULT CSurface8::SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3ds->SetPrivateData(refguid, pvData, dwSizeOfData, dwFlags);
}

//******************************************************************************
HRESULT CSurface8::FreePrivateData(REFGUID refguid) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3ds->FreePrivateData(refguid);
}

//******************************************************************************
// CCSurface8
//******************************************************************************

//******************************************************************************
CCSurface8::CCSurface8() {
}

//******************************************************************************
CCSurface8::~CCSurface8() {
}

//******************************************************************************
BOOL CCSurface8::Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DSURFACE8 pd3ds) {

    if (!pClient) {
        return FALSE;
    }
    m_pClient = pClient;
    return CSurface8::Create(pDevice, pd3ds);
}

//******************************************************************************
ULONG CCSurface8::AddRef() {

    ULONG uRefC = 0, uRefS;

    if (m_pd3ds) {
        uRefC = m_pd3ds->AddRef();
        if (m_pClient->CallMethod(MID_SUR8_AddRef, this, &uRefS)) {
#ifndef UNDER_XBOX
            if (uRefC != uRefS) {
                Log(LOG_WARN, TEXT("IDirect3DSurface8::AddRef result inconsistent [C: %d, S: %d]"), uRefC, uRefS);
            }
#endif // !UNDER_XBOX
        }
        CObject::AddRef();
    }

    return uRefC;
}

//******************************************************************************
ULONG CCSurface8::Release() {

    ULONG uRefC = 0, uRefS;

    if (m_pd3ds) {
        uRefC = m_pd3ds->Release();
        if (m_pClient->CallMethod(MID_SUR8_Release, this, &uRefS)) {
#ifndef UNDER_XBOX
            if (uRefC != uRefS) {
                Log(LOG_WARN, TEXT("IDirect3DSurface8::Release result inconsistent [C: %d, S: %d]"), uRefC, uRefS);
            }
#endif // !UNDER_XBOX
        }
        CObject::Release();
    }

    return uRefC;
}

//******************************************************************************
HRESULT CCSurface8::GetContainer(REFIID riid, CBaseTexture8** ppContainer) {

    LPDIRECT3DBASETEXTURE8 pd3dtb;
    CBaseTexture8*         pBaseTexture;
    HRESULT                hrC = ERR_NOTCREATED, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#ifndef UNDER_XBOX
    if (!(riid == IID_IDirect3DTexture8 || riid == IID_IDirect3DCubeTexture8)) {
        return D3DERR_INVALIDCALL;
    }
#endif // !UNDER_XBOX
    if (!ppContainer) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppContainer = NULL;

#ifndef UNDER_XBOX
    hrC = m_pd3ds->GetContainer(riid, (LPVOID*)&pd3dtb);
#else
    hrC = m_pd3ds->GetContainer(&pd3dtb);
#endif // UNDER_XBOX
    if (SUCCEEDED(hrC)) {
        if (!m_pDevice->FindObject(pd3dtb, (LPVOID*)&pBaseTexture)) {
            pd3dtb->Release();
            return ERR_NOTCREATED;
        }
        else {
            pBaseTexture->CObject::AddRef();
            *ppContainer = pBaseTexture;
            if (m_pClient->CallMethod(MID_SUR8_GetContainer, this, &hrS, &riid, sizeof(GUID), &pBaseTexture)) {
                if (hrC != hrS) {
                    Log(LOG_WARN, TEXT("IDirect3DSurface8::GetContainer result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
                }
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCSurface8::GetDevice(CDevice8** ppDevice) {

    LPDIRECT3DDEVICE8 pd3dd;
    CDevice8*         pDevice;
    HRESULT           hrC = ERR_NOTCREATED, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds || !m_pDevice) {
        return ERR_NOTCREATED;
    }
    if (!ppDevice) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppDevice = NULL;

    hrC = m_pd3ds->GetDevice(&pd3dd);
    if (SUCCEEDED(hrC)) {
        if (pd3dd != m_pDevice->GetIDirect3DDevice8()) {
            DebugString(TEXT("Interface pointers differ for IDirect3DDevice8"));
            DebugBreak();
        }
        m_pDevice->CObject::AddRef();
        *ppDevice = m_pDevice;
        pDevice = m_pDevice;
    }
    else {
        pDevice = NULL;
    }

    if (m_pClient->CallMethod(MID_SUR8_GetDevice, this, &hrS, &pDevice)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DSurface8::GetDevice result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCSurface8::GetDesc(D3DSURFACE_DESC* pd3dsd) {

#ifndef UNDER_XBOX
    D3DSURFACE_DESC         d3dsd;
#else
    WINX_D3DSURFACE_DESC    d3dsd;
#endif // UNDER_XBOX
    HRESULT                 hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3ds->GetDesc(pd3dsd);

#ifndef UNDER_XBOX
    if (m_pClient->CallMethod(MID_SUR8_GetDesc, this, &hrS, &d3dsd, sizeof(D3DSURFACE_DESC))) {
#else
    if (m_pClient->CallMethod(MID_SUR8_GetDesc, this, &hrS, &d3dsd, sizeof(WINX_D3DSURFACE_DESC))) {
#endif // UNDER_XBOX
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DSurface8::GetDesc result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else if (SUCCEEDED(hrC)) {
#ifndef UNDER_XBOX
            if (memcmp(pd3dsd, &d3dsd, sizeof(D3DSURFACE_DESC))) {
#else
            if (pd3dsd->Type != d3dsd.Type ||
                pd3dsd->Width != d3dsd.Width ||
                pd3dsd->Height != d3dsd.Height ||
                pd3dsd->MultiSampleType != d3dsd.MultiSampleType)
            {
#endif // UNDER_XBOX
                Log(LOG_WARN, TEXT("IDirect3DSurface8::GetDesc returned an inconsistent description"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCSurface8::LockRect(D3DLOCKED_RECT* pd3dlr, RECT* prect, DWORD dwFlags) {

    RECT    rectNULL = {-1, -1, -1, -1};
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3ds->LockRect(pd3dlr, prect, dwFlags);

    if (pd3dlr) {
        memcpy(&m_slockd.d3dlr, pd3dlr, sizeof(D3DLOCKED_RECT));
    }
    else {
        m_slockd.d3dlr.pBits = 0;
    }
    if (!prect) {
        prect = &rectNULL;
    }
    memcpy(&m_slockd.rect, prect, sizeof(RECT));
    m_slockd.dwFlags = dwFlags;

    if (m_pClient->CallMethod(MID_SUR8_LockRect, this, &hrS, &m_slockd.d3dlrSrv, sizeof(D3DLOCKED_RECT), &m_slockd.rect, sizeof(RECT), dwFlags)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DSurface8::LockRect result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCSurface8::UnlockRect() {

    LPBYTE  pBits;
    DWORD   dwSize;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    if (m_slockd.dwFlags & D3DLOCK_READONLY) {
        pBits = NULL;
        dwSize = 0;
    }
    else {
        D3DSURFACE_DESC d3dsd;
        DWORD           dwWidth, dwHeight, dwBitDepth;
        UINT            i;

        m_pd3ds->GetDesc(&d3dsd);
        if (m_slockd.rect.left == -1) {
            dwWidth = d3dsd.Width;
            dwHeight = d3dsd.Height;
        }
        else {
            dwWidth = m_slockd.rect.right - m_slockd.rect.left;
            dwHeight = m_slockd.rect.bottom - m_slockd.rect.top;
        }
        dwBitDepth = FormatToBitDepth(d3dsd.Format);
        dwSize = dwHeight * dwWidth * dwBitDepth / 8;
        pBits = (LPBYTE)MemAlloc(dwSize);

#ifdef UNDER_XBOX
        if (!XGIsSwizzledFormat(d3dsd.Format)) {
#endif
            if (IsCompressedFormat(d3dsd.Format)) {
                memcpy(pBits, m_slockd.d3dlr.pBits, dwWidth * dwHeight * dwBitDepth / 8);
            }
            else {
                for (i = 0; i < dwHeight; i++) {
                    memcpy(pBits + i * dwWidth * dwBitDepth / 8, (LPBYTE)m_slockd.d3dlr.pBits + i * m_slockd.d3dlr.Pitch, dwWidth * dwBitDepth / 8);
                }
            }
#ifdef UNDER_XBOX
        }
        else {
            // Since locking a subrect on a swizzled surface is unsupported on Xbox, simply unswizzle the entire surface
            XGUnswizzleRect(m_slockd.d3dlr.pBits, dwWidth, dwHeight, NULL, pBits, 
                            dwWidth * dwBitDepth / 8, NULL, dwBitDepth / 8);
        }
#endif
    }

    hrC = m_pd3ds->UnlockRect();

    if (m_pClient->CallMethod(MID_SUR8_UnlockRect, this, &hrS, &m_slockd.d3dlrSrv, sizeof(D3DLOCKED_RECT), &m_slockd.rect, sizeof(RECT), m_slockd.dwFlags, pBits, dwSize)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DSurface8::UnlockRect result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    if (pBits) {
        MemFree(pBits);
    }

    return hrC;
}

//******************************************************************************
HRESULT CCSurface8::GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3ds->GetPrivateData(refguid, pvData, pdwSizeOfData);

    if (m_pClient->CallMethod(MID_SUR8_GetPrivateData, this, &hrS, &refguid, sizeof(GUID), pvData, *pdwSizeOfData, pdwSizeOfData)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DSurface8::GetPrivateData result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCSurface8::SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3ds->SetPrivateData(refguid, pvData, dwSizeOfData, dwFlags);

    if (m_pClient->CallMethod(MID_SUR8_SetPrivateData, this, &hrS, &refguid, sizeof(GUID), pvData, dwSizeOfData, dwSizeOfData, dwFlags)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DSurface8::SetPrivateData result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCSurface8::FreePrivateData(REFGUID refguid) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3ds) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3ds->FreePrivateData(refguid);

    if (m_pClient->CallMethod(MID_SUR8_FreePrivateData, this, &hrS, &refguid, sizeof(GUID))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DSurface8::FreePrivateData result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\scene.cpp ===
/*******************************************************************************

Copyright (c) 1998 Microsoft Corporation.  All rights reserved.

File Name:

    scene.cpp

Author:

    Matt Bronder

Description:

    Scene functions.

*******************************************************************************/

#include "d3dlocus.h"
#ifdef UNDER_XBOX
#include "profilep.h"
#endif // UNDER_XBOX
//#include <mmsystem.h>

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif // UNDER_XBOX

// Function table for x_ValidateScene and x_ExhibitScene
#ifdef UNDER_XBOX

#pragma data_seg(".D3D$A")
D3DTESTFUNCTIONDESC D3D_BeginTestFunctionTable = {0};
#pragma data_seg()

#pragma data_seg(".D3D$ZZZZZZZZ")
D3DTESTFUNCTIONDESC D3D_EndTestFunctionTable = {0};
#pragma data_seg()

#pragma comment(linker, "/merge:.D3D=.rdata")

#endif // UNDER_XBOX


//******************************************************************************
// Function prototypes
//******************************************************************************

static BOOL                     InitScene(LPVOID pvParam);
static void                     EffaceScene(LPVOID pvParam);

static BOOL                     SceneWndProc(LPVOID pvParam, LRESULT* plr, 
                                             HWND hWnd, UINT uMsg, 
                                             WPARAM wParam, LPARAM lParam);

//******************************************************************************
// CScene
//******************************************************************************

float CScene::m_fTimeDilation = 1.0f;
BOOL  CScene::m_bShowFPS = FALSE;
BOOL  CScene::m_bShowMode = FALSE;
UINT  CScene::m_uCreated = 0;

//******************************************************************************
//
// Method:
//
//     CScene
//
// Description:
//
//     Initialize a scene object.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CScene::CScene() {

    m_pDisplay = NULL;
    m_pDevice = NULL;
    m_bDisplayOK = TRUE;
    m_bPaused = FALSE;
    m_bAdvance = FALSE;
    m_fFPS = 0.0f;
    m_fFrameDuration = FLT_INFINITE;
    m_fTimeDuration = FLT_INFINITE;
    m_fTime = 0.0f;
    m_fFrame = 0.0f;
    m_fLastTime = 0.0f;
    m_fLastFrame = 0.0f;
#ifdef UNDER_XBOX
    m_bQuit = FALSE;
#endif // UNDER_XBOX
    InitMatrix(&m_mIdentity,
        1.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 1.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 1.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
    );
    m_dwInitialState = 0xFFFFFFFF;
    memset(&m_d3dpp, 0xCCCCCCCC, sizeof(D3DPRESENT_PARAMETERS));
    memset(&m_d3dppInitial, 0xCCCCCCCC, sizeof(D3DPRESENT_PARAMETERS));
    m_bFade = !(GetStartupContext() & TSTART_SEQUENTIAL);
    m_pfnFade = NULL;
    m_uCreated++;
    m_bCreated = FALSE;
}

//******************************************************************************
//
// Method:
//
//     ~CScene
//
// Description:
//
//     Clean up the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
CScene::~CScene() {

    if (m_pDisplay) {

        m_pDisplay->InitSetDeviceProc(NULL, NULL);
        m_pDisplay->InitClearDeviceProc(NULL, NULL);
        m_pDisplay->InitSubWindowProc(NULL, NULL);

        if (m_bRestoreMode) {
            m_pDisplay->Reset(&m_d3dppInitial);
        }
    }
    m_uCreated--;
}

//******************************************************************************
//
// Method:
//
//     Release
//
// Description:
//
//     Efface the scene and release it.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
ULONG CScene::Release() {

    if (RefCount() == 1) {
VerifyTextureListIntegrity();
        Efface();
    }
    return CObject::Release();
}

//******************************************************************************
//
// Method:
//
//     Create
//
// Description:
//
//     Prepare the scene for rendering.
//
// Arguments:
//
//     CDisplay* pDisplay               - Pointer to a Display object.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CScene::Create(CDisplay* pDisplay) {

    TCHAR szName[MAX_PATH] = {0};
    DWORD dwParam = 0xCCCCCCCC;

    if (m_bCreated || m_uCreated > 1) {
        return FALSE;
    }

    if (!pDisplay) {
        return FALSE;
    }

    m_pDisplay = pDisplay;

    m_pDevice = m_pDisplay->GetDevice8();
    if (!m_pDevice) {
        return FALSE;
    }

    // Reset the device if any changes were made to the present parameters
    if (memcmp(&m_d3dpp, &m_d3dppInitial, sizeof(D3DPRESENT_PARAMETERS))) {
        D3DPRESENT_PARAMETERS d3dpp;
        m_pDisplay->GetPresentParameters(&m_d3dppInitial);
        m_pDisplay->GetPresentParameters(&d3dpp);
        if (m_d3dpp.BackBufferWidth != dwParam) {
            d3dpp.BackBufferWidth = m_d3dpp.BackBufferWidth;
        }
        if (m_d3dpp.BackBufferHeight != dwParam) {
            d3dpp.BackBufferHeight = m_d3dpp.BackBufferHeight;
        }
        if (m_d3dpp.BackBufferFormat != (D3DFORMAT)dwParam) {
            d3dpp.BackBufferFormat = m_d3dpp.BackBufferFormat;
        }
        if (m_d3dpp.BackBufferCount != dwParam) {
            d3dpp.BackBufferCount = m_d3dpp.BackBufferCount;
        }
        if (m_d3dpp.MultiSampleType != (D3DMULTISAMPLE_TYPE)dwParam) {
            d3dpp.MultiSampleType = m_d3dpp.MultiSampleType;
        }
        if (m_d3dpp.SwapEffect != (D3DSWAPEFFECT)dwParam) {
            d3dpp.SwapEffect = m_d3dpp.SwapEffect;
        }
        if (m_d3dpp.hDeviceWindow != (HWND)dwParam) {
            d3dpp.hDeviceWindow = m_d3dpp.hDeviceWindow;
        }
        if (m_d3dpp.Windowed != (BOOL)dwParam) {
            d3dpp.Windowed = m_d3dpp.Windowed;
        }
        if (m_d3dpp.EnableAutoDepthStencil != (BOOL)dwParam) {
            d3dpp.EnableAutoDepthStencil = m_d3dpp.EnableAutoDepthStencil;
        }
        if (m_d3dpp.AutoDepthStencilFormat != (D3DFORMAT)dwParam) {
            d3dpp.AutoDepthStencilFormat = m_d3dpp.AutoDepthStencilFormat;
        }
        if (m_d3dpp.Flags != dwParam) {
            d3dpp.Flags = m_d3dpp.Flags;
        }
        if (m_d3dpp.FullScreen_RefreshRateInHz != dwParam) {
            d3dpp.FullScreen_RefreshRateInHz = m_d3dpp.FullScreen_RefreshRateInHz;
        }
        if (m_d3dpp.FullScreen_PresentationInterval != dwParam) {
            d3dpp.FullScreen_PresentationInterval = m_d3dpp.FullScreen_PresentationInterval;
        }
        memcpy(&m_d3dpp, &d3dpp, sizeof(D3DPRESENT_PARAMETERS));
        if (!m_pDisplay->Reset(&m_d3dpp)) {
__asm int 3;
            DebugString(TEXT("Failed to Reset the display to the requested mode"));
            return FALSE;
        }
        m_bRestoreMode = TRUE;
    }

    // Set device initialization and wndproc callback functions
    pDisplay->InitSetDeviceProc(InitScene, this);
    pDisplay->InitClearDeviceProc(EffaceScene, this);
    pDisplay->InitSubWindowProc(SceneWndProc, this);

    // Get the name of the module
    GetModuleName(GetTestInstance(), szName, MAX_PATH);

    // Log the component and subcomponent
    LogComponent(TEXT("Direct3D"), szName);

    // Set the test duration
    if (GetStartupContext() & TSTART_SEQUENTIAL) {

        DWORD dwDuration;

        dwDuration = GetProfileInt(szName, TEXT("FrameDuration"), 0xFFFFFFFE);
        if (dwDuration != 0xFFFFFFFE) {
            if (dwDuration == 0) {
                m_fFrameDuration = FLT_INFINITE;
            }
            else {
                m_fFrameDuration = (float)dwDuration;
            }
        }
        dwDuration = GetProfileInt(szName, TEXT("TimeDuration"), 0xFFFFFFFE);
        if (dwDuration != 0xFFFFFFFE) {
            if (dwDuration == 0) {
                m_fTimeDuration = FLT_INFINITE;
            }
            else {
                m_fTimeDuration = (float)dwDuration;
            }
        }
    }
    else {
        m_fFrameDuration = FLT_INFINITE;
        m_fTimeDuration = FLT_INFINITE;
    }

    if (!Prepare()) {
        return FALSE;
    }

    if (!Setup()) {
        return FALSE;
    }

    if (!InitView()) {
        return FALSE;
    }

    if (!Initialize()) {
        return FALSE;
    }

    m_bCreated = TRUE;

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Exhibit
//
// Description:
//
//     Display the scene.
//
// Arguments:
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
BOOL CScene::Exhibit(int* pnExitCode) {

    BOOL            bMsgReady;
    float           fTime, fLastTime, fPrevTime, fTimeFreq;
    LARGE_INTEGER   qwCounter;
    DWORD           dwNumFrames = 0;
#ifndef UNDER_XBOX
    MSG             msg;
#endif // !UNDER_XBOX

    if (!m_bCreated) {
        return TRUE;
    }

    QueryPerformanceFrequency(&qwCounter);
    fTimeFreq = 1.0f / (float)qwCounter.QuadPart;
    QueryPerformanceCounter(&qwCounter);
    fLastTime = (float)qwCounter.QuadPart * fTimeFreq;
    fPrevTime = fLastTime;

    do {

#ifndef UNDER_XBOX
        // Pump messages
        if (m_pDisplay->IsActive()) {

            // When the application is active, check for new
            // messages without blocking to wait on them
            bMsgReady = PeekMessage(&msg, NULL, 0, 0, PM_REMOVE);
        }
        else {

            // The application has lost the focus and is suspended
            // so we can afford to block here until a new message
            // has arrived (and conserve CPU usage in the process)
            bMsgReady = GetMessage(&msg, NULL, 0, 0);
        }

        if (bMsgReady) {

            // If a message is ready, process it and proceed to
            // check for another message
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
        else if (msg.message != WM_QUIT) {
#endif // !UNDER_XBOX

            // Otherwise process user input, update the next frame,
            // and draw it
            QueryPerformanceCounter(&qwCounter);
            fTime = (float)qwCounter.QuadPart * fTimeFreq;

            // Process user input
            m_pDisplay->ProcessInput();
            if (!m_pDisplay->ConsoleVisible()) {
                ProcessInput();
            }

            if (m_pDisplay->m_bTimeSync) {
                m_pDisplay->m_bTimeSync = FALSE;
            }
            else if (!m_bPaused || m_bAdvance || (GetStartupContext() & TSTART_STRESS)) {
                m_fTime += (fTime - fLastTime) * m_fTimeDilation;
                m_fFrame += 1.0f;//(1.0f * m_fTimeDilation); // ##REVIEW
                if (m_fFrameDuration != FLT_INFINITE && m_fFrame > m_fFrameDuration) {
                    break;
                }
                if (m_fTimeDuration != FLT_INFINITE && m_fTime > m_fTimeDuration) {
                    break;
                }
                m_fTimeDelta = m_fTime - m_fLastTime;
                m_fFrameDelta = m_fFrame - m_fLastFrame;
                Update();
                VerifyTextureListIntegrity();
                m_fLastTime = m_fTime;
                m_fLastFrame = m_fFrame;
                m_bAdvance = FALSE;
            }

            fLastTime = fTime;

            if (!Render()) {
                break;
            }

            VerifyTextureListIntegrity();

            dwNumFrames++;

            if (fTime - fPrevTime > 1.0f) {
                m_fFPS = (float)dwNumFrames / (fTime - fPrevTime);
                fPrevTime = fTime;
                dwNumFrames = 0;
            }
#ifndef UNDER_XBOX
        }

    } while (msg.message != WM_QUIT);
#else
    } while (!m_bQuit);
#endif // UNDER_XBOX

VerifyTextureListIntegrity();

    if (pnExitCode) {
#ifndef UNDER_XBOX
        *pnExitCode = msg.wParam;
#else
        *pnExitCode = 0;
#endif // UNDER_XBOX
    }

    return m_bDisplayOK;
}

//******************************************************************************
//
// Method:
//
//     SetFrameDuration
//
// Description:
//
//     Set the scene duration in frames.
//
// Arguments:
//
//     float fNumFrames             - Duration of the scene measured in frames.
//                                    This number is checked against the current
//                                    frame set during UpdateScene and is 
//                                    subject to time dilation.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::SetFrameDuration(float fNumFrames) {

    m_fFrameDuration = fNumFrames;
}

//******************************************************************************
//
// Method:
//
//     SetTimeDuration
//
// Description:
//
//     Set the scene duration in seconds.
//
// Arguments:
//
//     float fSeconds               - Duration of the scene measured in seconds.
//                                    This number is checked against the current
//                                    scene time given to UpdateScene and is 
//                                    subject to time dilation.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::SetTimeDuration(float fSeconds) {

    m_fTimeDuration = fSeconds;
}

//******************************************************************************
//
// Method:
//
//     Prepare
//
// Description:
//
//     Initialize all device-independent data to be used in the scene.  This
//     method is called only once at creation (as opposed to Setup and
//     Initialize, which get called each time the device is Reset).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully prepared, FALSE if it was not.
//
//******************************************************************************
BOOL CScene::Prepare() {

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Setup
//
// Description:
//
//     Obtain the device interface pointer from the display, save the current
//     state of the device, and initialize the background vertices to the
//     dimensions of the render target.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully set up for initialization, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CScene::Setup() {

    // Obtain a pointer to the device from the display (if the scene
    // is being re-initialized the device may have changed in response to
    // the selection of a new adapter)
    m_pDevice = m_pDisplay->GetDevice8();

    if (!m_pDevice) {
        return FALSE;
    }

    // Capture the state of the device
#ifndef DEMO_HACK
    if (FAILED(m_pDevice->CreateStateBlock(D3DSBT_ALL, &m_dwInitialState))) {
        return FALSE;
    }
#endif

    // Initialize background vertices
    m_prBackground[0] = TLVERTEX(D3DXVECTOR3(-0.5f, (float)(m_pDisplay->GetHeight()) - 0.5f, 0.9999f), 0.01f, RGBA_MAKE(255,255,255,255), RGB_MAKE(0,0,0), 0.0f, 1.0f);
    m_prBackground[1] = TLVERTEX(D3DXVECTOR3(-0.5f, -0.5f, 0.9999f), 0.01f, RGBA_MAKE(255,255,255,255), RGB_MAKE(0,0,0), 0.0f, 0.0f);
    m_prBackground[2] = TLVERTEX(D3DXVECTOR3((float)(m_pDisplay->GetWidth()) - 0.5f, -0.5f, 0.9999f), 0.01f, RGBA_MAKE(255,255,255,255), RGB_MAKE(0,0,0), 1.0f, 0.0f);
    m_prBackground[3] = TLVERTEX(D3DXVECTOR3((float)(m_pDisplay->GetWidth()) - 0.5f, (float)(m_pDisplay->GetHeight()) - 0.5f, 0.9999f), 0.01f, RGBA_MAKE(255,255,255,255), RGB_MAKE(0,0,0), 1.0f, 1.0f);

    // Initialize the display mode string
    InitDisplayModeString();

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Initialize
//
// Description:
//
//     Initialize the device and all device objects to be used in the scene (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE if the scene was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
BOOL CScene::Initialize() {

    D3DLIGHT8 light;
    HRESULT   hr;

    // Create a directional light
    memset(&light, 0, sizeof(D3DLIGHT8));
    light.Type = D3DLIGHT_DIRECTIONAL;
    light.Diffuse.r = 1.0f;
    light.Diffuse.g = 1.0f;
    light.Diffuse.b = 1.0f;
    light.Diffuse.a = 1.0f;
    light.Specular.r = 1.0f;
    light.Specular.g = 1.0f;
    light.Specular.b = 1.0f;
    light.Specular.a = 1.0f;
    light.Ambient.r = 1.0f;
    light.Ambient.g = 1.0f;
    light.Ambient.b = 1.0f;
    light.Ambient.a = 1.0f;
    light.Direction = D3DXVECTOR3(0.0f, -1.0f, 1.0f);

    hr = m_pDevice->SetLight(0, &light);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::SetLight"))) {
        return FALSE;
    }

    hr = m_pDevice->LightEnable(0, TRUE);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::LightEnable"))) {
        return FALSE;
    }

    // Set a material
    if (!SetMaterial(m_pDevice, RGBA_MAKE(255, 255, 255, 255))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     Efface
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::Efface() {

VerifyTextureListIntegrity();
    ReleaseVertexBuffers();
VerifyTextureListIntegrity();
    ReleaseIndexBuffers();
VerifyTextureListIntegrity();
    ReleaseTextures();
#ifdef UNDER_XBOX
    ReleasePalettes();
#endif

    // Revert to the initial device state
    if (m_bDisplayOK && m_pDevice && m_dwInitialState != 0xFFFFFFFF) {
#ifndef DEMO_HACK
        m_pDevice->ApplyStateBlock(m_dwInitialState);
        m_pDevice->DeleteStateBlock(m_dwInitialState);
#endif
    }
}

//******************************************************************************
//
// Method:
//
//     Update
//
// Description:
//
//     Update the state of the scene to coincide with the given time.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::Update() {

    // Update the scene
}

//******************************************************************************
//
// Method:
//
//     Render
//
// Description:
//
//     Render a scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CScene::Render() {

    LVERTEX  plrVertices[3];
    DWORD    dwClearFlags = D3DCLEAR_TARGET;
    HRESULT  hr;

    if (!m_bCreated) {
        return FALSE;
    }

    plrVertices[0] = LVERTEX(D3DXVECTOR3(-10.0f, -10.0f, 0.0f), RGBA_MAKE(255, 0, 0, 255), 0, 0.0f, 0.0f);
    plrVertices[1] = LVERTEX(D3DXVECTOR3( 0.0f,  10.0f, 0.0f), RGBA_MAKE(0, 0, 255, 255), 0, 0.0f, 0.0f);
    plrVertices[2] = LVERTEX(D3DXVECTOR3( 10.0f, -10.0f, 0.0f), RGBA_MAKE(0, 255, 0, 255), 0, 0.0f, 0.0f);

#ifndef UNDER_XBOX
    hr = m_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return TRUE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!Reset()) {
                return FALSE;
            }
        }
    }
#endif // !UNDER_XBOX

    // Clear the rendering target
    if (m_pDisplay->IsDepthBuffered()) {
        dwClearFlags |= D3DCLEAR_ZBUFFER;
    }
    m_pDevice->Clear(0, NULL, dwClearFlags, RGB_MAKE(0, 0, 0), 1.0f, 0);

    // Begin the scene
    m_pDevice->BeginScene();

    // Position the view using the default camera
    m_pDisplay->SetView();

    // Disable lighting
    m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

    // Use a fixed function shader
    m_pDevice->SetVertexShader(FVF_LVERTEX);

    // Draw a triangle
    m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 1, plrVertices, sizeof(LVERTEX));

    // Display the adapter mode
    ShowDisplayMode();

    // Display the frame rate
    ShowFrameRate();

    // Display the console
    m_pDisplay->ShowConsole();

    // Fade out the scene on exit
    if (m_pfnFade) {
        (this->*m_pfnFade)();
    }

    // End the scene
    m_pDevice->EndScene();

    // Update the screen
    m_pDevice->Present(NULL, NULL, NULL, NULL);

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     Method
//
// Description:
//
//     Reset the scene in response to the restoration of a lost device.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CScene::Reset() {

    if (m_pDisplay) {
        if (!m_pDisplay->ResetDevice()) {
            return FALSE;
        }
    }

    return TRUE;
}

//******************************************************************************
//
// Method:
//
//     ProcessInput
//
// Description:
//
//     Process user input for the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::ProcessInput() {

    static UINT uFMDisplay = 0;

    m_pDisplay->GetJoyState(&m_jsJoys, &m_jsLast);

#ifdef UNDER_XBOX
    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_BACK)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
            FadeOut();
            m_bQuit = TRUE;
        }
    }
#endif // UNDER_XBOX

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_A)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_A)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
                m_bPaused = !m_bPaused;
            }
            else {
                m_bPaused = TRUE;
                m_bAdvance = TRUE;
            }
        }
    }

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_B)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_B)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
                // ##TODO: Reset the device and toggle FSAA
            }
            else {
                if (m_fTimeDilation < 1.5f && m_fTimeDilation > 0.26f) {
                    m_fTimeDilation /= 2.0f;
                }
                else if (m_fTimeDilation < 0.26f) {
                    m_fTimeDilation = 2.0f;
                }
                else if (m_fTimeDilation >= 1.5f) {
                    m_fTimeDilation = 1.0f;
                }
            }
        }
    }

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_WHITE)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_WHITE) && !BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
            m_pDisplay->SetCamera(&m_camInitial);
        }
    }

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_RSTICK)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_RSTICK) && !BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
            switch (uFMDisplay++) {
                case 0:
                    m_bShowFPS = TRUE;
                    m_bShowMode = TRUE;
                    break;
                case 1:
                    m_bShowFPS = TRUE;
                    m_bShowMode = FALSE;
                    break;
                case 2:
                    m_bShowFPS = FALSE;
                    m_bShowMode = TRUE;
                    break;
                case 3:
                    m_bShowFPS = FALSE;
                    m_bShowMode = FALSE;
                    break;
            }
            if (uFMDisplay > 3) {
                uFMDisplay = 0;
            }
        }
    }

    if (BUTTON_CHANGED(m_jsJoys, m_jsLast, JOYBUTTON_LSTICK)) {
        if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_LSTICK)) {
            if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_START)) {
                DWORD dwZFunc;
                if (SUCCEEDED(m_pDevice->GetRenderState(D3DRS_ZFUNC, (LPDWORD)&dwZFunc))) {
                    if (dwZFunc == D3DCMP_LESSEQUAL) {
                        dwZFunc = D3DCMP_ALWAYS;
                    }
                    else {
                        dwZFunc = D3DCMP_LESSEQUAL;
                    }
                    m_pDevice->SetRenderState(D3DRS_ZFUNC, dwZFunc);
                }
            }
            else {
                DWORD dwFillMode;
                if (SUCCEEDED(m_pDevice->GetRenderState(D3DRS_FILLMODE, (LPDWORD)&dwFillMode))) {
                    if (dwFillMode == D3DFILL_SOLID) {
                        dwFillMode = D3DFILL_WIREFRAME;
                    }
                    else {
                        dwFillMode = D3DFILL_SOLID;
                    }
                    m_pDevice->SetRenderState(D3DRS_FILLMODE, dwFillMode);
                }
            }
        }
    }
}

//******************************************************************************
//
// Method:
//
//     InitView
//
// Description:
//
//     Initialize the camera view in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CScene::InitView() {

    if (!m_pDisplay) {
        return FALSE;
    }

    // Set the view position
    m_camInitial.vPosition     = D3DXVECTOR3(0.0f, 0.0f, -50.0f);
    m_camInitial.vInterest     = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_camInitial.fRoll         = 0.0f;
    m_camInitial.fFieldOfView  = M_PI / 4.0f;
    m_camInitial.fNearPlane    = 0.1f;
    m_camInitial.fFarPlane     = 1000.0f;
    m_pDisplay->SetCamera(&m_camInitial);

    return m_pDisplay->SetView(&m_camInitial);
}

//******************************************************************************
//
// Function:
//
//     InitScene
//
// Description:
//
//     Initialize the device and all device objects to be used in the scene (or
//     at least all device resource objects to be created in the video, 
//     non-local video, or default memory pools).
//
// Arguments:
//
//     LPVOID pvParam           - Context data
//
// Return Value:
//
//     TRUE if the scene was successfully initialized for rendering, FALSE if
//     it was not.
//
//******************************************************************************
static BOOL InitScene(LPVOID pvParam) {

    if (pvParam) {
        if (!((CScene*)pvParam)->Setup()) {
            return FALSE;
        }
        return ((CScene*)pvParam)->Initialize();
    }
    else {
        return FALSE;
    }
}

//******************************************************************************
//
// Function:
//
//     EffaceScene
//
// Description:
//
//     Release all device resource objects (or at least those objects created
//     in video memory, non-local video memory, or the default memory pools)
//     and restore the device to its initial state.
//
// Arguments:
//
//     LPVOID pvParam           - Context data
//
// Return Value:
//
//     None.
//
//******************************************************************************
static void EffaceScene(LPVOID pvParam) {

    if (pvParam) {
        ((CScene*)pvParam)->Efface();
    }
}

//******************************************************************************
// Scene window procedure (pseudo-subclassed off the main window procedure)
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     SceneWndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LPVOID pvParam           - Context data
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
static BOOL SceneWndProc(LPVOID pvParam, LRESULT* plr, HWND hWnd, UINT uMsg, 
                         WPARAM wParam, LPARAM lParam)
{
    if (pvParam) {
        return ((CScene*)pvParam)->WndProc(plr, hWnd, uMsg, wParam, lParam);
    }
    else {
        *plr = 0;
        return FALSE;
    }
}

//******************************************************************************
//
// Function:
//
//     WndProc
//
// Description:
//
//     Scene window procedure to process messages received by the main 
//     application window.
//
// Arguments:
//
//     LRESULT* plr             - Result of the message processing
//
//     HWND hWnd                - Application window
//
//     UINT uMsg                - Message to process
//
//     WPARAM wParam            - First message parameter
//
//     LPARAM lParam            - Second message parameter
//
// Return Value:
//
//     TRUE if the message was handled, FALSE otherwise.
//
//******************************************************************************
BOOL CScene::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_RETURN: // Toggle pause state
                    m_bPaused = !m_bPaused;
                    return TRUE;
            }

            break;

        case WM_KEYUP:

            switch (wParam) {

                case VK_SPACE:
                    m_bPaused = TRUE;
                    m_bAdvance = TRUE;
                    return TRUE;
            }

            break;

        case WM_CHAR:

            switch (wParam) {

                case TEXT('O'):
                case TEXT('o'):
                    // Reset the camera to its initial position
                    m_pDisplay->SetCamera(&m_camInitial);
                    return TRUE;

                case TEXT('F'):
                case TEXT('f'):
                    m_bShowFPS = !m_bShowFPS;
                    return TRUE;

                case TEXT('M'):
                case TEXT('m'):
                    m_bShowMode = !m_bShowMode;
                    return TRUE;

                case TEXT('T'):
                case TEXT('t'):
                    if (m_fTimeDilation < 1.5f && m_fTimeDilation > 0.26f) {
                        m_fTimeDilation /= 2.0f;
                    }
                    else if (m_fTimeDilation < 0.26f) {
                        m_fTimeDilation = 2.0f;
                    }
                    else if (m_fTimeDilation >= 1.5f) {
                        m_fTimeDilation = 1.0f;
                    }
                    return 0;

                case TEXT('P'):      // Point fill
                case TEXT('p'):
                    m_pDevice->SetRenderState(D3DRS_FILLMODE, (DWORD)D3DFILL_POINT);
                    return TRUE;

                case TEXT('W'):      // Wireframe fill
                case TEXT('w'):
                    m_pDevice->SetRenderState(D3DRS_FILLMODE, (DWORD)D3DFILL_WIREFRAME);
                    return TRUE;

                case TEXT('S'):      // Solid fill
                case TEXT('s'):
                    m_pDevice->SetRenderState(D3DRS_FILLMODE, (DWORD)D3DFILL_SOLID);
                    return TRUE;

                case TEXT('I'):      // Toggle dithering
                case TEXT('i'): {
                    BOOL bDitheringOn;
                    if (SUCCEEDED(m_pDevice->GetRenderState(D3DRS_DITHERENABLE, (LPDWORD)&bDitheringOn))) {
                        bDitheringOn = !bDitheringOn;
                        m_pDevice->SetRenderState(D3DRS_DITHERENABLE, (DWORD)bDitheringOn);
                    }
                    return TRUE;
                }

                case TEXT('N'):      // Toggle anti-aliasing
                case TEXT('n'): {
                    BOOL bAntialias;
                    if (SUCCEEDED(m_pDevice->GetRenderState(D3DRS_MULTISAMPLEANTIALIAS, (LPDWORD)&bAntialias))) {
                        bAntialias = !bAntialias;
                        m_pDevice->SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, (DWORD)bAntialias);
                    }
                    return TRUE;
                }

                case TEXT('E'):
                case TEXT('e'): {
                    DWORD dwZFunc;
                    if (SUCCEEDED(m_pDevice->GetRenderState(D3DRS_ZFUNC, (LPDWORD)&dwZFunc))) {
                        if (dwZFunc == D3DCMP_LESSEQUAL) {
                            dwZFunc = D3DCMP_ALWAYS;
                        }
                        else {
                            dwZFunc = D3DCMP_LESSEQUAL;
                        }
                        m_pDevice->SetRenderState(D3DRS_ZFUNC, dwZFunc);
                    }
                    return TRUE;
                }
            }
            break;

        case WM_CLOSE:
            FadeOut();
            break;
    }

#endif // !UNDER_XBOX

    return FALSE;
}

//******************************************************************************
// Frame rate
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     ShowFrameRate
//
// Description:
//
//     Overlay the frame rate in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::ShowFrameRate() {

    if (m_bShowFPS && !(GetStartupContext() & TSTART_STRESS)) {

        TCHAR sz[256];
        float fHeight = (float)m_pDisplay->GetHeight() / 20.0f;
        float fWidth = fHeight / CHAR_ASPECT;
        UINT  uLen;
        _stprintf(sz, TEXT("%.02f fps"), m_fFPS);
        uLen = _tcslen(sz);
        xTextOut((float)(m_pDisplay->GetWidth() / 2) - (float)(uLen / 2) * fWidth, 
                    (float)m_pDisplay->GetHeight() - (fHeight * 2.0f), fWidth, fHeight, 
                    RGBA_XCOLOR(255, 255, 0, 255), sz, uLen);
    }
}

//******************************************************************************
// Display mode
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     ShowDisplayMode
//
// Description:
//
//     Overlay the current display mode in the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::ShowDisplayMode() {

    if (m_bShowMode && !(GetStartupContext() & TSTART_STRESS)) {

        UINT uLen;
        float fHeight = (float)m_pDisplay->GetHeight() / 20.0f;
        float fWidth = fHeight / CHAR_ASPECT;
        uLen = _tcslen(m_szDisplayMode);
        xTextOut((float)(m_pDisplay->GetWidth() / 2) - (float)(uLen / 2) * fWidth, 
                    fHeight, fWidth, fHeight, RGBA_XCOLOR(255, 255, 0, 255), 
                    m_szDisplayMode, uLen);
    }
}

//******************************************************************************
//
// Function:
//
//     InitDisplayModeString
//
// Description:
//
//     Initialize the display mode string.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::InitDisplayModeString() {

    DISPLAYDESC disd;
    TCHAR szFormat[16];
    D3DFORMAT fmtd;
    D3DDISPLAYMODE dm;
    D3DMULTISAMPLE_TYPE mst;

    // Initialize the display mode string
    m_pDisplay->GetCurrentDisplay(&disd);
    if (disd.bWindowed) {
        dm.Width = m_pDisplay->GetWidth();
        dm.Height = m_pDisplay->GetHeight();
        dm.RefreshRate = disd.padpd->d3ddmWindowed.RefreshRate;
        dm.Format = disd.padpd->d3ddmWindowed.Format;
        fmtd = disd.pdevd->fmtdWindowed;
        mst = disd.pdevd->d3dmstWindowed;
    }
    else {
        dm.Width = disd.pdm->d3ddm.Width;
        dm.Height = disd.pdm->d3ddm.Height;
        dm.RefreshRate = disd.pdm->d3ddm.RefreshRate;
        dm.Format = disd.pdm->d3ddm.Format;
        fmtd = disd.pdm->fmtd;
        mst = disd.pdm->d3dmst;
    }

    _stprintf(m_szDisplayMode, TEXT("%dx%d"), dm.Width, dm.Height);
    if (dm.RefreshRate) {
        _stprintf(m_szDisplayMode + _tcslen(m_szDisplayMode), TEXT(" %dHz"), dm.RefreshRate);
    }
    switch (dm.Format) {
#ifndef UNDER_XBOX
        case D3DFMT_X8R8G8B8:
#else
        case D3DFMT_LIN_X8R8G8B8:
#endif // UNDER_XBOX
            _tcscpy(szFormat, TEXT(" X8R8G8B8"));
            break;
#ifndef UNDER_XBOX
        case D3DFMT_A8R8G8B8:
#else
        case D3DFMT_LIN_A8R8G8B8:
#endif // UNDER_XBOX
            _tcscpy(szFormat, TEXT(" A8R8G8B8"));
            break;
#ifndef UNDER_XBOX
        case D3DFMT_X1R5G5B5:
#else
        case D3DFMT_LIN_X1R5G5B5:
#endif // UNDER_XBOX
            _tcscpy(szFormat, TEXT(" X1R5G5B5"));
            break;
#ifndef UNDER_XBOX
        case D3DFMT_R5G6B5:
#else
        case D3DFMT_LIN_R5G6B5:
#endif // UNDER_XBOX
            _tcscpy(szFormat, TEXT(" R5G6B5"));
            break;
    }
    _tcscat(m_szDisplayMode, szFormat);
    if (disd.bDepthBuffer) {
        switch (fmtd) {
#ifndef UNDER_XBOX
            case D3DFMT_D16:
#else
            case D3DFMT_LIN_D16:
#endif // UNDER_XBOX
                _tcscat(m_szDisplayMode, TEXT(" D16"));
                break;
#ifndef UNDER_XBOX
            case D3DFMT_D24S8:
#else
            case D3DFMT_LIN_D24S8:
#endif // UNDER_XBOX
                _tcscat(m_szDisplayMode, TEXT(" D24S8"));
                break;
#ifdef UNDER_XBOX
            case D3DFMT_LIN_F16:
                _tcscat(m_szDisplayMode, TEXT(" F16"));
                break;
            case D3DFMT_LIN_F24S8:
                _tcscat(m_szDisplayMode, TEXT(" F24S8"));
                break;
#endif // UNDER_XBOX
        }
    }
    if (disd.bAntialias && mst != D3DMULTISAMPLE_NONE) {
#ifndef UNDER_XBOX
        _stprintf(m_szDisplayMode + _tcslen(m_szDisplayMode), TEXT(" %dx"), (UINT)mst);
#else
        switch (mst & 0xFFFF) {
            case D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_LINEAR:
                _tcscat(m_szDisplayMode, TEXT(" 2xML"));
                break;
            case D3DMULTISAMPLE_2_SAMPLES_MULTISAMPLE_QUINCUNX:
                _tcscat(m_szDisplayMode, TEXT(" 2xMQ"));
                break;
            case D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_HORIZONTAL_LINEAR:
                _tcscat(m_szDisplayMode, TEXT(" 2xMH"));
                break;
            case D3DMULTISAMPLE_2_SAMPLES_SUPERSAMPLE_VERTICAL_LINEAR:
                _tcscat(m_szDisplayMode, TEXT(" 2xMV"));
                break;
            case D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_LINEAR:
                _tcscat(m_szDisplayMode, TEXT(" 4xML"));
                break;
            case D3DMULTISAMPLE_4_SAMPLES_MULTISAMPLE_GAUSSIAN:
                _tcscat(m_szDisplayMode, TEXT(" 4xMG"));
                break;
            case D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_LINEAR:
                _tcscat(m_szDisplayMode, TEXT(" 4xSL"));
                break;
            case D3DMULTISAMPLE_4_SAMPLES_SUPERSAMPLE_GAUSSIAN:
                _tcscat(m_szDisplayMode, TEXT(" 4xSG"));
                break;
            case D3DMULTISAMPLE_9_SAMPLES_MULTISAMPLE_GAUSSIAN:
                _tcscat(m_szDisplayMode, TEXT(" 9xMG"));
                break;
            case D3DMULTISAMPLE_9_SAMPLES_SUPERSAMPLE_GAUSSIAN:
                _tcscat(m_szDisplayMode, TEXT(" 9xSG"));
                break;
        }
        switch (mst & 0xF0000) {
            case D3DMULTISAMPLE_PREFILTER_FORMAT_DEFAULT:
                _tcscat(m_szDisplayMode, szFormat);
                break;
            case D3DMULTISAMPLE_PREFILTER_FORMAT_X1R5G5B5:
                _tcscat(m_szDisplayMode, TEXT(" X1R5G5B5"));
                break;
            case D3DMULTISAMPLE_PREFILTER_FORMAT_R5G6B5:
                _tcscat(m_szDisplayMode, TEXT(" R5G6B5"));
                break;
            case D3DMULTISAMPLE_PREFILTER_FORMAT_X8R8G8B8:
                _tcscat(m_szDisplayMode, TEXT(" X8R8G8B8"));
                break;
            case D3DMULTISAMPLE_PREFILTER_FORMAT_A8R8G8B8:
                _tcscat(m_szDisplayMode, TEXT(" X8R8G8B8"));
                break;
        }
#endif // UNDER_XBOX
    }
}

//******************************************************************************
// Fade functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     FadeOut
//
// Description:
//
//     Fade out the scene.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::FadeOut() {

    int i, fps;

    if (!m_bFade || (GetStartupContext() & TSTART_STRESS)) {
        return;
    }

    m_prFade[0] = TLVERTEX(D3DXVECTOR3(0.0f, (float)m_pDisplay->GetHeight(), 0.000009f), 110000.0f, RGBA_MAKE(0,0,0,255), RGBA_MAKE(0,0,0,0), 0.0f, 1.0f);
    m_prFade[1] = TLVERTEX(D3DXVECTOR3(0.0f, 0.0f, 0.000009f), 110000.0f, RGBA_MAKE(0,0,0,255), RGBA_MAKE(0,0,0,0), 0.0f, 0.0f);
    m_prFade[2] = TLVERTEX(D3DXVECTOR3((float)m_pDisplay->GetWidth(), 0.0f, 0.000009f), 110000.0f, RGBA_MAKE(0,0,0,255), RGBA_MAKE(0,0,0,0), 1.0f, 0.0f);
    m_prFade[3] = TLVERTEX(D3DXVECTOR3((float)m_pDisplay->GetWidth(), (float)m_pDisplay->GetHeight(), 0.000009f), 110000.0f, RGBA_MAKE(0,0,0,255), RGBA_MAKE(0,0,0,0), 1.0f, 1.0f);

    m_pfnFade = ApplyFade;

    fps = (int)(m_fFPS + 0.5f);

    for (i = fps - 1; i >= 0; i--) {
        m_fadeAlpha = 255 - (BYTE)((float)i / (float)fps * 255.0f);
        if (!m_bPaused) {
            Update();
        }
        Render();
    }
}

//******************************************************************************
//
// Function:
//
//     ApplyFade
//
// Description:
//
//     Fade the scene to black.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void CScene::ApplyFade() {

//    CBaseTexture8*          pd3dtCurrent;
//    CVertexBuffer8*         pd3drCurrent;
//    UINT                    uStride;
//    DWORD                   dwSrcBlend, dwDstBlend, dwBlend, dwColorOp0, 
//                            dwColorOp1, dwAlphaOp0, dwColorArg1, dwColorArg2, 
//                            dwAlphaArg1, dwAlphaArg2, dwAlphaTest, dwShader;
    DWORD dwBlock;
    HRESULT hr;

    // Save the device state
    hr = m_pDevice->CreateStateBlock(D3DSBT_ALL, &dwBlock);
    if (FAILED(hr)) {
        return;
    }

    // Fade out the scene
    m_prFade[0].cDiffuse = m_prFade[1].cDiffuse = m_prFade[2].cDiffuse 
                         = m_prFade[3].cDiffuse = m_fadeAlpha << 24;

//    m_pDevice->GetRenderState(D3DRS_SRCBLEND, &dwSrcBlend);
//    m_pDevice->GetRenderState(D3DRS_DESTBLEND, &dwDstBlend);
//    m_pDevice->GetRenderState(D3DRS_ALPHABLENDENABLE, &dwBlend);
//    m_pDevice->GetRenderState(D3DRS_ALPHATESTENABLE, &dwAlphaTest);
//    m_pDevice->GetTextureStageState(0, D3DTSS_COLOROP, &dwColorOp0);
//    m_pDevice->GetTextureStageState(0, D3DTSS_COLORARG1, &dwColorArg1);
 //   m_pDevice->GetTextureStageState(0, D3DTSS_COLORARG2, &dwColorArg2);
 //   m_pDevice->GetTextureStageState(0, D3DTSS_ALPHAOP, &dwAlphaOp0);
//    m_pDevice->GetTextureStageState(0, D3DTSS_ALPHAARG1, &dwAlphaArg1);
//    m_pDevice->GetTextureStageState(0, D3DTSS_ALPHAARG2, &dwAlphaArg2);
//    m_pDevice->GetTextureStageState(1, D3DTSS_COLOROP, &dwColorOp1);
//    m_pDevice->GetStreamSource(0, &pd3drCurrent, &uStride);
//    m_pDevice->GetTexture(0, &pd3dtCurrent);
//    m_pDevice->GetVertexShader(&dwShader);

    m_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    m_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    m_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, FALSE);
    m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);
    SetColorStage(m_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_SELECTARG2);
    SetAlphaStage(m_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_SELECTARG2);
    m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    m_pDevice->SetTexture(0, NULL);
    m_pDevice->SetVertexShader(FVF_TLVERTEX);
    m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, m_prFade, sizeof(TLVERTEX));

//    m_pDevice->SetVertexShader(dwShader);
//    m_pDevice->SetTexture(0, pd3dtCurrent);
//    if (pd3drCurrent) {
//        m_pDevice->SetStreamSource(0, pd3drCurrent, uStride);
//    }
//    SetColorStage(m_pDevice, 0, dwColorArg1, dwColorArg2, (D3DTEXTUREOP)dwColorOp0);
//    SetAlphaStage(m_pDevice, 0, dwAlphaArg1, dwAlphaArg2, (D3DTEXTUREOP)dwAlphaOp0);
//    m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, dwColorOp1);
//    m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, dwBlend);
//    m_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, dwAlphaTest);
//    m_pDevice->SetRenderState(D3DRS_SRCBLEND, dwSrcBlend);
//    m_pDevice->SetRenderState(D3DRS_DESTBLEND, dwDstBlend);

    m_pDevice->ApplyStateBlock(dwBlock);
    m_pDevice->DeleteStateBlock(dwBlock);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\swapchn.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    swapchn.h

Description:

    IDirect3DSwapChain classes.

*******************************************************************************/

#ifndef __SWAPCHN_H__
#define __SWAPCHN_H__

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif

#ifndef UNDER_XBOX

//******************************************************************************
// CSwapChain
//******************************************************************************

//******************************************************************************
class CSwapChain : public CObject {

protected:

public:

                        CSwapChain();
                        ~CSwapChain();
};

//******************************************************************************
class CSwapChain8 : public CSwapChain {

protected:

    LPDIRECT3DSWAPCHAIN8 m_pd3dsw;
    CDevice8*            m_pDevice;

public:

                        CSwapChain8();
                        ~CSwapChain8();
    virtual BOOL        Create(CDevice8* pDevice, LPDIRECT3DSWAPCHAIN8 pd3dsw);

    virtual LPDIRECT3DSWAPCHAIN8 GetIDirect3DSwapChain8();

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Presentation

    virtual HRESULT     Present(RECT* prectSrc, RECT* prectDst, HWND hDstWindowOverride, RGNDATA* prgnDirtyRegion);

    // Surface management

    virtual HRESULT     GetBackBuffer(UINT uBackBuffer, D3DBACKBUFFER_TYPE bbt, CSurface8** ppBackBuffer);
};

//******************************************************************************
class CCSwapChain8 : public CSwapChain8 {

protected:

    CClient*            m_pClient;

public:

                        CCSwapChain8();
                        ~CCSwapChain8();
    virtual BOOL        Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DSWAPCHAIN8 pd3dsw);

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Presentation

    virtual HRESULT     Present(RECT* prectSrc, RECT* prectDst, HWND hDstWindowOverride, RGNDATA* prgnDirtyRegion);

    // Surface management

    virtual HRESULT     GetBackBuffer(UINT uBackBuffer, D3DBACKBUFFER_TYPE bbt, CSurface8** ppBackBuffer);
};

#endif // !UNDER_XBOX

#endif // __SWAPCHN_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\tex.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    tex.h

Description:

    IDirect3DTexture classes.

*******************************************************************************/

#ifndef __TEX_H__
#define __TEX_H__

//******************************************************************************
// CBaseTexture
//******************************************************************************

//******************************************************************************
class CTexture : public CBaseTexture {

protected:

public:

                        CTexture();
                        ~CTexture();
};

//******************************************************************************
class CTexture8 : public CBaseTexture8 {

protected:

    LPDIRECT3DTEXTURE8  m_pd3dt;

public:

                        CTexture8();
                        ~CTexture8();
    virtual BOOL        Create(CDevice8* pDevice, LPDIRECT3DTEXTURE8 pd3dt);

    virtual 
    LPDIRECT3DTEXTURE8  GetIDirect3DTexture8();

    // Information

    virtual HRESULT     GetLevelDesc(UINT uLevel, D3DSURFACE_DESC* pd3dsd);

    // Locking surfaces

    virtual HRESULT     LockRect(UINT uLevel, D3DLOCKED_RECT* pd3dlr, RECT* prect, DWORD dwFlags);
    virtual HRESULT     UnlockRect(UINT uLevel);

    // Miscellaneous

    virtual HRESULT     AddDirtyRect(RECT* prectDirty);
    virtual HRESULT     GetSurfaceLevel(UINT uLevel, CSurface8** ppSurfaceLevel);
};

//******************************************************************************
class CCTexture8 : public CTexture8 {

protected:

    CClient*            m_pClient;

    PSLOCKDESC          m_pslockd;

public:

                        CCTexture8();
                        ~CCTexture8();
    virtual BOOL        Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DTEXTURE8 pd3dt);

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Resource information

    virtual 
    D3DRESOURCETYPE     GetType();
    virtual HRESULT     GetDevice(CDevice8** ppDevice);

    // Resource private surface data

    virtual HRESULT     GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData);
    virtual HRESULT     SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags);
    virtual HRESULT     FreePrivateData(REFGUID refguid);

    // Resource management

    virtual DWORD       GetPriority();
    virtual DWORD       SetPriority(DWORD dwNewPriority);
    virtual void        PreLoad();

    // Base texture information

    virtual DWORD       GetLevelCount();

    // Base texture detail

    virtual DWORD       GetLOD();
    virtual DWORD       SetLOD(DWORD dwNewLOD);

    // Information

    virtual HRESULT     GetLevelDesc(UINT uLevel, D3DSURFACE_DESC* pd3dsd);

    // Locking surfaces

    virtual HRESULT     LockRect(UINT uLevel, D3DLOCKED_RECT* pd3dlr, RECT* prect, DWORD dwFlags);
    virtual HRESULT     UnlockRect(UINT uLevel);

    // Miscellaneous

    virtual HRESULT     AddDirtyRect(RECT* prectDirty);
    virtual HRESULT     GetSurfaceLevel(UINT uLevel, CSurface8** ppSurfaceLevel);
};

#endif // __TEX_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\swapchn.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    swapchn.cpp

Author:

    Matt Bronder

Description:

    CSwapChain methods.

*******************************************************************************/

#ifndef UNDER_XBOX

#include "d3dlocus.h"

//******************************************************************************
// CSwapChain
//******************************************************************************

//******************************************************************************
CSwapChain::CSwapChain() {
}

//******************************************************************************
CSwapChain::~CSwapChain() {
}

//******************************************************************************
// CSwapChain8
//******************************************************************************

//******************************************************************************
CSwapChain8::CSwapChain8() {

    m_pd3dsw = NULL;
}

//******************************************************************************
CSwapChain8::~CSwapChain8() {

    if (m_pDevice) {
        m_pDevice->RemoveObject(m_pd3dsw);
    }
}

//******************************************************************************
BOOL CSwapChain8::Create(CDevice8* pDevice, LPDIRECT3DSWAPCHAIN8 pd3dsw) {

    if (m_pd3dsw) {
        return FALSE;
    }

    if (pDevice && pd3dsw) {

        if (!pDevice->AddObject(pd3dsw, this)) {
            return FALSE;
        }

        m_pDevice = pDevice;

        m_pd3dsw = pd3dsw;
    }

    return (BOOL)m_pd3dsw;
}

//******************************************************************************
ULONG CSwapChain8::AddRef() {

    ULONG uRef = 0;

    if (m_pd3dsw) {
        uRef = m_pd3dsw->AddRef();
        CObject::AddRef();
    }

    return uRef;
}

//******************************************************************************
ULONG CSwapChain8::Release() {

    ULONG uRef = 0;

    if (m_pd3dsw) {
        uRef = m_pd3dsw->Release();
        CObject::Release();
    }

    return uRef;
}

//******************************************************************************
LPDIRECT3DSWAPCHAIN8 CSwapChain8::GetIDirect3DSwapChain8() {

    return m_pd3dsw;
}

//******************************************************************************
HRESULT CSwapChain8::Present(RECT* prectSrc, RECT* prectDst, HWND hDstWindowOverride, RGNDATA* prgnDirtyRegion) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dsw) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dsw->Present(prectSrc, prectDst, hDstWindowOverride, prgnDirtyRegion);
}

//******************************************************************************
HRESULT CSwapChain8::GetBackBuffer(UINT uBackBuffer, D3DBACKBUFFER_TYPE bbt, CSurface8** ppBackBuffer) {

    LPDIRECT3DSURFACE8  pd3ds;
    CSurface8*          pSurface;
    HRESULT             hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dsw || !m_pDevice) {
        return ERR_NOTCREATED;
    }

    if (!ppBackBuffer) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppBackBuffer = NULL;

    hr = m_pd3dsw->GetBackBuffer(uBackBuffer, bbt, &pd3ds);
    if (SUCCEEDED(hr)) {
        
        if (m_pDevice->FindObject((LPVOID)pd3ds, (LPVOID*)&pSurface)) {
            pSurface->CObject::AddRef();
        }
        else {
            pSurface = new CSurface8();
            if (!pSurface) {
                pd3ds->Release();
                return E_OUTOFMEMORY;
            }

            if (!pSurface->Create(m_pDevice, pd3ds)) {
                pd3ds->Release();
                return ERR_LOCUSFAIL;
            }
        }

        *ppBackBuffer = pSurface;
    }

    return hr;
}

//******************************************************************************
// CCSwapChain8
//******************************************************************************

//******************************************************************************
CCSwapChain8::CCSwapChain8() {
}

//******************************************************************************
CCSwapChain8::~CCSwapChain8() {
}

//******************************************************************************
BOOL CCSwapChain8::Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DSWAPCHAIN8 pd3dsw) {

    if (!pClient) {
        return FALSE;
    }
    m_pClient = pClient;
    return CSwapChain8::Create(pDevice, pd3dsw);
}

//******************************************************************************
ULONG CCSwapChain8::AddRef() {

    ULONG uRefC = 0, uRefS;

    if (m_pd3dsw) {
        uRefC = m_pd3dsw->AddRef();
        if (m_pClient->CallMethod(MID_SWC8_AddRef, this, &uRefS)) {
            if (uRefC != uRefS) {
                Log(LOG_WARN, TEXT("IDirect3DSwapChain8::AddRef result inconsistent [C: %d, S: %d]"), uRefC, uRefS);
            }
        }
        CObject::AddRef();
    }

    return uRefC;
}

//******************************************************************************
ULONG CCSwapChain8::Release() {

    ULONG uRefC = 0, uRefS;

    if (m_pd3dsw) {
        uRefC = m_pd3dsw->Release();
        if (m_pClient->CallMethod(MID_SWC8_Release, this, &uRefS)) {
            if (uRefC != uRefS) {
                Log(LOG_WARN, TEXT("IDirect3DSwapChain8::Release result inconsistent [C: %d, S: %d]"), uRefC, uRefS);
            }
        }
        CObject::Release();
    }

    return uRefC;
}

//******************************************************************************
HRESULT CCSwapChain8::Present(RECT* prectSrc, RECT* prectDst, HWND hDstWindowOverride, RGNDATA* prgnDirtyRegion) {

    static RECT     rectNULL = {-1, -1, -1, -1};
    static RGNDATA  rgnNULL = {{sizeof(RGNDATAHEADER), RDH_RECTANGLES, 0, 0, {-1, -1, -1, -1}}, '\0'};
    HRESULT         hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dsw) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dsw->Present(prectSrc, prectDst, hDstWindowOverride, prgnDirtyRegion);

    if (!prectSrc) {
        prectSrc = &rectNULL;
    }
    if (!prectDst) {
        prectDst = &rectNULL;
    }
    if (!prgnDirtyRegion) {
        prgnDirtyRegion = &rgnNULL;
    }

    if (m_pClient->CallMethod(MID_SWC8_Present, this, &hrS, prectSrc, sizeof(RECT), prectDst, sizeof(RECT), hDstWindowOverride, prgnDirtyRegion, sizeof(RGNDATA))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DSwapChain8::Present result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCSwapChain8::GetBackBuffer(UINT uBackBuffer, D3DBACKBUFFER_TYPE bbt, CSurface8** ppBackBuffer) {

    LPDIRECT3DSURFACE8  pd3ds;
    CCSurface8*         pSurface;
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dsw || !m_pDevice) {
        return ERR_NOTCREATED;
    }

    if (!ppBackBuffer) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppBackBuffer = NULL;

    hrC = m_pd3dsw->GetBackBuffer(uBackBuffer, bbt, &pd3ds);
    if (SUCCEEDED(hrC)) {
        
        if (m_pDevice->FindObject((LPVOID)pd3ds, (LPVOID*)&pSurface)) {
            pSurface->CObject::AddRef();
        }
        else {
            pSurface = new CCSurface8();
            if (!pSurface) {
                pd3ds->Release();
                return E_OUTOFMEMORY;
            }

            if (!pSurface->Create(m_pClient, m_pDevice, pd3ds)) {
                pd3ds->Release();
                return ERR_LOCUSFAIL;
            }
        }

        *ppBackBuffer = pSurface;
    }
    else {
        pSurface = NULL;
    }

    if (m_pClient->CallMethod(MID_SWC8_GetBackBuffer, this, &hrS, uBackBuffer, bbt, &pSurface)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DSwapChain8::GetBackBuffer result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

#endif // !UNDER_XBOX
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\tex.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    tex.cpp

Author:

    Matt Bronder

Description:

    CTexture methods.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// CTexture
//******************************************************************************

//******************************************************************************
CTexture::CTexture() {
}

//******************************************************************************
CTexture::~CTexture() {
}

//******************************************************************************
// CTexture8
//******************************************************************************

//******************************************************************************
CTexture8::CTexture8() {

    m_pd3dt = NULL;
}

//******************************************************************************
CTexture8::~CTexture8() {
}

//******************************************************************************
BOOL CTexture8::Create(CDevice8* pDevice, LPDIRECT3DTEXTURE8 pd3dt) {

    if (m_pd3dt) {
        return FALSE;
    }

    if (CBaseTexture8::Create(pDevice, (LPDIRECT3DBASETEXTURE8)pd3dt)) {
        m_pd3dt = pd3dt;
    }

    return (BOOL)m_pd3dt;
}

//******************************************************************************
LPDIRECT3DTEXTURE8 CTexture8::GetIDirect3DTexture8() {

    return m_pd3dt;
}

//******************************************************************************
HRESULT CTexture8::GetLevelDesc(UINT uLevel, D3DSURFACE_DESC* pd3dsd) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dt) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dt->GetLevelDesc(uLevel, pd3dsd);
}

//******************************************************************************
HRESULT CTexture8::LockRect(UINT uLevel, D3DLOCKED_RECT* pd3dlr, RECT* prect, DWORD dwFlags) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dt) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dt->LockRect(uLevel, pd3dlr, prect, dwFlags);
}

//******************************************************************************
HRESULT CTexture8::UnlockRect(UINT uLevel) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dt) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dt->UnlockRect(uLevel);
}

//******************************************************************************
HRESULT CTexture8::AddDirtyRect(RECT* prectDirty) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dt) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dt->AddDirtyRect(prectDirty);
#else
    Log(LOG_FAIL, TEXT("IDirect3DTexture8::AddDirtyRect is not implemented on XBox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CTexture8::GetSurfaceLevel(UINT uLevel, CSurface8** ppSurfaceLevel) {

    LPDIRECT3DSURFACE8  pd3ds;
    CSurface8*          pSurface;
    HRESULT             hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dt) {
        return ERR_NOTCREATED;
    }

    if (!ppSurfaceLevel) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppSurfaceLevel = NULL;

    hr = m_pd3dt->GetSurfaceLevel(uLevel, &pd3ds);
    if (SUCCEEDED(hr)) {
        
        if (m_pDevice->FindObject((LPVOID)pd3ds, (LPVOID*)&pSurface)) {
            pSurface->CObject::AddRef();
        }
        else {
            pSurface = new CSurface8();
            if (!pSurface) {
                pd3ds->Release();
                return E_OUTOFMEMORY;
            }

            if (!pSurface->Create(m_pDevice, pd3ds)) {
                pd3ds->Release();
                return ERR_LOCUSFAIL;
            }
        }

        *ppSurfaceLevel = pSurface;
    }

    return hr;
}

//******************************************************************************
// CCTexture8
//******************************************************************************

//******************************************************************************
CCTexture8::CCTexture8() {

    m_pslockd = NULL;
}

//******************************************************************************
CCTexture8::~CCTexture8() {

    if (m_pslockd) {
        MemFree(m_pslockd);
    }
}

//******************************************************************************
BOOL CCTexture8::Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DTEXTURE8 pd3dt) {

    if (!pClient) {
        return FALSE;
    }
    m_pClient = pClient;
    if (!CTexture8::Create(pDevice, pd3dt)) {
        return FALSE;
    }

    m_pslockd = (PSLOCKDESC)MemAlloc(pd3dt->GetLevelCount() * sizeof(SLOCKDESC));
    if (!m_pslockd) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
ULONG CCTexture8::AddRef() {

    return CCResource8_AddRef(this, m_pClient);
}

//******************************************************************************
ULONG CCTexture8::Release() {

    return CCResource8_Release(this, m_pClient);
}

//******************************************************************************
D3DRESOURCETYPE CCTexture8::GetType() {

    return CCResource8_GetType(this, m_pClient);
}

//******************************************************************************
HRESULT CCTexture8::GetDevice(CDevice8** ppDevice) {

    return CCResource8_GetDevice(this, m_pClient, ppDevice);
}

//******************************************************************************
HRESULT CCTexture8::GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData) {

    return CCResource8_GetPrivateData(this, m_pClient, refguid, pvData, pdwSizeOfData);
}

//******************************************************************************
HRESULT CCTexture8::SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags) {

    return CCResource8_SetPrivateData(this, m_pClient, refguid, pvData, dwSizeOfData, dwFlags);
}

//******************************************************************************
HRESULT CCTexture8::FreePrivateData(REFGUID refguid) {

    return CCResource8_FreePrivateData(this, m_pClient, refguid);
}

//******************************************************************************
DWORD CCTexture8::GetPriority() {

    return CCResource8_GetPriority(this, m_pClient);
}

//******************************************************************************
DWORD CCTexture8::SetPriority(DWORD dwNewPriority) {

    return CCResource8_SetPriority(this, m_pClient, dwNewPriority);
}

//******************************************************************************
void CCTexture8::PreLoad() {

    CCResource8_PreLoad(this, m_pClient);
}

//******************************************************************************
DWORD CCTexture8::GetLevelCount() {

    return CCBaseTexture8_GetLevelCount(this, m_pClient);
}

//******************************************************************************
DWORD CCTexture8::GetLOD() {

    return CCBaseTexture8_GetLOD(this, m_pClient);
}

//******************************************************************************
DWORD CCTexture8::SetLOD(DWORD dwNewLOD) {

    return CCBaseTexture8_SetLOD(this, m_pClient, dwNewLOD);
}

//******************************************************************************
HRESULT CCTexture8::GetLevelDesc(UINT uLevel, D3DSURFACE_DESC* pd3dsd) {

#ifndef UNDER_XBOX
    D3DSURFACE_DESC         d3dsd;
#else
    WINX_D3DSURFACE_DESC    d3dsd;
#endif // UNDER_XBOX
    HRESULT                 hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dt) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dt->GetLevelDesc(uLevel, pd3dsd);

#ifndef UNDER_XBOX
    if (m_pClient->CallMethod(MID_TEX8_GetLevelDesc, this, &hrS, uLevel, &d3dsd, sizeof(D3DSURFACE_DESC))) {
#else
    if (m_pClient->CallMethod(MID_TEX8_GetLevelDesc, this, &hrS, uLevel, &d3dsd, sizeof(WINX_D3DSURFACE_DESC))) {
#endif // UNDER_XBOX
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DTexture8::GetLevelDesc result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else {
#ifndef UNDER_XBOX
            if (memcmp(pd3dsd, &d3dsd, sizeof(D3DSURFACE_DESC))) {
#else
            if (pd3dsd->Type != d3dsd.Type ||
                pd3dsd->Width != d3dsd.Width ||
                pd3dsd->Height != d3dsd.Height ||
                pd3dsd->MultiSampleType != d3dsd.MultiSampleType)
            {
#endif // UNDER_XBOX
                Log(LOG_WARN, TEXT("IDirect3DTexture8::GetLevelDesc returned an inconsistent description"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCTexture8::LockRect(UINT uLevel, D3DLOCKED_RECT* pd3dlr, RECT* prect, DWORD dwFlags) {

    RECT    rectNULL = {-1, -1, -1, -1};
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dt) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dt->LockRect(uLevel, pd3dlr, prect, dwFlags);

    if (pd3dlr) {
        memcpy(&m_pslockd[uLevel].d3dlr, pd3dlr, sizeof(D3DLOCKED_RECT));
    }
    else {
        m_pslockd[uLevel].d3dlr.pBits = 0;
    }
    if (!prect) {
        prect = &rectNULL;
    }
    memcpy(&m_pslockd[uLevel].rect, prect, sizeof(RECT));
    m_pslockd[uLevel].dwFlags = dwFlags;

    if (m_pClient->CallMethod(MID_TEX8_LockRect, this, &hrS, uLevel, &m_pslockd[uLevel].d3dlrSrv, sizeof(D3DLOCKED_RECT), &m_pslockd[uLevel].rect, sizeof(RECT), dwFlags)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DTexture8::LockRect result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCTexture8::UnlockRect(UINT uLevel) {

    LPBYTE  pBits;
    DWORD   dwSize;
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dt) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    if (m_pslockd[uLevel].dwFlags & D3DLOCK_READONLY) {
        pBits = NULL;
        dwSize = 0;
    }
    else {
        D3DSURFACE_DESC d3dsd;
        DWORD           dwWidth, dwHeight, dwBitDepth;
        UINT            i;

        m_pd3dt->GetLevelDesc(uLevel, &d3dsd);
        if (m_pslockd[uLevel].rect.left == -1) {
            dwWidth = d3dsd.Width;
            dwHeight = d3dsd.Height;
        }
        else {
            dwWidth = m_pslockd[uLevel].rect.right - m_pslockd[uLevel].rect.left;
            dwHeight = m_pslockd[uLevel].rect.bottom - m_pslockd[uLevel].rect.top;
        }
        dwBitDepth = FormatToBitDepth(d3dsd.Format);
        dwSize = dwHeight * dwWidth * dwBitDepth / 8;
        pBits = (LPBYTE)MemAlloc(dwSize);

#ifdef UNDER_XBOX
        if (!XGIsSwizzledFormat(d3dsd.Format)) {
#endif
            if (IsCompressedFormat(d3dsd.Format)) {
                memcpy(pBits, m_pslockd[uLevel].d3dlr.pBits, dwWidth * dwHeight * dwBitDepth / 8);
            }
            else {
                for (i = 0; i < dwHeight; i++) {
                    memcpy(pBits + i * dwWidth * dwBitDepth / 8, (LPBYTE)m_pslockd[uLevel].d3dlr.pBits + i * m_pslockd[uLevel].d3dlr.Pitch, dwWidth * dwBitDepth / 8);
                }
            }
#ifdef UNDER_XBOX
        }
        else {
            // Since locking a subrect on a swizzled surface is unsupported on Xbox, simply unswizzle the entire surface
            XGUnswizzleRect(m_pslockd[uLevel].d3dlr.pBits, dwWidth, dwHeight, NULL, pBits, 
                            dwWidth * dwBitDepth / 8, NULL, dwBitDepth / 8);
        }
#endif
    }

    hrC = m_pd3dt->UnlockRect(uLevel);

    if (m_pClient->CallMethod(MID_TEX8_UnlockRect, this, &hrS, uLevel, &m_pslockd[uLevel].d3dlrSrv, sizeof(D3DLOCKED_RECT), &m_pslockd[uLevel].rect, sizeof(RECT), m_pslockd[uLevel].dwFlags, pBits, dwSize)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DTexture8::UnlockRect result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    if (pBits) {
        MemFree(pBits);
    }

    return hrC;
}

//******************************************************************************
HRESULT CCTexture8::AddDirtyRect(RECT* prectDirty) {

    RECT    rectNULL = {-1, -1, -1, -1};
    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dt) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    hrC = m_pd3dt->AddDirtyRect(prectDirty);

    if (!prectDirty) {
        prectDirty = &rectNULL;
    }

    if (m_pClient->CallMethod(MID_TEX8_AddDirtyRect, this, &hrS, prectDirty, sizeof(RECT))) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DTexture8::AddDirtyRect result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
#else
    Log(LOG_FAIL, TEXT("IDirect3DTexture8::AddDirtyRect is not implemented on XBox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CCTexture8::GetSurfaceLevel(UINT uLevel, CSurface8** ppSurfaceLevel) {

    LPDIRECT3DSURFACE8  pd3ds;
    CCSurface8*         pSurface;
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dt) {
        return ERR_NOTCREATED;
    }

    if (!ppSurfaceLevel) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppSurfaceLevel = NULL;

    hrC = m_pd3dt->GetSurfaceLevel(uLevel, &pd3ds);
    if (SUCCEEDED(hrC)) {
        
        if (m_pDevice->FindObject((LPVOID)pd3ds, (LPVOID*)&pSurface)) {
            pSurface->CObject::AddRef();
        }
        else {
            pSurface = new CCSurface8();
            if (!pSurface) {
                pd3ds->Release();
                return E_OUTOFMEMORY;
            }

            if (!pSurface->Create(m_pClient, m_pDevice, pd3ds)) {
                pd3ds->Release();
                return ERR_LOCUSFAIL;
            }
        }

        *ppSurfaceLevel = pSurface;
    }
    else {
        pSurface = NULL;
    }

    if (m_pClient->CallMethod(MID_TEX8_GetSurfaceLevel, this, &hrS, uLevel, &pSurface)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DTexture8::GetSurfaceLevel result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\typetran.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    typetran.h

Author:

    Matt Bronder

Description:

    Win32 Direct3D8 data types.

*******************************************************************************/

#ifndef __TYPETRAN_H__
#define __TYPETRAN_H__

//******************************************************************************
typedef struct _WINX_D3DSURFACE_DESC {
    D3DFORMAT           Format;
    D3DRESOURCETYPE     Type;
    DWORD               Usage;
    D3DPOOL             Pool;
    UINT                Size;
    D3DMULTISAMPLE_TYPE MultiSampleType;
    UINT                Width;
    UINT                Height;
} WINX_D3DSURFACE_DESC;

//******************************************************************************
typedef struct _WINX_D3DVOLUME_DESC {
    D3DFORMAT           Format;
    D3DRESOURCETYPE     Type;
    DWORD               Usage;
    D3DPOOL             Pool;
    UINT                Size;
    UINT                Width;
    UINT                Height;
    UINT                Depth;
} WINX_D3DVOLUME_DESC;

//******************************************************************************
typedef struct _WINX_D3DVERTEXBUFFER_DESC {
    D3DFORMAT           Format;
    D3DRESOURCETYPE     Type;
    DWORD               Usage;
    D3DPOOL             Pool;
    UINT                Size;
    DWORD               FVF;
} WINX_D3DVERTEXBUFFER_DESC;

//******************************************************************************
typedef struct _WINX_D3DINDEXBUFFER_DESC {
    D3DFORMAT           Format;
    D3DRESOURCETYPE     Type;
    DWORD               Usage;
    D3DPOOL             Pool;
    UINT                Size;
} WINX_D3DINDEXBUFFER_DESC;

#endif // __TYPETRAN_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\surface.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    surface.h

Description:

    IDirect3DSurface classes.

*******************************************************************************/

#ifndef __SURFACE_H__
#define __SURFACE_H__

//******************************************************************************
// CSurface
//******************************************************************************

//******************************************************************************
class CSurface : public CObject {

protected:

public:

                        CSurface();
                        ~CSurface();
};

//******************************************************************************
class CSurface8 : public CSurface {

protected:

    LPDIRECT3DSURFACE8  m_pd3ds;
    CDevice8*           m_pDevice;

public:

                        CSurface8();
                        ~CSurface8();
    virtual BOOL        Create(CDevice8* pDevice, LPDIRECT3DSURFACE8 pd3ds);

    virtual 
    LPDIRECT3DSURFACE8  GetIDirect3DSurface8();

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Information

    virtual HRESULT     GetContainer(REFIID riid, CBaseTexture8** ppContainer);
    virtual HRESULT     GetDevice(CDevice8** ppDevice);
    virtual HRESULT     GetDesc(D3DSURFACE_DESC* pd3dsd);

    // Locking surfaces

    virtual HRESULT     LockRect(D3DLOCKED_RECT* pd3dlr, RECT* prect, DWORD dwFlags);
    virtual HRESULT     UnlockRect();

    // Private surface data

    virtual HRESULT     GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData);
    virtual HRESULT     SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags);
    virtual HRESULT     FreePrivateData(REFGUID refguid);
};

//******************************************************************************
class CCSurface8 : public CSurface8 {

protected:

    CClient*            m_pClient;

    SLOCKDESC           m_slockd;

public:

                        CCSurface8();
                        ~CCSurface8();
    virtual BOOL        Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DSURFACE8 pd3ds);

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Information

    virtual HRESULT     GetContainer(REFIID riid, CBaseTexture8** ppContainer);
    virtual HRESULT     GetDevice(CDevice8** ppDevice);
    virtual HRESULT     GetDesc(D3DSURFACE_DESC* pd3dsd);

    // Locking surfaces

    virtual HRESULT     LockRect(D3DLOCKED_RECT* pd3dlr, RECT* prect, DWORD dwFlags);
    virtual HRESULT     UnlockRect();

    // Private surface data

    virtual HRESULT     GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData);
    virtual HRESULT     SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags);
    virtual HRESULT     FreePrivateData(REFGUID refguid);
};

#endif // __SURFACE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\texture.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    texture.cpp

Author:

    Matt Bronder

Description:

    Direct3D texture routines.

*******************************************************************************/

#include "d3dlocus.h"
#include <limits.h>

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#ifdef UNDER_XBOX
#define DEMO_HACK
#endif // UNDER_XBOX

#ifdef DEMO_HACK
#define D3DFMT_LIN_V8U8 D3DFMT_LIN_G8B8
#endif

#define GET_TTYPE_MIPLEVELS(ttype)  (((ttype) & TTYPE_MIPLEVELMASK) >> 24)

//******************************************************************************
// Local function prototypes
//******************************************************************************

static BOOL             SetTranslucency(CSurface8* pd3ds, 
                            PALETTECOLOR* ppcPalette, float fAlpha, 
                            D3DCOLOR cColorKey);
static BOOL             SetTranslucency(CVolume8* pd3dv, 
                            PALETTECOLOR* ppcPalette, float fAlpha, 
                            D3DCOLOR cColorKey);
static BOOL             CalculateTangentTerms(D3DXVECTOR3* pvTangent, 
                            D3DXVECTOR3* pvBinormal, D3DVECTOR* pvPosition, 
                            DWORD dwStridePosition, PTCOORD2 ptcTCoord, 
                            DWORD dwStrideTCoord, LPWORD pwIndices, 
                            DWORD dwNumPrimitives, D3DPRIMITIVETYPE d3dpt, 
                            BOOL bInterpolate);
static BOOL             VectorToTangentSpace(BOOL bHalfVector, 
                            PTCOORD3 ptcTangent, DWORD dwStrideTangent,
                            D3DVECTOR* pvPosition, DWORD dwStridePosition,
                            PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                            LPWORD pwIndices, DWORD dwNumPrimitives,
                            D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                            D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                            BOOL bInterpolate);
static BOOL             SetLightMapCoords(BOOL bSpecular, 
                            PTCOORD2 ptcLightMap, DWORD dwStrideLMap,
                            D3DVECTOR* pvPosition, DWORD dwStridePosition,
                            PTCOORD2 ptcOffsetMap, DWORD dwStrideOMap,
                            LPWORD pwIndices, DWORD dwNumPrimitives,
                            D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                            D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                            BOOL bInterpolate);

#ifdef UNDER_XBOX
static BOOL             GetBitmapInfoHeader(LPCTSTR szTexture, 
                            BITMAPINFOHEADER* pbmih);
#endif

//******************************************************************************
// Globals
//******************************************************************************

PTEXTUREDESC            g_ptexdList = NULL;

//******************************************************************************
// Image loading functions
//******************************************************************************

//******************************************************************************
HRESULT D3DXCreateTextureFromImage(LPDIRECT3DDEVICE8 pDevice, LPCTSTR szImage,
                                UINT uWidth, UINT uHeight, UINT uLevels,
                                DWORD dwUsage, D3DFORMAT fmt, D3DPOOL pool,
                                DWORD dwFilter, DWORD dwMipFilter, 
                                D3DCOLOR cColorKey, D3DXIMAGE_INFO* pImageInfo,
                                PALETTECOLOR* ppc, LPDIRECT3DTEXTURE8* ppTexture)
{
    LPVOID  pvData;
    DWORD   dwSize;
    HRESULT hr;

    if (LoadResourceData(szImage, &pvData, &dwSize)) {

        hr = D3DXCreateTextureFromFileInMemoryEx(pDevice, pvData, dwSize,
                                uWidth, uHeight, uLevels, dwUsage, fmt,
                                pool, dwFilter, dwMipFilter, cColorKey,
                                pImageInfo, (PALETTEENTRY*)ppc, ppTexture);

        UnloadResourceData(szImage);

        if (SUCCEEDED(hr)) {
#ifdef UNDER_XBOX
            ConvertPALETTEENTRYToD3DCOLOR((LPVOID)ppc, 256);
#endif
            return hr;
        }
    }

#ifndef UNDER_XBOX
    hr = D3DXCreateTextureFromResourceEx(pDevice, GetTestInstance(), szImage,
                                uWidth, uHeight, uLevels, dwUsage, fmt,
                                pool, dwFilter, dwMipFilter, cColorKey,
                                pImageInfo, (PALETTEENTRY*)ppc, ppTexture);
    if (SUCCEEDED(hr)) {
#ifdef UNDER_XBOX
        ConvertPALETTEENTRYToD3DCOLOR((LPVOID)ppc, 256);
#endif
        return hr;
    }
#endif // !UNDER_XBOX

#if defined(UNDER_XBOX) && defined(UNICODE)
    char aszImage[MAX_PATH];
    wcstombs(aszImage, szImage, MAX_PATH);
    hr = D3DXCreateTextureFromFileEx(pDevice, aszImage, uWidth, uHeight, 
                                uLevels, dwUsage, fmt, pool, dwFilter,
                                dwMipFilter, cColorKey, pImageInfo, 
                                (PALETTEENTRY*)ppc, ppTexture);
#else
    hr = D3DXCreateTextureFromFileEx(pDevice, szImage, uWidth, uHeight, 
                                uLevels, dwUsage, fmt, pool, dwFilter,
                                dwMipFilter, cColorKey, pImageInfo, 
                                (PALETTEENTRY*)ppc, ppTexture);
#endif

    if (FAILED(hr)) {
        TCHAR szError[128];
        D3DXGetErrorString(hr, szError, 512);
        DebugString(TEXT("D3DXCreateTextureFromImage failed on %s with %s [0x%X]"), szImage, szError, hr);
    }
#ifdef UNDER_XBOX
    else {
        ConvertPALETTEENTRYToD3DCOLOR((LPVOID)ppc, 256);
    }
#endif

    return hr;
}

//******************************************************************************
HRESULT D3DXLoadSurfaceFromImage(LPDIRECT3DSURFACE8 pDstSurface, 
                                CONST PALETTECOLOR* ppcDstPalette, 
                                CONST RECT* pDstRect, LPCTSTR szImage,
                                CONST RECT* pSrcRect, DWORD dwFilter,
                                D3DCOLOR cColorKey, D3DXIMAGE_INFO* pImageInfo)
{
    LPVOID  pvData;
    DWORD   dwSize;
    HRESULT hr;

    if (LoadResourceData(szImage, &pvData, &dwSize)) {

        hr = D3DXLoadSurfaceFromFileInMemory(pDstSurface, (PALETTEENTRY*)ppcDstPalette, pDstRect,
                                pvData, dwSize, pSrcRect, dwFilter, cColorKey,
                                pImageInfo);

        UnloadResourceData(szImage);

        if (SUCCEEDED(hr)) {
#ifdef UNDER_XBOX
            ConvertPALETTEENTRYToD3DCOLOR((LPVOID)ppcDstPalette, 256);
#endif
            return hr;
        }
    }

#ifndef UNDER_XBOX
    hr = D3DXLoadSurfaceFromResource(pDstSurface, (PALETTEENTRY*)ppcDstPalette, pDstRect,
                                GetTestInstance(), szImage, pSrcRect, dwFilter,
                                cColorKey, pImageInfo);
    if (SUCCEEDED(hr)) {
#ifdef UNDER_XBOX
        ConvertPALETTEENTRYToD3DCOLOR((LPVOID)ppcDstPalette, 256);
#endif
        return hr;
    }
#endif // !UNDER_XBOX

#if defined(UNDER_XBOX) && defined(UNICODE)
    char aszImage[MAX_PATH];
    wcstombs(aszImage, szImage, MAX_PATH);
    hr = D3DXLoadSurfaceFromFile(pDstSurface, (PALETTEENTRY*)ppcDstPalette, pDstRect, aszImage,
                                pSrcRect, dwFilter, cColorKey, pImageInfo);
#else
    hr = D3DXLoadSurfaceFromFile(pDstSurface, (PALETTEENTRY*)ppcDstPalette, pDstRect, szImage,
                                pSrcRect, dwFilter, cColorKey, pImageInfo);
#endif
    if (FAILED(hr)) {
        TCHAR szError[128];
        D3DXGetErrorString(hr, szError, 512);
        DebugString(TEXT("D3DXLoadSurfaceFromImage failed on %s with %s [0x%X]"), szImage, szError, hr);
    }
#ifdef UNDER_XBOX
    else {
        ConvertPALETTEENTRYToD3DCOLOR((LPVOID)ppcDstPalette, 256);
    }
#endif

    return hr;
}

//******************************************************************************
// Texture functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateTexture
//
// Description:
//
//     Create a texture object of the given dimensions, format, and type.
//
// Arguments:
//
//     CDevice8* pDevice                    - Pointer to the device object
//
//     DWORD dwWidth                        - Width of the texture
//
//     DWORD dwHeight                       - Height of the texture
//
//     D3DFORMAT fmt                        - Format of the texture
//
//     TEXTURETYPE tt                       - Type of texture to create (i.e.
//                                            mipmap, cubemap, bumpmap, etc.)
//
//     D3DPOOL pool                         - Location in which to create the
//                                            texture
//
// Return Value:
//
//     A pointer to the created texture object on success, NULL on failure.
//
//******************************************************************************
CBaseTexture8* CreateTexture(CDevice8* pDevice, UINT uWidth, UINT uHeight, 
                                    D3DFORMAT fmt, TEXTURETYPE tt, D3DPOOL pool)
{
    return CreateTexture(pDevice, uWidth, uHeight, 0, fmt, tt, pool);
}

//******************************************************************************
//
// Function:
//
//     CreateTexture
//
// Description:
//
//     Create a texture object of the given dimensions, format, and type.
//
// Arguments:
//
//     CDevice8* pDevice                    - Pointer to the device object
//
//     DWORD dwWidth                        - Width of the texture
//
//     DWORD dwHeight                       - Height of the texture
//
//     DWORD dwDepth                        - Depth of the texture (for a
//                                            volume)
//
//     D3DFORMAT fmt                        - Format of the texture
//
//     TEXTURETYPE tt                       - Type of texture to create (i.e.
//                                            mipmap, cubemap, bumpmap, etc.)
//
//     D3DPOOL pool                         - Location in which to create the
//                                            texture
// Return Value:
//
//     A pointer to the created texture object on success, NULL on failure.
//
//******************************************************************************
CBaseTexture8* CreateTexture(CDevice8* pDevice, UINT uWidth, UINT uHeight, 
                                    UINT uDepth, D3DFORMAT fmt, TEXTURETYPE tt, 
                                    D3DPOOL pool)
{
    CBaseTexture8*      pd3dtb;
    D3DFORMAT           fmtt;
    PTEXTUREDESC        ptexdNode;
    UINT                uLevels;
    DWORD               dwUsage = 0;
    D3DRESOURCETYPE     rt;
    HRESULT             hr;

    // Verify the current device supports the given format
    if (tt & TTYPE_DEPTH) {
        dwUsage |= D3DUSAGE_DEPTHSTENCIL;
        pool = D3DPOOL_DEFAULT;
    }
    else if (tt & TTYPE_TARGET) {
        dwUsage |= D3DUSAGE_RENDERTARGET;
        pool = D3DPOOL_DEFAULT;
    }

    if (tt & TTYPE_VOLUME) {
        rt = D3DRTYPE_VOLUMETEXTURE;
    }
    else if (tt & TTYPE_CUBEMAP) {
        rt = D3DRTYPE_CUBETEXTURE;
    }
    else {
        rt = D3DRTYPE_TEXTURE;
    }

    hr = CheckCurrentDeviceFormat(pDevice, dwUsage, rt, fmt);
    if (FAILED(hr)) {
        if (hr != D3DERR_NOTAVAILABLE) {
            ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceFormats"));
        }
        return NULL;
    }

    // Get the number of levels for the texture
    if (tt & TTYPE_MIPMAP) {
        uLevels = GET_TTYPE_MIPLEVELS(tt);
    }
    else {
        uLevels = 1;
    }

    // Create a texture of the specified type
    if (tt & TTYPE_VOLUME) {

        D3DVOLUME_DESC d3dvd;

        hr = pDevice->CreateVolumeTexture(uWidth, uHeight, uDepth, 
                                    uLevels, dwUsage, fmt, pool, 
                                    (CVolumeTexture8**)&pd3dtb);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVolumeTexture"));
            return NULL;
        }

        hr = ((CVolumeTexture8*)pd3dtb)->GetLevelDesc(0, &d3dvd);
        if (ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::GetLevelDesc"))) {
            pd3dtb->Release();
            return NULL;
        }
        fmtt = d3dvd.Format;
    }
    else if (tt & TTYPE_CUBEMAP) {

        D3DSURFACE_DESC d3dsd;

        hr = pDevice->CreateCubeTexture(uWidth > uHeight ? uWidth : uHeight,
                                    uLevels, dwUsage, fmt, pool, 
                                    (CCubeTexture8**)&pd3dtb);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DDevice8::CreateCubeTexture"));
            return NULL;
        }

        hr = ((CCubeTexture8*)pd3dtb)->GetLevelDesc(0, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DCubeTexture8::GetLevelDesc"))) {
            pd3dtb->Release();
            return NULL;
        }
        fmtt = d3dsd.Format;
    }
    else {

        D3DSURFACE_DESC d3dsd;

        hr = pDevice->CreateTexture(uWidth, uHeight,
                                    uLevels, dwUsage, fmt, pool, 
                                    (CTexture8**)&pd3dtb);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DDevice8::CreateTexture"));
            return NULL;
        }

        hr = ((CTexture8*)pd3dtb)->GetLevelDesc(0, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
            pd3dtb->Release();
            return NULL;
        }
        fmtt = d3dsd.Format;
    }

    // Add the texture to the texture list
    ptexdNode = (PTEXTUREDESC)MemAlloc(sizeof(TEXTUREDESC));
    if (!ptexdNode) {
        pd3dtb->Release();
        return NULL;
    }
    memset(ptexdNode, 0, sizeof(TEXTUREDESC));
    ptexdNode->pd3dtb = pd3dtb;
    ptexdNode->uWidth = uWidth;
    ptexdNode->uHeight = uHeight;
    ptexdNode->uDepth = uDepth;
    ptexdNode->fmt = fmtt;
    ptexdNode->pool = pool;
    ptexdNode->tt = tt;
    ptexdNode->ptexdNext = g_ptexdList;
    g_ptexdList = ptexdNode;

    return pd3dtb;
}

//******************************************************************************
//
// Function:
//
//     CreateTexture
//
// Description:
//
//     Create a texture object and populate it using the image contained in
//     the given resource or file name.
//
// Arguments:
//
//     CDevice8* pDevice                    - Pointer to the device object
//
//     LPCTSTR szName                       - File or resource name of the 
//                                            bitmap from which to create the 
//                                            texture
//
//     D3DFORMAT fmt                        - Format of the texture
//
//     TEXTURETYPE tt                       - Type of texture to create (i.e.
//                                            mipmap, cubemap, bumpmap, etc.)
//
//     PALETTECOLOR* ppcPalette             - Pointer to the first entry of
//                                            a palette to be initialized (if
//                                            palettized)
//
//     float fAlpha                         - Optional transparency value for
//                                            the texture
//
//     D3DCOLOR cColorKey                   - Optional color key for the
//                                            texture
//
//     D3DPOOL pool                         - Location in which to create the
//                                            texture
//
//     UINT uWidth                          - Optional width of the texture
//                                            (if not given the texture will
//                                            take on the size of the bitmap
//                                            used to populate it)
//
//     UINT uHeight                         - Optional height of the texture
//
// Return Value:
//
//     A pointer to the created texture object on success, NULL on failure.
//
//******************************************************************************
CBaseTexture8* CreateTexture(CDevice8* pDevice, LPCTSTR szName, 
                                 D3DFORMAT fmt, TEXTURETYPE tt,
                                 PALETTECOLOR* ppcPalette, float fAlpha,
                                 D3DCOLOR cColorKey, D3DPOOL pool,
                                 UINT uWidth, UINT uHeight)
{
    CBaseTexture8*          pd3dtb = NULL;
    D3DRESOURCETYPE         rt;
    D3DFORMAT               fmtt;
    UINT                    uLevels;
    DWORD                   dwUsage = 0;
    PTEXTUREDESC            ptexdNode;
    LPTSTR                  szImage;
    TCHAR                   szResource[32] = {TEXT("resource ")};
    WORD                    wResourceID;
    HRESULT                 hr;

    if (!szName) {
        // Fail if a NULL name pointer or a resource identifer of zero is given
        return NULL;
    }

    // Verify the current device supports the given format
    if (tt & TTYPE_DEPTH) {
        dwUsage |= D3DUSAGE_DEPTHSTENCIL;
        pool = D3DPOOL_DEFAULT;
    }
    else if (tt & TTYPE_TARGET) {
        dwUsage |= D3DUSAGE_RENDERTARGET;
        pool = D3DPOOL_DEFAULT;
    }

    if (tt & TTYPE_VOLUME) {
        rt = D3DRTYPE_VOLUMETEXTURE;
    }
    else if (tt & TTYPE_CUBEMAP) {
        rt = D3DRTYPE_CUBETEXTURE;
    }
    else {
        rt = D3DRTYPE_TEXTURE;
    }

    hr = CheckCurrentDeviceFormat(pDevice, dwUsage, rt, fmt);
    if (FAILED(hr)) {
        if (hr != D3DERR_NOTAVAILABLE) {
            ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceFormats"));
        }
        return NULL;
    }

    // If the high order word of the name is zero, the name is a resource
    // identifier rather than a pointer to the name string
    if (!(BOOL)((DWORD)szName >> 16)) {
        wResourceID = (WORD)szName;
        wsprintf(szResource + 9, TEXT("%d"), wResourceID);
        szImage = szResource;
    }
    else {
        wResourceID = 0;
        szImage = (LPTSTR)szName;
    }

    // Get the number of levels for the texture
    if (tt & TTYPE_MIPMAP) {
        uLevels = GET_TTYPE_MIPLEVELS(tt);
    }
    else {
        uLevels = 1;
    }

    if (tt & TTYPE_VOLUME) {

        return NULL;
    }

    else if (tt & TTYPE_CUBEMAP) {

        CCubeTexture8*          pd3dtc;
        CSurface8*              pSurface;
        D3DSURFACE_DESC         d3dsd;
        TCHAR                   szFace[6][MAX_PATH];
        TCHAR                   szTemp[MAX_PATH];
        TCHAR*                  sz;
        UINT                    i;

        if (uWidth == D3DX_DEFAULT || uHeight == D3DX_DEFAULT) {

            LPDIRECT3DTEXTURE8 pd3dtTemp;

            hr = D3DXCreateTextureFromImage(pDevice->GetIDirect3DDevice8(),
                                szName, D3DX_DEFAULT, D3DX_DEFAULT, 1, dwUsage,
                                fmt, pool, D3DX_FILTER_POINT, D3DX_FILTER_POINT,
                                0, NULL, ppcPalette, &pd3dtTemp);
            if (FAILED(hr)) {
                return NULL;
            }

            hr = pd3dtTemp->GetLevelDesc(0, &d3dsd);
            pd3dtTemp->Release();
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
                return NULL;
            }

            if (uWidth == D3DX_DEFAULT) {
                uWidth = d3dsd.Width;
            }

            if (uHeight == D3DX_DEFAULT) {
                uHeight = d3dsd.Height;
            }
        }

        // Create the cubemap
        hr = pDevice->CreateCubeTexture(uWidth > uHeight ? uWidth : uHeight,
                            uLevels, dwUsage, fmt, pool, &pd3dtc);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DDevice8::CreateCubeTexture"));
            return NULL;
        }

        hr = pd3dtc->GetLevelDesc(0, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DCubeTexture8::GetLevelDesc"))) {
            pd3dtc->Release();
            return NULL;
        }
        fmtt = d3dsd.Format;

        // Initialize the image names for the faces.  If the image name ends with the
        // number 0, assume that six separate image files/resources exist, one for each
        // face of the cube map.  They will all have the same base image name, being
        // differentiated only by the ending character of the name, with that character
        // being a number 0-5.  The images will be loaded into their corresponding faces
        // according to the enumeration order of the faces in the D3DCUBEMAP_FACES type.
        // If the given image name does not end with a 0, load the given image into
        // each of the faces of the cube map, resulting in identical images for each
        // face.
        _tcscpy(szTemp, szName);
        sz = szTemp + _tcslen(szTemp);
        if (*(sz-1) == TEXT('0')) {
            sz--;
        }
        else if (*(sz-5) == TEXT('0')) {
            sz -= 5;
        }
        if (*sz) {
            for (i = 0; i < 6; i++) {
                *sz = TEXT('0') + i;
                _tcscpy(szFace[i], szTemp);
            }
        }
        else {
            for (i = 0; i < 6; i++) {
                _tcscpy(szFace[i], szName);
            }
        }

        // Copy the image into the faces
        for (i = 0; i < 6; i++) {

            hr = pd3dtc->GetCubeMapSurface((D3DCUBEMAP_FACES)i, 0, &pSurface);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeMap8::GetCubeMapSurface"));
                pd3dtc->Release();
                return NULL;
            }

            hr = D3DXLoadSurfaceFromImage(pSurface->GetIDirect3DSurface8(), ppcPalette, NULL,
                            szFace[i], NULL, D3DX_FILTER_LINEAR, 0, NULL);
            if (FAILED(hr)) {
                pSurface->Release();
                pd3dtc->Release();
                return NULL;
            }

            pSurface->Release();
        }

        pd3dtb = pd3dtc;
    }

    else if (tt & TTYPE_BUMPMAP || tt & TTYPE_NORMALMAP) {

        // The given image is a height map.  Use it to generate the bump map
        CTexture8*          pd3dtHeight;
        D3DSURFACE_DESC     d3dsd;

        // Load the height map
        pd3dtHeight = (CTexture8*)CreateTexture(pDevice, szName, D3DFMT_A8R8G8B8, 
                                            TTYPE_TEXTURE, NULL, 1.0f, 
                                            COLORKEY_NONE, pool, uWidth, uHeight);
        if (!pd3dtHeight) {
            return NULL;
        }

        hr = pd3dtHeight->GetLevelDesc(0, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
            ReleaseTexture(pd3dtHeight);
            return NULL;
        }

        if (uWidth == D3DX_DEFAULT) {
            uWidth = d3dsd.Width;
        }

        if (uHeight == D3DX_DEFAULT) {
            uHeight = d3dsd.Height;
        }

        // Create the bump map
        pd3dtb = (CTexture8*)CreateTexture(pDevice, d3dsd.Width, d3dsd.Height, fmt, tt, pool);
        if (!pd3dtb) {
            ReleaseTexture(pd3dtHeight);
            return NULL;
        }
        
        hr = CopyTexture(pd3dtb, ppcPalette, pd3dtHeight, NULL, D3DX_FILTER_LINEAR);

        ReleaseTexture(pd3dtHeight);

        if (FAILED(hr)) {
            ReleaseTexture(pd3dtb);
            return NULL;
        }

        hr = ((CTexture8*)pd3dtb)->GetLevelDesc(0, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
            ReleaseTexture(pd3dtb);
            return NULL;
        }
        fmtt = d3dsd.Format;

        return pd3dtb;
    }

    else {

        LPDIRECT3DTEXTURE8  pd3dt;
        LPDIRECT3DSURFACE8  pd3ds;
        CSurface8*          pSurface;
        D3DSURFACE_DESC     d3dsd;

        // Attempt to load the image as a resource.  Use a point mip filter flag
        // since the mipmap will get re-filtered using a linear filter during
        // the SetTranslucency stage.
        hr = D3DXCreateTextureFromImage(pDevice->GetIDirect3DDevice8(),
                                szName, uWidth, uHeight, 1, dwUsage, fmt,
                                pool, D3DX_FILTER_LINEAR, D3DX_FILTER_POINT,
                                0, NULL, ppcPalette, &pd3dt);
        if (FAILED(hr)) {
            return NULL;
        }

        hr = pd3dt->GetLevelDesc(0, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
            pd3dt->Release();
            return NULL;
        }

        if (uWidth == D3DX_DEFAULT) {
            uWidth = d3dsd.Width;
        }

        if (uHeight == D3DX_DEFAULT) {
            uHeight = d3dsd.Height;
        }

        hr = pDevice->CreateTexture(d3dsd.Width, d3dsd.Height, uLevels, 0, fmt, pool, (CTexture8**)&pd3dtb);
        if (FAILED(hr)) {
            pd3dt->Release();
            return NULL;
        }

        hr = pd3dt->GetSurfaceLevel(0, &pd3ds);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
            pd3dt->Release();
            pd3dtb->Release();
            return NULL;
        }

        hr = ((CTexture8*)pd3dtb)->GetSurfaceLevel(0, &pSurface);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
            pd3ds->Release();
            pd3dt->Release();
            pd3dtb->Release();
            return NULL;
        }

        hr = D3DXLoadSurfaceFromSurface(pSurface->GetIDirect3DSurface8(), NULL, NULL, pd3ds, NULL, NULL, D3DX_FILTER_POINT, 0);

        pSurface->Release();
        pd3ds->Release();
        pd3dt->Release();

        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"));
            pd3dtb->Release();
            return NULL;
        }

        fmtt = d3dsd.Format;
    }

    // Add the texture to the texture list
    ptexdNode = (PTEXTUREDESC)MemAlloc(sizeof(TEXTUREDESC));
    if (!ptexdNode) {
        pd3dtb->Release();
        return NULL;
    }
    memset(ptexdNode, 0, sizeof(TEXTUREDESC));
    ptexdNode->pd3dtb = pd3dtb;
    if (wResourceID) {
        _tcscpy(ptexdNode->szName, szResource);
        ptexdNode->wResourceID = wResourceID;
    }
    else {
        _tcscpy(ptexdNode->szName, szName);
        ptexdNode->wResourceID = 0;
    }
    ptexdNode->uWidth = uWidth;
    ptexdNode->uHeight = uHeight;
    ptexdNode->uDepth = 0;
    ptexdNode->fmt = fmtt;
    ptexdNode->pool = pool;
    ptexdNode->tt = tt;
    ptexdNode->fAlpha = fAlpha;
    ptexdNode->cColorKey = cColorKey;
    ptexdNode->ptexdNext = g_ptexdList;
    g_ptexdList = ptexdNode;

    // Set the translucency.  This will also perform a filter of the highest
    // resolution level(s) to all lower resolution levels (if present)
    // and sync the server images of all levels
    if (!SetTranslucency(pd3dtb, ppcPalette, fAlpha, cColorKey)) {
        if (fAlpha == 1.0f && cColorKey == COLORKEY_NONE) {
            if (tt & TTYPE_MIPMAP) {
                FilterTexture(pd3dtb, ppcPalette);
            }
            SyncTexture(pd3dtb);
        }
        else {
            DebugString(TEXT("Warning: Failed to set translucency information on texture %s"), szImage);
        }
    }

    return pd3dtb;
}

//******************************************************************************
//
// Function:
//
//     ReleaseTexture
//
// Description:
//
//     Release the given texture object and remove it from the texture table.
//
// Arguments:
//
//     CBaseTexture8* pd3dtb               - Pointer to the texture object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseTexture(CBaseTexture8* pd3dtb) {

    PTEXTUREDESC ptexd, ptexdDel;
#if defined(DEBUG) || defined(_DEBUG)
    TCHAR        szName[MAX_PATH];
    UINT         uRef;
#endif

    if (!pd3dtb) {
        return;
    }

pd3dtb->AddRef();
pd3dtb->Release();
VerifyTextureListIntegrity();

    if (g_ptexdList) {

        if (g_ptexdList->pd3dtb == pd3dtb) {
            ptexd = g_ptexdList->ptexdNext;
#if defined(DEBUG) || defined(_DEBUG)
            _tcscpy(szName, g_ptexdList->szName);
#endif
            MemFree(g_ptexdList);
            g_ptexdList = ptexd;
        }

        else {

            for (ptexd = g_ptexdList; 
                 ptexd->ptexdNext && ptexd->ptexdNext->pd3dtb != pd3dtb; 
                 ptexd = ptexd->ptexdNext
            );

            if (ptexd->ptexdNext) {
                ptexdDel = ptexd->ptexdNext;
                ptexd->ptexdNext = ptexdDel->ptexdNext;
#if defined(DEBUG) || defined(_DEBUG)
                _tcscpy(szName, ptexdDel->szName);
#endif
                MemFree(ptexdDel);
            }
        }
    }

VerifyTextureListIntegrity();
pd3dtb->AddRef();
pd3dtb->Release();

#if defined(DEBUG) || defined(_DEBUG)
    uRef = pd3dtb->Release();
    if (uRef != 0) {
        DebugString(TEXT("WARNING: Texture %s has a ref count of %d on release"), szName, uRef);
    }
#else
    pd3dtb->Release();
#endif
}

//******************************************************************************
//
// Function:
//
//     ReleaseTextures
//
// Description:
//
//     Release all textures in the texture table.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseTextures() {

VerifyTextureListIntegrity();
    while (g_ptexdList) {
VerifyTextureListIntegrity();
        ReleaseTexture(g_ptexdList->pd3dtb);
    }
}

//******************************************************************************
//
// Function:
//
//     RemoveTexture
//
// Description:
//
//     Remove the given texture from the texture table (if present)
//
// Arguments:
//
//     CBaseTexture8* pd3dtb         - Pointer to the texture object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void RemoveTexture(CBaseTexture8* pd3dtb) {

    PTEXTUREDESC ptexd, ptexdDel;

    if (!pd3dtb) {
        return;
    }

    if (g_ptexdList) {

        if (g_ptexdList->pd3dtb == pd3dtb) {
            ptexd = g_ptexdList->ptexdNext;
            MemFree(g_ptexdList);
            g_ptexdList = ptexd;
        }

        else {

            for (ptexd = g_ptexdList; 
                 ptexd->ptexdNext && ptexd->ptexdNext->pd3dtb != pd3dtb; 
                 ptexd = ptexd->ptexdNext
            );

            if (ptexd->ptexdNext) {
                ptexdDel = ptexd->ptexdNext;
                ptexd->ptexdNext = ptexdDel->ptexdNext;
                MemFree(ptexdDel);
            }
        }
    }
}

//******************************************************************************
//
// Function:
//
//     SyncTexture
//
// Description:
//
//     Synchronize the server image of the given texture.
//
// Arguments:
//
//     CBaseTexture8* pd3dtb              - Pointer to the texture object
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SyncTexture(CBaseTexture8* pd3dtb) {

    PTEXTUREDESC ptexd;
    UINT         i;
    HRESULT      hr;

    ptexd = GetTextureDesc(pd3dtb);
    if (!ptexd) {
        return FALSE;
    }

    if (ptexd->tt & TTYPE_VOLUME) {

        CVolumeTexture8* pd3dtv = (CVolumeTexture8*)pd3dtb;
        D3DLOCKED_BOX  d3dlb;

        for (i = 0; i < pd3dtv->GetLevelCount(); i++) {
            hr = pd3dtv->LockBox(i, &d3dlb, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::LockBox"));
                return FALSE;
            }
            hr = pd3dtv->UnlockBox(i);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::UnlockBox"));
                return FALSE;
            }
        }
    }
    else if (ptexd->tt & TTYPE_CUBEMAP) {

        CCubeTexture8*  pd3dtc = (CCubeTexture8*)pd3dtb;
        D3DLOCKED_RECT  d3dlr;
        UINT            j, uCount;

        uCount = pd3dtc->GetLevelCount();

        for (j = 0; j < 6; j++) {

            for (i = 0; i < uCount; i++) {
                hr = pd3dtc->LockRect((D3DCUBEMAP_FACES)j, i, &d3dlr, NULL, 0);
                if (FAILED(hr)) {
                    ResultFailed(hr, TEXT("IDirect3DCubeTexture8::LockRect"));
                    return FALSE;
                }
                hr = pd3dtc->UnlockRect((D3DCUBEMAP_FACES)j, i);
                if (FAILED(hr)) {
                    ResultFailed(hr, TEXT("IDirect3DCubeTexture8::UnlockRect"));
                    return FALSE;
                }
            }

        }
    }
    else {

        CTexture8*      pd3dt = (CTexture8*)pd3dtb;
        D3DLOCKED_RECT  d3dlr;

        for (i = 0; i < pd3dt->GetLevelCount(); i++) {
            hr = pd3dt->LockRect(i, &d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"));
                return FALSE;
            }
            hr = pd3dt->UnlockRect(i);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DTexture8::UnlockRect"));
                return FALSE;
            }
        }
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SyncSurface
//
// Description:
//
//     Synchronize the server image of the given surface.
//
// Arguments:
//
//     CSurface8* pd3ds              - Pointer to the surface object
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SyncSurface(CSurface8* pd3ds) {

    D3DLOCKED_RECT  d3dlr;
    HRESULT         hr;

    hr = pd3ds->LockRect(&d3dlr, NULL, 0);
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"))) {
        return FALSE;
    }

    hr = pd3ds->UnlockRect();
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::UnlockRect"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SyncVolume
//
// Description:
//
//     Synchronize the server image of the given volume.
//
// Arguments:
//
//     CVolume8* pd3dv               - Pointer to the volume object
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SyncVolume(CVolume8* pd3dv) {

    D3DLOCKED_BOX   d3dlb;
    HRESULT         hr;

    hr = pd3dv->LockBox(&d3dlb, NULL, 0);
    if (ResultFailed(hr, TEXT("IDirect3DVolume8::LockBox"))) {
        return FALSE;
    }

    hr = pd3dv->UnlockBox();
    if (ResultFailed(hr, TEXT("IDirect3DVolume8::UnlockBox"))) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     GetARGBPixelDesc
//
// Description:
//
//     Obtain the memory layout of the given ARGB pixel format.
//
// Arguments:
//
//     D3DFORMAT fmt                        - Format of the pixel
//
//     PARGBPIXELDESC ppixd                 - Pointer to a structure to be
//                                            filled with information about
//                                            the pixel
//
// Return Value:
//
//     None.
//
//******************************************************************************
void GetARGBPixelDesc(D3DFORMAT fmt, PARGBPIXELDESC ppixd) {

    if (!ppixd) {
        return;
    }

    memset(ppixd, 0, sizeof(ARGBPIXELDESC));

    switch (fmt) {

        case D3DFMT_P8:
        case D3DFMT_A8R8G8B8:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A8R8G8B8:
#endif // UNDER_XBOX
            ppixd->dwAMask     = 0xFF000000;
            ppixd->dwAShift    = 24;

        case D3DFMT_X8R8G8B8:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_X8R8G8B8:
#endif // UNDER_XBOX
            ppixd->dwRMask     = 0x00FF0000;
            ppixd->dwGMask     = 0x0000FF00;
            ppixd->dwBMask     = 0x000000FF;
            ppixd->dwRShift    = 16;
            ppixd->dwGShift    = 8;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 4;
            break;

        case D3DFMT_R8G8B8:
            ppixd->dwRMask     = 0xFF0000;
            ppixd->dwGMask     = 0x00FF00;
            ppixd->dwBMask     = 0x0000FF;
            ppixd->dwRShift    = 16;
            ppixd->dwGShift    = 8;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 3;
            break;

        case D3DFMT_A1R5G5B5:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A1R5G5B5:
#endif // UNDER_XBOX
            ppixd->dwAMask     = 0x8000;
            ppixd->dwAShift    = 15;

        case D3DFMT_X1R5G5B5:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_X1R5G5B5:
#endif // UNDER_XBOX
            ppixd->dwRMask     = 0x7C00;
            ppixd->dwGMask     = 0x03E0;
            ppixd->dwBMask     = 0x001F;
            ppixd->dwRShift    = 10;
            ppixd->dwGShift    = 5;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_R5G6B5:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_R5G6B5:
#endif // UNDER_XBOX
            ppixd->dwRMask     = 0xF800;
            ppixd->dwGMask     = 0x07E0;
            ppixd->dwBMask     = 0x001F;
            ppixd->dwRShift    = 11;
            ppixd->dwGShift    = 5;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_A4R4G4B4:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A4R4G4B4:
#endif // UNDER_XBOX
            ppixd->dwAMask     = 0xF000;
            ppixd->dwAShift    = 12;

        case D3DFMT_X4R4G4B4:
            ppixd->dwRMask     = 0x0F00;
            ppixd->dwGMask     = 0x00F0;
            ppixd->dwBMask     = 0x000F;
            ppixd->dwRShift    = 8;
            ppixd->dwGShift    = 4;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_A8:
#ifdef UNDER_XBOX
        case D3DFMT_LIN_A8:
#endif //UNDER_XBOX
            ppixd->dwAMask     = 0xFF;
            ppixd->dwAShift    = 0;
            ppixd->dwRMask     = 0;
            ppixd->dwGMask     = 0;
            ppixd->dwBMask     = 0;
            ppixd->dwRShift    = 0;
            ppixd->dwGShift    = 0;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 1;
            break;

#ifdef UNDER_XBOX

        case D3DFMT_A8B8G8R8:
        case D3DFMT_LIN_A8B8G8R8:
            ppixd->dwAMask     = 0xFF000000;
            ppixd->dwAShift    = 24;
            ppixd->dwRMask     = 0x000000FF;
            ppixd->dwGMask     = 0x0000FF00;
            ppixd->dwBMask     = 0x00FF0000;
            ppixd->dwRShift    = 0;
            ppixd->dwGShift    = 8;
            ppixd->dwBShift    = 16;
            ppixd->uStride     = 4;
            break;

        case D3DFMT_B8G8R8A8:
        case D3DFMT_LIN_B8G8R8A8:
            ppixd->dwAMask     = 0x000000FF;
            ppixd->dwAShift    = 0;
            ppixd->dwRMask     = 0x0000FF00;
            ppixd->dwGMask     = 0x00FF0000;
            ppixd->dwBMask     = 0xFF000000;
            ppixd->dwRShift    = 8;
            ppixd->dwGShift    = 16;
            ppixd->dwBShift    = 24;
            ppixd->uStride     = 4;
            break;

        case D3DFMT_R8G8B8A8:
        case D3DFMT_LIN_R8G8B8A8:
            ppixd->dwAMask     = 0x000000FF;
            ppixd->dwAShift    = 0;
            ppixd->dwRMask     = 0xFF000000;
            ppixd->dwGMask     = 0x00FF0000;
            ppixd->dwBMask     = 0x0000FF00;
            ppixd->dwRShift    = 24;
            ppixd->dwGShift    = 16;
            ppixd->dwBShift    = 8;
            ppixd->uStride     = 4;
            break;

        case D3DFMT_R8B8:
        case D3DFMT_LIN_R8B8:
            ppixd->dwAMask     = 0;
            ppixd->dwRMask     = 0xFF00;
            ppixd->dwGMask     = 0;
            ppixd->dwBMask     = 0x00FF;
            ppixd->dwAShift    = 0;
            ppixd->dwRShift    = 8;
            ppixd->dwGShift    = 0;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_G8B8:
        case D3DFMT_LIN_G8B8:
            ppixd->dwAMask     = 0;
            ppixd->dwRMask     = 0;
            ppixd->dwGMask     = 0xFF00;
            ppixd->dwBMask     = 0x00FF;
            ppixd->dwAShift    = 0;
            ppixd->dwRShift    = 0;
            ppixd->dwGShift    = 8;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_R4G4B4A4:
        case D3DFMT_LIN_R4G4B4A4:
            ppixd->dwAMask     = 0x000F;
            ppixd->dwAShift    = 0;
            ppixd->dwRMask     = 0xF000;
            ppixd->dwGMask     = 0x0F00;
            ppixd->dwBMask     = 0x00F0;
            ppixd->dwRShift    = 12;
            ppixd->dwGShift    = 8;
            ppixd->dwBShift    = 4;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_R5G5B5A1:
        case D3DFMT_LIN_R5G5B5A1:
            ppixd->dwAMask     = 0x0001;
            ppixd->dwRMask     = 0xF800;
            ppixd->dwGMask     = 0x07C0;
            ppixd->dwBMask     = 0x002E;
            ppixd->dwAShift    = 0;
            ppixd->dwRShift    = 11;
            ppixd->dwGShift    = 6;
            ppixd->dwBShift    = 1;
            ppixd->uStride     = 2;
            break;

        case D3DFMT_L6V5U5:
        case D3DFMT_LIN_R6G5B5:
            ppixd->dwAMask     = 0;
            ppixd->dwRMask     = 0xFC00;
            ppixd->dwGMask     = 0x03E0;
            ppixd->dwBMask     = 0x001F;
            ppixd->dwAShift    = 0;
            ppixd->dwRShift    = 11;
            ppixd->dwGShift    = 5;
            ppixd->dwBShift    = 0;
            ppixd->uStride     = 2;
            break;

#endif //UNDER_XBOX
    }
}

//******************************************************************************
//
// Function:
//
//     GetTextureDesc
//
// Description:
//
//     Locate the given texture in the texture list and return a pointer to
//     its entry.
//
// Arguments:
//
//     CBaseTexture8* pd3dtb         - Pointer to the texture object
//
// Return Value:
//
//     A pointer to the corresponding entry in the texture table.
//
//******************************************************************************
static PTEXTUREDESC GetTextureDesc(CBaseTexture8* pd3dtb) {

    PTEXTUREDESC ptexd;

    for (ptexd = g_ptexdList; 
         ptexd && ptexd->pd3dtb != pd3dtb; 
         ptexd = ptexd->ptexdNext
    );

    return ptexd;
}

//******************************************************************************
//
// Function:
//
//     FilterTexture
//
// Description:
//
//     Filter the given level of the given mipmap to all lower levels using
//     the given filter.
//
// Arguments:
//
//     CBaseTexture8* pd3dt          - Pointer to the texture object
//
//     PALETTECOLOR* ppcPalette      - Pointer to the first entry of
//                                     a palette to be initialized (if
//                                     palettized)
//
//     UINT uSrcLevel                - Level of resolution to filter
//
//     DWORD dwFilter                - Filter to use
//
// Return Value:
//
//     A pointer to the corresponding entry in the texture table.
//
//******************************************************************************
BOOL FilterTexture(CBaseTexture8* pd3dt, PALETTECOLOR* ppcPalette, UINT uSrcLevel, 
                                                                DWORD dwFilter)
{
    PTEXTUREDESC ptexd;
    PALETTEENTRY *ppe = (PALETTEENTRY*)ppcPalette;
    HRESULT      hr;
#ifdef UNDER_XBOX
    PALETTEENTRY ppeEntries[256];
#endif // UNDER_XBOX

    ptexd = GetTextureDesc(pd3dt);
    if (!ptexd) {
        return FALSE;
    }

    if (!(ptexd->tt & TTYPE_MIPMAP)) {
        return TRUE;
    }

#ifdef UNDER_XBOX
    if (ppcPalette) {
        memcpy(ppeEntries, ppcPalette, 256 * sizeof(PALETTEENTRY));
        ConvertD3DCOLORToPALETTEENTRY(ppeEntries, 256);
        ppe = ppeEntries;
    }
#endif // UNDER_XBOX

    if (ptexd->tt & TTYPE_VOLUME) {
        hr = D3DXFilterVolumeTexture(((CVolumeTexture8*)pd3dt)->GetIDirect3DVolumeTexture8(), 
                                ppe, uSrcLevel, dwFilter);
    }
    else if (ptexd->tt & TTYPE_CUBEMAP) {
        hr = D3DXFilterCubeTexture(((CCubeTexture8*)pd3dt)->GetIDirect3DCubeTexture8(), 
                                ppe, uSrcLevel, dwFilter);
    }
    else {
        hr = D3DXFilterTexture(((CTexture8*)pd3dt)->GetIDirect3DTexture8(), 
                                ppe, uSrcLevel, dwFilter);
    }

    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("D3DXFilterXTexture"));
        return FALSE;
    }

    return SyncTexture(pd3dt);
}

//******************************************************************************
//
// Function:
//
//     SetTranslucency
//
// Description:
//
//     Set the alpha channel of the given surface object to reflect the given
//     alpha and color key values.
//
// Arguments:
//
//     CSurface8* pSurface                  - Pointer to the surface object
//
//     PALETTECOLOR* ppcPalette             - Pointer to the first entry of
//                                            the palette for a palettized
//                                            surface
//
//     float fAlpha                         - Translucency value ranging from
//                                            0.0 to 1.0, where 0.0 is 
//                                            transparent and 1.0 is opaque
//
//     D3DCOLOR cColorKey                   - Color value of the pixels to
//                                            make transparent
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
static BOOL SetTranslucency(CSurface8* pSurface, PALETTECOLOR* ppcPalette, 
                            float fAlpha, D3DCOLOR cColorKey) 
{
    D3DSURFACE_DESC     d3dsd;
    D3DLOCKED_RECT      d3dlr;
    ARGBPIXELDESC       pixd;
    DWORD               dwPitch;
    DWORD               dwColorKey;
    UINT                i, j;
    HRESULT             hr;

    // Get the format of the surface
    hr = pSurface->GetDesc(&d3dsd);
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDesc"))) {
        return FALSE;
    }

    if (!(cColorKey == COLORKEY_NONE || cColorKey == COLORKEY_PIXEL1)) {
        // Get the surface-specific colorkey value (the representation of
        // the pixel in surface memory) from the red, green, and blue
        // components of the given D3DCOLOR
        dwColorKey = ColorToPixel(d3dsd.Format, ppcPalette, cColorKey & 0xFFFFFF);
    }

    // Lock the texture
    hr = pSurface->LockRect(&d3dlr, NULL, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"));
        return FALSE;
    }

    // If the surface is palettized, set the translucency in the palette entries
    if (d3dsd.Format == D3DFMT_P8) {

        CDevice8* pDevice;
        D3DCAPS8  d3dcaps;
        UINT      i;

        hr = pSurface->GetDevice(&pDevice);
        if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDevice"))) {
            return FALSE;
        }

        hr = pDevice->GetDeviceCaps(&d3dcaps);
        pDevice->Release();
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
            return FALSE;
        }

        if (!ppcPalette || !(d3dcaps.TextureCaps & D3DPTEXTURECAPS_ALPHAPALETTE)) {
            return FALSE;
        }

        for (i = 0; i < 256; i++) {
#ifndef UNDER_XBOX
            ppcPalette[i].peFlags = (BYTE)(fAlpha * 255.0f);
#else
            ppcPalette[i] = (ppcPalette[i] & 0x00FFFFFF) | ((BYTE)(fAlpha * 255.0f) << 24);
#endif // UNDER_XBOX
        }

        if (cColorKey == COLORKEY_PIXEL1) {
            dwColorKey = *(LPBYTE)d3dlr.pBits;
        }
        if (cColorKey != COLORKEY_NONE) {
#ifndef UNDER_XBOX
            ppcPalette[dwColorKey].peFlags = 0;
#else
            ppcPalette[dwColorKey] &= 0x00FFFFFF;
#endif // UNDER_XBOX
        }
    }

    else {

        // Get the pixel format of the surface
        GetARGBPixelDesc(d3dsd.Format, &pixd);

        if (cColorKey == COLORKEY_NONE) {
            dwColorKey = COLORKEY_NONE;
        }

        // Set the translucency
        switch (d3dsd.Format) {

#ifdef UNDER_XBOX
            case D3DFMT_LIN_A8R8G8B8:
#endif // UNDER_XBOX
            case D3DFMT_A8R8G8B8:

                LPDWORD pdwPixel;
                DWORD   dwAlpha;

                dwAlpha = (DWORD)((float)pixd.dwAMask * fAlpha) & pixd.dwAMask;
                pdwPixel = (LPDWORD)d3dlr.pBits;

                // Assume an aligned pitch value (i.e. the quotient of the following
                // division will not have a remainder)
                dwPitch = d3dlr.Pitch / pixd.uStride;

                if (cColorKey == COLORKEY_PIXEL1) {
                    dwColorKey = *pdwPixel;
                }

                for (i = 0; i < d3dsd.Height; i++) {

                    for (j = 0; j < d3dsd.Width; j++) {

                        if ((*(pdwPixel + j) & ~pixd.dwAMask) == dwColorKey) {
                            *(pdwPixel + j) &= ~pixd.dwAMask;
                        }
                        else {
                            *(pdwPixel + j) = dwAlpha | (~pixd.dwAMask & *(pdwPixel + j));
                        }
                    }

                    pdwPixel += dwPitch;
                }

                break;

#ifdef UNDER_XBOX
            case D3DFMT_LIN_A1R5G5B5:
            case D3DFMT_LIN_A4R4G4B4:
#endif // UNDER_XBOX
            case D3DFMT_A1R5G5B5:
            case D3DFMT_A4R4G4B4: {

                LPWORD pwPixel;
                WORD   wAlpha;

                wAlpha = (WORD)((UINT)((float)pixd.dwAMask * fAlpha) & pixd.dwAMask);
                pwPixel = (LPWORD)d3dlr.pBits;

                // Assume an aligned pitch value (i.e. the quotient of the following
                // division will not have a remainder)
                dwPitch = d3dlr.Pitch / pixd.uStride;

                if (cColorKey == COLORKEY_PIXEL1) {
                    dwColorKey = *pwPixel;
                }

                for (i = 0; i < d3dsd.Height; i++) {

                    for (j = 0; j < d3dsd.Width; j++) {

                        if ((*(pwPixel + j) & ~pixd.dwAMask) == dwColorKey) {
                            *(pwPixel + j) &= ~pixd.dwAMask;
                        }
                        else {
                            *(pwPixel + j) = wAlpha | (~(WORD)pixd.dwAMask & *(pwPixel + j));
                        }
                    }

                    pwPixel += dwPitch;
                }

                break;
            }
        }
    }

    // Unlock the surface
    hr = pSurface->UnlockRect();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DSurface8::UnlockRect"));
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SetTranslucency
//
// Description:
//
//     Set the alpha channel of the given volume object to reflect the given
//     alpha and color key values.
//
// Arguments:
//
//     CVolume8* pVolume                    - Pointer to the volume object
//
//     PALETTECOLOR* ppcPalette             - Pointer to the first entry of
//                                            the palette for a palettized
//                                            surface
//
//     float fAlpha                         - Translucency value ranging from
//                                            0.0 to 1.0, where 0.0 is 
//                                            transparent and 1.0 is opaque
//
//     D3DCOLOR cColorKey                   - Color value of the pixels to
//                                            make transparent
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
static BOOL SetTranslucency(CVolume8* pVolume, PALETTECOLOR* ppcPalette, 
                            float fAlpha, D3DCOLOR cColorKey) 
{
    D3DVOLUME_DESC      d3dvd;
    D3DLOCKED_BOX       d3dlb;
    ARGBPIXELDESC       pixd;
    DWORD               dwRPitch, dwSPitch;
    DWORD               dwColorKey;
    UINT                i, j, k;
    HRESULT             hr;

    // Get the format of the volume
    hr = pVolume->GetDesc(&d3dvd);
    if (ResultFailed(hr, TEXT("IDirect3DVolume8::GetDesc"))) {
        return FALSE;
    }

    if (!(cColorKey == COLORKEY_NONE || cColorKey == COLORKEY_PIXEL1)) {
        // Get the surface-specific colorkey value (the representation of
        // the pixel in surface memory) from the red, green, and blue
        // components of the given D3DCOLOR
        dwColorKey = ColorToPixel(d3dvd.Format, ppcPalette, cColorKey & 0xFFFFFF);
    }

    // Lock the volume
    hr = pVolume->LockBox(&d3dlb, NULL, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVolume8::LockBox"));
        return FALSE;
    }

    // If the texture is palettized, set the translucency in the palette entries
    if (d3dvd.Format == D3DFMT_P8) {

        CDevice8* pDevice;
        D3DCAPS8  d3dcaps;
        UINT      i;

        hr = pVolume->GetDevice(&pDevice);
        if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDevice"))) {
            return FALSE;
        }

        hr = pDevice->GetDeviceCaps(&d3dcaps);
        pDevice->Release();
        if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
            return FALSE;
        }

        if (!ppcPalette || !(d3dcaps.TextureCaps & D3DPTEXTURECAPS_ALPHAPALETTE)) {
            return FALSE;
        }

        for (i = 0; i < 256; i++) {
#ifndef UNDER_XBOX
            ppcPalette[i].peFlags = (BYTE)(fAlpha * 255.0f);
#else
            ppcPalette[i] = (ppcPalette[i] & 0x00FFFFFF) | ((BYTE)(fAlpha * 255.0f) << 24);
#endif // UNDER_XBOX
        }

        if (cColorKey == COLORKEY_PIXEL1) {
            dwColorKey = *(LPBYTE)d3dlb.pBits;
        }
        if (cColorKey != COLORKEY_NONE) {
#ifndef UNDER_XBOX
            ppcPalette[dwColorKey].peFlags = 0;
#else
            ppcPalette[dwColorKey] &= 0x00FFFFFF;
#endif // UNDER_XBOX
        }

        return TRUE;
    }

    // Get the pixel format of the volume
    GetARGBPixelDesc(d3dvd.Format, &pixd);

    if (cColorKey == COLORKEY_NONE) {
        dwColorKey = COLORKEY_NONE;
    }

    // Set the translucency
    switch (d3dvd.Format) {

#ifdef UNDER_XBOX
        case D3DFMT_LIN_A8R8G8B8:
#endif // UNDER_XBOX
        case D3DFMT_A8R8G8B8:

            LPDWORD pdwPixel;
            DWORD   dwAlpha;

            dwAlpha = (DWORD)((float)pixd.dwAMask * fAlpha) & pixd.dwAMask;
            pdwPixel = (LPDWORD)d3dlb.pBits;

            // Assume aligned pitch values (i.e. the quotients of the following
            // divisions will not have remainders)
            dwRPitch = d3dlb.RowPitch / pixd.uStride;
            dwSPitch = (d3dlb.SlicePitch - (d3dlb.RowPitch * d3dvd.Height)) / pixd.uStride;

            if (cColorKey == COLORKEY_PIXEL1) {
                dwColorKey = *pdwPixel;
            }

            for (i = 0; i < d3dvd.Depth; i++) {

                for (j = 0; j < d3dvd.Height; j++) {

                    for (k = 0; k < d3dvd.Width; k++) {

                        if ((*(pdwPixel + k) & ~pixd.dwAMask) == dwColorKey) {
                            *(pdwPixel + k) &= ~pixd.dwAMask;
                        }
                        else {
                            *(pdwPixel + k) = dwAlpha | (~pixd.dwAMask & *(pdwPixel + k));
                        }
                    }

                    pdwPixel += dwRPitch;
                }

                pdwPixel += dwSPitch;
            }

            break;

#ifdef UNDER_XBOX
        case D3DFMT_LIN_A1R5G5B5:
        case D3DFMT_LIN_A4R4G4B4:
#endif // UNDER_XBOX
        case D3DFMT_A1R5G5B5:
        case D3DFMT_A4R4G4B4: {

            LPWORD pwPixel;
            WORD   wAlpha;

            wAlpha = (WORD)((UINT)((float)pixd.dwAMask * fAlpha) & pixd.dwAMask);
            pwPixel = (LPWORD)d3dlb.pBits;

            // Assume aligned pitch values (i.e. the quotients of the following
            // divisions will not have remainders)
            dwRPitch = d3dlb.RowPitch / pixd.uStride;
            dwSPitch = (d3dlb.SlicePitch - (d3dlb.RowPitch * d3dvd.Height)) / pixd.uStride;

            if (cColorKey == COLORKEY_PIXEL1) {
                dwColorKey = *pwPixel;
            }

            for (i = 0; i < d3dvd.Depth; i++) {

                for (j = 0; j < d3dvd.Height; j++) {

                    for (k = 0; k < d3dvd.Width; k++) {

                        if ((*(pwPixel + k) & ~pixd.dwAMask) == dwColorKey) {
                            *(pwPixel + k) &= ~pixd.dwAMask;
                        }
                        else {
                            *(pwPixel + k) = wAlpha | (~(WORD)pixd.dwAMask & *(pwPixel + k));
                        }
                    }

                    pwPixel += dwRPitch;
                }

                pwPixel += dwSPitch;
            }

            break;
        }
    }

    // Unlock the surface
    hr = pVolume->UnlockBox();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVolume8::UnlockBox"));
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     SetTranslucency
//
// Description:
//
//     Set the alpha channel of the given texture object to reflect the given
//     alpha and color key values.
//
// Arguments:
//
//     CBaseTexture8* pd3dtb                - Pointer to the texture object
//
//     PALETTECOLOR* ppcPalette             - Pointer to the first entry of
//                                            the palette for a palettized
//                                            texture
//
//     float fAlpha                         - Translucency value ranging from
//                                            0.0 to 1.0, where 0.0 is 
//                                            transparent and 1.0 is opaque
//
//     D3DCOLOR cColorKey                   - Color value of the pixels to
//                                            make transparent
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetTranslucency(CBaseTexture8* pd3dtb, PALETTECOLOR* ppcPalette, 
                        float fAlpha, D3DCOLOR cColorKey) 
{
    CDevice8*       pDevice;
    D3DCAPS8        d3dcaps;
    PTEXTUREDESC    ptexd;
    HRESULT         hr;
    BOOL            bRet = TRUE;

    // Parameter validation
    if (!pd3dtb) {
        return FALSE;
    }

    hr = pd3dtb->GetDevice(&pDevice);
    if (ResultFailed(hr, TEXT("IDirect3DResource8::GetDevice"))) {
        return FALSE;
    }

    hr = pDevice->GetDeviceCaps(&d3dcaps);
    pDevice->Release();
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetDeviceCaps"))) {
        return FALSE;
    }

    // Fail if the current device does not support translucency
    if (!(d3dcaps.TextureCaps & D3DPTEXTURECAPS_ALPHA)) {
        bRet = FALSE;
    }

    ptexd = GetTextureDesc(pd3dtb);
    if (!ptexd) {
        return FALSE;
    }

    if (ptexd->tt & TTYPE_VOLUME) {

        CVolume8*        pVolume;
        CVolumeTexture8* pd3dtv = (CVolumeTexture8*)pd3dtb;

        hr = pd3dtv->GetVolumeLevel(0, &pVolume);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::GetVolumeLevel"));
            return FALSE;
        }

        if (!SetTranslucency(pVolume, ppcPalette, fAlpha, cColorKey)) {
            pVolume->Release();
            return FALSE;
        }

        pVolume->Release();
    }
    else if (ptexd->tt & TTYPE_CUBEMAP) {

        CSurface8*              pSurface;
        CCubeTexture8*          pd3dtc = (CCubeTexture8*)pd3dtb;
        UINT                    i;

        for (i = 0; i < 6; i++) {

            hr = pd3dtc->GetCubeMapSurface((D3DCUBEMAP_FACES)i, 0, &pSurface);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeMap8::GetCubeMapSurface"));
                return FALSE;
            }

            if (!SetTranslucency(pSurface, ppcPalette, fAlpha, cColorKey)) {
                pSurface->Release();
                return FALSE;
            }

            pSurface->Release();
        }
    }
    else {

        CSurface8* pSurface;
        CTexture8* pd3dt = (CTexture8*)pd3dtb;

        hr = pd3dt->GetSurfaceLevel(0, &pSurface);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"));
            return FALSE;
        }

        if (!SetTranslucency(pSurface, ppcPalette, fAlpha, cColorKey)) {
            pSurface->Release();
            return FALSE;
        }

        pSurface->Release();
    }

    if (ptexd->tt & TTYPE_MIPMAP) {
        if (!FilterTexture(pd3dtb, ppcPalette)) {
            return FALSE;
        }
    }

    if (!SyncTexture(pd3dtb)) {
        bRet = FALSE;
    }

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     ColorToPixel
//
// Description:
//
//     Calculate the format-specific color value (the representation of
//     the pixel in surface/volume memory) from the red, green, and blue
//     components of the given D3DCOLOR.
//
// Arguments:
//
//     D3DFORMAT fmt                   - Resource format from which to
//                                       calculate the pixel value
//
//     PALETTECOLOR* ppcPalette        - Pointer to the first entry of
//                                       the palette for a palettized
//                                       texture
//
//     D3DCOLOR c                      - Color of the pixel
//
// Return Value:
//
//     The pixel representation in surface memory of the given color value on
//     success, zero on failure.
//
//******************************************************************************
DWORD ColorToPixel(D3DFORMAT fmt, PALETTECOLOR* ppcPalette, D3DCOLOR c) {

    DWORD dwPixel;
    BYTE  r, g, b, a;

    r = (BYTE)RGBA_GETRED(c);
    g = (BYTE)RGBA_GETGREEN(c);
    b = (BYTE)RGBA_GETBLUE(c);
    a = (BYTE)RGBA_GETALPHA(c);

    // If the format is palettized, select the nearest palette entry
    // to the given color
    if (fmt == D3DFMT_P8) {

        UINT                i;
        int                 dr, dg, db, d, dLast;

        if (!ppcPalette) {
            return 0;
        }

        dLast = INT_MAX;

        // Find the entry in the palette that most closely matches the
        // given pixel color
        for (i = 0; i < 256; i++) {

#ifndef UNDER_XBOX
            dr = (int)ppcPalette[i].peRed - r;
            dg = (int)ppcPalette[i].peGreen - g;
            db = (int)ppcPalette[i].peBlue - b;
#else
            dr = (int)RGBA_GETRED(ppcPalette[i]) - r;
            dg = (int)RGBA_GETGREEN(ppcPalette[i]) - g;
            db = (int)RGBA_GETBLUE(ppcPalette[i]) - b;
#endif // UNDER_XBOX

            d = dr * dr + dg * dg + db * db;

            if (d < dLast) {
                dwPixel = i;
                dLast = d;
                if (d == 0) {
                    break;
                }
            }
        }

//        DebugString(TEXT("Color key set to index %d - r: %d, g: %d, b: %d"), 
//                match, ppe[match].peRed, ppe[match].peGreen, ppe[match].peBlue);
    }

    else {

        ARGBPIXELDESC       pixd;

        // Get the pixel format of the texture
        GetARGBPixelDesc(fmt, &pixd);

        dwPixel = ((BYTE)((float)(pixd.dwAMask >> pixd.dwAShift) * ((float)a / 255.0f) + 0.5f) << pixd.dwAShift) |
                  ((BYTE)((float)(pixd.dwRMask >> pixd.dwRShift) * ((float)r / 255.0f) + 0.5f) << pixd.dwRShift) |
                  ((BYTE)((float)(pixd.dwGMask >> pixd.dwGShift) * ((float)g / 255.0f) + 0.5f) << pixd.dwGShift) |
                  ((BYTE)((float)(pixd.dwBMask >> pixd.dwBShift) * ((float)b / 255.0f) + 0.5f) << pixd.dwBShift);
    }

    return dwPixel;
}

//******************************************************************************
//
// Function:
//
//     CopyTexture
//
// Description:
//
//     Copy the contents of the given source texture into the given destination
//     texture using the given filter.  If the destination texture is a cube map 
//     and the source is not, the source texture will be copied into all faces 
//     of the cube map.  If the destination texture is a bump map and the source 
//     texture is not, the source texture is treated as a height map.  Only 
//     textures that are described in the texture table may be used as source or 
//     destination textures.
//
// Arguments:
//
//     CBaseTexture8* pd3dtbDst             - Pointer to the destination texture 
//                                            object
//
//     PALETTECOLOR* ppcPalDst              - Pointer to the first entry of
//                                            the destination palette
//
//     CBaseTexture8* pd3dtbSrc             - Pointer to the source texture 
//                                            object
//
//     PALETTECOLOR* ppcPalSrc              - Pointer to the first entry of
//                                            the source palette
//
//     DWORD dwFilter                       - Filter to apply during the copy
//
// Return Value:
//
//     An HRESULT indicating the result of the copy operation.
//
//******************************************************************************
HRESULT CopyTexture(CBaseTexture8* pd3dtbDst, PALETTECOLOR* ppcPalDst, 
                    CBaseTexture8* pd3dtbSrc, PALETTECOLOR* ppcPalSrc, 
                    DWORD dwFilter) 
{
    PTEXTUREDESC        ptexdDst, ptexdSrc;
    CSurface8*          pd3dsDst, *pd3dsSrc;
    CVolume8*           pd3dvDst, *pd3dvSrc;
    UINT                uLevelsDst, uLevelsSrc, i, j, k;
    PALETTEENTRY*       ppeDst = (PALETTEENTRY*)ppcPalDst, *ppeSrc = (PALETTEENTRY*)ppcPalSrc;
    HRESULT             hr;
#ifdef UNDER_XBOX
    PALETTEENTRY        ppeEntriesDst[256];
    PALETTEENTRY        ppeEntriesSrc[256];
#endif // UNDER_XBOX

    ptexdDst = GetTextureDesc(pd3dtbDst);
    ptexdSrc = GetTextureDesc(pd3dtbSrc);

    if (!ptexdDst || !ptexdSrc) {
        return E_INVALIDARG;
    }

#ifdef UNDER_XBOX
    if (ppcPalDst) {
        memcpy(ppeEntriesDst, ppcPalDst, 256 * sizeof(PALETTEENTRY));
        ConvertD3DCOLORToPALETTEENTRY(ppeEntriesDst, 256);
        ppeDst = ppeEntriesDst;
    }
    if (ppcPalSrc) {
        memcpy(ppeEntriesSrc, ppcPalSrc, 256 * sizeof(PALETTEENTRY));
        ConvertD3DCOLORToPALETTEENTRY(ppeEntriesSrc, 256);
        ppeSrc = ppeEntriesSrc;
    }
#endif // UNDER_XBOX

    if ((((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_TEXTURE) &&
         ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_TEXTURE)) ||
        (((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_BUMPMAP) &&
         ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_BUMPMAP)))
    {
        uLevelsDst = pd3dtbDst->GetLevelCount();
        uLevelsSrc = pd3dtbSrc->GetLevelCount();

        for (i = 0, j = 0; i < uLevelsDst; i++) {

            j = (uLevelsDst - i >= uLevelsSrc) ? 0 : j + 1;
            hr = ((CTexture8*)pd3dtbDst)->GetSurfaceLevel(i, &pd3dsDst);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                return hr;
            }
            hr = ((CTexture8*)pd3dtbSrc)->GetSurfaceLevel(j, &pd3dsSrc);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                pd3dsDst->Release();
                return hr;
            }
            hr = D3DXLoadSurfaceFromSurface(pd3dsDst->GetIDirect3DSurface8(), ppeDst, NULL,
                                            pd3dsSrc->GetIDirect3DSurface8(), ppeSrc, NULL,
                                            dwFilter, 0);

            pd3dsSrc->Release();
            pd3dsDst->Release();

            if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                return hr;
            }
        }

        if (!SyncTexture(pd3dtbDst)) {
            hr = E_FAIL;
        }

        return hr;
    }

    if ((((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_CUBEMAP) &&
         ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_TEXTURE)) ||
        (((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_CUBEMAP) &&
         ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_CUBEMAP)))
    {
        uLevelsDst = pd3dtbDst->GetLevelCount();
        uLevelsSrc = pd3dtbSrc->GetLevelCount();

        for (k = 0; k < 6; k++) {

            for (i = 0, j = 0; i < uLevelsDst; i++) {

                j = (uLevelsDst - i >= uLevelsSrc) ? 0 : j + 1;
                hr = ((CCubeTexture8*)pd3dtbDst)->GetCubeMapSurface((D3DCUBEMAP_FACES)k, i, &pd3dsDst);
                if (ResultFailed(hr, TEXT("IDirect3DCubeMap8::GetSurfaceLevel"))) {
                    return hr;
                }
                if (ptexdSrc->tt & TTYPE_CUBEMAP) {
                    hr = ((CCubeTexture8*)pd3dtbSrc)->GetCubeMapSurface((D3DCUBEMAP_FACES)k, j, &pd3dsSrc);
                }
                else {
                    hr = ((CTexture8*)pd3dtbSrc)->GetSurfaceLevel(j, &pd3dsSrc);
                }
                if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                    pd3dsDst->Release();
                    return hr;
                }
                hr = D3DXLoadSurfaceFromSurface(pd3dsDst->GetIDirect3DSurface8(), ppeDst, NULL,
                                                pd3dsSrc->GetIDirect3DSurface8(), ppeSrc, NULL,
                                                dwFilter, 0);

                pd3dsSrc->Release();
                pd3dsDst->Release();

                if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                    return hr;
                }
            }
        }

        if (!SyncTexture(pd3dtbDst)) {
            hr = E_FAIL;
        }

        return hr;
    }

    if (((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_BUMPMAP) &&
        ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_TEXTURE))
    {
        CDevice8*           pDevice;
        CSurface8*          pd3dsH, *pd3dsB, *pd3ds;
        D3DSURFACE_DESC     d3dsd;
        D3DLOCKED_RECT      d3dlr;
        LPDWORD             pdwPixel;
        LPWORD              pwBump;
//        float               fOrder;
        float               *pfHeightMap, *pfHeight;
        D3DXVECTOR3         v1, v2, n;
        UINT                x, y;

        hr = pd3dtbDst->GetDevice(&pDevice);
        if (ResultFailed(hr, TEXT("IDirect3DResource8::GetDevice"))) {
            return hr;
        }

        uLevelsDst = pd3dtbDst->GetLevelCount();
        uLevelsSrc = pd3dtbSrc->GetLevelCount();

        for (i = 0, j = 0; i < uLevelsDst; i++) {

            j = (uLevelsDst - i >= uLevelsSrc) ? 0 : j + 1;

            hr = ((CTexture8*)pd3dtbSrc)->GetLevelDesc(j, &d3dsd);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetDesc"))) {
                pDevice->Release();
                return hr;
            }

            // Create a 32 bit height map
#ifndef UNDER_XBOX
            if (ptexdSrc->fmt == D3DFMT_X8R8G8B8 ||
                ptexdSrc->fmt == D3DFMT_A8R8G8B8)
#else
            if (ptexdSrc->fmt == D3DFMT_LIN_X8R8G8B8 ||
                ptexdSrc->fmt == D3DFMT_LIN_A8R8G8B8)
#endif
            {
                hr = ((CTexture8*)pd3dtbSrc)->GetSurfaceLevel(j, &pd3dsH);
                if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                    pDevice->Release();
                    return hr;
                }
            }
            else {

#ifndef UNDER_XBOX
                hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_A8R8G8B8, &pd3dsH);
#else
                hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_LIN_A8R8G8B8, &pd3dsH);
#endif
                if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateImageSurface"))) {
                    pDevice->Release();
                    return hr;
                }
            
                hr = ((CTexture8*)pd3dtbSrc)->GetSurfaceLevel(j, &pd3ds);
                if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetSurfaceLevel"))) {
                    pd3dsH->Release();
                    pDevice->Release();
                    return hr;
                }

                hr = D3DXLoadSurfaceFromSurface(pd3dsH->GetIDirect3DSurface8(), NULL, NULL, pd3ds->GetIDirect3DSurface8(), ppeSrc, NULL, dwFilter, 0);
                pd3ds->Release();
                if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                    pd3dsH->Release();
                    pDevice->Release();
                    return hr;
                }
            }

            // Create a 16 bit bump map
#ifndef UNDER_XBOX
            hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_V8U8, &pd3dsB);
#else
            hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_LIN_V8U8, &pd3dsB);
#endif
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateImageSurface"))) {
                pd3dsH->Release();
                pDevice->Release();
                return hr;
            }

            // Convert the pixel intensities in the source image into height values
            // ranging from 0.0 to 1.0
            pfHeightMap = (float*)MemAlloc(d3dsd.Width * d3dsd.Height * sizeof(float));
            if (!pfHeightMap) {
                DebugString(TEXT("Memory allocation failed for height map"));
                pd3dsB->Release();
                pd3dsH->Release();
                pDevice->Release();
                return E_OUTOFMEMORY;
            }

            hr = pd3dsH->LockRect(&d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"));
                MemFree(pfHeightMap);
                pd3dsB->Release();
                pd3dsH->Release();
                pDevice->Release();
                return hr;
            }

            pdwPixel = (LPDWORD)d3dlr.pBits;

            for (y = 0; y < d3dsd.Height; y++) {

                for (x = 0; x < d3dsd.Width; x++) {

                    pfHeightMap[y * d3dsd.Width + x] = 
                           (float)(((pdwPixel[x] >> 16) & 0xFF) +
                                   ((pdwPixel[x] >> 8)  & 0xFF) +
                                   ((pdwPixel[x])       & 0xFF)) / 3.0f / 255.0f;
                }

                pdwPixel += d3dlr.Pitch >> 2;
            }

            pd3dsH->UnlockRect();
            pd3dsH->Release();
       
            // Calculate bump map offsets from the height map information
            hr = pd3dsB->LockRect(&d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"));
                MemFree(pfHeightMap);
                pd3dsB->Release();
                pDevice->Release();
                return hr;
            }

            pwBump = (LPWORD)d3dlr.pBits;
            v1 = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
            v2 = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

            for (y = 0; y < d3dsd.Height; y++) {

                for (x = 0; x < d3dsd.Width; x++) {

                    // Tiled
                    pfHeight = &pfHeightMap[y * d3dsd.Width + x];
//                    fOrder = 1.0f;
                    if (y == d3dsd.Height - 1) {
                        v2.z = -(pfHeightMap[x] - *pfHeight);
                    }
                    else {
                        v2.z = -(pfHeight[d3dsd.Width] - pfHeight[0]);
                    }
                    if (x == d3dsd.Width - 1) {
                        v1.z = -(*(pfHeight - x) - *pfHeight);
                    }
                    else {
                        v1.z = -(pfHeight[1] - pfHeight[0]);
                    }
                    v1.x = (float)sqrt(1.0f - v1.z * v1.z);
                    v2.y = (float)sqrt(1.0f - v2.z * v2.z);
                    D3DXVec3Cross(&n, &v2, &v1);
                    D3DXVec3Normalize(&n, &n);
                    pwBump[x] = (int)(-n.y * 64.0f) << 8 |
                                (int)(n.x * 64.0f);

/*
                    // Non-tiled
                    pfHeight = &pfHeightMap[y * d3dsd.Width + x];
                    fOrder = 1.0f;
                    if (y == d3dsd.Height - 1) {
                        v2.z = *(pfHeight - d3dsd.Width) - *pfHeight;
                        fOrder *= -1.0f;
                    }
                    else {
                        v2.z = pfHeight[d3dsd.Width] - pfHeight[0];
                    }
                    if (x == d3dsd.Width - 1) {
                        v1.z = *(pfHeight - 1) - *pfHeight;
                        fOrder *= -1.0f;
                    }
                    else {
                        v1.z = pfHeight[1] - pfHeight[0];
                    }
                    v1.x = (float)sqrt(1.0f - v1.z * v1.z);
                    v2.y = -(float)sqrt(1.0f - v2.z * v2.z);
                    if (fOrder > 0.0f) {
                        D3DXVec3Cross(&n, &v1, &v2);
                    }
                    else {
                        D3DXVec3Cross(&n, &v2, &v1);
                    }
                    D3DXVec3Normalize(&n, &n);
                    pwBump[x] = (int)(-n.y * 64.0f) << 8 |
                                (int)(n.x * 64.0f);
*/
                }

                pwBump += d3dlr.Pitch >> 1;
            }

            MemFree(pfHeightMap);

            hr = pd3dsB->UnlockRect();
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DSurface8::UnlockRect"));
                pd3dsB->Release();
                pDevice->Release();
                return hr;
            }

            // Copy the bump map to the destination bump map
            hr = ((CTexture8*)pd3dtbDst)->GetSurfaceLevel(i, &pd3ds);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                pd3dsB->Release();
                pDevice->Release();
                return hr;
            }

            hr = D3DXLoadSurfaceFromSurface(pd3ds->GetIDirect3DSurface8(), ppeDst, NULL, pd3dsB->GetIDirect3DSurface8(), NULL, NULL, dwFilter, 0);

            pd3ds->Release();
            pd3dsB->Release();

            if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                pDevice->Release();
                return hr;
            }
        }

        pDevice->Release();

        if (!SyncTexture(pd3dtbDst)) {
            hr = E_FAIL;
        }

        return hr;
    }

    if (((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_NORMALMAP) &&
        ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_TEXTURE))
    {
        CDevice8*           pDevice;
        CSurface8*          pd3dsH, *pd3dsB, *pd3ds;
        D3DSURFACE_DESC     d3dsd;
        D3DLOCKED_RECT      d3dlr;
        LPDWORD             pdwPixel;
        LPDWORD             pdwNormal;
//        float               fOrder;
        float               *pfHeightMap, *pfHeight;
        D3DXVECTOR3         v1, v2, n;
        UINT                x, y;

        hr = pd3dtbDst->GetDevice(&pDevice);
        if (ResultFailed(hr, TEXT("IDirect3DResource8::GetDevice"))) {
            return hr;
        }

        uLevelsDst = pd3dtbDst->GetLevelCount();
        uLevelsSrc = pd3dtbSrc->GetLevelCount();

        for (i = 0, j = 0; i < uLevelsDst; i++) {

            j = (uLevelsDst - i >= uLevelsSrc) ? 0 : j + 1;

            hr = ((CTexture8*)pd3dtbSrc)->GetLevelDesc(j, &d3dsd);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetDesc"))) {
                pDevice->Release();
                return hr;
            }

            // Create a 32 bit height map
#ifndef UNDER_XBOX
            if (ptexdSrc->fmt == D3DFMT_X8R8G8B8 ||
                ptexdSrc->fmt == D3DFMT_A8R8G8B8)
#else
            if (ptexdSrc->fmt == D3DFMT_LIN_X8R8G8B8 ||
                ptexdSrc->fmt == D3DFMT_LIN_A8R8G8B8)
#endif
            {
                hr = ((CTexture8*)pd3dtbSrc)->GetSurfaceLevel(j, &pd3dsH);
                if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                    pDevice->Release();
                    return hr;
                }
            }
            else {

#ifndef UNDER_XBOX
                hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_A8R8G8B8, &pd3dsH);
#else
                hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_LIN_A8R8G8B8, &pd3dsH);
#endif
                if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateImageSurface"))) {
                    pDevice->Release();
                    return hr;
                }
            
                hr = ((CTexture8*)pd3dtbSrc)->GetSurfaceLevel(j, &pd3ds);
                if (ResultFailed(hr, TEXT("IDirect3DDevice8::GetSurfaceLevel"))) {
                    pd3dsH->Release();
                    pDevice->Release();
                    return hr;
                }

                hr = D3DXLoadSurfaceFromSurface(pd3dsH->GetIDirect3DSurface8(), NULL, NULL, pd3ds->GetIDirect3DSurface8(), ppeSrc, NULL, dwFilter, 0);
                pd3ds->Release();
                if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                    pd3dsH->Release();
                    pDevice->Release();
                    return hr;
                }
            }

            // Create a 32 bit normal map
#ifndef UNDER_XBOX
            hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_A8R8G8B8, &pd3dsB);
#else
            hr = pDevice->CreateImageSurface(d3dsd.Width, d3dsd.Height, D3DFMT_LIN_A8R8G8B8, &pd3dsB);
#endif
            if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateImageSurface"))) {
                pd3dsH->Release();
                pDevice->Release();
                return hr;
            }

            // Convert the pixel intensities in the source image into height values
            // ranging from 0.0 to 1.0
            pfHeightMap = (float*)MemAlloc(d3dsd.Width * d3dsd.Height * sizeof(float));
            if (!pfHeightMap) {
                DebugString(TEXT("Memory allocation failed for height map"));
                pd3dsB->Release();
                pd3dsH->Release();
                pDevice->Release();
                return E_OUTOFMEMORY;
            }

            hr = pd3dsH->LockRect(&d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"));
                MemFree(pfHeightMap);
                pd3dsB->Release();
                pd3dsH->Release();
                pDevice->Release();
                return hr;
            }

            pdwPixel = (LPDWORD)d3dlr.pBits;

            for (y = 0; y < d3dsd.Height; y++) {

                for (x = 0; x < d3dsd.Width; x++) {

                    pfHeightMap[y * d3dsd.Width + x] = 
                           (float)(((pdwPixel[x] >> 16) & 0xFF) +
                                   ((pdwPixel[x] >> 8)  & 0xFF) +
                                   ((pdwPixel[x])       & 0xFF)) / 3.0f / 255.0f;
                }

                pdwPixel += d3dlr.Pitch >> 2;
            }

            pd3dsH->UnlockRect();
            pd3dsH->Release();
       
            // Calculate normal map vectors from the height map information
            hr = pd3dsB->LockRect(&d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DSurface8::LockRect"));
                MemFree(pfHeightMap);
                pd3dsB->Release();
                pDevice->Release();
                return hr;
            }

            pdwNormal = (LPDWORD)d3dlr.pBits;
            v1 = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
            v2 = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

            for (y = 0; y < d3dsd.Height; y++) {

                for (x = 0; x < d3dsd.Width; x++) {

                    // Tiled
                    pfHeight = &pfHeightMap[y * d3dsd.Width + x];
//                    fOrder = 1.0f;
                    if (y == d3dsd.Height - 1) {
                        v2.z = -(pfHeightMap[x] - *pfHeight);
                    }
                    else {
                        v2.z = -(pfHeight[d3dsd.Width] - pfHeight[0]);
                    }
                    if (x == d3dsd.Width - 1) {
                        v1.z = -(*(pfHeight - x) - *pfHeight);
                    }
                    else {
                        v1.z = -(pfHeight[1] - pfHeight[0]);
                    }
                    v1.x = (float)sqrt(1.0f - v1.z * v1.z);
                    v2.y = (float)sqrt(1.0f - v2.z * v2.z);
                    D3DXVec3Cross(&n, &v2, &v1);
                    D3DXVec3Normalize(&n, &n);
                    pdwNormal[x] = VectorToColor(&n);

/*
                    // Non-tiled
                    pfHeight = &pfHeightMap[y * d3dsd.Width + x];
                    fOrder = 1.0f;
                    if (y == d3dsd.Height - 1) {
                        v2.z = *(pfHeight - d3dsd.Width) - *pfHeight;
                        fOrder *= -1.0f;
                    }
                    else {
                        v2.z = pfHeight[d3dsd.Width] - pfHeight[0];
                    }
                    if (x == d3dsd.Width - 1) {
                        v1.z = *(pfHeight - 1) - *pfHeight;
                        fOrder *= -1.0f;
                    }
                    else {
                        v1.z = pfHeight[1] - pfHeight[0];
                    }
                    v1.x = (float)sqrt(1.0f - v1.z * v1.z);
                    v2.y = (float)sqrt(1.0f - v2.z * v2.z);
                    if (fOrder > 0.0f) {
                        D3DXVec3Cross(&n, &v2, &v1);
                    }
                    else {
                        D3DXVec3Cross(&n, &v1, &v2);
                    }
                    D3DXVec3Normalize(&n, &n);
                    pdwNormal[x] = VectorToColor(&n);
*/
                }

                pdwNormal += d3dlr.Pitch >> 2;
            }

            MemFree(pfHeightMap);

            hr = pd3dsB->UnlockRect();
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DSurface8::UnlockRect"));
                pd3dsB->Release();
                pDevice->Release();
                return hr;
            }

            // Copy the normal map to the destination normal map
            hr = ((CTexture8*)pd3dtbDst)->GetSurfaceLevel(i, &pd3ds);
            if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetSurfaceLevel"))) {
                pd3dsB->Release();
                pDevice->Release();
                return hr;
            }

            hr = D3DXLoadSurfaceFromSurface(pd3ds->GetIDirect3DSurface8(), ppeDst, NULL, pd3dsB->GetIDirect3DSurface8(), NULL, NULL, dwFilter, 0);

            pd3ds->Release();
            pd3dsB->Release();

            if (ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                pDevice->Release();
                return hr;
            }
        }

        pDevice->Release();

        if (!SyncTexture(pd3dtbDst)) {
            hr = E_FAIL;
        }

        return hr;
    }

    if (((ptexdDst->tt & TTYPE_RESOURCEMASK) == TTYPE_VOLUME) &&
        ((ptexdSrc->tt & TTYPE_RESOURCEMASK) == TTYPE_VOLUME))
    {
        uLevelsDst = pd3dtbDst->GetLevelCount();
        uLevelsSrc = pd3dtbSrc->GetLevelCount();

        for (i = 0, j = 0; i < uLevelsDst; i++) {

            j = (uLevelsDst - i >= uLevelsSrc) ? 0 : j + 1;
            hr = ((CVolumeTexture8*)pd3dtbDst)->GetVolumeLevel(i, &pd3dvDst);
            if (ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::GetSurfaceLevel"))) {
                return hr;
            }
            hr = ((CVolumeTexture8*)pd3dtbSrc)->GetVolumeLevel(j, &pd3dvSrc);
            if (ResultFailed(hr, TEXT("IDirect3DVolumeTexture8::GetSurfaceLevel"))) {
                pd3dvDst->Release();
                return hr;
            }
            hr = D3DXLoadVolumeFromVolume(pd3dvDst->GetIDirect3DVolume8(), ppeDst, NULL,
                                            pd3dvSrc->GetIDirect3DVolume8(), ppeSrc, NULL,
                                            dwFilter, 0);

            pd3dvSrc->Release();
            pd3dvDst->Release();

            if (ResultFailed(hr, TEXT("D3DXLoadVolumeFromVolume"))) {
                return hr;
            }
        }

        if (!SyncTexture(pd3dtbDst)) {
            hr = E_FAIL;
        }

        return hr;
    }

    return E_NOTIMPL;
}

//******************************************************************************
//
// Function:
//
//     CreateNormalMap
//
// Description:
//
//     Create a cube map and populate it with normal vector information.
//
// Arguments:
//
//     CDevice8* pDevice               - Pointer to the device object
//
//     UINT uLength                    - Dimensions of the map
//
//     float fBumpDelta                - Maximum component offset to randomly 
//                                       perturb the surface normals
//
//     D3DFORMAT fmt                   - Format of the texture
//
//     BOOL bMipmap                    - Indicates whether or not to
//                                       use a mip map
//
//     D3DPOOL pool                    - Memory pool in which to create the map
//
// Return Value:
//
//     A pointer to the created diffuse map on success, NULL on failure.
//
//******************************************************************************
CCubeTexture8* CreateNormalMap(CDevice8* pDevice, UINT uLength, float fBumpDelta, 
                                    D3DFORMAT fmt, BOOL bMipmap, D3DPOOL pool)
{
    CCubeTexture8*  pd3dtc;
    CCubeTexture8*  pd3dtcBump = NULL;
    TEXTURETYPE     ttype;
    UINT            uLevels;
    D3DLOCKED_RECT  d3dlr, d3dlrB;
    LPDWORD         pdwPixel, pdwPixelB;
    D3DXVECTOR3     vDir;
    float           fU, fV;
    UINT            i, j, u, v;
    HRESULT         hr;
#ifdef UNDER_XBOX
    Swizzler        swz(uLength, uLength, 1);
    BOOL            bSwizzled = XGIsSwizzledFormat(fmt);
#endif

    // Currently only support 32 bpp formats
#ifndef UNDER_XBOX
    if (!(fmt == D3DFMT_A8R8G8B8 || fmt == D3DFMT_X8R8G8B8)) {
#else
    if (!(fmt == D3DFMT_A8R8G8B8 || fmt == D3DFMT_X8R8G8B8 || fmt == D3DFMT_LIN_A8R8G8B8 || fmt == D3DFMT_LIN_X8R8G8B8)) {
#endif
        return NULL;
    }

    ttype = TTYPE_CUBEMAP;
    if (bMipmap) {
        ttype |= TTYPE_MIPMAP;
    }

    pd3dtc = (CCubeTexture8*)CreateTexture(pDevice, uLength, uLength, fmt, ttype, pool);
    if (!pd3dtc) {
        return NULL;
    }

    // If the normal map has multiple levels and a delta is to be applied to the normals,
    // generate the random offset values to be applied and store them in the highest
    // level of a second cube map.  Filter the offsets to the lower levels for consistent
    // transitions.
    if (bMipmap && fBumpDelta != 0.0f) {

        pd3dtcBump = (CCubeTexture8*)CreateTexture(pDevice, uLength, uLength, D3DFMT_A8R8G8B8, ttype);
        if (!pd3dtcBump) {
            ReleaseTexture(pd3dtc);
            return NULL;
        }

        // Populate the cube texture with random offsets to be applied to the normal map
        for (i = 0; i < 6; i++) {

            hr = pd3dtcBump->LockRect((D3DCUBEMAP_FACES)i, 0, &d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeTexture8::LockRect"));
                ReleaseTexture(pd3dtcBump);
                ReleaseTexture(pd3dtc);
                return NULL;
            }

            pdwPixel = (LPDWORD)d3dlr.pBits;

#ifdef UNDER_XBOX
            swz.SetU(0);
            swz.SetV(0);
#endif

            for (v = 0; v < uLength; v++) {

                for (u = 0; u < uLength; u++) {

				    vDir = D3DXVECTOR3(SFRND(fBumpDelta), SFRND(fBumpDelta), SFRND(fBumpDelta));
#ifdef UNDER_XBOX
                    if (!bSwizzled) {
#endif
                        pdwPixel[u] = VectorToColor(&vDir);
#ifdef UNDER_XBOX
                    }
                    else {
                        pdwPixel[swz.Get2D()] = VectorToColor(&vDir);
                        swz.IncU();
                    }
#endif
                }

#ifdef UNDER_XBOX
                if (!bSwizzled) {
#endif
                    pdwPixel += (d3dlr.Pitch >> 2);
#ifdef UNDER_XBOX
                }
                else {
                    swz.IncV();
                }
#endif
            }

            hr = pd3dtcBump->UnlockRect((D3DCUBEMAP_FACES)i, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeTexture8::UnlockRect"));
                ReleaseTexture(pd3dtcBump);
                ReleaseTexture(pd3dtc);
                return NULL;
            }
        }

        // Filter the offsets to the lower levels
        hr = D3DXFilterCubeTexture(pd3dtcBump->GetIDirect3DCubeTexture8(), NULL, 0, D3DX_FILTER_BOX);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("D3DXFilterCubeTexture"));
            ReleaseTexture(pd3dtcBump);
            ReleaseTexture(pd3dtc);
            return NULL;
        }
    }

    // Generate the normals
    uLevels = pd3dtc->GetLevelCount();

    for (i = 0; i < uLevels; i++) {

        for (j = 0; j < 6; j++) {

            hr = pd3dtc->LockRect((D3DCUBEMAP_FACES)j, i, &d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeTexture8::LockRect"));
                if (pd3dtcBump) ReleaseTexture(pd3dtcBump);
                ReleaseTexture(pd3dtc);
                return NULL;
            }

            if (pd3dtcBump) {
                hr = pd3dtcBump->LockRect((D3DCUBEMAP_FACES)j, i, &d3dlrB, NULL, 0);
                if (FAILED(hr)) {
                    ResultFailed(hr, TEXT("IDirect3DCubeTexture8::LockRect"));
                    ReleaseTexture(pd3dtcBump);
                    ReleaseTexture(pd3dtc);
                    return NULL;
                }
                pdwPixelB = (LPDWORD)d3dlrB.pBits;
            }

            pdwPixel = (LPDWORD)d3dlr.pBits;

            if (uLevels > 1) {
                uLength = 0x1 << ((uLevels - 1) - i);
            }

#ifdef UNDER_XBOX
            Swizzler swz(uLength, uLength, 1);
            swz.SetU(0);
            swz.SetV(0);
#endif

            for (v = 0; v < uLength; v++) {

                for (u = 0; u < uLength; u++) {

                    if (uLength > 1) {
                        fU = (float)u / (float)(uLength - 1);
                        fV = (float)v / (float)(uLength - 1);
                    }
                    else {
                        fU = 0.5f;
                        fV = 0.5f;
                    }

                    switch ((D3DCUBEMAP_FACES)j) {
                        case D3DCUBEMAP_FACE_POSITIVE_X:
                            D3DXVec3Normalize(&vDir, &D3DXVECTOR3(1.0f, 1.0f - (fV * 2.0f), 1.0f - (fU * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_NEGATIVE_X:
                            D3DXVec3Normalize(&vDir, &D3DXVECTOR3(-1.0f, 1.0f - (fV * 2.0f), -1.0f + (fU * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_POSITIVE_Y:
                            D3DXVec3Normalize(&vDir, &D3DXVECTOR3(-1.0f + (fU * 2.0f), 1.0f, -1.0f + (fV * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_NEGATIVE_Y:
                            D3DXVec3Normalize(&vDir, &D3DXVECTOR3(-1.0f + (fU * 2.0f), -1.0f, 1.0f - (fV * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_POSITIVE_Z:
                            D3DXVec3Normalize(&vDir, &D3DXVECTOR3(-1.0f + (fU * 2.0f), 1.0f - (fV * 2.0f), 1.0f));
                            break;
                        case D3DCUBEMAP_FACE_NEGATIVE_Z:
                            D3DXVec3Normalize(&vDir, &D3DXVECTOR3(1.0f - (fU * 2.0f), 1.0f - (fV * 2.0f), -1.0f));
                            break;
                    }
                    vDir = -vDir;
                    if (!pd3dtcBump) {
    				    vDir += D3DXVECTOR3(SFRND(fBumpDelta), SFRND(fBumpDelta), SFRND(fBumpDelta));
                    }
                    else {
                        vDir += ColorToVector(pdwPixelB[u]);
                    }
				    D3DXVec3Normalize(&vDir, &vDir);

#ifdef UNDER_XBOX
                    if (!bSwizzled) {
#endif
                        pdwPixel[u] = VectorToColor(&vDir);
#ifdef UNDER_XBOX
                    }
                    else {
                        pdwPixel[swz.Get2D()] = VectorToColor(&vDir);

                        swz.IncU();
                    }
#endif
                }

#ifdef UNDER_XBOX
                if (!bSwizzled) {
#endif
                    pdwPixel += (d3dlr.Pitch >> 2);
#ifdef UNDER_XBOX
                }
                else {
                    swz.IncV();
                }
#endif
                if (pd3dtcBump) {
                    pdwPixelB += (d3dlrB.Pitch >> 2);
                }
            }

            if (pd3dtcBump) {
                hr = pd3dtcBump->UnlockRect((D3DCUBEMAP_FACES)j, i);
                if (FAILED(hr)) {
                    ResultFailed(hr, TEXT("IDirect3DCubeTexture8::UnlockRect"));
                    if (pd3dtcBump) ReleaseTexture(pd3dtcBump);
                    ReleaseTexture(pd3dtc);
                    return NULL;
                }
            }

            hr = pd3dtc->UnlockRect((D3DCUBEMAP_FACES)j, i);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeTexture8::UnlockRect"));
                if (pd3dtcBump) ReleaseTexture(pd3dtcBump);
                ReleaseTexture(pd3dtc);
                return NULL;
            }
        }
    }

    if (pd3dtcBump) {
        ReleaseTexture(pd3dtcBump);
    }

    return pd3dtc;
}

//******************************************************************************
//
// Function:
//
//     CreateHalfVectorMap
//
// Description:
//
//     Create a cube map and populate it with lookup information which,
//     given a normalized vector from a vertex to the viewer (supplied in the 
//     texture coordinates of the vertex), will return a normalized vector 
//     located halfway between the vertex-eye vector and the given light vector.
//     This normalized half-vector can then be used in specular lighting by
//     applying it in another stage with a normal cube map and 
//     D3DTOP_DOTPRODUCT3.
//
// Arguments:
//
//     CDevice8* pDevice               - Pointer to the device object
//
//     D3DMATRIX* pmWorld              - World transform
//
//     D3DVECTOR* pvLightDir           - Direction vector of the light
//
//     UINT uLength                    - Dimensions of the map
//
//     D3DFORMAT fmt                   - Format of the texture
//
//     BOOL bMipmap                    - Indicates whether or not to
//                                       use a mip map
//
//     D3DPOOL pool                    - Memory pool in which to create the map
//
// Return Value:
//
//     A pointer to the created diffuse map on success, NULL on failure.
//
//******************************************************************************
CCubeTexture8* CreateHalfVectorMap(CDevice8* pDevice, D3DVECTOR* pvLightDir, 
                                UINT uLength, D3DFORMAT fmt, BOOL bMipmap, 
                                D3DPOOL pool)
{
    CCubeTexture8*  pd3dtc;
    TEXTURETYPE     ttype;

    // Currently only support 32 bpp formats
    if (!(fmt == D3DFMT_A8R8G8B8 || fmt == D3DFMT_X8R8G8B8)) {
        return NULL;
    }

    ttype = TTYPE_CUBEMAP;
    if (bMipmap) {
        ttype |= TTYPE_MIPMAP;
    }

    pd3dtc = (CCubeTexture8*)CreateTexture(pDevice, uLength, uLength, fmt, ttype, pool);
    if (!pd3dtc) {
        return NULL;
    }

    if (!UpdateHalfVectorMap(pd3dtc, pvLightDir)) {
        ReleaseTexture(pd3dtc);
        return NULL;
    }

    return pd3dtc;
}

//******************************************************************************
BOOL UpdateHalfVectorMap(CCubeTexture8* pd3dtc, D3DVECTOR* pvLightDir) {

    D3DXVECTOR3     vLDir;
    UINT            uLength;
    UINT            uLevels;
    D3DSURFACE_DESC d3dsd;
    D3DLOCKED_RECT  d3dlr;
    LPDWORD         pdwPixel;
    D3DXVECTOR3     vHalf;
    float           fU, fV;
    UINT            i, j, u, v;
    HRESULT         hr;
#ifdef UNDER_XBOX
    BOOL            bSwizzled;

    pd3dtc->GetLevelDesc(0, &d3dsd);    
    bSwizzled = XGIsSwizzledFormat(d3dsd.Format);
#endif

    // Normalize the light direction vector
    D3DXVec3Normalize(&vLDir, (LPD3DXVECTOR3)pvLightDir);
/*
    // Transform the light direction vector into model space
    // (multiply the vector by the transposed rotational component of the
    // world matrix) and negate it
    vL.x = -(vLDir.x * pmWorld->_11 + vLDir.y * pmWorld->_12 + vLDir.z * pmWorld->_13);
    vL.y = -(vLDir.x * pmWorld->_21 + vLDir.y * pmWorld->_22 + vLDir.z * pmWorld->_23);
    vL.z = -(vLDir.x * pmWorld->_31 + vLDir.y * pmWorld->_32 + vLDir.z * pmWorld->_33);
*/

    // Generate the half-vectors
    uLevels = pd3dtc->GetLevelCount();

    for (i = 0; i < uLevels; i++) {

        for (j = 0; j < 6; j++) {

            hr = pd3dtc->LockRect((D3DCUBEMAP_FACES)j, i, &d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeTexture8::LockRect"));
                return FALSE;
            }

            pdwPixel = (LPDWORD)d3dlr.pBits;

            if (uLevels > 1) {
                uLength = 0x1 << ((uLevels - 1) - i);
            }
            else {
                hr = pd3dtc->GetLevelDesc(0, &d3dsd);
                if (ResultFailed(hr, TEXT("IDirect3DCubeTexture8::GetLevelDesc"))) {
                    pd3dtc->UnlockRect((D3DCUBEMAP_FACES)j, i);
                    return FALSE;
                }
                uLength = d3dsd.Width;
            }

#ifdef UNDER_XBOX
            Swizzler swz(uLength, uLength, 1);
            swz.SetU(0);
            swz.SetV(0);
#endif

            for (v = 0; v < uLength; v++) {

                for (u = 0; u < uLength; u++) {

                    if (uLength > 1) {
                        fU = (float)u / (float)(uLength - 1);
                        fV = (float)v / (float)(uLength - 1);
                    }
                    else {
                        fU = 0.5f;
                        fV = 0.5f;
                    }

                    switch ((D3DCUBEMAP_FACES)j) {
                        case D3DCUBEMAP_FACE_POSITIVE_X:
                            D3DXVec3Normalize(&vHalf, &D3DXVECTOR3(1.0f, 1.0f - (fV * 2.0f), 1.0f - (fU * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_NEGATIVE_X:
                            D3DXVec3Normalize(&vHalf, &D3DXVECTOR3(-1.0f, 1.0f - (fV * 2.0f), -1.0f + (fU * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_POSITIVE_Y:
                            D3DXVec3Normalize(&vHalf, &D3DXVECTOR3(-1.0f + (fU * 2.0f), 1.0f, -1.0f + (fV * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_NEGATIVE_Y:
                            D3DXVec3Normalize(&vHalf, &D3DXVECTOR3(-1.0f + (fU * 2.0f), -1.0f, 1.0f - (fV * 2.0f)));
                            break;
                        case D3DCUBEMAP_FACE_POSITIVE_Z:
                            D3DXVec3Normalize(&vHalf, &D3DXVECTOR3(-1.0f + (fU * 2.0f), 1.0f - (fV * 2.0f), 1.0f));
                            break;
                        case D3DCUBEMAP_FACE_NEGATIVE_Z:
                            D3DXVec3Normalize(&vHalf, &D3DXVECTOR3(1.0f - (fU * 2.0f), 1.0f - (fV * 2.0f), -1.0f));
                            break;
                    }
                    D3DXVec3Normalize(&vHalf, &(vHalf + vLDir));
//                    vHalf = -vHalf;
#ifdef UNDER_XBOX
                    if (!bSwizzled) {
#endif
                        pdwPixel[u] = VectorToColor(&vHalf);
#ifdef UNDER_XBOX
                    }
                    else {
                        pdwPixel[swz.Get2D()] = VectorToColor(&vHalf);
                        swz.IncU();
                    }
#endif
                }

#ifdef UNDER_XBOX
                if (!bSwizzled) {
#endif
                    pdwPixel += (d3dlr.Pitch >> 2);
#ifdef UNDER_XBOX
                }
                else {
                    swz.IncV();
                }
#endif
            }

            hr = pd3dtc->UnlockRect((D3DCUBEMAP_FACES)j, i);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DCubeTexture8::UnlockRect"));
                return FALSE;
            }
        }
    }

    return TRUE;
}

//******************************************************************************
// Calculate non-normalized tangent and binormal vector terms for use in
// constructing an othonormal basis transform to rotate a vector from model
// space to tangent space.  This function assumes two vector arrays have been
// allocated, each with at least as many elements as three times the given 
// number of primitives.  These arrays will hold the calculated vector terms.
//******************************************************************************
BOOL CalculateTangentTerms(D3DXVECTOR3* pvTangent, D3DXVECTOR3* pvBinormal, 
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, BOOL bInterpolate)
{
    D3DXVECTOR3     vEdge0, vEdge1, vTemp;
    D3DXVECTOR3     vPlane[3];
    D3DXVECTOR3     *pvP[3];
    PTCOORD2        ptc2[3];
    WORD            w0, w1, w2;
    float           fTemp;
    UINT            uNumIndices;
    UINT            i, j, k;

    uNumIndices = 3 * dwNumPrimitives;

    memset(pvTangent, 0, uNumIndices * sizeof(D3DXVECTOR3));
    memset(pvBinormal, 0, uNumIndices * sizeof(D3DXVECTOR3));

    // Calculate the tangent and binormal vectors for each vertex.  If the vertex is
    // indexed by more than one triangle, add the vectors for each triangle together
    // to obtain an average of the vectors for all triangles formed by the vertex.
    for (i = 0; i < uNumIndices; i+=3) {

        w0 = pwIndices[i];
        w1 = pwIndices[i+1];
        w2 = pwIndices[i+2];

        pvP[0] =  (D3DXVECTOR3*)((LPBYTE)pvPosition + w0 * dwStridePosition);
        pvP[1] =  (D3DXVECTOR3*)((LPBYTE)pvPosition + w1 * dwStridePosition);
        pvP[2] =  (D3DXVECTOR3*)((LPBYTE)pvPosition + w2 * dwStridePosition);
        ptc2[0] = (PTCOORD2)((LPBYTE)ptcTCoord + w0 * dwStrideTCoord);
        ptc2[1] = (PTCOORD2)((LPBYTE)ptcTCoord + w1 * dwStrideTCoord);
        ptc2[2] = (PTCOORD2)((LPBYTE)ptcTCoord + w2 * dwStrideTCoord);

        vEdge0 = D3DXVECTOR3(pvP[1]->x - pvP[0]->x, ptc2[1]->u - ptc2[0]->u, ptc2[1]->v - ptc2[0]->v);
        vEdge1 = D3DXVECTOR3(pvP[2]->x - pvP[0]->x, ptc2[2]->u - ptc2[0]->u, ptc2[2]->v - ptc2[0]->v);
        D3DXVec3Cross(&vPlane[0], &vEdge0, &vEdge1);
        vEdge0.x = pvP[1]->y - pvP[0]->y;
        vEdge1.x = pvP[2]->y - pvP[0]->y;
        D3DXVec3Cross(&vPlane[1], &vEdge0, &vEdge1);
        vEdge0.x = pvP[1]->z - pvP[0]->z;
        vEdge1.x = pvP[2]->z - pvP[0]->z;
        D3DXVec3Cross(&vPlane[2], &vEdge0, &vEdge1);

        if (FABS(vPlane[0].x) < 0.000000001f || FABS(vPlane[1].x) < 0.000000001f || FABS(vPlane[2].x) < 0.000000001f) {
            return FALSE;
        }

        vTemp = D3DXVECTOR3(-vPlane[0].y / vPlane[0].x, -vPlane[1].y / vPlane[1].x, -vPlane[2].y / vPlane[1].x);
        pvTangent[w0] += vTemp;
        pvTangent[w1] += vTemp;
        pvTangent[w2] += vTemp;

        vTemp = D3DXVECTOR3(-vPlane[0].z / vPlane[0].x, -vPlane[1].z / vPlane[1].x, -vPlane[2].z / vPlane[1].x);
        pvBinormal[w0] += vTemp;
        pvBinormal[w1] += vTemp;
        pvBinormal[w2] += vTemp;
    }

    if (bInterpolate) {

        D3DXVECTOR3     *pv0, *pv1;
        LPWORD          pwMerge, pwProcessed;
        UINT            uNumMerges, uNumProcessed = 0;

        pwMerge = (LPWORD)MemAlloc32(uNumIndices * sizeof(WORD));
        if (!pwMerge) {
            return FALSE;
        }

        pwProcessed = (LPWORD)MemAlloc32(uNumIndices * sizeof(WORD));
        if (!pwProcessed) {
            MemFree32(pwMerge);
            return FALSE;
        }

        for (i = 0; i < uNumIndices; i++) {

            // Verify pwIndices[i] has to already been processed...if it has continue
            for (j = 0; j < uNumProcessed; j++) {
                if (pwIndices[i] == pwProcessed[j]) {
                    break;
                }
            }
            if (j < uNumProcessed) {
                continue;
            }

            pv0 = (D3DXVECTOR3*)((LPBYTE)pvPosition + pwIndices[i] * dwStridePosition);
            pwMerge[0] = pwIndices[i];
            pwProcessed[uNumProcessed++] = pwIndices[i];
            uNumMerges = 1;

            // Traverse the vertex list, identifying all vertices whose positions are
            // equal to the current vertex position
            for (j = i + 1; j < uNumIndices; j++) {

                pv1 = (D3DXVECTOR3*)((LPBYTE)pvPosition + pwIndices[j] * dwStridePosition);
                fTemp = D3DXVec3LengthSq(&(*pv0 - *pv1));
                if (fTemp < 0.0000001f) {

                    // See whether the matching vertex has already been added to the merge list
                    for (k = 0; k < uNumMerges; k++) {
                        if (pwIndices[j] == pwMerge[k]) {
                            break;
                        }
                    }
                    if (k == uNumMerges) {
                        pwMerge[uNumMerges++] = pwIndices[j];
                        pwProcessed[uNumProcessed++] = pwIndices[j];
                    }
                }
            }

            if (uNumMerges > 1 && uNumMerges < 5) {
                w0 = pwMerge[0];
                D3DXVec3Normalize(&pvTangent[w0], &pvTangent[w0]);
                D3DXVec3Normalize(&pvBinormal[w0], &pvBinormal[w0]);
                for (j = 1; j < uNumMerges; j++) {
                    w1 = pwMerge[j];
                    D3DXVec3Normalize(&pvTangent[w1], &pvTangent[w1]);
                    D3DXVec3Normalize(&pvBinormal[w1], &pvBinormal[w1]);
                    pvTangent[w0] += pvTangent[w1];
                    pvBinormal[w0] += pvBinormal[w1];
                }
                for (j = 1; j < uNumMerges; j++) {
                    pvTangent[pwMerge[j]] = pvTangent[w0];
                    pvBinormal[pwMerge[j]] = pvBinormal[w0];
                }
            }
        }

        MemFree32(pwProcessed);
        MemFree32(pwMerge);
    }

    return TRUE;
}

//******************************************************************************
BOOL WorldVectorToTangentSpace(PTCOORD3 ptcTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvVector, BOOL bInterpolate)
{
    return VectorToTangentSpace(FALSE, ptcTangent, dwStrideTangent, pvPosition,
                                dwStridePosition, ptcTCoord, dwStrideTCoord, 
                                pwIndices, dwNumPrimitives, d3dpt, pmWorld, 
                                pvVector, &D3DXVECTOR3(0.0f, 0.0f, 0.0f),
                                bInterpolate);
}

//******************************************************************************
BOOL HalfVectorToTangentSpace(PTCOORD3 ptcTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                                BOOL bInterpolate)
{
    return VectorToTangentSpace(FALSE, ptcTangent, dwStrideTangent, pvPosition,
                                dwStridePosition, ptcTCoord, dwStrideTCoord, 
                                pwIndices, dwNumPrimitives, d3dpt, pmWorld, 
                                pvLightDir, pvViewPos, bInterpolate);
}

//******************************************************************************
BOOL VectorToTangentSpace(BOOL bHalfVector, 
                                PTCOORD3 ptcTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                                BOOL bInterpolate)
{
    D3DXVECTOR3     vNormal, vLDir, vVPos, vEye, vTemp;
    D3DXVECTOR3     *pvTangent, *pvBinormal;
    D3DXVECTOR3     vPlane[3];
    PTCOORD3        ptc3;
    WORD            w0;
    D3DXMATRIX      mTransform;
    TCOORD3         tcZero;
    UINT            uNumIndices;
    UINT            i;
    BOOL            bWorldSpace;

#ifndef DEBUG
    // For now only indexed triangle lists are supported
    if (d3dpt != D3DPT_TRIANGLELIST || !pwIndices) {
        return FALSE;
    }
#endif // DEBUG

    tcZero.u = tcZero.v = tcZero.t = 0.0f;

    uNumIndices = 3 * dwNumPrimitives;

    D3DXMatrixIdentity(&mTransform);
    bWorldSpace = (BOOL)memcmp(&mTransform, pmWorld, sizeof(D3DMATRIX));

    // Allocate buffers to accumulate the averages of the tangent and
    // binormal terms for the basis transforms
    pvTangent = (D3DXVECTOR3*)MemAlloc32(2 * uNumIndices * sizeof(D3DXVECTOR3));
    if (!pvTangent) {
        return FALSE;
    }
    pvBinormal = pvTangent + uNumIndices;

    // Normalize the light direction
    D3DXVec3Normalize(&vTemp, (D3DXVECTOR3*)pvLightDir);

    // Transform the light vector from world space to model space (multiply the vector 
    // by the transposed rotational component of the world matrix) and negate it (for 
    // dotproduct calculations with the surface normals) 
    if (bWorldSpace) {
        vTemp = -vTemp;
        vLDir.x = vTemp.x * pmWorld->_11 + vTemp.y * pmWorld->_12 + vTemp.z * pmWorld->_13;
        vLDir.y = vTemp.x * pmWorld->_21 + vTemp.y * pmWorld->_22 + vTemp.z * pmWorld->_23;
        vLDir.z = vTemp.x * pmWorld->_31 + vTemp.y * pmWorld->_32 + vTemp.z * pmWorld->_33;
    }
    else {
        vLDir = -vTemp;
    }

    // First set all texture coordinates corresponding to the vectors in tangent 
    // space to zero
    for (i = 0; i < uNumIndices; i++) {
        memcpy((LPBYTE)ptcTangent + pwIndices[i] * dwStrideTangent, &tcZero, sizeof(TCOORD3));
    }

    if (!CalculateTangentTerms(pvTangent, pvBinormal, pvPosition, dwStridePosition, 
                                ptcTCoord, dwStrideTCoord, pwIndices, 
                                dwNumPrimitives, d3dpt, bInterpolate))
    {
        MemFree32(pvTangent);
        return FALSE;
    }

    for (i = 0; i < uNumIndices; i++) {

        w0 = pwIndices[i];
        ptc3 = (PTCOORD3)((LPBYTE)ptcTangent + w0 * dwStrideTangent);
        if (!memcmp(ptc3, &tcZero, sizeof(TCOORD3))) {

//            pvN = (D3DXVECTOR3*)((LPBYTE)pvNormal + w0 * dwStrideNormal);

            D3DXVec3Normalize(&pvTangent[w0], &pvTangent[w0]);
            D3DXVec3Normalize(&pvBinormal[w0], &pvBinormal[w0]);

            D3DXVec3Cross(&vNormal, &pvTangent[w0], &pvBinormal[w0]);

//            fDot = D3DXVec3Dot(&vNormal, pvN);
//            if (fDot < 0.0f) {
//                vNormal = -vNormal;
//            }

            if (bHalfVector) {

                vTemp = *(D3DXVECTOR3*)pvViewPos - *((D3DXVECTOR3*)((LPBYTE)pvPosition + w0 * dwStridePosition));
                if (bWorldSpace) {
                    vEye.x = vTemp.x * pmWorld->_11 + vTemp.y * pmWorld->_12 + vTemp.z * pmWorld->_13;
                    vEye.y = vTemp.x * pmWorld->_21 + vTemp.y * pmWorld->_22 + vTemp.z * pmWorld->_23;
                    vEye.z = vTemp.x * pmWorld->_31 + vTemp.y * pmWorld->_32 + vTemp.z * pmWorld->_33;
                    D3DXVec3Normalize(&vEye, &vEye);
                }
                else {
                    D3DXVec3Normalize(&vEye, &vTemp);
                }
                vTemp = vEye + vLDir;
D3DXVec3Normalize(&vTemp, &vTemp);
                ptc3->u = vTemp.x * pvTangent[w0].x + vTemp.y * pvTangent[w0].y + vTemp.z * pvTangent[w0].z;
                ptc3->v = vTemp.x * pvBinormal[w0].x + vTemp.y * pvBinormal[w0].y + vTemp.z * pvBinormal[w0].z;
                ptc3->t = vTemp.x * vNormal.x + vTemp.y * vNormal.y + vTemp.z * vNormal.z;
            }
            else {
                ptc3->u = vLDir.x * pvTangent[w0].x + vLDir.y * pvTangent[w0].y + vLDir.z * pvTangent[w0].z;
                ptc3->v = vLDir.x * pvBinormal[w0].x + vLDir.y * pvBinormal[w0].y + vLDir.z * pvBinormal[w0].z;
                ptc3->t = vLDir.x * vNormal.x + vLDir.y * vNormal.y + vLDir.z * vNormal.z;
            }
        }
    }

    MemFree32(pvTangent);

    return TRUE;
}

//******************************************************************************
BOOL SetTangentTransforms(PMATRIX3X3 pmTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld,
                                BOOL bInterpolate)
{
    D3DXVECTOR3     vNormal, vTemp;
    D3DXVECTOR3     *pvTangent, *pvBinormal;
    DWORD           dwNumIndices;
    WORD            w0;
    PMATRIX3X3      pmT;
//    float           fDot;
    MATRIX3X3       mZero;
	UINT            i;

    dwNumIndices = dwNumPrimitives * 3;

    memset(&mZero, 0, sizeof(MATRIX3X3));

    for (i = 0; i < dwNumIndices; i++) {
        memcpy((LPBYTE)pmTangent + pwIndices[i] * dwStrideTangent, &mZero, sizeof(MATRIX3X3));
    }

    pvTangent = (D3DXVECTOR3*)MemAlloc32(2 * dwNumIndices * sizeof(D3DXVECTOR3));
    if (!pvTangent) {
        return FALSE;
    }
    pvBinormal = pvTangent + dwNumIndices;

    if (!CalculateTangentTerms(pvTangent, pvBinormal, pvPosition, dwStridePosition, ptcTCoord, dwStrideTCoord, pwIndices, dwNumPrimitives, d3dpt, bInterpolate)) {
        MemFree32(pvTangent);
        return FALSE;
    }

    for (i = 0; i < dwNumIndices; i++) {

        w0 = pwIndices[i];
        pmT = (PMATRIX3X3)((LPBYTE)pmTangent + w0 * dwStrideTangent);
        if (!memcmp(pmT, &mZero, sizeof(MATRIX3X3))) {

//            pvN = (D3DXVECTOR3*)((LPBYTE)pvNormal + w0 * dwStrideNormal);

            D3DXVec3Normalize(&pvTangent[w0], &pvTangent[w0]);
            D3DXVec3Normalize(&pvBinormal[w0], &pvBinormal[w0]);

            D3DXVec3Cross(&vNormal, &pvTangent[w0], &pvBinormal[w0]);

//            fDot = D3DXVec3Dot(&vNormal, pvN);
//            if (fDot < 0.0f) {
//                // Either negate vNormal or pvBinormal...
//                vNormal = -vNormal;
//            }

            pmT->_11 = -pvTangent[w0].x;
            pmT->_21 = -pvTangent[w0].y;
            pmT->_31 = -pvTangent[w0].z;

            pmT->_12 = -pvBinormal[w0].x;
            pmT->_22 = -pvBinormal[w0].y;
            pmT->_32 = -pvBinormal[w0].z;

            // Negate the normal vector so the light or half-vector
            // transformed by the basis does not itself have to
            // be negated
//            pmT->_13 = -vNormal.x;
//            pmT->_23 = -vNormal.y;
//            pmT->_33 = -vNormal.z;
pmT->_13 = vNormal.x;
pmT->_23 = vNormal.y;
pmT->_33 = vNormal.z;
        }
    }

    MemFree32(pvTangent);

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     CreateDiffuseMap
//
// Description:
//
//     Create a diffuse light map for use in diffuse bump map operations.
//
// Arguments:
//
//     CDevice8* pDevice               - Pointer to the device object
//
//     UINT uWidth                     - Width of the map
//
//     UINT uHeight                    - Height of the map
//
//     D3DCOLOR c                      - Color for the diffuse light
//
//     D3DFORMAT fmt                   - Format of the texture
//
//     BOOL bMipmap                    - Indicates whether or not to
//                                       use a mip map
//
//     PALETTECOLO* ppcPalette        - Pointer to the first entry of
//                                       the palette for a palettized
//                                       texture
//
//     D3DPOOL pool                    - Memory pool in which to create the map
//
// Return Value:
//
//     A pointer to the created diffuse map on success, NULL on failure.
//
//******************************************************************************
CTexture8* CreateDiffuseMap(CDevice8* pDevice, UINT uWidth, UINT uHeight, 
                                    D3DCOLOR c, D3DFORMAT fmt, BOOL bMipmap, 
                                    PALETTECOLOR* ppcPalette, D3DPOOL pool)
{
    CTexture8*          pd3dt;
    D3DSURFACE_DESC     d3dsd;
    D3DLOCKED_RECT      d3dlr;
    D3DFORMAT           fmtt;
    DWORD               dwDepth;
    ARGBPIXELDESC       pixd;
    D3DXVECTOR3         vNormal, vLight;
    float               fIntensity, fx, fy, fSin, fMag, fMP, fRed, fGreen, fBlue, fU, fV;
    UINT                uLevels;
    UINT                i, j, k;
    HRESULT             hr;
#ifdef UNDER_XBOX
    BOOL                bSwizzled = XGIsSwizzledFormat(fmt);
#endif

    pd3dt = (CTexture8*)CreateTexture(pDevice, uWidth, uHeight, fmt, bMipmap ? TTYPE_MIPMAP : TTYPE_TEXTURE, pool);
    if (!pd3dt) {
        return NULL;
    }

    hr = ((CTexture8*)pd3dt)->GetLevelDesc(0, &d3dsd);
    if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
        ReleaseTexture(pd3dt);
        return NULL;
    }
    fmtt = d3dsd.Format;

    dwDepth = FormatToBitDepth(fmtt);
    if (!(dwDepth == 16 || dwDepth == 32)) {

        CTexture8*          pd3dtMap;
        D3DFORMAT           fmtMap[] = {
                                D3DFMT_X8R8G8B8,
                                D3DFMT_A8R8G8B8,
                                D3DFMT_R5G6B5,
                                D3DFMT_A1R5G5B5,
                                D3DFMT_X1R5G5B5,
                                D3DFMT_A4R4G4B4
                            };

        for (i = 0; i < 6; i++) {
#ifndef UNDER_XBOX
            pd3dtMap = (CTexture8*)CreateDiffuseMap(pDevice, uWidth, uHeight, 
                        c, fmtMap[i], bMipmap, NULL, D3DPOOL_SYSTEMMEM);
#else
            pd3dtMap = (CTexture8*)CreateDiffuseMap(pDevice, uWidth, uHeight, 
                        c, fmtMap[i], bMipmap, NULL, POOL_DEFAULT);
#endif // UNDER_XBOX
            if (pd3dtMap) {
                hr = CopyTexture(pd3dt, ppcPalette, pd3dtMap, NULL, 
                                    D3DX_FILTER_LINEAR);
                ReleaseTexture(pd3dtMap);
                if (!ResultFailed(hr, TEXT("D3DXLoadSurfaceFromSurface"))) {
                    return pd3dt;
                }
            }
        }

        ReleaseTexture(pd3dt);
        return NULL;
    }

    vLight = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
    fRed = (float)RGBA_GETRED(c);
    fGreen = (float)RGBA_GETGREEN(c);
    fBlue = (float)RGBA_GETBLUE(c);

    uLevels = pd3dt->GetLevelCount();

    for (i = 0; i < uLevels; i++) {

        hr = pd3dt->GetLevelDesc(i, &d3dsd);
        if (ResultFailed(hr, TEXT("IDirect3DTexture8::GetLevelDesc"))) {
            ReleaseTexture(pd3dt);
            return NULL;
        }

        // Get the pixel format of the texture
        GetARGBPixelDesc(d3dsd.Format, &pixd);

        hr = pd3dt->LockRect(i, &d3dlr, NULL, 0);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"));
            ReleaseTexture(pd3dt);
            return NULL;
        }

#ifdef UNDER_XBOX
        Swizzler swz(d3dsd.Width, d3dsd.Height, 1);
        swz.SetU(0);
        swz.SetV(0);
#endif

        switch (d3dsd.Format) {

#ifdef UNDER_XBOX
            case D3DFMT_LIN_X8R8G8B8:
            case D3DFMT_LIN_A8R8G8B8:
#endif
            case D3DFMT_X8R8G8B8:
            case D3DFMT_A8R8G8B8: {

                LPDWORD pdwPixel = (LPDWORD)d3dlr.pBits;

                for (j = 0, fV = 0.0f; j < d3dsd.Height; j++, fV += (1.0f / (float)(d3dsd.Height-1))) {

                    for (k = 0, fU = 0.0f; k < d3dsd.Width; k++, fU += (1.0f / (float)(d3dsd.Width-1))) {

                        fx = (fU - 0.5f) * 2.0f;
                        fy = (fV - 0.5f) * 2.0f;
                        fMag = (float)sqrt(fx * fx + fy * fy);
                        if (fMag > 1.0f) {
                            vNormal = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
                        }
                        else {
                            fMP = fMag * M_PI;
                            fSin = (float)sin(fMP);
                            vNormal.y = (float)cos(fMP);
                            fx /= fMag; // Normalize
                            fy /= fMag;
                            vNormal.x = fx * fSin;
                            vNormal.z = fy * fSin;
                        }

                        fIntensity = D3DXVec3Dot(&vLight, &vNormal);
                        if (fIntensity < 0.0f) {
                            fIntensity = 0.0f;
                        }
#ifdef UNDER_XBOX
                        if (!bSwizzled) {
#endif
                            pdwPixel[k] = 0xFF                        << pixd.dwAShift |
                                          (BYTE)(fIntensity * fRed)   << pixd.dwRShift |
                                          (BYTE)(fIntensity * fGreen) << pixd.dwGShift |
                                          (BYTE)(fIntensity * fBlue)  << pixd.dwBShift;
#ifdef UNDER_XBOX
                        }
                        else {
                            pdwPixel[swz.Get2D()] = 0xFF              << pixd.dwAShift |
                                          (BYTE)(fIntensity * fRed)   << pixd.dwRShift |
                                          (BYTE)(fIntensity * fGreen) << pixd.dwGShift |
                                          (BYTE)(fIntensity * fBlue)  << pixd.dwBShift;
                            swz.IncU();
                        }
#endif
                    }

#ifdef UNDER_XBOX
                    if (!bSwizzled) {
#endif
                        pdwPixel += (d3dlr.Pitch / pixd.uStride);
#ifdef UNDER_XBOX
                    }
                    else {
                        swz.IncV();
                    }
#endif
                }

                break;
            }

#ifdef UNDER_XBOX
            case D3DFMT_LIN_R5G6B5:
            case D3DFMT_LIN_X1R5G5B5:
            case D3DFMT_LIN_A1R5G5B5:
            case D3DFMT_LIN_A4R4G4B4:
#endif
            case D3DFMT_R5G6B5:
            case D3DFMT_X1R5G5B5:
            case D3DFMT_A1R5G5B5:
            case D3DFMT_A4R4G4B4: {

                LPWORD pwPixel = (LPWORD)d3dlr.pBits;

                fRed = fRed / 255.0f * (float)(pixd.dwRMask >> pixd.dwRShift);
                fGreen = fGreen / 255.0f * (float)(pixd.dwGMask >> pixd.dwGShift);
                fBlue = fBlue / 255.0f * (float)(pixd.dwBMask >> pixd.dwBShift);

                for (j = 0, fV = 0.0f; j < d3dsd.Height; j++, fV += (1.0f / (float)(d3dsd.Height-1))) {

                    for (k = 0, fU = 0.0f; k < d3dsd.Width; k++, fU += (1.0f / (float)(d3dsd.Width-1))) {

                        fx = (fU - 0.5f) * 2.0f;
                        fy = (fV - 0.5f) * 2.0f;
                        fMag = (float)sqrt(fx * fx + fy * fy);
                        if (fMag > 1.0f) {
                            vNormal = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
                        }
                        else {
                            fMP = fMag * M_PI;
                            fSin = (float)sin(fMP);
                            vNormal.y = (float)cos(fMP);
                            fx /= fMag; // Normalize
                            fy /= fMag;
                            vNormal.x = fx * fSin;
                            vNormal.z = fy * fSin;
                        }

                        fIntensity = D3DXVec3Dot(&vLight, &vNormal);
                        if (fIntensity < 0.0f) {
                            fIntensity = 0.0f;
                        }

#ifdef UNDER_XBOX
                        if (!bSwizzled) {
#endif
                            pwPixel[k] = (WORD)(pixd.dwAMask |
                                          ((UINT)(fIntensity * fRed)   << pixd.dwRShift) & pixd.dwRMask |
                                          ((UINT)(fIntensity * fGreen) << pixd.dwGShift) & pixd.dwGMask |
                                          ((UINT)(fIntensity * fBlue)  << pixd.dwBShift) & pixd.dwBMask);
#ifdef UNDER_XBOX
                        }
                        else {
                            pwPixel[swz.Get2D()] = (WORD)(pixd.dwAMask |
                                          ((UINT)(fIntensity * fRed)   << pixd.dwRShift) & pixd.dwRMask |
                                          ((UINT)(fIntensity * fGreen) << pixd.dwGShift) & pixd.dwGMask |
                                          ((UINT)(fIntensity * fBlue)  << pixd.dwBShift) & pixd.dwBMask);
                            swz.IncU();
                        }
#endif
                    }

#ifdef UNDER_XBOX
                    if (!bSwizzled) {
#endif
                        pwPixel += (d3dlr.Pitch / pixd.uStride);
#ifdef UNDER_XBOX
                    }
                    else {
                        swz.IncV();
                    }
#endif
                }

                break;
            }
        }

        hr = pd3dt->UnlockRect(i);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DTexture8::UnlockRect"));
            ReleaseTexture(pd3dt);
            return NULL;
        }
    }

    return pd3dt;
}

//******************************************************************************
//
// Function:
//
//     SetDiffuseMapCoords
//
// Description:
//
//     Calculate the texture coordinates to index into a diffuse light map
//     based on the given world transform, light direction, normal values of the
//     vertices, and rotation angle.
//
// Arguments:
//
//     D3DVECTOR* pvNormal             - Pointer to the first normal value in
//                                       the vertex list
//
//     UINT uNStride                   - Stride between normals in the vertex
//                                       list
//
//     PTCOORD2 ptcTCoord              - Pointer to the first light map texture 
//                                       coordinate set in the vertex list
//
//     UINT uTStride                   - Stride between coordinate sets in the
//                                       vertex list
//
//     UINT uVertices                  - Number of vertices in the vertex list
//
//     D3DMATRIX* pmWorld              - World transform
//
//     D3DVECTOR* pvLightDir           - Direction vector of the light
//
//     float fTheta                    - Rotation angle of the light relative
//                                       to the viewer
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************

//******************************************************************************
BOOL SetDiffuseMapCoords(PTCOORD2 ptcLightMap, DWORD dwStrideLMap,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcOffsetMap, DWORD dwStrideOMap,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, BOOL bInterpolate)
{
    return SetLightMapCoords(FALSE, ptcLightMap, dwStrideLMap, pvPosition,
                                dwStridePosition, ptcOffsetMap, dwStrideOMap,
                                pwIndices, dwNumPrimitives, d3dpt, pmWorld,
                                pvLightDir, &D3DXVECTOR3(0.0f, 0.0f, 0.0f),
                                bInterpolate);
}

//******************************************************************************
BOOL SetSpecularMapCoords(PTCOORD2 ptcLightMap, DWORD dwStrideLMap,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcOffsetMap, DWORD dwStrideOMap,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                                BOOL bInterpolate)
{
    return SetLightMapCoords(TRUE, ptcLightMap, dwStrideLMap, pvPosition,
                                dwStridePosition, ptcOffsetMap, dwStrideOMap,
                                pwIndices, dwNumPrimitives, d3dpt, pmWorld,
                                pvLightDir, pvViewPos, bInterpolate);
}

//******************************************************************************
BOOL SetLightMapCoords(BOOL bSpecular, PTCOORD2 ptcLightMap, DWORD dwStrideLMap,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcOffsetMap, DWORD dwStrideOMap,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                                BOOL bInterpolate)
{
    D3DXVECTOR3     vLDir, vVPos, vEye, vTemp;
    D3DXVECTOR3     *pvTangent, *pvBinormal;
    D3DXVECTOR3     vNormal, vLTangent;
    D3DXVECTOR3     vPlane[3];
    PTCOORD2        ptcLight;
    WORD            w0;
    D3DXMATRIX      mTransform;
    TCOORD2         tcSet;
    float           fNU, fNV, fMagUV, fMagXY;
    UINT            uNumIndices;
    UINT            i;
    BOOL            bWorldSpace;

#ifndef DEBUG
    // For now only indexed triangle lists are supported
    if (d3dpt != D3DPT_TRIANGLELIST || !pwIndices) {
        return FALSE;
    }
#endif // DEBUG

    tcSet.u = tcSet.v = -1.0f;

    uNumIndices = 3 * dwNumPrimitives;

    D3DXMatrixIdentity(&mTransform);
    bWorldSpace = (BOOL)memcmp(&mTransform, pmWorld, sizeof(D3DMATRIX));

    // Transform the light vector from world space to model space (multiply the vector 
    // by the transposed rotational component of the world matrix)
    if (bWorldSpace) {
        D3DXVec3Normalize(&vTemp, (D3DXVECTOR3*)pvLightDir);
        vLDir.x = vTemp.x * pmWorld->_11 + vTemp.y * pmWorld->_12 + vTemp.z * pmWorld->_13;
        vLDir.y = vTemp.x * pmWorld->_21 + vTemp.y * pmWorld->_22 + vTemp.z * pmWorld->_23;
        vLDir.z = vTemp.x * pmWorld->_31 + vTemp.y * pmWorld->_32 + vTemp.z * pmWorld->_33;
    }
    else {
        D3DXVec3Normalize(&vLDir, (D3DXVECTOR3*)pvLightDir);
    }

    // First set all texture coordinates corresponding to the vectors in tangent 
    // space to a degenerate direction
    for (i = 0; i < uNumIndices; i++) {
        memcpy((LPBYTE)ptcLightMap + pwIndices[i] * dwStrideLMap, &tcSet, sizeof(TCOORD2));
    }

    pvTangent = (D3DXVECTOR3*)MemAlloc32(2 * uNumIndices * sizeof(D3DXVECTOR3));
    if (!pvTangent) {
        return FALSE;
    }
    pvBinormal = pvTangent + uNumIndices;

    if (!CalculateTangentTerms(pvTangent, pvBinormal, pvPosition, dwStridePosition, ptcOffsetMap, dwStrideOMap, pwIndices, dwNumPrimitives, d3dpt, bInterpolate)) {
        MemFree32(pvTangent);
        return FALSE;
    }

    for (i = 0; i < uNumIndices; i++) {

        w0 = pwIndices[i];
        ptcLight = (PTCOORD2)((LPBYTE)ptcLightMap + w0 * dwStrideLMap);
        if (!memcmp(ptcLight, &tcSet, sizeof(TCOORD2))) {

//            pvN = (D3DXVECTOR3*)((LPBYTE)pvNormal + w0 * dwStrideNormal);

            D3DXVec3Normalize(&pvTangent[w0], &pvTangent[w0]);
            D3DXVec3Normalize(&pvBinormal[w0], &pvBinormal[w0]);

            D3DXVec3Cross(&vNormal, &pvTangent[w0], &pvBinormal[w0]);

//            fDot = D3DXVec3Dot(&vNormal, pvN);
//            if (fDot < 0.0f) {
//                vNormal = -vNormal;
//            }

            if (bSpecular) {

                vTemp = *(D3DXVECTOR3*)pvViewPos - *((D3DXVECTOR3*)((LPBYTE)pvPosition + w0 * dwStridePosition));
                if (bWorldSpace) {
                    vEye.x = vTemp.x * pmWorld->_11 + vTemp.y * pmWorld->_12 + vTemp.z * pmWorld->_13;
                    vEye.y = vTemp.x * pmWorld->_21 + vTemp.y * pmWorld->_22 + vTemp.z * pmWorld->_23;
                    vEye.z = vTemp.x * pmWorld->_31 + vTemp.y * pmWorld->_32 + vTemp.z * pmWorld->_33;
                    D3DXVec3Normalize(&vEye, &vEye);
                }
                else {
                    D3DXVec3Normalize(&vEye, &vTemp);
                }
                vTemp = vEye + vLDir;
//D3DXVec3Normalize(&vTemp, &vTemp);
                vLTangent.x = -(vTemp.x * pvTangent[w0].x + vTemp.y * pvTangent[w0].y + vTemp.z * pvTangent[w0].z);
                vLTangent.y = -(vTemp.x * pvBinormal[w0].x + vTemp.y * pvBinormal[w0].y + vTemp.z * pvBinormal[w0].z);
                vLTangent.z = (vTemp.x * vNormal.x + vTemp.y * vNormal.y + vTemp.z * vNormal.z);

                // Find the tangent vector offsets in the light map
                fMagUV = (float)acos(vLTangent.z) / M_PI;

                if (fMagUV < 0.0001f) {
                    fNU = 0.5f;
                    fNV = 0.5f;
                }
                else if (fMagUV > 0.9999) {
                    fNU = 0.0f;
                    fNV = 0.5f;
                }
                else {
                    fMagXY = (float)sqrt(vLTangent.x * vLTangent.x + vLTangent.y * vLTangent.y);
                    fNU = vLTangent.x / fMagXY;
                    fNV = vLTangent.y / fMagXY;
   
                    fNU *= fMagUV;
                    fNV *= fMagUV;

                    fNU = 0.5f + (fNU / 2.0f);
                    fNV = 0.5f - (fNV / 2.0f);
                }

                ptcLight->u = fNU;
                ptcLight->v = fNV;
            }
            else {
                vLTangent.x = -(vLDir.x * pvTangent[w0].x + vLDir.y * pvTangent[w0].y + vLDir.z * pvTangent[w0].z);
                vLTangent.y = -(vLDir.x * pvBinormal[w0].x + vLDir.y * pvBinormal[w0].y + vLDir.z * pvBinormal[w0].z);
                vLTangent.z = (vLDir.x * vNormal.x + vLDir.y * vNormal.y + vLDir.z * vNormal.z);

                // Find the tangent vector offsets in the light map
                fMagUV = (float)acos(vLTangent.z) / M_PI;

                if (fMagUV < 0.0001f) {
                    fNU = 0.5f;
                    fNV = 0.5f;
                }
                else if (fMagUV > 0.9999) {
                    fNU = 0.0f;
                    fNV = 0.5f;
                }
                else {
                    fMagXY = (float)sqrt(vLTangent.x * vLTangent.x + vLTangent.y * vLTangent.y);
                    fNU = vLTangent.x / fMagXY;
                    fNV = vLTangent.y / fMagXY;
           
                    fNU *= fMagUV;
                    fNV *= fMagUV;

                    fNU = 0.5f + (fNU / 2.0f);
                    fNV = 0.5f - (fNV / 2.0f);
                }

                ptcLight->u = fNU;
                ptcLight->v = fNV;
            }
        }
    }

    MemFree32(pvTangent);

    return TRUE;
}

//******************************************************************************
void ConvertPALETTEENTRYToD3DCOLOR(LPVOID pvPalette, UINT uNumEntries) {

    PALETTEENTRY* ppe = (PALETTEENTRY*)pvPalette;
    D3DCOLOR c;
    UINT i;

    if (!ppe) {
        return;
    }

    for (i = 0; i < uNumEntries; i++) {
        c = D3DCOLOR_ARGB(ppe[i].peFlags, ppe[i].peRed, ppe[i].peGreen, ppe[i].peBlue);
        ppe[i] = *(PALETTEENTRY*)&c;
    }
}

//******************************************************************************
void ConvertD3DCOLORToPALETTEENTRY(LPVOID pvPalette, UINT uNumEntries) {

    D3DCOLOR* pc = (D3DCOLOR*)pvPalette;
    PALETTEENTRY e;
    UINT i;

    if (!pc) {
        return;
    }

    for (i = 0; i < uNumEntries; i++) {
        e.peRed = (BYTE)RGBA_GETRED(pc[i]);
        e.peGreen = (BYTE)RGBA_GETGREEN(pc[i]);
        e.peBlue = (BYTE)RGBA_GETBLUE(pc[i]);
        e.peFlags = (BYTE)RGBA_GETALPHA(pc[i]);
        pc[i] = *(D3DCOLOR*)&e;
    }
}

#ifdef UNDER_XBOX

//******************************************************************************
BOOL GetBitmapInfoHeader(LPCTSTR szTexture, BITMAPINFOHEADER* pbmih) {

    HANDLE                  hFile;
    PBYTE                   pdata;
    DWORD                   dwSize, dwRead;
	LPWORD				    pwDst;
    DWORD                   dwPitchDst;
    UNALIGNED BITMAPINFO*   pbmi;
    UINT                    i, j;
    HRESULT                 hr;
    char                    aszTexture[MAX_PATH];

    if (LoadResourceData(szTexture, (LPVOID*)&pdata, &dwSize)) {
        pbmi = (BITMAPINFO*)(pdata + sizeof(BITMAPFILEHEADER));
        memcpy(pbmih, &pbmi->bmiHeader, sizeof(BITMAPINFOHEADER));
        UnloadResourceData(szTexture);
        return TRUE;
    }

    wcstombs(aszTexture, szTexture, MAX_PATH);

    // Open the bitmap file
    hFile = CreateFile(aszTexture, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (hFile == INVALID_HANDLE_VALUE) {
        DebugString(TEXT("File %s not found"), szTexture);
        return FALSE;
    }

    // Get the size of the file
    dwSize = GetFileSize(hFile, NULL);
    if (dwSize == 0xFFFFFFFF) {
        CloseHandle(hFile);
        return FALSE;
    }

    // Allocate a buffer for the file data
    pdata = new BYTE[dwSize];
    if (!pdata) {
        CloseHandle(hFile);
        return FALSE;
    }                

    // Read the file into the buffer
    if (!ReadFile(hFile, pdata, dwSize, &dwRead, NULL)
        || dwSize != dwRead)
    {
        delete [] pdata;
        CloseHandle(hFile);
        return FALSE;
    }

    // Close the file
    CloseHandle(hFile);

    // Verify the given file is a bitmap file
    if (((UNALIGNED BITMAPFILEHEADER*)pdata)->bfType != 0x4D42) { // 0x4D42 == "BM"
        DebugString(TEXT("%s is not a valid bitmap file"), szTexture);
        delete [] pdata;
        return FALSE;
    }

    pbmi = (BITMAPINFO*)(pdata + sizeof(BITMAPFILEHEADER));

    memcpy(pbmih, &pbmi->bmiHeader, sizeof(BITMAPINFOHEADER));

    // Delete the bitmap file buffer
    delete [] pdata;

    return TRUE;
}

#endif // UNDER_XBOX

//******************************************************************************
void VerifyTextureListIntegrity() {

    PTEXTUREDESC ptexd;
    UINT uWidth;

    for (ptexd = g_ptexdList; ptexd; ptexd = ptexd->ptexdNext) {
        uWidth = ptexd->uWidth;  // Verify the node
        ptexd->pd3dtb->AddRef(); // Verify the texture
        ptexd->pd3dtb->Release();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\texture.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    texture.h

Author:

    Matt Bronder

Description:

    Direct3D texture routines.

*******************************************************************************/

#ifndef __TEXTURE_H__
#define __TEXTURE_H__

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define COLORKEY_NONE       0xFF000000
#define COLORKEY_PIXEL1     0x01000000

#define TTYPE_TEXTURE       0x00000000
#define TTYPE_CUBEMAP       0x00000001
#define TTYPE_VOLUME        0x00000002
#define TTYPE_BUMPMAP       0x00000004
#define TTYPE_NORMALMAP     0x00000008
#define TTYPE_MIPMAP        0x00000100
#define TTYPE_TARGET        0x00000200
#define TTYPE_DEPTH         0x00000400
#define TTYPE_RESOURCEMASK  0x000000FF
#define TTYPE_MIPLEVELMASK  0x0F000000

#define TTYPE_MIPLEVELS(x)  (TTYPE_MIPMAP | ((x) << 24))

#ifndef UNDER_XBOX
#define PALETTECOLOR        PALETTEENTRY
#else
#define PALETTECOLOR        D3DCOLOR
#endif // UNDER_XBOX

//******************************************************************************
// Data types
//******************************************************************************

typedef DWORD               TEXTURETYPE;

//******************************************************************************
// Structures
//******************************************************************************

//******************************************************************************
typedef struct _TEXTUREDESC {
    CBaseTexture8*          pd3dtb;
    TCHAR                   szName[MAX_PATH];
    WORD                    wResourceID;
    UINT                    uWidth;
    UINT                    uHeight;
    UINT                    uDepth;
    D3DFORMAT               fmt;
    TEXTURETYPE             tt;
    D3DPOOL                 pool;
    float                   fAlpha;
    D3DCOLOR                cColorKey;
    struct _TEXTUREDESC*    ptexdNext;
} TEXTUREDESC, *PTEXTUREDESC;

//******************************************************************************
typedef struct _ARGBPIXELDESC {
    DWORD   dwAMask;
    DWORD   dwRMask;
    DWORD   dwGMask;
    DWORD   dwBMask;
    DWORD   dwAShift;
    DWORD   dwRShift;
    DWORD   dwGShift;
    DWORD   dwBShift;
    UINT    uStride;
} ARGBPIXELDESC, *PARGBPIXELDESC;

#ifdef UNDER_XBOX

typedef struct tagRGBQUAD {
        BYTE    rgbBlue;
        BYTE    rgbGreen;
        BYTE    rgbRed;
        BYTE    rgbReserved;
} RGBQUAD;
typedef RGBQUAD FAR* LPRGBQUAD;

typedef struct tagBITMAPINFOHEADER{
        DWORD      biSize;
        LONG       biWidth;
        LONG       biHeight;
        WORD       biPlanes;
        WORD       biBitCount;
        DWORD      biCompression;
        DWORD      biSizeImage;
        LONG       biXPelsPerMeter;
        LONG       biYPelsPerMeter;
        DWORD      biClrUsed;
        DWORD      biClrImportant;
} BITMAPINFOHEADER, FAR *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;

typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER    bmiHeader;
    RGBQUAD             bmiColors[1];
} BITMAPINFO, FAR *LPBITMAPINFO, *PBITMAPINFO;

#include <pshpack2.h>
typedef struct tagBITMAPFILEHEADER {
        WORD    bfType;
        DWORD   bfSize;
        WORD    bfReserved1;
        WORD    bfReserved2;
        DWORD   bfOffBits;
} BITMAPFILEHEADER, FAR *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;
#include <poppack.h>

#endif // UNDER_XBOX

//******************************************************************************
// Function prototypes
//******************************************************************************

CBaseTexture8*  CreateTexture(CDevice8* pDevice, UINT uWidth, UINT uHeight,
                                D3DFORMAT fmt = D3DFMT_R5G6B5, 
                                TEXTURETYPE tt = TTYPE_TEXTURE,
                                D3DPOOL pool = POOL_DEFAULT);
CBaseTexture8*  CreateTexture(CDevice8* pDevice, UINT uWidth, UINT uHeight, 
                                UINT uDepth, D3DFORMAT fmt = D3DFMT_R5G6B5, 
                                TEXTURETYPE tt = TTYPE_TEXTURE,
                                D3DPOOL pool = POOL_DEFAULT);
CBaseTexture8*  CreateTexture(CDevice8* pDevice, LPCTSTR szName, 
                                D3DFORMAT fmt = D3DFMT_R5G6B5,
                                TEXTURETYPE tt = TTYPE_TEXTURE,
                                PALETTECOLOR* ppcPalette = NULL,
                                float fAlpha = 1.0f,
                                D3DCOLOR cColorKey = COLORKEY_NONE,
                                D3DPOOL pool = POOL_DEFAULT,
                                UINT uWidth = D3DX_DEFAULT, 
                                UINT uHeight = D3DX_DEFAULT);
void            ReleaseTexture(CBaseTexture8* pd3dt);
void            ReleaseTextures();
void            RemoveTexture(CBaseTexture8* pd3dt);

BOOL            FilterTexture(CBaseTexture8* pd3dt, PALETTECOLOR* ppcPalette = NULL, 
                                UINT uSrcLevel = D3DX_DEFAULT, 
                                DWORD dwFilter = D3DX_FILTER_BOX);

BOOL            SyncTexture(CBaseTexture8* pd3dtb);
BOOL            SyncSurface(CSurface8* pd3ds);
BOOL            SyncVolume(CVolume8* pd3dv);

BOOL            SetTranslucency(CBaseTexture8* pd3dt, 
                                PALETTECOLOR* ppcPalette, float fAlpha, 
                                D3DCOLOR cColorKey = COLORKEY_NONE);

DWORD           ColorToPixel(D3DFORMAT fmt, PALETTECOLOR* ppcPalette, 
                                D3DCOLOR c);

HRESULT         CopyTexture(CBaseTexture8* pd3dtDst,
                                PALETTECOLOR* ppcPalDst,
                                CBaseTexture8* pd3dtSrc,
                                PALETTECOLOR* ppcPalSrc, DWORD dwFilter);

CCubeTexture8*  CreateNormalMap(CDevice8* pDevice, UINT uLength = 256, 
                                float fBumpDelta = 0.0f,
                                D3DFORMAT fmt = D3DFMT_A8R8G8B8, 
                                BOOL bMipmap = TRUE, 
                                D3DPOOL pool = POOL_DEFAULT);

CCubeTexture8*  CreateHalfVectorMap(CDevice8* pDevice, 
                                D3DVECTOR* pvLightDir, 
                                UINT uLength = 32,
                                D3DFORMAT fmt = D3DFMT_A8R8G8B8,
                                BOOL bMipmap = TRUE,
                                D3DPOOL pool = POOL_DEFAULT);

BOOL            UpdateHalfVectorMap(CCubeTexture8* pd3dtc,
                                D3DVECTOR* pvLightDir);

BOOL            WorldVectorToTangentSpace(PTCOORD3 ptcTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvVector, BOOL bInterpolate);

BOOL            HalfVectorToTangentSpace(PTCOORD3 ptcTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                                BOOL bInterpolate);

BOOL            SetTangentTransforms(PMATRIX3X3 pmTangent, DWORD dwStrideTangent,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcTCoord, DWORD dwStrideTCoord,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld,
                                BOOL bInterpolate);

CTexture8*      CreateDiffuseMap(CDevice8* pDevice, UINT uWidth, UINT uHeight, 
                                D3DCOLOR c, D3DFORMAT fmt, BOOL bMipmap = FALSE,
                                PALETTECOLOR* ppcPalette = NULL,
                                D3DPOOL pool = POOL_DEFAULT);

// ##TODO: CreateSpecularMap which takes a power argument and creates a corresponding map

BOOL            SetDiffuseMapCoords(PTCOORD2 ptcLightMap, DWORD dwStrideLMap,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcOffsetMap, DWORD dwStrideOMap,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, BOOL bInterpolate);
BOOL            SetSpecularMapCoords(PTCOORD2 ptcLightMap, DWORD dwStrideLMap,
                                D3DVECTOR* pvPosition, DWORD dwStridePosition,
                                PTCOORD2 ptcOffsetMap, DWORD dwStrideOMap,
                                LPWORD pwIndices, DWORD dwNumPrimitives,
                                D3DPRIMITIVETYPE d3dpt, D3DMATRIX* pmWorld, 
                                D3DVECTOR* pvLightDir, D3DVECTOR* pvViewPos,
                                BOOL bInterpolate);

PTEXTUREDESC    GetTextureDesc(CBaseTexture8* pd3dt);
void            GetARGBPixelDesc(D3DFORMAT fmt, PARGBPIXELDESC ppixd);

void            ConvertPALETTEENTRYToD3DCOLOR(LPVOID pvPalette, UINT uNumEntries);
void            ConvertD3DCOLORToPALETTEENTRY(LPVOID pvPalette, UINT uNumEntries);

void            VerifyTextureListIntegrity();

//******************************************************************************
// Inline functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     SetColorStage
//
// Description:
//
//     Set the texture stage color states for the given stage and operation
//     to the given arguments.
//
// Arguments:
//
//     CDevice* pDevice                     - Pointer to the device object
//
//     DWORD dwStage                        - Texture stage
//
//     DWORD dwArg1                         - First color argument
//
//     DWORD dwArg2                         - Second color argument
//
//     D3DTEXTUREOP                         - Color operation
//
// Return Value:
//
//     An HRESULT returned by IDirect3DDevice3::SetTextureStageState
//
//******************************************************************************
inline HRESULT SetColorStage(CDevice8* pDevice, DWORD dwStage, DWORD dwArg1, DWORD dwArg2, D3DTEXTUREOP d3dtop)
{
    HRESULT hr;
    hr = pDevice->SetTextureStageState(dwStage, D3DTSS_COLOROP, d3dtop);
    if (FAILED(hr)) {
        return hr;
    }
    hr = pDevice->SetTextureStageState(dwStage, D3DTSS_COLORARG1, dwArg1);
    if (FAILED(hr)) {
        return hr;
    }
    hr = pDevice->SetTextureStageState(dwStage, D3DTSS_COLORARG2, dwArg2);
    return hr;
}

//******************************************************************************
//
// Function:
//
//     SetAlphaStage
//
// Description:
//
//     Set the texture stage alpha states for the given stage and operation
//     to the given arguments.
//
// Arguments:
//
//     CDevice* pDevice                     - Pointer to the device object
//
//     DWORD dwStage                        - Texture stage
//
//     DWORD dwArg1                         - First alpha argument
//
//     DWORD dwArg2                         - Second alpha argument
//
//     D3DTEXTUREOP                         - Alpha operation
//
// Return Value:
//
//     An HRESULT returned by IDirect3DDevice3::SetTextureStageState
//
//******************************************************************************
inline HRESULT SetAlphaStage(CDevice8* pDevice, DWORD dwStage, DWORD dwArg1, DWORD dwArg2, D3DTEXTUREOP d3dtop)
{
    HRESULT hr;
    hr = pDevice->SetTextureStageState(dwStage, D3DTSS_ALPHAOP, d3dtop);
    if (FAILED(hr)) {
        return hr;
    }
    hr = pDevice->SetTextureStageState(dwStage, D3DTSS_ALPHAARG1, dwArg1);
    if (FAILED(hr)) {
        return hr;
    }
    hr = pDevice->SetTextureStageState(dwStage, D3DTSS_ALPHAARG2, dwArg2);
    return hr;
}

//******************************************************************************
inline D3DCOLOR VectorToColor(D3DXVECTOR3* pv) {
    
    return ((BYTE)((pv->x + 1.0f) / 2.0f * 255.0f) << 16) |
           ((BYTE)((pv->y + 1.0f) / 2.0f * 255.0f) << 8)  |
            (BYTE)((pv->z + 1.0f) / 2.0f * 255.0f);
}

//******************************************************************************
inline D3DXVECTOR3 ColorToVector(D3DCOLOR c) {

    return D3DXVECTOR3((float)((c >> 16) & 0xFF) / 127.5f - 1.0f,
                       (float)((c >> 8 ) & 0xFF) / 127.5f - 1.0f,
                       (float)((c      ) & 0xFF) / 127.5f - 1.0f);
}

#endif //__TEXTURE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\vertbuff.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vertbuff.cpp

Author:

    Matt Bronder

Description:

    CVertexBuffer methods.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// CVertexBuffer
//******************************************************************************

//******************************************************************************
CVertexBuffer::CVertexBuffer() {
}

//******************************************************************************
CVertexBuffer::~CVertexBuffer() {
}

//******************************************************************************
// CVertexBuffer8
//******************************************************************************

//******************************************************************************
CVertexBuffer8::CVertexBuffer8() {

    m_pd3dr = NULL;
}

//******************************************************************************
CVertexBuffer8::~CVertexBuffer8() {
}

//******************************************************************************
BOOL CVertexBuffer8::Create(CDevice8* pDevice, LPDIRECT3DVERTEXBUFFER8 pd3dr) {

    if (m_pd3dr) {
        return FALSE;
    }

    if (pDevice && pd3dr) {

        if (CResource8::Create(pDevice, (LPDIRECT3DRESOURCE8)pd3dr)) {
            m_pd3dr = pd3dr;
        }
    }

    return (BOOL)m_pd3dr;
}

//******************************************************************************
LPDIRECT3DVERTEXBUFFER8 CVertexBuffer8::GetIDirect3DVertexBuffer8() {

    return m_pd3dr;
}

//******************************************************************************
HRESULT CVertexBuffer8::GetDesc(D3DVERTEXBUFFER_DESC* pd3dvbd) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dr) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dr->GetDesc(pd3dvbd);
}

//******************************************************************************
HRESULT CVertexBuffer8::Lock(UINT uOffsetToLock, UINT uSizeToLock, BYTE** ppdata, DWORD dwFlags) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dr) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dr->Lock(uOffsetToLock, uSizeToLock, ppdata, dwFlags);
}

//******************************************************************************
HRESULT CVertexBuffer8::Unlock() {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dr) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dr->Unlock();
}

//******************************************************************************
// CCVertexBuffer8
//******************************************************************************

//******************************************************************************
CCVertexBuffer8::CCVertexBuffer8() {
}

//******************************************************************************
CCVertexBuffer8::~CCVertexBuffer8() {
}

//******************************************************************************
BOOL CCVertexBuffer8::Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DVERTEXBUFFER8 pd3dr) {

    if (!pClient) {
        return FALSE;
    }
    m_pClient = pClient;
    return CVertexBuffer8::Create(pDevice, pd3dr);
}

//******************************************************************************
ULONG CCVertexBuffer8::AddRef() {

    return CCResource8_AddRef(this, m_pClient);
}

//******************************************************************************
ULONG CCVertexBuffer8::Release() {

    return CCResource8_Release(this, m_pClient);
}

//******************************************************************************
D3DRESOURCETYPE CCVertexBuffer8::GetType() {

    return CCResource8_GetType(this, m_pClient);
}

//******************************************************************************
HRESULT CCVertexBuffer8::GetDevice(CDevice8** ppDevice) {

    return CCResource8_GetDevice(this, m_pClient, ppDevice);
}

//******************************************************************************
HRESULT CCVertexBuffer8::GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData) {

    return CCResource8_GetPrivateData(this, m_pClient, refguid, pvData, pdwSizeOfData);
}

//******************************************************************************
HRESULT CCVertexBuffer8::SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags) {

    return CCResource8_SetPrivateData(this, m_pClient, refguid, pvData, dwSizeOfData, dwFlags);
}

//******************************************************************************
HRESULT CCVertexBuffer8::FreePrivateData(REFGUID refguid) {

    return CCResource8_FreePrivateData(this, m_pClient, refguid);
}

//******************************************************************************
DWORD CCVertexBuffer8::GetPriority() {

    return CCResource8_GetPriority(this, m_pClient);
}

//******************************************************************************
DWORD CCVertexBuffer8::SetPriority(DWORD dwNewPriority) {

    return CCResource8_SetPriority(this, m_pClient, dwNewPriority);
}

//******************************************************************************
void CCVertexBuffer8::PreLoad() {

    CCResource8_PreLoad(this, m_pClient);
}

//******************************************************************************
HRESULT CCVertexBuffer8::GetDesc(D3DVERTEXBUFFER_DESC* pd3dvbd) {

#ifndef UNDER_XBOX
    D3DVERTEXBUFFER_DESC        d3dvbd;
#else
    WINX_D3DVERTEXBUFFER_DESC   d3dvbd;
#endif // UNDER_XBOX
    HRESULT                     hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dr) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dr->GetDesc(pd3dvbd);

#ifndef UNDER_XBOX
    if (m_pClient->CallMethod(MID_VRB8_GetDesc, this, &hrS, &d3dvbd, sizeof(D3DVERTEXBUFFER_DESC))) {
#else
    if (m_pClient->CallMethod(MID_VRB8_GetDesc, this, &hrS, &d3dvbd, sizeof(WINX_D3DVERTEXBUFFER_DESC))) {
#endif // UNDER_XBOX
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DVertexBuffer8::GetDesc result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else {
#ifndef UNDER_XBOX
            if (memcmp(pd3dvbd, &d3dvbd, sizeof(D3DVERTEXBUFFER_DESC))) {
#else
            if (pd3dvbd->Format != d3dvbd.Format || pd3dvbd->Type != d3dvbd.Format) {
#endif // UNDER_XBOX
                Log(LOG_WARN, TEXT("IDirect3DVertexBuffer8::GetDesc returned an inconsistent description"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCVertexBuffer8::Lock(UINT uOffsetToLock, UINT uSizeToLock, BYTE** ppdata, DWORD dwFlags) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dr) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dr->Lock(uOffsetToLock, uSizeToLock, ppdata, dwFlags);

    if (dwFlags & D3DLOCK_READONLY) {
        m_rlockd.pData = NULL;
        m_rlockd.uSize = 0;
    }
    else {
        m_rlockd.pData = *ppdata;
        if (uSizeToLock) {
            m_rlockd.uSize = uSizeToLock;
        }
        else {
#ifndef UNDER_XBOX
            D3DVERTEXBUFFER_DESC d3dvbd;
            m_pd3dr->GetDesc(&d3dvbd);
#else
            WINX_D3DVERTEXBUFFER_DESC d3dvbd;
            if (!m_pClient->CallMethod(MID_VRB8_GetDesc, this, &hrS, &d3dvbd, sizeof(WINX_D3DVERTEXBUFFER_DESC)) || FAILED(hrS)) {
                d3dvbd.Size = 0;
            }
#endif // UNDER_XBOX
            m_rlockd.uSize = d3dvbd.Size;
        }
    }

    if (m_pClient->CallMethod(MID_VRB8_Lock, this, &hrS, uOffsetToLock, uSizeToLock, &m_rlockd.pDataSrv, dwFlags)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DVertexBuffer8::Lock result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCVertexBuffer8::Unlock() {

    HRESULT hrC, hrS;
    BOOL    bRet;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dr) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    bRet = m_pClient->CallMethod(MID_VRB8_Unlock, this, &hrS, m_rlockd.pDataSrv, m_rlockd.uSize, m_rlockd.pData, m_rlockd.uSize);

    hrC = m_pd3dr->Unlock();

    if (bRet) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DVertexBuffer8::Unlock result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
    }

    return hrC;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\vertbuff.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vertbuff.h

Description:

    IDirect3DVertexBuffer classes.

*******************************************************************************/

#ifndef __VERTBUFF_H__
#define __VERTBUFF_H__

//******************************************************************************
// CVertexBuffer
//******************************************************************************

//******************************************************************************
class CVertexBuffer : public CResource {

protected:

public:

                        CVertexBuffer();
                        ~CVertexBuffer();
};

//******************************************************************************
class CVertexBuffer8 : public CResource8 {

protected:

    LPDIRECT3DVERTEXBUFFER8 m_pd3dr;

public:

                        CVertexBuffer8();
                        ~CVertexBuffer8();
    virtual BOOL        Create(CDevice8* pDevice, LPDIRECT3DVERTEXBUFFER8 pd3dr);

    virtual LPDIRECT3DVERTEXBUFFER8 GetIDirect3DVertexBuffer8();

    // Information

    virtual HRESULT     GetDesc(D3DVERTEXBUFFER_DESC* pd3dvbd);

    // Locking

    virtual HRESULT     Lock(UINT uOffsetToLock, UINT uSizeToLock, BYTE** ppdata, DWORD dwFlags);
    virtual HRESULT     Unlock();
};

//******************************************************************************
class CCVertexBuffer8 : public CVertexBuffer8 {

protected:

    CClient*            m_pClient;

    RLOCKDESC           m_rlockd;

public:

                        CCVertexBuffer8();
                        ~CCVertexBuffer8();
    virtual BOOL        Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DVERTEXBUFFER8 pd3dr);

    // IUnknown

    virtual ULONG       AddRef();
    virtual ULONG       Release();

    // Resource information

    virtual 
    D3DRESOURCETYPE     GetType();
    virtual HRESULT     GetDevice(CDevice8** ppDevice);

    // Resource private surface data

    virtual HRESULT     GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData);
    virtual HRESULT     SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags);
    virtual HRESULT     FreePrivateData(REFGUID refguid);

    // Resource management

    virtual DWORD       GetPriority();
    virtual DWORD       SetPriority(DWORD dwNewPriority);
    virtual void        PreLoad();

    // Information

    virtual HRESULT     GetDesc(D3DVERTEXBUFFER_DESC* pd3dvbd);

    // Locking

    virtual HRESULT     Lock(UINT uOffsetToLock, UINT uSizeToLock, BYTE** ppdata, DWORD dwFlags);
    virtual HRESULT     Unlock();
};

#endif // __VERTBUFF_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\vibuffer.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vibuffer.h

Author:

    Matt Bronder

Description:

    Direct3D vertex and index buffer routines.

*******************************************************************************/

#ifndef __VIBUFFER_H__
#define __VIBUFFER_H__

//******************************************************************************
// Function prototypes
//******************************************************************************

CVertexBuffer8*         CreateVertexBuffer(CDevice8* pDevice, LPVOID pvVertices, 
                                            UINT uSize, 
                                            DWORD dwUsage = 0, DWORD dwFVF = 0, 
                                            D3DPOOL pool = POOL_DEFAULT);
void                    ReleaseVertexBuffer(CVertexBuffer8* pd3dr);
void                    ReleaseVertexBuffers();
void                    RemoveVertexBuffer(CVertexBuffer8* pd3dr);

CIndexBuffer8*          CreateIndexBuffer(CDevice8* pDevice, LPVOID pvIndices, 
                                            UINT uSize, DWORD dwUsage = 0, 
                                            D3DFORMAT fmt = D3DFMT_INDEX16,
                                            D3DPOOL pool = POOL_DEFAULT);
void                    ReleaseIndexBuffer(CIndexBuffer8* pd3di);
void                    ReleaseIndexBuffers();
void                    RemoveIndexBuffer(CIndexBuffer8* pd3di);

#endif //__VIBUFFER_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\vibuffer.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    vibuffer.cpp

Author:

    Matt Bronder

Description:

    Direct3D vertex and index buffer routines.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// Structures
//******************************************************************************

typedef struct _VERTEXBUFFERDESC {
    CVertexBuffer8*             pd3dr;
    UINT                        uSize;
    DWORD                       dwFVF;
    DWORD                       dwUsage;
    D3DPOOL                     pool;
    struct _VERTEXBUFFERDESC*   pvbdNext;
} VERTEXBUFFERDESC, *PVERTEXBUFFERDESC;

typedef struct _INDEXBUFFERDESC {
    CIndexBuffer8*              pd3di;
    UINT                        uSize;
    DWORD                       dwUsage;
    D3DPOOL                     pool;
    D3DFORMAT                   fmt;
    struct _INDEXBUFFERDESC*   pibdNext;
} INDEXBUFFERDESC, *PINDEXBUFFERDESC;

//******************************************************************************
// Globals
//******************************************************************************

PVERTEXBUFFERDESC               g_pvbdList = NULL;
PINDEXBUFFERDESC                g_pibdList = NULL;

//******************************************************************************
// Vertex buffer functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateVertexBuffer
//
// Description:
//
//     Create a vertex buffer object of the given size, format, and usage and
//     populate it with the given vertices.  The size of the vertex list must
//     be at least as large as the buffer being created.
//
// Arguments:
//
//     CDevice8* pDevice                    - Pointer to the device object
//
//     LPVOID pvVertices                    - Vertex list to store in the buffer
//
//     UINT uSize                           - Size of the vertex buffer
//
//     DWORD dwUsage                        - Resource usage for the vertex
//                                            buffer
//
//     DWORD dwFVF                          - Format of the vertex buffer
//
//     D3DPOOL pool                         - Memory pool in which to create the
//                                            vertex buffer
//
// Return Value:
//
//     A pointer to the created vertex buffer object on success, NULL on 
//     failure.
//
//******************************************************************************
CVertexBuffer8* CreateVertexBuffer(CDevice8* pDevice, LPVOID pvVertices, 
                                           UINT uSize, DWORD dwUsage, 
                                           DWORD dwFVF, D3DPOOL pool) 
{
    CVertexBuffer8*         pd3dr;
    PVERTEXBUFFERDESC       pvbdNode;
    LPBYTE                  pData;
    HRESULT                 hr;

    hr = pDevice->CreateVertexBuffer(uSize, dwUsage, dwFVF, pool, &pd3dr);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"));
        return NULL;
    }

    if (pvVertices) {

        hr = pd3dr->Lock(0, uSize, &pData, 0);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
            pd3dr->Release();
            return NULL;
        }

        memcpy(pData, pvVertices, uSize);

        hr = pd3dr->Unlock();
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
            pd3dr->Release();
            return NULL;
        }
    }

    // Add the buffer to the vertex buffer list
    pvbdNode = (PVERTEXBUFFERDESC)MemAlloc(sizeof(VERTEXBUFFERDESC));
    if (!pvbdNode) {
        pd3dr->Release();
        return NULL;
    }
    memset(pvbdNode, 0, sizeof(VERTEXBUFFERDESC));
    pvbdNode->pd3dr = pd3dr;
    pvbdNode->uSize = uSize;
    pvbdNode->dwFVF = dwFVF;
    pvbdNode->dwUsage = dwUsage;
    pvbdNode->pool = pool;
    pvbdNode->pvbdNext = g_pvbdList;
    g_pvbdList = pvbdNode;

    return pd3dr;
}

//******************************************************************************
//
// Function:
//
//     ReleaseVertexBuffer
//
// Description:
//
//     Release the given vertex buffer object and remove it from the vertex
//     buffer table.
//
// Arguments:
//
//     CVertexBuffer8* pd3dr            - Pointer to the buffer object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseVertexBuffer(CVertexBuffer8* pd3dr) {

    PVERTEXBUFFERDESC   pvbd, pvbdDel;
#if defined(DEBUG) || defined(_DEBUG)
    UINT                uRef;
#endif

    if (!pd3dr) {
        return;
    }

    if (g_pvbdList) {

        if (g_pvbdList->pd3dr == pd3dr) {
            pvbd = g_pvbdList->pvbdNext;
            MemFree(g_pvbdList);
            g_pvbdList = pvbd;
        }

        else {

            for (pvbd = g_pvbdList; 
                 pvbd->pvbdNext && pvbd->pvbdNext->pd3dr != pd3dr; 
                 pvbd = pvbd->pvbdNext
            );

            if (pvbd->pvbdNext) {
                pvbdDel = pvbd->pvbdNext;
                pvbd->pvbdNext = pvbdDel->pvbdNext;
                MemFree(pvbdDel);
            }
        }
    }

#if defined(DEBUG) || defined(_DEBUG)
    uRef = pd3dr->Release();
    if (uRef != 0) {
        DebugString(TEXT("WARNING: Vertex buffer has a ref count of %d on release"), uRef);
    }
#else
    pd3dr->Release();
#endif
}

//******************************************************************************
//
// Function:
//
//     ReleaseVertexBuffers
//
// Description:
//
//     Release all vertex buffers.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseVertexBuffers() {

    while (g_pvbdList) {
        ReleaseVertexBuffer(g_pvbdList->pd3dr);
    }
}

//******************************************************************************
//
// Function:
//
//     RemoveVertexBuffer
//
// Description:
//
//     Remove the given vertex buffer from the vertex buffer table (if present)
//
// Arguments:
//
//     CVertexBuffer8* pd3dr                 - Pointer to the buffer object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void RemoveVertexBuffer(CVertexBuffer8* pd3dr) {

    PVERTEXBUFFERDESC   pvbd, pvbdDel;

    if (!pd3dr) {
        return;
    }

    if (g_pvbdList) {

        if (g_pvbdList->pd3dr == pd3dr) {
            pvbd = g_pvbdList->pvbdNext;
            MemFree(g_pvbdList);
            g_pvbdList = pvbd;
        }

        else {

            for (pvbd = g_pvbdList; 
                 pvbd->pvbdNext && pvbd->pvbdNext->pd3dr != pd3dr; 
                 pvbd = pvbd->pvbdNext
            );

            if (pvbd->pvbdNext) {
                pvbdDel = pvbd->pvbdNext;
                pvbd->pvbdNext = pvbdDel->pvbdNext;
                MemFree(pvbdDel);
            }
        }
    }
}

//******************************************************************************
// Index buffer functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     CreateIndexBuffer
//
// Description:
//
//     Create an index buffer object of the given size, format, and usage and
//     populate it with the given indices.  The size of the index list must
//     be at least as large as the buffer being created.
//
// Arguments:
//
//     CDevice8* pDevice                    - Pointer to the device object
//
//     LPVOID pvIndices                     - Index list to store in the buffer
//
//     UINT uSize                           - Size of the index buffer
//
//     DWORD dwUsage                        - Resource usage for the index
//                                            buffer
//
//     D3DFORMAT fmt                        - Format of the index buffer
//
//     D3DPOOL pool                         - Memory pool in which to create the
//                                            index buffer
//
// Return Value:
//
//     A pointer to the created index buffer object on success, NULL on 
//     failure.
//
//******************************************************************************
CIndexBuffer8* CreateIndexBuffer(CDevice8* pDevice, LPVOID pvIndices, 
                                            UINT uSize, DWORD dwUsage, 
                                            D3DFORMAT fmt, D3DPOOL pool)
{
    CIndexBuffer8*          pd3di;
    PINDEXBUFFERDESC        pibdNode;
    LPBYTE                  pData;
    HRESULT                 hr;

    hr = pDevice->CreateIndexBuffer(uSize, dwUsage, fmt, pool, &pd3di);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DDevice8::CreateIndexBuffer"));
        return NULL;
    }

    if (pvIndices) {

        hr = pd3di->Lock(0, uSize, &pData, 0);
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DIndexBuffer8::Lock"));
            pd3di->Release();
            return NULL;
        }

        memcpy(pData, pvIndices, uSize);

        hr = pd3di->Unlock();
        if (FAILED(hr)) {
            ResultFailed(hr, TEXT("IDirect3DIndexBuffer8::Unlock"));
            pd3di->Release();
            return NULL;
        }
    }

    // Add the buffer to the index buffer list
    pibdNode = (PINDEXBUFFERDESC)MemAlloc(sizeof(INDEXBUFFERDESC));
    if (!pibdNode) {
        pd3di->Release();
        return NULL;
    }
    memset(pibdNode, 0, sizeof(INDEXBUFFERDESC));
    pibdNode->pd3di = pd3di;
    pibdNode->uSize = uSize;
    pibdNode->dwUsage = dwUsage;
    pibdNode->pool = pool;
    pibdNode->fmt = fmt;
    pibdNode->pibdNext = g_pibdList;
    g_pibdList = pibdNode;

    return pd3di;
}

//******************************************************************************
//
// Function:
//
//     ReleaseIndexBuffer
//
// Description:
//
//     Release the given index buffer object and remove it from the index
//     buffer table.
//
// Arguments:
//
//     CIndexBuffer8* pd3di               - Pointer to the buffer object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseIndexBuffer(CIndexBuffer8* pd3di) {

    PINDEXBUFFERDESC    pibd, pibdDel;
#if defined(DEBUG) || defined(_DEBUG)
    UINT                uRef;
#endif

    if (!pd3di) {
        return;
    }

    if (g_pibdList) {

        if (g_pibdList->pd3di == pd3di) {
            pibd = g_pibdList->pibdNext;
            MemFree(g_pibdList);
            g_pibdList = pibd;
        }

        else {

            for (pibd = g_pibdList; 
                 pibd->pibdNext && pibd->pibdNext->pd3di != pd3di; 
                 pibd = pibd->pibdNext
            );

            if (pibd->pibdNext) {
                pibdDel = pibd->pibdNext;
                pibd->pibdNext = pibdDel->pibdNext;
                MemFree(pibdDel);
            }
        }
    }

#if defined(DEBUG) || defined(_DEBUG)
    uRef = pd3di->Release();
    if (uRef != 0) {
        DebugString(TEXT("WARNING: Index buffer has a ref count of %d on release"), uRef);
    }
#else
    pd3di->Release();
#endif
}

//******************************************************************************
//
// Function:
//
//     ReleaseIndexBuffers
//
// Description:
//
//     Release all index buffers.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseIndexBuffers() {

    while (g_pibdList) {
        ReleaseIndexBuffer(g_pibdList->pd3di);
    }
}

//******************************************************************************
//
// Function:
//
//     RemoveIndexBuffer
//
// Description:
//
//     Remove the given index buffer from the index buffer table (if present)
//
// Arguments:
//
//     CIndexBuffer8* pd3di         - Pointer to the buffer object
//
// Return Value:
//
//     None.
//
//******************************************************************************
void RemoveIndexBuffer(CIndexBuffer8* pd3di) {

    PINDEXBUFFERDESC    pibd, pibdDel;

    if (!pd3di) {
        return;
    }

    if (g_pibdList) {

        if (g_pibdList->pd3di == pd3di) {
            pibd = g_pibdList->pibdNext;
            MemFree(g_pibdList);
            g_pibdList = pibd;
        }

        else {

            for (pibd = g_pibdList; 
                 pibd->pibdNext && pibd->pibdNext->pd3di != pd3di; 
                 pibd = pibd->pibdNext
            );

            if (pibd->pibdNext) {
                pibdDel = pibd->pibdNext;
                pibd->pibdNext = pibdDel->pibdNext;
                MemFree(pibdDel);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dlocus\voltex.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    voltex.cpp

Author:

    Matt Bronder

Description:

    CVolumeTexture methods.

*******************************************************************************/

#include "d3dlocus.h"

//******************************************************************************
// CVolumeTexture
//******************************************************************************

//******************************************************************************
CVolumeTexture::CVolumeTexture() {
}

//******************************************************************************
CVolumeTexture::~CVolumeTexture() {
}

//******************************************************************************
// CVolumeTexture8
//******************************************************************************

//******************************************************************************
CVolumeTexture8::CVolumeTexture8() {

    m_pd3dtv = NULL;
}

//******************************************************************************
CVolumeTexture8::~CVolumeTexture8() {
}

//******************************************************************************
BOOL CVolumeTexture8::Create(CDevice8* pDevice, LPDIRECT3DVOLUMETEXTURE8 pd3dtv) {

    if (m_pd3dtv) {
        return FALSE;
    }

    if (CBaseTexture8::Create(pDevice, (LPDIRECT3DBASETEXTURE8)pd3dtv)) {
        m_pd3dtv = pd3dtv;
    }

    return (BOOL)m_pd3dtv;
}

//******************************************************************************
LPDIRECT3DVOLUMETEXTURE8 CVolumeTexture8::GetIDirect3DVolumeTexture8() {

    return m_pd3dtv;
}

//******************************************************************************
HRESULT CVolumeTexture8::GetLevelDesc(UINT uLevel, D3DVOLUME_DESC* pd3dvd) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtv) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dtv->GetLevelDesc(uLevel, pd3dvd);
}

//******************************************************************************
HRESULT CVolumeTexture8::LockBox(UINT uLevel, D3DLOCKED_BOX* pd3dlb, D3DBOX* pbox, DWORD dwFlags) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtv) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dtv->LockBox(uLevel, pd3dlb, pbox, dwFlags);
}

//******************************************************************************
HRESULT CVolumeTexture8::UnlockBox(UINT uLevel) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtv) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    return m_pd3dtv->UnlockBox(uLevel);
}

//******************************************************************************
HRESULT CVolumeTexture8::AddDirtyBox(D3DBOX* pboxDirty) {

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtv) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

#ifndef UNDER_XBOX
    return m_pd3dtv->AddDirtyBox(pboxDirty);
#else
    Log(LOG_FAIL, TEXT("IDirect3DVolumeTexture8::AddDirtyBox is not implemented on XBox"));
    return E_NOTIMPL;
#endif // UNDER_XBOX
}

//******************************************************************************
HRESULT CVolumeTexture8::GetVolumeLevel(UINT uLevel, CVolume8** ppVolumeLevel) {

    LPDIRECT3DVOLUME8   pd3dv;
    CVolume8*           pVolume;
    HRESULT             hr;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtv) {
        return ERR_NOTCREATED;
    }

    if (!ppVolumeLevel) {
        return D3DERR_INVALIDCALL;
    }
#endif // D3DLOCUS_DEBUG

    *ppVolumeLevel = NULL;

    hr = m_pd3dtv->GetVolumeLevel(uLevel, &pd3dv);
    if (SUCCEEDED(hr)) {
        
        if (m_pDevice->FindObject((LPVOID)pd3dv, (LPVOID*)&pVolume)) {
            pVolume->CObject::AddRef();
        }
        else {
            pVolume = new CVolume8();
            if (!pVolume) {
                pd3dv->Release();
                return E_OUTOFMEMORY;
            }

            if (!pVolume->Create(m_pDevice, pd3dv)) {
                pd3dv->Release();
                return ERR_LOCUSFAIL;
            }
        }

        *ppVolumeLevel = pVolume;
    }

    return hr;
}

//******************************************************************************
// CCVolumeTexture8
//******************************************************************************

//******************************************************************************
CCVolumeTexture8::CCVolumeTexture8() {

    m_pvlockd = NULL;
}

//******************************************************************************
CCVolumeTexture8::~CCVolumeTexture8() {

    if (m_pvlockd) {
        MemFree(m_pvlockd);
    }
}

//******************************************************************************
BOOL CCVolumeTexture8::Create(CClient* pClient, CDevice8* pDevice, LPDIRECT3DVOLUMETEXTURE8 pd3dtv) {

    if (!pClient) {
        return FALSE;
    }
    m_pClient = pClient;
    if (!CVolumeTexture8::Create(pDevice, pd3dtv)) {
        return FALSE;
    }

    m_pvlockd = (PVLOCKDESC)MemAlloc(pd3dtv->GetLevelCount() * sizeof(VLOCKDESC));
    if (!m_pvlockd) {
        return FALSE;
    }

    return TRUE;
}

//******************************************************************************
ULONG CCVolumeTexture8::AddRef() {

    return CCResource8_AddRef(this, m_pClient);
}

//******************************************************************************
ULONG CCVolumeTexture8::Release() {

    return CCResource8_Release(this, m_pClient);
}

//******************************************************************************
D3DRESOURCETYPE CCVolumeTexture8::GetType() {

    return CCResource8_GetType(this, m_pClient);
}

//******************************************************************************
HRESULT CCVolumeTexture8::GetDevice(CDevice8** ppDevice) {

    return CCResource8_GetDevice(this, m_pClient, ppDevice);
}

//******************************************************************************
HRESULT CCVolumeTexture8::GetPrivateData(REFGUID refguid, void* pvData, DWORD* pdwSizeOfData) {

    return CCResource8_GetPrivateData(this, m_pClient, refguid, pvData, pdwSizeOfData);
}

//******************************************************************************
HRESULT CCVolumeTexture8::SetPrivateData(REFGUID refguid, void* pvData, DWORD dwSizeOfData, DWORD dwFlags) {

    return CCResource8_SetPrivateData(this, m_pClient, refguid, pvData, dwSizeOfData, dwFlags);
}

//******************************************************************************
HRESULT CCVolumeTexture8::FreePrivateData(REFGUID refguid) {

    return CCResource8_FreePrivateData(this, m_pClient, refguid);
}

//******************************************************************************
DWORD CCVolumeTexture8::GetPriority() {

    return CCResource8_GetPriority(this, m_pClient);
}

//******************************************************************************
DWORD CCVolumeTexture8::SetPriority(DWORD dwNewPriority) {

    return CCResource8_SetPriority(this, m_pClient, dwNewPriority);
}

//******************************************************************************
void CCVolumeTexture8::PreLoad() {

    CCResource8_PreLoad(this, m_pClient);
}

//******************************************************************************
DWORD CCVolumeTexture8::GetLevelCount() {

    return CCBaseTexture8_GetLevelCount(this, m_pClient);
}

//******************************************************************************
DWORD CCVolumeTexture8::GetLOD() {

    return CCBaseTexture8_GetLOD(this, m_pClient);
}

//******************************************************************************
DWORD CCVolumeTexture8::SetLOD(DWORD dwNewLOD) {

    return CCBaseTexture8_SetLOD(this, m_pClient, dwNewLOD);
}

//******************************************************************************
HRESULT CCVolumeTexture8::GetLevelDesc(UINT uLevel, D3DVOLUME_DESC* pd3dvd) {

#ifndef UNDER_XBOX
    D3DVOLUME_DESC      d3dvd;
#else
    WINX_D3DVOLUME_DESC d3dvd;
#endif // UNDER_XBOX
    HRESULT             hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtv) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dtv->GetLevelDesc(uLevel, pd3dvd);

#ifndef UNDER_XBOX
    if (m_pClient->CallMethod(MID_VTX8_GetLevelDesc, this, &hrS, uLevel, &d3dvd, sizeof(D3DVOLUME_DESC))) {
#else
    if (m_pClient->CallMethod(MID_VTX8_GetLevelDesc, this, &hrS, uLevel, &d3dvd, sizeof(WINX_D3DVOLUME_DESC))) {
#endif // UNDER_XBOX
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DVolumeTexture8::GetLevelDesc result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
        }
        else {
#ifndef UNDER_XBOX
            if (memcmp(pd3dvd, &d3dvd, sizeof(D3DVOLUME_DESC))) {
#else
            if (pd3dvd->Type != d3dvd.Type ||
                pd3dvd->Width != d3dvd.Width ||
                pd3dvd->Height != d3dvd.Height ||
                pd3dvd->Depth != d3dvd.Depth)
            {
#endif // UNDER_XBOX
                Log(LOG_WARN, TEXT("IDirect3DVolumeTexture8::GetLevelDesc returned an inconsistent description"));
            }
        }
    }

    return hrC;
}

//******************************************************************************
HRESULT CCVolumeTexture8::LockBox(UINT uLevel, D3DLOCKED_BOX* pd3dlb, D3DBOX* pbox, DWORD dwFlags) {

    HRESULT hrC, hrS;

#ifdef D3DLOCUS_DEBUG
    if (!m_pd3dtv) {
        return ERR_NOTCREATED;
    }
#endif // D3DLOCUS_DEBUG

    hrC = m_pd3dtv->LockBox(uLevel, pd3dlb, pbox, dwFlags);

    if (pd3dlb) {
        memcpy(&m_pvlockd[uLevel].d3dlb, pd3dlb, sizeof(D3DLOCKED_BOX));
    }
    else {
        m_pvlockd[uLevel].d3dlb.pBits = 0;
    }
    if (pbox) {
        memcpy(&m_pvlockd[uLevel].box, pbox, sizeof(D3DBOX));
    }
    else {
        m_pvlockd[uLevel].box.Left = m_pvlockd[uLevel].box.Right = m_pvlockd[uLevel].box.Top = m_pvlockd[uLevel].box.Bottom = m_pvlockd[uLevel].box.Front = m_pvlockd[uLevel].box.Back = -1;
    }
    m_pvlockd[uLevel].dwFlags = dwFlags;

    if (m_pClient->CallMethod(MID_VTX8_LockBox, this, &hrS, uLevel, &m_pvlockd[uLevel].d3dlbSrv, sizeof(D3DLOCKED_BOX), &m_pvlockd[uLevel].box, sizeof(D3DBOX), dwFlags)) {
        if (hrC != hrS) {
            Log(LOG_WARN, TEXT("IDirect3DVolumeTexture8::LockBox result inconsistent [C: 0x%X, S: 0x%X]"), hrC, hrS);
       