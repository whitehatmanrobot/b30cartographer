eryInterface(This,riid,ppvObject) ) 

#define ITargetContainer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITargetContainer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITargetContainer_GetFrameUrl(This,ppszFrameSrc)	\
    ( (This)->lpVtbl -> GetFrameUrl(This,ppszFrameSrc) ) 

#define ITargetContainer_GetFramesContainer(This,ppContainer)	\
    ( (This)->lpVtbl -> GetFramesContainer(This,ppContainer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITargetContainer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_htiframe_0000_0004 */
/* [local] */ 

#endif


extern RPC_IF_HANDLE __MIDL_itf_htiframe_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_htiframe_0000_0004_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\HtmlHelp.h ===
/****************************************************************************
*                                                                           *
* HtmlHelp.h                                                                *
*                                                                           *
* Copyright (c) 1996-1997, Microsoft Corp. All rights reserved.             *
*                                                                           *
****************************************************************************/

#if _MSC_VER > 1000
#pragma once
#endif

#ifndef __HTMLHELP_H__
#define __HTMLHELP_H__

#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus

#if _MSC_VER < 1200
// Defines for Win64
#ifndef _WIN64
#define DWORD_PTR DWORD
#endif
#endif

// Commands to pass to HtmlHelp()

#define HH_DISPLAY_TOPIC        0x0000
#define HH_HELP_FINDER          0x0000  // WinHelp equivalent
#define HH_DISPLAY_TOC          0x0001  
#define HH_DISPLAY_INDEX        0x0002  
#define HH_DISPLAY_SEARCH       0x0003  
#define HH_SET_WIN_TYPE         0x0004
#define HH_GET_WIN_TYPE         0x0005
#define HH_GET_WIN_HANDLE       0x0006
#define HH_ENUM_INFO_TYPE       0x0007  // Get Info type name, call repeatedly to enumerate, -1 at end
#define HH_SET_INFO_TYPE        0x0008  // Add Info type to filter.
#define HH_SYNC                 0x0009
#define HH_RESERVED1            0x000A
#define HH_RESERVED2            0x000B
#define HH_RESERVED3            0x000C
#define HH_KEYWORD_LOOKUP       0x000D
#define HH_DISPLAY_TEXT_POPUP   0x000E  // display string resource id or text in a popup window
#define HH_HELP_CONTEXT         0x000F  // display mapped numeric value in dwData
#define HH_TP_HELP_CONTEXTMENU  0x0010  // text popup help, same as WinHelp HELP_CONTEXTMENU
#define HH_TP_HELP_WM_HELP      0x0011  // text popup help, same as WinHelp HELP_WM_HELP
#define HH_CLOSE_ALL            0x0012  // close all windows opened directly or indirectly by the caller
#define HH_ALINK_LOOKUP         0x0013  // ALink version of HH_KEYWORD_LOOKUP
#define HH_GET_LAST_ERROR       0x0014  // not currently implemented // See HHERROR.h
#define HH_ENUM_CATEGORY        0x0015	// Get category name, call repeatedly to enumerate, -1 at end
#define HH_ENUM_CATEGORY_IT     0x0016  // Get category info type members, call repeatedly to enumerate, -1 at end
#define HH_RESET_IT_FILTER      0x0017  // Clear the info type filter of all info types.
#define HH_SET_INCLUSIVE_FILTER 0x0018  // set inclusive filtering method for untyped topics to be included in display
#define HH_SET_EXCLUSIVE_FILTER 0x0019  // set exclusive filtering method for untyped topics to be excluded from display
#define HH_INITIALIZE            0x001C  // Initializes the help system.
#define HH_UNINITIALIZE          0x001D  // Uninitializes the help system.
#define HH_SET_QUERYSERVICE     0x001E  // Set the Host IQueryService interface
#define HH_PRETRANSLATEMESSAGE  0x00fd  // Pumps messages. (NULL, NULL, MSG*). 
#define HH_SET_GLOBAL_PROPERTY  0x00fc  // Set a global property. (NULL, NULL, HH_GPROP)
#define HH_SAFE_DISPLAY_TOPIC   0x0020  // private addition to the interface for InternetExplorer.

#define HHWIN_PROP_TAB_AUTOHIDESHOW (1 << 0)    // Automatically hide/show tri-pane window
#define HHWIN_PROP_ONTOP            (1 << 1)    // Top-most window
#define HHWIN_PROP_NOTITLEBAR       (1 << 2)    // no title bar
#define HHWIN_PROP_NODEF_STYLES     (1 << 3)    // no default window styles (only HH_WINTYPE.dwStyles)
#define HHWIN_PROP_NODEF_EXSTYLES   (1 << 4)    // no default extended window styles (only HH_WINTYPE.dwExStyles)
#define HHWIN_PROP_TRI_PANE         (1 << 5)    // use a tri-pane window
#define HHWIN_PROP_NOTB_TEXT        (1 << 6)    // no text on toolbar buttons
#define HHWIN_PROP_POST_QUIT        (1 << 7)    // post WM_QUIT message when window closes
#define HHWIN_PROP_AUTO_SYNC        (1 << 8)    // automatically ssync contents and index
#define HHWIN_PROP_TRACKING         (1 << 9)    // send tracking notification messages
#define HHWIN_PROP_TAB_SEARCH       (1 << 10)   // include search tab in navigation pane
#define HHWIN_PROP_TAB_HISTORY      (1 << 11)   // include history tab in navigation pane
#define HHWIN_PROP_TAB_FAVORITES    (1 << 12)   // include favorites tab in navigation pane
#define HHWIN_PROP_CHANGE_TITLE     (1 << 13)   // Put current HTML title in title bar
#define HHWIN_PROP_NAV_ONLY_WIN     (1 << 14)   // Only display the navigation window
#define HHWIN_PROP_NO_TOOLBAR       (1 << 15)   // Don't display a toolbar
#define HHWIN_PROP_MENU             (1 << 16)   // Menu
#define HHWIN_PROP_TAB_ADVSEARCH    (1 << 17)   // Advanced FTS UI.
#define HHWIN_PROP_USER_POS         (1 << 18)   // After initial creation, user controls window size/position
#define HHWIN_PROP_TAB_CUSTOM1      (1 << 19)   // Use custom tab #1
#define HHWIN_PROP_TAB_CUSTOM2      (1 << 20)   // Use custom tab #2
#define HHWIN_PROP_TAB_CUSTOM3      (1 << 21)   // Use custom tab #3
#define HHWIN_PROP_TAB_CUSTOM4      (1 << 22)   // Use custom tab #4
#define HHWIN_PROP_TAB_CUSTOM5      (1 << 23)   // Use custom tab #5
#define HHWIN_PROP_TAB_CUSTOM6      (1 << 24)   // Use custom tab #6
#define HHWIN_PROP_TAB_CUSTOM7      (1 << 25)   // Use custom tab #7
#define HHWIN_PROP_TAB_CUSTOM8      (1 << 26)   // Use custom tab #8
#define HHWIN_PROP_TAB_CUSTOM9      (1 << 27)   // Use custom tab #9
#define HHWIN_TB_MARGIN             (1 << 28)   // the window type has a margin

#define HHWIN_PARAM_PROPERTIES      (1 << 1)    // valid fsWinProperties
#define HHWIN_PARAM_STYLES          (1 << 2)    // valid dwStyles
#define HHWIN_PARAM_EXSTYLES        (1 << 3)    // valid dwExStyles
#define HHWIN_PARAM_RECT            (1 << 4)    // valid rcWindowPos
#define HHWIN_PARAM_NAV_WIDTH       (1 << 5)    // valid iNavWidth
#define HHWIN_PARAM_SHOWSTATE       (1 << 6)    // valid nShowState
#define HHWIN_PARAM_INFOTYPES       (1 << 7)    // valid apInfoTypes
#define HHWIN_PARAM_TB_FLAGS        (1 << 8)    // valid fsToolBarFlags
#define HHWIN_PARAM_EXPANSION       (1 << 9)    // valid fNotExpanded
#define HHWIN_PARAM_TABPOS          (1 << 10)   // valid tabpos
#define HHWIN_PARAM_TABORDER        (1 << 11)   // valid taborder
#define HHWIN_PARAM_HISTORY_COUNT   (1 << 12)   // valid cHistory
#define HHWIN_PARAM_CUR_TAB         (1 << 13)   // valid curNavType

#define HHWIN_BUTTON_EXPAND         (1 << 1)    // Expand/contract button
#define HHWIN_BUTTON_BACK           (1 << 2)    // Back button
#define HHWIN_BUTTON_FORWARD        (1 << 3)    // Forward button
#define HHWIN_BUTTON_STOP           (1 << 4)    // Stop button
#define HHWIN_BUTTON_REFRESH        (1 << 5)    // Refresh button
#define HHWIN_BUTTON_HOME           (1 << 6)    // Home button
#define HHWIN_BUTTON_BROWSE_FWD     (1 << 7)    // not implemented
#define HHWIN_BUTTON_BROWSE_BCK     (1 << 8)    // not implemented
#define HHWIN_BUTTON_NOTES          (1 << 9)    // not implemented
#define HHWIN_BUTTON_CONTENTS       (1 << 10)   // not implemented
#define HHWIN_BUTTON_SYNC           (1 << 11)   // Sync button
#define HHWIN_BUTTON_OPTIONS        (1 << 12)   // Options button
#define HHWIN_BUTTON_PRINT          (1 << 13)   // Print button
#define HHWIN_BUTTON_INDEX          (1 << 14)   // not implemented
#define HHWIN_BUTTON_SEARCH         (1 << 15)   // not implemented
#define HHWIN_BUTTON_HISTORY        (1 << 16)   // not implemented
#define HHWIN_BUTTON_FAVORITES      (1 << 17)   // not implemented
#define HHWIN_BUTTON_JUMP1          (1 << 18)
#define HHWIN_BUTTON_JUMP2          (1 << 19)
#define HHWIN_BUTTON_ZOOM           (1 << 20)
#define HHWIN_BUTTON_TOC_NEXT       (1 << 21)
#define HHWIN_BUTTON_TOC_PREV       (1 << 22)

#define HHWIN_DEF_BUTTONS           \
            (HHWIN_BUTTON_EXPAND |  \
             HHWIN_BUTTON_BACK |    \
             HHWIN_BUTTON_OPTIONS | \
             HHWIN_BUTTON_PRINT)

// Button IDs

#define IDTB_EXPAND             200
#define IDTB_CONTRACT           201
#define IDTB_STOP               202
#define IDTB_REFRESH            203
#define IDTB_BACK               204
#define IDTB_HOME               205
#define IDTB_SYNC               206
#define IDTB_PRINT              207
#define IDTB_OPTIONS            208
#define IDTB_FORWARD            209
#define IDTB_NOTES              210 // not implemented
#define IDTB_BROWSE_FWD         211
#define IDTB_BROWSE_BACK        212
#define IDTB_CONTENTS           213 // not implemented
#define IDTB_INDEX              214 // not implemented
#define IDTB_SEARCH             215 // not implemented
#define IDTB_HISTORY            216 // not implemented
#define IDTB_FAVORITES          217 // not implemented
#define IDTB_JUMP1              218
#define IDTB_JUMP2              219
#define IDTB_CUSTOMIZE          221
#define IDTB_ZOOM               222
#define IDTB_TOC_NEXT           223
#define IDTB_TOC_PREV           224

// Notification codes

#define HHN_FIRST       (0U-860U)
#define HHN_LAST        (0U-879U)

#define HHN_NAVCOMPLETE   (HHN_FIRST-0)
#define HHN_TRACK         (HHN_FIRST-1)
#define HHN_WINDOW_CREATE (HHN_FIRST-2)

typedef struct tagHHN_NOTIFY
{
    NMHDR   hdr;
    PCSTR   pszUrl; // Multi-byte, null-terminated string
} HHN_NOTIFY;

typedef struct tagHH_POPUP
{
    int       cbStruct;      // sizeof this structure
    HINSTANCE hinst;         // instance handle for string resource
    UINT      idString;      // string resource id, or text id if pszFile is specified in HtmlHelp call
    LPCTSTR   pszText;       // used if idString is zero
    POINT     pt;            // top center of popup window
    COLORREF  clrForeground; // use -1 for default
    COLORREF  clrBackground; // use -1 for default
    RECT      rcMargins;     // amount of space between edges of window and text, -1 for each member to ignore
    LPCTSTR   pszFont;       // facename, point size, char set, BOLD ITALIC UNDERLINE
} HH_POPUP;

typedef struct tagHH_AKLINK
{
    int       cbStruct;     // sizeof this structure
    BOOL      fReserved;    // must be FALSE (really!)
    LPCTSTR   pszKeywords;  // semi-colon separated keywords
    LPCTSTR   pszUrl;       // URL to jump to if no keywords found (may be NULL)
    LPCTSTR   pszMsgText;   // Message text to display in MessageBox if pszUrl is NULL and no keyword match
    LPCTSTR   pszMsgTitle;  // Message text to display in MessageBox if pszUrl is NULL and no keyword match
    LPCTSTR   pszWindow;    // Window to display URL in
    BOOL      fIndexOnFail; // Displays index if keyword lookup fails.
} HH_AKLINK;

enum {
    HHWIN_NAVTYPE_TOC,
    HHWIN_NAVTYPE_INDEX,
    HHWIN_NAVTYPE_SEARCH,
    HHWIN_NAVTYPE_FAVORITES,
    HHWIN_NAVTYPE_HISTORY,   // not implemented
    HHWIN_NAVTYPE_AUTHOR,
    HHWIN_NAVTYPE_CUSTOM_FIRST = 11
};

enum {
    IT_INCLUSIVE,
    IT_EXCLUSIVE,
    IT_HIDDEN,
};

typedef struct tagHH_ENUM_IT
{
    int       cbStruct;          // size of this structure
    int       iType;             // the type of the information type ie. Inclusive, Exclusive, or Hidden
    LPCSTR    pszCatName;        // Set to the name of the Category to enumerate the info types in a category; else NULL
    LPCSTR    pszITName;         // volitile pointer to the name of the infotype. Allocated by call. Caller responsible for freeing
    LPCSTR    pszITDescription;  // volitile pointer to the description of the infotype.
} HH_ENUM_IT, *PHH_ENUM_IT;

typedef struct tagHH_ENUM_CAT
{
    int       cbStruct;          // size of this structure
    LPCSTR    pszCatName;        // volitile pointer to the category name
    LPCSTR    pszCatDescription; // volitile pointer to the category description
} HH_ENUM_CAT, *PHH_ENUM_CAT;

typedef struct tagHH_SET_INFOTYPE
{
    int       cbStruct;          // the size of this structure
    LPCSTR    pszCatName;        // the name of the category, if any, the InfoType is a member of.
    LPCSTR    pszInfoTypeName;   // the name of the info type to add to the filter
} HH_SET_INFOTYPE, *PHH_SET_INFOTYPE;

typedef DWORD HH_INFOTYPE;
typedef HH_INFOTYPE* PHH_INFOTYPE;

enum {
    HHWIN_NAVTAB_TOP,
    HHWIN_NAVTAB_LEFT,
    HHWIN_NAVTAB_BOTTOM,
};

#define HH_MAX_TABS 19  // maximum number of tabs

enum {
    HH_TAB_CONTENTS,
    HH_TAB_INDEX,
    HH_TAB_SEARCH,
    HH_TAB_FAVORITES,
    HH_TAB_HISTORY,
    HH_TAB_AUTHOR,

    HH_TAB_CUSTOM_FIRST = 11,
    HH_TAB_CUSTOM_LAST = HH_MAX_TABS
};

#define HH_MAX_TABS_CUSTOM (HH_TAB_CUSTOM_LAST - HH_TAB_CUSTOM_FIRST + 1)

// HH_DISPLAY_SEARCH Command Related Structures and Constants

#define HH_FTS_DEFAULT_PROXIMITY (-1)

typedef struct tagHH_FTS_QUERY
{
    int cbStruct;            // Sizeof structure in bytes.
    BOOL fUniCodeStrings;    // TRUE if all strings are unicode.
    LPCTSTR pszSearchQuery;  // String containing the search query.
    LONG iProximity;         // Word proximity.
    BOOL fStemmedSearch;     // TRUE for StemmedSearch only.
    BOOL fTitleOnly;         // TRUE for Title search only.
    BOOL fExecute;           // TRUE to initiate the search.
    LPCTSTR pszWindow;       // Window to display in
} HH_FTS_QUERY;

// HH_WINTYPE Structure

typedef struct tagHH_WINTYPE {
    int     cbStruct;        // IN: size of this structure including all Information Types
    BOOL    fUniCodeStrings; // IN/OUT: TRUE if all strings are in UNICODE
    LPCTSTR pszType;         // IN/OUT: Name of a type of window
    DWORD   fsValidMembers;  // IN: Bit flag of valid members (HHWIN_PARAM_)
    DWORD   fsWinProperties; // IN/OUT: Properties/attributes of the window (HHWIN_)

    LPCTSTR pszCaption;      // IN/OUT: Window title
    DWORD   dwStyles;        // IN/OUT: Window styles
    DWORD   dwExStyles;      // IN/OUT: Extended Window styles
    RECT    rcWindowPos;     // IN: Starting position, OUT: current position
    int     nShowState;      // IN: show state (e.g., SW_SHOW)

    HWND  hwndHelp;          // OUT: window handle
    HWND  hwndCaller;        // OUT: who called this window

    HH_INFOTYPE* paInfoTypes;  // IN: Pointer to an array of Information Types

    // The following members are only valid if HHWIN_PROP_TRI_PANE is set

    HWND  hwndToolBar;      // OUT: toolbar window in tri-pane window
    HWND  hwndNavigation;   // OUT: navigation window in tri-pane window
    HWND  hwndHTML;         // OUT: window displaying HTML in tri-pane window
    int   iNavWidth;        // IN/OUT: width of navigation window
    RECT  rcHTML;           // OUT: HTML window coordinates

    LPCTSTR pszToc;         // IN: Location of the table of contents file
    LPCTSTR pszIndex;       // IN: Location of the index file
    LPCTSTR pszFile;        // IN: Default location of the html file
    LPCTSTR pszHome;        // IN/OUT: html file to display when Home button is clicked
    DWORD   fsToolBarFlags; // IN: flags controling the appearance of the toolbar
    BOOL    fNotExpanded;   // IN: TRUE/FALSE to contract or expand, OUT: current state
    int     curNavType;     // IN/OUT: UI to display in the navigational pane
    int     tabpos;         // IN/OUT: HHWIN_NAVTAB_TOP, HHWIN_NAVTAB_LEFT, or HHWIN_NAVTAB_BOTTOM
    int     idNotify;       // IN: ID to use for WM_NOTIFY messages
    BYTE    tabOrder[HH_MAX_TABS + 1];    // IN/OUT: tab order: Contents, Index, Search, History, Favorites, Reserved 1-5, Custom tabs
    int     cHistory;       // IN/OUT: number of history items to keep (default is 30)
    LPCTSTR pszJump1;       // Text for HHWIN_BUTTON_JUMP1
    LPCTSTR pszJump2;       // Text for HHWIN_BUTTON_JUMP2
    LPCTSTR pszUrlJump1;    // URL for HHWIN_BUTTON_JUMP1
    LPCTSTR pszUrlJump2;    // URL for HHWIN_BUTTON_JUMP2
    RECT    rcMinSize;      // Minimum size for window (ignored in version 1)
    int     cbInfoTypes;    // size of paInfoTypes;
    LPCTSTR pszCustomTabs;  // multiple zero-terminated strings
} HH_WINTYPE, *PHH_WINTYPE;

enum {
    HHACT_TAB_CONTENTS,
    HHACT_TAB_INDEX,
    HHACT_TAB_SEARCH,
    HHACT_TAB_HISTORY,
    HHACT_TAB_FAVORITES,

    HHACT_EXPAND,
    HHACT_CONTRACT,
    HHACT_BACK,
    HHACT_FORWARD,
    HHACT_STOP,
    HHACT_REFRESH,
    HHACT_HOME,
    HHACT_SYNC,
    HHACT_OPTIONS,
    HHACT_PRINT,
    HHACT_HIGHLIGHT,
    HHACT_CUSTOMIZE,
    HHACT_JUMP1,
    HHACT_JUMP2,
    HHACT_ZOOM,
    HHACT_TOC_NEXT,
    HHACT_TOC_PREV,
    HHACT_NOTES,

    HHACT_LAST_ENUM,
};

typedef struct tagHHNTRACK
{
    NMHDR   hdr;
    PCSTR   pszCurUrl;      // Multi-byte, null-terminated string
    int     idAction;       // HHACT_ value
    HH_WINTYPE* phhWinType; // Current window type structure
} HHNTRACK;

HWND
WINAPI
HtmlHelpA(
    __in_opt HWND hwndCaller,
    __in LPCSTR pszFile,
    __in UINT uCommand,
    __in DWORD_PTR dwData
    );

HWND
WINAPI
HtmlHelpW(
    __in_opt HWND hwndCaller,
    __in LPCWSTR pszFile,
    __in UINT uCommand,
    __in DWORD_PTR dwData
    );
#ifdef UNICODE
#define HtmlHelp  HtmlHelpW
#else
#define HtmlHelp  HtmlHelpA
#endif // !UNICODE

// Use the following for GetProcAddress to load from hhctrl.ocx

#define ATOM_HTMLHELP_API_ANSI    (LPTSTR)((DWORD)((WORD)(14)))
#define ATOM_HTMLHELP_API_UNICODE (LPTSTR)((DWORD)((WORD)(15)))

///////////////////////////////////////////////////////////////////////////////
//
// Global Control Properties. 
//
typedef enum tagHH_GPROPID
{
    HH_GPROPID_SINGLETHREAD=1,      // VARIANT_BOOL: True for single thread
    HH_GPROPID_TOOLBAR_MARGIN=2,    // long: Provides a left/right margin around the toolbar.
    HH_GPROPID_UI_LANGUAGE=3,       // long: LangId of the UI.
    HH_GPROPID_CURRENT_SUBSET=4,    // BSTR: Current subset.
    HH_GPROPID_CONTENT_LANGUAGE=5   // long: LandId for desired content.
} HH_GPROPID;

///////////////////////////////////////////////////////////////////////////////
//
// Global Property structure
//
#ifdef __oaidl_h__

#pragma pack(push, 8)

typedef struct tagHH_GLOBAL_PROPERTY
{
    HH_GPROPID  id;
    VARIANT     var;
} HH_GLOBAL_PROPERTY ;

#pragma pack(pop)
#endif

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __HTMLHELP_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\httpcompression.h ===
#ifndef _HTTP_COMPRESSION_H_
#define _HTTP_COMPRESSION_H_

/*++

    Copyright (c) 2009 Microsoft Corporation

    Module Name:

        httpcompression.h

    Abstract:

        Definition of extensibility APIs required
        to write a compression scheme for IIS

--*/

//
// Initialize compression scheme
// When used with IIS, InitCompression is called once as soon
// as compression scheme dll is loaded by IIS compression module
//
HRESULT
WINAPI
InitCompression(
    VOID
);

//
// Uninitialize compression scheme
// When used with IIS, this method is called before compression
// scheme dll is unloaded by IIS compression module
//
VOID
WINAPI
DeInitCompression(
    VOID
);

//
// Create a new compression context
//
HRESULT
WINAPI
CreateCompression(
    OUT PVOID *context,
    IN  ULONG reserved
);

//
// Compress data
//
HRESULT WINAPI Compress(
    IN  OUT PVOID           context,            // compression context
    IN      CONST BYTE *    input_buffer,       // input buffer
    IN      LONG            input_buffer_size,  // size of input buffer
    IN      PBYTE           output_buffer,      // output buffer
    IN      LONG            output_buffer_size, // size of output buffer
    OUT     PLONG           input_used,         // amount of input buffer used
    OUT     PLONG           output_used,        // amount of output buffer used
    IN      INT             compression_level   // compression level (1...10)
);

//
// Destroy compression context
//
VOID
WINAPI
DestroyCompression(
    IN PVOID context
);

//
// Reset compression state
// Required export but not used on Windows Vista and Windows Server 2008 - IIS 7.0
// Deprecated and not required export for Windows 7 and Windows Server 2008 R2 - IIS 7.5
//
HRESULT
WINAPI
ResetCompression(
    IN OUT PVOID context
);

#endif // _HTTP_COMPRESSION_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\httpcach.h ===
#ifndef _HTTPCACH_H_
#define _HTTPCACH_H_

//
// Key and data for uri-cache
//

#define URI_CACHE_NAME             L"URI"

class __declspec(uuid("f1bc4f8c-6bf8-42c0-b745-4fbe1a67e5a7"))
IUriKey : public IHttpCacheKey
{
 public:
    PCWSTR
    GetCacheName(
        VOID
    ) const
    {
        return URI_CACHE_NAME;
    }

    virtual
    PCWSTR
    GetUrl(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetSiteName(
        VOID
    ) const = 0;

    virtual
    DWORD
    GetSiteId(
        VOID
    ) const = 0;

    virtual
    VOID
    UpdateFrequentlyHitTickCount(
        DWORD   dwTicks
    ) = 0;

    virtual
    PCWSTR
    GetConfigPath(
        VOID
    ) const = 0;
};

//
// Key and data for file-cache
//

#define FILE_CACHE_NAME             L"FILE"

class __declspec(uuid("7377f6a4-266c-4043-b62a-9ea955a5e97a"))
IFileKey : public IHttpCacheKey
{
public:
    PCWSTR
    GetCacheName(
        VOID
    ) const
    {
        return FILE_CACHE_NAME;
    }

    virtual
    PCWSTR
    GetPath(
        VOID
    ) const = 0;
};

//
// Key and data for token-cache
//

#define TOKEN_CACHE_NAME            L"TOKEN"

class __declspec(uuid("1d3dc8cb-fc52-42bc-97e1-1bf02136e8ba"))
IHttpTokenKey : public IHttpCacheKey
{
 public:
    PCWSTR
    GetCacheName(
        VOID
    ) const
    {
        return TOKEN_CACHE_NAME;
    }

    virtual
    PCWSTR
    GetUserName(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetPasswordHash(
        VOID
    ) const = 0;

    //
    // Return the LOGON32_LOGON_* method used when logging on the user
    //
    
    virtual
    DWORD
    GetLogonMethod(
        VOID
    ) const = 0;
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\HttpExt.h ===
/********
*
*  Copyright (c) 1995  Process Software Corporation
*
*  Copyright (c) 1995-1999  Microsoft Corporation
*
*
*  Module Name  : HttpExt.h
*
*  Abstract :
*
*     This module contains  the structure definitions and prototypes for the
*      HTTP Server Extension interface used to build ISAPI Applications
*
******************/

#ifndef _HTTPEXT_H_
#define _HTTPEXT_H_

#include <windows.h>

#ifdef __cplusplus
extern "C" {
#endif


/************************************************************
 *   Manifest Constants
 ************************************************************/

#define   HSE_VERSION_MAJOR           7      // major version of this spec
#define   HSE_VERSION_MINOR           5      // minor version of this spec
#define   HSE_LOG_BUFFER_LEN         80
#define   HSE_MAX_EXT_DLL_NAME_LEN  256

#define   HSE_VERSION     MAKELONG( HSE_VERSION_MINOR, HSE_VERSION_MAJOR )

//
// the following are the status codes returned by the Extension DLL
//

#define   HSE_STATUS_SUCCESS                       1
#define   HSE_STATUS_SUCCESS_AND_KEEP_CONN         2
#define   HSE_STATUS_PENDING                       3
#define   HSE_STATUS_ERROR                         4

//
// The following are the values to request services with the
//   ServerSupportFunction().
//  Values from 0 to 1000 are reserved for future versions of the interface

#define   HSE_REQ_BASE                             0
#define   HSE_REQ_SEND_URL_REDIRECT_RESP           ( HSE_REQ_BASE + 1 )
#define   HSE_REQ_SEND_URL                         ( HSE_REQ_BASE + 2 )
#define   HSE_REQ_SEND_RESPONSE_HEADER             ( HSE_REQ_BASE + 3 )
#define   HSE_REQ_DONE_WITH_SESSION                ( HSE_REQ_BASE + 4 )
#define   HSE_REQ_END_RESERVED                     1000

//
//  These are Microsoft specific extensions
//

#define   HSE_REQ_MAP_URL_TO_PATH                  (HSE_REQ_END_RESERVED+1)
#define   HSE_REQ_GET_SSPI_INFO                    (HSE_REQ_END_RESERVED+2)
#define   HSE_APPEND_LOG_PARAMETER                 (HSE_REQ_END_RESERVED+3)
#define   HSE_REQ_IO_COMPLETION                    (HSE_REQ_END_RESERVED+5)
#define   HSE_REQ_TRANSMIT_FILE                    (HSE_REQ_END_RESERVED+6)
#define   HSE_REQ_REFRESH_ISAPI_ACL                (HSE_REQ_END_RESERVED+7)
#define   HSE_REQ_IS_KEEP_CONN                     (HSE_REQ_END_RESERVED+8)
#define   HSE_REQ_ASYNC_READ_CLIENT                (HSE_REQ_END_RESERVED+10)
#define   HSE_REQ_GET_IMPERSONATION_TOKEN          (HSE_REQ_END_RESERVED+11)
#define   HSE_REQ_MAP_URL_TO_PATH_EX               (HSE_REQ_END_RESERVED+12)
#define   HSE_REQ_ABORTIVE_CLOSE                   (HSE_REQ_END_RESERVED+14)
#define   HSE_REQ_GET_CERT_INFO_EX                 (HSE_REQ_END_RESERVED+15)
#define   HSE_REQ_SEND_RESPONSE_HEADER_EX          (HSE_REQ_END_RESERVED+16)
#define   HSE_REQ_CLOSE_CONNECTION                 (HSE_REQ_END_RESERVED+17)
#define   HSE_REQ_IS_CONNECTED                     (HSE_REQ_END_RESERVED+18)
#define   HSE_REQ_MAP_UNICODE_URL_TO_PATH          (HSE_REQ_END_RESERVED+23)
#define   HSE_REQ_MAP_UNICODE_URL_TO_PATH_EX       (HSE_REQ_END_RESERVED+24)
#define   HSE_REQ_EXEC_UNICODE_URL                 (HSE_REQ_END_RESERVED+25)
#define   HSE_REQ_EXEC_URL                         (HSE_REQ_END_RESERVED+26)
#define   HSE_REQ_GET_EXEC_URL_STATUS              (HSE_REQ_END_RESERVED+27)
#define   HSE_REQ_SEND_CUSTOM_ERROR                (HSE_REQ_END_RESERVED+28)
#define   HSE_REQ_IS_IN_PROCESS                    (HSE_REQ_END_RESERVED+30)
#define   HSE_REQ_REPORT_UNHEALTHY                 (HSE_REQ_END_RESERVED+32)
#define   HSE_REQ_NORMALIZE_URL                    (HSE_REQ_END_RESERVED+33)
#define   HSE_REQ_VECTOR_SEND                      (HSE_REQ_END_RESERVED+37)
#define   HSE_REQ_GET_ANONYMOUS_TOKEN              (HSE_REQ_END_RESERVED+38)
#define   HSE_REQ_GET_CACHE_INVALIDATION_CALLBACK  (HSE_REQ_END_RESERVED+40)
#define   HSE_REQ_GET_UNICODE_ANONYMOUS_TOKEN      (HSE_REQ_END_RESERVED+41)
#define   HSE_REQ_GET_TRACE_INFO                   (HSE_REQ_END_RESERVED+42)
#define   HSE_REQ_SET_FLUSH_FLAG                   (HSE_REQ_END_RESERVED+43)
#define   HSE_REQ_GET_TRACE_INFO_EX                (HSE_REQ_END_RESERVED+44)
#define   HSE_REQ_RAISE_TRACE_EVENT                (HSE_REQ_END_RESERVED+45)
#define   HSE_REQ_GET_CONFIG_OBJECT                (HSE_REQ_END_RESERVED+46)
#define   HSE_REQ_GET_WORKER_PROCESS_SETTINGS      (HSE_REQ_END_RESERVED+47)
#define   HSE_REQ_GET_PROTOCOL_MANAGER_CUSTOM_INTERFACE_CALLBACK \
                                                   (HSE_REQ_END_RESERVED+48)
#define   HSE_REQ_CANCEL_IO                        (HSE_REQ_END_RESERVED+49)
#define   HSE_REQ_GET_CHANNEL_BINDING_TOKEN        (HSE_REQ_END_RESERVED+50)

//
//  Bit Flags for TerminateExtension
//
//    HSE_TERM_ADVISORY_UNLOAD - Server wants to unload the extension,
//          extension can return TRUE if OK, FALSE if the server should not
//          unload the extension
//
//    HSE_TERM_MUST_UNLOAD - Server indicating the extension is about to be
//          unloaded, the extension cannot refuse.
//

#define HSE_TERM_ADVISORY_UNLOAD                   0x00000001
#define HSE_TERM_MUST_UNLOAD                       0x00000002

//
// Flags for IO Functions, supported for IO Funcs.
//  TF means ServerSupportFunction( HSE_REQ_TRANSMIT_FILE)
//

# define HSE_IO_SYNC                      0x00000001   // for WriteClient
# define HSE_IO_ASYNC                     0x00000002   // for WriteClient/TF/EU
# define HSE_IO_DISCONNECT_AFTER_SEND     0x00000004   // for TF
# define HSE_IO_SEND_HEADERS              0x00000008   // for TF
# define HSE_IO_NODELAY                   0x00001000   // turn off nagling 

//
// These three are only used by VectorSend
//

# define HSE_IO_FINAL_SEND                0x00000010
# define HSE_IO_CACHE_RESPONSE            0x00000020
# define HSE_IO_TRY_SKIP_CUSTOM_ERRORS    0x00000040


/************************************************************
 *   Type Definitions
 ************************************************************/

typedef   LPVOID          HCONN;

//
// structure passed to GetExtensionVersion()
//

typedef struct   _HSE_VERSION_INFO {

    DWORD  dwExtensionVersion;
    CHAR   lpszExtensionDesc[HSE_MAX_EXT_DLL_NAME_LEN];

} HSE_VERSION_INFO, *LPHSE_VERSION_INFO;


//
// structure passed to extension procedure on a new request
//
typedef struct _EXTENSION_CONTROL_BLOCK {

    DWORD     cbSize;                 // size of this struct.
    DWORD     dwVersion;              // version info of this spec
    HCONN     ConnID;                 // Context number not to be modified!
    DWORD     dwHttpStatusCode;       // HTTP Status code
    CHAR      lpszLogData[HSE_LOG_BUFFER_LEN];// null terminated log info specific to this Extension DLL

    LPSTR     lpszMethod;             // REQUEST_METHOD
    LPSTR     lpszQueryString;        // QUERY_STRING
    LPSTR     lpszPathInfo;           // PATH_INFO
    LPSTR     lpszPathTranslated;     // PATH_TRANSLATED

    DWORD     cbTotalBytes;           // Total bytes indicated from client
    DWORD     cbAvailable;            // Available number of bytes
    LPBYTE    lpbData;                // pointer to cbAvailable bytes

    LPSTR     lpszContentType;        // Content type of client data

    BOOL (WINAPI * GetServerVariable) ( HCONN       hConn,
                                        LPSTR       lpszVariableName,
                                        LPVOID      lpvBuffer,
                                        LPDWORD     lpdwSize );

    BOOL (WINAPI * WriteClient)  ( HCONN      ConnID,
                                   LPVOID     Buffer,
                                   LPDWORD    lpdwBytes,
                                   DWORD      dwReserved );

    BOOL (WINAPI * ReadClient)  ( HCONN      ConnID,
                                  LPVOID     lpvBuffer,
                                  LPDWORD    lpdwSize );

    BOOL (WINAPI * ServerSupportFunction)( HCONN      hConn,
                                           DWORD      dwHSERequest,
                                           LPVOID     lpvBuffer,
                                           LPDWORD    lpdwSize,
                                           LPDWORD    lpdwDataType );

} EXTENSION_CONTROL_BLOCK, *LPEXTENSION_CONTROL_BLOCK;




//
//  Bit field of flags that can be on a virtual directory
//

#define HSE_URL_FLAGS_READ          0x00000001    // Allow for Read
#define HSE_URL_FLAGS_WRITE         0x00000002    // Allow for Write
#define HSE_URL_FLAGS_EXECUTE       0x00000004    // Allow for Execute
#define HSE_URL_FLAGS_SSL           0x00000008    // Require SSL
#define HSE_URL_FLAGS_DONT_CACHE    0x00000010    // Don't cache (vroot only)
#define HSE_URL_FLAGS_NEGO_CERT     0x00000020    // Allow client SSL certs
#define HSE_URL_FLAGS_REQUIRE_CERT  0x00000040    // Require client SSL certs
#define HSE_URL_FLAGS_MAP_CERT      0x00000080    // Map SSL cert to NT account
#define HSE_URL_FLAGS_SSL128        0x00000100    // Require 128 bit SSL
#define HSE_URL_FLAGS_SCRIPT        0x00000200    // Allow for Script execution

#define HSE_URL_FLAGS_MASK          0x000003ff

//
//  Structure for extended information on a URL mapping
//

typedef struct _HSE_URL_MAPEX_INFO {

    CHAR   lpszPath[MAX_PATH]; // Physical path root mapped to
    DWORD  dwFlags;            // Flags associated with this URL path
    DWORD  cchMatchingPath;    // Number of matching characters in physical path
    DWORD  cchMatchingURL;     // Number of matching characters in URL

    DWORD  dwReserved1;
    DWORD  dwReserved2;

} HSE_URL_MAPEX_INFO, * LPHSE_URL_MAPEX_INFO;


typedef struct _HSE_UNICODE_URL_MAPEX_INFO {

    WCHAR  lpszPath[MAX_PATH]; // Physical path root mapped to
    DWORD  dwFlags;            // Flags associated with this URL path
    DWORD  cchMatchingPath;    // Number of matching characters in physical path
    DWORD  cchMatchingURL;     // Number of matching characters in URL

} HSE_UNICODE_URL_MAPEX_INFO, * LPHSE_UNICODE_URL_MAPEX_INFO;


//
// PFN_HSE_IO_COMPLETION - callback function for the Async I/O Completion.
//

typedef VOID
  (WINAPI * PFN_HSE_IO_COMPLETION)(
                                   IN EXTENSION_CONTROL_BLOCK * pECB,
                                   IN PVOID    pContext,
                                   IN DWORD    cbIO,
                                   IN DWORD    dwError
                                   );



//
// HSE_TF_INFO defines the type for HTTP SERVER EXTENSION support for
//  ISAPI applications to send files using TransmitFile.
// A pointer to this object should be used with ServerSupportFunction()
//  for HSE_REQ_TRANSMIT_FILE.
//

typedef struct _HSE_TF_INFO  {

    //
    // callback and context information
    // the callback function will be called when IO is completed.
    // the context specified will be used during such callback.
    //
    // These values (if non-NULL) will override the one set by calling
    //  ServerSupportFunction() with HSE_REQ_IO_COMPLETION
    //
    PFN_HSE_IO_COMPLETION   pfnHseIO;
    PVOID  pContext;

    // file should have been opened with FILE_FLAG_SEQUENTIAL_SCAN
    HANDLE hFile;

    //
    // HTTP header and status code
    // These fields are used only if HSE_IO_SEND_HEADERS is present in dwFlags
    //

    LPCSTR pszStatusCode; // HTTP Status Code  eg: "200 OK"

    DWORD  BytesToWrite;  // special value of "0" means write entire file.
    DWORD  Offset;        // offset value within the file to start from

    PVOID  pHead;         // Head buffer to be sent before file data
    DWORD  HeadLength;    // header length
    PVOID  pTail;         // Tail buffer to be sent after file data
    DWORD  TailLength;    // tail length

    DWORD  dwFlags;       // includes HSE_IO_DISCONNECT_AFTER_SEND, ...

} HSE_TF_INFO, * LPHSE_TF_INFO;


//
// HSE_SEND_HEADER_EX_INFO allows an ISAPI application to send headers
// and specify keep-alive behavior in the same call.
//

typedef struct _HSE_SEND_HEADER_EX_INFO  {

    //
    // HTTP status code and header
    //

    LPCSTR  pszStatus;  // HTTP status code  eg: "200 OK"
    LPCSTR  pszHeader;  // HTTP header

    DWORD   cchStatus;  // number of characters in status code
    DWORD   cchHeader;  // number of characters in header

    BOOL    fKeepConn;  // keep client connection alive?

} HSE_SEND_HEADER_EX_INFO, * LPHSE_SEND_HEADER_EX_INFO;

//
// Flags for use with HSE_REQ_EXEC_URL
//

#define HSE_EXEC_URL_NO_HEADERS                     0x02
#define HSE_EXEC_URL_IGNORE_CURRENT_INTERCEPTOR     0x04
#define HSE_EXEC_URL_IGNORE_VALIDATION_AND_RANGE    0x10
#define HSE_EXEC_URL_DISABLE_CUSTOM_ERROR           0x20
#define HSE_EXEC_URL_SSI_CMD                        0x40
#define HSE_EXEC_URL_HTTP_CACHE_ELIGIBLE            0x80
          
//
// HSE_EXEC_URL_USER_INFO provides a new user content for use with
// HSE_REQ_EXEC_URL
//

typedef struct _HSE_EXEC_URL_USER_INFO  {

    HANDLE hImpersonationToken;
    LPSTR pszCustomUserName;
    LPSTR pszCustomAuthType;

} HSE_EXEC_URL_USER_INFO, * LPHSE_EXEC_URL_USER_INFO;

//
// HSE_EXEC_URL_ENTITY_INFO describes the entity body to be provided
// to the executed request using HSE_REQ_EXEC_URL
//

typedef struct _HSE_EXEC_URL_ENTITY_INFO  {
    
    DWORD cbAvailable;
    LPVOID lpbData;
    
} HSE_EXEC_URL_ENTITY_INFO, * LPHSE_EXEC_URL_ENTITY_INFO;

//
// HSE_EXEC_URL_STATUS provides the status of the last HSE_REQ_EXEC_URL 
// call
//

typedef struct _HSE_EXEC_URL_STATUS  {

    USHORT uHttpStatusCode;
    USHORT uHttpSubStatus;
    DWORD dwWin32Error;

} HSE_EXEC_URL_STATUS, * LPHSE_EXEC_URL_STATUS;

//
// HSE_EXEC_URL_INFO provides a description of the request to execute
// on behalf of the ISAPI.  
//

typedef struct _HSE_EXEC_URL_INFO  {

    LPSTR pszUrl;                       // URL to execute
    LPSTR pszMethod;                    // Method
    LPSTR pszChildHeaders;              // Request headers for child
    LPHSE_EXEC_URL_USER_INFO pUserInfo; // User for new request
    LPHSE_EXEC_URL_ENTITY_INFO pEntity; // Entity body for new request
    DWORD dwExecUrlFlags;               // Flags

} HSE_EXEC_URL_INFO, * LPHSE_EXEC_URL_INFO;

//
// HSE_EXEC_UNICODE_URL_USER_INFO provides a new user content for use with
// HSE_REQ_EXEC_UNICODE_URL
//

typedef struct _HSE_EXEC_UNICODE_URL_USER_INFO  {

    HANDLE hImpersonationToken;
    LPWSTR pszCustomUserName;
    LPSTR  pszCustomAuthType;

} HSE_EXEC_UNICODE_URL_USER_INFO, * LPHSE_EXEC_UNICODE_URL_USER_INFO;

//
// HSE_EXEC_UNICODE_URL_INFO provides a description of the request to execute
// on behalf of the ISAPI.  
//

typedef struct _HSE_EXEC_UNICODE_URL_INFO  {

    LPWSTR pszUrl;                              // URL to execute
    LPSTR  pszMethod;                           // Method
    LPSTR  pszChildHeaders;                     // Request headers for child
    LPHSE_EXEC_UNICODE_URL_USER_INFO pUserInfo; // User for new request
    LPHSE_EXEC_URL_ENTITY_INFO pEntity;         // Entity body for new request
    DWORD  dwExecUrlFlags;                      // Flags

} HSE_EXEC_UNICODE_URL_INFO, * LPHSE_EXEC_UNICODE_URL_INFO;

//
// HSE_CUSTOM_ERROR_INFO structured used in HSE_REQ_SEND_CUSTOM_ERROR
// 

typedef struct _HSE_CUSTOM_ERROR_INFO  {

    CHAR * pszStatus;
    USHORT uHttpSubError;
    BOOL fAsync;

} HSE_CUSTOM_ERROR_INFO, * LPHSE_CUSTOM_ERROR_INFO;


//
// structures for the HSE_REQ_VECTOR_SEND ServerSupportFunction
//


//
// Types of vector-elements currently supported
//
#define HSE_VECTOR_ELEMENT_TYPE_MEMORY_BUFFER       0
#define HSE_VECTOR_ELEMENT_TYPE_FILE_HANDLE         1

//
// element of the vector
//

typedef struct _HSE_VECTOR_ELEMENT
{
    DWORD ElementType;  // Type of element (buffer/file/fragment etc)

    PVOID pvContext;    // The context representing the element to be sent

    ULONGLONG cbOffset; // Offset from the start of hFile

    ULONGLONG cbSize;   // Number of bytes to send
} HSE_VECTOR_ELEMENT, *LPHSE_VECTOR_ELEMENT;

//
// The whole vector to be passed to the ServerSupportFunction
//

typedef struct _HSE_RESPONSE_VECTOR
{
    DWORD dwFlags;                          // combination of HSE_IO_* flags

    LPSTR pszStatus;                        // Status line to send like "200 OK"
    LPSTR pszHeaders;                       // Headers to send

    DWORD nElementCount;                    // Number of HSE_VECTOR_ELEMENT's
    LPHSE_VECTOR_ELEMENT lpElementArray;    // Pointer to those elements
} HSE_RESPONSE_VECTOR, *LPHSE_RESPONSE_VECTOR;


typedef HRESULT
  (WINAPI * PFN_HSE_CACHE_INVALIDATION_CALLBACK)(
        WCHAR *pszUrl);


#if(_WIN32_WINNT >= 0x400)
#include <wincrypt.h>
//
//      CERT_CONTEXT_EX is passed as an an argument to 
//  ServerSupportFunction( HSE_REQ_GET_CERT_INFO_EX )
//

typedef struct _CERT_CONTEXT_EX {
    CERT_CONTEXT    CertContext;
    DWORD           cbAllocated;
    DWORD           dwCertificateFlags;
} CERT_CONTEXT_EX;
#endif



//
// HSE_TRACE_INFO structure used to get debug trace info
// from core web server
//

typedef struct _HSE_TRACE_INFO
{

    //
    // Recommendation from IIS to trace the request
    //

    BOOL        fTraceRequest; 
    
    //
    // The unique trace context ID for the current request
    //

    BYTE        TraceContextId[16];
    
    //
    // Reserved for future use
    //

    DWORD       dwReserved1;
    DWORD       dwReserved2;
    
} HSE_TRACE_INFO, *LPHSE_TRACE_INFO;


//
// HSE_REQ_GET_TRACE_INFO_EX SSF uses 
// the HTTP_TRACE_CONFIGURATION structure defined in httptrace.h
//

//
// HSE_REQ_RAISE_TRACE_EVENT SSF uses 
// the HTTP_TRACE_EVENT structure defined in httptrace.h
//

//
// SSF_REQ_GET_WORKER_PROCESS_SETTINGS returns IWpfSettings pointer.
// IWpfSettings is defined in the wpframework.h
//

//
// SSF_REQ_GET_CONFIG_OBJECT returns INativeConfigurationSystem pointer.
// INativeConfigurationSystem is defined in the nativerd.h
//

//
// HSE_GET_PROTOCOL_MANAGER_CUSTOM_INTERFACE_CALLBACK returns pointer to
// PFN_HSE_GET_PROTOCOL_MANAGER_CUSTOM_INTERFACE_CALLBACK function type
//

typedef HRESULT
  (WINAPI * PFN_HSE_GET_PROTOCOL_MANAGER_CUSTOM_INTERFACE_CALLBACK)(
                            LPCWSTR       pszProtocolManagerDll,
                            LPCWSTR       pszProtocolManagerDllInitFunction,
                            DWORD         dwCustomInterfaceId,
                            PVOID*        ppCustomInterface );


//
// Flags for determining application type
//

#define HSE_APP_FLAG_IN_PROCESS   0
#define HSE_APP_FLAG_ISOLATED_OOP 1
#define HSE_APP_FLAG_POOLED_OOP   2


/************************************************************
 *   Function Prototypes 
 *   o  for functions exported from the ISAPI Application DLL
 ************************************************************/

BOOL  WINAPI   GetExtensionVersion( __out HSE_VERSION_INFO  *pVer );
DWORD WINAPI   HttpExtensionProc( __in EXTENSION_CONTROL_BLOCK *pECB );
BOOL  WINAPI   TerminateExtension( DWORD dwFlags );

// the following type declarations is for use in the server side

typedef BOOL
    (WINAPI * PFN_GETEXTENSIONVERSION)( HSE_VERSION_INFO  *pVer );

typedef DWORD 
    (WINAPI * PFN_HTTPEXTENSIONPROC )( EXTENSION_CONTROL_BLOCK * pECB );

typedef BOOL  (WINAPI * PFN_TERMINATEEXTENSION )( DWORD dwFlags );


#ifdef __cplusplus
}
#endif


#endif  // end definition _HTTPEXT_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\HttpFilt.h ===
/*++

Copyright (c) 1997-1999  Microsoft Corporation

Module Name:

    httpfilt.h

Abstract:

    This module contains the Microsoft HTTP filter extension info

Revision History:

--*/

#ifndef _HTTPFILT_H_
#define _HTTPFILT_H_

#ifdef __cplusplus
extern "C" {
#endif

//
// Define ULONG_PTR if necessary
//

#if !defined(__midl) && defined(_X86_) && _MSC_VER >= 1300
#define _W64 __w64
#else
#define _W64
#endif

//
// The INT_PTR is guaranteed to be the same size as a pointer.  Its
// size with change with pointer size (32/64).  It should be used
// anywhere that a pointer is cast to an integer type. UINT_PTR is
// the unsigned variation.
//
// __int3264 is intrinsic to 64b MIDL but not to old MIDL or to C compiler.
//
#if ( 501 < __midl )

    typedef unsigned __int3264 ULONG_PTR, *PULONG_PTR;

#else  // midl64
// old midl and C++ compiler

#if defined(_WIN64)
    typedef unsigned __int64 ULONG_PTR, *PULONG_PTR;
#else
    typedef _W64 unsigned long ULONG_PTR, *PULONG_PTR;
#endif
#endif // midl64


//
//  Current version of the filter spec is 7.0
//

#define HTTP_FILTER_REVISION    MAKELONG( 5, 7 )

#define SF_MAX_USERNAME         (256+1)
#define SF_MAX_PASSWORD         (256+1)
#define SF_MAX_AUTH_TYPE        (32+1)

#define SF_MAX_FILTER_DESC_LEN  (256+1)


//
//  These values can be used with the pfnSFCallback function supplied in
//  the filter context structure
//

enum SF_REQ_TYPE
{
    //
    //  Sends a complete HTTP server response header including
    //  the status, server version, message time and MIME version.
    //
    //  Server extensions should append other information at the end,
    //  such as Content-type, Content-length etc followed by an extra
    //  '\r\n'.
    //
    //  pData - Zero terminated string pointing to optional
    //      status string (i.e., "401 Access Denied") or NULL for
    //      the default response of "200 OK".
    //
    //  ul1 - Zero terminated string pointing to optional data to be
    //      appended and set with the header.  If NULL, the header will
    //      be terminated with an empty line.
    //

    SF_REQ_SEND_RESPONSE_HEADER,

    //
    //  If the server denies the HTTP request, add the specified headers
    //  to the server error response.
    //
    //  This allows an authentication filter to advertise its services
    //  w/o filtering every request.  Generally the headers will be
    //  WWW-Authenticate headers with custom authentication schemes but
    //  no restriction is placed on what headers may be specified.
    //
    //  pData - Zero terminated string pointing to one or more header lines
    //      with terminating '\r\n'.
    //

    SF_REQ_ADD_HEADERS_ON_DENIAL,

    //
    //  Only used by raw data filters that return SF_STATUS_READ_NEXT
    //
    //  ul1 - size in bytes for the next read
    //

    SF_REQ_SET_NEXT_READ_SIZE,

    //
    //  Used to indicate this request is a proxy request
    //
    //  ul1 - The proxy flags to set
    //      0x00000001 - This is a HTTP proxy request
    //
    //

    SF_REQ_SET_PROXY_INFO,

    //
    //  Returns the connection ID contained in the ConnID field of an
    //  ISAPI Application's Extension Control Block.  This value can be used
    //  as a key to cooridinate shared data between Filters and Applications.
    //
    //  pData - Pointer to DWORD that receives the connection ID.
    //

    SF_REQ_GET_CONNID,

    //
    // Used to set a SSPI security context + impersonation token
    // derived from a client certificate.
    //
    // pData - certificate info ( PHTTP_FILTER_CERTIFICATE_INFO )
    // ul1 - CtxtHandle*
    // ul2 - impersonation handle
    //

    SF_REQ_SET_CERTIFICATE_INFO,

    //
    // Used to get an IIS property
    // as defined in SF_PROPERTY_IIS
    //
    // ul1 - Property ID
    //

    SF_REQ_GET_PROPERTY,

    //
    // Used to normalize an URL
    //
    // pData - URL to normalize
    //

    SF_REQ_NORMALIZE_URL,

    //
    // Disable Notifications
    //
    // ul1 - notifications to disable
    //

    SF_REQ_DISABLE_NOTIFICATIONS,

} ;


enum SF_PROPERTY_IIS
{
    SF_PROPERTY_SSL_CTXT,
    SF_PROPERTY_INSTANCE_NUM_ID
} ;


//
//  These values are returned by the filter entry point when a new request is
//  received indicating their interest in this particular request
//

enum SF_STATUS_TYPE
{
    //
    //  The filter has handled the HTTP request.  The server should disconnect
    //  the session.
    //

    SF_STATUS_REQ_FINISHED = 0x8000000,

    //
    //  Same as SF_STATUS_FINISHED except the server should keep the TCP
    //  session open if the option was negotiated
    //

    SF_STATUS_REQ_FINISHED_KEEP_CONN,

    //
    //  The next filter in the notification chain should be called
    //

    SF_STATUS_REQ_NEXT_NOTIFICATION,

    //
    //  This filter handled the notification.  No other handles should be
    //  called for this particular notification type
    //

    SF_STATUS_REQ_HANDLED_NOTIFICATION,

    //
    //  An error occurred.  The server should use GetLastError() and indicate
    //  the error to the client
    //

    SF_STATUS_REQ_ERROR,

    //
    //  The filter is an opaque stream filter and we're negotiating the
    //  session parameters.  Only valid for raw read notification.
    //

    SF_STATUS_REQ_READ_NEXT
};

//
//  pvNotification points to this structure for all request notification types
//

typedef struct _HTTP_FILTER_CONTEXT
{
    DWORD          cbSize;

    //
    //  This is the structure revision level.
    //

    DWORD          Revision;

    //
    //  Private context information for the server.
    //

    PVOID          ServerContext;
    DWORD          ulReserved;

    //
    //  TRUE if this request is coming over a secure port
    //

    BOOL           fIsSecurePort;

    //
    //  A context that can be used by the filter
    //

    PVOID          pFilterContext;

    //
    //  Server callbacks
    //

    BOOL (WINAPI * GetServerVariable) (
        struct _HTTP_FILTER_CONTEXT * pfc,
        LPSTR                         lpszVariableName,
        LPVOID                        lpvBuffer,
        LPDWORD                       lpdwSize
        );

    BOOL (WINAPI * AddResponseHeaders) (
        struct _HTTP_FILTER_CONTEXT * pfc,
        LPSTR                         lpszHeaders,
        DWORD                         dwReserved
        );

    BOOL (WINAPI * WriteClient)  (
        struct _HTTP_FILTER_CONTEXT * pfc,
        LPVOID                        Buffer,
        LPDWORD                       lpdwBytes,
        DWORD                         dwReserved
        );

    VOID * (WINAPI * AllocMem) (
        struct _HTTP_FILTER_CONTEXT * pfc,
        DWORD                         cbSize,
        DWORD                         dwReserved
        );

    BOOL (WINAPI * ServerSupportFunction) (
        struct _HTTP_FILTER_CONTEXT * pfc,
        enum SF_REQ_TYPE              sfReq,
        PVOID                         pData,
        ULONG_PTR                     ul1,
        ULONG_PTR                     ul2
        );
} HTTP_FILTER_CONTEXT, *PHTTP_FILTER_CONTEXT;

//
//  This structure is the notification info for the read and send raw data
//  notification types
//

typedef struct _HTTP_FILTER_RAW_DATA
{
    //
    //  This is a pointer to the data for the filter to process.
    //

    PVOID         pvInData;
    DWORD         cbInData;       // Number of valid data bytes
    DWORD         cbInBuffer;     // Total size of buffer

    DWORD         dwReserved;

} HTTP_FILTER_RAW_DATA, *PHTTP_FILTER_RAW_DATA;

//
//  This structure is the notification info for when the server is about to
//  process the client headers
//

typedef struct _HTTP_FILTER_PREPROC_HEADERS
{
    //
    //  For SF_NOTIFY_PREPROC_HEADERS, retrieves the specified header value.
    //  Header names should include the trailing ':'.  The special values
    //  'method', 'url' and 'version' can be used to retrieve the individual
    //  portions of the request line
    //

    BOOL (WINAPI * GetHeader) (
        struct _HTTP_FILTER_CONTEXT * pfc,
        LPSTR                         lpszName,
        LPVOID                        lpvBuffer,
        LPDWORD                       lpdwSize
        );

    //
    //  Replaces this header value to the specified value.  To delete a header,
    //  specified a value of '\0'.
    //

    BOOL (WINAPI * SetHeader) (
        struct _HTTP_FILTER_CONTEXT * pfc,
        LPSTR                         lpszName,
        LPSTR                         lpszValue
        );

    //
    //  Adds the specified header and value
    //

    BOOL (WINAPI * AddHeader) (
        struct _HTTP_FILTER_CONTEXT * pfc,
        LPSTR                         lpszName,
        LPSTR                         lpszValue
        );

    DWORD HttpStatus;               // New in 4.0, status for SEND_RESPONSE
    DWORD dwReserved;               // New in 4.0

} HTTP_FILTER_PREPROC_HEADERS, *PHTTP_FILTER_PREPROC_HEADERS;

typedef HTTP_FILTER_PREPROC_HEADERS HTTP_FILTER_SEND_RESPONSE;
typedef HTTP_FILTER_PREPROC_HEADERS *PHTTP_FILTER_SEND_RESPONSE;

//
//  Authentication information for this request.
//

typedef struct _HTTP_FILTER_AUTHENT
{
    //
    //  Pointer to username and password, empty strings for the anonymous user
    //
    //  Client's can overwrite these buffers which are guaranteed to be at
    //  least SF_MAX_USERNAME and SF_MAX_PASSWORD bytes large.
    //

    CHAR * pszUser;
    DWORD  cbUserBuff;

    CHAR * pszPassword;
    DWORD  cbPasswordBuff;

} HTTP_FILTER_AUTHENT, *PHTTP_FILTER_AUTHENT;



//
//  Indicates the server is going to use the specific physical mapping for
//  the specified URL.  Filters can modify the physical path in place.
//

typedef struct _HTTP_FILTER_URL_MAP
{
    const CHAR * pszURL;

    CHAR *       pszPhysicalPath;
    DWORD        cbPathBuff;

} HTTP_FILTER_URL_MAP, *PHTTP_FILTER_URL_MAP;

//
//  Indicates the server is going to use the specific physical mapping for
//  the specified URL.  Filters can modify the physical path in place.
//
//  Additional members beyond those from HTTP_FILTER_URL_MAP are
//  informational.
//

typedef struct _HTTP_FILTER_URL_MAP_EX
{
    const CHAR * pszURL;

    CHAR *       pszPhysicalPath;
    DWORD        cbPathBuff;

    //
    // The AccessPerm metabase property that applies to this URL
    //
    DWORD        dwFlags;

    //
    // Number of matching characters in physical path corresponding
    // to the metabase node that applies.
    //
    DWORD        cchMatchingPath;

    //
    // Number of matching characters in the URL corresponding
    // to the metabase node that applies.
    //
    DWORD        cchMatchingURL;

    //
    // The physical path of the dll or exe that to which this
    // URL is script mapped.  This member will be NULL if no
    // script map applies.
    //
    const CHAR * pszScriptMapEntry;

} HTTP_FILTER_URL_MAP_EX, *PHTTP_FILTER_URL_MAP_EX;


//
//  Bitfield indicating the requested resource has been denied by the server due
//  to a logon failure, an ACL on a resource, an ISAPI Filter or an
//  ISAPI Application/CGI Application.
//
//  SF_DENIED_BY_CONFIG can appear with SF_DENIED_LOGON if the server
//  configuration did not allow the user to logon.
//

#define SF_DENIED_LOGON             0x00000001
#define SF_DENIED_RESOURCE          0x00000002
#define SF_DENIED_FILTER            0x00000004
#define SF_DENIED_APPLICATION       0x00000008

#define SF_DENIED_BY_CONFIG         0x00010000

typedef struct _HTTP_FILTER_ACCESS_DENIED
{
    const CHAR * pszURL;            // Requesting URL
    const CHAR * pszPhysicalPath;   // Physical path of resource
    DWORD        dwReason;          // Bitfield of SF_DENIED flags

} HTTP_FILTER_ACCESS_DENIED, *PHTTP_FILTER_ACCESS_DENIED;


//
//  The log information about to be written to the server log file.  The
//  string pointers can be replaced but the memory must remain valid until
//  the next notification
//

typedef struct _HTTP_FILTER_LOG
{
    const CHAR * pszClientHostName;
    const CHAR * pszClientUserName;
    const CHAR * pszServerName;
    const CHAR * pszOperation;
    const CHAR * pszTarget;
    const CHAR * pszParameters;

    DWORD  dwHttpStatus;
    DWORD  dwWin32Status;

    DWORD  dwBytesSent;             // IIS 4.0 and later
    DWORD  dwBytesRecvd;            // IIS 4.0 and later
    DWORD  msTimeForProcessing;     // IIS 4.0 and later

} HTTP_FILTER_LOG, *PHTTP_FILTER_LOG;

//
// Called once the client request has been authenticated.
//

typedef struct _HTTP_FILTER_AUTH_COMPLETE_INFO
{
    //
    //  For SF_NOTIFY_AUTH_COMPLETE, retrieves the specified header value.
    //  Header names should include the trailing ':'.  The special values
    //  'method', 'url' and 'version' can be used to retrieve the individual
    //  portions of the request line
    //

    BOOL (WINAPI * GetHeader) (
        struct _HTTP_FILTER_CONTEXT * pfc,
        LPSTR                         lpszName,
        LPVOID                        lpvBuffer,
        LPDWORD                       lpdwSize
        );

    //
    //  Replaces this header value to the specified value.  To delete a header,
    //  specified a value of '\0'.
    //

    BOOL (WINAPI * SetHeader) (
        struct _HTTP_FILTER_CONTEXT * pfc,
        LPSTR                         lpszName,
        LPSTR                         lpszValue
        );

    //
    //  Adds the specified header and value
    //

    BOOL (WINAPI * AddHeader) (
        struct _HTTP_FILTER_CONTEXT * pfc,
        LPSTR                         lpszName,
        LPSTR                         lpszValue
        );
        
    //
    //  Get the authenticated user impersonation token
    //
    
    BOOL (WINAPI * GetUserToken) (
        struct _HTTP_FILTER_CONTEXT * pfc,
        HANDLE *                      phToken
        );
    
    //
    //  Status code to use when sending response
    //
    
    DWORD HttpStatus;               
    
    //
    //  Determines whether to reset auth if URL changed
    //
    
    BOOL  fResetAuth;             
    
    //
    //  Reserved
    //
    
    DWORD dwReserved;            
    
} HTTP_FILTER_AUTH_COMPLETE_INFO, *PHTTP_FILTER_AUTH_COMPLETE_INFO;

//
//  Notification Flags
//
//  SF_NOTIFY_SECURE_PORT
//  SF_NOTIFY_NONSECURE_PORT
//
//      Indicates whether the application wants to be notified for transactions
//      that are happenning on the server port(s) that support data encryption
//      (such as PCT and SSL), on only the non-secure port(s) or both.
//
//  SF_NOTIFY_READ_RAW_DATA
//
//      Applications are notified after the server reads a block of memory
//      from the client but before the server does any processing on the
//      block.  The data block may contain HTTP headers and entity data.
//
//
//

#define SF_NOTIFY_SECURE_PORT               0x00000001
#define SF_NOTIFY_NONSECURE_PORT            0x00000002

#define SF_NOTIFY_READ_RAW_DATA             0x00008000
#define SF_NOTIFY_PREPROC_HEADERS           0x00004000
#define SF_NOTIFY_AUTHENTICATION            0x00002000
#define SF_NOTIFY_URL_MAP                   0x00001000
#define SF_NOTIFY_ACCESS_DENIED             0x00000800
#define SF_NOTIFY_SEND_RESPONSE             0x00000040
#define SF_NOTIFY_SEND_RAW_DATA             0x00000400
#define SF_NOTIFY_LOG                       0x00000200
#define SF_NOTIFY_END_OF_REQUEST            0x00000080
#define SF_NOTIFY_END_OF_NET_SESSION        0x00000100
#define SF_NOTIFY_AUTH_COMPLETE             0x04000000

//
//  Filter ordering flags
//
//  Filters will tend to be notified by their specified
//  ordering.  For ties, notification order is determined by load order.
//
//  SF_NOTIFY_ORDER_HIGH - Authentication or data transformation filters
//  SF_NOTIFY_ORDER_MEDIUM
//  SF_NOTIFY_ORDER_LOW  - Logging filters that want the results of any other
//                      filters might specify this order.
//

#define SF_NOTIFY_ORDER_HIGH               0x00080000
#define SF_NOTIFY_ORDER_MEDIUM             0x00040000
#define SF_NOTIFY_ORDER_LOW                0x00020000
#define SF_NOTIFY_ORDER_DEFAULT            SF_NOTIFY_ORDER_LOW

#define SF_NOTIFY_ORDER_MASK               (SF_NOTIFY_ORDER_HIGH   |    \
                                            SF_NOTIFY_ORDER_MEDIUM |    \
                                            SF_NOTIFY_ORDER_LOW)

//
//  Filter version information, passed to GetFilterVersion
//

typedef struct _HTTP_FILTER_VERSION
{
    //
    //  Version of the spec the server is using
    //

    DWORD  dwServerFilterVersion;

    //
    //  Fields specified by the client
    //

    DWORD  dwFilterVersion;
    CHAR   lpszFilterDesc[SF_MAX_FILTER_DESC_LEN];
    DWORD  dwFlags;


} HTTP_FILTER_VERSION, *PHTTP_FILTER_VERSION;



//
//  A filter DLL's entry point looks like this.  The return code should be
//  an SF_STATUS_TYPE
//
//  NotificationType - Type of notification
//  pvNotification - Pointer to notification specific data
//

DWORD
WINAPI
HttpFilterProc(
    HTTP_FILTER_CONTEXT *      pfc,
    DWORD                      NotificationType,
    VOID *                     pvNotification
    );

BOOL
WINAPI
GetFilterVersion(
    HTTP_FILTER_VERSION * pVer
    );

BOOL
WINAPI
TerminateFilter(
    DWORD dwFlags
    );


#ifdef __cplusplus
}
#endif

#endif //_HTTPFILT_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\http.h ===
/*++

Copyright (c) 1998-2002 Microsoft Corporation

Module Name:

    Http.h

Abstract:

    This header corresponds to the HTTP API specification

Revision History:

--*/


#ifndef __HTTP_H__
#define __HTTP_H__

#pragma once

#if _WIN32_WINNT >= 0x0501

//
// HTTPAPI is available on
//
// a) WinXP SP2 and higher
// b) Windows 2003 and higher
// c) Vista and higher.
//




#include <winsock2.h>
#include <ws2tcpip.h>


#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus


//
// Flags for HttpInitialize() and HttpTerminate().
//

//
// HTTP_INITIALIZE_SERVER - Initializes the HTTP API layer and driver for
//                          applications using server APIs.
//
// HTTP_INITIALIZE_CONFIG - Initializes the HTTP API layer and driver for
//                          applications using HTTP configuration APIs.
//
//
// Notes -
//
// 1. These flags can be used in combination.
//
// 2. HttpTerminate() must be called for each call to HttpInitialize() made
//    with each flag set when invoking HttpInitialize.  For example, one
//    could make two calls to HttpInitialize() setting HTTP_INITIALIZE_SERVER
//    the first time and HTTP_INITIALIZE_CONFIG the second time.  One call
//    to HttpTerminate() with both flags set suffices to clean up both
//    calls to HttpInitialize().
//

#define HTTP_INITIALIZE_SERVER          0x00000001
#define HTTP_INITIALIZE_CONFIG          0x00000002

#if _WIN32_WINNT >= 0x0600

//
// Following section defines the properties supported by the
// server side HTTP API.
//

typedef enum _HTTP_SERVER_PROPERTY
{
    //
    // Used for enabling server side authentication.
    //

    HttpServerAuthenticationProperty,

    //
    // Used for enabling logging.
    //

    HttpServerLoggingProperty,

    //
    // Used for setting QoS properties.
    //

    HttpServerQosProperty,

    //
    // Used for configuring timeouts.
    //

    HttpServerTimeoutsProperty,

    //
    // Used for limiting request queue lengths.
    //

    HttpServerQueueLengthProperty,

    //
    // Used for manipulating the state.
    //

    HttpServerStateProperty,

    //
    // Used for modifying the verbosity level of 503 type responses
    // generated by server side API.
    //

    HttpServer503VerbosityProperty,

    //
    // Used for manipulating Url Group to Request Queue association.
    //

    HttpServerBindingProperty,

    //
    // Extended authentication property.
    //

    HttpServerExtendedAuthenticationProperty,

    //
    // Listening endpoint property.
    //

    HttpServerListenEndpointProperty

    //
    // Authentication channel binding property
    //

#endif
#if _WIN32_WINNT >= _WIN32_WINNT_WIN7

    ,HttpServerChannelBindProperty

    //
    // IP Protection level policy for a Url Group.
    //

    ,HttpServerProtectionLevelProperty
#endif
#if _WIN32_WINNT >= 0x0600


} HTTP_SERVER_PROPERTY, *PHTTP_SERVER_PROPERTY;


#define HTTP_MAX_SERVER_QUEUE_LENGTH    0x7FFFFFFF
#define HTTP_MIN_SERVER_QUEUE_LENGTH    1

//
// Generic property flags. Each structure defining a property info typically
// contain an element of this type.
//

typedef struct _HTTP_PROPERTY_FLAGS
{
    ULONG Present:1;

} HTTP_PROPERTY_FLAGS, *PHTTP_PROPERTY_FLAGS;

//
// Enabled state.
//

typedef enum _HTTP_ENABLED_STATE
{
    HttpEnabledStateActive,
    HttpEnabledStateInactive,

} HTTP_ENABLED_STATE, *PHTTP_ENABLED_STATE;


typedef struct _HTTP_STATE_INFO
{
    HTTP_PROPERTY_FLAGS Flags;
    HTTP_ENABLED_STATE  State;

} HTTP_STATE_INFO, *PHTTP_STATE_INFO;

//
// Defines the verbosity level for a request queue which will be used
// when sending "503 - Service Unavailable" type error responses. Note that
// this setting only affects the error responses generated internally
// by HTTPAPI.
//

typedef enum _HTTP_503_RESPONSE_VERBOSITY
{
    //
    // Instead of sending a 503 response, the connection will be reset.
    // This is the default behavior.
    //
    Http503ResponseVerbosityBasic,

    //
    // Will send a 503 w/ a generic reason phrase.
    //
    Http503ResponseVerbosityLimited,

    //
    // Will send a 503 w/ a detailed reason phrase.
    //
    Http503ResponseVerbosityFull

} HTTP_503_RESPONSE_VERBOSITY, *PHTTP_503_RESPONSE_VERBOSITY;

//
// Network QoS related.
//

typedef enum _HTTP_QOS_SETTING_TYPE
{
    HttpQosSettingTypeBandwidth,
    HttpQosSettingTypeConnectionLimit,
    HttpQosSettingTypeFlowRate

} HTTP_QOS_SETTING_TYPE, *PHTTP_QOS_SETTING_TYPE;

typedef struct _HTTP_QOS_SETTING_INFO
{
    HTTP_QOS_SETTING_TYPE QosType;
    PVOID QosSetting;
} HTTP_QOS_SETTING_INFO, *PHTTP_QOS_SETTING_INFO;

typedef struct _HTTP_CONNECTION_LIMIT_INFO
{
    HTTP_PROPERTY_FLAGS Flags;
    ULONG MaxConnections;

} HTTP_CONNECTION_LIMIT_INFO, *PHTTP_CONNECTION_LIMIT_INFO;

typedef struct _HTTP_BANDWIDTH_LIMIT_INFO
{
    HTTP_PROPERTY_FLAGS Flags;
    ULONG MaxBandwidth;

} HTTP_BANDWIDTH_LIMIT_INFO, *PHTTP_BANDWIDTH_LIMIT_INFO;

typedef struct _HTTP_FLOWRATE_INFO
{
    HTTP_PROPERTY_FLAGS Flags;
    ULONG MaxBandwidth;
    ULONG MaxPeakBandwidth;
    ULONG BurstSize;

} HTTP_FLOWRATE_INFO, *PHTTP_FLOWRATE_INFO;

//
// Bandwidth throttling limit can not be set lower than the following
// number. The value is in bytes/sec.
//

#define HTTP_MIN_ALLOWED_BANDWIDTH_THROTTLING_RATE ((ULONG)1024)

//
// Distinguished value for bandwidth, connection limits and logging rollover
// size indicating "no limit".
//

#define HTTP_LIMIT_INFINITE   ((ULONG)-1)

//
// Timeout information.
//

//
// For manipulating global timeout settings.
// These timers run when connection does not belong to any application.
// Value zero is not allowed for driver wide timeout settings.
//

typedef enum _HTTP_SERVICE_CONFIG_TIMEOUT_KEY
{
    IdleConnectionTimeout = 0,
    HeaderWaitTimeout

} HTTP_SERVICE_CONFIG_TIMEOUT_KEY, *PHTTP_SERVICE_CONFIG_TIMEOUT_KEY;

typedef USHORT HTTP_SERVICE_CONFIG_TIMEOUT_PARAM,
               *PHTTP_SERVICE_CONFIG_TIMEOUT_PARAM;

//
// To set a timeout value use the set structure. To query/delete use the key
// directly. When you query a timeout value the output buffer must be exactly
// the sizeof param.
//

typedef struct _HTTP_SERVICE_CONFIG_TIMEOUT_SET
{
    HTTP_SERVICE_CONFIG_TIMEOUT_KEY KeyDesc;
    HTTP_SERVICE_CONFIG_TIMEOUT_PARAM ParamDesc;

} HTTP_SERVICE_CONFIG_TIMEOUT_SET, *PHTTP_SERVICE_CONFIG_TIMEOUT_SET;

//
// For manipulating application specific timeout settings.
// These timers run when there's a request being processed on a connection
// and HTTPAPI has already associated the request with an application.
// Setting a timeout value to zero will cause HTTPAPI to revert to default.
//

typedef struct _HTTP_TIMEOUT_LIMIT_INFO
{
    HTTP_PROPERTY_FLAGS Flags;

    //
    // Timeouts configured in seconds.
    //

    USHORT EntityBody;
    USHORT DrainEntityBody;
    USHORT RequestQueue;

    //
    // Following two timeouts are only enforced after first request on
    // connection is routed to the application. These will not manipulate
    // the driver wide timeouts.
    //

    USHORT IdleConnection;
    USHORT HeaderWait;

    //
    // Timeouts configured in bytes/second.
    // This timer can be turned off by setting it to MAXULONG.
    //

    ULONG MinSendRate;

} HTTP_TIMEOUT_LIMIT_INFO, *PHTTP_TIMEOUT_LIMIT_INFO;

//
// Controls whether IP-based URLs should listen on the specific IP or wildcard.
//

typedef struct _HTTP_LISTEN_ENDPOINT_INFO
{
    HTTP_PROPERTY_FLAGS Flags;

    BOOLEAN EnableSharing;

} HTTP_LISTEN_ENDPOINT_INFO, *PHTTP_LISTEN_ENDPOINT_INFO;


typedef struct _HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS
{
    USHORT              DomainNameLength;
    PWSTR               DomainName;
    USHORT              RealmLength;
    PWSTR               Realm;
} HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS,
  *PHTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS;

typedef struct _HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS
{
    USHORT      RealmLength;
    PWSTR       Realm;
} HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS,
  *PHTTP_SERVER_AUTHENTICATION_BASIC_PARAMS;

//
// Definitions used for setting server side authentication property.
//

#define HTTP_AUTH_ENABLE_BASIC          (0x00000001)
#define HTTP_AUTH_ENABLE_DIGEST         (0x00000002)
#define HTTP_AUTH_ENABLE_NTLM           (0x00000004)
#define HTTP_AUTH_ENABLE_NEGOTIATE      (0x00000008)
#define HTTP_AUTH_ENABLE_KERBEROS       (0x00000010)

#define HTTP_AUTH_ENABLE_ALL             \
            (HTTP_AUTH_ENABLE_BASIC     |\
             HTTP_AUTH_ENABLE_DIGEST    |\
             HTTP_AUTH_ENABLE_NTLM      |\
             HTTP_AUTH_ENABLE_NEGOTIATE |\
             HTTP_AUTH_ENABLE_KERBEROS)


C_ASSERT(HTTP_AUTH_ENABLE_NEGOTIATE > HTTP_AUTH_ENABLE_NTLM);
C_ASSERT(HTTP_AUTH_ENABLE_NTLM > HTTP_AUTH_ENABLE_DIGEST);
C_ASSERT(HTTP_AUTH_ENABLE_DIGEST > HTTP_AUTH_ENABLE_BASIC);

#define HTTP_AUTH_EX_FLAG_ENABLE_KERBEROS_CREDENTIAL_CACHING  (0x01)
#define HTTP_AUTH_EX_FLAG_CAPTURE_CREDENTIAL                  (0x02)

typedef struct _HTTP_SERVER_AUTHENTICATION_INFO
{
    HTTP_PROPERTY_FLAGS Flags;

    ULONG AuthSchemes;

    BOOLEAN ReceiveMutualAuth;
    BOOLEAN ReceiveContextHandle;
    BOOLEAN DisableNTLMCredentialCaching;

    UCHAR   ExFlags;

    HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS DigestParams;
    HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS  BasicParams;

} HTTP_SERVER_AUTHENTICATION_INFO, *PHTTP_SERVER_AUTHENTICATION_INFO;

#if _WIN32_WINNT >= _WIN32_WINNT_WIN7

//
// Definitions for setting authentication channel binding properties
//

typedef enum _HTTP_SERVICE_BINDING_TYPE
{
    HttpServiceBindingTypeNone = 0,
    HttpServiceBindingTypeW,
    HttpServiceBindingTypeA

} HTTP_SERVICE_BINDING_TYPE;

typedef struct _HTTP_SERVICE_BINDING_BASE
{
    HTTP_SERVICE_BINDING_TYPE Type;

} HTTP_SERVICE_BINDING_BASE, *PHTTP_SERVICE_BINDING_BASE;

typedef struct _HTTP_SERVICE_BINDING_A
{
    HTTP_SERVICE_BINDING_BASE Base;
    PCHAR Buffer;
    ULONG BufferSize;

} HTTP_SERVICE_BINDING_A, *PHTTP_SERVICE_BINDING_A;

typedef struct _HTTP_SERVICE_BINDING_W
{
    HTTP_SERVICE_BINDING_BASE Base;
    PWCHAR Buffer;
    ULONG BufferSize;

} HTTP_SERVICE_BINDING_W, *PHTTP_SERVICE_BINDING_W;

typedef enum _HTTP_AUTHENTICATION_HARDENING_LEVELS
{
    HttpAuthenticationHardeningLegacy = 0,
    HttpAuthenticationHardeningMedium,
    HttpAuthenticationHardeningStrict

} HTTP_AUTHENTICATION_HARDENING_LEVELS;

//
// Channel binding token verification flags.
//

#define HTTP_CHANNEL_BIND_PROXY 0x1
#define HTTP_CHANNEL_BIND_PROXY_COHOSTING 0x20

//
// Service bind verification flags
//

#define HTTP_CHANNEL_BIND_NO_SERVICE_NAME_CHECK 0x2
#define HTTP_CHANNEL_BIND_DOTLESS_SERVICE 0x4

//
// Flags triggering channel bind parameters retrieval
//

#define HTTP_CHANNEL_BIND_SECURE_CHANNEL_TOKEN 0x8
#define HTTP_CHANNEL_BIND_CLIENT_SERVICE 0x10

//
// All valid flags (mask for internal checks)
//

typedef struct _HTTP_CHANNEL_BIND_INFO
{
    HTTP_AUTHENTICATION_HARDENING_LEVELS Hardening;
    ULONG Flags;
    PHTTP_SERVICE_BINDING_BASE * ServiceNames;
    ULONG NumberOfServiceNames;

} HTTP_CHANNEL_BIND_INFO, *PHTTP_CHANNEL_BIND_INFO;

typedef struct _HTTP_REQUEST_CHANNEL_BIND_STATUS
{
    PHTTP_SERVICE_BINDING_BASE ServiceName;
    PUCHAR ChannelToken;
    ULONG ChannelTokenSize;
    ULONG Flags;

} HTTP_REQUEST_CHANNEL_BIND_STATUS, *PHTTP_REQUEST_CHANNEL_BIND_STATUS;

#endif

//
// Definitions used for setting logging property.
//

//
// The known log fields recognized/supported by HTTPAPI. Following fields
// are used for W3C logging. Subset of them are also used for error
// logging.
//

#define HTTP_LOG_FIELD_DATE                  0x00000001
#define HTTP_LOG_FIELD_TIME                  0x00000002
#define HTTP_LOG_FIELD_CLIENT_IP             0x00000004
#define HTTP_LOG_FIELD_USER_NAME             0x00000008
#define HTTP_LOG_FIELD_SITE_NAME             0x00000010
#define HTTP_LOG_FIELD_COMPUTER_NAME         0x00000020
#define HTTP_LOG_FIELD_SERVER_IP             0x00000040
#define HTTP_LOG_FIELD_METHOD                0x00000080
#define HTTP_LOG_FIELD_URI_STEM              0x00000100
#define HTTP_LOG_FIELD_URI_QUERY             0x00000200
#define HTTP_LOG_FIELD_STATUS                0x00000400
#define HTTP_LOG_FIELD_WIN32_STATUS          0x00000800
#define HTTP_LOG_FIELD_BYTES_SENT            0x00001000
#define HTTP_LOG_FIELD_BYTES_RECV            0x00002000
#define HTTP_LOG_FIELD_TIME_TAKEN            0x00004000
#define HTTP_LOG_FIELD_SERVER_PORT           0x00008000
#define HTTP_LOG_FIELD_USER_AGENT            0x00010000
#define HTTP_LOG_FIELD_COOKIE                0x00020000
#define HTTP_LOG_FIELD_REFERER               0x00040000
#define HTTP_LOG_FIELD_VERSION               0x00080000
#define HTTP_LOG_FIELD_HOST                  0x00100000
#define HTTP_LOG_FIELD_SUB_STATUS            0x00200000

//
// Fields that are used only for error logging.
//

#define HTTP_LOG_FIELD_CLIENT_PORT           0x00400000
#define HTTP_LOG_FIELD_URI                   0x00800000
#define HTTP_LOG_FIELD_SITE_ID               0x01000000
#define HTTP_LOG_FIELD_REASON                0x02000000
#define HTTP_LOG_FIELD_QUEUE_NAME            0x04000000

//
// Defines the logging type.
//

typedef enum _HTTP_LOGGING_TYPE
{
    HttpLoggingTypeW3C,
    HttpLoggingTypeIIS,
    HttpLoggingTypeNCSA,
    HttpLoggingTypeRaw

} HTTP_LOGGING_TYPE, *PHTTP_LOGGING_TYPE;

//
// Defines the rollover type for log files.
//

typedef enum _HTTP_LOGGING_ROLLOVER_TYPE
{
    HttpLoggingRolloverSize,
    HttpLoggingRolloverDaily,
    HttpLoggingRolloverWeekly,
    HttpLoggingRolloverMonthly,
    HttpLoggingRolloverHourly

} HTTP_LOGGING_ROLLOVER_TYPE, *PHTTP_LOGGING_ROLLOVER_TYPE;

//
// Log file rollover size can not be set lower than the following
// limit. The value is in bytes.
//

#define HTTP_MIN_ALLOWED_LOG_FILE_ROLLOVER_SIZE ((ULONG)(1 * 1024 * 1024))

//
// Logging option flags. When used in the logging configuration alters
// some default logging behaviour.
//
// HTTP_LOGGING_FLAG_LOCAL_TIME_ROLLOVER - This flag is used to change
//      the log file rollover to happen by local time based. By default
//      log file rollovers happen by GMT time.
//
// HTTP_LOGGING_FLAG_USE_UTF8_CONVERSION - When set the unicode fields
//      will be converted to UTF8 multibytes when writting to the log
//      files. When this flag is not present, the local code page
//      conversion happens.
//
// HTTP_LOGGING_FLAG_LOG_ERRORS_ONLY -
// HTTP_LOGGING_FLAG_LOG_SUCCESS_ONLY - These two flags are used to
//      to do selective logging. If neither of them are present both
//      types of requests will be logged. Only one these flags can be
//      set at a time. They are mutually exclusive.
//

#define HTTP_LOGGING_FLAG_LOCAL_TIME_ROLLOVER         (0x00000001)
#define HTTP_LOGGING_FLAG_USE_UTF8_CONVERSION         (0x00000002)
#define HTTP_LOGGING_FLAG_LOG_ERRORS_ONLY             (0x00000004)
#define HTTP_LOGGING_FLAG_LOG_SUCCESS_ONLY            (0x00000008)

//
// Configuration structure used for setting the logging property.
//

typedef struct _HTTP_LOGGING_INFO
{
    //
    // Specifies whether this property exists or not.
    //

    HTTP_PROPERTY_FLAGS Flags;

    //
    // Optional logging flags.
    //

    ULONG LoggingFlags;

    //
    // Optional informatonal software directive string for W3C type logging. Not
    // used for other types of logging. If nothing is provided here HTTPAPI will
    // log a default string. Any arbitrary string could be used here to identify
    // the application. Length cannot be greater than MAX_PATH. Lenght is in
    // bytes.
    //

    PCWSTR SoftwareName;
    USHORT SoftwareNameLength;

    //
    // Log file directory must be a fully qualified path.
    // Length must be in number of bytes.
    //

    USHORT DirectoryNameLength;
    PCWSTR DirectoryName;

    //
    // Specifies the format for the log files.
    //

    HTTP_LOGGING_TYPE Format;

    //
    // Bitmask value indicates which fields to be logged
    // if the log format is set to W3C. This must be the 'bitwise or'
    // of the HTTP_LOG_FIELD_... values.
    //

    ULONG Fields;

    //
    // Following fields are reserved they must be NULL and zero..
    //

    PVOID pExtFields;
    USHORT NumOfExtFields;

    //
    // Reserved must be zero.
    //

    USHORT MaxRecordSize;

    //
    // Defines the rollover type for the log files.
    //

    HTTP_LOGGING_ROLLOVER_TYPE RolloverType;

    //
    // Indicates the maximum size (in bytes) after which
    // the log files should be rolled over. A value of -1
    // (HTTP_LIMIT_INFINITE) indicates an unlimited size.
    // This value is discarded if rollover type is not set to
    // HttpLoggingRolloverSize.
    //

    ULONG RolloverSize;

    //
    // Specifies the security descriptor to be applied to
    // the log files and the sub-directories. If null we will
    // inherit the system default. This security descriptor must
    // be self-relative.
    //

    PSECURITY_DESCRIPTOR pSecurityDescriptor;

} HTTP_LOGGING_INFO, *PHTTP_LOGGING_INFO;

//
// Binding information.
//

typedef struct _HTTP_BINDING_INFO
{
    HTTP_PROPERTY_FLAGS Flags;
    HANDLE RequestQueueHandle;

} HTTP_BINDING_INFO, *PHTTP_BINDING_INFO;

#endif
#if _WIN32_WINNT >= _WIN32_WINNT_WIN7

//
// Defines the protection level types for UrlGroups.
//

typedef enum _HTTP_PROTECTION_LEVEL_TYPE
{
    //
    // This option will allow edge (NAT) traversed traffic, i.e. Teredo
    // for the UrlGroup, unless there is an admin rule that overwrites the
    // application's intend.
    //

    HttpProtectionLevelUnrestricted,

    //
    // This setting will ensure that edge (NAT) traversed traffic
    // will not be allowed.
    //

    HttpProtectionLevelEdgeRestricted,

    //
    // Below type is not supported by HTTP API.
    //

    HttpProtectionLevelRestricted


} HTTP_PROTECTION_LEVEL_TYPE, *PHTTP_PROTECTION_LEVEL_TYPE;

//
// Controls whether the associated UrlGroup Namespace should receive
// edge traversed traffic. By default this parameter is unspecified.
//

typedef struct _HTTP_PROTECTION_LEVEL_INFO
{
    HTTP_PROPERTY_FLAGS Flags;
    HTTP_PROTECTION_LEVEL_TYPE Level;

} HTTP_PROTECTION_LEVEL_INFO, *PHTTP_PROTECTION_LEVEL_INFO;

#endif
#if _WIN32_WINNT >= 0x0600

//
// Definitions for request queue manipulation.
//
// These flags are used with HttpCreateRequestQueue() API.
//
// HTTP_CREATE_REQUEST_QUEUE_FLAG_OPEN_EXISTING - To open an existing request
// queue. The request queue name must be supplied.
//
// HTTP_CREATE_REQUEST_QUEUE_FLAG_CONTROLLER - Creates the request queue and
// marks that the caller process is not willing to do send/receive (HTTP I/O)on
// the handle directly.
//

#define HTTP_CREATE_REQUEST_QUEUE_FLAG_OPEN_EXISTING       (0x00000001)
#define HTTP_CREATE_REQUEST_QUEUE_FLAG_CONTROLLER          (0x00000002)

#endif // _WIN32_WINNT >= 0x0600

//
// Flags for HttpReceiveHttpRequest().
//
// HTTP_RECEIVE_REQUEST_FLAG_COPY_BODY - Specifies that the caller would like
// any available entity body to be copied along with the protocol headers.
//
// HTTP_RECEIVE_REQUEST_FLAG_FLUSH_BODY - Specifies that the caller would like
// all of the entity bodies to be copied along with the protocol headers.
//

#define HTTP_RECEIVE_REQUEST_FLAG_COPY_BODY         0x00000001
#define HTTP_RECEIVE_REQUEST_FLAG_FLUSH_BODY        0x00000002


#if _WIN32_WINNT >= 0x0600

//
// Flags for HttpReceiveRequestEntityBody().
//
// HTTP_RECEIVE_REQUEST_ENTITY_BODY_FLAG_FILL_BUFFER - Specifies that the
// caller would like the buffer to get filled up with entity bodies unless
// there are no more entity bodies to be copied.
//

#define HTTP_RECEIVE_REQUEST_ENTITY_BODY_FLAG_FILL_BUFFER   0x00000001

#endif // _WIN32_WINNT >= 0x0600


//
// Flags for HttpSendHttpResponse() and HttpSendResponseEntityBody().
//
// HTTP_SEND_RESPONSE_FLAG_DISCONNECT - Specifies that the network connection
// should be disconnected immediately after sending the response, overriding
// the HTTP protocol's persistent connection features, such as
// "Connection: keep-alive".
//
// HTTP_SEND_RESPONSE_FLAG_MORE_DATA - Specifies that additional entity body
// data will be sent by the caller.
//
// HTTP_SEND_RESPONSE_FLAG_BUFFER_DATA - Specifies that a caller wants the
// response to complete as soon as possible at the cost of buffering partial
// or the entire response.
//
// HTTP_SEND_RESPONSE_FLAG_ENABLE_NAGLING - Specifies that a caller wants to
// enable the TCP nagling algorithm for this particular send.
//
// HTTP_SEND_RESPONSE_FLAG_PROCESS_RANGES - Specifies that for a range request
// a full response content is passed and a caller wants HTTP API to process
// ranges properly.
//

#define HTTP_SEND_RESPONSE_FLAG_DISCONNECT          0x00000001
#define HTTP_SEND_RESPONSE_FLAG_MORE_DATA           0x00000002
#define HTTP_SEND_RESPONSE_FLAG_BUFFER_DATA         0x00000004
#define HTTP_SEND_RESPONSE_FLAG_ENABLE_NAGLING      0x00000008
#define HTTP_SEND_RESPONSE_FLAG_PROCESS_RANGES      0x00000020


//
// Flags for HttpFlushResponseCache().
//
// HTTP_FLUSH_RESPONSE_FLAG_RECURSIVE - Flushes the specified URL and all
// hierarchally-related sub-URLs from the response or fragment cache.
//

#define HTTP_FLUSH_RESPONSE_FLAG_RECURSIVE          0x00000001


//
// Opaque identifiers for various HTTPAPI objects.
//

typedef ULONGLONG      HTTP_OPAQUE_ID,         *PHTTP_OPAQUE_ID;

typedef HTTP_OPAQUE_ID HTTP_REQUEST_ID,        *PHTTP_REQUEST_ID;
typedef HTTP_OPAQUE_ID HTTP_CONNECTION_ID,     *PHTTP_CONNECTION_ID;
typedef HTTP_OPAQUE_ID HTTP_RAW_CONNECTION_ID, *PHTTP_RAW_CONNECTION_ID;

#if _WIN32_WINNT >= 0x0600

typedef HTTP_OPAQUE_ID HTTP_URL_GROUP_ID,      *PHTTP_URL_GROUP_ID;
typedef HTTP_OPAQUE_ID HTTP_SERVER_SESSION_ID, *PHTTP_SERVER_SESSION_ID;

#endif // _WIN32_WINNT >= 0x0600

//
// Macros for opaque identifier manipulations.
//

#define HTTP_NULL_ID            (0ui64)
#define HTTP_IS_NULL_ID(pid)    (HTTP_NULL_ID == *(pid))
#define HTTP_SET_NULL_ID(pid)   (*(pid) = HTTP_NULL_ID)

//
// This structure defines a file byte range.
//
// If the Length field is HTTP_BYTE_RANGE_TO_EOF then the remainder of the
// file (everything after StartingOffset) is sent.
//

#define HTTP_BYTE_RANGE_TO_EOF ((ULONGLONG)-1)

typedef struct _HTTP_BYTE_RANGE
{
    ULARGE_INTEGER StartingOffset;
    ULARGE_INTEGER Length;

} HTTP_BYTE_RANGE, *PHTTP_BYTE_RANGE;

//
// The type for HTTP protocol version numbers.
//

typedef struct _HTTP_VERSION
{
    USHORT MajorVersion;
    USHORT MinorVersion;

} HTTP_VERSION, *PHTTP_VERSION;

//
// Some useful macros for HTTP protocol version manipulation.
//

#define HTTP_VERSION_UNKNOWN    { 0, 0 }
#define HTTP_VERSION_0_9        { 0, 9 }
#define HTTP_VERSION_1_0        { 1, 0 }
#define HTTP_VERSION_1_1        { 1, 1 }

#define HTTP_SET_VERSION(version, major, minor)             \
do {                                                        \
    (version).MajorVersion = (major);                       \
    (version).MinorVersion = (minor);                       \
} while (0, 0)

#define HTTP_EQUAL_VERSION(version, major, minor)           \
    ((version).MajorVersion == (major) &&                   \
     (version).MinorVersion == (minor))

#define HTTP_GREATER_VERSION(version, major, minor)         \
    ((version).MajorVersion > (major) ||                    \
     ((version).MajorVersion == (major) &&                  \
      (version).MinorVersion > (minor)))

#define HTTP_LESS_VERSION(version, major, minor)            \
    ((version).MajorVersion < (major) ||                    \
     ((version).MajorVersion == (major) &&                  \
      (version).MinorVersion < (minor)))

#define HTTP_NOT_EQUAL_VERSION(version, major, minor)       \
    (!HTTP_EQUAL_VERSION(version, major, minor))

#define HTTP_GREATER_EQUAL_VERSION(version, major, minor)   \
    (!HTTP_LESS_VERSION(version, major, minor))

#define HTTP_LESS_EQUAL_VERSION(version, major, minor)      \
    (!HTTP_GREATER_VERSION(version, major, minor))

//
// The enum type for HTTP verbs.
//

typedef enum _HTTP_VERB
{
    HttpVerbUnparsed,
    HttpVerbUnknown,
    HttpVerbInvalid,
    HttpVerbOPTIONS,
    HttpVerbGET,
    HttpVerbHEAD,
    HttpVerbPOST,
    HttpVerbPUT,
    HttpVerbDELETE,
    HttpVerbTRACE,
    HttpVerbCONNECT,
    HttpVerbTRACK,  // used by Microsoft Cluster Server for a non-logged trace
    HttpVerbMOVE,
    HttpVerbCOPY,
    HttpVerbPROPFIND,
    HttpVerbPROPPATCH,
    HttpVerbMKCOL,
    HttpVerbLOCK,
    HttpVerbUNLOCK,
    HttpVerbSEARCH,

    HttpVerbMaximum

} HTTP_VERB, *PHTTP_VERB;

//
// Symbols for all HTTP/1.1 headers and other tokens. Notice request +
// response values overlap. Make sure you know which type of header array
// you are indexing.
//
// These values are used as offsets into arrays and as token values in
// HTTP_KNOWN_HEADER arrays in HTTP_REQUEST_HEADERS and HTTP_RESPONSE_HEADERS.
//
// See RFC 2616, HTTP/1.1, for further explanation of most of these headers.
//

typedef enum _HTTP_HEADER_ID
{
    HttpHeaderCacheControl          = 0,    // general-header [section 4.5]
    HttpHeaderConnection            = 1,    // general-header [section 4.5]
    HttpHeaderDate                  = 2,    // general-header [section 4.5]
    HttpHeaderKeepAlive             = 3,    // general-header [not in rfc]
    HttpHeaderPragma                = 4,    // general-header [section 4.5]
    HttpHeaderTrailer               = 5,    // general-header [section 4.5]
    HttpHeaderTransferEncoding      = 6,    // general-header [section 4.5]
    HttpHeaderUpgrade               = 7,    // general-header [section 4.5]
    HttpHeaderVia                   = 8,    // general-header [section 4.5]
    HttpHeaderWarning               = 9,    // general-header [section 4.5]

    HttpHeaderAllow                 = 10,   // entity-header  [section 7.1]
    HttpHeaderContentLength         = 11,   // entity-header  [section 7.1]
    HttpHeaderContentType           = 12,   // entity-header  [section 7.1]
    HttpHeaderContentEncoding       = 13,   // entity-header  [section 7.1]
    HttpHeaderContentLanguage       = 14,   // entity-header  [section 7.1]
    HttpHeaderContentLocation       = 15,   // entity-header  [section 7.1]
    HttpHeaderContentMd5            = 16,   // entity-header  [section 7.1]
    HttpHeaderContentRange          = 17,   // entity-header  [section 7.1]
    HttpHeaderExpires               = 18,   // entity-header  [section 7.1]
    HttpHeaderLastModified          = 19,   // entity-header  [section 7.1]


    // Request Headers

    HttpHeaderAccept                = 20,   // request-header [section 5.3]
    HttpHeaderAcceptCharset         = 21,   // request-header [section 5.3]
    HttpHeaderAcceptEncoding        = 22,   // request-header [section 5.3]
    HttpHeaderAcceptLanguage        = 23,   // request-header [section 5.3]
    HttpHeaderAuthorization         = 24,   // request-header [section 5.3]
    HttpHeaderCookie                = 25,   // request-header [not in rfc]
    HttpHeaderExpect                = 26,   // request-header [section 5.3]
    HttpHeaderFrom                  = 27,   // request-header [section 5.3]
    HttpHeaderHost                  = 28,   // request-header [section 5.3]
    HttpHeaderIfMatch               = 29,   // request-header [section 5.3]

    HttpHeaderIfModifiedSince       = 30,   // request-header [section 5.3]
    HttpHeaderIfNoneMatch           = 31,   // request-header [section 5.3]
    HttpHeaderIfRange               = 32,   // request-header [section 5.3]
    HttpHeaderIfUnmodifiedSince     = 33,   // request-header [section 5.3]
    HttpHeaderMaxForwards           = 34,   // request-header [section 5.3]
    HttpHeaderProxyAuthorization    = 35,   // request-header [section 5.3]
    HttpHeaderReferer               = 36,   // request-header [section 5.3]
    HttpHeaderRange                 = 37,   // request-header [section 5.3]
    HttpHeaderTe                    = 38,   // request-header [section 5.3]
    HttpHeaderTranslate             = 39,   // request-header [webDAV, not in rfc 2518]

    HttpHeaderUserAgent             = 40,   // request-header [section 5.3]

    HttpHeaderRequestMaximum        = 41,


    // Response Headers

    HttpHeaderAcceptRanges          = 20,   // response-header [section 6.2]
    HttpHeaderAge                   = 21,   // response-header [section 6.2]
    HttpHeaderEtag                  = 22,   // response-header [section 6.2]
    HttpHeaderLocation              = 23,   // response-header [section 6.2]
    HttpHeaderProxyAuthenticate     = 24,   // response-header [section 6.2]
    HttpHeaderRetryAfter            = 25,   // response-header [section 6.2]
    HttpHeaderServer                = 26,   // response-header [section 6.2]
    HttpHeaderSetCookie             = 27,   // response-header [not in rfc]
    HttpHeaderVary                  = 28,   // response-header [section 6.2]
    HttpHeaderWwwAuthenticate       = 29,   // response-header [section 6.2]

    HttpHeaderResponseMaximum       = 30,


    HttpHeaderMaximum               = 41

} HTTP_HEADER_ID, *PHTTP_HEADER_ID;


//
// Structure defining format of a known HTTP header.
// Name is from HTTP_HEADER_ID.
//

typedef struct _HTTP_KNOWN_HEADER
{
    USHORT RawValueLength;     // in bytes not including the NUL
    PCSTR  pRawValue;

} HTTP_KNOWN_HEADER, *PHTTP_KNOWN_HEADER;

//
// Structure defining format of an unknown header.
//

typedef struct _HTTP_UNKNOWN_HEADER
{
    USHORT NameLength;          // in bytes not including the NUL
    USHORT RawValueLength;      // in bytes not including the NUL
    PCSTR  pName;               // The header name (minus the ':' character)
    PCSTR  pRawValue;           // The header value

} HTTP_UNKNOWN_HEADER, *PHTTP_UNKNOWN_HEADER;

#if _WIN32_WINNT >= 0x0600

//
// Log fields data structure is used for logging a request. This structure must
// be provided along with an HttpSendHttpResponse or HttpSendResponseEntityBody
// call that concludes the send.
//

// Base structure is for future versioning.

typedef enum _HTTP_LOG_DATA_TYPE
{
    HttpLogDataTypeFields = 0

} HTTP_LOG_DATA_TYPE, *PHTTP_LOG_DATA_TYPE;

// should we DECLSPEC_ALIGN(4 or 8) == DECLSPEC_POINTERALIGN?
typedef struct _HTTP_LOG_DATA
{
    HTTP_LOG_DATA_TYPE Type;

} HTTP_LOG_DATA, *PHTTP_LOG_DATA;

// Current log fields data structure for of type HttpLogDataTypeFields.

typedef struct _HTTP_LOG_FIELDS_DATA
{
    HTTP_LOG_DATA Base;

    USHORT UserNameLength;
    USHORT UriStemLength;
    USHORT ClientIpLength;
    USHORT ServerNameLength;
    USHORT ServiceNameLength;
    USHORT ServerIpLength;
    USHORT MethodLength;
    USHORT UriQueryLength;
    USHORT HostLength;
    USHORT UserAgentLength;
    USHORT CookieLength;
    USHORT ReferrerLength;

    PWCHAR UserName;
    PWCHAR UriStem;
    PCHAR  ClientIp;
    PCHAR  ServerName;
    PCHAR  ServiceName;
    PCHAR  ServerIp;
    PCHAR  Method;
    PCHAR  UriQuery;
    PCHAR  Host;
    PCHAR  UserAgent;
    PCHAR  Cookie;
    PCHAR  Referrer;

    USHORT ServerPort;
    USHORT ProtocolStatus;

    ULONG  Win32Status;

    HTTP_VERB MethodNum;

    USHORT SubStatus;

} HTTP_LOG_FIELDS_DATA, *PHTTP_LOG_FIELDS_DATA;

#endif // _WIN32_WINNT >= 0x0600

//
// This enum defines a data source for a particular chunk of data.
//

typedef enum _HTTP_DATA_CHUNK_TYPE
{
    HttpDataChunkFromMemory,
    HttpDataChunkFromFileHandle,
    HttpDataChunkFromFragmentCache,
    HttpDataChunkFromFragmentCacheEx,

    HttpDataChunkMaximum

} HTTP_DATA_CHUNK_TYPE, *PHTTP_DATA_CHUNK_TYPE;


//
// This structure describes an individual data chunk.
//

typedef struct _HTTP_DATA_CHUNK
{
    //
    // The type of this data chunk.
    //

    HTTP_DATA_CHUNK_TYPE DataChunkType;

    //
    // The data chunk structures, one per supported data chunk type.
    //

    union
    {
        //
        // From-memory data chunk.
        //

        struct
        {
            PVOID pBuffer;
            ULONG BufferLength;

        } FromMemory;

        //
        // From-file handle data chunk.
        //

        struct
        {
            HTTP_BYTE_RANGE ByteRange;
            HANDLE          FileHandle;

        } FromFileHandle;

        //
        // From-fragment cache data chunk.
        //

        struct
        {
            USHORT FragmentNameLength;      // in bytes not including the NUL
            PCWSTR pFragmentName;

        } FromFragmentCache;

        //
        // From-fragment cache data chunk that specifies a byte range.
        //

        struct
        {
            HTTP_BYTE_RANGE ByteRange;
            PCWSTR pFragmentName;           // NULL-terminated string

        } FromFragmentCacheEx;

    };

} HTTP_DATA_CHUNK, *PHTTP_DATA_CHUNK;

//
// HTTP API doesn't support 16 bit applications.
// Neither WIN32 nor _WIN64 was defined.
//

C_ASSERT(TYPE_ALIGNMENT(HTTP_DATA_CHUNK) == sizeof(ULONGLONG));

//
// Structure defining format of request headers.
//

typedef struct _HTTP_REQUEST_HEADERS
{
    //
    // The array of unknown HTTP headers and the number of
    // entries in the array.
    //

    USHORT               UnknownHeaderCount;
    PHTTP_UNKNOWN_HEADER pUnknownHeaders;

    //
    // Trailers - we don't use these currently, reserved for a future release
    //
    USHORT               TrailerCount;   // Reserved, must be 0
    PHTTP_UNKNOWN_HEADER pTrailers;      // Reserved, must be NULL


    //
    // Known headers.
    //

    HTTP_KNOWN_HEADER    KnownHeaders[HttpHeaderRequestMaximum];

} HTTP_REQUEST_HEADERS, *PHTTP_REQUEST_HEADERS;

//
// Structure defining format of response headers.
//

typedef struct _HTTP_RESPONSE_HEADERS
{
    //
    // The array of unknown HTTP headers and the number of
    // entries in the array.
    //

    USHORT               UnknownHeaderCount;
    PHTTP_UNKNOWN_HEADER pUnknownHeaders;

    //
    // Trailers - we don't use these currently, reserved for a future release
    //
    USHORT               TrailerCount;   // Reserved, must be 0
    PHTTP_UNKNOWN_HEADER pTrailers;      // Reserved, must be NULL

    //
    // Known headers.
    //

    HTTP_KNOWN_HEADER    KnownHeaders[HttpHeaderResponseMaximum];

} HTTP_RESPONSE_HEADERS, *PHTTP_RESPONSE_HEADERS;

//
// Structure defining format of transport address. Use pLocalAddress->sa_family
// to determine whether this is an IPv4 address (AF_INET) or IPv6 (AF_INET6).
//
// pRemoteAddress->sa_family will be the same as pLocalAddress->sa_family.
//
// SOCKADDRs are always in network order, not host order.
//

typedef struct _HTTP_TRANSPORT_ADDRESS
{
    PSOCKADDR      pRemoteAddress;
    PSOCKADDR      pLocalAddress;

} HTTP_TRANSPORT_ADDRESS, *PHTTP_TRANSPORT_ADDRESS;

//
// Structure defining format of cooked URL.
//

typedef struct _HTTP_COOKED_URL
{
    //
    // Pointers overlap and point into pFullUrl. NULL if not present.
    //

    USHORT FullUrlLength;       // in bytes not including the NUL
    USHORT HostLength;          // in bytes (no NUL)
    USHORT AbsPathLength;       // in bytes (no NUL)
    USHORT QueryStringLength;   // in bytes (no NUL)

    PCWSTR pFullUrl;     // points to "http://hostname:port/abs/.../path?query"
    PCWSTR pHost;        // points to the first char in the hostname
    PCWSTR pAbsPath;     // Points to the 3rd '/' char
    PCWSTR pQueryString; // Points to the 1st '?' char or NULL

} HTTP_COOKED_URL, *PHTTP_COOKED_URL;

//
// An opaque context for URL manipulation.
//

typedef ULONGLONG HTTP_URL_CONTEXT;


#if _WIN32_WINNT >= 0x0600

//
// Optional flags for URL manipulation functions.
//
// HTTP_URL_FLAG_REMOVE_ALL : When this flag is used
// when removing a Url from a url group, regardless of
// the passed URL, all of the Urls from the url group
// will be removed.
//

#define HTTP_URL_FLAG_REMOVE_ALL                0x00000001


//
// Request Authentication related.
//

typedef enum _HTTP_AUTH_STATUS
{
    HttpAuthStatusSuccess,
    HttpAuthStatusNotAuthenticated,
    HttpAuthStatusFailure

} HTTP_AUTH_STATUS, *PHTTP_AUTH_STATUS;


typedef enum _HTTP_REQUEST_AUTH_TYPE
{
    HttpRequestAuthTypeNone = 0,
    HttpRequestAuthTypeBasic,
    HttpRequestAuthTypeDigest,
    HttpRequestAuthTypeNTLM,
    HttpRequestAuthTypeNegotiate,
    HttpRequestAuthTypeKerberos


} HTTP_REQUEST_AUTH_TYPE, *PHTTP_REQUEST_AUTH_TYPE;

#endif // _WIN32_WINNT >= 0x0600

//
// SSL Client certificate information.
//

typedef struct _HTTP_SSL_CLIENT_CERT_INFO
{
    ULONG   CertFlags;
    ULONG   CertEncodedSize;
    PUCHAR  pCertEncoded;
    HANDLE  Token;
    BOOLEAN CertDeniedByMapper;

} HTTP_SSL_CLIENT_CERT_INFO, *PHTTP_SSL_CLIENT_CERT_INFO;

#if _WIN32_WINNT >= _WIN32_WINNT_WIN7

//
// Flag to retrieve secure channel binding with HttpReceiveClientCertificate
//

#define HTTP_RECEIVE_SECURE_CHANNEL_TOKEN 0x1

#endif

//
// Data computed during SSL handshake.
//

typedef struct _HTTP_SSL_INFO
{
    USHORT ServerCertKeySize;
    USHORT ConnectionKeySize;
    ULONG  ServerCertIssuerSize;
    ULONG  ServerCertSubjectSize;

    PCSTR  pServerCertIssuer;
    PCSTR  pServerCertSubject;

    PHTTP_SSL_CLIENT_CERT_INFO pClientCertInfo;
    ULONG                      SslClientCertNegotiated;

} HTTP_SSL_INFO, *PHTTP_SSL_INFO;


#if _WIN32_WINNT >= 0x0600

//
// Generic request information type.
//

typedef enum _HTTP_REQUEST_INFO_TYPE
{
    HttpRequestInfoTypeAuth

#if _WIN32_WINNT >= _WIN32_WINNT_WIN7
    ,HttpRequestInfoTypeChannelBind
#endif


} HTTP_REQUEST_INFO_TYPE, *PHTTP_REQUEST_INFO_TYPE;

typedef struct _HTTP_REQUEST_INFO
{
    HTTP_REQUEST_INFO_TYPE InfoType;
    ULONG                  InfoLength;
    PVOID                  pInfo;

} HTTP_REQUEST_INFO, *PHTTP_REQUEST_INFO;

#ifndef __SECSTATUS_DEFINED__
typedef LONG SECURITY_STATUS;
#define __SECSTATUS_DEFINED__
#endif // __SECSTATUS_DEFINED__

//
// Authentication request info structure
//

#define HTTP_REQUEST_AUTH_FLAG_TOKEN_FOR_CACHED_CRED (0x00000001)

typedef struct _HTTP_REQUEST_AUTH_INFO
{
    HTTP_AUTH_STATUS AuthStatus;
    SECURITY_STATUS  SecStatus;

    ULONG Flags;

    HTTP_REQUEST_AUTH_TYPE AuthType;

    HANDLE AccessToken;
    ULONG ContextAttributes;

    //
    // Optional serialized context.
    //

    ULONG PackedContextLength;
    ULONG PackedContextType;
    PVOID PackedContext;

    //
    // Optional mutual authentication data and its length in bytes.
    //

    ULONG MutualAuthDataLength;
    PCHAR pMutualAuthData;

    //
    // For SSPI based schemes the package name is returned. Length does
    // not include the terminating null and it is in bytes.
    //

    USHORT PackageNameLength;
    PWSTR pPackageName;

} HTTP_REQUEST_AUTH_INFO, *PHTTP_REQUEST_AUTH_INFO;

#endif // _WIN32_WINNT >= 0x0600

//
// The structure of an HTTP request for downlevel OS
//

typedef struct _HTTP_REQUEST_V1
{
    //
    // Request flags (see HTTP_REQUEST_FLAG_* definitions below).
    //

    ULONG Flags;

    //
    // An opaque request identifier. These values are used by the driver
    // to correlate outgoing responses with incoming requests.
    //

    HTTP_CONNECTION_ID ConnectionId;
    HTTP_REQUEST_ID    RequestId;

    //
    // The context associated with the URL prefix.
    //

    HTTP_URL_CONTEXT UrlContext;

    //
    // The HTTP version number.
    //

    HTTP_VERSION Version;

    //
    // The request verb.
    //

    HTTP_VERB Verb;

    //
    // The length of the verb string if the Verb field is HttpVerbUnknown.
    //

    USHORT UnknownVerbLength;           // in bytes not including the NUL

    //
    // The length of the raw (uncooked) URL
    //

    USHORT RawUrlLength;                // in bytes not including the NUL

    //
    // Pointer to the verb string if the Verb field is HttpVerbUnknown.
    //

    PCSTR  pUnknownVerb;

    //
    // Pointer to the raw (uncooked) URL
    //

    PCSTR  pRawUrl;

    //
    // The canonicalized Unicode URL
    //

    HTTP_COOKED_URL CookedUrl;

    //
    // Local and remote transport addresses for the connection.
    //

    HTTP_TRANSPORT_ADDRESS Address;

    //
    // The request headers.
    //

    HTTP_REQUEST_HEADERS Headers;

    //
    // The total number of bytes received from network for this request.
    //

    ULONGLONG BytesReceived;

    //
    // pEntityChunks is an array of EntityChunkCount HTTP_DATA_CHUNKs. The
    // entity body is copied only if HTTP_RECEIVE_REQUEST_FLAG_COPY_BODY
    // was passed to HttpReceiveHttpRequest().
    //

    USHORT           EntityChunkCount;
    PHTTP_DATA_CHUNK pEntityChunks;

    //
    // SSL connection information.
    //

    HTTP_RAW_CONNECTION_ID RawConnectionId;
    PHTTP_SSL_INFO         pSslInfo;

} HTTP_REQUEST_V1, *PHTTP_REQUEST_V1;

#if _WIN32_WINNT >= 0x0600

// Vista

//
// Version 2.0 members are defined here
// N.B. One must define V2 elements in two places :(
//      This is due to the fact that C++ doesn't allow anonymous
//      structure declarations and one must use structure
//      inheritance instead.
//

#ifdef __cplusplus

typedef struct _HTTP_REQUEST_V2 : _HTTP_REQUEST_V1
{
    //
    // Version 1.0 members are inherited
    // Version 2.0 members are declared below
    //

    //
    // Additional Request Informations.
    //

    USHORT             RequestInfoCount;
    PHTTP_REQUEST_INFO pRequestInfo;
} HTTP_REQUEST_V2, *PHTTP_REQUEST_V2;

#else // __cplusplus

typedef struct _HTTP_REQUEST_V2
{
    struct _HTTP_REQUEST_V1;        // Anonymous structure

    //
    // Version 2.0 members are declared below
    //

    //
    // Additional Request Informations.
    //

    USHORT             RequestInfoCount;
    PHTTP_REQUEST_INFO pRequestInfo;
} HTTP_REQUEST_V2, *PHTTP_REQUEST_V2;

#endif  // __cplusplus

typedef HTTP_REQUEST_V2 HTTP_REQUEST;

#else // _WIN32_WINNT >= 0x0600

typedef HTTP_REQUEST_V1 HTTP_REQUEST;

#endif  // _WIN32_WINNT >= 0x0600

typedef HTTP_REQUEST * PHTTP_REQUEST;


//
// Values for HTTP_REQUEST::Flags. Zero or more of these may be ORed together.
//
// HTTP_REQUEST_FLAG_MORE_ENTITY_BODY_EXISTS - there is more entity body
// to be read for this request. Otherwise, there is no entity body or
// all of the entity body was copied into pEntityChunks.
// HTTP_REQUEST_FLAG_IP_ROUTED - This flag indicates that the request has been
// routed based on host plus ip or ip binding.This is a hint for the application
// to include the local ip while flushing kernel cache entries build for this
// request if any.
//

#define HTTP_REQUEST_FLAG_MORE_ENTITY_BODY_EXISTS   0x00000001
#define HTTP_REQUEST_FLAG_IP_ROUTED                 0x00000002


//
// This structure describes an HTTP response.
//

typedef struct _HTTP_RESPONSE_V1
{
    //
    // Response flags (see HTTP_RESPONSE_FLAG_* definitions below).
    //

    ULONG Flags;

    //
    // The raw HTTP protocol version number.
    //

    HTTP_VERSION Version;

    //
    // The HTTP status code (e.g., 200).
    //

    USHORT StatusCode;

    //
    // The HTTP reason (e.g., "OK"). This MUST not contain
    // non-ASCII characters (i.e., all chars must be in range 0x20-0x7E).
    //

    USHORT ReasonLength;                 // in bytes not including the '\0'
    PCSTR  pReason;

    //
    // The response headers.
    //

    HTTP_RESPONSE_HEADERS Headers;

    //
    // pEntityChunks points to an array of EntityChunkCount HTTP_DATA_CHUNKs.
    //

    USHORT           EntityChunkCount;
    PHTTP_DATA_CHUNK pEntityChunks;

} HTTP_RESPONSE_V1, *PHTTP_RESPONSE_V1;

#if _WIN32_WINNT >= 0x0600

//
// Values for HTTP_RESPONSE::Flags.
//
// HTTP_RESPONSE_FLAG_MULTIPLE_ENCODINGS_AVAILABLE - Set this flag if encodings
// other than identity form are available for this resource.This flag is ignored
// if application has not asked for response to be cached. It's used as a hint
// to the Http Server API for content negotiation  used when serving from the
// the kernel response cache.
//

#define HTTP_RESPONSE_FLAG_MULTIPLE_ENCODINGS_AVAILABLE 0x00000001


// Vista

typedef enum _HTTP_RESPONSE_INFO_TYPE
{
    HttpResponseInfoTypeMultipleKnownHeaders,
    HttpResponseInfoTypeAuthenticationProperty,
    HttpResponseInfoTypeQoSProperty
    
#if _WIN32_WINNT >= _WIN32_WINNT_WIN7
    ,HttpResponseInfoTypeChannelBind
#endif    

} HTTP_RESPONSE_INFO_TYPE, PHTTP_RESPONSE_INFO_TYPE;

typedef struct _HTTP_RESPONSE_INFO
{
    HTTP_RESPONSE_INFO_TYPE Type;
    ULONG                   Length;
    PVOID                   pInfo;
} HTTP_RESPONSE_INFO, *PHTTP_RESPONSE_INFO;

#define HTTP_RESPONSE_INFO_FLAGS_PRESERVE_ORDER         0x00000001

//
// This structure allows the provision of providing multiple known headers.
//

typedef struct _HTTP_MULTIPLE_KNOWN_HEADERS
{
    //
    // Known header id.
    //

    HTTP_HEADER_ID      HeaderId;

    ULONG               Flags;

    //
    // Number of headers of the same category.
    //

    USHORT              KnownHeaderCount;

    //
    // Array of known header structures.
    //

    PHTTP_KNOWN_HEADER  KnownHeaders;

} HTTP_MULTIPLE_KNOWN_HEADERS, *PHTTP_MULTIPLE_KNOWN_HEADERS;

//
// Version 2.0 members are defined here
// N.B. One must define V2 elements in two places :(
//      This is due to the fact that C++ doesn't allow anonymous
//      structure declarations and one must use structure
//      inheritance instead.
//

#ifdef __cplusplus

typedef struct _HTTP_RESPONSE_V2 : _HTTP_RESPONSE_V1
{
    //
    // Version 1.0 members are inherited
    // Version 2.0 members are declared below
    //

    USHORT ResponseInfoCount;
    PHTTP_RESPONSE_INFO pResponseInfo;

} HTTP_RESPONSE_V2, *PHTTP_RESPONSE_V2;

#else // __cplusplus

typedef struct _HTTP_RESPONSE_V2
{
    struct _HTTP_RESPONSE_V1;

    //
    // Version 2.0 members are declared below
    //

    USHORT ResponseInfoCount;
    PHTTP_RESPONSE_INFO pResponseInfo;
} HTTP_RESPONSE_V2, *PHTTP_RESPONSE_V2;

#endif  // __cplusplus

typedef HTTP_RESPONSE_V2 HTTP_RESPONSE;

#else // _WIN32_WINNT >= 0x0600

typedef HTTP_RESPONSE_V1 HTTP_RESPONSE;

#endif  // _WIN32_WINNT >= 0x0600

typedef HTTP_RESPONSE *PHTTP_RESPONSE;

//
// Api Version. This is used to ensure compatibility between applications and
// httpapi.dll and http.sys.
//
// This must not be confused with the HTTP Protocol version.
//

typedef struct _HTTPAPI_VERSION
{
    USHORT HttpApiMajorVersion;
    USHORT HttpApiMinorVersion;

} HTTPAPI_VERSION, *PHTTPAPI_VERSION;


#if _WIN32_WINNT >= 0x0600

// Vista

#define HTTPAPI_VERSION_2 { 2, 0 }

#endif // _WIN32_WINNT >= 0x0600

#define HTTPAPI_VERSION_1 { 1, 0 }

#define HTTPAPI_EQUAL_VERSION(version, major, minor)                \
    ((version).HttpApiMajorVersion == (major) &&                    \
     (version).HttpApiMinorVersion == (minor))

#define HTTPAPI_GREATER_VERSION(version, major, minor)              \
    ((version).HttpApiMajorVersion > (major) ||                     \
     ((version).HttpApiMajorVersion == (major) &&                   \
      (version).HttpApiMinorVersion > (minor)))

#define HTTPAPI_LESS_VERSION(version, major, minor)                 \
    ((version).HttpApiMajorVersion < (major) ||                     \
     ((version).HttpApiMajorVersion == (major) &&                   \
      (version).HttpApiMinorVersion < (minor)))

#define HTTPAPI_VERSION_GREATER_OR_EQUAL( version, major, minor)    \
    (!HTTPAPI_LESS_VERSION(version, major, minor))


//
// Cache control.
//

//
// This enum defines the available cache policies.
//

typedef enum _HTTP_CACHE_POLICY_TYPE
{
    HttpCachePolicyNocache,
    HttpCachePolicyUserInvalidates,
    HttpCachePolicyTimeToLive,

    HttpCachePolicyMaximum

} HTTP_CACHE_POLICY_TYPE, *PHTTP_CACHE_POLICY_TYPE;


//
//  Only cache unauthorized GETs + HEADs.
//

typedef struct _HTTP_CACHE_POLICY
{
    HTTP_CACHE_POLICY_TYPE  Policy;
    ULONG                   SecondsToLive;

} HTTP_CACHE_POLICY, *PHTTP_CACHE_POLICY;

//
// Enum that is used with HttpSetServiceConfiguration(),
// HttpQueryServiceConfiguration(), and HttpDeleteServiceConfiguration() APIs.
//

typedef enum _HTTP_SERVICE_CONFIG_ID
{
    HttpServiceConfigIPListenList,    // Set, Query & Delete.
    HttpServiceConfigSSLCertInfo,     // Set, Query & Delete.
    HttpServiceConfigUrlAclInfo,      // Set, Query & Delete.
    HttpServiceConfigTimeout,         // Set, Query & Delete.
    HttpServiceConfigCache,           // Set, Query & Delete.
    HttpServiceConfigMax

} HTTP_SERVICE_CONFIG_ID, *PHTTP_SERVICE_CONFIG_ID;

//
// Generic Query enum that can be used with HttpQueryServiceConfiguration()
//

typedef enum _HTTP_SERVICE_CONFIG_QUERY_TYPE
{
    HttpServiceConfigQueryExact,
    HttpServiceConfigQueryNext,
    HttpServiceConfigQueryMax

} HTTP_SERVICE_CONFIG_QUERY_TYPE, *PHTTP_SERVICE_CONFIG_QUERY_TYPE;

//
// This data structure is used to define a key of the SSL certificate hash
// store.
//

typedef struct _HTTP_SERVICE_CONFIG_SSL_KEY
{
    PSOCKADDR pIpPort;
} HTTP_SERVICE_CONFIG_SSL_KEY, *PHTTP_SERVICE_CONFIG_SSL_KEY;

//
// This defines a record for the SSL config store.
//

typedef struct _HTTP_SERVICE_CONFIG_SSL_PARAM
{
    ULONG SslHashLength;      // Length of the SSL hash (in bytes)
    PVOID pSslHash;           // Pointer to the SSL hash
    GUID  AppId;              // A unique identifier that can be used to
                              // identify the app that has set this parameter

    PWSTR  pSslCertStoreName; // Store name to read the server certificate
                              // from; defaults to "MY". Certificate must be
                              // stored in the LOCAL_MACHINE context.

    //
    // The following settings are used only for client certificates
    //

    //
    // DefaultCertCheckMode is a bit flag with the following semantics
    //  0x1     - Client certificate will not be verified for revocation
    //  0x2     - Only cached certificate revocation will be used.
    //  0x4     - Enable use of the DefaultRevocationFreshnessTime setting
    //  0x10000 - No usage check.

    DWORD  DefaultCertCheckMode;

    //
    // DefaultRevocationFreshnessTime (seconds) - How often to check for
    // an updated Certificate revocation list (CRL). If this value is 0
    // then the new CRL is updated only if the previous one expires
    //

    DWORD  DefaultRevocationFreshnessTime;

    //
    // DefaultRevocationUrlRetrievalTimeout (milliseconds) - Timeout on
    // attempt to retrieve certificate revocation list from the remote URL.
    //

    DWORD  DefaultRevocationUrlRetrievalTimeout;

    //
    // pDefaultSslCtlIdentifier - Restrict the certificate issuers that you
    // want to trust. Can be a subset of the certificate issuers that are
    // trusted by the machine.
    //

    PWSTR  pDefaultSslCtlIdentifier;

    //
    // Store name under LOCAL_MACHINE where Ctl identified by
    // pDefaultSslCtlIdentifier is stored.
    //

    PWSTR  pDefaultSslCtlStoreName;

    //
    // Default Flags - see HTTP_SERVICE_CONFIG_SSL_FLAG* below.
    //

    DWORD  DefaultFlags;

} HTTP_SERVICE_CONFIG_SSL_PARAM, *PHTTP_SERVICE_CONFIG_SSL_PARAM;

#define HTTP_SERVICE_CONFIG_SSL_FLAG_USE_DS_MAPPER         0x00000001
#define HTTP_SERVICE_CONFIG_SSL_FLAG_NEGOTIATE_CLIENT_CERT 0x00000002
#if _WIN32_WINNT < 0x0600
#define HTTP_SERVICE_CONFIG_SSL_FLAG_NO_RAW_FILTER         0x00000004
#endif // _WIN32_WINNT < 0x0600

//
// This data structure is used by HttpSetServiceConfiguration() for the
// config ID HttpServiceConfigSSLCertInfo.  It's used to add a new record
// to the SSL store.
//

typedef struct _HTTP_SERVICE_CONFIG_SSL_SET
{
    HTTP_SERVICE_CONFIG_SSL_KEY   KeyDesc;
    HTTP_SERVICE_CONFIG_SSL_PARAM ParamDesc;
} HTTP_SERVICE_CONFIG_SSL_SET, *PHTTP_SERVICE_CONFIG_SSL_SET;

//
// This data structure is used by HttpQueryServiceConfiguration() for the
// config ID HttpServiceConfigSSLCertInfo. It's used to query a particular
// record from the SSL store.
//
// If QueryType is HttpServiceConfigQueryExact, then one particular record of
// the type HTTP_SERVICE_CONFIG_SSL_SET is returned. If the QueryType is
// HttpServiceConfigQueryNext, then the next instance of
// HTTP_SERVICE_CONFIG_SSL_SET is returned. In such cases, the dwToken field
// represents the cursor. For the first item,  dwToken has to be 0.
// For subsequent items, dwToken has to be incremented by 1,
// until ERROR_NO_MORE_ITEMS is returned.
//

typedef struct _HTTP_SERVICE_CONFIG_SSL_QUERY
{
    HTTP_SERVICE_CONFIG_QUERY_TYPE  QueryDesc;
    HTTP_SERVICE_CONFIG_SSL_KEY     KeyDesc;
    DWORD                           dwToken;
} HTTP_SERVICE_CONFIG_SSL_QUERY, *PHTTP_SERVICE_CONFIG_SSL_QUERY;

//
// Set/Delete IP Listen-Only List record
//
// Used as a parameter to both HttpSetServiceConfiguration() and
// HttpDeleteServiceConfiguration() functions.
//

typedef struct _HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM
{
    USHORT      AddrLength;
    PSOCKADDR   pAddress;
} HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM, *PHTTP_SERVICE_CONFIG_IP_LISTEN_PARAM;

//
// Query IP Listen-Only List record.
//
// Parameter to HttpQueryServiceConfiguration() for the config ID
// HttpServiceConfigIPListenList.  On successful return, AddrList
// contains an array of AddrCount elements.  Caller must provide a
// large enough buffer to hold all elements in one call.
//
// Caller may determine the type of each returned element by examining
// AddrList[i].ss_family. If it's AF_INET, use ((PSOCKADDR_IN) &AddrList[i]);
// otherwise, for AF_INET6, use ((PSOCKADDR_IN6) &AddrList[i])
// to select the appropriate address type.
//

typedef struct _HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY
{
    ULONG              AddrCount;
    SOCKADDR_STORAGE   AddrList[ANYSIZE_ARRAY];
} HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY, *PHTTP_SERVICE_CONFIG_IP_LISTEN_QUERY;

//
// URL ACL
//
//
typedef struct _HTTP_SERVICE_CONFIG_URLACL_KEY
{
    PWSTR pUrlPrefix;

} HTTP_SERVICE_CONFIG_URLACL_KEY, *PHTTP_SERVICE_CONFIG_URLACL_KEY;

//
// This defines a record for the SSL config store.
//

typedef struct _HTTP_SERVICE_CONFIG_URLACL_PARAM
{
    PWSTR pStringSecurityDescriptor;
} HTTP_SERVICE_CONFIG_URLACL_PARAM, *PHTTP_SERVICE_CONFIG_URLACL_PARAM;


//
// This data structure is used by HttpSetServiceConfiguration for the config ID
// HttpServiceConfigUrlAclInfo. It is used to add a new record to the URL ACL
// store.
//

typedef struct _HTTP_SERVICE_CONFIG_URLACL_SET
{
    HTTP_SERVICE_CONFIG_URLACL_KEY   KeyDesc;
    HTTP_SERVICE_CONFIG_URLACL_PARAM ParamDesc;
} HTTP_SERVICE_CONFIG_URLACL_SET, *PHTTP_SERVICE_CONFIG_URLACL_SET;


//
// This data structure is used by HttpQueryServiceConfiguration() for the
// config ID HttpServiceConfigUrlAclInfo. It's used to query a particular
// record from the URL ACL store.
//
// If QueryType is HttpServiceConfigQueryExact, then one particular record of
// the type HTTP_SERVICE_CONFIG_URLACL_SET is returned. If the QueryType is
// HttpServiceConfigQueryNext, then the next instance of
// HTTP_SERVICE_CONFIG_URLACL_SET is returned. In such cases, the dwToken field
// represents the cursor. For the first item,  dwToken has to be 0.
// For subsequent items, dwToken has to be incremented by 1,
// until ERROR_NO_MORE_ITEMS is returned.
//

typedef struct _HTTP_SERVICE_CONFIG_URLACL_QUERY
{
    HTTP_SERVICE_CONFIG_QUERY_TYPE  QueryDesc;
    HTTP_SERVICE_CONFIG_URLACL_KEY  KeyDesc;
    DWORD                           dwToken;
} HTTP_SERVICE_CONFIG_URLACL_QUERY, *PHTTP_SERVICE_CONFIG_URLACL_QUERY;

//
// Cache Paramemers
//

//
// For manipulating global cache parameters.
// The parameters that can be changed or queued are per-uri cache size
// and cached range chunk size.
//

typedef enum _HTTP_SERVICE_CONFIG_CACHE_KEY
{
    MaxCacheResponseSize = 0,
    CacheRangeChunkSize
} HTTP_SERVICE_CONFIG_CACHE_KEY, *PHTTP_SERVICE_CONFIG_CACHE_KEY;

typedef ULONG HTTP_SERVICE_CONFIG_CACHE_PARAM,
    *PHTTP_SERVICE_CONFIG_CACHE_PARAM;

//
// To set a cache parameter value use the set structure. To query use the key
// directly. When you query a parameter value the output buffer must be exactly
// the sizeof param.
//

typedef struct {
    HTTP_SERVICE_CONFIG_CACHE_KEY       KeyDesc;
    HTTP_SERVICE_CONFIG_CACHE_PARAM     ParamDesc;
} HTTP_SERVICE_CONFIG_CACHE_SET, *PHTTP_SERVICE_CONFIG_CACHE_SET;


//
// Define our API linkage.
//

#if !defined(HTTPAPI_LINKAGE)
#define HTTPAPI_LINKAGE DECLSPEC_IMPORT
#endif  // !HTTPAPI_LINKAGE

//
// Initialize/Terminate APIs.
//


// NOTE: MUST be called once before all other APIs

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpInitialize(
    IN HTTPAPI_VERSION Version,
    IN ULONG Flags,
    __reserved IN OUT PVOID pReserved
    );

// NOTE: MUST be called after final API call returns.

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpTerminate(
    IN ULONG Flags,
    __reserved IN OUT PVOID pReserved
    );

//
// HTTP Request Queue manipulation APIs.
//
// This API is maintained for backward competibility for the first
// version of the HTTPAPI and should not be used. Instead the new
// HttpCreateRequestQueue() API must be used.
//
// Use CloseHandle() to release the handles returned by
// HttpCreateHttpHandle() API.
//

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpCreateHttpHandle(
    OUT PHANDLE pReqQueueHandle,
    __reserved IN ULONG Reserved
    );

#if _WIN32_WINNT >= 0x0600

//
// Extended Request Queue manipulation APIs.
//
// Use HttpCloseRequestQueue() API to close the handles
// created by the HttpCreateRequestQueue API.
//

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpCreateRequestQueue(
    IN HTTPAPI_VERSION Version,
    IN PCWSTR pName OPTIONAL,
    IN PSECURITY_ATTRIBUTES pSecurityAttributes OPTIONAL,
    IN ULONG Flags OPTIONAL,
    OUT PHANDLE pReqQueueHandle
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpCloseRequestQueue(
    IN HANDLE ReqQueueHandle
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpSetRequestQueueProperty(
    IN HANDLE Handle,
    IN HTTP_SERVER_PROPERTY Property,
    __in_bcount(PropertyInformationLength) IN PVOID pPropertyInformation,
    IN ULONG PropertyInformationLength,
    __reserved IN ULONG Reserved,
    __reserved IN PVOID pReserved
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpQueryRequestQueueProperty(
    IN HANDLE Handle,
    IN HTTP_SERVER_PROPERTY Property,
    __out_bcount_part(PropertyInformationLength, *pReturnLength)
    OUT PVOID pPropertyInformation,
    IN ULONG PropertyInformationLength,
    __reserved IN ULONG Reserved,
    __out_opt OUT PULONG pReturnLength OPTIONAL,
    __reserved IN PVOID pReserved
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpShutdownRequestQueue(
    IN HANDLE ReqQueueHandle
    );

#endif // _WIN32_WINNT >= 0x0600

//
// SSL APIs.
//

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpReceiveClientCertificate(
    IN HANDLE ReqQueueHandle,
    IN HTTP_CONNECTION_ID ConnectionId,
    IN ULONG Flags,
    __out_bcount_part(SslClientCertInfoSize, *pBytesReceived)
    OUT PHTTP_SSL_CLIENT_CERT_INFO pSslClientCertInfo,
    IN ULONG SslClientCertInfoSize,
    __out_opt OUT PULONG pBytesReceived OPTIONAL,
    IN LPOVERLAPPED pOverlapped OPTIONAL
    );

#if _WIN32_WINNT >= 0x0600

//
// Server Session APIs.
//

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpCreateServerSession(
    IN HTTPAPI_VERSION Version,
    OUT PHTTP_SERVER_SESSION_ID pServerSessionId,
    __reserved IN ULONG Reserved
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpCloseServerSession(
    IN HTTP_SERVER_SESSION_ID ServerSessionId
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpQueryServerSessionProperty(
    IN HTTP_SERVER_SESSION_ID ServerSessionId,
    IN HTTP_SERVER_PROPERTY Property,
    __out_bcount_part(PropertyInformationLength, *pReturnLength)
    OUT PVOID pPropertyInformation,
    IN ULONG PropertyInformationLength,
    __out_opt OUT PULONG pReturnLength OPTIONAL
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpSetServerSessionProperty(
    IN HTTP_SERVER_SESSION_ID ServerSessionId,
    IN HTTP_SERVER_PROPERTY Property,
    __in_bcount(PropertyInformationLength) IN PVOID pPropertyInformation,
    IN ULONG PropertyInformationLength
    );

#endif // _WIN32_WINNT >= 0x0600

//
// Url Configuration APIs. Can only be used for V1 request queues.
//

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpAddUrl(
    IN HANDLE ReqQueueHandle,
    IN PCWSTR pFullyQualifiedUrl,
    __reserved IN PVOID pReserved
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpRemoveUrl(
    IN HANDLE ReqQueueHandle,
    IN PCWSTR pFullyQualifiedUrl
    );

#if _WIN32_WINNT >= 0x0600

//
// Url Group APIs.
//

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpCreateUrlGroup(
    IN HTTP_SERVER_SESSION_ID ServerSessionId,
    OUT PHTTP_URL_GROUP_ID pUrlGroupId,
    __reserved IN ULONG Reserved
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpCloseUrlGroup(
    IN HTTP_URL_GROUP_ID UrlGroupId
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpAddUrlToUrlGroup(
    IN HTTP_URL_GROUP_ID UrlGroupId,
    IN PCWSTR pFullyQualifiedUrl,
    IN HTTP_URL_CONTEXT UrlContext OPTIONAL,
    __reserved IN ULONG Reserved
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpRemoveUrlFromUrlGroup(
    IN HTTP_URL_GROUP_ID UrlGroupId,
    IN PCWSTR pFullyQualifiedUrl,
    IN ULONG Flags
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpSetUrlGroupProperty(
    IN HTTP_URL_GROUP_ID UrlGroupId,
    IN HTTP_SERVER_PROPERTY Property,
    __in_bcount(PropertyInformationLength) IN PVOID pPropertyInformation,
    IN ULONG PropertyInformationLength
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpQueryUrlGroupProperty(
    IN HTTP_URL_GROUP_ID UrlGroupId,
    IN HTTP_SERVER_PROPERTY Property,
    __out_bcount_part(PropertyInformationLength, *pReturnLength)
    OUT PVOID pPropertyInformation,
    IN ULONG PropertyInformationLength,
    __out_opt OUT PULONG pReturnLength OPTIONAL
    );

#endif // _WIN32_WINNT >= 0x0600

//
// HTTP Server I/O APIs.
//

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpReceiveHttpRequest(
    IN HANDLE ReqQueueHandle,
    IN HTTP_REQUEST_ID RequestId,
    IN ULONG Flags,
    __out_bcount_part(RequestBufferLength, *pBytesReceived)
    OUT PHTTP_REQUEST pRequestBuffer,
    IN ULONG RequestBufferLength,
    __out_opt OUT PULONG pBytesReceived OPTIONAL,
    IN LPOVERLAPPED pOverlapped OPTIONAL
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpReceiveRequestEntityBody(
    IN HANDLE ReqQueueHandle,
    IN HTTP_REQUEST_ID RequestId,
    IN ULONG Flags,
    __out_bcount_part(BufferLength, *pBytesReceived) OUT PVOID pBuffer,
    IN ULONG BufferLength,
    __out_opt OUT PULONG pBytesReceived OPTIONAL,
    IN LPOVERLAPPED pOverlapped OPTIONAL
    );

#if _WIN32_WINNT >= 0x0600

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpSendHttpResponse(
    IN HANDLE ReqQueueHandle,
    IN HTTP_REQUEST_ID RequestId,
    IN ULONG Flags,
    IN PHTTP_RESPONSE pHttpResponse,
    IN PHTTP_CACHE_POLICY pCachePolicy OPTIONAL,
    OUT PULONG pBytesSent OPTIONAL,
    OUT PVOID pReserved1 OPTIONAL, // must be NULL
    IN ULONG Reserved2 OPTIONAL, // must be 0
    IN LPOVERLAPPED pOverlapped OPTIONAL,
    IN PHTTP_LOG_DATA pLogData OPTIONAL
    );

#else // _WIN32_WINNT >= 0x0600

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpSendHttpResponse(
    IN HANDLE ReqQueueHandle,
    IN HTTP_REQUEST_ID RequestId,
    IN ULONG Flags,
    IN PHTTP_RESPONSE pHttpResponse,
    IN PVOID pReserved1 OPTIONAL, // must be NULL
    OUT PULONG pBytesSent OPTIONAL,
    OUT PVOID pReserved2 OPTIONAL, // must be NULL
    IN ULONG Reserved3 OPTIONAL, // must be 0
    IN LPOVERLAPPED pOverlapped OPTIONAL,
    IN PVOID pReserved4 OPTIONAL  // must be NULL
    );

#endif // _WIN32_WINNT >= 0x0600

#if _WIN32_WINNT >= 0x0600

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpSendResponseEntityBody(
    IN HANDLE ReqQueueHandle,
    IN HTTP_REQUEST_ID RequestId,
    IN ULONG Flags,
    IN USHORT EntityChunkCount OPTIONAL,
    __in_ecount_opt(EntityChunkCount)
    IN PHTTP_DATA_CHUNK pEntityChunks OPTIONAL,
    OUT PULONG pBytesSent OPTIONAL,
    OUT PVOID pReserved1 OPTIONAL, // must be NULL
    IN ULONG Reserved2 OPTIONAL, // must be 0
    IN LPOVERLAPPED pOverlapped OPTIONAL,
    IN PHTTP_LOG_DATA pLogData OPTIONAL
    );

#else // _WIN32_WINNT >= 0x0600

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpSendResponseEntityBody(
    IN HANDLE ReqQueueHandle,
    IN HTTP_REQUEST_ID RequestId,
    IN ULONG Flags,
    IN USHORT EntityChunkCount OPTIONAL,
    __in_ecount_opt(EntityChunkCount)
    IN PHTTP_DATA_CHUNK pEntityChunks OPTIONAL,
    OUT PULONG pBytesSent OPTIONAL,
    OUT PVOID pReserved1 OPTIONAL, // must be NULL
    IN ULONG Reserved2 OPTIONAL, // must be 0
    IN LPOVERLAPPED pOverlapped OPTIONAL,
    IN PVOID pReserved3 OPTIONAL  // must be NULL
    );

#endif // _WIN32_WINNT >= 0x0600

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpWaitForDisconnect(
    IN HANDLE ReqQueueHandle,
    IN HTTP_CONNECTION_ID ConnectionId,
    IN LPOVERLAPPED pOverlapped OPTIONAL
    );

#if _WIN32_WINNT >= 0x0600

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpWaitForDisconnectEx(
    IN HANDLE ReqQueueHandle,
    IN HTTP_CONNECTION_ID ConnectionId,
    __reserved IN ULONG Reserved OPTIONAL,
    IN LPOVERLAPPED pOverlapped OPTIONAL
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpCancelHttpRequest(
    IN HANDLE ReqQueueHandle,
    IN HTTP_REQUEST_ID RequestId,
    IN LPOVERLAPPED pOverlapped OPTIONAL
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpWaitForDemandStart(
    IN HANDLE ReqQueueHandle,
    IN LPOVERLAPPED pOverlapped OPTIONAL
    );


#endif // _WIN32_WINNT >= 0x0600

//
// Cache manipulation APIs.
//

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpFlushResponseCache(
    IN HANDLE ReqQueueHandle,
    IN PCWSTR pUrlPrefix,
    IN ULONG Flags,
    IN LPOVERLAPPED pOverlapped OPTIONAL
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpAddFragmentToCache(
    IN HANDLE ReqQueueHandle,
    IN PCWSTR pUrlPrefix,
    IN PHTTP_DATA_CHUNK pDataChunk,
    IN PHTTP_CACHE_POLICY pCachePolicy,
    IN LPOVERLAPPED pOverlapped OPTIONAL
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpReadFragmentFromCache(
    IN HANDLE ReqQueueHandle,
    IN PCWSTR pUrlPrefix,
    IN PHTTP_BYTE_RANGE pByteRange OPTIONAL,
    __out_bcount_part(BufferLength, *pBytesRead) OUT PVOID pBuffer,
    IN ULONG BufferLength,
    OUT PULONG pBytesRead OPTIONAL,
    IN LPOVERLAPPED pOverlapped OPTIONAL
    );

//
// Server configuration APIs
//

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpSetServiceConfiguration(
    __reserved IN HANDLE ServiceHandle,
    IN HTTP_SERVICE_CONFIG_ID ConfigId,
    __in_bcount(ConfigInformationLength) IN PVOID pConfigInformation,
    IN ULONG ConfigInformationLength,
    __reserved IN LPOVERLAPPED pOverlapped
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpDeleteServiceConfiguration(
    __reserved IN HANDLE ServiceHandle,
    IN HTTP_SERVICE_CONFIG_ID ConfigId,
    __in_bcount(ConfigInformationLength) IN PVOID pConfigInformation,
    IN ULONG ConfigInformationLength,
    __reserved IN LPOVERLAPPED pOverlapped
    );

HTTPAPI_LINKAGE
ULONG
WINAPI
HttpQueryServiceConfiguration(
    __reserved IN HANDLE ServiceHandle,
    IN HTTP_SERVICE_CONFIG_ID ConfigId,
    __in_bcount_opt(InputConfigInformationLength)
    IN PVOID pInputConfigInformation OPTIONAL,
    IN ULONG InputConfigInformationLength OPTIONAL,
    __out_bcount_part_opt(OutputConfigInformationLength, *pReturnLength)
    OUT PVOID pOutputConfigInformation OPTIONAL,
    IN ULONG OutputConfigInformationLength OPTIONAL,
    __out_opt OUT PULONG pReturnLength OPTIONAL,
    __reserved IN LPOVERLAPPED pOverlapped
    );


#ifdef __cplusplus
}   // extern "C"
#endif  // __cplusplus

#endif // _WIN32_WINNT >= 0x0501

#endif // __HTTP_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\httptrace.h ===
#ifndef _HTTP_TRACE_H
#define _HTTP_TRACE_H
/*++

    Copyright (c) 2005 Microsoft Corporation

    Module Name:

        httptrace.h

    Abstract:

        Definition of the event tracing structures for IIS
        (applies for IIS version >= 7 )

--*/

//
// HTTP_TRACE_TYPE contains type that are supported by 
// the IIS trace infrastructure.
// The enum values match the equivalent VARIANT types.
//
enum HTTP_TRACE_TYPE
{ 
    HTTP_TRACE_TYPE_BYTE = 17,         // mof type "uint8"
    HTTP_TRACE_TYPE_USHORT = 18,       // mof type "uint16"
    HTTP_TRACE_TYPE_ULONG = 19,        // mof type "uint32"
    HTTP_TRACE_TYPE_ULONGLONG = 21,    // mof type "uint64"
    HTTP_TRACE_TYPE_CHAR = 16,         // mof type "int8"
    HTTP_TRACE_TYPE_SHORT = 2,         // mof type "int16"
    HTTP_TRACE_TYPE_LONG = 3,          // mof type "int32"
    HTTP_TRACE_TYPE_LONGLONG = 20,     // mof type "int64"
    HTTP_TRACE_TYPE_LPCWSTR = 31,      // mof type string "w"
    HTTP_TRACE_TYPE_LPCSTR = 30,       // mof type string "a"
    HTTP_TRACE_TYPE_LPCGUID = 72,      // mof type object "Guid"
    HTTP_TRACE_TYPE_BOOL = 11,         // mof type object "boolean"
};

// bit values for the HTTP_TRACE_EVENT.dwFlags

//
// If HTTP_TRACE_EVENT_FLAG_STATIC_DESCRIPTIVE_FIELDS is set then
// consumers of the trace event can assume that
// pProviderGuid, pAreaGuid, pszEventName in the HTTP_TRACE_EVENT
// and pszName and pszDescription in each HTTP_TRACE_EVENT_ITEM
// entry are static (their memory is available throughout the 
// process lifetime). If event needs to be buffered there is no need 
// to copy values for these fields
//
#define HTTP_TRACE_EVENT_FLAG_STATIC_DESCRIPTIVE_FIELDS       0x01

//
// In addition to TRACE_LEVEL_FATAL - TRACE_LEVEL_VERBOSE
//
#define HTTP_TRACE_LEVEL_START  6
#define HTTP_TRACE_LEVEL_END    7

struct HTTP_TRACE_EVENT_ITEM;

//
// Each Trace event will need to be described with the HTTP_TRACE_EVENT structure. 
// It is designed to contain all the information relevant to ETW, 
// but ETW is not the only consumer
//
//

struct HTTP_TRACE_EVENT
{
    //
    // Trace Provider (such as "WWW Server")
    //
    LPCGUID                 pProviderGuid ;    
    //
    // Trace Area Flag ( a bit flag that may represent area such as "Authentication")
    //
    DWORD                   dwArea;             
    //
    // GUID equivalent to the Area Flag
    //
    LPCGUID                 pAreaGuid;          
    //
    // ID of the event (in the ETW terminology this would be the Event Type)
    //
    DWORD                   dwEvent; 
    //
    // String matching the event ID (dwEvent)
    //
    LPCWSTR                 pszEventName;
    //
    // Event version
    //
    DWORD                   dwEventVersion;
    //
    // Verbosity of the event ( General, FatalError, Error, Warning, Info, Verbose)
    // In the ETW terminology this is the "event level"
    DWORD                   dwVerbosity;
    //
    // Activity GUID. For the http request based event 
    // it may represent the request ID
    //
    LPCGUID                 pActivityGuid;      
    //
    // Additional GUID to allow to associate 
    // multiple related activities
    //
    LPCGUID                 pRelatedActivityGuid;
    //
    // Optional timestamp (in GetTickCount() ticks )
    // If set to 0 then system will fill in the TickCount.
    //
    DWORD                   dwTimeStamp; 
    //
    // Flags (reserved: Set to 0)
    //
    DWORD                   dwFlags;
    //
    //
    // Number of entries in the structured
    // description of the event
    // Note that the maximum allowed number of EventTraceItems    
    // should match the ETW internal limit of 16 
    //
    DWORD                   cEventItems; 
    //
    // Array of individual entries describing
    // the event
    //
    __field_ecount(cEventItems) HTTP_TRACE_EVENT_ITEM * pEventItems; 
};


// Each HTTP_TRACE_EVENT can have multiple items or elements that describe the event
// (for example the "GENERAL_REQUEST_START" event contains an item with the Request URL)

struct HTTP_TRACE_EVENT_ITEM
{
    //
    // Friendly name of the item (for example "RequestUrl")
    //
    LPCWSTR          pszName;
    //
    // Data type that pbData is pointed to
    //
    HTTP_TRACE_TYPE  dwDataType;
    //
    // Pointer to the actual data (needs to be casted based on the dwDataType)
    // For example the HTTP_TRACE_EVENT_ITEM describing HTTP request URL would have
    // the pbData pointing to the actual URL string
    //
    PBYTE   pbData;
    //
    // # of bytes of the actual data (it should matter only for string types)
    //
    DWORD   cbData;
    //
    // Additional description of the data - enumerations take advantage of this field    
    // (always set to NULL if not used)
    //
    LPCWSTR pszDataDescription;
};


//
// HTTP_TRACE_CONFIGURATION is used by both trace providers and trace consumers
// Trace consumers declare the TraceProviders and TraceAreas of the interest.
// Trace providers can retrieve what areas at what verbosity is allowed
// for a given provider
//

struct HTTP_TRACE_CONFIGURATION
{
    LPCGUID     pProviderGuid;
    DWORD       dwAreas;
    DWORD       dwVerbosity;
    BOOL        fProviderEnabled;
};

//
// Definiton of the GUIDs for the TRACE Providers that ship with IIS
// or are related to IIS
//

DEFINE_GUID( GUID_IIS_ALL_TRACE_PROVIDERS,
             0x00000000,0x0000,0x0000,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);

DEFINE_GUID( GUID_IIS_WWW_SERVER_TRACE_PROVIDER,
             0x3a2a4e84,0x4c21,0x4981,0xae,0x10,0x3f,0xda,0x0d,0x9b,0x0f,0x83);

// IIS V2(Crimson/Unified) trace provider             
DEFINE_GUID( GUID_IIS_WWW_SERVER_V2_TRACE_PROVIDER,
             0xde4649c9,0x15e8,0x4fea,0x9d,0x85,0x1c,0xdd,0xa5,0x20,0xc3,0x34);

// ETW name for the provider: "ASP.NET Events
DEFINE_GUID( GUID_IIS_ASPNET_TRACE_PROVIDER,
             0xAFF081FE,0x0247,0x4275,0x9C,0x4E,0x02,0x1F,0x3D,0xC1,0xDA,0x35);

// ETW name for the provider: "IIS: Active Server Pages (ASP)"
DEFINE_GUID( GUID_IIS_ASP_TRACE_TRACE_PROVIDER,
             0x06b94d9a,0xb15e,0x456e,0xa4,0xef,0x37,0xc9,0x84,0xa2,0xcb,0x4b);

DEFINE_GUID( GUID_IIS_WWW_GLOBAL_TRACE_PROVIDER,
             0xd55d3bc9,0xcba9,0x44df,0x82,0x7e,0x13,0x2d,0x3a,0x45,0x96,0xc2);

// ETW name for the provider: "IIS: WWW Isapi Extension"
DEFINE_GUID( GUID_IIS_ISAPI_TRACE_PROVIDER,
             0xa1c2040e,0x8840,0x4c31,0xba,0x11,0x98,0x71,0x03,0x1a,0x19,0xea);


#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\httprequestid.h ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows HTTP Services (WinHTTP)
//  Copyright (C) Microsoft Corporation. All rights reserved.
//
//--------------------------------------------------------------------------


#ifndef __HTTPREQUESTID_H__
#define __HTTPREQUESTID_H__

#define DISPID_HTTPREQUEST_BASE                     0x00000001


#define DISPID_HTTPREQUEST_OPEN                     (DISPID_HTTPREQUEST_BASE)
#define DISPID_HTTPREQUEST_SETREQUESTHEADER         (DISPID_HTTPREQUEST_BASE + 1)
#define DISPID_HTTPREQUEST_GETRESPONSEHEADER        (DISPID_HTTPREQUEST_BASE + 2)
#define DISPID_HTTPREQUEST_GETALLRESPONSEHEADERS    (DISPID_HTTPREQUEST_BASE + 3)
#define DISPID_HTTPREQUEST_SEND                     (DISPID_HTTPREQUEST_BASE + 4)
#define DISPID_HTTPREQUEST_OPTION                   (DISPID_HTTPREQUEST_BASE + 5)
#define DISPID_HTTPREQUEST_STATUS                   (DISPID_HTTPREQUEST_BASE + 6)
#define DISPID_HTTPREQUEST_STATUSTEXT               (DISPID_HTTPREQUEST_BASE + 7)
#define DISPID_HTTPREQUEST_RESPONSETEXT             (DISPID_HTTPREQUEST_BASE + 8)
#define DISPID_HTTPREQUEST_RESPONSEBODY             (DISPID_HTTPREQUEST_BASE + 9)
#define DISPID_HTTPREQUEST_RESPONSESTREAM           (DISPID_HTTPREQUEST_BASE + 10)
#define DISPID_HTTPREQUEST_ABORT                    (DISPID_HTTPREQUEST_BASE + 11)
#define DISPID_HTTPREQUEST_SETPROXY                 (DISPID_HTTPREQUEST_BASE + 12)
#define DISPID_HTTPREQUEST_SETCREDENTIALS           (DISPID_HTTPREQUEST_BASE + 13)
#define DISPID_HTTPREQUEST_WAITFORRESPONSE          (DISPID_HTTPREQUEST_BASE + 14)
#define DISPID_HTTPREQUEST_SETTIMEOUTS              (DISPID_HTTPREQUEST_BASE + 15)
#define DISPID_HTTPREQUEST_SETCLIENTCERTIFICATE     (DISPID_HTTPREQUEST_BASE + 16)
#define DISPID_HTTPREQUEST_SETAUTOLOGONPOLICY       (DISPID_HTTPREQUEST_BASE + 17)

#endif // __HTTPREQUESTID_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\hxhelppaneproxy.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for hxhelppaneproxy.idl:
    Oicf, W0, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __hxhelppaneproxy_h__
#define __hxhelppaneproxy_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IHxHelpPane_FWD_DEFINED__
#define __IHxHelpPane_FWD_DEFINED__
typedef interface IHxHelpPane IHxHelpPane;
#endif 	/* __IHxHelpPane_FWD_DEFINED__ */


#ifndef __IHxInteractiveUser_FWD_DEFINED__
#define __IHxInteractiveUser_FWD_DEFINED__
typedef interface IHxInteractiveUser IHxInteractiveUser;
#endif 	/* __IHxInteractiveUser_FWD_DEFINED__ */


#ifndef __HxHelpPane_FWD_DEFINED__
#define __HxHelpPane_FWD_DEFINED__

#ifdef __cplusplus
typedef class HxHelpPane HxHelpPane;
#else
typedef struct HxHelpPane HxHelpPane;
#endif /* __cplusplus */

#endif 	/* __HxHelpPane_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_hxhelppaneproxy_0000_0000 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_hxhelppaneproxy_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_hxhelppaneproxy_0000_0000_v0_0_s_ifspec;

#ifndef __IHxHelpPane_INTERFACE_DEFINED__
#define __IHxHelpPane_INTERFACE_DEFINED__

/* interface IHxHelpPane */
/* [hidden][oleautomation][helpstring][uuid][unique][object] */ 


EXTERN_C const IID IID_IHxHelpPane;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8cec5884-07a1-11d9-b15e-000d56bfe6ee")
    IHxHelpPane : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE DisplayTask( 
            /* [in] */ __RPC__in BSTR bstrUrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DisplayContents( 
            /* [in] */ __RPC__in BSTR bstrUrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DisplaySearchResults( 
            /* [in] */ __RPC__in BSTR bstrSearchQuery) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHxHelpPaneVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IHxHelpPane * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IHxHelpPane * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IHxHelpPane * This);
        
        HRESULT ( STDMETHODCALLTYPE *DisplayTask )( 
            __RPC__in IHxHelpPane * This,
            /* [in] */ __RPC__in BSTR bstrUrl);
        
        HRESULT ( STDMETHODCALLTYPE *DisplayContents )( 
            __RPC__in IHxHelpPane * This,
            /* [in] */ __RPC__in BSTR bstrUrl);
        
        HRESULT ( STDMETHODCALLTYPE *DisplaySearchResults )( 
            __RPC__in IHxHelpPane * This,
            /* [in] */ __RPC__in BSTR bstrSearchQuery);
        
        END_INTERFACE
    } IHxHelpPaneVtbl;

    interface IHxHelpPane
    {
        CONST_VTBL struct IHxHelpPaneVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHxHelpPane_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHxHelpPane_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHxHelpPane_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHxHelpPane_DisplayTask(This,bstrUrl)	\
    ( (This)->lpVtbl -> DisplayTask(This,bstrUrl) ) 

#define IHxHelpPane_DisplayContents(This,bstrUrl)	\
    ( (This)->lpVtbl -> DisplayContents(This,bstrUrl) ) 

#define IHxHelpPane_DisplaySearchResults(This,bstrSearchQuery)	\
    ( (This)->lpVtbl -> DisplaySearchResults(This,bstrSearchQuery) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHxHelpPane_INTERFACE_DEFINED__ */


#ifndef __IHxInteractiveUser_INTERFACE_DEFINED__
#define __IHxInteractiveUser_INTERFACE_DEFINED__

/* interface IHxInteractiveUser */
/* [hidden][oleautomation][helpstring][uuid][unique][object] */ 


EXTERN_C const IID IID_IHxInteractiveUser;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8cec595b-07a1-11d9-b15e-000d56bfe6ee")
    IHxInteractiveUser : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Execute( 
            /* [in] */ __RPC__in LPCWSTR pcUrl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHxInteractiveUserVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IHxInteractiveUser * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IHxInteractiveUser * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IHxInteractiveUser * This);
        
        HRESULT ( STDMETHODCALLTYPE *Execute )( 
            __RPC__in IHxInteractiveUser * This,
            /* [in] */ __RPC__in LPCWSTR pcUrl);
        
        END_INTERFACE
    } IHxInteractiveUserVtbl;

    interface IHxInteractiveUser
    {
        CONST_VTBL struct IHxInteractiveUserVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHxInteractiveUser_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHxInteractiveUser_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHxInteractiveUser_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHxInteractiveUser_Execute(This,pcUrl)	\
    ( (This)->lpVtbl -> Execute(This,pcUrl) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHxInteractiveUser_INTERFACE_DEFINED__ */



#ifndef __HelpPane_LIBRARY_DEFINED__
#define __HelpPane_LIBRARY_DEFINED__

/* library HelpPane */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_HelpPane;

EXTERN_C const CLSID CLSID_HxHelpPane;

#ifdef __cplusplus

class DECLSPEC_UUID("8cec58e7-07a1-11d9-b15e-000d56bfe6ee")
HxHelpPane;
#endif
#endif /* __HelpPane_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\httpserv.h ===
#ifndef _HTTPSERV_H_
#define _HTTPSERV_H_

#if (!defined(_WIN64) && !defined(WIN32))
#error httpserv.h is only supported on WIN32 or WIN64 platforms
#endif

#include <ahadmin.h>
#include <http.h>

//
// Request deterministic notifications
//

// request is beginning
#define RQ_BEGIN_REQUEST               0x00000001
// request is being authenticated
#define RQ_AUTHENTICATE_REQUEST        0x00000002
// request is being authorized
#define RQ_AUTHORIZE_REQUEST           0x00000004
// satisfy request from cache
#define RQ_RESOLVE_REQUEST_CACHE       0x00000008
// map handler for request
#define RQ_MAP_REQUEST_HANDLER         0x00000010
// acquire request state
#define RQ_ACQUIRE_REQUEST_STATE       0x00000020
// pre-execute handler
#define RQ_PRE_EXECUTE_REQUEST_HANDLER 0x00000040 
// execute handler
#define RQ_EXECUTE_REQUEST_HANDLER     0x00000080
// release request state
#define RQ_RELEASE_REQUEST_STATE       0x00000100
// update cache
#define RQ_UPDATE_REQUEST_CACHE        0x00000200
// log request
#define RQ_LOG_REQUEST                 0x00000400
// end request
#define RQ_END_REQUEST                 0x00000800

//
// Request non-deterministic notifications
//

// custom notification
#define RQ_CUSTOM_NOTIFICATION         0x10000000
// send response
#define RQ_SEND_RESPONSE               0x20000000
// read entity
#define RQ_READ_ENTITY                 0x40000000
// map a url to a physical path
#define RQ_MAP_PATH                    0x80000000

// 
// Global notifications
//

// stop accepting new requests
#define GL_STOP_LISTENING               0x00000002
// cache cleanup before termination
#define GL_CACHE_CLEANUP                0x00000004
// cache operation
#define GL_CACHE_OPERATION              0x00000010
// health check
#define GL_HEALTH_CHECK                 0x00000020
// configuration changed
#define GL_CONFIGURATION_CHANGE         0x00000040
// file changed
#define GL_FILE_CHANGE                  0x00000080
// before request pipeline has started
#define GL_PRE_BEGIN_REQUEST            0x00000100
// application start
#define GL_APPLICATION_START            0x00000200
// resolve modules for an application
#define GL_APPLICATION_RESOLVE_MODULES  0x00000400
// application end
#define GL_APPLICATION_STOP             0x00000800
// RSCA query
#define GL_RSCA_QUERY                   0x00001000
// trace event was raised
#define GL_TRACE_EVENT                  0x00002000
// custom notification
#define GL_CUSTOM_NOTIFICATION          0x00004000
// thread cleanup notification
#define GL_THREAD_CLEANUP               0x00008000
// application preload notification
#define GL_APPLICATION_PRELOAD          0x00010000

//
// Request notification return status
//

typedef enum REQUEST_NOTIFICATION_STATUS
{
    RQ_NOTIFICATION_CONTINUE,                   // continue processing
                                                // for notification
    RQ_NOTIFICATION_PENDING,                    // suspend processing
                                                // for notification
    RQ_NOTIFICATION_FINISH_REQUEST              // finish request
                                                // processing
};

//
// Out of band return codes
//

typedef enum GLOBAL_NOTIFICATION_STATUS
{
    GL_NOTIFICATION_CONTINUE,                  // continue processing
                                               // for notification
    GL_NOTIFICATION_HANDLED                    // finish processing for
                                               // notification
};

// 
// Priority class aliases
//

#define PRIORITY_ALIAS_FIRST              L"FIRST"
#define PRIORITY_ALIAS_HIGH               L"HIGH"
#define PRIORITY_ALIAS_MEDIUM             L"MEDIUM"
#define PRIORITY_ALIAS_LOW                L"LOW"
#define PRIORITY_ALIAS_LAST               L"LAST"

//
// Cache operations
//

typedef enum CACHE_OPERATION
{
    CACHE_OPERATION_RETRIEVE,
    CACHE_OPERATION_ADD,
    CACHE_OPERATION_DELETE,
    CACHE_OPERATION_FLUSH_PREFIX,
    CACHE_OPERATION_ENUM
};

//
// Module identifier
//

typedef VOID*            HTTP_MODULE_ID;

//
// Flags for IHttpContext->CloneContext()
//

#define CLONE_FLAG_BASICS              0x01
#define CLONE_FLAG_HEADERS             0x02
#define CLONE_FLAG_ENTITY              0x04
#define CLONE_FLAG_NO_PRECONDITION     0x08
#define CLONE_FLAG_NO_DAV              0x10

//
// Flags for IHttpContext->ExecuteRequest()
//

#define EXECUTE_FLAG_NO_HEADERS                     0x01
#define EXECUTE_FLAG_IGNORE_CURRENT_INTERCEPTOR     0x02
#define EXECUTE_FLAG_IGNORE_APPPOOL                 0x04
#define EXECUTE_FLAG_DISABLE_CUSTOM_ERROR           0x08
#define EXECUTE_FLAG_SAME_URL                       0x10
// do not flush the child response but copy it back to the parent
#define EXECUTE_FLAG_BUFFER_RESPONSE                0x20
// child response is still eligible for http.sys caching
#define EXECUTE_FLAG_HTTP_CACHE_ELIGIBLE            0x40


//
// forward declarations
//
struct HTTP_TRACE_CONFIGURATION;
struct HTTP_TRACE_EVENT;

class  IWorkerProcessFramework;
class  IWpfSettings;
class  IHttpTraceContext;

//
// Module-specific context descriptor
//
class __declspec(uuid("f1927f76-790e-4ccb-a72e-396bdfdae05d"))
IHttpStoredContext
{
 public:
    virtual
    VOID
    CleanupStoredContext(
        VOID
    ) = 0;
};

//
// Context container
//
class __declspec(uuid("d7fad7c9-aa27-4ab9-bd60-e55ccba3f5dc"))
IHttpModuleContextContainer
{
 public:
    virtual
    IHttpStoredContext *
    GetModuleContext(
        IN HTTP_MODULE_ID       moduleId
    ) = 0;

    virtual
    HRESULT
    SetModuleContext(
        IN IHttpStoredContext * ppStoredContext,
        IN HTTP_MODULE_ID       moduleId
    ) = 0;  
};

//
// Dispensed context container
//
class __declspec(uuid("2ae49359-95dd-4e48-ae20-c0cb9d0bc03a"))
IDispensedHttpModuleContextContainer : public IHttpModuleContextContainer
{
public:
    virtual
    VOID
    ReleaseContainer(
        VOID
    ) = 0;
};

//
// Performance counter descriptor
//
class __declspec(uuid("bdfc4c4a-12a4-4744-87d8-765eb320c59f"))
IHttpPerfCounterInfo
{
 public:
    virtual
    VOID
    IncrementCounter(
        DWORD               dwCounterIndex,
        DWORD               dwValue = 1
    ) = 0;

    virtual
    VOID
    DecrementCounter(
        DWORD               dwCounterIndex,
        DWORD               dwValue = 1
    ) = 0;
};

//
// Application descriptor
//
class __declspec(uuid("3f75d9e6-1075-422c-ad89-93a85f2d7bdc"))
IHttpApplication
{
 public:
    virtual
    PCWSTR
    GetApplicationPhysicalPath(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetApplicationId(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetAppConfigPath(
        VOID
    ) const = 0;

    virtual
    IHttpModuleContextContainer *
    GetModuleContextContainer(
        VOID
    ) = 0;
};

// 
// URI cache entry descriptor
// 
class __declspec(uuid("7e0e6167-0094-49a1-8287-ecf6dc6e73a6"))
IHttpUrlInfo
{
 public:
    virtual
    IHttpModuleContextContainer *
    GetModuleContextContainer(
        VOID
    ) = 0;

    virtual
    BOOL
    IsFrequentlyHit(
        VOID
    ) const = 0;
};

// 
// Script map descriptor
// 
class __declspec(uuid("d7fe3d77-68bc-4d4a-851f-eec9fb68017c"))
IScriptMapInfo
{
 public:
    virtual
    PCWSTR
    GetPath(
        VOID
    ) const = 0;

    virtual
    PCSTR
    GetAllowedVerbs(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetModules(
        OUT DWORD *         pcchModules = NULL
    ) const = 0;

    virtual
    PCWSTR
    GetScriptProcessor(
        OUT DWORD *         pcchScriptProcessor = NULL
    ) const = 0;

    virtual
    PCWSTR
    GetManagedType(
        OUT DWORD *         pcchManagedType = NULL
    ) const = 0;

    virtual
    BOOL
    GetAllowPathInfoForScriptMappings(
        VOID
    ) const = 0;

    virtual
    DWORD
    GetRequiredAccess(
        VOID
    ) const = 0;

    virtual
    DWORD
    GetResourceType(
        VOID
    ) const = 0;

    virtual
    BOOL
    GetIsStarScriptMap(
        VOID
    ) const = 0;

    virtual
    DWORD
    GetResponseBufferLimit(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetName(
        VOID
    ) const = 0;
};

class __declspec(uuid("fd86e6de-fb0e-47dd-820a-e0da12be46e9"))
IHttpTokenEntry;

// 
// Metadata descriptor
// 
class __declspec(uuid("48b10633-825d-495e-93b0-225380053e8e"))
IMetadataInfo
{
 public:
    virtual
    PCWSTR
    GetMetaPath(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetVrPath(
        VOID
    ) const = 0;

    virtual
    IHttpTokenEntry *
    GetVrToken(
        VOID
    ) = 0;

    virtual
    IHttpModuleContextContainer *
    GetModuleContextContainer(
        VOID
    ) = 0;
};

class __declspec(uuid("3fc5c336-9ad7-45ea-af2f-31b59302c9fe"))
IReferencedMetadataInfo: public IMetadataInfo
{
public:
    virtual
    VOID
    ReferenceMetadata(
        VOID
    ) = 0;

    virtual
    VOID
    DereferenceMetadata(
        VOID
    ) = 0;
};

// 
// Provides an interface to an HTTP request object.  The methods on this
// class can be used to inspect and modify request data.
// 
class __declspec(uuid("e8698f7e-576e-4cac-a309-67435355faef"))
IHttpRequest
{
 public:
    virtual
    HTTP_REQUEST *
    GetRawHttpRequest(
        VOID
    ) = 0;

    virtual
    const HTTP_REQUEST *
    GetRawHttpRequest(
        VOID
    ) const = 0;

    virtual
    PCSTR
    GetHeader(
        IN PCSTR                pszHeaderName,
        OUT USHORT *            pcchHeaderValue = NULL
    ) const = 0;

    virtual
    PCSTR
    GetHeader(
        IN  HTTP_HEADER_ID      ulHeaderIndex,
        OUT USHORT *            pcchHeaderValue = NULL
    ) const = 0;

    virtual
    HRESULT
    SetHeader(
        IN PCSTR                pszHeaderName,
        IN PCSTR                pszHeaderValue,
        IN USHORT               cchHeaderValue,
        IN BOOL                 fReplace
    ) = 0;

    virtual
    HRESULT
    SetHeader(
        IN HTTP_HEADER_ID       ulHeaderIndex,
        IN PCSTR                pszHeaderValue,
        IN USHORT               cchHeaderValue,
        IN BOOL                 fReplace
    ) = 0;

    virtual
    HRESULT
    DeleteHeader(
        IN PCSTR                pszHeaderName
    ) = 0;

    virtual
    HRESULT
    DeleteHeader(
        IN HTTP_HEADER_ID       ulHeaderIndex
    ) = 0;

    virtual
    PCSTR
    GetHttpMethod(
        VOID
    ) const = 0;

    virtual
    HRESULT
    SetHttpMethod(
        IN PCSTR                pszHttpMethod
    ) = 0;

    virtual
    HRESULT
    SetUrl(
        IN PCWSTR               pszUrl,
        IN DWORD                cchUrl,
        IN BOOL                 fResetQueryString
    ) = 0;

    virtual
    HRESULT
    SetUrl(
        IN PCSTR                pszUrl,
        IN DWORD                cchUrl,
        IN BOOL                 fResetQueryString
    ) = 0;

    virtual
    BOOL
    GetUrlChanged(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetForwardedUrl(
        VOID
    ) const = 0;

    virtual
    PSOCKADDR
    GetLocalAddress(
        VOID
    ) const = 0;

    virtual
    PSOCKADDR
    GetRemoteAddress(
        VOID
    ) const = 0;

    virtual
    HRESULT
    ReadEntityBody(
        OUT VOID *              pvBuffer,
        IN  DWORD               cbBuffer,
        IN  BOOL                fAsync,
        OUT DWORD *             pcbBytesReceived,
        OUT BOOL *              pfCompletionPending = NULL
    ) = 0;

    virtual
    HRESULT
    InsertEntityBody(
        IN VOID *               pvBuffer,
        IN DWORD                cbBuffer
    ) = 0;

    virtual
    DWORD
    GetRemainingEntityBytes(
        VOID
    ) = 0;

    virtual
    VOID
    GetHttpVersion(
        OUT USHORT *            pMajorVersion,
        OUT USHORT *            pMinorVersion
    ) const = 0;

    virtual
    HRESULT
    GetClientCertificate(
        OUT HTTP_SSL_CLIENT_CERT_INFO **    ppClientCertInfo,
        OUT BOOL *                          pfClientCertNegotiated
    ) = 0;

    virtual
    HRESULT
    NegotiateClientCertificate(
        IN BOOL                 fAsync,
        OUT BOOL *              pfCompletionPending = NULL
    ) = 0;

    virtual
    DWORD
    GetSiteId(
        VOID
    ) const = 0;

    virtual
    HRESULT
    GetHeaderChanges(
        IN      DWORD   dwOldChangeNumber,
        OUT     DWORD * pdwNewChangeNumber,
        IN OUT  PCSTR   knownHeaderSnapshot[HttpHeaderRequestMaximum],
        IN OUT  DWORD * pdwUnknownHeaderSnapshot,
        IN OUT  PCSTR **ppUnknownHeaderNameSnapshot,
        IN OUT  PCSTR **ppUnknownHeaderValueSnapshot,
        __out_ecount(HttpHeaderRequestMaximum+1)
                DWORD   diffedKnownHeaderIndices[HttpHeaderRequestMaximum+1],
        OUT     DWORD * pdwDiffedUnknownHeaders,
        OUT     DWORD **ppDiffedUnknownHeaderIndices
    ) = 0;
};

class __declspec(uuid("d9244ae1-51f8-4aa1-a66d-19277c33e610"))
IHttpRequest2 : public IHttpRequest
{
 public:
    virtual
    HRESULT
    GetChannelBindingToken(
        __deref_out_bcount_part(*pTokenSize, *pTokenSize)
        PBYTE *     ppToken,
        DWORD *     pTokenSize
    ) = 0;
};

class __declspec(uuid("cb1c40ca-70f2-41a0-add2-881f5ef57388"))
IHttpCachePolicy
{
 public:
    virtual
    HTTP_CACHE_POLICY *
    GetKernelCachePolicy(
        VOID
    ) = 0;

    virtual
    VOID
    SetKernelCacheInvalidatorSet(
        VOID
    ) = 0;

    virtual
    HTTP_CACHE_POLICY *
    GetUserCachePolicy(
        VOID
    ) = 0;

    virtual
    HRESULT
    AppendVaryByHeader(
        PCSTR   pszHeader
    ) = 0;

    virtual
    PCSTR
    GetVaryByHeaders(
        VOID
    ) const = 0;

    virtual
    HRESULT
    AppendVaryByQueryString(
        PCSTR   pszParam
    ) = 0;

    virtual
    PCSTR
    GetVaryByQueryStrings(
        VOID
    ) const = 0;

    virtual
    HRESULT
    SetVaryByValue(
        PCSTR   pszValue
    ) = 0;

    virtual
    PCSTR
    GetVaryByValue(
        VOID
    ) const = 0;

    virtual
    BOOL
    IsUserCacheEnabled(
        VOID
    ) const = 0;

    virtual
    VOID
    DisableUserCache(
        VOID
    ) = 0;

    virtual
    BOOL
    IsCached(
        VOID
    ) const = 0;

    virtual
    VOID
    SetIsCached(
        VOID
    ) = 0;

    virtual
    BOOL
    GetKernelCacheInvalidatorSet(
        VOID
    ) const = 0;
};

class __declspec(uuid("9f4ba807-050e-4495-ae55-8870f7e9194a"))
IHttpCachePolicy2 : public IHttpCachePolicy
{
 public:
    virtual
    BOOL
    IsForceUpdateSet(
        VOID
    ) const = 0;

    virtual
    VOID
    SetForceUpdate(
        VOID
    ) = 0;
};

// 
// Response descriptor
// 
class __declspec(uuid("7e1c6b38-628f-4e6c-95dc-41237eb7f95e"))
IHttpResponse
{
 public:
    virtual
    HTTP_RESPONSE *
    GetRawHttpResponse(
        VOID
    ) = 0;

    virtual
    const HTTP_RESPONSE *
    GetRawHttpResponse(
        VOID
    ) const = 0;

    virtual
    IHttpCachePolicy *
    GetCachePolicy(
        VOID
    ) = 0;

    virtual
    HRESULT
    SetStatus(
        IN USHORT                   statusCode,
        IN PCSTR                    pszReason,
        IN USHORT                   uSubStatus = 0,
        IN HRESULT                  hrErrorToReport = S_OK,
        IN IAppHostConfigException *pException = NULL,
        IN BOOL                     fTrySkipCustomErrors = FALSE
    ) = 0;

    virtual
    HRESULT
    SetHeader(
        IN PCSTR                pszHeaderName,
        IN PCSTR                pszHeaderValue,
        IN USHORT               cchHeaderValue,
        IN BOOL                 fReplace
    ) = 0;

    virtual
    HRESULT
    SetHeader(
        IN HTTP_HEADER_ID       ulHeaderIndex,
        IN PCSTR                pszHeaderValue,
        IN USHORT               cchHeaderValue,
        IN BOOL                 fReplace
    ) = 0;

    virtual
    HRESULT
    DeleteHeader(
        IN PCSTR                pszHeaderName
    ) = 0;

    virtual
    HRESULT
    DeleteHeader(
        IN HTTP_HEADER_ID       ulHeaderIndex
    ) = 0;

    virtual
    PCSTR
    GetHeader(
        IN PCSTR                pszHeaderName,
        OUT USHORT *            pcchHeaderValue = NULL
    ) const = 0;

    virtual
    PCSTR
    GetHeader(
        IN  HTTP_HEADER_ID      ulHeaderIndex,
        OUT USHORT *            pcchHeaderValue = NULL
    ) const = 0;

    virtual
    VOID
    Clear(
        VOID
    ) = 0;

    virtual
    VOID
    ClearHeaders(
        VOID
    ) = 0;

    virtual
    VOID
    SetNeedDisconnect(
        VOID
    ) = 0;

    virtual
    VOID
    ResetConnection(
        VOID
    ) = 0;

    virtual
    VOID
    DisableKernelCache(
        ULONG reason = 9
    ) = 0;

    virtual
    BOOL
    GetKernelCacheEnabled(
        VOID
    ) const = 0;

    virtual
    VOID
    SuppressHeaders(
        VOID
    ) = 0;

    virtual
    BOOL
    GetHeadersSuppressed(
        VOID
    ) const = 0;

    virtual
    HRESULT
    Flush(
        IN BOOL                 fAsync,
        IN BOOL                 fMoreData,
        OUT DWORD *             pcbSent,
        OUT BOOL *              pfCompletionExpected = NULL
    ) = 0;

    virtual
    HRESULT
    Redirect(
        IN PCSTR                pszUrl,
        IN BOOL                 fResetStatusCode = TRUE,
        IN BOOL                 fIncludeParameters = FALSE
    ) = 0;

    virtual
    HRESULT
    WriteEntityChunkByReference(
        IN HTTP_DATA_CHUNK *    pDataChunk,
        IN LONG                 lInsertPosition = -1
    ) = 0;

    virtual
    HRESULT
    WriteEntityChunks(
        IN  HTTP_DATA_CHUNK *   pDataChunks,
        IN  DWORD               nChunks,
        IN  BOOL                fAsync,
        IN  BOOL                fMoreData,
        OUT DWORD *             pcbSent,
        OUT BOOL *              pfCompletionExpected = NULL
    ) = 0;

    virtual
    VOID
    DisableBuffering(
        VOID
    ) = 0;

    virtual
    VOID
    GetStatus(
        OUT USHORT *                    pStatusCode,
        OUT USHORT *                    pSubStatus = NULL,
        OUT PCSTR *                     ppszReason = NULL,
        OUT USHORT *                    pcchReason = NULL,
        OUT HRESULT *                   phrErrorToReport = NULL,
        OUT PCWSTR *                    ppszModule = NULL,
        OUT DWORD *                     pdwNotification = NULL,
        OUT IAppHostConfigException **  ppException = NULL,
        OUT BOOL *                      pfTrySkipCustomErrors = NULL
    ) = 0;

    virtual
    HRESULT
    SetErrorDescription(
        IN PCWSTR                       pszDescription,
        IN DWORD                        cchDescription,
        IN BOOL                         fHtmlEncode = TRUE
    ) = 0;

    virtual
    PCWSTR
    GetErrorDescription(
        OUT DWORD *                     pcchDescription = NULL
    ) = 0;

    virtual
    HRESULT
    GetHeaderChanges(
        IN      DWORD   dwOldChangeNumber,
        OUT     DWORD * pdwNewChangeNumber,
        IN OUT  PCSTR   knownHeaderSnapshot[HttpHeaderResponseMaximum],
        IN OUT  DWORD * pdwUnknownHeaderSnapshot,
        IN OUT  PCSTR **ppUnknownHeaderNameSnapshot,
        IN OUT  PCSTR **ppUnknownHeaderValueSnapshot,
        __out_ecount(HttpHeaderResponseMaximum+1)
                DWORD   diffedKnownHeaderIndices[HttpHeaderResponseMaximum+1],
        OUT     DWORD * pdwDiffedUnknownHeaders,
        OUT     DWORD **ppDiffedUnknownHeaderIndices
    ) = 0;

    virtual
    VOID
    CloseConnection(
        VOID
    ) = 0;
};

// 
// User descriptor
// 
class __declspec(uuid("8059e6f8-10ce-4d61-b47e-5a1d8d9a8b67"))
IHttpUser
{
 public:
    virtual
    PCWSTR
    GetRemoteUserName(
        VOID
    ) = 0;

    virtual
    PCWSTR
    GetUserName(
        VOID
    ) = 0;

    virtual 
    PCWSTR
    GetAuthenticationType(
        VOID
    ) = 0;

    virtual
    PCWSTR
    GetPassword(
        VOID
    ) = 0;  

    virtual
    HANDLE
    GetImpersonationToken(
        VOID
    ) = 0;

    virtual
    HANDLE
    GetPrimaryToken(
        VOID
    ) = 0;

    virtual
    VOID
    ReferenceUser(
        VOID
    ) = 0;

    virtual
    VOID
    DereferenceUser(
        VOID
    ) = 0;

    virtual
    BOOL
    SupportsIsInRole(
        VOID
    ) = 0;

    virtual
    HRESULT
    IsInRole(
        IN  PCWSTR  pszRoleName,
        OUT BOOL *  pfInRole
    ) = 0;

    virtual
    PVOID
    GetUserVariable(
        IN PCSTR    pszVariableName
    ) = 0;
};

#define HTTP_USER_VARIABLE_SID              "SID"
#define HTTP_USER_VARIABLE_CTXT_HANDLE      "CtxtHandle"
#define HTTP_USER_VARIABLE_CRED_HANDLE      "CredHandle"

class __declspec(uuid("841d9a71-75f4-4626-8b97-66046ca7e45b"))
IHttpConnectionStoredContext : public IHttpStoredContext
{
 public:
    virtual
    VOID
    NotifyDisconnect(
        VOID
    ) = 0;
};

class __declspec(uuid("f3dd2fb3-4d11-4295-b8ab-4cb667add1fe"))
IHttpConnectionModuleContextContainer : public IHttpModuleContextContainer
{
 public:
    virtual
    IHttpConnectionStoredContext *
    GetConnectionModuleContext(
        IN HTTP_MODULE_ID       moduleId
    ) = 0;

    virtual
    HRESULT
    SetConnectionModuleContext(
        IN IHttpConnectionStoredContext *   ppStoredContext,
        IN HTTP_MODULE_ID                   moduleId
    ) = 0;  
};

// 
// Connection descriptor
// 
class __declspec(uuid("d9a5de00-3346-4599-9826-fe88565e1226"))
IHttpConnection
{
 public:
    virtual
    BOOL
    IsConnected(
        VOID
    ) const = 0;

    virtual
    VOID *
    AllocateMemory(
        DWORD               cbAllocation
    ) = 0;

    virtual
    IHttpConnectionModuleContextContainer *
    GetModuleContextContainer(
        VOID
    ) = 0;
};

// 
// Forward declarations
// 
class __declspec(uuid("71e95595-8c74-44d9-88a9-f5112d5f5900"))
IHttpFileInfo;

class __declspec(uuid("eb16a6ec-ba5d-436f-bf24-3ede13906450"))
IHttpSite;

class __declspec(uuid("671e6d34-9380-4df4-b453-91129df02b24"))
ICustomNotificationProvider;

class __declspec(uuid("6f3f657d-2fb8-43c6-a096-5064b41f0580"))
IHttpEventProvider;

class CHttpModule;

//
// IHttpContext extended interface versions (deprecated)
//
enum HTTP_CONTEXT_INTERFACE_VERSION
{
};

// 
// Context object representing the processing of an HTTP request
// 
class __declspec(uuid("424c1b8c-a1ba-44d7-ac98-9f8f457701a5"))
IHttpContext
{
 public:
    virtual
    IHttpSite *
    GetSite(
        VOID
    ) = 0;

    virtual
    IHttpApplication *
    GetApplication(
        VOID
    ) = 0;

    virtual
    IHttpConnection *
    GetConnection(
        VOID
    ) = 0;

    virtual
    IHttpRequest *
    GetRequest(
        VOID
    ) = 0;

    virtual
    IHttpResponse *
    GetResponse(
        VOID
    ) = 0;

    virtual
    BOOL
    GetResponseHeadersSent(
        VOID
    ) const = 0;

    virtual
    IHttpUser *
    GetUser(
        VOID
    ) const = 0;

    virtual
    IHttpModuleContextContainer *
    GetModuleContextContainer(
        VOID
    ) = 0;

    virtual
    VOID
    IndicateCompletion(
        IN REQUEST_NOTIFICATION_STATUS     notificationStatus
    ) = 0;

    virtual
    HRESULT
    PostCompletion(
        IN DWORD                cbBytes
    ) = 0;

    virtual
    VOID
    DisableNotifications(
        IN DWORD                dwNotifications,
        IN DWORD                dwPostNotifications
    ) = 0;

    virtual
    BOOL
    GetNextNotification(
        IN  REQUEST_NOTIFICATION_STATUS status,
        OUT DWORD *                     pdwNotification,
        OUT BOOL *                      pfIsPostNotification,
        OUT CHttpModule **              ppModuleInfo,
        OUT IHttpEventProvider **       ppRequestOutput
    ) = 0;

    virtual
    BOOL
    GetIsLastNotification(
        IN  REQUEST_NOTIFICATION_STATUS status
    ) = 0;    

    virtual
    HRESULT
    ExecuteRequest(
        IN BOOL                 fAsync,
        IN IHttpContext *       pHttpContext,
        IN DWORD                dwExecuteFlags,
        IN IHttpUser *          pHttpUser,
        OUT BOOL *              pfCompletionExpected = NULL
    ) = 0;                      

    virtual
    DWORD
    GetExecuteFlags(
        VOID
    ) const = 0;

    virtual
    HRESULT
    GetServerVariable(
        PCSTR               pszVariableName,
        __deref_out_ecount(*pcchValueLength) PCWSTR * ppszValue,
        __out DWORD *       pcchValueLength
    ) = 0;

    virtual
    HRESULT
    GetServerVariable(
        PCSTR               pszVariableName,
        __deref_out_ecount(*pcchValueLength) PCSTR * ppszValue,
        __out DWORD *       pcchValueLength
    ) = 0;

    virtual
    HRESULT
    SetServerVariable(
        PCSTR               pszVariableName,
        PCWSTR              pszVariableValue
    ) = 0;

    virtual
    VOID *
    AllocateRequestMemory(
        IN DWORD                cbAllocation
    ) = 0;

    virtual
    IHttpUrlInfo *
    GetUrlInfo(
        VOID
    ) = 0;

    virtual
    IMetadataInfo *
    GetMetadata(
        VOID
    ) = 0;

    virtual
    PCWSTR
    GetPhysicalPath(
        OUT DWORD *         pcchPhysicalPath = NULL
    ) = 0;

    virtual
    PCWSTR
    GetScriptName(
        OUT DWORD *         pcchScriptName = NULL
    ) const = 0;

    virtual
    PCWSTR
    GetScriptTranslated(
        OUT DWORD *         pcchScriptTranslated = NULL
    ) = 0;

    virtual
    IScriptMapInfo *
    GetScriptMap(
        VOID
    ) const = 0;

    virtual
    VOID
    SetRequestHandled(
        VOID
    ) = 0;

    virtual
    IHttpFileInfo *
    GetFileInfo(
        VOID
    ) const = 0;

    virtual
    HRESULT
    MapPath(
                                           PCWSTR   pszUrl,
        __out_bcount_opt(*pcbPhysicalPath) PWSTR    pszPhysicalPath,
                                    IN OUT DWORD *  pcbPhysicalPath
    ) = 0;

    virtual
    HRESULT
    NotifyCustomNotification(
        ICustomNotificationProvider *   pCustomOutput,
        OUT BOOL *                      pfCompletionExpected
    ) = 0;

    virtual
    IHttpContext *
    GetParentContext(
        VOID
    ) const = 0;

    virtual
    IHttpContext *
    GetRootContext(
        VOID
    ) const = 0;

    virtual
    HRESULT
    CloneContext(
        IN DWORD                dwCloneFlags,
        OUT IHttpContext **     ppHttpContext
    ) = 0;

    virtual
    HRESULT
    ReleaseClonedContext(
        VOID
    ) = 0;

    virtual
    HRESULT
    GetCurrentExecutionStats(
        OUT DWORD * pdwNotification,
        OUT DWORD * pdwNotificationStartTickCount = NULL,
        OUT PCWSTR *  ppszModule = NULL,
        OUT DWORD * pdwModuleStartTickCount = NULL,
        OUT DWORD * pdwAsyncNotification = NULL,
        OUT DWORD * pdwAsyncNotificationStartTickCount = NULL
    ) const = 0;

    virtual
    IHttpTraceContext *
    GetTraceContext(
        VOID
    ) const = 0;

    virtual
    HRESULT
    GetServerVarChanges(
        IN      DWORD       dwOldChangeNumber,
        OUT     DWORD *     pdwNewChangeNumber,
        IN OUT  DWORD *     pdwVariableSnapshot,
        IN OUT  PCSTR **    ppVariableNameSnapshot,
        IN OUT  PCWSTR **   ppVariableValueSnapshot,
        OUT     DWORD *     pdwDiffedVariables,
        OUT     DWORD **    ppDiffedVariableIndices
    ) = 0;

    virtual
    HRESULT
    CancelIo(
        VOID
    ) = 0;

    virtual
    HRESULT
    MapHandler(
        IN      DWORD               dwSiteId,
        IN      PCWSTR              pszSiteName,
        IN      PCWSTR              pszUrl,
        IN      PCSTR               pszVerb,
        OUT     IScriptMapInfo **   ppScriptMap,
        IN      BOOL                fIgnoreWildcardMappings = FALSE
    ) = 0;

    __declspec(deprecated("This method is deprecated. Use the HttpGetExtendedInterface helper function instead."))
    virtual
    HRESULT
    GetExtendedInterface(
        IN  HTTP_CONTEXT_INTERFACE_VERSION  version,
        OUT PVOID *                         ppInterface
    ) = 0;
};


// 
// Context object representing the processing of an HTTP request
// IHttpContext2 is available on Win7 and newer
//
class __declspec(uuid("c986182c-cf4a-4482-8205-0dbbc1fd6cee"))
IHttpContext2: public IHttpContext
{
public:
    virtual
    IHttpUser *
    GetOriginalUser(
        VOID
    ) const = 0;
};

class __declspec(uuid("9f9098d5-915c-4294-a52e-66532a232bc9"))
IHttpTraceContext
{
public:
    virtual
    HRESULT
    GetTraceConfiguration(
        IN OUT HTTP_TRACE_CONFIGURATION *  pHttpTraceConfiguration
    ) = 0;
    
    virtual    
    HRESULT
    SetTraceConfiguration(
        IN HTTP_MODULE_ID              moduleId,
        IN HTTP_TRACE_CONFIGURATION *  pHttpTraceConfiguration,
        IN DWORD                       cHttpTraceConfiguration = 1
    ) = 0;

    virtual
    HRESULT
    RaiseTraceEvent(
        IN HTTP_TRACE_EVENT * pTraceEvent 
    ) = 0;

    virtual
    LPCGUID
    GetTraceActivityId(
    ) = 0;

    virtual
    HRESULT
    QuickTrace(
        IN PCWSTR   pszData1,
        IN PCWSTR   pszData2 = NULL,
        IN HRESULT  hrLastError = S_OK,
        //
        // 4 == TRACE_LEVEL_INFORMATION
        //
        IN UCHAR    Level = 4
    ) = 0;
};

class __declspec(uuid("37776aff-852e-4eec-93a5-b85a285a95b8"))
IHttpCacheSpecificData;

//
// Cache helpers
//
class __declspec(uuid("cdef2aad-20b3-4512-b1b1-094b3844aeb2"))
IHttpCacheKey
{
 public:
    virtual
    DWORD
    GetHash(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetCacheName(
        VOID
    ) const = 0;

    virtual
    bool
    GetIsEqual(
        IHttpCacheKey *         pCacheCompareKey
    ) const = 0;

    virtual
    bool
    GetIsPrefix(
        IHttpCacheKey *         pCacheCompareKey
    ) const = 0;

    virtual
    VOID
    Enum(
        IHttpCacheSpecificData *
    ) = 0;
};

class __declspec(uuid("37776aff-852e-4eec-93a5-b85a285a95b8"))
IHttpCacheSpecificData
{
 public:
    virtual
    IHttpCacheKey *
    GetCacheKey(
        VOID
    ) const = 0;

    virtual
    VOID
    ReferenceCacheData(
        VOID
    ) = 0;

    virtual
    VOID
    DereferenceCacheData(
        VOID
    ) = 0;

    virtual
    VOID
    ResetTTL(
        VOID
    ) = 0;

    virtual
    VOID
    DecrementTTL(
        OUT BOOL    *pfTTLExpired
    ) = 0;

    virtual
    VOID
    SetFlushed(
        VOID
    ) = 0;

    virtual
    BOOL
    GetFlushed(
        VOID
    ) const = 0;
};

// 
// Site descriptor
// 
class __declspec(uuid("eb16a6ec-ba5d-436f-bf24-3ede13906450"))
IHttpSite
{
 public:
    virtual
    DWORD
    GetSiteId(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetSiteName(
        VOID
    ) const = 0;

    virtual
    IHttpModuleContextContainer *
    GetModuleContextContainer(
        VOID
    ) = 0;

    virtual
    IHttpPerfCounterInfo *
    GetPerfCounterInfo(
        VOID
    ) = 0;
};

//
// File change monitor
//
//
class __declspec(uuid("985422da-b0cf-473b-ba9e-8148ceb3e240"))
IHttpFileMonitor
{
 public:
    virtual
    IHttpModuleContextContainer *
    GetModuleContextContainer(
        VOID
    ) = 0;

    virtual
    VOID
    DereferenceFileMonitor(
        VOID
    ) = 0;
};

//
// File descriptor
// 
// 
class __declspec(uuid("71e95595-8c74-44d9-88a9-f5112d5f5900"))
IHttpFileInfo : public IHttpCacheSpecificData
{
 public:
    virtual
    DWORD
    GetAttributes(
        VOID
    ) const = 0;

    virtual
    VOID
    GetSize(
        OUT ULARGE_INTEGER *        pliSize
    ) const = 0;

    virtual
    const BYTE *
    GetFileBuffer(
        VOID
    ) const = 0;

    virtual
    HANDLE
    GetFileHandle(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetFilePath(
        VOID
    ) const = 0;

    virtual
    PCSTR
    GetETag(
        OUT USHORT *                pcchETag = NULL
    ) const = 0;

    virtual
    VOID
    GetLastModifiedTime(
        OUT FILETIME *              pFileTime
    ) const = 0;

    virtual
    PCSTR
    GetLastModifiedString(
        VOID
    ) const = 0;

    virtual
    BOOL
    GetHttpCacheAllowed(
        OUT DWORD *     pSecondsToLive
    ) const = 0;

    virtual
    HRESULT
    AccessCheck(
        IN HANDLE                   hUserToken,
        IN PSID                     pUserSid
    ) = 0;

    virtual
    HANDLE
    GetVrToken(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetVrPath(
        VOID
    ) const = 0;

    virtual
    IHttpModuleContextContainer *
    GetModuleContextContainer(
        VOID
    ) = 0;

    virtual
    BOOL
    CheckIfFileHasChanged(
        IN HANDLE                   hUserToken
    ) = 0;
};


// 
// Token-cache entry
// 
class __declspec(uuid("fd86e6de-fb0e-47dd-820a-e0da12be46e9"))
IHttpTokenEntry : public IHttpCacheSpecificData
{
 public:
    virtual
    HANDLE
    GetImpersonationToken(
        VOID
    ) = 0;

    virtual
    HANDLE
    GetPrimaryToken(
        VOID
    ) = 0;

    virtual
    PSID
    GetSid(
        VOID
    ) = 0;
};


//
// IHttpServer extended interface versions
//
enum HTTP_SERVER_INTERFACE_VERSION
{
    HTTP_SERVER_INTERFACE_V2
};


//
// Global utility descriptor
//
class __declspec(uuid("eda2a40f-fb92-4d6d-b52b-c8c207380b4e"))
IHttpServer
{
 public:
    virtual
    BOOL
    IsCommandLineLaunch(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetAppPoolName(
        VOID
    ) const = 0;

    virtual
    HRESULT
    AssociateWithThreadPool(
        IN HANDLE                              hHandle,
        IN LPOVERLAPPED_COMPLETION_ROUTINE     completionRoutine
    ) = 0;

    virtual
    VOID
    IncrementThreadCount(
        VOID
    ) = 0;

    virtual
    VOID
    DecrementThreadCount(
        VOID
    ) = 0;

    virtual
    VOID
    ReportUnhealthy(
        IN PCWSTR               pszReasonString,
        IN HRESULT              hrReason
    ) = 0;

    virtual
    VOID
    RecycleProcess(
        PCWSTR                  pszReason
    ) = 0;

    virtual
    IAppHostAdminManager *
    GetAdminManager(
        VOID
    ) const = 0;

    virtual
    HRESULT
    GetFileInfo(
        IN  PCWSTR               pszPhysicalPath,
        IN  HANDLE               hUserToken,
        IN  PSID                 pSid,
        IN  PCWSTR               pszChangeNotificationPath,
        IN  HANDLE               hChangeNotificationToken,
        IN  BOOL                 fCache,
        OUT IHttpFileInfo **     ppFileInfo,
        IN  IHttpTraceContext *  pHttpTraceContext = NULL
    ) = 0;

    virtual
    HRESULT
    FlushKernelCache(
        IN PCWSTR               pszUrl
    ) = 0;

    virtual
    HRESULT
    DoCacheOperation(
        IN CACHE_OPERATION              cacheOperation,
        IN IHttpCacheKey *              pCacheKey,
        OUT IHttpCacheSpecificData **   ppCacheSpecificData,
        IN  IHttpTraceContext *         pHttpTraceContext = NULL
    ) = 0;

    virtual
    GLOBAL_NOTIFICATION_STATUS
    NotifyCustomNotification(
        ICustomNotificationProvider * pCustomOutput
    ) = 0;

    virtual
    IHttpPerfCounterInfo *
    GetPerfCounterInfo(
        VOID
    ) = 0;

    virtual
    VOID
    RecycleApplication(
        PCWSTR                  pszAppConfigPath
    ) = 0;

    virtual
    VOID
    NotifyConfigurationChange(
        PCWSTR                  pszPath
    ) = 0;

    virtual
    VOID
    NotifyFileChange(
        PCWSTR                  pszFileName
    ) = 0;

    virtual
    IDispensedHttpModuleContextContainer *
    DispenseContainer(
        VOID
    ) = 0;

    virtual
    HRESULT
    AddFragmentToCache(
        IN HTTP_DATA_CHUNK *    pDataChunk,
        PCWSTR                  pszFragmentName
    ) = 0;

    virtual
    HRESULT
    ReadFragmentFromCache(
        PCWSTR          pszFragmentName,
        OUT BYTE *      pvBuffer,
        DWORD           cbSize,
        OUT DWORD *     pcbCopied
    ) = 0;

    virtual
    HRESULT
    RemoveFragmentFromCache(
        PCWSTR          pszFragmentName
    ) = 0;

    virtual
    HRESULT
    GetWorkerProcessSettings(
        OUT IWpfSettings ** ppWorkerProcessSettings
    ) = 0;

    virtual
    HRESULT
    GetProtocolManagerCustomInterface(
        IN PCWSTR       pProtocolManagerDll,
        IN PCWSTR       pProtocolManagerDllInitFunction,
        IN DWORD        dwCustomInterfaceId,
        OUT PVOID*      ppCustomInterface
    ) = 0;

    virtual
    BOOL
    SatisfiesPrecondition(
        PCWSTR          pszPrecondition,
        BOOL *          pfUnknownPrecondition = NULL
    ) const = 0;

    virtual
    IHttpTraceContext *
    GetTraceContext(
        VOID
    ) const = 0;

    virtual
    HRESULT
    RegisterFileChangeMonitor(
        PCWSTR                  pszPath,
        HANDLE                  hToken,
        IHttpFileMonitor **     ppFileMonitor
    ) = 0;

    virtual
    HRESULT
    GetExtendedInterface(
        IN  HTTP_SERVER_INTERFACE_VERSION   version,
        OUT PVOID *                         ppInterface
    ) = 0;
};

class __declspec(uuid("34af637e-afe8-4556-bcc1-767f8e0b4a4e"))
IHttpServer2 : public IHttpServer
{
 public:

    virtual
    HRESULT
    GetToken(
        PCWSTR              pszUserName,
        PCWSTR              pszPassword,
        DWORD               dwLogonMethod,
        IHttpTokenEntry **  ppTokenEntry,
        PCWSTR              pszDefaultDomain = NULL,
        PSOCKADDR           pSockAddr = NULL,
        IHttpTraceContext * pHttpTraceContext = NULL
    ) = 0;

    virtual
    PCWSTR
    GetAppPoolConfigFile(
        __out DWORD * pcchConfigFilePath = NULL
    ) const = 0;

    virtual
    HRESULT
    GetExtendedInterface(
        __in const GUID &       Version1,
        __in PVOID              pInput,
        __in const GUID &       Version2,
        __deref_out PVOID *     ppOutput
    ) = 0;

    virtual
    HRESULT
    GetMetadata(
        __in PCWSTR                      pszSiteName,
        __in PCWSTR                      pszUrl,
        __deref_out IReferencedMetadataInfo  ** ppMetadataInfo 
    ) = 0;

    virtual
    HRESULT
    GetWorkerProcessFramework(
        OUT IWorkerProcessFramework ** ppWorkerProcessFramework
    ) = 0;
};

//
// Helper function to get extended HTTP interfaces.
//
// Template parameters (HttpType1 and HttpType2)
// can be deduced from the arguments to the function.
//
// Example:
//
//   IHttpRequest * pHttpRequest = pHttpContext->GetRequest();
//   IHttpRequest2 * pHttpRequest2;
//   HRESULT hr = HttpGetExtendedInterface(g_pHttpServer, pHttpRequest, &pHttpRequest2);
//   if( SUCCEEDED(hr) )
//   {
//      // Use pHttpRequest2.
//   }
//
// Where pHttpContext is an IHttpContext pointer and
// g_pHttpServer is an IHttpServer pointer.
//

template <class HttpType1, class HttpType2>
HRESULT
HttpGetExtendedInterface(
    __in IHttpServer *          pHttpServer,
    __in HttpType1 *            pInput,
    __deref_out HttpType2 **    ppOutput
)
{
    HRESULT         hr;
    IHttpServer2 *  pHttpServer2;
    hr = pHttpServer->GetExtendedInterface(HTTP_SERVER_INTERFACE_V2,
                                           reinterpret_cast<void**>(&pHttpServer2) );
    if (SUCCEEDED(hr))
    {
        hr = pHttpServer2->GetExtendedInterface(__uuidof(HttpType1),
                                                pInput,
                                                __uuidof(HttpType2),
                                                reinterpret_cast<void**>(ppOutput) );
    }
    return hr;
}

//
// Notification specific output for notifications
//
class __declspec(uuid("6f3f657d-2fb8-43c6-a096-5064b41f0580"))
IHttpEventProvider
{
 public:
    virtual
    VOID
    SetErrorStatus(
        HRESULT             hrError
    ) = 0;
};

//
// Completion information for notifications
//
class __declspec(uuid("49dd20e3-d9c0-463c-8821-f3413b55cc00"))
IHttpCompletionInfo
{
 public:
    virtual
    DWORD
    GetCompletionBytes(
        VOID
    ) const = 0;

    virtual
    HRESULT
    GetCompletionStatus(
        VOID
    ) const = 0;
};

//
// RQ_ and GL_ CUSTOM_NOTIFICATION outputs
//
class __declspec(uuid("671e6d34-9380-4df4-b453-91129df02b24"))
ICustomNotificationProvider : public IHttpEventProvider
{
 public:
    virtual
    PCWSTR
    QueryNotificationType(
        VOID
    ) = 0;
};

//
// RQ_REQUEST_AUTHENTICATE descriptor
//
class __declspec(uuid("304d51d0-0307-45ed-83fd-dd3fc032fdfc"))
IAuthenticationProvider : public IHttpEventProvider
{
 public:
    virtual
    VOID
    SetUser(
        IN IHttpUser *          pUser
    ) = 0;
};

//
// RQ_MAP_REQUEST_HANDLER
//
class __declspec(uuid("fea3ce6b-e346-47e7-b2a6-ad265baeff2c"))
IMapHandlerProvider : public IHttpEventProvider
{
 public:
    virtual
    HRESULT
    SetScriptName(
        PCWSTR                  pszScriptName,
        DWORD                   cchScriptName
    ) = 0;

    virtual
    VOID
    SetScriptMap(
        IN IScriptMapInfo *     pScriptMap
    ) = 0;

    virtual
    VOID
    SetFileInfo(
        IN IHttpFileInfo *      pFileInfo
    ) = 0;
};

//
// RQ_MAP_PATH
//
class __declspec(uuid("8efdf557-a8f1-4bc9-b462-6df3b038a59a"))
IMapPathProvider : public IHttpEventProvider
{
 public:
    virtual
    PCWSTR
    GetUrl(
    ) const = 0;

    virtual
    PCWSTR
    GetPhysicalPath(
    ) const = 0;

    virtual
    HRESULT
    SetPhysicalPath(
        PCWSTR pszPhysicalPath,
        DWORD  cchPhysicalPath
    ) = 0;
};

//
// RQ_SEND_RESPONSE
//
class __declspec(uuid("57f2e7bc-0bcf-4a9f-94a4-10e55c6e5b51"))
ISendResponseProvider : public IHttpEventProvider
{
 public:
    virtual
    BOOL
    GetHeadersBeingSent(
        VOID
    ) const = 0;

    virtual
    DWORD
    GetFlags(
        VOID
    ) const = 0;

    virtual
    VOID
    SetFlags(
        DWORD dwFlags
    ) = 0;

    virtual
    HTTP_LOG_DATA *
    GetLogData(
        VOID
    ) const = 0;

    virtual
    HRESULT
    SetLogData(
        IN HTTP_LOG_DATA *pLogData
    ) = 0;

    virtual
    BOOL
    GetReadyToLogData(
        VOID
    ) const = 0;
};

//
// RQ_READ_ENTITY
//
class __declspec(uuid("fe6d905a-99b8-49fd-b389-cfc809562b81"))
IReadEntityProvider : public IHttpEventProvider
{
 public:
    virtual
    VOID
    GetEntity(
        OUT PVOID *             ppBuffer,
        OUT DWORD *             pcbData,
        OUT DWORD *             pcbBuffer
    ) = 0;

    virtual
    VOID
    SetEntity(
        IN PVOID            pBuffer,
        DWORD               cbData,
        DWORD               cbBuffer
    ) = 0;
};

//
// GL_PRE_BEGIN_REQUEST provider
//
class __declspec(uuid("fb715d26-aff9-476a-8fc0-6b1acb3d1098"))
IPreBeginRequestProvider : public IHttpEventProvider
{
 public:
    virtual
    IHttpContext *
    GetHttpContext(
        VOID
    ) = 0;
};

//
// GL_APPLICATION_START provider
//
class __declspec(uuid("1de2c71c-c126-4512-aed3-f4f885e14997"))
IHttpApplicationProvider : public IHttpEventProvider
{
 public:
    virtual
    IHttpApplication *
    GetApplication(
        VOID
    ) = 0;
};

typedef IHttpApplicationProvider    IHttpApplicationStartProvider;

class __declspec(uuid("ba32d330-9ea8-4b9e-89f1-8c76a323277f"))
IHttpModuleFactory;

//
// GL_APPLICATION_RESOLVE_MODULES provider
//
class __declspec(uuid("0617d9b9-e20f-4a9f-94f9-35403b3be01e"))
IHttpApplicationResolveModulesProvider : public IHttpApplicationProvider
{
 public:
    virtual 
    HRESULT
    RegisterModule(
        IN HTTP_MODULE_ID       parentModuleId,
        IN IHttpModuleFactory * pModuleFactory,
        IN PCWSTR               pszModuleName,
        IN PCWSTR               pszModuleType,
        IN PCWSTR               pszModulePreCondition,
        IN DWORD                dwRequestNotifications,
        IN DWORD                dwPostRequestNotifications
    ) = 0;

    virtual
    HRESULT
    SetPriorityForRequestNotification(
        IN PCWSTR               pszModuleName,
        IN DWORD                dwRequestNotification,
        IN PCWSTR               pszPriorityAlias
    ) = 0;
};

//
// GL_APPLICATION_STOP provider
//
typedef IHttpApplicationProvider   IHttpApplicationStopProvider;

//
// GL_RSCA_QUERY provider
//
class __declspec(uuid("63fdc43f-934a-4ee5-bcd8-7e7b50b75605"))
IGlobalRSCAQueryProvider : public IHttpEventProvider
{
 public:
    virtual
    PCWSTR
    GetFunctionName(
        VOID
    ) const = 0;

    virtual
    PCWSTR
    GetFunctionParameters(
        VOID
    ) const = 0;

    virtual
    HRESULT
    GetOutputBuffer(
        DWORD       cbBuffer,
        OUT BYTE ** ppbBuffer
    ) = 0;

    virtual
    HRESULT
    ResizeOutputBuffer(
        DWORD          cbNewBuffer,
        DWORD          cbBytesToCopy,
        IN OUT BYTE ** ppbBuffer
    ) = 0;

    virtual
    VOID
    SetResult(
        DWORD       cbData,
        HRESULT     hr
    ) = 0;
};

//
// GL_STOP_LISTENING
//
class __declspec(uuid("41f9a601-e25d-4ac8-8a1f-635698a30ab9"))
IGlobalStopListeningProvider : public IHttpEventProvider
{
 public:
    virtual
    BOOL
    DrainRequestsGracefully(
        VOID
    ) const = 0;
};

//
// GL_CACHE_OPERATION
//
class __declspec(uuid("58925fb9-7c5e-4684-833b-4a04e1286690"))
ICacheProvider : public IHttpEventProvider
{
 public:
    virtual
    CACHE_OPERATION
    GetCacheOperation(
        VOID
    ) const = 0;

    virtual
    IHttpCacheKey *
    GetCacheKey(
        VOID
    ) const = 0;

    virtual
    IHttpCacheSpecificData *
    GetCacheRecord(
        VOID
    ) const = 0;

    virtual
    VOID
    SetCacheRecord(
        IHttpCacheSpecificData *    pCacheRecord
    ) = 0;

    virtual
    IHttpTraceContext *
    GetTraceContext(
        VOID
    ) const = 0;
};

//
// GL_CONFIGURATION_CHANGE
//
class __declspec(uuid("3405f3b4-b3d6-4b73-b5f5-4d8a3cc642ce"))
IGlobalConfigurationChangeProvider : public IHttpEventProvider
{
 public:
    virtual
    PCWSTR
    GetChangePath(
        VOID
    ) const = 0;
};

//
// GL_FILE_CHANGE
//
class __declspec(uuid("ece31ee5-0486-4fb0-a875-6739a2d7daf5"))
IGlobalFileChangeProvider : public IHttpEventProvider
{
public:
    virtual
    PCWSTR
    GetFileName(
        VOID
    ) const = 0;

    virtual
    IHttpFileMonitor *
    GetFileMonitor(
        VOID
    ) = 0;
};

//
// GL_TRACE_EVENT
//
class __declspec(uuid("7c6bb150-0310-4718-a01f-6faceb62dc1d"))
IGlobalTraceEventProvider : public IHttpEventProvider
{
 public:
    virtual
    HRESULT
    GetTraceEvent(
        OUT HTTP_TRACE_EVENT ** ppTraceEvent
    ) = 0;

    virtual
    BOOL
    CheckSubscription(
        IN HTTP_MODULE_ID   ModuleId    
    ) = 0;     

    virtual
    HRESULT 
    GetCurrentHttpRequestContext(
        OUT IHttpContext ** ppHttpContext
    ) = 0;
};

//
// GL_THREAD_CLEANUP
//
class __declspec(uuid("6b36a149-8620-45a0-8197-00814a706e2e"))
IGlobalThreadCleanupProvider : public IHttpEventProvider
{
public:
    virtual
    IHttpApplication *
    GetApplication(
        VOID
    ) = 0;
};

//
// GL_APPLICATION_PRELOAD
//
class __declspec(uuid("2111f8d6-0c41-4ff7-bd45-5c04c7e91a73"))
IGlobalApplicationPreloadProvider : public IHttpEventProvider
{
public:
    virtual
    HRESULT
    CreateContext(
        OUT IHttpContext **     ppHttpContext
    ) = 0;

    virtual
    HRESULT
    ExecuteRequest(
        IN IHttpContext *       pHttpContext,
        IN IHttpUser *          pHttpUser
    ) = 0;
};

class CHttpModule
{
public:
    // RQ_BEGIN_REQUEST

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnBeginRequest(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPostBeginRequest(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    // RQ_AUTHENTICATE_REQUEST

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnAuthenticateRequest(
        IN IHttpContext *                       pHttpContext,
        IN IAuthenticationProvider *            pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPostAuthenticateRequest(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    // RQ_AUTHORIZE_REQUEST

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnAuthorizeRequest(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPostAuthorizeRequest(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    // RQ_RESOLVE_REQUEST_CACHE

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnResolveRequestCache(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPostResolveRequestCache(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    // RQ_MAP_REQUEST_HANDLER

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnMapRequestHandler(
        IN IHttpContext *                       pHttpContext,
        IN IMapHandlerProvider *                pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPostMapRequestHandler(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    // RQ_ACQUIRE_REQUEST_STATE

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnAcquireRequestState(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPostAcquireRequestState(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    // RQ_PRE_EXECUTE_REQUEST_HANDLER

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPreExecuteRequestHandler(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPostPreExecuteRequestHandler(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    // RQ_EXECUTE_REQUEST_HANDLER

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnExecuteRequestHandler(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPostExecuteRequestHandler(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )    
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }

    // RQ_RELEASE_REQUEST_STATE

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnReleaseRequestState(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPostReleaseRequestState(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    // RQ_UPDATE_REQUEST_CACHE

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnUpdateRequestCache(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }


    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPostUpdateRequestCache(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }

    // RQ_LOG_REQUEST

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnLogRequest(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPostLogRequest(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return RQ_NOTIFICATION_CONTINUE;
    }

    // RQ_END_REQUEST

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnEndRequest(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return RQ_NOTIFICATION_CONTINUE;
    }

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnPostEndRequest(
        IN IHttpContext *                       pHttpContext,
        IN IHttpEventProvider *                 pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }

    // RQ_SEND_RESPONSE

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnSendResponse(
        IN IHttpContext *                       pHttpContext,
        IN ISendResponseProvider *              pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }

    // RQ_MAP_PATH

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnMapPath(
        IN IHttpContext *                       pHttpContext,
        IN IMapPathProvider *                   pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }

    // RQ_READ_ENTITY

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnReadEntity(
        IN IHttpContext *                       pHttpContext,
        IN IReadEntityProvider *                pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }

    // RQ_CUSTOM_NOTIFICATION

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnCustomRequestNotification(
        IN IHttpContext *                       pHttpContext,
        IN ICustomNotificationProvider *        pProvider
    )
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }

    // Completion

    virtual 
    REQUEST_NOTIFICATION_STATUS
    OnAsyncCompletion(
        IN IHttpContext *                       pHttpContext,
        IN DWORD                                dwNotification,
        IN BOOL                                 fPostNotification,
        IN IHttpEventProvider *                 pProvider,
        IN IHttpCompletionInfo *                pCompletionInfo        
    )    
    {
        UNREFERENCED_PARAMETER( pHttpContext );
        UNREFERENCED_PARAMETER( dwNotification );
        UNREFERENCED_PARAMETER( fPostNotification );
        UNREFERENCED_PARAMETER( pProvider );
        UNREFERENCED_PARAMETER( pCompletionInfo );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CHttpModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();
        
        return RQ_NOTIFICATION_CONTINUE;
    }

    virtual
    VOID
    Dispose(
        VOID
    )
    {
        delete this;
    }

 protected:

    CHttpModule()
    {}

    virtual
    ~CHttpModule()
    {}
};

class CGlobalModule
{
 public:

    // GL_STOP_LISTENING

    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalStopListening(
        IN IGlobalStopListeningProvider  *  pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_CACHE_CLEANUP
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalCacheCleanup(
        VOID
    )
    {
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_CACHE_OPERATION
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalCacheOperation(
        IN ICacheProvider  *  pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_HEALTH_CHECK
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalHealthCheck(
        VOID
    )
    {
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_CONFIGURATION_CHANGE
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalConfigurationChange(
        IN IGlobalConfigurationChangeProvider  *  pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_FILE_CHANGE 
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalFileChange(
        IN IGlobalFileChangeProvider *  pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_PRE_BEGIN_REQUEST 
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalPreBeginRequest(
        IN IPreBeginRequestProvider  *  pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_APPLICATION_START 
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalApplicationStart(
        IN IHttpApplicationStartProvider  *  pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_APPLICATION_RESOLVE_MODULES
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalApplicationResolveModules(
        IN IHttpApplicationResolveModulesProvider  *  pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_APPLICATION_STOP

    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalApplicationStop(
        IN IHttpApplicationStopProvider *   pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_RSCA_QUERY
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalRSCAQuery(
        IN IGlobalRSCAQueryProvider  *  pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_TRACE_EVENT
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalTraceEvent(
        IN IGlobalTraceEventProvider  *  pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_CUSTOM_NOTIFICATION
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalCustomNotification(
        IN ICustomNotificationProvider *    pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    virtual
    VOID
    Terminate(
        VOID
    ) = 0;

    // GL_THREAD_CLEANUP
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalThreadCleanup(
        IN IGlobalThreadCleanupProvider *    pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

    // GL_APPLICATION_PRELOAD
    
    virtual 
    GLOBAL_NOTIFICATION_STATUS
    OnGlobalApplicationPreload(
        IN IGlobalApplicationPreloadProvider *    pProvider
    )
    {
        UNREFERENCED_PARAMETER( pProvider );
        OutputDebugStringA(
            "This module subscribed to event "
            __FUNCTION__
            " but did not override the method in its CGlobalModule implementation."
            "  Please check the method signature to make sure it matches the corresponding method.\n");
        DebugBreak();

        return GL_NOTIFICATION_CONTINUE;
    }

};

class __declspec(uuid("85c1679c-0b21-491c-afb5-c7b5c86464c4"))
IModuleAllocator
{
 public:
    virtual
    VOID *
    AllocateMemory(
        IN DWORD                    cbAllocation
    ) = 0;
};

class __declspec(uuid("ba32d330-9ea8-4b9e-89f1-8c76a323277f"))
IHttpModuleFactory
{
 public:
    virtual
    HRESULT
    GetHttpModule(
        OUT CHttpModule **          ppModule, 
        IN  IModuleAllocator *      pAllocator
    ) = 0;

    virtual
    VOID
    Terminate(
        VOID
    ) = 0;
};

//
// Register-module descriptor
//
class __declspec(uuid("07e5beb3-b798-459d-a98a-e6c485b2b3bc"))
IHttpModuleRegistrationInfo
{
 public:
    virtual 
    PCWSTR
    GetName(
        VOID
    ) const = 0;

    virtual 
    HTTP_MODULE_ID
    GetId(
        VOID
    ) const = 0;

    virtual 
    HRESULT
    SetRequestNotifications(
        IN IHttpModuleFactory * pModuleFactory,
        IN DWORD                dwRequestNotifications,
        IN DWORD                dwPostRequestNotifications
    ) = 0;

    virtual 
    HRESULT
    SetGlobalNotifications(
        IN CGlobalModule *      pGlobalModule,
        IN DWORD                dwGlobalNotifications
    ) = 0;

    virtual
    HRESULT
    SetPriorityForRequestNotification(
        IN DWORD                dwRequestNotification,
        IN PCWSTR               pszPriority
    ) = 0;

    virtual
    HRESULT
    SetPriorityForGlobalNotification(
        IN DWORD                dwGlobalNotification,
        IN PCWSTR               pszPriority
    ) = 0;
};


//
// Register Module entry point
// 

typedef
HRESULT
(WINAPI * PFN_REGISTERMODULE)(
    DWORD                           dwServerVersion,
    IHttpModuleRegistrationInfo *   pModuleInfo,
    IHttpServer *                   pGlobalInfo
);

#define MODULE_REGISTERMODULE   "RegisterModule"

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\hwebcore.h ===
/*++

   Copyright    (c)    2004    Microsoft Corporation

   Module  Name :
     hostable_web_core.h

   Abstract:

     Hostable web core enables processes other than the W3WP.exe to load the IISCore 
     and effectively host pages without having to reverse-engineer IIS W3 core 
     functionality (ISAPI filter/extension support, authentication, authorization, 
     configuring http.sys, compression, etc.).  

     This header file defines the interface between the hostable web core and the hosting process

     Note: Only single instance of the hostable web core will be allowed within one process
     Attempt to initialize more than one will result in failure

   Environment:
       Win32 - User Mode

   Project:
      IIS7

--*/

#ifndef _HOSTABLE_WEB_CORE_H_
#define _HOSTABLE_WEB_CORE_H_

// 
// The actual names of the hostable webcore DLL and the start/stop entry points
//

#define WEB_CORE_DLL_NAME                L"hwebcore.dll"
#define WEB_CORE_ACTIVATE_DLL_ENTRY      "WebCoreActivate"
#define WEB_CORE_SHUTDOWN_DLL_ENTRY      "WebCoreShutdown"



//
// Prototype for the WEB_CORE_ACTIVATE_DLL_ENTRY call used to
// start the hostable webcore. 
// Hosting process must provide path to the Application Host config file
// that contains the description of sites/applications/appools
// second parameter is meant mainly for identifying webcore instance
// when reporting NT event log events
//
// Return values:
//
// HRESULT_FROM_WIN32( ERROR_SERVICE_ALREADY_RUNNING ) - returned if
//   instance of the hostable web core is already running in the process
//
// HRESULT_FROM_WIN32( ERROR_INVALID_DATA ) - most likely this error
//   means configuration error in the AppHostConfigFile
//
// any other error that occurs during activation will be reported
//

typedef HRESULT
(*PFN_WEB_CORE_ACTIVATE)
(
    IN PCWSTR                           pszAppHostConfigFile,
    IN PCWSTR                           pszRootWebConfigFile,    
    IN PCWSTR                           pszInstanceName
);


//
// Prototype for the WEB_CORE_SHUTDOWN_DLL_ENTRY call used to
// stop the hostable webcore. 
// Hosting process may choose between immediate shutdown and graceful shutdown
// If graceful shutdown is chosen then hostable webcore will stop receiving
// new requests and wait for the currently executing requests to complete for certain time
// (as specified in the config)
//
// Return values:
//
// HRESULT_FROM_WIN32( ERROR_SERVICE_NOT_ACTIVE ) - returned if
//   hostable web core is not running and there is nothing to stop
//
// HRESULT_FROM_WIN32( ERROR_INVALID_SERVICE_CONTROL ) - returned if shutdown
//   is already in progress. Note that this error wouldn't be returned
//   if current shutdown in progress been triggered by the callback thread 
//   (the one that notifies about config change or bad health). In that case 
//   host asking for shutdown will be blocked until callback thread is completed
//
// HRESULT_FROM_WIN32( ERROR_SERVICE_REQUEST_TIMEOUT ) - returned if graceful
//   shutdown was requested but was not able to complete within a given period
//   This is rather a WARNING because webcore gets shutdown forcefully 
//   if graceful shutdown attempt times out. But caller may want to be informed
//   that some requests may have been forcefully cancelled
//
// any other error that occurs during termination will be reported
//

typedef HRESULT
(*PFN_WEB_CORE_SHUTDOWN)
(
    IN DWORD                     fImmediate
);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IACOM_i.c ===
//-------------------------------------------------------------------------- 
// 
//  Copyright (c) Microsoft Corporation.  All rights reserved. 
// 
//  File: iacom_i.c 
//      Microsoft Tablet PC API definitions 
// 
//-------------------------------------------------------------------------- 
	
 	
 	

#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 6.00.0347 */
/* Compiler settings for iacom.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#if !defined(_M_IA64) && !defined(_M_AMD64)

#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, LIBID_COMINKANALYSISLib,0x1761E494,0xA3D0,0x4f8e,0x87,0xC5,0xC0,0x95,0x66,0xB2,0x29,0x72);


MIDL_DEFINE_GUID(IID, IID_IInkAnalyzer,0x31F8B4AE,0xF970,0x3A72,0x85,0x95,0x86,0x7D,0x28,0x6E,0x3B,0x7B);


MIDL_DEFINE_GUID(IID, IID_IContextNode,0x160BC1B3,0x5997,0x3D3C,0x9E,0x5A,0xE3,0x8B,0xCB,0x21,0x20,0x47);


MIDL_DEFINE_GUID(IID, IID_IContextNodes,0x23A56238,0xA883,0x4393,0xB5,0x39,0x8C,0x1E,0x29,0x96,0xB7,0xA2);


MIDL_DEFINE_GUID(IID, IID_IAnalysisRegion,0xF76EBC66,0xABEF,0x3248,0xAE,0x9B,0xF2,0x0D,0x4B,0x91,0x49,0xFE);


MIDL_DEFINE_GUID(IID, IID_IContextLink,0x715389A8,0x84B1,0x3B52,0x98,0xFC,0xE2,0xCC,0xCD,0x27,0xD4,0xB9);


MIDL_DEFINE_GUID(IID, IID_IContextLinks,0x2914EB5A,0x8B3D,0x4381,0xA7,0x33,0x15,0x09,0xA2,0x29,0x53,0x94);


MIDL_DEFINE_GUID(IID, IID_IInkAnalysisRecognizer,0xBD5F33DF,0xBEBB,0x3D05,0x98,0xAC,0xF0,0x98,0x6D,0x3B,0xEF,0x17);


MIDL_DEFINE_GUID(IID, IID_IInkAnalysisRecognizers,0x7C3B2C8F,0x1ADD,0x309A,0x92,0x01,0x22,0xC6,0xE0,0xDD,0xA6,0x33);


MIDL_DEFINE_GUID(IID, IID_IAnalysisAlternate,0x5DB42FCE,0x8FDE,0x3E45,0x8C,0x4A,0x22,0x4C,0x89,0x03,0x4F,0x02);


MIDL_DEFINE_GUID(IID, IID_IAnalysisAlternates,0x4262DF99,0x1C25,0x3CF8,0x98,0xCB,0x45,0x28,0xDE,0x75,0x0F,0x08);


MIDL_DEFINE_GUID(IID, IID_IAnalysisWarning,0xB7BC3EF6,0xC944,0x33C5,0x89,0x17,0x19,0xBD,0x3E,0x0C,0x83,0x27);


MIDL_DEFINE_GUID(IID, IID_IAnalysisWarnings,0x304ADA62,0xDEC1,0x35BF,0x84,0xAE,0xA6,0x1B,0xB8,0x46,0xAD,0xD7);


MIDL_DEFINE_GUID(IID, IID_IAnalysisStatus,0x8E16FC8B,0xF1DC,0x38C9,0xBB,0x8F,0x7E,0xF7,0xB0,0xD6,0xC5,0xAE);


MIDL_DEFINE_GUID(IID, IID_IMatchesCriteriaCallBack,0xA11BEA2D,0x62F5,0x3DDC,0xAE,0xFD,0x5B,0xFE,0xD2,0xED,0x43,0xE9);


MIDL_DEFINE_GUID(IID, IID__IAnalysisEvents,0x67CCF9D3,0xFE75,0x338D,0xBB,0x4B,0xFD,0x0F,0xF1,0x8C,0x82,0x58);


MIDL_DEFINE_GUID(IID, IID__IAnalysisProxyEvents,0x70049599,0x2E75,0x3FEC,0xA5,0x97,0xC8,0x19,0x11,0x05,0xF4,0xFB);


MIDL_DEFINE_GUID(CLSID, CLSID_InkAnalyzer,0xB4BAB526,0x5BA1,0x3C4D,0xAF,0x21,0xCF,0xDC,0xD9,0xAA,0xF2,0xD2);


MIDL_DEFINE_GUID(CLSID, CLSID_AnalysisRegion,0x3C3E7657,0x4F0C,0x3FC4,0x8A,0x89,0xA5,0xB0,0xF7,0xEB,0x48,0x0A);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif



#endif /* !defined(_M_IA64) && !defined(_M_AMD64)*/


#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 6.00.0347 */
/* Compiler settings for iacom.idl:
    Oicf, W1, Zp8, env=Win64 (32b run,appending)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#if defined(_M_IA64) || defined(_M_AMD64)

#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, LIBID_COMINKANALYSISLib,0x1761E494,0xA3D0,0x4f8e,0x87,0xC5,0xC0,0x95,0x66,0xB2,0x29,0x72);


MIDL_DEFINE_GUID(IID, IID_IInkAnalyzer,0x31F8B4AE,0xF970,0x3A72,0x85,0x95,0x86,0x7D,0x28,0x6E,0x3B,0x7B);


MIDL_DEFINE_GUID(IID, IID_IContextNode,0x160BC1B3,0x5997,0x3D3C,0x9E,0x5A,0xE3,0x8B,0xCB,0x21,0x20,0x47);


MIDL_DEFINE_GUID(IID, IID_IContextNodes,0x23A56238,0xA883,0x4393,0xB5,0x39,0x8C,0x1E,0x29,0x96,0xB7,0xA2);


MIDL_DEFINE_GUID(IID, IID_IAnalysisRegion,0xF76EBC66,0xABEF,0x3248,0xAE,0x9B,0xF2,0x0D,0x4B,0x91,0x49,0xFE);


MIDL_DEFINE_GUID(IID, IID_IContextLink,0x715389A8,0x84B1,0x3B52,0x98,0xFC,0xE2,0xCC,0xCD,0x27,0xD4,0xB9);


MIDL_DEFINE_GUID(IID, IID_IContextLinks,0x2914EB5A,0x8B3D,0x4381,0xA7,0x33,0x15,0x09,0xA2,0x29,0x53,0x94);


MIDL_DEFINE_GUID(IID, IID_IInkAnalysisRecognizer,0xBD5F33DF,0xBEBB,0x3D05,0x98,0xAC,0xF0,0x98,0x6D,0x3B,0xEF,0x17);


MIDL_DEFINE_GUID(IID, IID_IInkAnalysisRecognizers,0x7C3B2C8F,0x1ADD,0x309A,0x92,0x01,0x22,0xC6,0xE0,0xDD,0xA6,0x33);


MIDL_DEFINE_GUID(IID, IID_IAnalysisAlternate,0x5DB42FCE,0x8FDE,0x3E45,0x8C,0x4A,0x22,0x4C,0x89,0x03,0x4F,0x02);


MIDL_DEFINE_GUID(IID, IID_IAnalysisAlternates,0x4262DF99,0x1C25,0x3CF8,0x98,0xCB,0x45,0x28,0xDE,0x75,0x0F,0x08);


MIDL_DEFINE_GUID(IID, IID_IAnalysisWarning,0xB7BC3EF6,0xC944,0x33C5,0x89,0x17,0x19,0xBD,0x3E,0x0C,0x83,0x27);


MIDL_DEFINE_GUID(IID, IID_IAnalysisWarnings,0x304ADA62,0xDEC1,0x35BF,0x84,0xAE,0xA6,0x1B,0xB8,0x46,0xAD,0xD7);


MIDL_DEFINE_GUID(IID, IID_IAnalysisStatus,0x8E16FC8B,0xF1DC,0x38C9,0xBB,0x8F,0x7E,0xF7,0xB0,0xD6,0xC5,0xAE);


MIDL_DEFINE_GUID(IID, IID_IMatchesCriteriaCallBack,0xA11BEA2D,0x62F5,0x3DDC,0xAE,0xFD,0x5B,0xFE,0xD2,0xED,0x43,0xE9);


MIDL_DEFINE_GUID(IID, IID__IAnalysisEvents,0x67CCF9D3,0xFE75,0x338D,0xBB,0x4B,0xFD,0x0F,0xF1,0x8C,0x82,0x58);


MIDL_DEFINE_GUID(IID, IID__IAnalysisProxyEvents,0x70049599,0x2E75,0x3FEC,0xA5,0x97,0xC8,0x19,0x11,0x05,0xF4,0xFB);


MIDL_DEFINE_GUID(CLSID, CLSID_InkAnalyzer,0xB4BAB526,0x5BA1,0x3C4D,0xAF,0x21,0xCF,0xDC,0xD9,0xAA,0xF2,0xD2);


MIDL_DEFINE_GUID(CLSID, CLSID_AnalysisRegion,0x3C3E7657,0x4F0C,0x3FC4,0x8A,0x89,0xA5,0xB0,0xF7,0xEB,0x48,0x0A);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif



#endif /* defined(_M_IA64) || defined(_M_AMD64)*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\ia64reg.h ===
/*++ BUILD Version: 0004    // Increment this if a change has global effects
*/
//++
//
// Module Name:
//
//  ia64reg.h
//
// Abstract:
//
//  This module contains the code view representation of IA64 register set.
//
// Revision History:
//
//--

#ifndef _IA64REG_
#define _IA64REG_
#if _MSC_VER > 1000
#pragma once
#endif


typedef enum IA64_REG_INDEX {              

    //
    // Register set for Intel IA64              
    //


    // Branch Registers              

    CV_IA64_BrRp     =   512,              
    CV_IA64_BrS0     =   513,              
    CV_IA64_BrS1     =   514,              
    CV_IA64_BrS2     =   515,              
    CV_IA64_BrS3     =   516,              
    CV_IA64_BrS4     =   517,              
    CV_IA64_BrT0     =   518,              
    CV_IA64_BrT1     =   519,              

    // Predicate Registers              

    CV_IA64_Preds     =   768,              

    // Banked General Registers              

    CV_IA64_IntH0    =   832,              
    CV_IA64_IntH1    =   833,              
    CV_IA64_IntH2    =   834,              
    CV_IA64_IntH3    =   835,              
    CV_IA64_IntH4    =   836,              
    CV_IA64_IntH5    =   837,              
    CV_IA64_IntH6    =   838,              
    CV_IA64_IntH7    =   839,              
    CV_IA64_IntH8    =   840,              
    CV_IA64_IntH9    =   841,              
    CV_IA64_IntH10    =   842,              
    CV_IA64_IntH11    =   843,              
    CV_IA64_IntH12    =   844,              
    CV_IA64_IntH13    =   845,              
    CV_IA64_IntH14    =   846,              
    CV_IA64_IntH15    =   847,              

    // Special Registers              

    CV_IA64_Ip     =   1016,              
    CV_IA64_Umask  =   1017,              
    CV_IA64_Cfm    =   1018,              
    CV_IA64_Psr    =   1019,              

    // Banked General Registers              

    CV_IA64_Nats     =   1020,              
    CV_IA64_Nats2    =   1021,              
    CV_IA64_Nats3    =   1022,              

    // General-Purpose Registers              

    // INTEGER REGISTER              
    CV_IA64_IntZero  =   1024,              
    CV_IA64_IntGp    =   1025,              
    CV_IA64_IntT0    =   1026,              
    CV_IA64_IntT1    =   1027,              
    CV_IA64_IntS0    =   1028,              
    CV_IA64_IntS1    =   1029,              
    CV_IA64_IntS2    =   1030,              
    CV_IA64_IntS3    =   1031,              
    CV_IA64_IntV0    =   1032,              
    CV_IA64_IntAp    =   1033,              
    CV_IA64_IntT2    =   1034,              
    CV_IA64_IntT3    =   1035,              
    CV_IA64_IntSp    =   1036,              
    CV_IA64_IntT4    =   1037,              
    CV_IA64_IntT5    =   1038,              
    CV_IA64_IntT6    =   1039,              
    CV_IA64_IntT7    =   1040,              
    CV_IA64_IntT8    =   1041,              
    CV_IA64_IntT9    =   1042,              
    CV_IA64_IntT10   =   1043,              
    CV_IA64_IntT11   =   1044,              
    CV_IA64_IntT12   =   1045,              
    CV_IA64_IntT13   =   1046,              
    CV_IA64_IntT14   =   1047,              
    CV_IA64_IntT15   =   1048,              
    CV_IA64_IntT16   =   1049,              
    CV_IA64_IntT17   =   1050,              
    CV_IA64_IntT18   =   1051,              
    CV_IA64_IntT19   =   1052,              
    CV_IA64_IntT20   =   1053,              
    CV_IA64_IntT21   =   1054,              
    CV_IA64_IntT22   =   1055,              

    // Register Stack              
    CV_IA64_IntR32   =   1056,              
    CV_IA64_IntR33   =   1057,              
    CV_IA64_IntR34   =   1058,              
    CV_IA64_IntR35   =   1059,              
    CV_IA64_IntR36   =   1060,              
    CV_IA64_IntR37   =   1061,              
    CV_IA64_IntR38   =   1062,              
    CV_IA64_IntR39   =   1063,              
    CV_IA64_IntR40   =   1064,              
    CV_IA64_IntR41   =   1065,              
    CV_IA64_IntR42   =   1066,              
    CV_IA64_IntR43   =   1067,              
    CV_IA64_IntR44   =   1068,              
    CV_IA64_IntR45   =   1069,              
    CV_IA64_IntR46   =   1070,              
    CV_IA64_IntR47   =   1071,              
    CV_IA64_IntR48   =   1072,              
    CV_IA64_IntR49   =   1073,              
    CV_IA64_IntR50   =   1074,              
    CV_IA64_IntR51   =   1075,              
    CV_IA64_IntR52   =   1076,              
    CV_IA64_IntR53   =   1077,              
    CV_IA64_IntR54   =   1078,              
    CV_IA64_IntR55   =   1079,              
    CV_IA64_IntR56   =   1080,              
    CV_IA64_IntR57   =   1081,              
    CV_IA64_IntR58   =   1082,              
    CV_IA64_IntR59   =   1083,              
    CV_IA64_IntR60   =   1084,              
    CV_IA64_IntR61   =   1085,              
    CV_IA64_IntR62   =   1086,              
    CV_IA64_IntR63   =   1087,              
    CV_IA64_IntR64   =   1088,              
    CV_IA64_IntR65   =   1089,              
    CV_IA64_IntR66   =   1090,              
    CV_IA64_IntR67   =   1091,              
    CV_IA64_IntR68   =   1092,              
    CV_IA64_IntR69   =   1093,              
    CV_IA64_IntR70   =   1094,              
    CV_IA64_IntR71   =   1095,              
    CV_IA64_IntR72   =   1096,              
    CV_IA64_IntR73   =   1097,              
    CV_IA64_IntR74   =   1098,              
    CV_IA64_IntR75   =   1099,              
    CV_IA64_IntR76   =   1100,              
    CV_IA64_IntR77   =   1101,              
    CV_IA64_IntR78   =   1102,              
    CV_IA64_IntR79   =   1103,              
    CV_IA64_IntR80   =   1104,              
    CV_IA64_IntR81   =   1105,              
    CV_IA64_IntR82   =   1106,              
    CV_IA64_IntR83   =   1107,              
    CV_IA64_IntR84   =   1108,              
    CV_IA64_IntR85   =   1109,              
    CV_IA64_IntR86   =   1110,              
    CV_IA64_IntR87   =   1111,              
    CV_IA64_IntR88   =   1112,              
    CV_IA64_IntR89   =   1113,              
    CV_IA64_IntR90   =   1114,              
    CV_IA64_IntR91   =   1115,              
    CV_IA64_IntR92   =   1116,              
    CV_IA64_IntR93   =   1117,              
    CV_IA64_IntR94   =   1118,              
    CV_IA64_IntR95   =   1119,              
    CV_IA64_IntR96   =   1120,              
    CV_IA64_IntR97   =   1121,              
    CV_IA64_IntR98   =   1122,              
    CV_IA64_IntR99   =   1123,              
    CV_IA64_IntR100   =   1124,              
    CV_IA64_IntR101   =   1125,              
    CV_IA64_IntR102   =   1126,              
    CV_IA64_IntR103   =   1127,              
    CV_IA64_IntR104   =   1128,              
    CV_IA64_IntR105   =   1129,              
    CV_IA64_IntR106   =   1130,              
    CV_IA64_IntR107   =   1131,              
    CV_IA64_IntR108   =   1132,              
    CV_IA64_IntR109   =   1133,              
    CV_IA64_IntR110   =   1134,              
    CV_IA64_IntR111   =   1135,              
    CV_IA64_IntR112   =   1136,              
    CV_IA64_IntR113   =   1137,              
    CV_IA64_IntR114   =   1138,              
    CV_IA64_IntR115   =   1139,              
    CV_IA64_IntR116   =   1140,              
    CV_IA64_IntR117   =   1141,              
    CV_IA64_IntR118   =   1142,              
    CV_IA64_IntR119   =   1143,              
    CV_IA64_IntR120   =   1144,              
    CV_IA64_IntR121   =   1145,              
    CV_IA64_IntR122   =   1146,              
    CV_IA64_IntR123   =   1147,              
    CV_IA64_IntR124   =   1148,              
    CV_IA64_IntR125   =   1149,              
    CV_IA64_IntR126   =   1150,              
    CV_IA64_IntR127   =   1151,              

    // Floating-Point Registers              

    // Low Floating Point Registers              
    CV_IA64_FltZero  =   2048,              
    CV_IA64_FltOne   =   2049,              
    CV_IA64_FltS0    =   2050,              
    CV_IA64_FltS1    =   2051,              
    CV_IA64_FltS2    =   2052,              
    CV_IA64_FltS3    =   2053,              
    CV_IA64_FltT0    =   2054,              
    CV_IA64_FltT1    =   2055,              
    CV_IA64_FltT2    =   2056,              
    CV_IA64_FltT3    =   2057,              
    CV_IA64_FltT4    =   2058,              
    CV_IA64_FltT5    =   2059,              
    CV_IA64_FltT6    =   2060,              
    CV_IA64_FltT7    =   2061,              
    CV_IA64_FltT8    =   2062,              
    CV_IA64_FltT9    =   2063,              
    CV_IA64_FltS4    =   2064,              
    CV_IA64_FltS5    =   2065,              
    CV_IA64_FltS6    =   2066,              
    CV_IA64_FltS7    =   2067,              
    CV_IA64_FltS8    =   2068,              
    CV_IA64_FltS9    =   2069,              
    CV_IA64_FltS10   =   2070,              
    CV_IA64_FltS11   =   2071,              
    CV_IA64_FltS12   =   2072,              
    CV_IA64_FltS13   =   2073,              
    CV_IA64_FltS14   =   2074,              
    CV_IA64_FltS15   =   2075,              
    CV_IA64_FltS16   =   2076,              
    CV_IA64_FltS17   =   2077,              
    CV_IA64_FltS18   =   2078,              
    CV_IA64_FltS19   =   2079,              

    // High Floating Point Registers              
    CV_IA64_FltF32   =   2080,              
    CV_IA64_FltF33   =   2081,              
    CV_IA64_FltF34   =   2082,              
    CV_IA64_FltF35   =   2083,              
    CV_IA64_FltF36   =   2084,              
    CV_IA64_FltF37   =   2085,              
    CV_IA64_FltF38   =   2086,              
    CV_IA64_FltF39   =   2087,              
    CV_IA64_FltF40   =   2088,              
    CV_IA64_FltF41   =   2089,              
    CV_IA64_FltF42   =   2090,              
    CV_IA64_FltF43   =   2091,              
    CV_IA64_FltF44   =   2092,              
    CV_IA64_FltF45   =   2093,              
    CV_IA64_FltF46   =   2094,              
    CV_IA64_FltF47   =   2095,              
    CV_IA64_FltF48   =   2096,              
    CV_IA64_FltF49   =   2097,              
    CV_IA64_FltF50   =   2098,              
    CV_IA64_FltF51   =   2099,              
    CV_IA64_FltF52   =   2100,              
    CV_IA64_FltF53   =   2101,              
    CV_IA64_FltF54   =   2102,              
    CV_IA64_FltF55   =   2103,              
    CV_IA64_FltF56   =   2104,              
    CV_IA64_FltF57   =   2105,              
    CV_IA64_FltF58   =   2106,              
    CV_IA64_FltF59   =   2107,              
    CV_IA64_FltF60   =   2108,              
    CV_IA64_FltF61   =   2109,              
    CV_IA64_FltF62   =   2110,              
    CV_IA64_FltF63   =   2111,              
    CV_IA64_FltF64   =   2112,              
    CV_IA64_FltF65   =   2113,              
    CV_IA64_FltF66   =   2114,              
    CV_IA64_FltF67   =   2115,              
    CV_IA64_FltF68   =   2116,              
    CV_IA64_FltF69   =   2117,              
    CV_IA64_FltF70   =   2118,              
    CV_IA64_FltF71   =   2119,              
    CV_IA64_FltF72   =   2120,              
    CV_IA64_FltF73   =   2121,              
    CV_IA64_FltF74   =   2122,              
    CV_IA64_FltF75   =   2123,              
    CV_IA64_FltF76   =   2124,              
    CV_IA64_FltF77   =   2125,              
    CV_IA64_FltF78   =   2126,              
    CV_IA64_FltF79   =   2127,              
    CV_IA64_FltF80   =   2128,              
    CV_IA64_FltF81   =   2129,              
    CV_IA64_FltF82   =   2130,              
    CV_IA64_FltF83   =   2131,              
    CV_IA64_FltF84   =   2132,              
    CV_IA64_FltF85   =   2133,              
    CV_IA64_FltF86   =   2134,              
    CV_IA64_FltF87   =   2135,              
    CV_IA64_FltF88   =   2136,              
    CV_IA64_FltF89   =   2137,              
    CV_IA64_FltF90   =   2138,              
    CV_IA64_FltF91   =   2139,              
    CV_IA64_FltF92   =   2140,              
    CV_IA64_FltF93   =   2141,              
    CV_IA64_FltF94   =   2142,              
    CV_IA64_FltF95   =   2143,              
    CV_IA64_FltF96   =   2144,              
    CV_IA64_FltF97   =   2145,              
    CV_IA64_FltF98   =   2146,              
    CV_IA64_FltF99   =   2147,              
    CV_IA64_FltF100   =   2148,              
    CV_IA64_FltF101   =   2149,              
    CV_IA64_FltF102   =   2150,              
    CV_IA64_FltF103   =   2151,              
    CV_IA64_FltF104   =   2152,              
    CV_IA64_FltF105   =   2153,              
    CV_IA64_FltF106   =   2154,              
    CV_IA64_FltF107   =   2155,              
    CV_IA64_FltF108   =   2156,              
    CV_IA64_FltF109   =   2157,              
    CV_IA64_FltF110   =   2158,              
    CV_IA64_FltF111   =   2159,              
    CV_IA64_FltF112   =   2160,              
    CV_IA64_FltF113   =   2161,              
    CV_IA64_FltF114   =   2162,              
    CV_IA64_FltF115   =   2163,              
    CV_IA64_FltF116   =   2164,              
    CV_IA64_FltF117   =   2165,              
    CV_IA64_FltF118   =   2166,              
    CV_IA64_FltF119   =   2167,              
    CV_IA64_FltF120   =   2168,              
    CV_IA64_FltF121   =   2169,              
    CV_IA64_FltF122   =   2170,              
    CV_IA64_FltF123   =   2171,              
    CV_IA64_FltF124   =   2172,              
    CV_IA64_FltF125   =   2173,              
    CV_IA64_FltF126   =   2174,              
    CV_IA64_FltF127   =   2175,              

    // Application Registers              

    CV_IA64_ApKR0    =   3072,              
    CV_IA64_ApKR1    =   3073,              
    CV_IA64_ApKR2    =   3074,              
    CV_IA64_ApKR3    =   3075,              
    CV_IA64_ApKR4    =   3076,              
    CV_IA64_ApKR5    =   3077,              
    CV_IA64_ApKR6    =   3078,              
    CV_IA64_ApKR7    =   3079,              
    CV_IA64_AR8      =   3080,              
    CV_IA64_AR9      =   3081,              
    CV_IA64_AR10     =   3082,              
    CV_IA64_AR11     =   3083,              
    CV_IA64_AR12     =   3084,              
    CV_IA64_AR13     =   3085,              
    CV_IA64_AR14     =   3086,              
    CV_IA64_AR15     =   3087,              
    CV_IA64_RsRSC    =   3088,              
    CV_IA64_RsBSP    =   3089,              
    CV_IA64_RsBSPSTORE =   3090,              
    CV_IA64_RsRNAT   =   3091,              
    CV_IA64_AR20     =   3092,              
    CV_IA64_AR21     =   3093,              
    CV_IA64_AR22     =   3094,              
    CV_IA64_AR23     =   3095,              
    CV_IA64_AR24     =   3096,              
    CV_IA64_AR25     =   3097,              
    CV_IA64_AR26     =   3098,              
    CV_IA64_AR27     =   3099,              
    CV_IA64_AR28     =   3100,              
    CV_IA64_AR29     =   3101,              
    CV_IA64_AR30     =   3102,              
    CV_IA64_AR31     =   3103,              
    CV_IA64_ApCCV    =   3104,              
    CV_IA64_AR33     =   3105,              
    CV_IA64_AR34     =   3106,              
    CV_IA64_AR35     =   3107,              
    CV_IA64_ApUNAT   =   3108,              
    CV_IA64_AR37     =   3109,              
    CV_IA64_AR38     =   3110,              
    CV_IA64_AR39     =   3111,              
    CV_IA64_StFPSR   =   3112,              
    CV_IA64_AR41     =   3113,              
    CV_IA64_AR42     =   3114,              
    CV_IA64_AR43     =   3115,              
    CV_IA64_ApITC    =   3116,              
    CV_IA64_AR45     =   3117,              
    CV_IA64_AR46     =   3118,              
    CV_IA64_AR47     =   3119,              
    CV_IA64_AR48     =   3120,              
    CV_IA64_AR49     =   3121,              
    CV_IA64_AR50     =   3122,              
    CV_IA64_AR51     =   3123,              
    CV_IA64_AR52     =   3124,              
    CV_IA64_AR53     =   3125,              
    CV_IA64_AR54     =   3126,              
    CV_IA64_AR55     =   3127,              
    CV_IA64_AR56     =   3128,              
    CV_IA64_AR57     =   3129,              
    CV_IA64_AR58     =   3130,              
    CV_IA64_AR59     =   3131,              
    CV_IA64_AR60     =   3132,              
    CV_IA64_AR61     =   3133,              
    CV_IA64_AR62     =   3134,              
    CV_IA64_AR63     =   3135,              
    CV_IA64_RsPFS    =   3136,              
    CV_IA64_ApLC     =   3137,              
    CV_IA64_ApEC     =   3138,              
    CV_IA64_AR67   =   3139,              
    CV_IA64_AR68   =   3140,              
    CV_IA64_AR69   =   3141,              
    CV_IA64_AR70   =   3142,              
    CV_IA64_AR71   =   3143,              
    CV_IA64_AR72   =   3144,              
    CV_IA64_AR73   =   3145,              
    CV_IA64_AR74   =   3146,              
    CV_IA64_AR75   =   3147,              
    CV_IA64_AR76   =   3148,              
    CV_IA64_AR77   =   3149,              
    CV_IA64_AR78   =   3150,              
    CV_IA64_AR79   =   3151,              
    CV_IA64_AR80   =   3152,              
    CV_IA64_AR81   =   3153,              
    CV_IA64_AR82   =   3154,              
    CV_IA64_AR83   =   3155,              
    CV_IA64_AR84   =   3156,              
    CV_IA64_AR85   =   3157,              
    CV_IA64_AR86   =   3158,              
    CV_IA64_AR87   =   3159,              
    CV_IA64_AR88   =   3160,              
    CV_IA64_AR89   =   3161,              
    CV_IA64_AR90   =   3162,              
    CV_IA64_AR91   =   3163,              
    CV_IA64_AR92   =   3164,              
    CV_IA64_AR93   =   3165,              
    CV_IA64_AR94   =   3166,              
    CV_IA64_AR95   =   3167,              
    CV_IA64_AR96   =   3168,              
    CV_IA64_AR97   =   3169,              
    CV_IA64_AR98   =   3170,              
    CV_IA64_AR99   =   3171,              
    CV_IA64_AR100   =   3172,              
    CV_IA64_AR101   =   3173,              
    CV_IA64_AR102   =   3174,              
    CV_IA64_AR103   =   3175,              
    CV_IA64_AR104   =   3176,              
    CV_IA64_AR105   =   3177,              
    CV_IA64_AR106   =   3178,              
    CV_IA64_AR107   =   3179,              
    CV_IA64_AR108   =   3180,              
    CV_IA64_AR109   =   3181,              
    CV_IA64_AR110   =   3182,              
    CV_IA64_AR111   =   3183,              
    CV_IA64_AR112   =   3184,              
    CV_IA64_AR113   =   3185,              
    CV_IA64_AR114   =   3186,              
    CV_IA64_AR115   =   3187,              
    CV_IA64_AR116   =   3188,              
    CV_IA64_AR117   =   3189,              
    CV_IA64_AR118   =   3190,              
    CV_IA64_AR119   =   3191,              
    CV_IA64_AR120   =   3192,              
    CV_IA64_AR121   =   3193,              
    CV_IA64_AR122   =   3194,              
    CV_IA64_AR123   =   3195,              
    CV_IA64_AR124   =   3196,              
    CV_IA64_AR125   =   3197,              
    CV_IA64_AR126   =   3198,              
    CV_IA64_AR127   =   3199,              

    // CPUID Registers                
    CV_IA64_CPUID0  =   3328,              
    CV_IA64_CPUID1  =   3329,              
    CV_IA64_CPUID2  =   3330,              
    CV_IA64_CPUID3  =   3331,              
    CV_IA64_CPUID4  =   3332,              

    // Control Registers              

    CV_IA64_ApDCR    =   4096,              
    CV_IA64_ApITM    =   4097,              
    CV_IA64_ApIVA    =   4098,              
    CV_IA64_CR3      =   4099,              
    CV_IA64_CR4      =   4100,              
    CV_IA64_CR5      =   4101,              
    CV_IA64_CR6      =   4102,              
    CV_IA64_CR7      =   4103,              
    CV_IA64_ApPTA    =   4104,              
    CV_IA64_ApGPTA   =   4105,              
    CV_IA64_CR10     =   4106,              
    CV_IA64_CR11     =   4107,              
    CV_IA64_CR12     =   4108,              
    CV_IA64_CR13     =   4109,              
    CV_IA64_CR14     =   4110,              
    CV_IA64_CR15     =   4111,              
    CV_IA64_StIPSR   =   4112,              
    CV_IA64_StISR    =   4113,              
    CV_IA64_CR18     =   4114,              
    CV_IA64_StIIP    =   4115,              
    CV_IA64_StIFA    =   4116,              
    CV_IA64_StITIR   =   4117,              
    CV_IA64_StIIPA   =   4118,              
    CV_IA64_StIFS    =   4119,              
    CV_IA64_StIIM    =   4120,              
    CV_IA64_StIHA    =   4121,              
    CV_IA64_CR26     =   4122,              
    CV_IA64_CR27     =   4123,              
    CV_IA64_CR28     =   4124,              
    CV_IA64_CR29     =   4125,              
    CV_IA64_CR30     =   4126,              
    CV_IA64_CR31     =   4127,              
    CV_IA64_CR32     =   4128,              
    CV_IA64_CR33     =   4129,              
    CV_IA64_CR34     =   4130,              
    CV_IA64_CR35     =   4131,              
    CV_IA64_CR36     =   4132,              
    CV_IA64_CR37     =   4133,              
    CV_IA64_CR38     =   4134,              
    CV_IA64_CR39     =   4135,              
    CV_IA64_CR40     =   4136,              
    CV_IA64_CR41     =   4137,              
    CV_IA64_CR42     =   4138,              
    CV_IA64_CR43     =   4139,              
    CV_IA64_CR44     =   4140,              
    CV_IA64_CR45     =   4141,              
    CV_IA64_CR46     =   4142,              
    CV_IA64_CR47     =   4143,              
    CV_IA64_CR48     =   4144,              
    CV_IA64_CR49     =   4145,              
    CV_IA64_CR50     =   4146,              
    CV_IA64_CR51     =   4147,              
    CV_IA64_CR52     =   4148,              
    CV_IA64_CR53     =   4149,              
    CV_IA64_CR54     =   4150,              
    CV_IA64_CR55     =   4151,              
    CV_IA64_CR56     =   4152,              
    CV_IA64_CR57     =   4153,              
    CV_IA64_CR58     =   4154,              
    CV_IA64_CR59     =   4155,              
    CV_IA64_CR60     =   4156,              
    CV_IA64_CR61     =   4157,              
    CV_IA64_CR62     =   4158,              
    CV_IA64_CR63     =   4159,              
    CV_IA64_SaLID    =   4160,              
    CV_IA64_SaIVR    =   4161,              
    CV_IA64_SaTPR    =   4162,              
    CV_IA64_SaEOI    =   4163,              
    CV_IA64_SaIRR0   =   4164,              
    CV_IA64_SaIRR1   =   4165,              
    CV_IA64_SaIRR2   =   4166,              
    CV_IA64_SaIRR3   =   4167,              
    CV_IA64_SaITV    =   4168,              
    CV_IA64_SaPMV    =   4169,              
    CV_IA64_SaCMCV   =   4170,              
    CV_IA64_CR75     =   4171,              
    CV_IA64_CR76     =   4172,              
    CV_IA64_CR77     =   4173,              
    CV_IA64_CR78     =   4174,              
    CV_IA64_CR79     =   4175,              
    CV_IA64_SaLRR0   =   4176,              
    CV_IA64_SaLRR1   =   4177,              
    CV_IA64_CR82     =   4178,              
    CV_IA64_CR83     =   4179,              
    CV_IA64_CR84     =   4180,              
    CV_IA64_CR85     =   4181,              
    CV_IA64_CR86     =   4182,              
    CV_IA64_CR87     =   4183,              
    CV_IA64_CR88     =   4184,              
    CV_IA64_CR89     =   4185,              
    CV_IA64_CR90     =   4186,              
    CV_IA64_CR91     =   4187,              
    CV_IA64_CR92     =   4188,              
    CV_IA64_CR93     =   4189,              
    CV_IA64_CR94     =   4190,              
    CV_IA64_CR95     =   4191,              
    CV_IA64_CR96     =   4192,              
    CV_IA64_CR97     =   4193,              
    CV_IA64_CR98     =   4194,              
    CV_IA64_CR99     =   4195,              
    CV_IA64_CR100    =   4196,              
    CV_IA64_CR101    =   4197,              
    CV_IA64_CR102    =   4198,              
    CV_IA64_CR103    =   4199,              
    CV_IA64_CR104    =   4200,              
    CV_IA64_CR105    =   4201,              
    CV_IA64_CR106    =   4202,              
    CV_IA64_CR107    =   4203,              
    CV_IA64_CR108    =   4204,              
    CV_IA64_CR109    =   4205,              
    CV_IA64_CR110    =   4206,              
    CV_IA64_CR111    =   4207,              
    CV_IA64_CR112    =   4208,              
    CV_IA64_CR113    =   4209,              
    CV_IA64_CR114    =   4210,              
    CV_IA64_CR115    =   4211,              
    CV_IA64_CR116    =   4212,              
    CV_IA64_CR117    =   4213,              
    CV_IA64_CR118    =   4214,              
    CV_IA64_CR119    =   4215,              
    CV_IA64_CR120    =   4216,              
    CV_IA64_CR121    =   4217,              
    CV_IA64_CR122    =   4218,              
    CV_IA64_CR123    =   4219,              
    CV_IA64_CR124    =   4220,              
    CV_IA64_CR125    =   4221,              
    CV_IA64_CR126    =   4222,              
    CV_IA64_CR127    =   4223,              

    // Protection Key Registers              

    CV_IA64_Pkr0     =   5120,              
    CV_IA64_Pkr1     =   5121,              
    CV_IA64_Pkr2     =   5122,              
    CV_IA64_Pkr3     =   5123,              
    CV_IA64_Pkr4     =   5124,              
    CV_IA64_Pkr5     =   5125,              
    CV_IA64_Pkr6     =   5126,              
    CV_IA64_Pkr7     =   5127,              
    CV_IA64_Pkr8     =   5128,              
    CV_IA64_Pkr9     =   5129,              
    CV_IA64_Pkr10    =   5130,              
    CV_IA64_Pkr11    =   5131,              
    CV_IA64_Pkr12    =   5132,              
    CV_IA64_Pkr13    =   5133,              
    CV_IA64_Pkr14    =   5134,              
    CV_IA64_Pkr15    =   5135,              

    // Region Registers

    CV_IA64_Rr0      =   6144,              
    CV_IA64_Rr1      =   6145,              
    CV_IA64_Rr2      =   6146,              
    CV_IA64_Rr3      =   6147,              
    CV_IA64_Rr4      =   6148,              
    CV_IA64_Rr5      =   6149,              
    CV_IA64_Rr6      =   6150,              
    CV_IA64_Rr7      =   6151,              

    // Performance Monitor Data Registers              

    CV_IA64_PFD0     =   7168,              
    CV_IA64_PFD1     =   7169,              
    CV_IA64_PFD2     =   7170,              
    CV_IA64_PFD3     =   7171,              
    CV_IA64_PFD4     =   7172,              
    CV_IA64_PFD5     =   7173,              
    CV_IA64_PFD6     =   7174,              
    CV_IA64_PFD7     =   7175,              

    // Performance Monitor Config Registers              

    CV_IA64_PFC0     =   7424,              
    CV_IA64_PFC1     =   7425,              
    CV_IA64_PFC2     =   7426,              
    CV_IA64_PFC3     =   7427,              
    CV_IA64_PFC4     =   7428,              
    CV_IA64_PFC5     =   7429,              
    CV_IA64_PFC6     =   7430,              
    CV_IA64_PFC7     =   7431,              

    // Instruction Translation Registers              

    CV_IA64_TrI0     =   8192,              
    CV_IA64_TrI1     =   8193,              
    CV_IA64_TrI2     =   8194,              
    CV_IA64_TrI3     =   8195,              
    CV_IA64_TrI4     =   8196,              
    CV_IA64_TrI5     =   8197,              
    CV_IA64_TrI6     =   8198,              
    CV_IA64_TrI7     =   8199,              

    // Data Translation Registers              

    CV_IA64_TrD0     =   8320,              
    CV_IA64_TrD1     =   8321,              
    CV_IA64_TrD2     =   8322,              
    CV_IA64_TrD3     =   8323,              
    CV_IA64_TrD4     =   8324,              
    CV_IA64_TrD5     =   8325,              
    CV_IA64_TrD6     =   8326,              
    CV_IA64_TrD7     =   8327,              

    // Instruction Breakpoint Registers              

    CV_IA64_DbI0     =   8448,              
    CV_IA64_DbI1     =   8449,              
    CV_IA64_DbI2     =   8450,              
    CV_IA64_DbI3     =   8451,              
    CV_IA64_DbI4     =   8452,              
    CV_IA64_DbI5     =   8453,              
    CV_IA64_DbI6     =   8454,              
    CV_IA64_DbI7     =   8455,              

    // Data Breakpoint Registers              

    CV_IA64_DbD0     =   8576,              
    CV_IA64_DbD1     =   8577,              
    CV_IA64_DbD2     =   8578,              
    CV_IA64_DbD3     =   8579,              
    CV_IA64_DbD4     =   8580,              
    CV_IA64_DbD5     =   8581,              
    CV_IA64_DbD6     =   8582,              
    CV_IA64_DbD7     =   8583,              

} IA64_REG_INDEX;              

//
// __lfetch control defines.
//

#define MD_LFHINT_NONE    0x00
#define MD_LFHINT_NT1     0x01
#define MD_LFHINT_NT2     0x02
#define MD_LFHINT_NTA     0x03

#endif // _IA64REG_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IAccess.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for iaccess.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __iaccess_h__
#define __iaccess_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IAccessControl_FWD_DEFINED__
#define __IAccessControl_FWD_DEFINED__
typedef interface IAccessControl IAccessControl;
#endif 	/* __IAccessControl_FWD_DEFINED__ */


#ifndef __IAuditControl_FWD_DEFINED__
#define __IAuditControl_FWD_DEFINED__
typedef interface IAuditControl IAuditControl;
#endif 	/* __IAuditControl_FWD_DEFINED__ */


/* header files for imported files */
#include "unknwn.h"
#include "accctrl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_iaccess_0000_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//--------------------------------------------------------------------------
#if ( _MSC_VER >= 1020 )
#pragma once
#endif
typedef /* [allocate] */ PACTRL_ACCESSW PACTRL_ACCESSW_ALLOCATE_ALL_NODES;

typedef /* [allocate] */ PACTRL_AUDITW PACTRL_AUDITW_ALLOCATE_ALL_NODES;




extern RPC_IF_HANDLE __MIDL_itf_iaccess_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iaccess_0000_0000_v0_0_s_ifspec;

#ifndef __IAccessControl_INTERFACE_DEFINED__
#define __IAccessControl_INTERFACE_DEFINED__

/* interface IAccessControl */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAccessControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EEDD23E0-8410-11CE-A1C3-08002B2B8D8F")
    IAccessControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GrantAccessRights( 
            /* [in] */ __RPC__in PACTRL_ACCESSW pAccessList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAccessRights( 
            /* [in] */ __RPC__in PACTRL_ACCESSW pAccessList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetOwner( 
            /* [in] */ __RPC__in PTRUSTEEW pOwner,
            /* [in] */ __RPC__in PTRUSTEEW pGroup) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RevokeAccessRights( 
            /* [in] */ __RPC__in LPWSTR lpProperty,
            /* [in] */ ULONG cTrustees,
            /* [size_is][in] */ __RPC__in_ecount_full(cTrustees) TRUSTEEW prgTrustees[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAllAccessRights( 
            /* [in] */ __RPC__in LPWSTR lpProperty,
            /* [out] */ __RPC__deref_out_opt PACTRL_ACCESSW_ALLOCATE_ALL_NODES *ppAccessList,
            /* [out] */ __RPC__deref_out_opt PTRUSTEEW *ppOwner,
            /* [out] */ __RPC__deref_out_opt PTRUSTEEW *ppGroup) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsAccessAllowed( 
            /* [in] */ __RPC__in PTRUSTEEW pTrustee,
            /* [in] */ __RPC__in LPWSTR lpProperty,
            /* [in] */ ACCESS_RIGHTS AccessRights,
            /* [out] */ __RPC__out BOOL *pfAccessAllowed) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAccessControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAccessControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAccessControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAccessControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GrantAccessRights )( 
            __RPC__in IAccessControl * This,
            /* [in] */ __RPC__in PACTRL_ACCESSW pAccessList);
        
        HRESULT ( STDMETHODCALLTYPE *SetAccessRights )( 
            __RPC__in IAccessControl * This,
            /* [in] */ __RPC__in PACTRL_ACCESSW pAccessList);
        
        HRESULT ( STDMETHODCALLTYPE *SetOwner )( 
            __RPC__in IAccessControl * This,
            /* [in] */ __RPC__in PTRUSTEEW pOwner,
            /* [in] */ __RPC__in PTRUSTEEW pGroup);
        
        HRESULT ( STDMETHODCALLTYPE *RevokeAccessRights )( 
            __RPC__in IAccessControl * This,
            /* [in] */ __RPC__in LPWSTR lpProperty,
            /* [in] */ ULONG cTrustees,
            /* [size_is][in] */ __RPC__in_ecount_full(cTrustees) TRUSTEEW prgTrustees[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllAccessRights )( 
            __RPC__in IAccessControl * This,
            /* [in] */ __RPC__in LPWSTR lpProperty,
            /* [out] */ __RPC__deref_out_opt PACTRL_ACCESSW_ALLOCATE_ALL_NODES *ppAccessList,
            /* [out] */ __RPC__deref_out_opt PTRUSTEEW *ppOwner,
            /* [out] */ __RPC__deref_out_opt PTRUSTEEW *ppGroup);
        
        HRESULT ( STDMETHODCALLTYPE *IsAccessAllowed )( 
            __RPC__in IAccessControl * This,
            /* [in] */ __RPC__in PTRUSTEEW pTrustee,
            /* [in] */ __RPC__in LPWSTR lpProperty,
            /* [in] */ ACCESS_RIGHTS AccessRights,
            /* [out] */ __RPC__out BOOL *pfAccessAllowed);
        
        END_INTERFACE
    } IAccessControlVtbl;

    interface IAccessControl
    {
        CONST_VTBL struct IAccessControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAccessControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAccessControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAccessControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAccessControl_GrantAccessRights(This,pAccessList)	\
    ( (This)->lpVtbl -> GrantAccessRights(This,pAccessList) ) 

#define IAccessControl_SetAccessRights(This,pAccessList)	\
    ( (This)->lpVtbl -> SetAccessRights(This,pAccessList) ) 

#define IAccessControl_SetOwner(This,pOwner,pGroup)	\
    ( (This)->lpVtbl -> SetOwner(This,pOwner,pGroup) ) 

#define IAccessControl_RevokeAccessRights(This,lpProperty,cTrustees,prgTrustees)	\
    ( (This)->lpVtbl -> RevokeAccessRights(This,lpProperty,cTrustees,prgTrustees) ) 

#define IAccessControl_GetAllAccessRights(This,lpProperty,ppAccessList,ppOwner,ppGroup)	\
    ( (This)->lpVtbl -> GetAllAccessRights(This,lpProperty,ppAccessList,ppOwner,ppGroup) ) 

#define IAccessControl_IsAccessAllowed(This,pTrustee,lpProperty,AccessRights,pfAccessAllowed)	\
    ( (This)->lpVtbl -> IsAccessAllowed(This,pTrustee,lpProperty,AccessRights,pfAccessAllowed) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAccessControl_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_iaccess_0000_0001 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_iaccess_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iaccess_0000_0001_v0_0_s_ifspec;

#ifndef __IAuditControl_INTERFACE_DEFINED__
#define __IAuditControl_INTERFACE_DEFINED__

/* interface IAuditControl */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAuditControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1da6292f-bc66-11ce-aae3-00aa004c2737")
    IAuditControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GrantAuditRights( 
            /* [in] */ __RPC__in PACTRL_AUDITW pAuditList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAuditRights( 
            /* [in] */ __RPC__in PACTRL_AUDITW pAuditList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RevokeAuditRights( 
            /* [in] */ __RPC__in LPWSTR lpProperty,
            /* [in] */ ULONG cTrustees,
            /* [size_is][in] */ __RPC__in_ecount_full(cTrustees) TRUSTEEW prgTrustees[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAllAuditRights( 
            /* [in] */ __RPC__in LPWSTR lpProperty,
            /* [out] */ __RPC__deref_out_opt PACTRL_AUDITW *ppAuditList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsAccessAudited( 
            /* [in] */ __RPC__in PTRUSTEEW pTrustee,
            /* [in] */ ACCESS_RIGHTS AuditRights,
            /* [out] */ __RPC__out BOOL *pfAccessAudited) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAuditControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAuditControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAuditControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAuditControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GrantAuditRights )( 
            __RPC__in IAuditControl * This,
            /* [in] */ __RPC__in PACTRL_AUDITW pAuditList);
        
        HRESULT ( STDMETHODCALLTYPE *SetAuditRights )( 
            __RPC__in IAuditControl * This,
            /* [in] */ __RPC__in PACTRL_AUDITW pAuditList);
        
        HRESULT ( STDMETHODCALLTYPE *RevokeAuditRights )( 
            __RPC__in IAuditControl * This,
            /* [in] */ __RPC__in LPWSTR lpProperty,
            /* [in] */ ULONG cTrustees,
            /* [size_is][in] */ __RPC__in_ecount_full(cTrustees) TRUSTEEW prgTrustees[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllAuditRights )( 
            __RPC__in IAuditControl * This,
            /* [in] */ __RPC__in LPWSTR lpProperty,
            /* [out] */ __RPC__deref_out_opt PACTRL_AUDITW *ppAuditList);
        
        HRESULT ( STDMETHODCALLTYPE *IsAccessAudited )( 
            __RPC__in IAuditControl * This,
            /* [in] */ __RPC__in PTRUSTEEW pTrustee,
            /* [in] */ ACCESS_RIGHTS AuditRights,
            /* [out] */ __RPC__out BOOL *pfAccessAudited);
        
        END_INTERFACE
    } IAuditControlVtbl;

    interface IAuditControl
    {
        CONST_VTBL struct IAuditControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAuditControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAuditControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAuditControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAuditControl_GrantAuditRights(This,pAuditList)	\
    ( (This)->lpVtbl -> GrantAuditRights(This,pAuditList) ) 

#define IAuditControl_SetAuditRights(This,pAuditList)	\
    ( (This)->lpVtbl -> SetAuditRights(This,pAuditList) ) 

#define IAuditControl_RevokeAuditRights(This,lpProperty,cTrustees,prgTrustees)	\
    ( (This)->lpVtbl -> RevokeAuditRights(This,lpProperty,cTrustees,prgTrustees) ) 

#define IAuditControl_GetAllAuditRights(This,lpProperty,ppAuditList)	\
    ( (This)->lpVtbl -> GetAllAuditRights(This,lpProperty,ppAuditList) ) 

#define IAuditControl_IsAccessAudited(This,pTrustee,AuditRights,pfAccessAudited)	\
    ( (This)->lpVtbl -> IsAccessAudited(This,pTrustee,AuditRights,pfAccessAudited) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAuditControl_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Iadmext.h ===
/**********************************************************************/
/**                       Microsoft Windows NT                       **/
/**                Copyright(c) Microsoft Corp., 1997-1999           **/
/**********************************************************************/

/*
    iadmext.h

    This module contains the interface for extensions to the IISADMIN service.


    FILE HISTORY:
    7/8/97      michth      created
*/

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __iadmext_h__
#define __iadmext_h__

#ifdef __cplusplus
extern "C"{
#endif



/* header files for imported files */
#include "unknwn.h"
#include "objidl.h"
#include "ocidl.h"

/*
The Main Interface. All extensions must support this interface.
*/
// {51DFE970-F6F2-11d0-B9BD-00A0C922E750}
DEFINE_GUID(IID_IADMEXT, 0x51dfe970, 0xf6f2, 0x11d0, 0xb9, 0xbd, 0x0, 0xa0, 0xc9, 0x22, 0xe7, 0x50);

/*
InProcess COM Registration. All extensions must write a subkey name by the
CLSID for the above interface under this key in the Registry.
*/
#define IISADMIN_EXTENSIONS_REG_KEYA          "SOFTWARE\\Microsoft\\InetStp\\Extensions"
#define IISADMIN_EXTENSIONS_REG_KEYW          L"SOFTWARE\\Microsoft\\InetStp\\Extensions"
#define IISADMIN_EXTENSIONS_REG_KEY           TEXT("SOFTWARE\\Microsoft\\InetStp\\Extensions")

/*
DCOM Registration. CLSIDS for the DCOM interface provided by these extensions will
be written to this key and ID by IISADMIN as a multisz property.

This is intended for use by other applications which need to find out what classid's are
registered.
*/

#define IISADMIN_EXTENSIONS_CLSID_MD_KEYA      "LM/IISADMIN/EXTENSIONS/DCOMCLSIDS"
#define IISADMIN_EXTENSIONS_CLSID_MD_KEYW      L"LM/IISADMIN/EXTENSIONS/DCOMCLSIDS"
#define IISADMIN_EXTENSIONS_CLSID_MD_KEY      TEXT("LM/IISADMIN/EXTENSIONS/DCOMCLSIDS")
#define IISADMIN_EXTENSIONS_CLSID_MD_ID       MD_IISADMIN_EXTENSIONS

#ifndef __IADMEXT_INTERFACE_DEFINED__
#define __IADMEXT_INTERFACE_DEFINED__


EXTERN_C const IID IID_IADMEXT;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface IADMEXT : public IUnknown
    {
    public:
        //
        // All methods below will be called under a thread which has called
        // CoInitializeEx(NULL, COINIT_MULTITHREADED).
        //
        // The IMSAdminBase Object will be available during all of these calls.
        //

        //
        // Initialize will be called by IISADMIN when it initializes.
        //
        virtual HRESULT STDMETHODCALLTYPE Initialize(void) = 0;

        //
        // EnumDcomCLSIDs will be called by IISADMIN when it initializes,
        // and the returned CLSIDs will be written to the metabase at
        // the path IISADMIN_EXTENSIONS_CLSID_MD_KEY.
        //
        virtual HRESULT STDMETHODCALLTYPE EnumDcomCLSIDs(
            /* [size_is][out] */ CLSID *pclsidDcom,
            /* [in] */ DWORD dwEnumIndex) = 0;

        //
        // Terminate will be called by IISADMIN when it terminates.
        //
        virtual HRESULT STDMETHODCALLTYPE Terminate(void) = 0;

    };

#else   /* C style interface */
#endif
#endif  /* __IADMEXT_INTERFACE_DEFINED__ */

#ifdef __cplusplus
}
#endif

#endif // __iadmext_h__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IACOM.h ===
//-------------------------------------------------------------------------- 
// 
//  Copyright (c) Microsoft Corporation.  All rights reserved. 
// 
//  File: iacom.h 
//      Microsoft Tablet PC API definitions 
// 
//-------------------------------------------------------------------------- 
	
 	
 	

#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* Compiler settings for iacom.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __iacom_h__
#define __iacom_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IInkAnalyzer_FWD_DEFINED__
#define __IInkAnalyzer_FWD_DEFINED__
typedef interface IInkAnalyzer IInkAnalyzer;
#endif 	/* __IInkAnalyzer_FWD_DEFINED__ */


#ifndef __IContextNode_FWD_DEFINED__
#define __IContextNode_FWD_DEFINED__
typedef interface IContextNode IContextNode;
#endif 	/* __IContextNode_FWD_DEFINED__ */


#ifndef __IContextNodes_FWD_DEFINED__
#define __IContextNodes_FWD_DEFINED__
typedef interface IContextNodes IContextNodes;
#endif 	/* __IContextNodes_FWD_DEFINED__ */


#ifndef __IAnalysisRegion_FWD_DEFINED__
#define __IAnalysisRegion_FWD_DEFINED__
typedef interface IAnalysisRegion IAnalysisRegion;
#endif 	/* __IAnalysisRegion_FWD_DEFINED__ */


#ifndef __IContextLink_FWD_DEFINED__
#define __IContextLink_FWD_DEFINED__
typedef interface IContextLink IContextLink;
#endif 	/* __IContextLink_FWD_DEFINED__ */


#ifndef __IContextLinks_FWD_DEFINED__
#define __IContextLinks_FWD_DEFINED__
typedef interface IContextLinks IContextLinks;
#endif 	/* __IContextLinks_FWD_DEFINED__ */


#ifndef __IInkAnalysisRecognizer_FWD_DEFINED__
#define __IInkAnalysisRecognizer_FWD_DEFINED__
typedef interface IInkAnalysisRecognizer IInkAnalysisRecognizer;
#endif 	/* __IInkAnalysisRecognizer_FWD_DEFINED__ */


#ifndef __IInkAnalysisRecognizers_FWD_DEFINED__
#define __IInkAnalysisRecognizers_FWD_DEFINED__
typedef interface IInkAnalysisRecognizers IInkAnalysisRecognizers;
#endif 	/* __IInkAnalysisRecognizers_FWD_DEFINED__ */


#ifndef __IAnalysisAlternate_FWD_DEFINED__
#define __IAnalysisAlternate_FWD_DEFINED__
typedef interface IAnalysisAlternate IAnalysisAlternate;
#endif 	/* __IAnalysisAlternate_FWD_DEFINED__ */


#ifndef __IAnalysisAlternates_FWD_DEFINED__
#define __IAnalysisAlternates_FWD_DEFINED__
typedef interface IAnalysisAlternates IAnalysisAlternates;
#endif 	/* __IAnalysisAlternates_FWD_DEFINED__ */


#ifndef __IAnalysisWarning_FWD_DEFINED__
#define __IAnalysisWarning_FWD_DEFINED__
typedef interface IAnalysisWarning IAnalysisWarning;
#endif 	/* __IAnalysisWarning_FWD_DEFINED__ */


#ifndef __IAnalysisWarnings_FWD_DEFINED__
#define __IAnalysisWarnings_FWD_DEFINED__
typedef interface IAnalysisWarnings IAnalysisWarnings;
#endif 	/* __IAnalysisWarnings_FWD_DEFINED__ */


#ifndef __IAnalysisStatus_FWD_DEFINED__
#define __IAnalysisStatus_FWD_DEFINED__
typedef interface IAnalysisStatus IAnalysisStatus;
#endif 	/* __IAnalysisStatus_FWD_DEFINED__ */


#ifndef __IMatchesCriteriaCallBack_FWD_DEFINED__
#define __IMatchesCriteriaCallBack_FWD_DEFINED__
typedef interface IMatchesCriteriaCallBack IMatchesCriteriaCallBack;
#endif 	/* __IMatchesCriteriaCallBack_FWD_DEFINED__ */


#ifndef ___IAnalysisEvents_FWD_DEFINED__
#define ___IAnalysisEvents_FWD_DEFINED__
typedef interface _IAnalysisEvents _IAnalysisEvents;
#endif 	/* ___IAnalysisEvents_FWD_DEFINED__ */


#ifndef ___IAnalysisProxyEvents_FWD_DEFINED__
#define ___IAnalysisProxyEvents_FWD_DEFINED__
typedef interface _IAnalysisProxyEvents _IAnalysisProxyEvents;
#endif 	/* ___IAnalysisProxyEvents_FWD_DEFINED__ */


#ifndef __InkAnalyzer_FWD_DEFINED__
#define __InkAnalyzer_FWD_DEFINED__

#ifdef __cplusplus
typedef class InkAnalyzer InkAnalyzer;
#else
typedef struct InkAnalyzer InkAnalyzer;
#endif /* __cplusplus */

#endif 	/* __InkAnalyzer_FWD_DEFINED__ */


#ifndef __AnalysisRegion_FWD_DEFINED__
#define __AnalysisRegion_FWD_DEFINED__

#ifdef __cplusplus
typedef class AnalysisRegion AnalysisRegion;
#else
typedef struct AnalysisRegion AnalysisRegion;
#endif /* __cplusplus */

#endif 	/* __AnalysisRegion_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_iacom_0000 */
/* [local] */ 

#ifndef _COMINKANALYSIS_H_
#define _COMINKANALYSIS_H_


extern RPC_IF_HANDLE __MIDL_itf_iacom_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iacom_0000_v0_0_s_ifspec;


#ifndef __COMINKANALYSISLib_LIBRARY_DEFINED__
#define __COMINKANALYSISLib_LIBRARY_DEFINED__

/* library COMINKANALYSISLib */
/* [helpcontext][helpstring][version][uuid] */ 















typedef /* [helpcontext][helpstring] */ 
enum StrokeType
    {	StrokeType_Unclassified	= 0,
	StrokeType_Writing	= 1,
	StrokeType_Drawing	= 2
    } 	StrokeType;

typedef /* [helpcontext][helpstring] */ 
enum ConfirmationType
    {	ConfirmationType_None	= 0,
	ConfirmationType_NodeTypeAndProperties	= 3,
	ConfirmationType_TopBoundary	= 4
    } 	ConfirmationType;

typedef /* [helpcontext][helpstring] */ 
enum AnalysisModes
    {	AnalysisModes_None	= 0,
	AnalysisModes_AutomaticReconciliation	= 0x2,
	AnalysisModes_StrokeCacheAutoCleanup	= 0x4,
	AnalysisModes_Personalization	= 0x8,
	AnalysisModes_Default	= 0xd
    } 	AnalysisModes;

typedef /* [helpcontext][helpstring] */ 
enum SemanticType
    {	SemanticType_None	= 0,
	SemanticType_Underline	= 1,
	SemanticType_Strikethrough	= 2,
	SemanticType_Highlight	= 3,
	SemanticType_ScratchOut	= 4,
	SemanticType_VerticalRange	= 5,
	SemanticType_Callout	= 6,
	SemanticType_Enclosure	= 7,
	SemanticType_Comment	= 100,
	SemanticType_Container	= 200,
	SemanticType_Connector	= 201
    } 	SemanticType;

typedef /* [helpcontext][helpstring] */ 
enum ContextLinkDirection
    {	ContextLinkDirection_LinksWith	= 0,
	ContextLinkDirection_LinksFrom	= 1,
	ContextLinkDirection_LinksTo	= 2
    } 	ContextLinkDirection;

typedef /* [helpcontext][helpstring] */ 
enum AnalysisWarningCode
    {	AnalysisWarningCode_Aborted	= 0,
	AnalysisWarningCode_NoMatchingInkAnalysisRecognizerFound	= 1,
	AnalysisWarningCode_FactoidNotSupported	= 2,
	AnalysisWarningCode_FactoidCoercionNotSupported	= 3,
	AnalysisWarningCode_GuideNotSupported	= 4,
	AnalysisWarningCode_WordlistNotSupported	= 5,
	AnalysisWarningCode_WordModeNotSupported	= 6,
	AnalysisWarningCode_PartialDictionaryTermsNotSupported	= 7,
	AnalysisWarningCode_TextRecognitionProcessFailed	= 8,
	AnalysisWarningCode_AddInkToRecognizerFailed	= 9,
	AnalysisWarningCode_SetPrefixSuffixFailed	= 10,
	AnalysisWarningCode_InkAnalysisRecognizerInitializationFailed	= 11,
	AnalysisWarningCode_ConfirmedWithoutInkRecognition	= 12,
	AnalysisWarningCode_BackgroundException	= 13,
	AnalysisWarningCode_ContextNodeLocationNotSet	= 14,
	AnalysisWarningCode_LanguageIdNotRespected	= 15,
	AnalysisWarningCode_EnableUnicodeCharacterRangesNotSupported	= 16,
	AnalysisWarningCode_TopInkBreaksOnlyNotSupported	= 17,
	AnalysisWarningCode_AnalysisAlreadyRunning	= 18
    } 	AnalysisWarningCode;

typedef /* [helpcontext][helpstring] */ 
enum RecognitionConfidence
    {	RecognitionConfidence_Strong	= 0,
	RecognitionConfidence_Intermediate	= 1,
	RecognitionConfidence_Poor	= 2,
	RecognitionConfidence_Unknown	= 3
    } 	RecognitionConfidence;

typedef /* [helpcontext][helpstring] */ 
enum InkAnalysisRecognizerCapabilities
    {	RC_None	= 0,
	RC_DoNotCare	= 0x1,
	RC_Object	= 0x2,
	RC_FreeInput	= 0x4,
	RC_LinedInput	= 0x8,
	RC_BoxedInput	= 0x10,
	RC_CharacterAutoCompletionInput	= 0x20,
	RC_RightAndDown	= 0x40,
	RC_LeftAndDown	= 0x80,
	RC_DownAndLeft	= 0x100,
	RC_DownAndRight	= 0x200,
	RC_ArbitraryAngle	= 0x400,
	RC_Lattice	= 0x800,
	RC_AdviseInkChange	= 0x1000,
	RC_StrokeReorder	= 0x2000,
	RC_Personalizable	= 0x4000,
	RC_PrefersArbitraryAngle	= 0x8000,
	RC_PrefersParagraphBreaking	= 0x10000,
	RC_PrefersSegmentationRecognition	= 0x20000
    } 	InkAnalysisRecognizerCapabilities;

typedef struct InkAnalysisRecognizerGuide
    {
    RECT rectWritingBox;
    RECT rectDrawnBox;
    long cRows;
    long cColumns;
    long midline;
    } 	InkAnalysisRecognizerGuide;


EXTERN_C const IID LIBID_COMINKANALYSISLib;

#ifndef __IInkAnalyzer_INTERFACE_DEFINED__
#define __IInkAnalyzer_INTERFACE_DEFINED__

/* interface IInkAnalyzer */
/* [unique][helpcontext][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IInkAnalyzer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("31F8B4AE-F970-3A72-8595-867D286E3B7B")
    IInkAnalyzer : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetDirtyRegion( 
            /* [out] */ IAnalysisRegion **ppDirtyRegion) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SetDirtyRegion( 
            /* [in] */ IAnalysisRegion *pDirtyRegion) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SetStrokeType( 
            /* [in] */ LONG lStrokeId,
            /* [in] */ StrokeType StrokeType) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SetStrokesType( 
            /* [in] */ ULONG ulStrokeIdCount,
            /* [size_is][in] */ LONG *plStrokes,
            /* [in] */ StrokeType StrokeType) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetStrokeType( 
            /* [in] */ LONG lStrokeId,
            /* [out] */ StrokeType *pStrokeType) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SetStrokeLanguageId( 
            /* [in] */ LONG lStrokeId,
            /* [in] */ LONG lLanguageId) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SetStrokesLanguageId( 
            /* [in] */ ULONG ulStrokeIdCount,
            /* [size_is][in] */ LONG *plStrokes,
            /* [in] */ LONG lStrokesLCID) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetStrokeLanguageId( 
            /* [in] */ LONG strokeId,
            /* [out] */ LONG *plLanguageId) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetRootNode( 
            /* [out] */ IContextNode **ppRootNode) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE BackgroundAnalyze( void) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Analyze( 
            /* [out] */ IAnalysisStatus **ppStatus) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IsAnalyzing( 
            /* [out] */ VARIANT_BOOL *pbAnalyzing) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Reconcile( void) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE TransactionalReconcile( 
            /* [in] */ LONG lTimeLimit,
            /* [out] */ VARIANT_BOOL *pbMoreToReconcile) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Abort( 
            /* [out] */ IAnalysisRegion **ppAbortedRegion) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetInkAnalysisRecognizersByPriority( 
            /* [out] */ IInkAnalysisRecognizers **ppInkAnalysisRecognizers) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetRecognizedString( 
            /* [out] */ BSTR *pbstrRecognizedString) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE AddStroke( 
            /* [in] */ LONG lStrokeId,
            /* [in] */ ULONG ulStrokePacketDataCount,
            /* [size_is][in] */ LONG *plStrokePacketData,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [out] */ IContextNode **ppContextNodeStrokeAddedTo) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE AddStrokes( 
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [size_is][in] */ ULONG *pulPacketDataCountPerStroke,
            /* [in] */ LONG *plStrokePacketData,
            /* [out] */ IContextNode **ppContextNodeStrokeAddedTo) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE AddStrokeForLanguage( 
            /* [in] */ LONG lStrokeId,
            /* [in] */ LONG lStrokeLCID,
            /* [in] */ ULONG ulStrokePacketDataCount,
            /* [size_is][in] */ LONG *plStrokePacketData,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [out] */ IContextNode **ppContextNodeStrokeAddedTo) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE AddStrokesForLanguage( 
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plIdofStrokesToAdd,
            /* [in] */ LONG lStrokesLCID,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [size_is][in] */ ULONG *pulPacketDataCountPerStroke,
            /* [in] */ LONG *plStrokePacketData,
            /* [out] */ IContextNode **ppContextNodeStrokeAddedTo) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ClearStrokeData( 
            /* [in] */ LONG lStrokeId) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE RemoveStroke( 
            /* [in] */ LONG lStrokeId) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE RemoveStrokes( 
            /* [in] */ ULONG ulStrokeIdCount,
            /* [size_is][in] */ LONG *plStrokeIds) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE UpdateStrokesData( 
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [size_is][in] */ ULONG *pulPacketDataCountPerStroke,
            /* [in] */ LONG *plStrokePacketData) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetAnalysisModes( 
            /* [out] */ AnalysisModes *pAnalysisMode) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SetAnalysisModes( 
            /* [in] */ AnalysisModes analysisMode) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE CreateAnalysisHint( 
            /* [out] */ IContextNode **ppAnalysisHint) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE DeleteAnalysisHint( 
            /* [in] */ IContextNode *pHintToDelete) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetAnalysisHints( 
            /* [out] */ IContextNodes **ppAnalysisHints) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetAnalysisHintsByName( 
            /* [in] */ BSTR hintName,
            /* [out] */ IContextNodes **ppAnalysisHints) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE CreateContextNodes( 
            /* [out] */ IContextNodes **ppContextNodes) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetAlternatesForContextNodes( 
            /* [in] */ IContextNodes *pContextNodes,
            /* [in] */ ULONG ulMaximumAlternates,
            /* [out] */ IAnalysisAlternates **ppAlternates) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetAlternatesForStrokes( 
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokes,
            /* [in] */ ULONG ulMaximumAlternates,
            /* [out] */ IAnalysisAlternates **ppAlternates) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetAlternates( 
            /* [out] */ IAnalysisAlternates **ppAlternates) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ModifyTopAlternate( 
            /* [in] */ IAnalysisAlternate *pAlternate) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ModifyTopAlternateWithConfirmation( 
            /* [in] */ IAnalysisAlternate *alternate,
            /* [in] */ VARIANT_BOOL fconfirmAutomatically) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE CreateCustomRecognizer( 
            /* [in] */ const GUID *pInkAnalysisRecognizerId,
            /* [out] */ IContextNode **ppContextNode) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE AddStrokeToCustomRecognizer( 
            /* [in] */ LONG lStrokeId,
            /* [in] */ ULONG ulStrokePacketDataCount,
            /* [size_is][in] */ LONG *plStrokePacketData,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [in] */ IContextNode *pCustomRecognizer,
            /* [out] */ IContextNode **ppContextNodeStrokeAddedTo) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE AddStrokesToCustomRecognizer( 
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [size_is][in] */ ULONG *pulPacketDataCountPerStroke,
            /* [in] */ LONG *plStrokePacketData,
            /* [in] */ IContextNode *pCustomRecognizer,
            /* [out] */ IContextNode **ppContextNodeStrokeAddedTo) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE FindNode( 
            /* [in] */ const GUID *pId,
            /* [out] */ IContextNode **ppContextNodeFound) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE FindLeafNodes( 
            /* [out] */ IContextNodes **ppContextNodesFound) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE FindInkLeafNodesForStrokes( 
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [out] */ IContextNodes **ppContextNodesFound) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE FindInkLeafNodes( 
            /* [out] */ IContextNodes **ppContextNodesFound) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE FindNodesOfType( 
            /* [in] */ const GUID *pNodeType,
            /* [out] */ IContextNodes **ppContextNodesFound) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE FindNodesOfTypeForStrokes( 
            /* [in] */ const GUID *pNodeType,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [out] */ IContextNodes **ppContextNodesFound) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE FindNodesOfTypeInSubTree( 
            /* [in] */ const GUID *pNodeType,
            /* [in] */ IContextNode *pContextNodeToSearchFrom,
            /* [out] */ IContextNodes **ppContextNodesFound) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE FindNodesWithCallBack( 
            /* [in] */ IMatchesCriteriaCallBack *pCriteria,
            /* [out] */ IContextNodes **ppContextNodesFound) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE FindNodesWithCallBackInSubTree( 
            /* [in] */ IMatchesCriteriaCallBack *pCriteria,
            /* [in] */ IContextNode *pContextNodeToSearchFrom,
            /* [out] */ IContextNodes **ppContextNodesFound) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE LoadResults( 
            /* [in] */ ULONG ulDataSize,
            /* [size_is][in] */ BYTE *pbSerializedData,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plOriginalStrokeIds,
            /* [size_is][in] */ LONG *plModifiedStrokeIds,
            /* [out] */ VARIANT_BOOL *pfRetVal) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SaveResults( 
            /* [in] */ ULONG ulMappedStrokeIdsCount,
            /* [size_is][in] */ LONG *plOriginalStrokeIds,
            /* [size_is][in] */ LONG *plModifiedStrokeIds,
            /* [out][in] */ ULONG *pulSerializedDataSize,
            /* [size_is][out] */ BYTE **ppbSerializedData) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SaveResultsForNodes( 
            /* [in] */ ULONG ulMappedStrokeIdsCount,
            /* [size_is][in] */ LONG *plOriginalStrokeIds,
            /* [size_is][in] */ LONG *plModifiedStrokeIds,
            /* [in] */ IContextNodes *pContextNodes,
            /* [out][in] */ ULONG *pulSerializedDataSize,
            /* [size_is][out] */ BYTE **ppbSerializedData) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SaveResultsForStrokes( 
            /* [in] */ ULONG ulMappedStrokeIdsCount,
            /* [size_is][in] */ LONG *plOriginalStrokeIds,
            /* [size_is][in] */ LONG *plModifiedStrokeIds,
            /* [in] */ ULONG ulStrokeIdCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [out][in] */ ULONG *pulSerializedDataSize,
            /* [size_is][out] */ BYTE **ppbSerializedData) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetNodesFromTextRange( 
            /* [out][in] */ LONG *plStart,
            /* [out][in] */ LONG *plLength,
            /* [out] */ IContextNodes **ppContextNodes,
            /* [defaultvalue][in] */ IContextNodes *pNodesToSearch = 0) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetTextRangeFromNodes( 
            /* [out] */ LONG *plStart,
            /* [out] */ LONG *plLength,
            /* [in] */ IContextNodes *pNodesToSearch) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Search( 
            /* [in] */ BSTR bstrPhraseToMatch,
            /* [out][in] */ ULONG *pulSearchResultCount,
            /* [size_is][out] */ ULONG **ppulStrokeCountPerResult,
            /* [out][in] */ ULONG *pulStrokeIdsCount,
            /* [size_is][out] */ ULONG **ppulStrokeIds) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SearchWithLanguageId( 
            /* [in] */ BSTR bstrPhraseToMatch,
            /* [in] */ LONG lSearchStringLanguageId,
            /* [out][in] */ ULONG *pulSearchResultCount,
            /* [size_is][out] */ ULONG **ppulStrokeCountPerResult,
            /* [out][in] */ ULONG *pulStrokeIdsCount,
            /* [size_is][out] */ ULONG **ppulStrokeIds) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkAnalyzerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IInkAnalyzer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IInkAnalyzer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IInkAnalyzer * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDirtyRegion )( 
            IInkAnalyzer * This,
            /* [out] */ IAnalysisRegion **ppDirtyRegion);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDirtyRegion )( 
            IInkAnalyzer * This,
            /* [in] */ IAnalysisRegion *pDirtyRegion);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetStrokeType )( 
            IInkAnalyzer * This,
            /* [in] */ LONG lStrokeId,
            /* [in] */ StrokeType StrokeType);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetStrokesType )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulStrokeIdCount,
            /* [size_is][in] */ LONG *plStrokes,
            /* [in] */ StrokeType StrokeType);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStrokeType )( 
            IInkAnalyzer * This,
            /* [in] */ LONG lStrokeId,
            /* [out] */ StrokeType *pStrokeType);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetStrokeLanguageId )( 
            IInkAnalyzer * This,
            /* [in] */ LONG lStrokeId,
            /* [in] */ LONG lLanguageId);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetStrokesLanguageId )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulStrokeIdCount,
            /* [size_is][in] */ LONG *plStrokes,
            /* [in] */ LONG lStrokesLCID);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStrokeLanguageId )( 
            IInkAnalyzer * This,
            /* [in] */ LONG strokeId,
            /* [out] */ LONG *plLanguageId);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetRootNode )( 
            IInkAnalyzer * This,
            /* [out] */ IContextNode **ppRootNode);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *BackgroundAnalyze )( 
            IInkAnalyzer * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Analyze )( 
            IInkAnalyzer * This,
            /* [out] */ IAnalysisStatus **ppStatus);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsAnalyzing )( 
            IInkAnalyzer * This,
            /* [out] */ VARIANT_BOOL *pbAnalyzing);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reconcile )( 
            IInkAnalyzer * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *TransactionalReconcile )( 
            IInkAnalyzer * This,
            /* [in] */ LONG lTimeLimit,
            /* [out] */ VARIANT_BOOL *pbMoreToReconcile);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Abort )( 
            IInkAnalyzer * This,
            /* [out] */ IAnalysisRegion **ppAbortedRegion);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetInkAnalysisRecognizersByPriority )( 
            IInkAnalyzer * This,
            /* [out] */ IInkAnalysisRecognizers **ppInkAnalysisRecognizers);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetRecognizedString )( 
            IInkAnalyzer * This,
            /* [out] */ BSTR *pbstrRecognizedString);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddStroke )( 
            IInkAnalyzer * This,
            /* [in] */ LONG lStrokeId,
            /* [in] */ ULONG ulStrokePacketDataCount,
            /* [size_is][in] */ LONG *plStrokePacketData,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [out] */ IContextNode **ppContextNodeStrokeAddedTo);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddStrokes )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [size_is][in] */ ULONG *pulPacketDataCountPerStroke,
            /* [in] */ LONG *plStrokePacketData,
            /* [out] */ IContextNode **ppContextNodeStrokeAddedTo);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddStrokeForLanguage )( 
            IInkAnalyzer * This,
            /* [in] */ LONG lStrokeId,
            /* [in] */ LONG lStrokeLCID,
            /* [in] */ ULONG ulStrokePacketDataCount,
            /* [size_is][in] */ LONG *plStrokePacketData,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [out] */ IContextNode **ppContextNodeStrokeAddedTo);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddStrokesForLanguage )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plIdofStrokesToAdd,
            /* [in] */ LONG lStrokesLCID,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [size_is][in] */ ULONG *pulPacketDataCountPerStroke,
            /* [in] */ LONG *plStrokePacketData,
            /* [out] */ IContextNode **ppContextNodeStrokeAddedTo);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ClearStrokeData )( 
            IInkAnalyzer * This,
            /* [in] */ LONG lStrokeId);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveStroke )( 
            IInkAnalyzer * This,
            /* [in] */ LONG lStrokeId);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveStrokes )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulStrokeIdCount,
            /* [size_is][in] */ LONG *plStrokeIds);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *UpdateStrokesData )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [size_is][in] */ ULONG *pulPacketDataCountPerStroke,
            /* [in] */ LONG *plStrokePacketData);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAnalysisModes )( 
            IInkAnalyzer * This,
            /* [out] */ AnalysisModes *pAnalysisMode);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetAnalysisModes )( 
            IInkAnalyzer * This,
            /* [in] */ AnalysisModes analysisMode);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateAnalysisHint )( 
            IInkAnalyzer * This,
            /* [out] */ IContextNode **ppAnalysisHint);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteAnalysisHint )( 
            IInkAnalyzer * This,
            /* [in] */ IContextNode *pHintToDelete);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAnalysisHints )( 
            IInkAnalyzer * This,
            /* [out] */ IContextNodes **ppAnalysisHints);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAnalysisHintsByName )( 
            IInkAnalyzer * This,
            /* [in] */ BSTR hintName,
            /* [out] */ IContextNodes **ppAnalysisHints);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateContextNodes )( 
            IInkAnalyzer * This,
            /* [out] */ IContextNodes **ppContextNodes);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAlternatesForContextNodes )( 
            IInkAnalyzer * This,
            /* [in] */ IContextNodes *pContextNodes,
            /* [in] */ ULONG ulMaximumAlternates,
            /* [out] */ IAnalysisAlternates **ppAlternates);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAlternatesForStrokes )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokes,
            /* [in] */ ULONG ulMaximumAlternates,
            /* [out] */ IAnalysisAlternates **ppAlternates);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAlternates )( 
            IInkAnalyzer * This,
            /* [out] */ IAnalysisAlternates **ppAlternates);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ModifyTopAlternate )( 
            IInkAnalyzer * This,
            /* [in] */ IAnalysisAlternate *pAlternate);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ModifyTopAlternateWithConfirmation )( 
            IInkAnalyzer * This,
            /* [in] */ IAnalysisAlternate *alternate,
            /* [in] */ VARIANT_BOOL fconfirmAutomatically);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateCustomRecognizer )( 
            IInkAnalyzer * This,
            /* [in] */ const GUID *pInkAnalysisRecognizerId,
            /* [out] */ IContextNode **ppContextNode);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddStrokeToCustomRecognizer )( 
            IInkAnalyzer * This,
            /* [in] */ LONG lStrokeId,
            /* [in] */ ULONG ulStrokePacketDataCount,
            /* [size_is][in] */ LONG *plStrokePacketData,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [in] */ IContextNode *pCustomRecognizer,
            /* [out] */ IContextNode **ppContextNodeStrokeAddedTo);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddStrokesToCustomRecognizer )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [in] */ ULONG ulStrokePacketDescriptionCount,
            /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
            /* [size_is][in] */ ULONG *pulPacketDataCountPerStroke,
            /* [in] */ LONG *plStrokePacketData,
            /* [in] */ IContextNode *pCustomRecognizer,
            /* [out] */ IContextNode **ppContextNodeStrokeAddedTo);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindNode )( 
            IInkAnalyzer * This,
            /* [in] */ const GUID *pId,
            /* [out] */ IContextNode **ppContextNodeFound);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindLeafNodes )( 
            IInkAnalyzer * This,
            /* [out] */ IContextNodes **ppContextNodesFound);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindInkLeafNodesForStrokes )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [out] */ IContextNodes **ppContextNodesFound);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindInkLeafNodes )( 
            IInkAnalyzer * This,
            /* [out] */ IContextNodes **ppContextNodesFound);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindNodesOfType )( 
            IInkAnalyzer * This,
            /* [in] */ const GUID *pNodeType,
            /* [out] */ IContextNodes **ppContextNodesFound);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindNodesOfTypeForStrokes )( 
            IInkAnalyzer * This,
            /* [in] */ const GUID *pNodeType,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [out] */ IContextNodes **ppContextNodesFound);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindNodesOfTypeInSubTree )( 
            IInkAnalyzer * This,
            /* [in] */ const GUID *pNodeType,
            /* [in] */ IContextNode *pContextNodeToSearchFrom,
            /* [out] */ IContextNodes **ppContextNodesFound);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindNodesWithCallBack )( 
            IInkAnalyzer * This,
            /* [in] */ IMatchesCriteriaCallBack *pCriteria,
            /* [out] */ IContextNodes **ppContextNodesFound);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindNodesWithCallBackInSubTree )( 
            IInkAnalyzer * This,
            /* [in] */ IMatchesCriteriaCallBack *pCriteria,
            /* [in] */ IContextNode *pContextNodeToSearchFrom,
            /* [out] */ IContextNodes **ppContextNodesFound);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *LoadResults )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulDataSize,
            /* [size_is][in] */ BYTE *pbSerializedData,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plOriginalStrokeIds,
            /* [size_is][in] */ LONG *plModifiedStrokeIds,
            /* [out] */ VARIANT_BOOL *pfRetVal);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SaveResults )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulMappedStrokeIdsCount,
            /* [size_is][in] */ LONG *plOriginalStrokeIds,
            /* [size_is][in] */ LONG *plModifiedStrokeIds,
            /* [out][in] */ ULONG *pulSerializedDataSize,
            /* [size_is][out] */ BYTE **ppbSerializedData);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SaveResultsForNodes )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulMappedStrokeIdsCount,
            /* [size_is][in] */ LONG *plOriginalStrokeIds,
            /* [size_is][in] */ LONG *plModifiedStrokeIds,
            /* [in] */ IContextNodes *pContextNodes,
            /* [out][in] */ ULONG *pulSerializedDataSize,
            /* [size_is][out] */ BYTE **ppbSerializedData);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SaveResultsForStrokes )( 
            IInkAnalyzer * This,
            /* [in] */ ULONG ulMappedStrokeIdsCount,
            /* [size_is][in] */ LONG *plOriginalStrokeIds,
            /* [size_is][in] */ LONG *plModifiedStrokeIds,
            /* [in] */ ULONG ulStrokeIdCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [out][in] */ ULONG *pulSerializedDataSize,
            /* [size_is][out] */ BYTE **ppbSerializedData);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodesFromTextRange )( 
            IInkAnalyzer * This,
            /* [out][in] */ LONG *plStart,
            /* [out][in] */ LONG *plLength,
            /* [out] */ IContextNodes **ppContextNodes,
            /* [defaultvalue][in] */ IContextNodes *pNodesToSearch);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetTextRangeFromNodes )( 
            IInkAnalyzer * This,
            /* [out] */ LONG *plStart,
            /* [out] */ LONG *plLength,
            /* [in] */ IContextNodes *pNodesToSearch);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Search )( 
            IInkAnalyzer * This,
            /* [in] */ BSTR bstrPhraseToMatch,
            /* [out][in] */ ULONG *pulSearchResultCount,
            /* [size_is][out] */ ULONG **ppulStrokeCountPerResult,
            /* [out][in] */ ULONG *pulStrokeIdsCount,
            /* [size_is][out] */ ULONG **ppulStrokeIds);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SearchWithLanguageId )( 
            IInkAnalyzer * This,
            /* [in] */ BSTR bstrPhraseToMatch,
            /* [in] */ LONG lSearchStringLanguageId,
            /* [out][in] */ ULONG *pulSearchResultCount,
            /* [size_is][out] */ ULONG **ppulStrokeCountPerResult,
            /* [out][in] */ ULONG *pulStrokeIdsCount,
            /* [size_is][out] */ ULONG **ppulStrokeIds);
        
        END_INTERFACE
    } IInkAnalyzerVtbl;

    interface IInkAnalyzer
    {
        CONST_VTBL struct IInkAnalyzerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkAnalyzer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IInkAnalyzer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IInkAnalyzer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IInkAnalyzer_GetDirtyRegion(This,ppDirtyRegion)	\
    (This)->lpVtbl -> GetDirtyRegion(This,ppDirtyRegion)

#define IInkAnalyzer_SetDirtyRegion(This,pDirtyRegion)	\
    (This)->lpVtbl -> SetDirtyRegion(This,pDirtyRegion)

#define IInkAnalyzer_SetStrokeType(This,lStrokeId,StrokeType)	\
    (This)->lpVtbl -> SetStrokeType(This,lStrokeId,StrokeType)

#define IInkAnalyzer_SetStrokesType(This,ulStrokeIdCount,plStrokes,StrokeType)	\
    (This)->lpVtbl -> SetStrokesType(This,ulStrokeIdCount,plStrokes,StrokeType)

#define IInkAnalyzer_GetStrokeType(This,lStrokeId,pStrokeType)	\
    (This)->lpVtbl -> GetStrokeType(This,lStrokeId,pStrokeType)

#define IInkAnalyzer_SetStrokeLanguageId(This,lStrokeId,lLanguageId)	\
    (This)->lpVtbl -> SetStrokeLanguageId(This,lStrokeId,lLanguageId)

#define IInkAnalyzer_SetStrokesLanguageId(This,ulStrokeIdCount,plStrokes,lStrokesLCID)	\
    (This)->lpVtbl -> SetStrokesLanguageId(This,ulStrokeIdCount,plStrokes,lStrokesLCID)

#define IInkAnalyzer_GetStrokeLanguageId(This,strokeId,plLanguageId)	\
    (This)->lpVtbl -> GetStrokeLanguageId(This,strokeId,plLanguageId)

#define IInkAnalyzer_GetRootNode(This,ppRootNode)	\
    (This)->lpVtbl -> GetRootNode(This,ppRootNode)

#define IInkAnalyzer_BackgroundAnalyze(This)	\
    (This)->lpVtbl -> BackgroundAnalyze(This)

#define IInkAnalyzer_Analyze(This,ppStatus)	\
    (This)->lpVtbl -> Analyze(This,ppStatus)

#define IInkAnalyzer_IsAnalyzing(This,pbAnalyzing)	\
    (This)->lpVtbl -> IsAnalyzing(This,pbAnalyzing)

#define IInkAnalyzer_Reconcile(This)	\
    (This)->lpVtbl -> Reconcile(This)

#define IInkAnalyzer_TransactionalReconcile(This,lTimeLimit,pbMoreToReconcile)	\
    (This)->lpVtbl -> TransactionalReconcile(This,lTimeLimit,pbMoreToReconcile)

#define IInkAnalyzer_Abort(This,ppAbortedRegion)	\
    (This)->lpVtbl -> Abort(This,ppAbortedRegion)

#define IInkAnalyzer_GetInkAnalysisRecognizersByPriority(This,ppInkAnalysisRecognizers)	\
    (This)->lpVtbl -> GetInkAnalysisRecognizersByPriority(This,ppInkAnalysisRecognizers)

#define IInkAnalyzer_GetRecognizedString(This,pbstrRecognizedString)	\
    (This)->lpVtbl -> GetRecognizedString(This,pbstrRecognizedString)

#define IInkAnalyzer_AddStroke(This,lStrokeId,ulStrokePacketDataCount,plStrokePacketData,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,ppContextNodeStrokeAddedTo)	\
    (This)->lpVtbl -> AddStroke(This,lStrokeId,ulStrokePacketDataCount,plStrokePacketData,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,ppContextNodeStrokeAddedTo)

#define IInkAnalyzer_AddStrokes(This,ulStrokeIdsCount,plStrokeIds,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,pulPacketDataCountPerStroke,plStrokePacketData,ppContextNodeStrokeAddedTo)	\
    (This)->lpVtbl -> AddStrokes(This,ulStrokeIdsCount,plStrokeIds,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,pulPacketDataCountPerStroke,plStrokePacketData,ppContextNodeStrokeAddedTo)

#define IInkAnalyzer_AddStrokeForLanguage(This,lStrokeId,lStrokeLCID,ulStrokePacketDataCount,plStrokePacketData,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,ppContextNodeStrokeAddedTo)	\
    (This)->lpVtbl -> AddStrokeForLanguage(This,lStrokeId,lStrokeLCID,ulStrokePacketDataCount,plStrokePacketData,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,ppContextNodeStrokeAddedTo)

#define IInkAnalyzer_AddStrokesForLanguage(This,ulStrokeIdsCount,plIdofStrokesToAdd,lStrokesLCID,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,pulPacketDataCountPerStroke,plStrokePacketData,ppContextNodeStrokeAddedTo)	\
    (This)->lpVtbl -> AddStrokesForLanguage(This,ulStrokeIdsCount,plIdofStrokesToAdd,lStrokesLCID,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,pulPacketDataCountPerStroke,plStrokePacketData,ppContextNodeStrokeAddedTo)

#define IInkAnalyzer_ClearStrokeData(This,lStrokeId)	\
    (This)->lpVtbl -> ClearStrokeData(This,lStrokeId)

#define IInkAnalyzer_RemoveStroke(This,lStrokeId)	\
    (This)->lpVtbl -> RemoveStroke(This,lStrokeId)

#define IInkAnalyzer_RemoveStrokes(This,ulStrokeIdCount,plStrokeIds)	\
    (This)->lpVtbl -> RemoveStrokes(This,ulStrokeIdCount,plStrokeIds)

#define IInkAnalyzer_UpdateStrokesData(This,ulStrokeIdsCount,plStrokeIds,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,pulPacketDataCountPerStroke,plStrokePacketData)	\
    (This)->lpVtbl -> UpdateStrokesData(This,ulStrokeIdsCount,plStrokeIds,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,pulPacketDataCountPerStroke,plStrokePacketData)

#define IInkAnalyzer_GetAnalysisModes(This,pAnalysisMode)	\
    (This)->lpVtbl -> GetAnalysisModes(This,pAnalysisMode)

#define IInkAnalyzer_SetAnalysisModes(This,analysisMode)	\
    (This)->lpVtbl -> SetAnalysisModes(This,analysisMode)

#define IInkAnalyzer_CreateAnalysisHint(This,ppAnalysisHint)	\
    (This)->lpVtbl -> CreateAnalysisHint(This,ppAnalysisHint)

#define IInkAnalyzer_DeleteAnalysisHint(This,pHintToDelete)	\
    (This)->lpVtbl -> DeleteAnalysisHint(This,pHintToDelete)

#define IInkAnalyzer_GetAnalysisHints(This,ppAnalysisHints)	\
    (This)->lpVtbl -> GetAnalysisHints(This,ppAnalysisHints)

#define IInkAnalyzer_GetAnalysisHintsByName(This,hintName,ppAnalysisHints)	\
    (This)->lpVtbl -> GetAnalysisHintsByName(This,hintName,ppAnalysisHints)

#define IInkAnalyzer_CreateContextNodes(This,ppContextNodes)	\
    (This)->lpVtbl -> CreateContextNodes(This,ppContextNodes)

#define IInkAnalyzer_GetAlternatesForContextNodes(This,pContextNodes,ulMaximumAlternates,ppAlternates)	\
    (This)->lpVtbl -> GetAlternatesForContextNodes(This,pContextNodes,ulMaximumAlternates,ppAlternates)

#define IInkAnalyzer_GetAlternatesForStrokes(This,ulStrokeIdsCount,plStrokes,ulMaximumAlternates,ppAlternates)	\
    (This)->lpVtbl -> GetAlternatesForStrokes(This,ulStrokeIdsCount,plStrokes,ulMaximumAlternates,ppAlternates)

#define IInkAnalyzer_GetAlternates(This,ppAlternates)	\
    (This)->lpVtbl -> GetAlternates(This,ppAlternates)

#define IInkAnalyzer_ModifyTopAlternate(This,pAlternate)	\
    (This)->lpVtbl -> ModifyTopAlternate(This,pAlternate)

#define IInkAnalyzer_ModifyTopAlternateWithConfirmation(This,alternate,fconfirmAutomatically)	\
    (This)->lpVtbl -> ModifyTopAlternateWithConfirmation(This,alternate,fconfirmAutomatically)

#define IInkAnalyzer_CreateCustomRecognizer(This,pInkAnalysisRecognizerId,ppContextNode)	\
    (This)->lpVtbl -> CreateCustomRecognizer(This,pInkAnalysisRecognizerId,ppContextNode)

#define IInkAnalyzer_AddStrokeToCustomRecognizer(This,lStrokeId,ulStrokePacketDataCount,plStrokePacketData,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,pCustomRecognizer,ppContextNodeStrokeAddedTo)	\
    (This)->lpVtbl -> AddStrokeToCustomRecognizer(This,lStrokeId,ulStrokePacketDataCount,plStrokePacketData,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,pCustomRecognizer,ppContextNodeStrokeAddedTo)

#define IInkAnalyzer_AddStrokesToCustomRecognizer(This,ulStrokeIdsCount,plStrokeIds,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,pulPacketDataCountPerStroke,plStrokePacketData,pCustomRecognizer,ppContextNodeStrokeAddedTo)	\
    (This)->lpVtbl -> AddStrokesToCustomRecognizer(This,ulStrokeIdsCount,plStrokeIds,ulStrokePacketDescriptionCount,pStrokePacketDescriptionGuids,pulPacketDataCountPerStroke,plStrokePacketData,pCustomRecognizer,ppContextNodeStrokeAddedTo)

#define IInkAnalyzer_FindNode(This,pId,ppContextNodeFound)	\
    (This)->lpVtbl -> FindNode(This,pId,ppContextNodeFound)

#define IInkAnalyzer_FindLeafNodes(This,ppContextNodesFound)	\
    (This)->lpVtbl -> FindLeafNodes(This,ppContextNodesFound)

#define IInkAnalyzer_FindInkLeafNodesForStrokes(This,ulStrokeIdsCount,plStrokeIds,ppContextNodesFound)	\
    (This)->lpVtbl -> FindInkLeafNodesForStrokes(This,ulStrokeIdsCount,plStrokeIds,ppContextNodesFound)

#define IInkAnalyzer_FindInkLeafNodes(This,ppContextNodesFound)	\
    (This)->lpVtbl -> FindInkLeafNodes(This,ppContextNodesFound)

#define IInkAnalyzer_FindNodesOfType(This,pNodeType,ppContextNodesFound)	\
    (This)->lpVtbl -> FindNodesOfType(This,pNodeType,ppContextNodesFound)

#define IInkAnalyzer_FindNodesOfTypeForStrokes(This,pNodeType,ulStrokeIdsCount,plStrokeIds,ppContextNodesFound)	\
    (This)->lpVtbl -> FindNodesOfTypeForStrokes(This,pNodeType,ulStrokeIdsCount,plStrokeIds,ppContextNodesFound)

#define IInkAnalyzer_FindNodesOfTypeInSubTree(This,pNodeType,pContextNodeToSearchFrom,ppContextNodesFound)	\
    (This)->lpVtbl -> FindNodesOfTypeInSubTree(This,pNodeType,pContextNodeToSearchFrom,ppContextNodesFound)

#define IInkAnalyzer_FindNodesWithCallBack(This,pCriteria,ppContextNodesFound)	\
    (This)->lpVtbl -> FindNodesWithCallBack(This,pCriteria,ppContextNodesFound)

#define IInkAnalyzer_FindNodesWithCallBackInSubTree(This,pCriteria,pContextNodeToSearchFrom,ppContextNodesFound)	\
    (This)->lpVtbl -> FindNodesWithCallBackInSubTree(This,pCriteria,pContextNodeToSearchFrom,ppContextNodesFound)

#define IInkAnalyzer_LoadResults(This,ulDataSize,pbSerializedData,ulStrokeIdsCount,plOriginalStrokeIds,plModifiedStrokeIds,pfRetVal)	\
    (This)->lpVtbl -> LoadResults(This,ulDataSize,pbSerializedData,ulStrokeIdsCount,plOriginalStrokeIds,plModifiedStrokeIds,pfRetVal)

#define IInkAnalyzer_SaveResults(This,ulMappedStrokeIdsCount,plOriginalStrokeIds,plModifiedStrokeIds,pulSerializedDataSize,ppbSerializedData)	\
    (This)->lpVtbl -> SaveResults(This,ulMappedStrokeIdsCount,plOriginalStrokeIds,plModifiedStrokeIds,pulSerializedDataSize,ppbSerializedData)

#define IInkAnalyzer_SaveResultsForNodes(This,ulMappedStrokeIdsCount,plOriginalStrokeIds,plModifiedStrokeIds,pContextNodes,pulSerializedDataSize,ppbSerializedData)	\
    (This)->lpVtbl -> SaveResultsForNodes(This,ulMappedStrokeIdsCount,plOriginalStrokeIds,plModifiedStrokeIds,pContextNodes,pulSerializedDataSize,ppbSerializedData)

#define IInkAnalyzer_SaveResultsForStrokes(This,ulMappedStrokeIdsCount,plOriginalStrokeIds,plModifiedStrokeIds,ulStrokeIdCount,plStrokeIds,pulSerializedDataSize,ppbSerializedData)	\
    (This)->lpVtbl -> SaveResultsForStrokes(This,ulMappedStrokeIdsCount,plOriginalStrokeIds,plModifiedStrokeIds,ulStrokeIdCount,plStrokeIds,pulSerializedDataSize,ppbSerializedData)

#define IInkAnalyzer_GetNodesFromTextRange(This,plStart,plLength,ppContextNodes,pNodesToSearch)	\
    (This)->lpVtbl -> GetNodesFromTextRange(This,plStart,plLength,ppContextNodes,pNodesToSearch)

#define IInkAnalyzer_GetTextRangeFromNodes(This,plStart,plLength,pNodesToSearch)	\
    (This)->lpVtbl -> GetTextRangeFromNodes(This,plStart,plLength,pNodesToSearch)

#define IInkAnalyzer_Search(This,bstrPhraseToMatch,pulSearchResultCount,ppulStrokeCountPerResult,pulStrokeIdsCount,ppulStrokeIds)	\
    (This)->lpVtbl -> Search(This,bstrPhraseToMatch,pulSearchResultCount,ppulStrokeCountPerResult,pulStrokeIdsCount,ppulStrokeIds)

#define IInkAnalyzer_SearchWithLanguageId(This,bstrPhraseToMatch,lSearchStringLanguageId,pulSearchResultCount,ppulStrokeCountPerResult,pulStrokeIdsCount,ppulStrokeIds)	\
    (This)->lpVtbl -> SearchWithLanguageId(This,bstrPhraseToMatch,lSearchStringLanguageId,pulSearchResultCount,ppulStrokeCountPerResult,pulStrokeIdsCount,ppulStrokeIds)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetDirtyRegion_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ IAnalysisRegion **ppDirtyRegion);


void __RPC_STUB IInkAnalyzer_GetDirtyRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_SetDirtyRegion_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ IAnalysisRegion *pDirtyRegion);


void __RPC_STUB IInkAnalyzer_SetDirtyRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_SetStrokeType_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ LONG lStrokeId,
    /* [in] */ StrokeType StrokeType);


void __RPC_STUB IInkAnalyzer_SetStrokeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_SetStrokesType_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulStrokeIdCount,
    /* [size_is][in] */ LONG *plStrokes,
    /* [in] */ StrokeType StrokeType);


void __RPC_STUB IInkAnalyzer_SetStrokesType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetStrokeType_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ LONG lStrokeId,
    /* [out] */ StrokeType *pStrokeType);


void __RPC_STUB IInkAnalyzer_GetStrokeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_SetStrokeLanguageId_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ LONG lStrokeId,
    /* [in] */ LONG lLanguageId);


void __RPC_STUB IInkAnalyzer_SetStrokeLanguageId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_SetStrokesLanguageId_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulStrokeIdCount,
    /* [size_is][in] */ LONG *plStrokes,
    /* [in] */ LONG lStrokesLCID);


void __RPC_STUB IInkAnalyzer_SetStrokesLanguageId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetStrokeLanguageId_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ LONG strokeId,
    /* [out] */ LONG *plLanguageId);


void __RPC_STUB IInkAnalyzer_GetStrokeLanguageId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetRootNode_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ IContextNode **ppRootNode);


void __RPC_STUB IInkAnalyzer_GetRootNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_BackgroundAnalyze_Proxy( 
    IInkAnalyzer * This);


void __RPC_STUB IInkAnalyzer_BackgroundAnalyze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_Analyze_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ IAnalysisStatus **ppStatus);


void __RPC_STUB IInkAnalyzer_Analyze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_IsAnalyzing_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ VARIANT_BOOL *pbAnalyzing);


void __RPC_STUB IInkAnalyzer_IsAnalyzing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_Reconcile_Proxy( 
    IInkAnalyzer * This);


void __RPC_STUB IInkAnalyzer_Reconcile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_TransactionalReconcile_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ LONG lTimeLimit,
    /* [out] */ VARIANT_BOOL *pbMoreToReconcile);


void __RPC_STUB IInkAnalyzer_TransactionalReconcile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_Abort_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ IAnalysisRegion **ppAbortedRegion);


void __RPC_STUB IInkAnalyzer_Abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetInkAnalysisRecognizersByPriority_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ IInkAnalysisRecognizers **ppInkAnalysisRecognizers);


void __RPC_STUB IInkAnalyzer_GetInkAnalysisRecognizersByPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetRecognizedString_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ BSTR *pbstrRecognizedString);


void __RPC_STUB IInkAnalyzer_GetRecognizedString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_AddStroke_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ LONG lStrokeId,
    /* [in] */ ULONG ulStrokePacketDataCount,
    /* [size_is][in] */ LONG *plStrokePacketData,
    /* [in] */ ULONG ulStrokePacketDescriptionCount,
    /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
    /* [out] */ IContextNode **ppContextNodeStrokeAddedTo);


void __RPC_STUB IInkAnalyzer_AddStroke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_AddStrokes_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plStrokeIds,
    /* [in] */ ULONG ulStrokePacketDescriptionCount,
    /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
    /* [size_is][in] */ ULONG *pulPacketDataCountPerStroke,
    /* [in] */ LONG *plStrokePacketData,
    /* [out] */ IContextNode **ppContextNodeStrokeAddedTo);


void __RPC_STUB IInkAnalyzer_AddStrokes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_AddStrokeForLanguage_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ LONG lStrokeId,
    /* [in] */ LONG lStrokeLCID,
    /* [in] */ ULONG ulStrokePacketDataCount,
    /* [size_is][in] */ LONG *plStrokePacketData,
    /* [in] */ ULONG ulStrokePacketDescriptionCount,
    /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
    /* [out] */ IContextNode **ppContextNodeStrokeAddedTo);


void __RPC_STUB IInkAnalyzer_AddStrokeForLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_AddStrokesForLanguage_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plIdofStrokesToAdd,
    /* [in] */ LONG lStrokesLCID,
    /* [in] */ ULONG ulStrokePacketDescriptionCount,
    /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
    /* [size_is][in] */ ULONG *pulPacketDataCountPerStroke,
    /* [in] */ LONG *plStrokePacketData,
    /* [out] */ IContextNode **ppContextNodeStrokeAddedTo);


void __RPC_STUB IInkAnalyzer_AddStrokesForLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_ClearStrokeData_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ LONG lStrokeId);


void __RPC_STUB IInkAnalyzer_ClearStrokeData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_RemoveStroke_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ LONG lStrokeId);


void __RPC_STUB IInkAnalyzer_RemoveStroke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_RemoveStrokes_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulStrokeIdCount,
    /* [size_is][in] */ LONG *plStrokeIds);


void __RPC_STUB IInkAnalyzer_RemoveStrokes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_UpdateStrokesData_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plStrokeIds,
    /* [in] */ ULONG ulStrokePacketDescriptionCount,
    /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
    /* [size_is][in] */ ULONG *pulPacketDataCountPerStroke,
    /* [in] */ LONG *plStrokePacketData);


void __RPC_STUB IInkAnalyzer_UpdateStrokesData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetAnalysisModes_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ AnalysisModes *pAnalysisMode);


void __RPC_STUB IInkAnalyzer_GetAnalysisModes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_SetAnalysisModes_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ AnalysisModes analysisMode);


void __RPC_STUB IInkAnalyzer_SetAnalysisModes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_CreateAnalysisHint_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ IContextNode **ppAnalysisHint);


void __RPC_STUB IInkAnalyzer_CreateAnalysisHint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_DeleteAnalysisHint_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ IContextNode *pHintToDelete);


void __RPC_STUB IInkAnalyzer_DeleteAnalysisHint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetAnalysisHints_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ IContextNodes **ppAnalysisHints);


void __RPC_STUB IInkAnalyzer_GetAnalysisHints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetAnalysisHintsByName_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ BSTR hintName,
    /* [out] */ IContextNodes **ppAnalysisHints);


void __RPC_STUB IInkAnalyzer_GetAnalysisHintsByName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_CreateContextNodes_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ IContextNodes **ppContextNodes);


void __RPC_STUB IInkAnalyzer_CreateContextNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetAlternatesForContextNodes_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ IContextNodes *pContextNodes,
    /* [in] */ ULONG ulMaximumAlternates,
    /* [out] */ IAnalysisAlternates **ppAlternates);


void __RPC_STUB IInkAnalyzer_GetAlternatesForContextNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetAlternatesForStrokes_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plStrokes,
    /* [in] */ ULONG ulMaximumAlternates,
    /* [out] */ IAnalysisAlternates **ppAlternates);


void __RPC_STUB IInkAnalyzer_GetAlternatesForStrokes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetAlternates_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ IAnalysisAlternates **ppAlternates);


void __RPC_STUB IInkAnalyzer_GetAlternates_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_ModifyTopAlternate_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ IAnalysisAlternate *pAlternate);


void __RPC_STUB IInkAnalyzer_ModifyTopAlternate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_ModifyTopAlternateWithConfirmation_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ IAnalysisAlternate *alternate,
    /* [in] */ VARIANT_BOOL fconfirmAutomatically);


void __RPC_STUB IInkAnalyzer_ModifyTopAlternateWithConfirmation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_CreateCustomRecognizer_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ const GUID *pInkAnalysisRecognizerId,
    /* [out] */ IContextNode **ppContextNode);


void __RPC_STUB IInkAnalyzer_CreateCustomRecognizer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_AddStrokeToCustomRecognizer_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ LONG lStrokeId,
    /* [in] */ ULONG ulStrokePacketDataCount,
    /* [size_is][in] */ LONG *plStrokePacketData,
    /* [in] */ ULONG ulStrokePacketDescriptionCount,
    /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
    /* [in] */ IContextNode *pCustomRecognizer,
    /* [out] */ IContextNode **ppContextNodeStrokeAddedTo);


void __RPC_STUB IInkAnalyzer_AddStrokeToCustomRecognizer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_AddStrokesToCustomRecognizer_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plStrokeIds,
    /* [in] */ ULONG ulStrokePacketDescriptionCount,
    /* [size_is][in] */ GUID *pStrokePacketDescriptionGuids,
    /* [size_is][in] */ ULONG *pulPacketDataCountPerStroke,
    /* [in] */ LONG *plStrokePacketData,
    /* [in] */ IContextNode *pCustomRecognizer,
    /* [out] */ IContextNode **ppContextNodeStrokeAddedTo);


void __RPC_STUB IInkAnalyzer_AddStrokesToCustomRecognizer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_FindNode_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ const GUID *pId,
    /* [out] */ IContextNode **ppContextNodeFound);


void __RPC_STUB IInkAnalyzer_FindNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_FindLeafNodes_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ IContextNodes **ppContextNodesFound);


void __RPC_STUB IInkAnalyzer_FindLeafNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_FindInkLeafNodesForStrokes_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plStrokeIds,
    /* [out] */ IContextNodes **ppContextNodesFound);


void __RPC_STUB IInkAnalyzer_FindInkLeafNodesForStrokes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_FindInkLeafNodes_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ IContextNodes **ppContextNodesFound);


void __RPC_STUB IInkAnalyzer_FindInkLeafNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_FindNodesOfType_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ const GUID *pNodeType,
    /* [out] */ IContextNodes **ppContextNodesFound);


void __RPC_STUB IInkAnalyzer_FindNodesOfType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_FindNodesOfTypeForStrokes_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ const GUID *pNodeType,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plStrokeIds,
    /* [out] */ IContextNodes **ppContextNodesFound);


void __RPC_STUB IInkAnalyzer_FindNodesOfTypeForStrokes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_FindNodesOfTypeInSubTree_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ const GUID *pNodeType,
    /* [in] */ IContextNode *pContextNodeToSearchFrom,
    /* [out] */ IContextNodes **ppContextNodesFound);


void __RPC_STUB IInkAnalyzer_FindNodesOfTypeInSubTree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_FindNodesWithCallBack_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ IMatchesCriteriaCallBack *pCriteria,
    /* [out] */ IContextNodes **ppContextNodesFound);


void __RPC_STUB IInkAnalyzer_FindNodesWithCallBack_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_FindNodesWithCallBackInSubTree_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ IMatchesCriteriaCallBack *pCriteria,
    /* [in] */ IContextNode *pContextNodeToSearchFrom,
    /* [out] */ IContextNodes **ppContextNodesFound);


void __RPC_STUB IInkAnalyzer_FindNodesWithCallBackInSubTree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_LoadResults_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulDataSize,
    /* [size_is][in] */ BYTE *pbSerializedData,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plOriginalStrokeIds,
    /* [size_is][in] */ LONG *plModifiedStrokeIds,
    /* [out] */ VARIANT_BOOL *pfRetVal);


void __RPC_STUB IInkAnalyzer_LoadResults_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_SaveResults_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulMappedStrokeIdsCount,
    /* [size_is][in] */ LONG *plOriginalStrokeIds,
    /* [size_is][in] */ LONG *plModifiedStrokeIds,
    /* [out][in] */ ULONG *pulSerializedDataSize,
    /* [size_is][out] */ BYTE **ppbSerializedData);


void __RPC_STUB IInkAnalyzer_SaveResults_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_SaveResultsForNodes_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulMappedStrokeIdsCount,
    /* [size_is][in] */ LONG *plOriginalStrokeIds,
    /* [size_is][in] */ LONG *plModifiedStrokeIds,
    /* [in] */ IContextNodes *pContextNodes,
    /* [out][in] */ ULONG *pulSerializedDataSize,
    /* [size_is][out] */ BYTE **ppbSerializedData);


void __RPC_STUB IInkAnalyzer_SaveResultsForNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_SaveResultsForStrokes_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ ULONG ulMappedStrokeIdsCount,
    /* [size_is][in] */ LONG *plOriginalStrokeIds,
    /* [size_is][in] */ LONG *plModifiedStrokeIds,
    /* [in] */ ULONG ulStrokeIdCount,
    /* [size_is][in] */ LONG *plStrokeIds,
    /* [out][in] */ ULONG *pulSerializedDataSize,
    /* [size_is][out] */ BYTE **ppbSerializedData);


void __RPC_STUB IInkAnalyzer_SaveResultsForStrokes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetNodesFromTextRange_Proxy( 
    IInkAnalyzer * This,
    /* [out][in] */ LONG *plStart,
    /* [out][in] */ LONG *plLength,
    /* [out] */ IContextNodes **ppContextNodes,
    /* [defaultvalue][in] */ IContextNodes *pNodesToSearch);


void __RPC_STUB IInkAnalyzer_GetNodesFromTextRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_GetTextRangeFromNodes_Proxy( 
    IInkAnalyzer * This,
    /* [out] */ LONG *plStart,
    /* [out] */ LONG *plLength,
    /* [in] */ IContextNodes *pNodesToSearch);


void __RPC_STUB IInkAnalyzer_GetTextRangeFromNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_Search_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ BSTR bstrPhraseToMatch,
    /* [out][in] */ ULONG *pulSearchResultCount,
    /* [size_is][out] */ ULONG **ppulStrokeCountPerResult,
    /* [out][in] */ ULONG *pulStrokeIdsCount,
    /* [size_is][out] */ ULONG **ppulStrokeIds);


void __RPC_STUB IInkAnalyzer_Search_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalyzer_SearchWithLanguageId_Proxy( 
    IInkAnalyzer * This,
    /* [in] */ BSTR bstrPhraseToMatch,
    /* [in] */ LONG lSearchStringLanguageId,
    /* [out][in] */ ULONG *pulSearchResultCount,
    /* [size_is][out] */ ULONG **ppulStrokeCountPerResult,
    /* [out][in] */ ULONG *pulStrokeIdsCount,
    /* [size_is][out] */ ULONG **ppulStrokeIds);


void __RPC_STUB IInkAnalyzer_SearchWithLanguageId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IInkAnalyzer_INTERFACE_DEFINED__ */


#ifndef __IContextNode_INTERFACE_DEFINED__
#define __IContextNode_INTERFACE_DEFINED__

/* interface IContextNode */
/* [object][unique][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID_IContextNode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("160BC1B3-5997-3D3C-9E5A-E38BCB212047")
    IContextNode : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetId( 
            /* [out] */ GUID *pId) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetType( 
            /* [out] */ GUID *pContextNodeType) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetLocation( 
            /* [out] */ IAnalysisRegion **ppIAnalysisRegion) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetTypeName( 
            /* [out] */ BSTR *pbstrContextNodeType) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SetLocation( 
            /* [in] */ IAnalysisRegion *pIAnalysisRegion) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetParentNode( 
            /* [out] */ IContextNode **ppParentContextNode) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Reparent( 
            /* [in] */ IContextNode *pNewParent) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetSubNodes( 
            /* [out] */ IContextNodes **ppSubContextNodes) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE CreateSubNode( 
            /* [in] */ const GUID *pNodeType,
            /* [out] */ IContextNode **ppContextNodeCreated) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE CreatePartiallyPopulatedSubNode( 
            /* [in] */ const GUID *pNodeType,
            /* [in] */ const GUID *pNodeId,
            /* [in] */ IAnalysisRegion *pNodeLocation,
            /* [out] */ IContextNode **ppPartiallyPopulatedContextNodeCreated) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetPartiallyPopulated( 
            /* [out] */ VARIANT_BOOL *pfPartiallyPopulated) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SetPartiallyPopulated( 
            /* [in] */ VARIANT_BOOL fPartiallyPopulated) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE LoadPropertiesData( 
            /* [in] */ ULONG cbPropertiesDataSize,
            /* [size_is][in] */ BYTE *pbPropertiesData,
            /* [out] */ VARIANT_BOOL *pfSuccessful) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SavePropertiesData( 
            /* [out][in] */ ULONG *pulPropertiesDataSize,
            /* [size_is][out] */ BYTE **ppbPropertiesData) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE DeleteSubNode( 
            /* [in] */ IContextNode *pContextNodeToDelete) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE AddPropertyData( 
            /* [in] */ const GUID *pPropertyDataId,
            /* [in] */ ULONG ulPropertyDataSize,
            /* [size_is][in] */ BYTE *pbPropertyData) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetPropertyData( 
            /* [in] */ const GUID *pPropertyDataId,
            /* [out][in] */ ULONG *pulPropertyDataSize,
            /* [size_is][out] */ BYTE **ppbPropertyData) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE RemovePropertyData( 
            /* [in] */ const GUID *pPropertyDataId) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetPropertyDataIds( 
            /* [out][in] */ ULONG *pulGuidCount,
            /* [size_is][out] */ GUID **ppGuids) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ContainsPropertyData( 
            /* [in] */ const GUID *pPropertyDataId,
            /* [out] */ VARIANT_BOOL *pbContains) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SetStrokes( 
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetStrokeIds( 
            /* [out][in] */ ULONG *pulStrokeIdsCount,
            /* [size_is][out] */ LONG **pplStrokes) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetStrokeCount( 
            /* [out] */ ULONG *pulStrokeCount) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetStrokePacketDataById( 
            /* [in] */ LONG strokeId,
            /* [out][in] */ ULONG *pStrokePacketDataCount,
            /* [size_is][out] */ LONG **pplStrokePacketData) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetStrokePacketDescriptionById( 
            /* [in] */ LONG lStrokeId,
            /* [out][in] */ ULONG *pulStrokePacketDescriptionCount,
            /* [size_is][out] */ GUID **ppStrokePacketDescriptionGuids) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE MoveSubNodeToPosition( 
            /* [in] */ IContextNode *pSubnodeToMove,
            /* [in] */ ULONG ulNewIndex) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ReparentStrokesByIdToNode( 
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [in] */ IContextNode *pContextNodeDestination) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Confirm( 
            /* [in] */ ConfirmationType confirmedType) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IsConfirmed( 
            /* [in] */ ConfirmationType confirmedType,
            /* [out] */ VARIANT_BOOL *pfTypeConfirmed) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetContextLinks( 
            /* [out] */ IContextLinks **ppContextLinks) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IsAlternateStringSupported( 
            /* [in] */ BSTR bstrAlternateString,
            /* [out] */ VARIANT_BOOL *pfIsSupported) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IsStringSupported( 
            /* [retval][out] */ VARIANT_BOOL *pfIsSupported) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContextNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IContextNode * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IContextNode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IContextNode * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetId )( 
            IContextNode * This,
            /* [out] */ GUID *pId);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IContextNode * This,
            /* [out] */ GUID *pContextNodeType);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetLocation )( 
            IContextNode * This,
            /* [out] */ IAnalysisRegion **ppIAnalysisRegion);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetTypeName )( 
            IContextNode * This,
            /* [out] */ BSTR *pbstrContextNodeType);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetLocation )( 
            IContextNode * This,
            /* [in] */ IAnalysisRegion *pIAnalysisRegion);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParentNode )( 
            IContextNode * This,
            /* [out] */ IContextNode **ppParentContextNode);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reparent )( 
            IContextNode * This,
            /* [in] */ IContextNode *pNewParent);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSubNodes )( 
            IContextNode * This,
            /* [out] */ IContextNodes **ppSubContextNodes);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateSubNode )( 
            IContextNode * This,
            /* [in] */ const GUID *pNodeType,
            /* [out] */ IContextNode **ppContextNodeCreated);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreatePartiallyPopulatedSubNode )( 
            IContextNode * This,
            /* [in] */ const GUID *pNodeType,
            /* [in] */ const GUID *pNodeId,
            /* [in] */ IAnalysisRegion *pNodeLocation,
            /* [out] */ IContextNode **ppPartiallyPopulatedContextNodeCreated);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPartiallyPopulated )( 
            IContextNode * This,
            /* [out] */ VARIANT_BOOL *pfPartiallyPopulated);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetPartiallyPopulated )( 
            IContextNode * This,
            /* [in] */ VARIANT_BOOL fPartiallyPopulated);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *LoadPropertiesData )( 
            IContextNode * This,
            /* [in] */ ULONG cbPropertiesDataSize,
            /* [size_is][in] */ BYTE *pbPropertiesData,
            /* [out] */ VARIANT_BOOL *pfSuccessful);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SavePropertiesData )( 
            IContextNode * This,
            /* [out][in] */ ULONG *pulPropertiesDataSize,
            /* [size_is][out] */ BYTE **ppbPropertiesData);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteSubNode )( 
            IContextNode * This,
            /* [in] */ IContextNode *pContextNodeToDelete);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddPropertyData )( 
            IContextNode * This,
            /* [in] */ const GUID *pPropertyDataId,
            /* [in] */ ULONG ulPropertyDataSize,
            /* [size_is][in] */ BYTE *pbPropertyData);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyData )( 
            IContextNode * This,
            /* [in] */ const GUID *pPropertyDataId,
            /* [out][in] */ ULONG *pulPropertyDataSize,
            /* [size_is][out] */ BYTE **ppbPropertyData);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemovePropertyData )( 
            IContextNode * This,
            /* [in] */ const GUID *pPropertyDataId);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyDataIds )( 
            IContextNode * This,
            /* [out][in] */ ULONG *pulGuidCount,
            /* [size_is][out] */ GUID **ppGuids);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ContainsPropertyData )( 
            IContextNode * This,
            /* [in] */ const GUID *pPropertyDataId,
            /* [out] */ VARIANT_BOOL *pbContains);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetStrokes )( 
            IContextNode * This,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStrokeIds )( 
            IContextNode * This,
            /* [out][in] */ ULONG *pulStrokeIdsCount,
            /* [size_is][out] */ LONG **pplStrokes);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStrokeCount )( 
            IContextNode * This,
            /* [out] */ ULONG *pulStrokeCount);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStrokePacketDataById )( 
            IContextNode * This,
            /* [in] */ LONG strokeId,
            /* [out][in] */ ULONG *pStrokePacketDataCount,
            /* [size_is][out] */ LONG **pplStrokePacketData);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStrokePacketDescriptionById )( 
            IContextNode * This,
            /* [in] */ LONG lStrokeId,
            /* [out][in] */ ULONG *pulStrokePacketDescriptionCount,
            /* [size_is][out] */ GUID **ppStrokePacketDescriptionGuids);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveSubNodeToPosition )( 
            IContextNode * This,
            /* [in] */ IContextNode *pSubnodeToMove,
            /* [in] */ ULONG ulNewIndex);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ReparentStrokesByIdToNode )( 
            IContextNode * This,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [in] */ IContextNode *pContextNodeDestination);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Confirm )( 
            IContextNode * This,
            /* [in] */ ConfirmationType confirmedType);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsConfirmed )( 
            IContextNode * This,
            /* [in] */ ConfirmationType confirmedType,
            /* [out] */ VARIANT_BOOL *pfTypeConfirmed);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetContextLinks )( 
            IContextNode * This,
            /* [out] */ IContextLinks **ppContextLinks);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsAlternateStringSupported )( 
            IContextNode * This,
            /* [in] */ BSTR bstrAlternateString,
            /* [out] */ VARIANT_BOOL *pfIsSupported);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsStringSupported )( 
            IContextNode * This,
            /* [retval][out] */ VARIANT_BOOL *pfIsSupported);
        
        END_INTERFACE
    } IContextNodeVtbl;

    interface IContextNode
    {
        CONST_VTBL struct IContextNodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContextNode_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IContextNode_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IContextNode_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IContextNode_GetId(This,pId)	\
    (This)->lpVtbl -> GetId(This,pId)

#define IContextNode_GetType(This,pContextNodeType)	\
    (This)->lpVtbl -> GetType(This,pContextNodeType)

#define IContextNode_GetLocation(This,ppIAnalysisRegion)	\
    (This)->lpVtbl -> GetLocation(This,ppIAnalysisRegion)

#define IContextNode_GetTypeName(This,pbstrContextNodeType)	\
    (This)->lpVtbl -> GetTypeName(This,pbstrContextNodeType)

#define IContextNode_SetLocation(This,pIAnalysisRegion)	\
    (This)->lpVtbl -> SetLocation(This,pIAnalysisRegion)

#define IContextNode_GetParentNode(This,ppParentContextNode)	\
    (This)->lpVtbl -> GetParentNode(This,ppParentContextNode)

#define IContextNode_Reparent(This,pNewParent)	\
    (This)->lpVtbl -> Reparent(This,pNewParent)

#define IContextNode_GetSubNodes(This,ppSubContextNodes)	\
    (This)->lpVtbl -> GetSubNodes(This,ppSubContextNodes)

#define IContextNode_CreateSubNode(This,pNodeType,ppContextNodeCreated)	\
    (This)->lpVtbl -> CreateSubNode(This,pNodeType,ppContextNodeCreated)

#define IContextNode_CreatePartiallyPopulatedSubNode(This,pNodeType,pNodeId,pNodeLocation,ppPartiallyPopulatedContextNodeCreated)	\
    (This)->lpVtbl -> CreatePartiallyPopulatedSubNode(This,pNodeType,pNodeId,pNodeLocation,ppPartiallyPopulatedContextNodeCreated)

#define IContextNode_GetPartiallyPopulated(This,pfPartiallyPopulated)	\
    (This)->lpVtbl -> GetPartiallyPopulated(This,pfPartiallyPopulated)

#define IContextNode_SetPartiallyPopulated(This,fPartiallyPopulated)	\
    (This)->lpVtbl -> SetPartiallyPopulated(This,fPartiallyPopulated)

#define IContextNode_LoadPropertiesData(This,cbPropertiesDataSize,pbPropertiesData,pfSuccessful)	\
    (This)->lpVtbl -> LoadPropertiesData(This,cbPropertiesDataSize,pbPropertiesData,pfSuccessful)

#define IContextNode_SavePropertiesData(This,pulPropertiesDataSize,ppbPropertiesData)	\
    (This)->lpVtbl -> SavePropertiesData(This,pulPropertiesDataSize,ppbPropertiesData)

#define IContextNode_DeleteSubNode(This,pContextNodeToDelete)	\
    (This)->lpVtbl -> DeleteSubNode(This,pContextNodeToDelete)

#define IContextNode_AddPropertyData(This,pPropertyDataId,ulPropertyDataSize,pbPropertyData)	\
    (This)->lpVtbl -> AddPropertyData(This,pPropertyDataId,ulPropertyDataSize,pbPropertyData)

#define IContextNode_GetPropertyData(This,pPropertyDataId,pulPropertyDataSize,ppbPropertyData)	\
    (This)->lpVtbl -> GetPropertyData(This,pPropertyDataId,pulPropertyDataSize,ppbPropertyData)

#define IContextNode_RemovePropertyData(This,pPropertyDataId)	\
    (This)->lpVtbl -> RemovePropertyData(This,pPropertyDataId)

#define IContextNode_GetPropertyDataIds(This,pulGuidCount,ppGuids)	\
    (This)->lpVtbl -> GetPropertyDataIds(This,pulGuidCount,ppGuids)

#define IContextNode_ContainsPropertyData(This,pPropertyDataId,pbContains)	\
    (This)->lpVtbl -> ContainsPropertyData(This,pPropertyDataId,pbContains)

#define IContextNode_SetStrokes(This,ulStrokeIdsCount,plStrokeIds)	\
    (This)->lpVtbl -> SetStrokes(This,ulStrokeIdsCount,plStrokeIds)

#define IContextNode_GetStrokeIds(This,pulStrokeIdsCount,pplStrokes)	\
    (This)->lpVtbl -> GetStrokeIds(This,pulStrokeIdsCount,pplStrokes)

#define IContextNode_GetStrokeCount(This,pulStrokeCount)	\
    (This)->lpVtbl -> GetStrokeCount(This,pulStrokeCount)

#define IContextNode_GetStrokePacketDataById(This,strokeId,pStrokePacketDataCount,pplStrokePacketData)	\
    (This)->lpVtbl -> GetStrokePacketDataById(This,strokeId,pStrokePacketDataCount,pplStrokePacketData)

#define IContextNode_GetStrokePacketDescriptionById(This,lStrokeId,pulStrokePacketDescriptionCount,ppStrokePacketDescriptionGuids)	\
    (This)->lpVtbl -> GetStrokePacketDescriptionById(This,lStrokeId,pulStrokePacketDescriptionCount,ppStrokePacketDescriptionGuids)

#define IContextNode_MoveSubNodeToPosition(This,pSubnodeToMove,ulNewIndex)	\
    (This)->lpVtbl -> MoveSubNodeToPosition(This,pSubnodeToMove,ulNewIndex)

#define IContextNode_ReparentStrokesByIdToNode(This,ulStrokeIdsCount,plStrokeIds,pContextNodeDestination)	\
    (This)->lpVtbl -> ReparentStrokesByIdToNode(This,ulStrokeIdsCount,plStrokeIds,pContextNodeDestination)

#define IContextNode_Confirm(This,confirmedType)	\
    (This)->lpVtbl -> Confirm(This,confirmedType)

#define IContextNode_IsConfirmed(This,confirmedType,pfTypeConfirmed)	\
    (This)->lpVtbl -> IsConfirmed(This,confirmedType,pfTypeConfirmed)

#define IContextNode_GetContextLinks(This,ppContextLinks)	\
    (This)->lpVtbl -> GetContextLinks(This,ppContextLinks)

#define IContextNode_IsAlternateStringSupported(This,bstrAlternateString,pfIsSupported)	\
    (This)->lpVtbl -> IsAlternateStringSupported(This,bstrAlternateString,pfIsSupported)

#define IContextNode_IsStringSupported(This,pfIsSupported)	\
    (This)->lpVtbl -> IsStringSupported(This,pfIsSupported)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetId_Proxy( 
    IContextNode * This,
    /* [out] */ GUID *pId);


void __RPC_STUB IContextNode_GetId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetType_Proxy( 
    IContextNode * This,
    /* [out] */ GUID *pContextNodeType);


void __RPC_STUB IContextNode_GetType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetLocation_Proxy( 
    IContextNode * This,
    /* [out] */ IAnalysisRegion **ppIAnalysisRegion);


void __RPC_STUB IContextNode_GetLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetTypeName_Proxy( 
    IContextNode * This,
    /* [out] */ BSTR *pbstrContextNodeType);


void __RPC_STUB IContextNode_GetTypeName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_SetLocation_Proxy( 
    IContextNode * This,
    /* [in] */ IAnalysisRegion *pIAnalysisRegion);


void __RPC_STUB IContextNode_SetLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetParentNode_Proxy( 
    IContextNode * This,
    /* [out] */ IContextNode **ppParentContextNode);


void __RPC_STUB IContextNode_GetParentNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_Reparent_Proxy( 
    IContextNode * This,
    /* [in] */ IContextNode *pNewParent);


void __RPC_STUB IContextNode_Reparent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetSubNodes_Proxy( 
    IContextNode * This,
    /* [out] */ IContextNodes **ppSubContextNodes);


void __RPC_STUB IContextNode_GetSubNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_CreateSubNode_Proxy( 
    IContextNode * This,
    /* [in] */ const GUID *pNodeType,
    /* [out] */ IContextNode **ppContextNodeCreated);


void __RPC_STUB IContextNode_CreateSubNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_CreatePartiallyPopulatedSubNode_Proxy( 
    IContextNode * This,
    /* [in] */ const GUID *pNodeType,
    /* [in] */ const GUID *pNodeId,
    /* [in] */ IAnalysisRegion *pNodeLocation,
    /* [out] */ IContextNode **ppPartiallyPopulatedContextNodeCreated);


void __RPC_STUB IContextNode_CreatePartiallyPopulatedSubNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetPartiallyPopulated_Proxy( 
    IContextNode * This,
    /* [out] */ VARIANT_BOOL *pfPartiallyPopulated);


void __RPC_STUB IContextNode_GetPartiallyPopulated_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_SetPartiallyPopulated_Proxy( 
    IContextNode * This,
    /* [in] */ VARIANT_BOOL fPartiallyPopulated);


void __RPC_STUB IContextNode_SetPartiallyPopulated_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_LoadPropertiesData_Proxy( 
    IContextNode * This,
    /* [in] */ ULONG cbPropertiesDataSize,
    /* [size_is][in] */ BYTE *pbPropertiesData,
    /* [out] */ VARIANT_BOOL *pfSuccessful);


void __RPC_STUB IContextNode_LoadPropertiesData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_SavePropertiesData_Proxy( 
    IContextNode * This,
    /* [out][in] */ ULONG *pulPropertiesDataSize,
    /* [size_is][out] */ BYTE **ppbPropertiesData);


void __RPC_STUB IContextNode_SavePropertiesData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_DeleteSubNode_Proxy( 
    IContextNode * This,
    /* [in] */ IContextNode *pContextNodeToDelete);


void __RPC_STUB IContextNode_DeleteSubNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_AddPropertyData_Proxy( 
    IContextNode * This,
    /* [in] */ const GUID *pPropertyDataId,
    /* [in] */ ULONG ulPropertyDataSize,
    /* [size_is][in] */ BYTE *pbPropertyData);


void __RPC_STUB IContextNode_AddPropertyData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetPropertyData_Proxy( 
    IContextNode * This,
    /* [in] */ const GUID *pPropertyDataId,
    /* [out][in] */ ULONG *pulPropertyDataSize,
    /* [size_is][out] */ BYTE **ppbPropertyData);


void __RPC_STUB IContextNode_GetPropertyData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_RemovePropertyData_Proxy( 
    IContextNode * This,
    /* [in] */ const GUID *pPropertyDataId);


void __RPC_STUB IContextNode_RemovePropertyData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetPropertyDataIds_Proxy( 
    IContextNode * This,
    /* [out][in] */ ULONG *pulGuidCount,
    /* [size_is][out] */ GUID **ppGuids);


void __RPC_STUB IContextNode_GetPropertyDataIds_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_ContainsPropertyData_Proxy( 
    IContextNode * This,
    /* [in] */ const GUID *pPropertyDataId,
    /* [out] */ VARIANT_BOOL *pbContains);


void __RPC_STUB IContextNode_ContainsPropertyData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_SetStrokes_Proxy( 
    IContextNode * This,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plStrokeIds);


void __RPC_STUB IContextNode_SetStrokes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetStrokeIds_Proxy( 
    IContextNode * This,
    /* [out][in] */ ULONG *pulStrokeIdsCount,
    /* [size_is][out] */ LONG **pplStrokes);


void __RPC_STUB IContextNode_GetStrokeIds_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetStrokeCount_Proxy( 
    IContextNode * This,
    /* [out] */ ULONG *pulStrokeCount);


void __RPC_STUB IContextNode_GetStrokeCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetStrokePacketDataById_Proxy( 
    IContextNode * This,
    /* [in] */ LONG strokeId,
    /* [out][in] */ ULONG *pStrokePacketDataCount,
    /* [size_is][out] */ LONG **pplStrokePacketData);


void __RPC_STUB IContextNode_GetStrokePacketDataById_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetStrokePacketDescriptionById_Proxy( 
    IContextNode * This,
    /* [in] */ LONG lStrokeId,
    /* [out][in] */ ULONG *pulStrokePacketDescriptionCount,
    /* [size_is][out] */ GUID **ppStrokePacketDescriptionGuids);


void __RPC_STUB IContextNode_GetStrokePacketDescriptionById_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_MoveSubNodeToPosition_Proxy( 
    IContextNode * This,
    /* [in] */ IContextNode *pSubnodeToMove,
    /* [in] */ ULONG ulNewIndex);


void __RPC_STUB IContextNode_MoveSubNodeToPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_ReparentStrokesByIdToNode_Proxy( 
    IContextNode * This,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plStrokeIds,
    /* [in] */ IContextNode *pContextNodeDestination);


void __RPC_STUB IContextNode_ReparentStrokesByIdToNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_Confirm_Proxy( 
    IContextNode * This,
    /* [in] */ ConfirmationType confirmedType);


void __RPC_STUB IContextNode_Confirm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_IsConfirmed_Proxy( 
    IContextNode * This,
    /* [in] */ ConfirmationType confirmedType,
    /* [out] */ VARIANT_BOOL *pfTypeConfirmed);


void __RPC_STUB IContextNode_IsConfirmed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_GetContextLinks_Proxy( 
    IContextNode * This,
    /* [out] */ IContextLinks **ppContextLinks);


void __RPC_STUB IContextNode_GetContextLinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_IsAlternateStringSupported_Proxy( 
    IContextNode * This,
    /* [in] */ BSTR bstrAlternateString,
    /* [out] */ VARIANT_BOOL *pfIsSupported);


void __RPC_STUB IContextNode_IsAlternateStringSupported_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNode_IsStringSupported_Proxy( 
    IContextNode * This,
    /* [retval][out] */ VARIANT_BOOL *pfIsSupported);


void __RPC_STUB IContextNode_IsStringSupported_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IContextNode_INTERFACE_DEFINED__ */


#ifndef __IContextNodes_INTERFACE_DEFINED__
#define __IContextNodes_INTERFACE_DEFINED__

/* interface IContextNodes */
/* [object][unique][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID_IContextNodes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23A56238-A883-4393-B539-8C1E2996B7A2")
    IContextNodes : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pulCount) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetContextNode( 
            /* [in] */ ULONG ulIndex,
            /* [out] */ IContextNode **ppContextNode) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE AddContextNode( 
            /* [in] */ IContextNode *pContextNode) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE RemoveContextNode( 
            /* [in] */ IContextNode *pContextNode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContextNodesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IContextNodes * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IContextNodes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IContextNodes * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IContextNodes * This,
            /* [out] */ ULONG *pulCount);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetContextNode )( 
            IContextNodes * This,
            /* [in] */ ULONG ulIndex,
            /* [out] */ IContextNode **ppContextNode);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddContextNode )( 
            IContextNodes * This,
            /* [in] */ IContextNode *pContextNode);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveContextNode )( 
            IContextNodes * This,
            /* [in] */ IContextNode *pContextNode);
        
        END_INTERFACE
    } IContextNodesVtbl;

    interface IContextNodes
    {
        CONST_VTBL struct IContextNodesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContextNodes_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IContextNodes_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IContextNodes_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IContextNodes_GetCount(This,pulCount)	\
    (This)->lpVtbl -> GetCount(This,pulCount)

#define IContextNodes_GetContextNode(This,ulIndex,ppContextNode)	\
    (This)->lpVtbl -> GetContextNode(This,ulIndex,ppContextNode)

#define IContextNodes_AddContextNode(This,pContextNode)	\
    (This)->lpVtbl -> AddContextNode(This,pContextNode)

#define IContextNodes_RemoveContextNode(This,pContextNode)	\
    (This)->lpVtbl -> RemoveContextNode(This,pContextNode)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNodes_GetCount_Proxy( 
    IContextNodes * This,
    /* [out] */ ULONG *pulCount);


void __RPC_STUB IContextNodes_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNodes_GetContextNode_Proxy( 
    IContextNodes * This,
    /* [in] */ ULONG ulIndex,
    /* [out] */ IContextNode **ppContextNode);


void __RPC_STUB IContextNodes_GetContextNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNodes_AddContextNode_Proxy( 
    IContextNodes * This,
    /* [in] */ IContextNode *pContextNode);


void __RPC_STUB IContextNodes_AddContextNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextNodes_RemoveContextNode_Proxy( 
    IContextNodes * This,
    /* [in] */ IContextNode *pContextNode);


void __RPC_STUB IContextNodes_RemoveContextNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IContextNodes_INTERFACE_DEFINED__ */


#ifndef __IAnalysisRegion_INTERFACE_DEFINED__
#define __IAnalysisRegion_INTERFACE_DEFINED__

/* interface IAnalysisRegion */
/* [unique][uuid][helpcontext][helpstring][object] */ 


EXTERN_C const IID IID_IAnalysisRegion;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F76EBC66-ABEF-3248-AE9B-F20D4B9149FE")
    IAnalysisRegion : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IsEmpty( 
            /* [out] */ VARIANT_BOOL *pfIsEmpty) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE MakeEmpty( void) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE MakeInfinite( void) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IsInfinite( 
            /* [out] */ VARIANT_BOOL *pfIsInfinite) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IAnalysisRegion **pClonedRegion) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetRegionScans( 
            /* [out] */ ULONG *pulRectCount,
            /* [out] */ RECT **pRegionScans) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE UnionRectangle( 
            /* [in] */ RECT *pRectangle) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE UnionRegion( 
            /* [in] */ IAnalysisRegion *pRegionToUnion) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetBounds( 
            /* [out] */ RECT *pBoundingRectangle) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IntersectRectangle( 
            /* [in] */ RECT *pIntersectingRectangle) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IntersectRegion( 
            /* [in] */ IAnalysisRegion *pRegionToIntersect) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IntersectsWith( 
            /* [in] */ RECT *pRectangle,
            /* [out] */ VARIANT_BOOL *pfIsIntersecting) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ExcludeRectangle( 
            /* [in] */ RECT *pExcludingRectangle) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ExcludeRegion( 
            /* [in] */ IAnalysisRegion *pRegionToExclude) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE EqualsRegion( 
            /* [in] */ IAnalysisRegion *pOtherRegion,
            /* [out] */ VARIANT_BOOL *pfRegionsEqual) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnalysisRegionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAnalysisRegion * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAnalysisRegion * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAnalysisRegion * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsEmpty )( 
            IAnalysisRegion * This,
            /* [out] */ VARIANT_BOOL *pfIsEmpty);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *MakeEmpty )( 
            IAnalysisRegion * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *MakeInfinite )( 
            IAnalysisRegion * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsInfinite )( 
            IAnalysisRegion * This,
            /* [out] */ VARIANT_BOOL *pfIsInfinite);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IAnalysisRegion * This,
            /* [out] */ IAnalysisRegion **pClonedRegion);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetRegionScans )( 
            IAnalysisRegion * This,
            /* [out] */ ULONG *pulRectCount,
            /* [out] */ RECT **pRegionScans);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *UnionRectangle )( 
            IAnalysisRegion * This,
            /* [in] */ RECT *pRectangle);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *UnionRegion )( 
            IAnalysisRegion * This,
            /* [in] */ IAnalysisRegion *pRegionToUnion);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetBounds )( 
            IAnalysisRegion * This,
            /* [out] */ RECT *pBoundingRectangle);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *IntersectRectangle )( 
            IAnalysisRegion * This,
            /* [in] */ RECT *pIntersectingRectangle);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *IntersectRegion )( 
            IAnalysisRegion * This,
            /* [in] */ IAnalysisRegion *pRegionToIntersect);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *IntersectsWith )( 
            IAnalysisRegion * This,
            /* [in] */ RECT *pRectangle,
            /* [out] */ VARIANT_BOOL *pfIsIntersecting);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ExcludeRectangle )( 
            IAnalysisRegion * This,
            /* [in] */ RECT *pExcludingRectangle);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ExcludeRegion )( 
            IAnalysisRegion * This,
            /* [in] */ IAnalysisRegion *pRegionToExclude);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *EqualsRegion )( 
            IAnalysisRegion * This,
            /* [in] */ IAnalysisRegion *pOtherRegion,
            /* [out] */ VARIANT_BOOL *pfRegionsEqual);
        
        END_INTERFACE
    } IAnalysisRegionVtbl;

    interface IAnalysisRegion
    {
        CONST_VTBL struct IAnalysisRegionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnalysisRegion_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAnalysisRegion_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAnalysisRegion_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAnalysisRegion_IsEmpty(This,pfIsEmpty)	\
    (This)->lpVtbl -> IsEmpty(This,pfIsEmpty)

#define IAnalysisRegion_MakeEmpty(This)	\
    (This)->lpVtbl -> MakeEmpty(This)

#define IAnalysisRegion_MakeInfinite(This)	\
    (This)->lpVtbl -> MakeInfinite(This)

#define IAnalysisRegion_IsInfinite(This,pfIsInfinite)	\
    (This)->lpVtbl -> IsInfinite(This,pfIsInfinite)

#define IAnalysisRegion_Clone(This,pClonedRegion)	\
    (This)->lpVtbl -> Clone(This,pClonedRegion)

#define IAnalysisRegion_GetRegionScans(This,pulRectCount,pRegionScans)	\
    (This)->lpVtbl -> GetRegionScans(This,pulRectCount,pRegionScans)

#define IAnalysisRegion_UnionRectangle(This,pRectangle)	\
    (This)->lpVtbl -> UnionRectangle(This,pRectangle)

#define IAnalysisRegion_UnionRegion(This,pRegionToUnion)	\
    (This)->lpVtbl -> UnionRegion(This,pRegionToUnion)

#define IAnalysisRegion_GetBounds(This,pBoundingRectangle)	\
    (This)->lpVtbl -> GetBounds(This,pBoundingRectangle)

#define IAnalysisRegion_IntersectRectangle(This,pIntersectingRectangle)	\
    (This)->lpVtbl -> IntersectRectangle(This,pIntersectingRectangle)

#define IAnalysisRegion_IntersectRegion(This,pRegionToIntersect)	\
    (This)->lpVtbl -> IntersectRegion(This,pRegionToIntersect)

#define IAnalysisRegion_IntersectsWith(This,pRectangle,pfIsIntersecting)	\
    (This)->lpVtbl -> IntersectsWith(This,pRectangle,pfIsIntersecting)

#define IAnalysisRegion_ExcludeRectangle(This,pExcludingRectangle)	\
    (This)->lpVtbl -> ExcludeRectangle(This,pExcludingRectangle)

#define IAnalysisRegion_ExcludeRegion(This,pRegionToExclude)	\
    (This)->lpVtbl -> ExcludeRegion(This,pRegionToExclude)

#define IAnalysisRegion_EqualsRegion(This,pOtherRegion,pfRegionsEqual)	\
    (This)->lpVtbl -> EqualsRegion(This,pOtherRegion,pfRegionsEqual)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_IsEmpty_Proxy( 
    IAnalysisRegion * This,
    /* [out] */ VARIANT_BOOL *pfIsEmpty);


void __RPC_STUB IAnalysisRegion_IsEmpty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_MakeEmpty_Proxy( 
    IAnalysisRegion * This);


void __RPC_STUB IAnalysisRegion_MakeEmpty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_MakeInfinite_Proxy( 
    IAnalysisRegion * This);


void __RPC_STUB IAnalysisRegion_MakeInfinite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_IsInfinite_Proxy( 
    IAnalysisRegion * This,
    /* [out] */ VARIANT_BOOL *pfIsInfinite);


void __RPC_STUB IAnalysisRegion_IsInfinite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_Clone_Proxy( 
    IAnalysisRegion * This,
    /* [out] */ IAnalysisRegion **pClonedRegion);


void __RPC_STUB IAnalysisRegion_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_GetRegionScans_Proxy( 
    IAnalysisRegion * This,
    /* [out] */ ULONG *pulRectCount,
    /* [out] */ RECT **pRegionScans);


void __RPC_STUB IAnalysisRegion_GetRegionScans_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_UnionRectangle_Proxy( 
    IAnalysisRegion * This,
    /* [in] */ RECT *pRectangle);


void __RPC_STUB IAnalysisRegion_UnionRectangle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_UnionRegion_Proxy( 
    IAnalysisRegion * This,
    /* [in] */ IAnalysisRegion *pRegionToUnion);


void __RPC_STUB IAnalysisRegion_UnionRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_GetBounds_Proxy( 
    IAnalysisRegion * This,
    /* [out] */ RECT *pBoundingRectangle);


void __RPC_STUB IAnalysisRegion_GetBounds_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_IntersectRectangle_Proxy( 
    IAnalysisRegion * This,
    /* [in] */ RECT *pIntersectingRectangle);


void __RPC_STUB IAnalysisRegion_IntersectRectangle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_IntersectRegion_Proxy( 
    IAnalysisRegion * This,
    /* [in] */ IAnalysisRegion *pRegionToIntersect);


void __RPC_STUB IAnalysisRegion_IntersectRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_IntersectsWith_Proxy( 
    IAnalysisRegion * This,
    /* [in] */ RECT *pRectangle,
    /* [out] */ VARIANT_BOOL *pfIsIntersecting);


void __RPC_STUB IAnalysisRegion_IntersectsWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_ExcludeRectangle_Proxy( 
    IAnalysisRegion * This,
    /* [in] */ RECT *pExcludingRectangle);


void __RPC_STUB IAnalysisRegion_ExcludeRectangle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_ExcludeRegion_Proxy( 
    IAnalysisRegion * This,
    /* [in] */ IAnalysisRegion *pRegionToExclude);


void __RPC_STUB IAnalysisRegion_ExcludeRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisRegion_EqualsRegion_Proxy( 
    IAnalysisRegion * This,
    /* [in] */ IAnalysisRegion *pOtherRegion,
    /* [out] */ VARIANT_BOOL *pfRegionsEqual);


void __RPC_STUB IAnalysisRegion_EqualsRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAnalysisRegion_INTERFACE_DEFINED__ */


#ifndef __IContextLink_INTERFACE_DEFINED__
#define __IContextLink_INTERFACE_DEFINED__

/* interface IContextLink */
/* [object][unique][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID_IContextLink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("715389A8-84B1-3B52-98FC-E2CCCD27D4B9")
    IContextLink : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetDestinationNode( 
            /* [out] */ IContextNode **ppDstContextNodeId) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetSourceNode( 
            /* [out] */ IContextNode **ppSrcContextNodeId) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetContextLinkDirection( 
            /* [out] */ ContextLinkDirection *pContextLinkDirection) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContextLinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IContextLink * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IContextLink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IContextLink * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDestinationNode )( 
            IContextLink * This,
            /* [out] */ IContextNode **ppDstContextNodeId);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSourceNode )( 
            IContextLink * This,
            /* [out] */ IContextNode **ppSrcContextNodeId);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetContextLinkDirection )( 
            IContextLink * This,
            /* [out] */ ContextLinkDirection *pContextLinkDirection);
        
        END_INTERFACE
    } IContextLinkVtbl;

    interface IContextLink
    {
        CONST_VTBL struct IContextLinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContextLink_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IContextLink_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IContextLink_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IContextLink_GetDestinationNode(This,ppDstContextNodeId)	\
    (This)->lpVtbl -> GetDestinationNode(This,ppDstContextNodeId)

#define IContextLink_GetSourceNode(This,ppSrcContextNodeId)	\
    (This)->lpVtbl -> GetSourceNode(This,ppSrcContextNodeId)

#define IContextLink_GetContextLinkDirection(This,pContextLinkDirection)	\
    (This)->lpVtbl -> GetContextLinkDirection(This,pContextLinkDirection)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextLink_GetDestinationNode_Proxy( 
    IContextLink * This,
    /* [out] */ IContextNode **ppDstContextNodeId);


void __RPC_STUB IContextLink_GetDestinationNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextLink_GetSourceNode_Proxy( 
    IContextLink * This,
    /* [out] */ IContextNode **ppSrcContextNodeId);


void __RPC_STUB IContextLink_GetSourceNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextLink_GetContextLinkDirection_Proxy( 
    IContextLink * This,
    /* [out] */ ContextLinkDirection *pContextLinkDirection);


void __RPC_STUB IContextLink_GetContextLinkDirection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IContextLink_INTERFACE_DEFINED__ */


#ifndef __IContextLinks_INTERFACE_DEFINED__
#define __IContextLinks_INTERFACE_DEFINED__

/* interface IContextLinks */
/* [object][unique][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID_IContextLinks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2914EB5A-8B3D-4381-A733-1509A2295394")
    IContextLinks : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pulCount) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetContextLink( 
            /* [in] */ ULONG ulIndex,
            /* [out] */ IContextLink **ppContextLink) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE AddContextLink( 
            /* [in] */ IContextNode *pDestinationNode,
            /* [in] */ ContextLinkDirection linkDirection,
            /* [out] */ IContextLink **ppContextLinkToAdd) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE DeleteContextLink( 
            /* [in] */ IContextLink *pContextLinkToDelete) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContextLinksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IContextLinks * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IContextLinks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IContextLinks * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IContextLinks * This,
            /* [out] */ ULONG *pulCount);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetContextLink )( 
            IContextLinks * This,
            /* [in] */ ULONG ulIndex,
            /* [out] */ IContextLink **ppContextLink);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddContextLink )( 
            IContextLinks * This,
            /* [in] */ IContextNode *pDestinationNode,
            /* [in] */ ContextLinkDirection linkDirection,
            /* [out] */ IContextLink **ppContextLinkToAdd);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteContextLink )( 
            IContextLinks * This,
            /* [in] */ IContextLink *pContextLinkToDelete);
        
        END_INTERFACE
    } IContextLinksVtbl;

    interface IContextLinks
    {
        CONST_VTBL struct IContextLinksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContextLinks_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IContextLinks_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IContextLinks_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IContextLinks_GetCount(This,pulCount)	\
    (This)->lpVtbl -> GetCount(This,pulCount)

#define IContextLinks_GetContextLink(This,ulIndex,ppContextLink)	\
    (This)->lpVtbl -> GetContextLink(This,ulIndex,ppContextLink)

#define IContextLinks_AddContextLink(This,pDestinationNode,linkDirection,ppContextLinkToAdd)	\
    (This)->lpVtbl -> AddContextLink(This,pDestinationNode,linkDirection,ppContextLinkToAdd)

#define IContextLinks_DeleteContextLink(This,pContextLinkToDelete)	\
    (This)->lpVtbl -> DeleteContextLink(This,pContextLinkToDelete)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextLinks_GetCount_Proxy( 
    IContextLinks * This,
    /* [out] */ ULONG *pulCount);


void __RPC_STUB IContextLinks_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextLinks_GetContextLink_Proxy( 
    IContextLinks * This,
    /* [in] */ ULONG ulIndex,
    /* [out] */ IContextLink **ppContextLink);


void __RPC_STUB IContextLinks_GetContextLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextLinks_AddContextLink_Proxy( 
    IContextLinks * This,
    /* [in] */ IContextNode *pDestinationNode,
    /* [in] */ ContextLinkDirection linkDirection,
    /* [out] */ IContextLink **ppContextLinkToAdd);


void __RPC_STUB IContextLinks_AddContextLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IContextLinks_DeleteContextLink_Proxy( 
    IContextLinks * This,
    /* [in] */ IContextLink *pContextLinkToDelete);


void __RPC_STUB IContextLinks_DeleteContextLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IContextLinks_INTERFACE_DEFINED__ */


#ifndef __IInkAnalysisRecognizer_INTERFACE_DEFINED__
#define __IInkAnalysisRecognizer_INTERFACE_DEFINED__

/* interface IInkAnalysisRecognizer */
/* [object][unique][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID_IInkAnalysisRecognizer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BD5F33DF-BEBB-3D05-98AC-F0986D3BEF17")
    IInkAnalysisRecognizer : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetName( 
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetGuid( 
            /* [out] */ GUID *pId) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetVendor( 
            /* [out] */ BSTR *pbstrVendor) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetCapabilities( 
            /* [out] */ InkAnalysisRecognizerCapabilities *pCapabilities) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetSupportedProperties( 
            /* [out][in] */ ULONG *pulPropertiesCount,
            /* [size_is][out] */ GUID **ppProperties) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetLanguages( 
            /* [out][in] */ ULONG *pulLanguagesCount,
            /* [size_is][out] */ ULONG **ppulLanguages) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetUnicodeRanges( 
            /* [out][in] */ ULONG *pulNumberOfRanges,
            /* [size_is][out] */ WCHAR **ppulLowUnicode,
            /* [size_is][out] */ USHORT **ppusUnicodeRangeLength) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE SetAsHighestPriorityInkAnalysisRecognizer( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkAnalysisRecognizerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IInkAnalysisRecognizer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IInkAnalysisRecognizer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IInkAnalysisRecognizer * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IInkAnalysisRecognizer * This,
            /* [out] */ BSTR *pbstrName);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetGuid )( 
            IInkAnalysisRecognizer * This,
            /* [out] */ GUID *pId);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetVendor )( 
            IInkAnalysisRecognizer * This,
            /* [out] */ BSTR *pbstrVendor);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCapabilities )( 
            IInkAnalysisRecognizer * This,
            /* [out] */ InkAnalysisRecognizerCapabilities *pCapabilities);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSupportedProperties )( 
            IInkAnalysisRecognizer * This,
            /* [out][in] */ ULONG *pulPropertiesCount,
            /* [size_is][out] */ GUID **ppProperties);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetLanguages )( 
            IInkAnalysisRecognizer * This,
            /* [out][in] */ ULONG *pulLanguagesCount,
            /* [size_is][out] */ ULONG **ppulLanguages);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetUnicodeRanges )( 
            IInkAnalysisRecognizer * This,
            /* [out][in] */ ULONG *pulNumberOfRanges,
            /* [size_is][out] */ WCHAR **ppulLowUnicode,
            /* [size_is][out] */ USHORT **ppusUnicodeRangeLength);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetAsHighestPriorityInkAnalysisRecognizer )( 
            IInkAnalysisRecognizer * This);
        
        END_INTERFACE
    } IInkAnalysisRecognizerVtbl;

    interface IInkAnalysisRecognizer
    {
        CONST_VTBL struct IInkAnalysisRecognizerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkAnalysisRecognizer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IInkAnalysisRecognizer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IInkAnalysisRecognizer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IInkAnalysisRecognizer_GetName(This,pbstrName)	\
    (This)->lpVtbl -> GetName(This,pbstrName)

#define IInkAnalysisRecognizer_GetGuid(This,pId)	\
    (This)->lpVtbl -> GetGuid(This,pId)

#define IInkAnalysisRecognizer_GetVendor(This,pbstrVendor)	\
    (This)->lpVtbl -> GetVendor(This,pbstrVendor)

#define IInkAnalysisRecognizer_GetCapabilities(This,pCapabilities)	\
    (This)->lpVtbl -> GetCapabilities(This,pCapabilities)

#define IInkAnalysisRecognizer_GetSupportedProperties(This,pulPropertiesCount,ppProperties)	\
    (This)->lpVtbl -> GetSupportedProperties(This,pulPropertiesCount,ppProperties)

#define IInkAnalysisRecognizer_GetLanguages(This,pulLanguagesCount,ppulLanguages)	\
    (This)->lpVtbl -> GetLanguages(This,pulLanguagesCount,ppulLanguages)

#define IInkAnalysisRecognizer_GetUnicodeRanges(This,pulNumberOfRanges,ppulLowUnicode,ppusUnicodeRangeLength)	\
    (This)->lpVtbl -> GetUnicodeRanges(This,pulNumberOfRanges,ppulLowUnicode,ppusUnicodeRangeLength)

#define IInkAnalysisRecognizer_SetAsHighestPriorityInkAnalysisRecognizer(This)	\
    (This)->lpVtbl -> SetAsHighestPriorityInkAnalysisRecognizer(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalysisRecognizer_GetName_Proxy( 
    IInkAnalysisRecognizer * This,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IInkAnalysisRecognizer_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalysisRecognizer_GetGuid_Proxy( 
    IInkAnalysisRecognizer * This,
    /* [out] */ GUID *pId);


void __RPC_STUB IInkAnalysisRecognizer_GetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalysisRecognizer_GetVendor_Proxy( 
    IInkAnalysisRecognizer * This,
    /* [out] */ BSTR *pbstrVendor);


void __RPC_STUB IInkAnalysisRecognizer_GetVendor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalysisRecognizer_GetCapabilities_Proxy( 
    IInkAnalysisRecognizer * This,
    /* [out] */ InkAnalysisRecognizerCapabilities *pCapabilities);


void __RPC_STUB IInkAnalysisRecognizer_GetCapabilities_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalysisRecognizer_GetSupportedProperties_Proxy( 
    IInkAnalysisRecognizer * This,
    /* [out][in] */ ULONG *pulPropertiesCount,
    /* [size_is][out] */ GUID **ppProperties);


void __RPC_STUB IInkAnalysisRecognizer_GetSupportedProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalysisRecognizer_GetLanguages_Proxy( 
    IInkAnalysisRecognizer * This,
    /* [out][in] */ ULONG *pulLanguagesCount,
    /* [size_is][out] */ ULONG **ppulLanguages);


void __RPC_STUB IInkAnalysisRecognizer_GetLanguages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalysisRecognizer_GetUnicodeRanges_Proxy( 
    IInkAnalysisRecognizer * This,
    /* [out][in] */ ULONG *pulNumberOfRanges,
    /* [size_is][out] */ WCHAR **ppulLowUnicode,
    /* [size_is][out] */ USHORT **ppusUnicodeRangeLength);


void __RPC_STUB IInkAnalysisRecognizer_GetUnicodeRanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalysisRecognizer_SetAsHighestPriorityInkAnalysisRecognizer_Proxy( 
    IInkAnalysisRecognizer * This);


void __RPC_STUB IInkAnalysisRecognizer_SetAsHighestPriorityInkAnalysisRecognizer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IInkAnalysisRecognizer_INTERFACE_DEFINED__ */


#ifndef __IInkAnalysisRecognizers_INTERFACE_DEFINED__
#define __IInkAnalysisRecognizers_INTERFACE_DEFINED__

/* interface IInkAnalysisRecognizers */
/* [object][unique][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID_IInkAnalysisRecognizers;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7C3B2C8F-1ADD-309A-9201-22C6E0DDA633")
    IInkAnalysisRecognizers : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pulCount) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetInkAnalysisRecognizer( 
            /* [in] */ ULONG ulIndex,
            /* [out] */ IInkAnalysisRecognizer **ppInkAnalysisRecognizer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInkAnalysisRecognizersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IInkAnalysisRecognizers * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IInkAnalysisRecognizers * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IInkAnalysisRecognizers * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IInkAnalysisRecognizers * This,
            /* [out] */ ULONG *pulCount);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetInkAnalysisRecognizer )( 
            IInkAnalysisRecognizers * This,
            /* [in] */ ULONG ulIndex,
            /* [out] */ IInkAnalysisRecognizer **ppInkAnalysisRecognizer);
        
        END_INTERFACE
    } IInkAnalysisRecognizersVtbl;

    interface IInkAnalysisRecognizers
    {
        CONST_VTBL struct IInkAnalysisRecognizersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInkAnalysisRecognizers_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IInkAnalysisRecognizers_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IInkAnalysisRecognizers_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IInkAnalysisRecognizers_GetCount(This,pulCount)	\
    (This)->lpVtbl -> GetCount(This,pulCount)

#define IInkAnalysisRecognizers_GetInkAnalysisRecognizer(This,ulIndex,ppInkAnalysisRecognizer)	\
    (This)->lpVtbl -> GetInkAnalysisRecognizer(This,ulIndex,ppInkAnalysisRecognizer)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalysisRecognizers_GetCount_Proxy( 
    IInkAnalysisRecognizers * This,
    /* [out] */ ULONG *pulCount);


void __RPC_STUB IInkAnalysisRecognizers_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IInkAnalysisRecognizers_GetInkAnalysisRecognizer_Proxy( 
    IInkAnalysisRecognizers * This,
    /* [in] */ ULONG ulIndex,
    /* [out] */ IInkAnalysisRecognizer **ppInkAnalysisRecognizer);


void __RPC_STUB IInkAnalysisRecognizers_GetInkAnalysisRecognizer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IInkAnalysisRecognizers_INTERFACE_DEFINED__ */


#ifndef __IAnalysisAlternate_INTERFACE_DEFINED__
#define __IAnalysisAlternate_INTERFACE_DEFINED__

/* interface IAnalysisAlternate */
/* [object][unique][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID_IAnalysisAlternate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5DB42FCE-8FDE-3E45-8C4A-224C89034F02")
    IAnalysisAlternate : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetAlternateNodes( 
            /* [out] */ IContextNodes **ppAlternateNodes) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetRecognizedString( 
            /* [out] */ BSTR *pbstrRecognizedString) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetStrokeIds( 
            /* [out][in] */ ULONG *pulStrokeIdsCount,
            /* [size_is][out] */ LONG **pplStrokeIds) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetRecognitionConfidence( 
            /* [out] */ RecognitionConfidence *pConfidence) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnalysisAlternateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAnalysisAlternate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAnalysisAlternate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAnalysisAlternate * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAlternateNodes )( 
            IAnalysisAlternate * This,
            /* [out] */ IContextNodes **ppAlternateNodes);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetRecognizedString )( 
            IAnalysisAlternate * This,
            /* [out] */ BSTR *pbstrRecognizedString);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStrokeIds )( 
            IAnalysisAlternate * This,
            /* [out][in] */ ULONG *pulStrokeIdsCount,
            /* [size_is][out] */ LONG **pplStrokeIds);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetRecognitionConfidence )( 
            IAnalysisAlternate * This,
            /* [out] */ RecognitionConfidence *pConfidence);
        
        END_INTERFACE
    } IAnalysisAlternateVtbl;

    interface IAnalysisAlternate
    {
        CONST_VTBL struct IAnalysisAlternateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnalysisAlternate_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAnalysisAlternate_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAnalysisAlternate_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAnalysisAlternate_GetAlternateNodes(This,ppAlternateNodes)	\
    (This)->lpVtbl -> GetAlternateNodes(This,ppAlternateNodes)

#define IAnalysisAlternate_GetRecognizedString(This,pbstrRecognizedString)	\
    (This)->lpVtbl -> GetRecognizedString(This,pbstrRecognizedString)

#define IAnalysisAlternate_GetStrokeIds(This,pulStrokeIdsCount,pplStrokeIds)	\
    (This)->lpVtbl -> GetStrokeIds(This,pulStrokeIdsCount,pplStrokeIds)

#define IAnalysisAlternate_GetRecognitionConfidence(This,pConfidence)	\
    (This)->lpVtbl -> GetRecognitionConfidence(This,pConfidence)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisAlternate_GetAlternateNodes_Proxy( 
    IAnalysisAlternate * This,
    /* [out] */ IContextNodes **ppAlternateNodes);


void __RPC_STUB IAnalysisAlternate_GetAlternateNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisAlternate_GetRecognizedString_Proxy( 
    IAnalysisAlternate * This,
    /* [out] */ BSTR *pbstrRecognizedString);


void __RPC_STUB IAnalysisAlternate_GetRecognizedString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisAlternate_GetStrokeIds_Proxy( 
    IAnalysisAlternate * This,
    /* [out][in] */ ULONG *pulStrokeIdsCount,
    /* [size_is][out] */ LONG **pplStrokeIds);


void __RPC_STUB IAnalysisAlternate_GetStrokeIds_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisAlternate_GetRecognitionConfidence_Proxy( 
    IAnalysisAlternate * This,
    /* [out] */ RecognitionConfidence *pConfidence);


void __RPC_STUB IAnalysisAlternate_GetRecognitionConfidence_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAnalysisAlternate_INTERFACE_DEFINED__ */


#ifndef __IAnalysisAlternates_INTERFACE_DEFINED__
#define __IAnalysisAlternates_INTERFACE_DEFINED__

/* interface IAnalysisAlternates */
/* [object][unique][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID_IAnalysisAlternates;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4262DF99-1C25-3CF8-98CB-4528DE750F08")
    IAnalysisAlternates : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pulCount) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetAnalysisAlternate( 
            /* [in] */ ULONG ulIndex,
            /* [out] */ IAnalysisAlternate **ppAlternate) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnalysisAlternatesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAnalysisAlternates * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAnalysisAlternates * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAnalysisAlternates * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IAnalysisAlternates * This,
            /* [out] */ ULONG *pulCount);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAnalysisAlternate )( 
            IAnalysisAlternates * This,
            /* [in] */ ULONG ulIndex,
            /* [out] */ IAnalysisAlternate **ppAlternate);
        
        END_INTERFACE
    } IAnalysisAlternatesVtbl;

    interface IAnalysisAlternates
    {
        CONST_VTBL struct IAnalysisAlternatesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnalysisAlternates_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAnalysisAlternates_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAnalysisAlternates_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAnalysisAlternates_GetCount(This,pulCount)	\
    (This)->lpVtbl -> GetCount(This,pulCount)

#define IAnalysisAlternates_GetAnalysisAlternate(This,ulIndex,ppAlternate)	\
    (This)->lpVtbl -> GetAnalysisAlternate(This,ulIndex,ppAlternate)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisAlternates_GetCount_Proxy( 
    IAnalysisAlternates * This,
    /* [out] */ ULONG *pulCount);


void __RPC_STUB IAnalysisAlternates_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisAlternates_GetAnalysisAlternate_Proxy( 
    IAnalysisAlternates * This,
    /* [in] */ ULONG ulIndex,
    /* [out] */ IAnalysisAlternate **ppAlternate);


void __RPC_STUB IAnalysisAlternates_GetAnalysisAlternate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAnalysisAlternates_INTERFACE_DEFINED__ */


#ifndef __IAnalysisWarning_INTERFACE_DEFINED__
#define __IAnalysisWarning_INTERFACE_DEFINED__

/* interface IAnalysisWarning */
/* [object][unique][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID_IAnalysisWarning;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7BC3EF6-C944-33C5-8917-19BD3E0C8327")
    IAnalysisWarning : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetWarningCode( 
            /* [out] */ AnalysisWarningCode *pWarningCode) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetNodeIds( 
            /* [out][in] */ ULONG *pulNodeIdCount,
            /* [size_is][out] */ GUID **ppNodeIds) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetHint( 
            /* [out] */ IContextNode **pAnalysisHint) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetBackgroundError( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnalysisWarningVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAnalysisWarning * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAnalysisWarning * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAnalysisWarning * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetWarningCode )( 
            IAnalysisWarning * This,
            /* [out] */ AnalysisWarningCode *pWarningCode);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeIds )( 
            IAnalysisWarning * This,
            /* [out][in] */ ULONG *pulNodeIdCount,
            /* [size_is][out] */ GUID **ppNodeIds);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetHint )( 
            IAnalysisWarning * This,
            /* [out] */ IContextNode **pAnalysisHint);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetBackgroundError )( 
            IAnalysisWarning * This);
        
        END_INTERFACE
    } IAnalysisWarningVtbl;

    interface IAnalysisWarning
    {
        CONST_VTBL struct IAnalysisWarningVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnalysisWarning_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAnalysisWarning_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAnalysisWarning_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAnalysisWarning_GetWarningCode(This,pWarningCode)	\
    (This)->lpVtbl -> GetWarningCode(This,pWarningCode)

#define IAnalysisWarning_GetNodeIds(This,pulNodeIdCount,ppNodeIds)	\
    (This)->lpVtbl -> GetNodeIds(This,pulNodeIdCount,ppNodeIds)

#define IAnalysisWarning_GetHint(This,pAnalysisHint)	\
    (This)->lpVtbl -> GetHint(This,pAnalysisHint)

#define IAnalysisWarning_GetBackgroundError(This)	\
    (This)->lpVtbl -> GetBackgroundError(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisWarning_GetWarningCode_Proxy( 
    IAnalysisWarning * This,
    /* [out] */ AnalysisWarningCode *pWarningCode);


void __RPC_STUB IAnalysisWarning_GetWarningCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisWarning_GetNodeIds_Proxy( 
    IAnalysisWarning * This,
    /* [out][in] */ ULONG *pulNodeIdCount,
    /* [size_is][out] */ GUID **ppNodeIds);


void __RPC_STUB IAnalysisWarning_GetNodeIds_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisWarning_GetHint_Proxy( 
    IAnalysisWarning * This,
    /* [out] */ IContextNode **pAnalysisHint);


void __RPC_STUB IAnalysisWarning_GetHint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisWarning_GetBackgroundError_Proxy( 
    IAnalysisWarning * This);


void __RPC_STUB IAnalysisWarning_GetBackgroundError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAnalysisWarning_INTERFACE_DEFINED__ */


#ifndef __IAnalysisWarnings_INTERFACE_DEFINED__
#define __IAnalysisWarnings_INTERFACE_DEFINED__

/* interface IAnalysisWarnings */
/* [object][unique][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID_IAnalysisWarnings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("304ADA62-DEC1-35BF-84AE-A61BB846ADD7")
    IAnalysisWarnings : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pulCount) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetAnalysisWarning( 
            /* [in] */ ULONG ulIndex,
            /* [out] */ IAnalysisWarning **ppIAnalysisWarning) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnalysisWarningsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAnalysisWarnings * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAnalysisWarnings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAnalysisWarnings * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IAnalysisWarnings * This,
            /* [out] */ ULONG *pulCount);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAnalysisWarning )( 
            IAnalysisWarnings * This,
            /* [in] */ ULONG ulIndex,
            /* [out] */ IAnalysisWarning **ppIAnalysisWarning);
        
        END_INTERFACE
    } IAnalysisWarningsVtbl;

    interface IAnalysisWarnings
    {
        CONST_VTBL struct IAnalysisWarningsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnalysisWarnings_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAnalysisWarnings_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAnalysisWarnings_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAnalysisWarnings_GetCount(This,pulCount)	\
    (This)->lpVtbl -> GetCount(This,pulCount)

#define IAnalysisWarnings_GetAnalysisWarning(This,ulIndex,ppIAnalysisWarning)	\
    (This)->lpVtbl -> GetAnalysisWarning(This,ulIndex,ppIAnalysisWarning)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisWarnings_GetCount_Proxy( 
    IAnalysisWarnings * This,
    /* [out] */ ULONG *pulCount);


void __RPC_STUB IAnalysisWarnings_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisWarnings_GetAnalysisWarning_Proxy( 
    IAnalysisWarnings * This,
    /* [in] */ ULONG ulIndex,
    /* [out] */ IAnalysisWarning **ppIAnalysisWarning);


void __RPC_STUB IAnalysisWarnings_GetAnalysisWarning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAnalysisWarnings_INTERFACE_DEFINED__ */


#ifndef __IAnalysisStatus_INTERFACE_DEFINED__
#define __IAnalysisStatus_INTERFACE_DEFINED__

/* interface IAnalysisStatus */
/* [object][unique][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID_IAnalysisStatus;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8E16FC8B-F1DC-38C9-BB8F-7EF7B0D6C5AE")
    IAnalysisStatus : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IsSuccessful( 
            /* [out] */ VARIANT_BOOL *pfSuccessful) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetAppliedChangesRegion( 
            /* [out] */ IAnalysisRegion **pAppliedChangesRegion) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE GetWarnings( 
            /* [out] */ IAnalysisWarnings **ppAnalysisWarnings) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnalysisStatusVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAnalysisStatus * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAnalysisStatus * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAnalysisStatus * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsSuccessful )( 
            IAnalysisStatus * This,
            /* [out] */ VARIANT_BOOL *pfSuccessful);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAppliedChangesRegion )( 
            IAnalysisStatus * This,
            /* [out] */ IAnalysisRegion **pAppliedChangesRegion);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetWarnings )( 
            IAnalysisStatus * This,
            /* [out] */ IAnalysisWarnings **ppAnalysisWarnings);
        
        END_INTERFACE
    } IAnalysisStatusVtbl;

    interface IAnalysisStatus
    {
        CONST_VTBL struct IAnalysisStatusVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnalysisStatus_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAnalysisStatus_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAnalysisStatus_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAnalysisStatus_IsSuccessful(This,pfSuccessful)	\
    (This)->lpVtbl -> IsSuccessful(This,pfSuccessful)

#define IAnalysisStatus_GetAppliedChangesRegion(This,pAppliedChangesRegion)	\
    (This)->lpVtbl -> GetAppliedChangesRegion(This,pAppliedChangesRegion)

#define IAnalysisStatus_GetWarnings(This,ppAnalysisWarnings)	\
    (This)->lpVtbl -> GetWarnings(This,ppAnalysisWarnings)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisStatus_IsSuccessful_Proxy( 
    IAnalysisStatus * This,
    /* [out] */ VARIANT_BOOL *pfSuccessful);


void __RPC_STUB IAnalysisStatus_IsSuccessful_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisStatus_GetAppliedChangesRegion_Proxy( 
    IAnalysisStatus * This,
    /* [out] */ IAnalysisRegion **pAppliedChangesRegion);


void __RPC_STUB IAnalysisStatus_GetAppliedChangesRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IAnalysisStatus_GetWarnings_Proxy( 
    IAnalysisStatus * This,
    /* [out] */ IAnalysisWarnings **ppAnalysisWarnings);


void __RPC_STUB IAnalysisStatus_GetWarnings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAnalysisStatus_INTERFACE_DEFINED__ */


#ifndef __IMatchesCriteriaCallBack_INTERFACE_DEFINED__
#define __IMatchesCriteriaCallBack_INTERFACE_DEFINED__

/* interface IMatchesCriteriaCallBack */
/* [object][unique][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID_IMatchesCriteriaCallBack;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A11BEA2D-62F5-3DDC-AEFD-5BFED2ED43E9")
    IMatchesCriteriaCallBack : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE EvaluateContextNode( 
            /* [in] */ IContextNode *pContextNodeToEvaluate,
            /* [out] */ VARIANT_BOOL *pbResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMatchesCriteriaCallBackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMatchesCriteriaCallBack * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMatchesCriteriaCallBack * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMatchesCriteriaCallBack * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *EvaluateContextNode )( 
            IMatchesCriteriaCallBack * This,
            /* [in] */ IContextNode *pContextNodeToEvaluate,
            /* [out] */ VARIANT_BOOL *pbResult);
        
        END_INTERFACE
    } IMatchesCriteriaCallBackVtbl;

    interface IMatchesCriteriaCallBack
    {
        CONST_VTBL struct IMatchesCriteriaCallBackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMatchesCriteriaCallBack_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IMatchesCriteriaCallBack_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IMatchesCriteriaCallBack_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IMatchesCriteriaCallBack_EvaluateContextNode(This,pContextNodeToEvaluate,pbResult)	\
    (This)->lpVtbl -> EvaluateContextNode(This,pContextNodeToEvaluate,pbResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IMatchesCriteriaCallBack_EvaluateContextNode_Proxy( 
    IMatchesCriteriaCallBack * This,
    /* [in] */ IContextNode *pContextNodeToEvaluate,
    /* [out] */ VARIANT_BOOL *pbResult);


void __RPC_STUB IMatchesCriteriaCallBack_EvaluateContextNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMatchesCriteriaCallBack_INTERFACE_DEFINED__ */


#ifndef ___IAnalysisEvents_INTERFACE_DEFINED__
#define ___IAnalysisEvents_INTERFACE_DEFINED__

/* interface _IAnalysisEvents */
/* [object][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID__IAnalysisEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("67CCF9D3-FE75-338D-BB4B-FD0FF18C8258")
    _IAnalysisEvents : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ResultsUpdated( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IAnalysisStatus *pAnalysisStatus) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE IntermediateResultsUpdated( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IAnalysisStatus *pAnalysisStatus) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE Activity( void) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE UpdateStrokesCache( 
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ReadyToReconcile( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _IAnalysisEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IAnalysisEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IAnalysisEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IAnalysisEvents * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ResultsUpdated )( 
            _IAnalysisEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IAnalysisStatus *pAnalysisStatus);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *IntermediateResultsUpdated )( 
            _IAnalysisEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IAnalysisStatus *pAnalysisStatus);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *Activity )( 
            _IAnalysisEvents * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *UpdateStrokesCache )( 
            _IAnalysisEvents * This,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ReadyToReconcile )( 
            _IAnalysisEvents * This);
        
        END_INTERFACE
    } _IAnalysisEventsVtbl;

    interface _IAnalysisEvents
    {
        CONST_VTBL struct _IAnalysisEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IAnalysisEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _IAnalysisEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _IAnalysisEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _IAnalysisEvents_ResultsUpdated(This,pInkAnalyzer,pAnalysisStatus)	\
    (This)->lpVtbl -> ResultsUpdated(This,pInkAnalyzer,pAnalysisStatus)

#define _IAnalysisEvents_IntermediateResultsUpdated(This,pInkAnalyzer,pAnalysisStatus)	\
    (This)->lpVtbl -> IntermediateResultsUpdated(This,pInkAnalyzer,pAnalysisStatus)

#define _IAnalysisEvents_Activity(This)	\
    (This)->lpVtbl -> Activity(This)

#define _IAnalysisEvents_UpdateStrokesCache(This,ulStrokeIdsCount,plStrokeIds)	\
    (This)->lpVtbl -> UpdateStrokesCache(This,ulStrokeIdsCount,plStrokeIds)

#define _IAnalysisEvents_ReadyToReconcile(This)	\
    (This)->lpVtbl -> ReadyToReconcile(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisEvents_ResultsUpdated_Proxy( 
    _IAnalysisEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer,
    /* [in] */ IAnalysisStatus *pAnalysisStatus);


void __RPC_STUB _IAnalysisEvents_ResultsUpdated_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisEvents_IntermediateResultsUpdated_Proxy( 
    _IAnalysisEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer,
    /* [in] */ IAnalysisStatus *pAnalysisStatus);


void __RPC_STUB _IAnalysisEvents_IntermediateResultsUpdated_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisEvents_Activity_Proxy( 
    _IAnalysisEvents * This);


void __RPC_STUB _IAnalysisEvents_Activity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisEvents_UpdateStrokesCache_Proxy( 
    _IAnalysisEvents * This,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plStrokeIds);


void __RPC_STUB _IAnalysisEvents_UpdateStrokesCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisEvents_ReadyToReconcile_Proxy( 
    _IAnalysisEvents * This);


void __RPC_STUB _IAnalysisEvents_ReadyToReconcile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___IAnalysisEvents_INTERFACE_DEFINED__ */


#ifndef ___IAnalysisProxyEvents_INTERFACE_DEFINED__
#define ___IAnalysisProxyEvents_INTERFACE_DEFINED__

/* interface _IAnalysisProxyEvents */
/* [object][uuid][helpcontext][helpstring] */ 


EXTERN_C const IID IID__IAnalysisProxyEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("70049599-2E75-3FEC-A597-C8191105F4FB")
    _IAnalysisProxyEvents : public IUnknown
    {
    public:
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE InkAnalyzerStateChanging( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ContextNodePropertiesUpdated( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextNode *pContextNodeUpdated,
            /* [in] */ ULONG ulPropertiesIdsCount,
            /* [size_is][in] */ GUID *pUpdatedProperties) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE PopulateContextNode( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextNode *pContextNodeToPopulate,
            /* [in] */ VARIANT_BOOL bPopulateSubTree) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ContextNodeCreated( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextNode *pContextNodeCreated) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ContextNodeDeleting( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextNode *pContextNodeToBeDeleted) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ContextNodeReparenting( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextNode *pNewParentContextNode,
            /* [in] */ IContextNode *pContextNodeToBeReparented) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ContextNodeMovingToPosition( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextNode *pSubnodeToMove,
            /* [in] */ IContextNode *pParentContextNode,
            /* [in] */ ULONG ulNewIndex) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE StrokesReparented( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [in] */ IContextNode *pSourceContextNode,
            /* [in] */ IContextNode *pDestinationContextNode) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE NewStrokesLoaded( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [in] */ IContextNode *pNodeWithStrokes) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ContextNodeLinkAdding( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextLink *pContextLinkToBeAdded) = 0;
        
        virtual /* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE ContextNodeLinkDeleting( 
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextLink *pContextLinkToBeDeleted) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _IAnalysisProxyEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IAnalysisProxyEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IAnalysisProxyEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IAnalysisProxyEvents * This);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *InkAnalyzerStateChanging )( 
            _IAnalysisProxyEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ContextNodePropertiesUpdated )( 
            _IAnalysisProxyEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextNode *pContextNodeUpdated,
            /* [in] */ ULONG ulPropertiesIdsCount,
            /* [size_is][in] */ GUID *pUpdatedProperties);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *PopulateContextNode )( 
            _IAnalysisProxyEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextNode *pContextNodeToPopulate,
            /* [in] */ VARIANT_BOOL bPopulateSubTree);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ContextNodeCreated )( 
            _IAnalysisProxyEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextNode *pContextNodeCreated);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ContextNodeDeleting )( 
            _IAnalysisProxyEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextNode *pContextNodeToBeDeleted);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ContextNodeReparenting )( 
            _IAnalysisProxyEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextNode *pNewParentContextNode,
            /* [in] */ IContextNode *pContextNodeToBeReparented);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ContextNodeMovingToPosition )( 
            _IAnalysisProxyEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextNode *pSubnodeToMove,
            /* [in] */ IContextNode *pParentContextNode,
            /* [in] */ ULONG ulNewIndex);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *StrokesReparented )( 
            _IAnalysisProxyEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [in] */ IContextNode *pSourceContextNode,
            /* [in] */ IContextNode *pDestinationContextNode);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *NewStrokesLoaded )( 
            _IAnalysisProxyEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ ULONG ulStrokeIdsCount,
            /* [size_is][in] */ LONG *plStrokeIds,
            /* [in] */ IContextNode *pNodeWithStrokes);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ContextNodeLinkAdding )( 
            _IAnalysisProxyEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextLink *pContextLinkToBeAdded);
        
        /* [helpcontext][helpstring] */ HRESULT ( STDMETHODCALLTYPE *ContextNodeLinkDeleting )( 
            _IAnalysisProxyEvents * This,
            /* [in] */ IInkAnalyzer *pInkAnalyzer,
            /* [in] */ IContextLink *pContextLinkToBeDeleted);
        
        END_INTERFACE
    } _IAnalysisProxyEventsVtbl;

    interface _IAnalysisProxyEvents
    {
        CONST_VTBL struct _IAnalysisProxyEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IAnalysisProxyEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _IAnalysisProxyEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _IAnalysisProxyEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _IAnalysisProxyEvents_InkAnalyzerStateChanging(This,pInkAnalyzer)	\
    (This)->lpVtbl -> InkAnalyzerStateChanging(This,pInkAnalyzer)

#define _IAnalysisProxyEvents_ContextNodePropertiesUpdated(This,pInkAnalyzer,pContextNodeUpdated,ulPropertiesIdsCount,pUpdatedProperties)	\
    (This)->lpVtbl -> ContextNodePropertiesUpdated(This,pInkAnalyzer,pContextNodeUpdated,ulPropertiesIdsCount,pUpdatedProperties)

#define _IAnalysisProxyEvents_PopulateContextNode(This,pInkAnalyzer,pContextNodeToPopulate,bPopulateSubTree)	\
    (This)->lpVtbl -> PopulateContextNode(This,pInkAnalyzer,pContextNodeToPopulate,bPopulateSubTree)

#define _IAnalysisProxyEvents_ContextNodeCreated(This,pInkAnalyzer,pContextNodeCreated)	\
    (This)->lpVtbl -> ContextNodeCreated(This,pInkAnalyzer,pContextNodeCreated)

#define _IAnalysisProxyEvents_ContextNodeDeleting(This,pInkAnalyzer,pContextNodeToBeDeleted)	\
    (This)->lpVtbl -> ContextNodeDeleting(This,pInkAnalyzer,pContextNodeToBeDeleted)

#define _IAnalysisProxyEvents_ContextNodeReparenting(This,pInkAnalyzer,pNewParentContextNode,pContextNodeToBeReparented)	\
    (This)->lpVtbl -> ContextNodeReparenting(This,pInkAnalyzer,pNewParentContextNode,pContextNodeToBeReparented)

#define _IAnalysisProxyEvents_ContextNodeMovingToPosition(This,pInkAnalyzer,pSubnodeToMove,pParentContextNode,ulNewIndex)	\
    (This)->lpVtbl -> ContextNodeMovingToPosition(This,pInkAnalyzer,pSubnodeToMove,pParentContextNode,ulNewIndex)

#define _IAnalysisProxyEvents_StrokesReparented(This,pInkAnalyzer,ulStrokeIdsCount,plStrokeIds,pSourceContextNode,pDestinationContextNode)	\
    (This)->lpVtbl -> StrokesReparented(This,pInkAnalyzer,ulStrokeIdsCount,plStrokeIds,pSourceContextNode,pDestinationContextNode)

#define _IAnalysisProxyEvents_NewStrokesLoaded(This,pInkAnalyzer,ulStrokeIdsCount,plStrokeIds,pNodeWithStrokes)	\
    (This)->lpVtbl -> NewStrokesLoaded(This,pInkAnalyzer,ulStrokeIdsCount,plStrokeIds,pNodeWithStrokes)

#define _IAnalysisProxyEvents_ContextNodeLinkAdding(This,pInkAnalyzer,pContextLinkToBeAdded)	\
    (This)->lpVtbl -> ContextNodeLinkAdding(This,pInkAnalyzer,pContextLinkToBeAdded)

#define _IAnalysisProxyEvents_ContextNodeLinkDeleting(This,pInkAnalyzer,pContextLinkToBeDeleted)	\
    (This)->lpVtbl -> ContextNodeLinkDeleting(This,pInkAnalyzer,pContextLinkToBeDeleted)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisProxyEvents_InkAnalyzerStateChanging_Proxy( 
    _IAnalysisProxyEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer);


void __RPC_STUB _IAnalysisProxyEvents_InkAnalyzerStateChanging_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisProxyEvents_ContextNodePropertiesUpdated_Proxy( 
    _IAnalysisProxyEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer,
    /* [in] */ IContextNode *pContextNodeUpdated,
    /* [in] */ ULONG ulPropertiesIdsCount,
    /* [size_is][in] */ GUID *pUpdatedProperties);


void __RPC_STUB _IAnalysisProxyEvents_ContextNodePropertiesUpdated_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisProxyEvents_PopulateContextNode_Proxy( 
    _IAnalysisProxyEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer,
    /* [in] */ IContextNode *pContextNodeToPopulate,
    /* [in] */ VARIANT_BOOL bPopulateSubTree);


void __RPC_STUB _IAnalysisProxyEvents_PopulateContextNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisProxyEvents_ContextNodeCreated_Proxy( 
    _IAnalysisProxyEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer,
    /* [in] */ IContextNode *pContextNodeCreated);


void __RPC_STUB _IAnalysisProxyEvents_ContextNodeCreated_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisProxyEvents_ContextNodeDeleting_Proxy( 
    _IAnalysisProxyEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer,
    /* [in] */ IContextNode *pContextNodeToBeDeleted);


void __RPC_STUB _IAnalysisProxyEvents_ContextNodeDeleting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisProxyEvents_ContextNodeReparenting_Proxy( 
    _IAnalysisProxyEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer,
    /* [in] */ IContextNode *pNewParentContextNode,
    /* [in] */ IContextNode *pContextNodeToBeReparented);


void __RPC_STUB _IAnalysisProxyEvents_ContextNodeReparenting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisProxyEvents_ContextNodeMovingToPosition_Proxy( 
    _IAnalysisProxyEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer,
    /* [in] */ IContextNode *pSubnodeToMove,
    /* [in] */ IContextNode *pParentContextNode,
    /* [in] */ ULONG ulNewIndex);


void __RPC_STUB _IAnalysisProxyEvents_ContextNodeMovingToPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisProxyEvents_StrokesReparented_Proxy( 
    _IAnalysisProxyEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plStrokeIds,
    /* [in] */ IContextNode *pSourceContextNode,
    /* [in] */ IContextNode *pDestinationContextNode);


void __RPC_STUB _IAnalysisProxyEvents_StrokesReparented_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisProxyEvents_NewStrokesLoaded_Proxy( 
    _IAnalysisProxyEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer,
    /* [in] */ ULONG ulStrokeIdsCount,
    /* [size_is][in] */ LONG *plStrokeIds,
    /* [in] */ IContextNode *pNodeWithStrokes);


void __RPC_STUB _IAnalysisProxyEvents_NewStrokesLoaded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisProxyEvents_ContextNodeLinkAdding_Proxy( 
    _IAnalysisProxyEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer,
    /* [in] */ IContextLink *pContextLinkToBeAdded);


void __RPC_STUB _IAnalysisProxyEvents_ContextNodeLinkAdding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][helpstring] */ HRESULT STDMETHODCALLTYPE _IAnalysisProxyEvents_ContextNodeLinkDeleting_Proxy( 
    _IAnalysisProxyEvents * This,
    /* [in] */ IInkAnalyzer *pInkAnalyzer,
    /* [in] */ IContextLink *pContextLinkToBeDeleted);


void __RPC_STUB _IAnalysisProxyEvents_ContextNodeLinkDeleting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___IAnalysisProxyEvents_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_InkAnalyzer;

#ifdef __cplusplus

class DECLSPEC_UUID("B4BAB526-5BA1-3C4D-AF21-CFDCD9AAF2D2")
InkAnalyzer;
#endif

EXTERN_C const CLSID CLSID_AnalysisRegion;

#ifdef __cplusplus

class DECLSPEC_UUID("3C3E7657-4F0C-3FC4-8A89-A5B0F7EB480A")
AnalysisRegion;
#endif
#endif /* __COMINKANALYSISLib_LIBRARY_DEFINED__ */

/* interface __MIDL_itf_iacom_0272 */
/* [local] */ 

#endif /* of #define _COMINKANALYSIS_H_*/


extern RPC_IF_HANDLE __MIDL_itf_iacom_0272_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iacom_0272_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Iadmw.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for iadmw.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __iadmw_h__
#define __iadmw_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IMSAdminBaseW_FWD_DEFINED__
#define __IMSAdminBaseW_FWD_DEFINED__
typedef interface IMSAdminBaseW IMSAdminBaseW;
#endif 	/* __IMSAdminBaseW_FWD_DEFINED__ */


#ifndef __IMSAdminBase2W_FWD_DEFINED__
#define __IMSAdminBase2W_FWD_DEFINED__
typedef interface IMSAdminBase2W IMSAdminBase2W;
#endif 	/* __IMSAdminBase2W_FWD_DEFINED__ */


#ifndef __IMSAdminBase3W_FWD_DEFINED__
#define __IMSAdminBase3W_FWD_DEFINED__
typedef interface IMSAdminBase3W IMSAdminBase3W;
#endif 	/* __IMSAdminBase3W_FWD_DEFINED__ */


#ifndef __IMSImpExpHelpW_FWD_DEFINED__
#define __IMSImpExpHelpW_FWD_DEFINED__
typedef interface IMSImpExpHelpW IMSImpExpHelpW;
#endif 	/* __IMSImpExpHelpW_FWD_DEFINED__ */


#ifndef __IMSAdminBaseSinkW_FWD_DEFINED__
#define __IMSAdminBaseSinkW_FWD_DEFINED__
typedef interface IMSAdminBaseSinkW IMSAdminBaseSinkW;
#endif 	/* __IMSAdminBaseSinkW_FWD_DEFINED__ */


#ifndef __AsyncIMSAdminBaseSinkW_FWD_DEFINED__
#define __AsyncIMSAdminBaseSinkW_FWD_DEFINED__
typedef interface AsyncIMSAdminBaseSinkW AsyncIMSAdminBaseSinkW;
#endif 	/* __AsyncIMSAdminBaseSinkW_FWD_DEFINED__ */


/* header files for imported files */
#include "mddefw.h"
#include "objidl.h"
#include "ocidl.h"


#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_iadmw_0000_0000 */
/* [local] */ 

/*++
                                                                                
Copyright (c) 1997-1999 Microsoft Corporation
                                                                                
Module Name: iadmw.h
                                                                                
    Admin Objects Interfaces
                                                                                
--*/
#ifndef _ADM_IADMW_
#define _ADM_IADMW_
#include <mdcommsg.h>
#include <mdmsg.h>
/*                                                                              
    Error Codes                                                                 
                                                                                
        Admin api's all return HRESULTS. Since internal results are either   
        winerrors or Metadata specific return codes (see mdmsg.h), they are     
        converted to HRESULTS using the RETURNCODETOHRESULT macro (see          
        commsg.h).                                                              
*/                                                                              
                                                                                
/*                                                                              
    Max Name Length                                                             
        The maximum number of characters in the length of a metaobject name,    
        including the terminating NULL. This refers to each node in the tree,   
        not the entire path.                                                    
        eg. strlen("Root") < ADMINDATA_MAX_NAME_LEN                           
*/                                                                              
#define ADMINDATA_MAX_NAME_LEN           256
                                                                 
#define CLSID_MSAdminBase            CLSID_MSAdminBase_W         
#define IID_IMSAdminBase             IID_IMSAdminBase_W          
#define IMSAdminBase                 IMSAdminBaseW               
#define IID_IMSAdminBase2            IID_IMSAdminBase2_W         
#define IMSAdminBase2                IMSAdminBase2W              
#define IID_IMSAdminBase3            IID_IMSAdminBase3_W         
#define IMSAdminBase3                IMSAdminBase3W              
#define IMSAdminBaseSink             IMSAdminBaseSinkW           
#define IID_IMSAdminBaseSink         IID_IMSAdminBaseSink_W      
#define IMSImpExpHelp                IMSImpExpHelpW              
#define IID_IMSImpExpHelp            IID_IMSImpExpHelp_W         
#define GETAdminBaseCLSID            GETAdminBaseCLSIDW          
                                                                 
#define AsyncIMSAdminBaseSink        AsyncIMSAdminBaseSinkW      
#define IID_AsyncIMSAdminBaseSink    IID_AsyncIMSAdminBaseSink_W 
DEFINE_GUID(CLSID_MSAdminBase_W,         0xa9e69610, 0xb80d, 0x11d0, 0xb9, 0xb9, 0x00, 0xa0, 0xc9, 0x22, 0xe7, 0x50);
DEFINE_GUID(IID_IMSAdminBase_W,          0x70b51430, 0xb6ca, 0x11d0, 0xb9, 0xb9, 0x00, 0xa0, 0xc9, 0x22, 0xe7, 0x50);
DEFINE_GUID(IID_IMSAdminBase2_W,         0x8298d101, 0xf992, 0x43b7, 0x8e, 0xca, 0x50, 0x52, 0xd8, 0x85, 0xb9, 0x95);
DEFINE_GUID(IID_IMSAdminBase3_W,         0xf612954d, 0x3b0b, 0x4c56, 0x95, 0x63, 0x22, 0x7b, 0x7b, 0xe6, 0x24, 0xb4);
DEFINE_GUID(IID_IMSImpExpHelp_W,         0x29ff67ff, 0x8050, 0x480f, 0x9f, 0x30, 0xcc, 0x41, 0x63, 0x5f, 0x2f, 0x9d);
DEFINE_GUID(IID_IMSAdminBaseSink_W,      0xa9e69612, 0xb80d, 0x11d0, 0xb9, 0xb9, 0x00, 0xa0, 0xc9, 0x22, 0xe7, 0x50);
DEFINE_GUID(IID_AsyncIMSAdminBaseSink_W, 0xa9e69613, 0xb80d, 0x11d0, 0xb9, 0xb9, 0x00, 0xa0, 0xc9, 0x22, 0xe7, 0x50);
#define GETAdminBaseCLSIDW(IsService)    CLSID_MSAdminBase_W
/*                                                                              
The Main Interface, UNICODE                                                     
*/                                                                              


extern RPC_IF_HANDLE __MIDL_itf_iadmw_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iadmw_0000_0000_v0_0_s_ifspec;

#ifndef __IMSAdminBaseW_INTERFACE_DEFINED__
#define __IMSAdminBaseW_INTERFACE_DEFINED__

/* interface IMSAdminBaseW */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMSAdminBaseW;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("70B51430-B6CA-11d0-B9B9-00A0C922E750")
    IMSAdminBaseW : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddKey( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteKey( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteChildKeys( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumKeys( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [size_is][out] */ __RPC__out_ecount_full(256) LPWSTR pszMDName,
            /* [in] */ DWORD dwMDEnumObjectIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CopyKey( 
            /* [in] */ METADATA_HANDLE hMDSourceHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDSourcePath,
            /* [in] */ METADATA_HANDLE hMDDestHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDDestPath,
            /* [in] */ BOOL bMDOverwriteFlag,
            /* [in] */ BOOL bMDCopyFlag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RenameKey( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDNewName) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE SetData( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [in] */ PMETADATA_RECORD pmdrMDData) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetData( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [out][in] */ PMETADATA_RECORD pmdrMDData,
            /* [out] */ DWORD *pdwMDRequiredDataLen) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteData( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDIdentifier,
            /* [in] */ DWORD dwMDDataType) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE EnumData( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [out][in] */ PMETADATA_RECORD pmdrMDData,
            /* [in] */ DWORD dwMDEnumDataIndex,
            /* [out] */ DWORD *pdwMDRequiredDataLen) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetAllData( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDAttributes,
            /* [in] */ DWORD dwMDUserType,
            /* [in] */ DWORD dwMDDataType,
            /* [out] */ DWORD *pdwMDNumDataEntries,
            /* [out] */ DWORD *pdwMDDataSetNumber,
            /* [in] */ DWORD dwMDBufferSize,
            /* [size_is][out] */ unsigned char *pbMDBuffer,
            /* [out] */ DWORD *pdwMDRequiredBufferSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteAllData( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDUserType,
            /* [in] */ DWORD dwMDDataType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CopyData( 
            /* [in] */ METADATA_HANDLE hMDSourceHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDSourcePath,
            /* [in] */ METADATA_HANDLE hMDDestHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDDestPath,
            /* [in] */ DWORD dwMDAttributes,
            /* [in] */ DWORD dwMDUserType,
            /* [in] */ DWORD dwMDDataType,
            /* [in] */ BOOL bMDCopyFlag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDataPaths( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDIdentifier,
            /* [in] */ DWORD dwMDDataType,
            /* [in] */ DWORD dwMDBufferSize,
            /* [size_is][out] */ __RPC__out_ecount_full(dwMDBufferSize) WCHAR *pszBuffer,
            /* [out] */ __RPC__out DWORD *pdwMDRequiredBufferSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpenKey( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDAccessRequested,
            /* [in] */ DWORD dwMDTimeOut,
            /* [out] */ __RPC__out PMETADATA_HANDLE phMDNewHandle) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CloseKey( 
            /* [in] */ METADATA_HANDLE hMDHandle) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ChangePermissions( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [in] */ DWORD dwMDTimeOut,
            /* [in] */ DWORD dwMDAccessRequested) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SaveData( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHandleInfo( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [out] */ __RPC__out PMETADATA_HANDLE_INFO pmdhiInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSystemChangeNumber( 
            /* [out] */ __RPC__out DWORD *pdwSystemChangeNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDataSetNumber( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [out] */ __RPC__out DWORD *pdwMDDataSetNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLastChangeTime( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ __RPC__in PFILETIME pftMDLastChangeTime,
            /* [in] */ BOOL bLocalTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLastChangeTime( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [out] */ __RPC__out PFILETIME pftMDLastChangeTime,
            /* [in] */ BOOL bLocalTime) = 0;
        
        virtual /* [restricted][local] */ HRESULT STDMETHODCALLTYPE KeyExchangePhase1( void) = 0;
        
        virtual /* [restricted][local] */ HRESULT STDMETHODCALLTYPE KeyExchangePhase2( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Backup( 
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Restore( 
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumBackups( 
            /* [size_is][out][in] */ __RPC__inout_ecount_full(256) LPWSTR pszMDBackupLocation,
            /* [out] */ __RPC__out DWORD *pdwMDVersion,
            /* [out] */ __RPC__out PFILETIME pftMDBackupTime,
            /* [in] */ DWORD dwMDEnumIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteBackup( 
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnmarshalInterface( 
            /* [out] */ __RPC__deref_out_opt IMSAdminBaseW **piadmbwInterface) = 0;
        
        virtual /* [restricted][local] */ HRESULT STDMETHODCALLTYPE GetServerGuid( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSAdminBaseWVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSAdminBaseW * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSAdminBaseW * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddKey )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteKey )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteChildKeys )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath);
        
        HRESULT ( STDMETHODCALLTYPE *EnumKeys )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [size_is][out] */ __RPC__out_ecount_full(256) LPWSTR pszMDName,
            /* [in] */ DWORD dwMDEnumObjectIndex);
        
        HRESULT ( STDMETHODCALLTYPE *CopyKey )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDSourceHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDSourcePath,
            /* [in] */ METADATA_HANDLE hMDDestHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDDestPath,
            /* [in] */ BOOL bMDOverwriteFlag,
            /* [in] */ BOOL bMDCopyFlag);
        
        HRESULT ( STDMETHODCALLTYPE *RenameKey )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDNewName);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetData )( 
            IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [in] */ PMETADATA_RECORD pmdrMDData);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetData )( 
            IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [out][in] */ PMETADATA_RECORD pmdrMDData,
            /* [out] */ DWORD *pdwMDRequiredDataLen);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteData )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDIdentifier,
            /* [in] */ DWORD dwMDDataType);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *EnumData )( 
            IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [out][in] */ PMETADATA_RECORD pmdrMDData,
            /* [in] */ DWORD dwMDEnumDataIndex,
            /* [out] */ DWORD *pdwMDRequiredDataLen);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetAllData )( 
            IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDAttributes,
            /* [in] */ DWORD dwMDUserType,
            /* [in] */ DWORD dwMDDataType,
            /* [out] */ DWORD *pdwMDNumDataEntries,
            /* [out] */ DWORD *pdwMDDataSetNumber,
            /* [in] */ DWORD dwMDBufferSize,
            /* [size_is][out] */ unsigned char *pbMDBuffer,
            /* [out] */ DWORD *pdwMDRequiredBufferSize);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteAllData )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDUserType,
            /* [in] */ DWORD dwMDDataType);
        
        HRESULT ( STDMETHODCALLTYPE *CopyData )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDSourceHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDSourcePath,
            /* [in] */ METADATA_HANDLE hMDDestHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDDestPath,
            /* [in] */ DWORD dwMDAttributes,
            /* [in] */ DWORD dwMDUserType,
            /* [in] */ DWORD dwMDDataType,
            /* [in] */ BOOL bMDCopyFlag);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataPaths )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDIdentifier,
            /* [in] */ DWORD dwMDDataType,
            /* [in] */ DWORD dwMDBufferSize,
            /* [size_is][out] */ __RPC__out_ecount_full(dwMDBufferSize) WCHAR *pszBuffer,
            /* [out] */ __RPC__out DWORD *pdwMDRequiredBufferSize);
        
        HRESULT ( STDMETHODCALLTYPE *OpenKey )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDAccessRequested,
            /* [in] */ DWORD dwMDTimeOut,
            /* [out] */ __RPC__out PMETADATA_HANDLE phMDNewHandle);
        
        HRESULT ( STDMETHODCALLTYPE *CloseKey )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle);
        
        HRESULT ( STDMETHODCALLTYPE *ChangePermissions )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [in] */ DWORD dwMDTimeOut,
            /* [in] */ DWORD dwMDAccessRequested);
        
        HRESULT ( STDMETHODCALLTYPE *SaveData )( 
            __RPC__in IMSAdminBaseW * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetHandleInfo )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [out] */ __RPC__out PMETADATA_HANDLE_INFO pmdhiInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemChangeNumber )( 
            __RPC__in IMSAdminBaseW * This,
            /* [out] */ __RPC__out DWORD *pdwSystemChangeNumber);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataSetNumber )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [out] */ __RPC__out DWORD *pdwMDDataSetNumber);
        
        HRESULT ( STDMETHODCALLTYPE *SetLastChangeTime )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ __RPC__in PFILETIME pftMDLastChangeTime,
            /* [in] */ BOOL bLocalTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetLastChangeTime )( 
            __RPC__in IMSAdminBaseW * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [out] */ __RPC__out PFILETIME pftMDLastChangeTime,
            /* [in] */ BOOL bLocalTime);
        
        /* [restricted][local] */ HRESULT ( STDMETHODCALLTYPE *KeyExchangePhase1 )( 
            IMSAdminBaseW * This);
        
        /* [restricted][local] */ HRESULT ( STDMETHODCALLTYPE *KeyExchangePhase2 )( 
            IMSAdminBaseW * This);
        
        HRESULT ( STDMETHODCALLTYPE *Backup )( 
            __RPC__in IMSAdminBaseW * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags);
        
        HRESULT ( STDMETHODCALLTYPE *Restore )( 
            __RPC__in IMSAdminBaseW * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags);
        
        HRESULT ( STDMETHODCALLTYPE *EnumBackups )( 
            __RPC__in IMSAdminBaseW * This,
            /* [size_is][out][in] */ __RPC__inout_ecount_full(256) LPWSTR pszMDBackupLocation,
            /* [out] */ __RPC__out DWORD *pdwMDVersion,
            /* [out] */ __RPC__out PFILETIME pftMDBackupTime,
            /* [in] */ DWORD dwMDEnumIndex);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteBackup )( 
            __RPC__in IMSAdminBaseW * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion);
        
        HRESULT ( STDMETHODCALLTYPE *UnmarshalInterface )( 
            __RPC__in IMSAdminBaseW * This,
            /* [out] */ __RPC__deref_out_opt IMSAdminBaseW **piadmbwInterface);
        
        /* [restricted][local] */ HRESULT ( STDMETHODCALLTYPE *GetServerGuid )( 
            IMSAdminBaseW * This);
        
        END_INTERFACE
    } IMSAdminBaseWVtbl;

    interface IMSAdminBaseW
    {
        CONST_VTBL struct IMSAdminBaseWVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSAdminBaseW_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSAdminBaseW_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSAdminBaseW_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSAdminBaseW_AddKey(This,hMDHandle,pszMDPath)	\
    ( (This)->lpVtbl -> AddKey(This,hMDHandle,pszMDPath) ) 

#define IMSAdminBaseW_DeleteKey(This,hMDHandle,pszMDPath)	\
    ( (This)->lpVtbl -> DeleteKey(This,hMDHandle,pszMDPath) ) 

#define IMSAdminBaseW_DeleteChildKeys(This,hMDHandle,pszMDPath)	\
    ( (This)->lpVtbl -> DeleteChildKeys(This,hMDHandle,pszMDPath) ) 

#define IMSAdminBaseW_EnumKeys(This,hMDHandle,pszMDPath,pszMDName,dwMDEnumObjectIndex)	\
    ( (This)->lpVtbl -> EnumKeys(This,hMDHandle,pszMDPath,pszMDName,dwMDEnumObjectIndex) ) 

#define IMSAdminBaseW_CopyKey(This,hMDSourceHandle,pszMDSourcePath,hMDDestHandle,pszMDDestPath,bMDOverwriteFlag,bMDCopyFlag)	\
    ( (This)->lpVtbl -> CopyKey(This,hMDSourceHandle,pszMDSourcePath,hMDDestHandle,pszMDDestPath,bMDOverwriteFlag,bMDCopyFlag) ) 

#define IMSAdminBaseW_RenameKey(This,hMDHandle,pszMDPath,pszMDNewName)	\
    ( (This)->lpVtbl -> RenameKey(This,hMDHandle,pszMDPath,pszMDNewName) ) 

#define IMSAdminBaseW_SetData(This,hMDHandle,pszMDPath,pmdrMDData)	\
    ( (This)->lpVtbl -> SetData(This,hMDHandle,pszMDPath,pmdrMDData) ) 

#define IMSAdminBaseW_GetData(This,hMDHandle,pszMDPath,pmdrMDData,pdwMDRequiredDataLen)	\
    ( (This)->lpVtbl -> GetData(This,hMDHandle,pszMDPath,pmdrMDData,pdwMDRequiredDataLen) ) 

#define IMSAdminBaseW_DeleteData(This,hMDHandle,pszMDPath,dwMDIdentifier,dwMDDataType)	\
    ( (This)->lpVtbl -> DeleteData(This,hMDHandle,pszMDPath,dwMDIdentifier,dwMDDataType) ) 

#define IMSAdminBaseW_EnumData(This,hMDHandle,pszMDPath,pmdrMDData,dwMDEnumDataIndex,pdwMDRequiredDataLen)	\
    ( (This)->lpVtbl -> EnumData(This,hMDHandle,pszMDPath,pmdrMDData,dwMDEnumDataIndex,pdwMDRequiredDataLen) ) 

#define IMSAdminBaseW_GetAllData(This,hMDHandle,pszMDPath,dwMDAttributes,dwMDUserType,dwMDDataType,pdwMDNumDataEntries,pdwMDDataSetNumber,dwMDBufferSize,pbMDBuffer,pdwMDRequiredBufferSize)	\
    ( (This)->lpVtbl -> GetAllData(This,hMDHandle,pszMDPath,dwMDAttributes,dwMDUserType,dwMDDataType,pdwMDNumDataEntries,pdwMDDataSetNumber,dwMDBufferSize,pbMDBuffer,pdwMDRequiredBufferSize) ) 

#define IMSAdminBaseW_DeleteAllData(This,hMDHandle,pszMDPath,dwMDUserType,dwMDDataType)	\
    ( (This)->lpVtbl -> DeleteAllData(This,hMDHandle,pszMDPath,dwMDUserType,dwMDDataType) ) 

#define IMSAdminBaseW_CopyData(This,hMDSourceHandle,pszMDSourcePath,hMDDestHandle,pszMDDestPath,dwMDAttributes,dwMDUserType,dwMDDataType,bMDCopyFlag)	\
    ( (This)->lpVtbl -> CopyData(This,hMDSourceHandle,pszMDSourcePath,hMDDestHandle,pszMDDestPath,dwMDAttributes,dwMDUserType,dwMDDataType,bMDCopyFlag) ) 

#define IMSAdminBaseW_GetDataPaths(This,hMDHandle,pszMDPath,dwMDIdentifier,dwMDDataType,dwMDBufferSize,pszBuffer,pdwMDRequiredBufferSize)	\
    ( (This)->lpVtbl -> GetDataPaths(This,hMDHandle,pszMDPath,dwMDIdentifier,dwMDDataType,dwMDBufferSize,pszBuffer,pdwMDRequiredBufferSize) ) 

#define IMSAdminBaseW_OpenKey(This,hMDHandle,pszMDPath,dwMDAccessRequested,dwMDTimeOut,phMDNewHandle)	\
    ( (This)->lpVtbl -> OpenKey(This,hMDHandle,pszMDPath,dwMDAccessRequested,dwMDTimeOut,phMDNewHandle) ) 

#define IMSAdminBaseW_CloseKey(This,hMDHandle)	\
    ( (This)->lpVtbl -> CloseKey(This,hMDHandle) ) 

#define IMSAdminBaseW_ChangePermissions(This,hMDHandle,dwMDTimeOut,dwMDAccessRequested)	\
    ( (This)->lpVtbl -> ChangePermissions(This,hMDHandle,dwMDTimeOut,dwMDAccessRequested) ) 

#define IMSAdminBaseW_SaveData(This)	\
    ( (This)->lpVtbl -> SaveData(This) ) 

#define IMSAdminBaseW_GetHandleInfo(This,hMDHandle,pmdhiInfo)	\
    ( (This)->lpVtbl -> GetHandleInfo(This,hMDHandle,pmdhiInfo) ) 

#define IMSAdminBaseW_GetSystemChangeNumber(This,pdwSystemChangeNumber)	\
    ( (This)->lpVtbl -> GetSystemChangeNumber(This,pdwSystemChangeNumber) ) 

#define IMSAdminBaseW_GetDataSetNumber(This,hMDHandle,pszMDPath,pdwMDDataSetNumber)	\
    ( (This)->lpVtbl -> GetDataSetNumber(This,hMDHandle,pszMDPath,pdwMDDataSetNumber) ) 

#define IMSAdminBaseW_SetLastChangeTime(This,hMDHandle,pszMDPath,pftMDLastChangeTime,bLocalTime)	\
    ( (This)->lpVtbl -> SetLastChangeTime(This,hMDHandle,pszMDPath,pftMDLastChangeTime,bLocalTime) ) 

#define IMSAdminBaseW_GetLastChangeTime(This,hMDHandle,pszMDPath,pftMDLastChangeTime,bLocalTime)	\
    ( (This)->lpVtbl -> GetLastChangeTime(This,hMDHandle,pszMDPath,pftMDLastChangeTime,bLocalTime) ) 

#define IMSAdminBaseW_KeyExchangePhase1(This)	\
    ( (This)->lpVtbl -> KeyExchangePhase1(This) ) 

#define IMSAdminBaseW_KeyExchangePhase2(This)	\
    ( (This)->lpVtbl -> KeyExchangePhase2(This) ) 

#define IMSAdminBaseW_Backup(This,pszMDBackupLocation,dwMDVersion,dwMDFlags)	\
    ( (This)->lpVtbl -> Backup(This,pszMDBackupLocation,dwMDVersion,dwMDFlags) ) 

#define IMSAdminBaseW_Restore(This,pszMDBackupLocation,dwMDVersion,dwMDFlags)	\
    ( (This)->lpVtbl -> Restore(This,pszMDBackupLocation,dwMDVersion,dwMDFlags) ) 

#define IMSAdminBaseW_EnumBackups(This,pszMDBackupLocation,pdwMDVersion,pftMDBackupTime,dwMDEnumIndex)	\
    ( (This)->lpVtbl -> EnumBackups(This,pszMDBackupLocation,pdwMDVersion,pftMDBackupTime,dwMDEnumIndex) ) 

#define IMSAdminBaseW_DeleteBackup(This,pszMDBackupLocation,dwMDVersion)	\
    ( (This)->lpVtbl -> DeleteBackup(This,pszMDBackupLocation,dwMDVersion) ) 

#define IMSAdminBaseW_UnmarshalInterface(This,piadmbwInterface)	\
    ( (This)->lpVtbl -> UnmarshalInterface(This,piadmbwInterface) ) 

#define IMSAdminBaseW_GetServerGuid(This)	\
    ( (This)->lpVtbl -> GetServerGuid(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_R_SetData_Proxy( 
    __RPC__in IMSAdminBaseW * This,
    /* [in] */ METADATA_HANDLE hMDHandle,
    /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
    /* [in] */ __RPC__in PMETADATA_RECORD pmdrMDData);


void __RPC_STUB IMSAdminBaseW_R_SetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_R_GetData_Proxy( 
    __RPC__in IMSAdminBaseW * This,
    /* [in] */ METADATA_HANDLE hMDHandle,
    /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
    /* [out][in] */ __RPC__inout PMETADATA_RECORD pmdrMDData,
    /* [out] */ __RPC__out DWORD *pdwMDRequiredDataLen,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppDataBlob);


void __RPC_STUB IMSAdminBaseW_R_GetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_R_EnumData_Proxy( 
    __RPC__in IMSAdminBaseW * This,
    /* [in] */ METADATA_HANDLE hMDHandle,
    /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
    /* [out][in] */ __RPC__inout PMETADATA_RECORD pmdrMDData,
    /* [in] */ DWORD dwMDEnumDataIndex,
    /* [out] */ __RPC__out DWORD *pdwMDRequiredDataLen,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppDataBlob);


void __RPC_STUB IMSAdminBaseW_R_EnumData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_R_GetAllData_Proxy( 
    __RPC__in IMSAdminBaseW * This,
    /* [in] */ METADATA_HANDLE hMDHandle,
    /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
    /* [in] */ DWORD dwMDAttributes,
    /* [in] */ DWORD dwMDUserType,
    /* [in] */ DWORD dwMDDataType,
    /* [out] */ __RPC__out DWORD *pdwMDNumDataEntries,
    /* [out] */ __RPC__out DWORD *pdwMDDataSetNumber,
    /* [in] */ DWORD dwMDBufferSize,
    /* [out] */ __RPC__out DWORD *pdwMDRequiredBufferSize,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppDataBlob);


void __RPC_STUB IMSAdminBaseW_R_GetAllData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_R_KeyExchangePhase1_Proxy( 
    __RPC__in IMSAdminBaseW * This,
    /* [in][unique] */ __RPC__in_opt struct _IIS_CRYPTO_BLOB *pClientKeyExchangeKeyBlob,
    /* [in][unique] */ __RPC__in_opt struct _IIS_CRYPTO_BLOB *pClientSignatureKeyBlob,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppServerKeyExchangeKeyBlob,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppServerSignatureKeyBlob,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppServerSessionKeyBlob);


void __RPC_STUB IMSAdminBaseW_R_KeyExchangePhase1_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_R_KeyExchangePhase2_Proxy( 
    __RPC__in IMSAdminBaseW * This,
    /* [in][unique] */ __RPC__in_opt struct _IIS_CRYPTO_BLOB *pClientSessionKeyBlob,
    /* [in][unique] */ __RPC__in_opt struct _IIS_CRYPTO_BLOB *pClientHashBlob,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppServerHashBlob);


void __RPC_STUB IMSAdminBaseW_R_KeyExchangePhase2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_R_GetServerGuid_Proxy( 
    __RPC__in IMSAdminBaseW * This,
    /* [out] */ __RPC__out GUID *pServerGuid);


void __RPC_STUB IMSAdminBaseW_R_GetServerGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMSAdminBaseW_INTERFACE_DEFINED__ */


#ifndef __IMSAdminBase2W_INTERFACE_DEFINED__
#define __IMSAdminBase2W_INTERFACE_DEFINED__

/* interface IMSAdminBase2W */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMSAdminBase2W;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8298d101-f992-43b7-8eca-5052d885b995")
    IMSAdminBase2W : public IMSAdminBaseW
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE BackupWithPasswd( 
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszPasswd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RestoreWithPasswd( 
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszPasswd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Export( 
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszPasswd,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszFileName,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszSourcePath,
            /* [in] */ DWORD dwMDFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Import( 
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszPasswd,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszFileName,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszSourcePath,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszDestPath,
            /* [in] */ DWORD dwMDFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RestoreHistory( 
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDHistoryLocation,
            /* [in] */ DWORD dwMDMajorVersion,
            /* [in] */ DWORD dwMDMinorVersion,
            /* [in] */ DWORD dwMDFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumHistory( 
            /* [size_is][out][in] */ __RPC__inout_ecount_full(256) LPWSTR pszMDHistoryLocation,
            /* [out] */ __RPC__out DWORD *pdwMDMajorVersion,
            /* [out] */ __RPC__out DWORD *pdwMDMinorVersion,
            /* [out] */ __RPC__out PFILETIME pftMDHistoryTime,
            /* [in] */ DWORD dwMDEnumIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSAdminBase2WVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSAdminBase2W * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSAdminBase2W * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddKey )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteKey )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteChildKeys )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath);
        
        HRESULT ( STDMETHODCALLTYPE *EnumKeys )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [size_is][out] */ __RPC__out_ecount_full(256) LPWSTR pszMDName,
            /* [in] */ DWORD dwMDEnumObjectIndex);
        
        HRESULT ( STDMETHODCALLTYPE *CopyKey )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDSourceHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDSourcePath,
            /* [in] */ METADATA_HANDLE hMDDestHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDDestPath,
            /* [in] */ BOOL bMDOverwriteFlag,
            /* [in] */ BOOL bMDCopyFlag);
        
        HRESULT ( STDMETHODCALLTYPE *RenameKey )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDNewName);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetData )( 
            IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [in] */ PMETADATA_RECORD pmdrMDData);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetData )( 
            IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [out][in] */ PMETADATA_RECORD pmdrMDData,
            /* [out] */ DWORD *pdwMDRequiredDataLen);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteData )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDIdentifier,
            /* [in] */ DWORD dwMDDataType);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *EnumData )( 
            IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [out][in] */ PMETADATA_RECORD pmdrMDData,
            /* [in] */ DWORD dwMDEnumDataIndex,
            /* [out] */ DWORD *pdwMDRequiredDataLen);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetAllData )( 
            IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDAttributes,
            /* [in] */ DWORD dwMDUserType,
            /* [in] */ DWORD dwMDDataType,
            /* [out] */ DWORD *pdwMDNumDataEntries,
            /* [out] */ DWORD *pdwMDDataSetNumber,
            /* [in] */ DWORD dwMDBufferSize,
            /* [size_is][out] */ unsigned char *pbMDBuffer,
            /* [out] */ DWORD *pdwMDRequiredBufferSize);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteAllData )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDUserType,
            /* [in] */ DWORD dwMDDataType);
        
        HRESULT ( STDMETHODCALLTYPE *CopyData )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDSourceHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDSourcePath,
            /* [in] */ METADATA_HANDLE hMDDestHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDDestPath,
            /* [in] */ DWORD dwMDAttributes,
            /* [in] */ DWORD dwMDUserType,
            /* [in] */ DWORD dwMDDataType,
            /* [in] */ BOOL bMDCopyFlag);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataPaths )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDIdentifier,
            /* [in] */ DWORD dwMDDataType,
            /* [in] */ DWORD dwMDBufferSize,
            /* [size_is][out] */ __RPC__out_ecount_full(dwMDBufferSize) WCHAR *pszBuffer,
            /* [out] */ __RPC__out DWORD *pdwMDRequiredBufferSize);
        
        HRESULT ( STDMETHODCALLTYPE *OpenKey )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDAccessRequested,
            /* [in] */ DWORD dwMDTimeOut,
            /* [out] */ __RPC__out PMETADATA_HANDLE phMDNewHandle);
        
        HRESULT ( STDMETHODCALLTYPE *CloseKey )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle);
        
        HRESULT ( STDMETHODCALLTYPE *ChangePermissions )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [in] */ DWORD dwMDTimeOut,
            /* [in] */ DWORD dwMDAccessRequested);
        
        HRESULT ( STDMETHODCALLTYPE *SaveData )( 
            __RPC__in IMSAdminBase2W * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetHandleInfo )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [out] */ __RPC__out PMETADATA_HANDLE_INFO pmdhiInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemChangeNumber )( 
            __RPC__in IMSAdminBase2W * This,
            /* [out] */ __RPC__out DWORD *pdwSystemChangeNumber);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataSetNumber )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [out] */ __RPC__out DWORD *pdwMDDataSetNumber);
        
        HRESULT ( STDMETHODCALLTYPE *SetLastChangeTime )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ __RPC__in PFILETIME pftMDLastChangeTime,
            /* [in] */ BOOL bLocalTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetLastChangeTime )( 
            __RPC__in IMSAdminBase2W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [out] */ __RPC__out PFILETIME pftMDLastChangeTime,
            /* [in] */ BOOL bLocalTime);
        
        /* [restricted][local] */ HRESULT ( STDMETHODCALLTYPE *KeyExchangePhase1 )( 
            IMSAdminBase2W * This);
        
        /* [restricted][local] */ HRESULT ( STDMETHODCALLTYPE *KeyExchangePhase2 )( 
            IMSAdminBase2W * This);
        
        HRESULT ( STDMETHODCALLTYPE *Backup )( 
            __RPC__in IMSAdminBase2W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags);
        
        HRESULT ( STDMETHODCALLTYPE *Restore )( 
            __RPC__in IMSAdminBase2W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags);
        
        HRESULT ( STDMETHODCALLTYPE *EnumBackups )( 
            __RPC__in IMSAdminBase2W * This,
            /* [size_is][out][in] */ __RPC__inout_ecount_full(256) LPWSTR pszMDBackupLocation,
            /* [out] */ __RPC__out DWORD *pdwMDVersion,
            /* [out] */ __RPC__out PFILETIME pftMDBackupTime,
            /* [in] */ DWORD dwMDEnumIndex);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteBackup )( 
            __RPC__in IMSAdminBase2W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion);
        
        HRESULT ( STDMETHODCALLTYPE *UnmarshalInterface )( 
            __RPC__in IMSAdminBase2W * This,
            /* [out] */ __RPC__deref_out_opt IMSAdminBaseW **piadmbwInterface);
        
        /* [restricted][local] */ HRESULT ( STDMETHODCALLTYPE *GetServerGuid )( 
            IMSAdminBase2W * This);
        
        HRESULT ( STDMETHODCALLTYPE *BackupWithPasswd )( 
            __RPC__in IMSAdminBase2W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszPasswd);
        
        HRESULT ( STDMETHODCALLTYPE *RestoreWithPasswd )( 
            __RPC__in IMSAdminBase2W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszPasswd);
        
        HRESULT ( STDMETHODCALLTYPE *Export )( 
            __RPC__in IMSAdminBase2W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszPasswd,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszFileName,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszSourcePath,
            /* [in] */ DWORD dwMDFlags);
        
        HRESULT ( STDMETHODCALLTYPE *Import )( 
            __RPC__in IMSAdminBase2W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszPasswd,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszFileName,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszSourcePath,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszDestPath,
            /* [in] */ DWORD dwMDFlags);
        
        HRESULT ( STDMETHODCALLTYPE *RestoreHistory )( 
            __RPC__in IMSAdminBase2W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDHistoryLocation,
            /* [in] */ DWORD dwMDMajorVersion,
            /* [in] */ DWORD dwMDMinorVersion,
            /* [in] */ DWORD dwMDFlags);
        
        HRESULT ( STDMETHODCALLTYPE *EnumHistory )( 
            __RPC__in IMSAdminBase2W * This,
            /* [size_is][out][in] */ __RPC__inout_ecount_full(256) LPWSTR pszMDHistoryLocation,
            /* [out] */ __RPC__out DWORD *pdwMDMajorVersion,
            /* [out] */ __RPC__out DWORD *pdwMDMinorVersion,
            /* [out] */ __RPC__out PFILETIME pftMDHistoryTime,
            /* [in] */ DWORD dwMDEnumIndex);
        
        END_INTERFACE
    } IMSAdminBase2WVtbl;

    interface IMSAdminBase2W
    {
        CONST_VTBL struct IMSAdminBase2WVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSAdminBase2W_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSAdminBase2W_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSAdminBase2W_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSAdminBase2W_AddKey(This,hMDHandle,pszMDPath)	\
    ( (This)->lpVtbl -> AddKey(This,hMDHandle,pszMDPath) ) 

#define IMSAdminBase2W_DeleteKey(This,hMDHandle,pszMDPath)	\
    ( (This)->lpVtbl -> DeleteKey(This,hMDHandle,pszMDPath) ) 

#define IMSAdminBase2W_DeleteChildKeys(This,hMDHandle,pszMDPath)	\
    ( (This)->lpVtbl -> DeleteChildKeys(This,hMDHandle,pszMDPath) ) 

#define IMSAdminBase2W_EnumKeys(This,hMDHandle,pszMDPath,pszMDName,dwMDEnumObjectIndex)	\
    ( (This)->lpVtbl -> EnumKeys(This,hMDHandle,pszMDPath,pszMDName,dwMDEnumObjectIndex) ) 

#define IMSAdminBase2W_CopyKey(This,hMDSourceHandle,pszMDSourcePath,hMDDestHandle,pszMDDestPath,bMDOverwriteFlag,bMDCopyFlag)	\
    ( (This)->lpVtbl -> CopyKey(This,hMDSourceHandle,pszMDSourcePath,hMDDestHandle,pszMDDestPath,bMDOverwriteFlag,bMDCopyFlag) ) 

#define IMSAdminBase2W_RenameKey(This,hMDHandle,pszMDPath,pszMDNewName)	\
    ( (This)->lpVtbl -> RenameKey(This,hMDHandle,pszMDPath,pszMDNewName) ) 

#define IMSAdminBase2W_SetData(This,hMDHandle,pszMDPath,pmdrMDData)	\
    ( (This)->lpVtbl -> SetData(This,hMDHandle,pszMDPath,pmdrMDData) ) 

#define IMSAdminBase2W_GetData(This,hMDHandle,pszMDPath,pmdrMDData,pdwMDRequiredDataLen)	\
    ( (This)->lpVtbl -> GetData(This,hMDHandle,pszMDPath,pmdrMDData,pdwMDRequiredDataLen) ) 

#define IMSAdminBase2W_DeleteData(This,hMDHandle,pszMDPath,dwMDIdentifier,dwMDDataType)	\
    ( (This)->lpVtbl -> DeleteData(This,hMDHandle,pszMDPath,dwMDIdentifier,dwMDDataType) ) 

#define IMSAdminBase2W_EnumData(This,hMDHandle,pszMDPath,pmdrMDData,dwMDEnumDataIndex,pdwMDRequiredDataLen)	\
    ( (This)->lpVtbl -> EnumData(This,hMDHandle,pszMDPath,pmdrMDData,dwMDEnumDataIndex,pdwMDRequiredDataLen) ) 

#define IMSAdminBase2W_GetAllData(This,hMDHandle,pszMDPath,dwMDAttributes,dwMDUserType,dwMDDataType,pdwMDNumDataEntries,pdwMDDataSetNumber,dwMDBufferSize,pbMDBuffer,pdwMDRequiredBufferSize)	\
    ( (This)->lpVtbl -> GetAllData(This,hMDHandle,pszMDPath,dwMDAttributes,dwMDUserType,dwMDDataType,pdwMDNumDataEntries,pdwMDDataSetNumber,dwMDBufferSize,pbMDBuffer,pdwMDRequiredBufferSize) ) 

#define IMSAdminBase2W_DeleteAllData(This,hMDHandle,pszMDPath,dwMDUserType,dwMDDataType)	\
    ( (This)->lpVtbl -> DeleteAllData(This,hMDHandle,pszMDPath,dwMDUserType,dwMDDataType) ) 

#define IMSAdminBase2W_CopyData(This,hMDSourceHandle,pszMDSourcePath,hMDDestHandle,pszMDDestPath,dwMDAttributes,dwMDUserType,dwMDDataType,bMDCopyFlag)	\
    ( (This)->lpVtbl -> CopyData(This,hMDSourceHandle,pszMDSourcePath,hMDDestHandle,pszMDDestPath,dwMDAttributes,dwMDUserType,dwMDDataType,bMDCopyFlag) ) 

#define IMSAdminBase2W_GetDataPaths(This,hMDHandle,pszMDPath,dwMDIdentifier,dwMDDataType,dwMDBufferSize,pszBuffer,pdwMDRequiredBufferSize)	\
    ( (This)->lpVtbl -> GetDataPaths(This,hMDHandle,pszMDPath,dwMDIdentifier,dwMDDataType,dwMDBufferSize,pszBuffer,pdwMDRequiredBufferSize) ) 

#define IMSAdminBase2W_OpenKey(This,hMDHandle,pszMDPath,dwMDAccessRequested,dwMDTimeOut,phMDNewHandle)	\
    ( (This)->lpVtbl -> OpenKey(This,hMDHandle,pszMDPath,dwMDAccessRequested,dwMDTimeOut,phMDNewHandle) ) 

#define IMSAdminBase2W_CloseKey(This,hMDHandle)	\
    ( (This)->lpVtbl -> CloseKey(This,hMDHandle) ) 

#define IMSAdminBase2W_ChangePermissions(This,hMDHandle,dwMDTimeOut,dwMDAccessRequested)	\
    ( (This)->lpVtbl -> ChangePermissions(This,hMDHandle,dwMDTimeOut,dwMDAccessRequested) ) 

#define IMSAdminBase2W_SaveData(This)	\
    ( (This)->lpVtbl -> SaveData(This) ) 

#define IMSAdminBase2W_GetHandleInfo(This,hMDHandle,pmdhiInfo)	\
    ( (This)->lpVtbl -> GetHandleInfo(This,hMDHandle,pmdhiInfo) ) 

#define IMSAdminBase2W_GetSystemChangeNumber(This,pdwSystemChangeNumber)	\
    ( (This)->lpVtbl -> GetSystemChangeNumber(This,pdwSystemChangeNumber) ) 

#define IMSAdminBase2W_GetDataSetNumber(This,hMDHandle,pszMDPath,pdwMDDataSetNumber)	\
    ( (This)->lpVtbl -> GetDataSetNumber(This,hMDHandle,pszMDPath,pdwMDDataSetNumber) ) 

#define IMSAdminBase2W_SetLastChangeTime(This,hMDHandle,pszMDPath,pftMDLastChangeTime,bLocalTime)	\
    ( (This)->lpVtbl -> SetLastChangeTime(This,hMDHandle,pszMDPath,pftMDLastChangeTime,bLocalTime) ) 

#define IMSAdminBase2W_GetLastChangeTime(This,hMDHandle,pszMDPath,pftMDLastChangeTime,bLocalTime)	\
    ( (This)->lpVtbl -> GetLastChangeTime(This,hMDHandle,pszMDPath,pftMDLastChangeTime,bLocalTime) ) 

#define IMSAdminBase2W_KeyExchangePhase1(This)	\
    ( (This)->lpVtbl -> KeyExchangePhase1(This) ) 

#define IMSAdminBase2W_KeyExchangePhase2(This)	\
    ( (This)->lpVtbl -> KeyExchangePhase2(This) ) 

#define IMSAdminBase2W_Backup(This,pszMDBackupLocation,dwMDVersion,dwMDFlags)	\
    ( (This)->lpVtbl -> Backup(This,pszMDBackupLocation,dwMDVersion,dwMDFlags) ) 

#define IMSAdminBase2W_Restore(This,pszMDBackupLocation,dwMDVersion,dwMDFlags)	\
    ( (This)->lpVtbl -> Restore(This,pszMDBackupLocation,dwMDVersion,dwMDFlags) ) 

#define IMSAdminBase2W_EnumBackups(This,pszMDBackupLocation,pdwMDVersion,pftMDBackupTime,dwMDEnumIndex)	\
    ( (This)->lpVtbl -> EnumBackups(This,pszMDBackupLocation,pdwMDVersion,pftMDBackupTime,dwMDEnumIndex) ) 

#define IMSAdminBase2W_DeleteBackup(This,pszMDBackupLocation,dwMDVersion)	\
    ( (This)->lpVtbl -> DeleteBackup(This,pszMDBackupLocation,dwMDVersion) ) 

#define IMSAdminBase2W_UnmarshalInterface(This,piadmbwInterface)	\
    ( (This)->lpVtbl -> UnmarshalInterface(This,piadmbwInterface) ) 

#define IMSAdminBase2W_GetServerGuid(This)	\
    ( (This)->lpVtbl -> GetServerGuid(This) ) 


#define IMSAdminBase2W_BackupWithPasswd(This,pszMDBackupLocation,dwMDVersion,dwMDFlags,pszPasswd)	\
    ( (This)->lpVtbl -> BackupWithPasswd(This,pszMDBackupLocation,dwMDVersion,dwMDFlags,pszPasswd) ) 

#define IMSAdminBase2W_RestoreWithPasswd(This,pszMDBackupLocation,dwMDVersion,dwMDFlags,pszPasswd)	\
    ( (This)->lpVtbl -> RestoreWithPasswd(This,pszMDBackupLocation,dwMDVersion,dwMDFlags,pszPasswd) ) 

#define IMSAdminBase2W_Export(This,pszPasswd,pszFileName,pszSourcePath,dwMDFlags)	\
    ( (This)->lpVtbl -> Export(This,pszPasswd,pszFileName,pszSourcePath,dwMDFlags) ) 

#define IMSAdminBase2W_Import(This,pszPasswd,pszFileName,pszSourcePath,pszDestPath,dwMDFlags)	\
    ( (This)->lpVtbl -> Import(This,pszPasswd,pszFileName,pszSourcePath,pszDestPath,dwMDFlags) ) 

#define IMSAdminBase2W_RestoreHistory(This,pszMDHistoryLocation,dwMDMajorVersion,dwMDMinorVersion,dwMDFlags)	\
    ( (This)->lpVtbl -> RestoreHistory(This,pszMDHistoryLocation,dwMDMajorVersion,dwMDMinorVersion,dwMDFlags) ) 

#define IMSAdminBase2W_EnumHistory(This,pszMDHistoryLocation,pdwMDMajorVersion,pdwMDMinorVersion,pftMDHistoryTime,dwMDEnumIndex)	\
    ( (This)->lpVtbl -> EnumHistory(This,pszMDHistoryLocation,pdwMDMajorVersion,pdwMDMinorVersion,pftMDHistoryTime,dwMDEnumIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSAdminBase2W_INTERFACE_DEFINED__ */


#ifndef __IMSAdminBase3W_INTERFACE_DEFINED__
#define __IMSAdminBase3W_INTERFACE_DEFINED__

/* interface IMSAdminBase3W */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMSAdminBase3W;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f612954d-3b0b-4c56-9563-227b7be624b4")
    IMSAdminBase3W : public IMSAdminBase2W
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetChildPaths( 
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD cchMDBufferSize,
            /* [size_is][unique][out][in] */ __RPC__inout_ecount_full_opt(cchMDBufferSize) WCHAR *pszBuffer,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pcchMDRequiredBufferSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSAdminBase3WVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSAdminBase3W * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSAdminBase3W * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddKey )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteKey )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteChildKeys )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath);
        
        HRESULT ( STDMETHODCALLTYPE *EnumKeys )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [size_is][out] */ __RPC__out_ecount_full(256) LPWSTR pszMDName,
            /* [in] */ DWORD dwMDEnumObjectIndex);
        
        HRESULT ( STDMETHODCALLTYPE *CopyKey )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDSourceHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDSourcePath,
            /* [in] */ METADATA_HANDLE hMDDestHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDDestPath,
            /* [in] */ BOOL bMDOverwriteFlag,
            /* [in] */ BOOL bMDCopyFlag);
        
        HRESULT ( STDMETHODCALLTYPE *RenameKey )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDNewName);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *SetData )( 
            IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [in] */ PMETADATA_RECORD pmdrMDData);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetData )( 
            IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [out][in] */ PMETADATA_RECORD pmdrMDData,
            /* [out] */ DWORD *pdwMDRequiredDataLen);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteData )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDIdentifier,
            /* [in] */ DWORD dwMDDataType);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *EnumData )( 
            IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [out][in] */ PMETADATA_RECORD pmdrMDData,
            /* [in] */ DWORD dwMDEnumDataIndex,
            /* [out] */ DWORD *pdwMDRequiredDataLen);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetAllData )( 
            IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDAttributes,
            /* [in] */ DWORD dwMDUserType,
            /* [in] */ DWORD dwMDDataType,
            /* [out] */ DWORD *pdwMDNumDataEntries,
            /* [out] */ DWORD *pdwMDDataSetNumber,
            /* [in] */ DWORD dwMDBufferSize,
            /* [size_is][out] */ unsigned char *pbMDBuffer,
            /* [out] */ DWORD *pdwMDRequiredBufferSize);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteAllData )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDUserType,
            /* [in] */ DWORD dwMDDataType);
        
        HRESULT ( STDMETHODCALLTYPE *CopyData )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDSourceHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDSourcePath,
            /* [in] */ METADATA_HANDLE hMDDestHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDDestPath,
            /* [in] */ DWORD dwMDAttributes,
            /* [in] */ DWORD dwMDUserType,
            /* [in] */ DWORD dwMDDataType,
            /* [in] */ BOOL bMDCopyFlag);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataPaths )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDIdentifier,
            /* [in] */ DWORD dwMDDataType,
            /* [in] */ DWORD dwMDBufferSize,
            /* [size_is][out] */ __RPC__out_ecount_full(dwMDBufferSize) WCHAR *pszBuffer,
            /* [out] */ __RPC__out DWORD *pdwMDRequiredBufferSize);
        
        HRESULT ( STDMETHODCALLTYPE *OpenKey )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD dwMDAccessRequested,
            /* [in] */ DWORD dwMDTimeOut,
            /* [out] */ __RPC__out PMETADATA_HANDLE phMDNewHandle);
        
        HRESULT ( STDMETHODCALLTYPE *CloseKey )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle);
        
        HRESULT ( STDMETHODCALLTYPE *ChangePermissions )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [in] */ DWORD dwMDTimeOut,
            /* [in] */ DWORD dwMDAccessRequested);
        
        HRESULT ( STDMETHODCALLTYPE *SaveData )( 
            __RPC__in IMSAdminBase3W * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetHandleInfo )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [out] */ __RPC__out PMETADATA_HANDLE_INFO pmdhiInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemChangeNumber )( 
            __RPC__in IMSAdminBase3W * This,
            /* [out] */ __RPC__out DWORD *pdwSystemChangeNumber);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataSetNumber )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [out] */ __RPC__out DWORD *pdwMDDataSetNumber);
        
        HRESULT ( STDMETHODCALLTYPE *SetLastChangeTime )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ __RPC__in PFILETIME pftMDLastChangeTime,
            /* [in] */ BOOL bLocalTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetLastChangeTime )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [out] */ __RPC__out PFILETIME pftMDLastChangeTime,
            /* [in] */ BOOL bLocalTime);
        
        /* [restricted][local] */ HRESULT ( STDMETHODCALLTYPE *KeyExchangePhase1 )( 
            IMSAdminBase3W * This);
        
        /* [restricted][local] */ HRESULT ( STDMETHODCALLTYPE *KeyExchangePhase2 )( 
            IMSAdminBase3W * This);
        
        HRESULT ( STDMETHODCALLTYPE *Backup )( 
            __RPC__in IMSAdminBase3W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags);
        
        HRESULT ( STDMETHODCALLTYPE *Restore )( 
            __RPC__in IMSAdminBase3W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags);
        
        HRESULT ( STDMETHODCALLTYPE *EnumBackups )( 
            __RPC__in IMSAdminBase3W * This,
            /* [size_is][out][in] */ __RPC__inout_ecount_full(256) LPWSTR pszMDBackupLocation,
            /* [out] */ __RPC__out DWORD *pdwMDVersion,
            /* [out] */ __RPC__out PFILETIME pftMDBackupTime,
            /* [in] */ DWORD dwMDEnumIndex);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteBackup )( 
            __RPC__in IMSAdminBase3W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion);
        
        HRESULT ( STDMETHODCALLTYPE *UnmarshalInterface )( 
            __RPC__in IMSAdminBase3W * This,
            /* [out] */ __RPC__deref_out_opt IMSAdminBaseW **piadmbwInterface);
        
        /* [restricted][local] */ HRESULT ( STDMETHODCALLTYPE *GetServerGuid )( 
            IMSAdminBase3W * This);
        
        HRESULT ( STDMETHODCALLTYPE *BackupWithPasswd )( 
            __RPC__in IMSAdminBase3W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszPasswd);
        
        HRESULT ( STDMETHODCALLTYPE *RestoreWithPasswd )( 
            __RPC__in IMSAdminBase3W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDBackupLocation,
            /* [in] */ DWORD dwMDVersion,
            /* [in] */ DWORD dwMDFlags,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszPasswd);
        
        HRESULT ( STDMETHODCALLTYPE *Export )( 
            __RPC__in IMSAdminBase3W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszPasswd,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszFileName,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszSourcePath,
            /* [in] */ DWORD dwMDFlags);
        
        HRESULT ( STDMETHODCALLTYPE *Import )( 
            __RPC__in IMSAdminBase3W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszPasswd,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszFileName,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszSourcePath,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszDestPath,
            /* [in] */ DWORD dwMDFlags);
        
        HRESULT ( STDMETHODCALLTYPE *RestoreHistory )( 
            __RPC__in IMSAdminBase3W * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDHistoryLocation,
            /* [in] */ DWORD dwMDMajorVersion,
            /* [in] */ DWORD dwMDMinorVersion,
            /* [in] */ DWORD dwMDFlags);
        
        HRESULT ( STDMETHODCALLTYPE *EnumHistory )( 
            __RPC__in IMSAdminBase3W * This,
            /* [size_is][out][in] */ __RPC__inout_ecount_full(256) LPWSTR pszMDHistoryLocation,
            /* [out] */ __RPC__out DWORD *pdwMDMajorVersion,
            /* [out] */ __RPC__out DWORD *pdwMDMinorVersion,
            /* [out] */ __RPC__out PFILETIME pftMDHistoryTime,
            /* [in] */ DWORD dwMDEnumIndex);
        
        HRESULT ( STDMETHODCALLTYPE *GetChildPaths )( 
            __RPC__in IMSAdminBase3W * This,
            /* [in] */ METADATA_HANDLE hMDHandle,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
            /* [in] */ DWORD cchMDBufferSize,
            /* [size_is][unique][out][in] */ __RPC__inout_ecount_full_opt(cchMDBufferSize) WCHAR *pszBuffer,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pcchMDRequiredBufferSize);
        
        END_INTERFACE
    } IMSAdminBase3WVtbl;

    interface IMSAdminBase3W
    {
        CONST_VTBL struct IMSAdminBase3WVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSAdminBase3W_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSAdminBase3W_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSAdminBase3W_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSAdminBase3W_AddKey(This,hMDHandle,pszMDPath)	\
    ( (This)->lpVtbl -> AddKey(This,hMDHandle,pszMDPath) ) 

#define IMSAdminBase3W_DeleteKey(This,hMDHandle,pszMDPath)	\
    ( (This)->lpVtbl -> DeleteKey(This,hMDHandle,pszMDPath) ) 

#define IMSAdminBase3W_DeleteChildKeys(This,hMDHandle,pszMDPath)	\
    ( (This)->lpVtbl -> DeleteChildKeys(This,hMDHandle,pszMDPath) ) 

#define IMSAdminBase3W_EnumKeys(This,hMDHandle,pszMDPath,pszMDName,dwMDEnumObjectIndex)	\
    ( (This)->lpVtbl -> EnumKeys(This,hMDHandle,pszMDPath,pszMDName,dwMDEnumObjectIndex) ) 

#define IMSAdminBase3W_CopyKey(This,hMDSourceHandle,pszMDSourcePath,hMDDestHandle,pszMDDestPath,bMDOverwriteFlag,bMDCopyFlag)	\
    ( (This)->lpVtbl -> CopyKey(This,hMDSourceHandle,pszMDSourcePath,hMDDestHandle,pszMDDestPath,bMDOverwriteFlag,bMDCopyFlag) ) 

#define IMSAdminBase3W_RenameKey(This,hMDHandle,pszMDPath,pszMDNewName)	\
    ( (This)->lpVtbl -> RenameKey(This,hMDHandle,pszMDPath,pszMDNewName) ) 

#define IMSAdminBase3W_SetData(This,hMDHandle,pszMDPath,pmdrMDData)	\
    ( (This)->lpVtbl -> SetData(This,hMDHandle,pszMDPath,pmdrMDData) ) 

#define IMSAdminBase3W_GetData(This,hMDHandle,pszMDPath,pmdrMDData,pdwMDRequiredDataLen)	\
    ( (This)->lpVtbl -> GetData(This,hMDHandle,pszMDPath,pmdrMDData,pdwMDRequiredDataLen) ) 

#define IMSAdminBase3W_DeleteData(This,hMDHandle,pszMDPath,dwMDIdentifier,dwMDDataType)	\
    ( (This)->lpVtbl -> DeleteData(This,hMDHandle,pszMDPath,dwMDIdentifier,dwMDDataType) ) 

#define IMSAdminBase3W_EnumData(This,hMDHandle,pszMDPath,pmdrMDData,dwMDEnumDataIndex,pdwMDRequiredDataLen)	\
    ( (This)->lpVtbl -> EnumData(This,hMDHandle,pszMDPath,pmdrMDData,dwMDEnumDataIndex,pdwMDRequiredDataLen) ) 

#define IMSAdminBase3W_GetAllData(This,hMDHandle,pszMDPath,dwMDAttributes,dwMDUserType,dwMDDataType,pdwMDNumDataEntries,pdwMDDataSetNumber,dwMDBufferSize,pbMDBuffer,pdwMDRequiredBufferSize)	\
    ( (This)->lpVtbl -> GetAllData(This,hMDHandle,pszMDPath,dwMDAttributes,dwMDUserType,dwMDDataType,pdwMDNumDataEntries,pdwMDDataSetNumber,dwMDBufferSize,pbMDBuffer,pdwMDRequiredBufferSize) ) 

#define IMSAdminBase3W_DeleteAllData(This,hMDHandle,pszMDPath,dwMDUserType,dwMDDataType)	\
    ( (This)->lpVtbl -> DeleteAllData(This,hMDHandle,pszMDPath,dwMDUserType,dwMDDataType) ) 

#define IMSAdminBase3W_CopyData(This,hMDSourceHandle,pszMDSourcePath,hMDDestHandle,pszMDDestPath,dwMDAttributes,dwMDUserType,dwMDDataType,bMDCopyFlag)	\
    ( (This)->lpVtbl -> CopyData(This,hMDSourceHandle,pszMDSourcePath,hMDDestHandle,pszMDDestPath,dwMDAttributes,dwMDUserType,dwMDDataType,bMDCopyFlag) ) 

#define IMSAdminBase3W_GetDataPaths(This,hMDHandle,pszMDPath,dwMDIdentifier,dwMDDataType,dwMDBufferSize,pszBuffer,pdwMDRequiredBufferSize)	\
    ( (This)->lpVtbl -> GetDataPaths(This,hMDHandle,pszMDPath,dwMDIdentifier,dwMDDataType,dwMDBufferSize,pszBuffer,pdwMDRequiredBufferSize) ) 

#define IMSAdminBase3W_OpenKey(This,hMDHandle,pszMDPath,dwMDAccessRequested,dwMDTimeOut,phMDNewHandle)	\
    ( (This)->lpVtbl -> OpenKey(This,hMDHandle,pszMDPath,dwMDAccessRequested,dwMDTimeOut,phMDNewHandle) ) 

#define IMSAdminBase3W_CloseKey(This,hMDHandle)	\
    ( (This)->lpVtbl -> CloseKey(This,hMDHandle) ) 

#define IMSAdminBase3W_ChangePermissions(This,hMDHandle,dwMDTimeOut,dwMDAccessRequested)	\
    ( (This)->lpVtbl -> ChangePermissions(This,hMDHandle,dwMDTimeOut,dwMDAccessRequested) ) 

#define IMSAdminBase3W_SaveData(This)	\
    ( (This)->lpVtbl -> SaveData(This) ) 

#define IMSAdminBase3W_GetHandleInfo(This,hMDHandle,pmdhiInfo)	\
    ( (This)->lpVtbl -> GetHandleInfo(This,hMDHandle,pmdhiInfo) ) 

#define IMSAdminBase3W_GetSystemChangeNumber(This,pdwSystemChangeNumber)	\
    ( (This)->lpVtbl -> GetSystemChangeNumber(This,pdwSystemChangeNumber) ) 

#define IMSAdminBase3W_GetDataSetNumber(This,hMDHandle,pszMDPath,pdwMDDataSetNumber)	\
    ( (This)->lpVtbl -> GetDataSetNumber(This,hMDHandle,pszMDPath,pdwMDDataSetNumber) ) 

#define IMSAdminBase3W_SetLastChangeTime(This,hMDHandle,pszMDPath,pftMDLastChangeTime,bLocalTime)	\
    ( (This)->lpVtbl -> SetLastChangeTime(This,hMDHandle,pszMDPath,pftMDLastChangeTime,bLocalTime) ) 

#define IMSAdminBase3W_GetLastChangeTime(This,hMDHandle,pszMDPath,pftMDLastChangeTime,bLocalTime)	\
    ( (This)->lpVtbl -> GetLastChangeTime(This,hMDHandle,pszMDPath,pftMDLastChangeTime,bLocalTime) ) 

#define IMSAdminBase3W_KeyExchangePhase1(This)	\
    ( (This)->lpVtbl -> KeyExchangePhase1(This) ) 

#define IMSAdminBase3W_KeyExchangePhase2(This)	\
    ( (This)->lpVtbl -> KeyExchangePhase2(This) ) 

#define IMSAdminBase3W_Backup(This,pszMDBackupLocation,dwMDVersion,dwMDFlags)	\
    ( (This)->lpVtbl -> Backup(This,pszMDBackupLocation,dwMDVersion,dwMDFlags) ) 

#define IMSAdminBase3W_Restore(This,pszMDBackupLocation,dwMDVersion,dwMDFlags)	\
    ( (This)->lpVtbl -> Restore(This,pszMDBackupLocation,dwMDVersion,dwMDFlags) ) 

#define IMSAdminBase3W_EnumBackups(This,pszMDBackupLocation,pdwMDVersion,pftMDBackupTime,dwMDEnumIndex)	\
    ( (This)->lpVtbl -> EnumBackups(This,pszMDBackupLocation,pdwMDVersion,pftMDBackupTime,dwMDEnumIndex) ) 

#define IMSAdminBase3W_DeleteBackup(This,pszMDBackupLocation,dwMDVersion)	\
    ( (This)->lpVtbl -> DeleteBackup(This,pszMDBackupLocation,dwMDVersion) ) 

#define IMSAdminBase3W_UnmarshalInterface(This,piadmbwInterface)	\
    ( (This)->lpVtbl -> UnmarshalInterface(This,piadmbwInterface) ) 

#define IMSAdminBase3W_GetServerGuid(This)	\
    ( (This)->lpVtbl -> GetServerGuid(This) ) 


#define IMSAdminBase3W_BackupWithPasswd(This,pszMDBackupLocation,dwMDVersion,dwMDFlags,pszPasswd)	\
    ( (This)->lpVtbl -> BackupWithPasswd(This,pszMDBackupLocation,dwMDVersion,dwMDFlags,pszPasswd) ) 

#define IMSAdminBase3W_RestoreWithPasswd(This,pszMDBackupLocation,dwMDVersion,dwMDFlags,pszPasswd)	\
    ( (This)->lpVtbl -> RestoreWithPasswd(This,pszMDBackupLocation,dwMDVersion,dwMDFlags,pszPasswd) ) 

#define IMSAdminBase3W_Export(This,pszPasswd,pszFileName,pszSourcePath,dwMDFlags)	\
    ( (This)->lpVtbl -> Export(This,pszPasswd,pszFileName,pszSourcePath,dwMDFlags) ) 

#define IMSAdminBase3W_Import(This,pszPasswd,pszFileName,pszSourcePath,pszDestPath,dwMDFlags)	\
    ( (This)->lpVtbl -> Import(This,pszPasswd,pszFileName,pszSourcePath,pszDestPath,dwMDFlags) ) 

#define IMSAdminBase3W_RestoreHistory(This,pszMDHistoryLocation,dwMDMajorVersion,dwMDMinorVersion,dwMDFlags)	\
    ( (This)->lpVtbl -> RestoreHistory(This,pszMDHistoryLocation,dwMDMajorVersion,dwMDMinorVersion,dwMDFlags) ) 

#define IMSAdminBase3W_EnumHistory(This,pszMDHistoryLocation,pdwMDMajorVersion,pdwMDMinorVersion,pftMDHistoryTime,dwMDEnumIndex)	\
    ( (This)->lpVtbl -> EnumHistory(This,pszMDHistoryLocation,pdwMDMajorVersion,pdwMDMinorVersion,pftMDHistoryTime,dwMDEnumIndex) ) 


#define IMSAdminBase3W_GetChildPaths(This,hMDHandle,pszMDPath,cchMDBufferSize,pszBuffer,pcchMDRequiredBufferSize)	\
    ( (This)->lpVtbl -> GetChildPaths(This,hMDHandle,pszMDPath,cchMDBufferSize,pszBuffer,pcchMDRequiredBufferSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSAdminBase3W_INTERFACE_DEFINED__ */


#ifndef __IMSImpExpHelpW_INTERFACE_DEFINED__
#define __IMSImpExpHelpW_INTERFACE_DEFINED__

/* interface IMSImpExpHelpW */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IMSImpExpHelpW;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("29FF67FF-8050-480f-9F30-CC41635F2F9D")
    IMSImpExpHelpW : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumeratePathsInFile( 
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszFileName,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszKeyType,
            /* [in] */ DWORD dwMDBufferSize,
            /* [size_is][unique][out][in] */ __RPC__inout_ecount_full_opt(dwMDBufferSize) WCHAR *pszBuffer,
            /* [out] */ __RPC__out DWORD *pdwMDRequiredBufferSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSImpExpHelpWVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSImpExpHelpW * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSImpExpHelpW * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSImpExpHelpW * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumeratePathsInFile )( 
            __RPC__in IMSImpExpHelpW * This,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszFileName,
            /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszKeyType,
            /* [in] */ DWORD dwMDBufferSize,
            /* [size_is][unique][out][in] */ __RPC__inout_ecount_full_opt(dwMDBufferSize) WCHAR *pszBuffer,
            /* [out] */ __RPC__out DWORD *pdwMDRequiredBufferSize);
        
        END_INTERFACE
    } IMSImpExpHelpWVtbl;

    interface IMSImpExpHelpW
    {
        CONST_VTBL struct IMSImpExpHelpWVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSImpExpHelpW_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSImpExpHelpW_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSImpExpHelpW_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSImpExpHelpW_EnumeratePathsInFile(This,pszFileName,pszKeyType,dwMDBufferSize,pszBuffer,pdwMDRequiredBufferSize)	\
    ( (This)->lpVtbl -> EnumeratePathsInFile(This,pszFileName,pszKeyType,dwMDBufferSize,pszBuffer,pdwMDRequiredBufferSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSImpExpHelpW_INTERFACE_DEFINED__ */


#ifndef __IMSAdminBaseSinkW_INTERFACE_DEFINED__
#define __IMSAdminBaseSinkW_INTERFACE_DEFINED__

/* interface IMSAdminBaseSinkW */
/* [unique][async_uuid][uuid][object] */ 


EXTERN_C const IID IID_IMSAdminBaseSinkW;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A9E69612-B80D-11d0-B9B9-00A0C922E750")
    IMSAdminBaseSinkW : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SinkNotify( 
            /* [in] */ DWORD dwMDNumElements,
            /* [size_is][in] */ __RPC__in_ecount_full(dwMDNumElements) MD_CHANGE_OBJECT_W pcoChangeList[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShutdownNotify( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSAdminBaseSinkWVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSAdminBaseSinkW * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSAdminBaseSinkW * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSAdminBaseSinkW * This);
        
        HRESULT ( STDMETHODCALLTYPE *SinkNotify )( 
            __RPC__in IMSAdminBaseSinkW * This,
            /* [in] */ DWORD dwMDNumElements,
            /* [size_is][in] */ __RPC__in_ecount_full(dwMDNumElements) MD_CHANGE_OBJECT_W pcoChangeList[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *ShutdownNotify )( 
            __RPC__in IMSAdminBaseSinkW * This);
        
        END_INTERFACE
    } IMSAdminBaseSinkWVtbl;

    interface IMSAdminBaseSinkW
    {
        CONST_VTBL struct IMSAdminBaseSinkWVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSAdminBaseSinkW_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSAdminBaseSinkW_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSAdminBaseSinkW_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSAdminBaseSinkW_SinkNotify(This,dwMDNumElements,pcoChangeList)	\
    ( (This)->lpVtbl -> SinkNotify(This,dwMDNumElements,pcoChangeList) ) 

#define IMSAdminBaseSinkW_ShutdownNotify(This)	\
    ( (This)->lpVtbl -> ShutdownNotify(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSAdminBaseSinkW_INTERFACE_DEFINED__ */


#ifndef __AsyncIMSAdminBaseSinkW_INTERFACE_DEFINED__
#define __AsyncIMSAdminBaseSinkW_INTERFACE_DEFINED__

/* interface AsyncIMSAdminBaseSinkW */
/* [uuid][unique][object] */ 


EXTERN_C const IID IID_AsyncIMSAdminBaseSinkW;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A9E69613-B80D-11d0-B9B9-00A0C922E750")
    AsyncIMSAdminBaseSinkW : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Begin_SinkNotify( 
            /* [in] */ DWORD dwMDNumElements,
            /* [size_is][in] */ __RPC__in_xcount_full(dwMDNumElements) MD_CHANGE_OBJECT_W pcoChangeList[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_SinkNotify( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_ShutdownNotify( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_ShutdownNotify( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AsyncIMSAdminBaseSinkWVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in AsyncIMSAdminBaseSinkW * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in AsyncIMSAdminBaseSinkW * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in AsyncIMSAdminBaseSinkW * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_SinkNotify )( 
            __RPC__in AsyncIMSAdminBaseSinkW * This,
            /* [in] */ DWORD dwMDNumElements,
            /* [size_is][in] */ __RPC__in_xcount_full(dwMDNumElements) MD_CHANGE_OBJECT_W pcoChangeList[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_SinkNotify )( 
            __RPC__in AsyncIMSAdminBaseSinkW * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_ShutdownNotify )( 
            __RPC__in AsyncIMSAdminBaseSinkW * This);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_ShutdownNotify )( 
            __RPC__in AsyncIMSAdminBaseSinkW * This);
        
        END_INTERFACE
    } AsyncIMSAdminBaseSinkWVtbl;

    interface AsyncIMSAdminBaseSinkW
    {
        CONST_VTBL struct AsyncIMSAdminBaseSinkWVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AsyncIMSAdminBaseSinkW_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AsyncIMSAdminBaseSinkW_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AsyncIMSAdminBaseSinkW_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AsyncIMSAdminBaseSinkW_Begin_SinkNotify(This,dwMDNumElements,pcoChangeList)	\
    ( (This)->lpVtbl -> Begin_SinkNotify(This,dwMDNumElements,pcoChangeList) ) 

#define AsyncIMSAdminBaseSinkW_Finish_SinkNotify(This)	\
    ( (This)->lpVtbl -> Finish_SinkNotify(This) ) 

#define AsyncIMSAdminBaseSinkW_Begin_ShutdownNotify(This)	\
    ( (This)->lpVtbl -> Begin_ShutdownNotify(This) ) 

#define AsyncIMSAdminBaseSinkW_Finish_ShutdownNotify(This)	\
    ( (This)->lpVtbl -> Finish_ShutdownNotify(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AsyncIMSAdminBaseSinkW_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_iadmw_0000_0005 */
/* [local] */ 

#endif


extern RPC_IF_HANDLE __MIDL_itf_iadmw_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iadmw_0000_0005_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* [local] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_SetData_Proxy( 
    IMSAdminBaseW * This,
    /* [in] */ METADATA_HANDLE hMDHandle,
    /* [string][in][unique] */ LPCWSTR pszMDPath,
    /* [in] */ PMETADATA_RECORD pmdrMDData);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_SetData_Stub( 
    __RPC__in IMSAdminBaseW * This,
    /* [in] */ METADATA_HANDLE hMDHandle,
    /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
    /* [in] */ __RPC__in PMETADATA_RECORD pmdrMDData);

/* [local] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_GetData_Proxy( 
    IMSAdminBaseW * This,
    /* [in] */ METADATA_HANDLE hMDHandle,
    /* [string][in][unique] */ LPCWSTR pszMDPath,
    /* [out][in] */ PMETADATA_RECORD pmdrMDData,
    /* [out] */ DWORD *pdwMDRequiredDataLen);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_GetData_Stub( 
    __RPC__in IMSAdminBaseW * This,
    /* [in] */ METADATA_HANDLE hMDHandle,
    /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
    /* [out][in] */ __RPC__inout PMETADATA_RECORD pmdrMDData,
    /* [out] */ __RPC__out DWORD *pdwMDRequiredDataLen,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppDataBlob);

/* [local] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_EnumData_Proxy( 
    IMSAdminBaseW * This,
    /* [in] */ METADATA_HANDLE hMDHandle,
    /* [string][in][unique] */ LPCWSTR pszMDPath,
    /* [out][in] */ PMETADATA_RECORD pmdrMDData,
    /* [in] */ DWORD dwMDEnumDataIndex,
    /* [out] */ DWORD *pdwMDRequiredDataLen);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_EnumData_Stub( 
    __RPC__in IMSAdminBaseW * This,
    /* [in] */ METADATA_HANDLE hMDHandle,
    /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
    /* [out][in] */ __RPC__inout PMETADATA_RECORD pmdrMDData,
    /* [in] */ DWORD dwMDEnumDataIndex,
    /* [out] */ __RPC__out DWORD *pdwMDRequiredDataLen,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppDataBlob);

/* [local] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_GetAllData_Proxy( 
    IMSAdminBaseW * This,
    /* [in] */ METADATA_HANDLE hMDHandle,
    /* [string][in][unique] */ LPCWSTR pszMDPath,
    /* [in] */ DWORD dwMDAttributes,
    /* [in] */ DWORD dwMDUserType,
    /* [in] */ DWORD dwMDDataType,
    /* [out] */ DWORD *pdwMDNumDataEntries,
    /* [out] */ DWORD *pdwMDDataSetNumber,
    /* [in] */ DWORD dwMDBufferSize,
    /* [size_is][out] */ unsigned char *pbMDBuffer,
    /* [out] */ DWORD *pdwMDRequiredBufferSize);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_GetAllData_Stub( 
    __RPC__in IMSAdminBaseW * This,
    /* [in] */ METADATA_HANDLE hMDHandle,
    /* [string][in][unique] */ __RPC__in_opt_string LPCWSTR pszMDPath,
    /* [in] */ DWORD dwMDAttributes,
    /* [in] */ DWORD dwMDUserType,
    /* [in] */ DWORD dwMDDataType,
    /* [out] */ __RPC__out DWORD *pdwMDNumDataEntries,
    /* [out] */ __RPC__out DWORD *pdwMDDataSetNumber,
    /* [in] */ DWORD dwMDBufferSize,
    /* [out] */ __RPC__out DWORD *pdwMDRequiredBufferSize,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppDataBlob);

/* [restricted][local] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_KeyExchangePhase1_Proxy( 
    IMSAdminBaseW * This);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_KeyExchangePhase1_Stub( 
    __RPC__in IMSAdminBaseW * This,
    /* [in][unique] */ __RPC__in_opt struct _IIS_CRYPTO_BLOB *pClientKeyExchangeKeyBlob,
    /* [in][unique] */ __RPC__in_opt struct _IIS_CRYPTO_BLOB *pClientSignatureKeyBlob,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppServerKeyExchangeKeyBlob,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppServerSignatureKeyBlob,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppServerSessionKeyBlob);

/* [restricted][local] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_KeyExchangePhase2_Proxy( 
    IMSAdminBaseW * This);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_KeyExchangePhase2_Stub( 
    __RPC__in IMSAdminBaseW * This,
    /* [in][unique] */ __RPC__in_opt struct _IIS_CRYPTO_BLOB *pClientSessionKeyBlob,
    /* [in][unique] */ __RPC__in_opt struct _IIS_CRYPTO_BLOB *pClientHashBlob,
    /* [out] */ __RPC__deref_out_opt struct _IIS_CRYPTO_BLOB **ppServerHashBlob);

/* [restricted][local] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_GetServerGuid_Proxy( 
    IMSAdminBaseW * This);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IMSAdminBaseW_GetServerGuid_Stub( 
    __RPC__in IMSAdminBaseW * This,
    /* [out] */ __RPC__out GUID *pServerGuid);



/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IAGuid.h ===
//--------------------------------------------------------------------------
//  This is part of the Microsoft Tablet PC Platform SDK
//  Copyright (C) 2002 Microsoft Corporation
//  All rights reserved.
//
//
// Module:       
//      IAGuid.h
//
//--------------------------------------------------------------------------

#if !defined(_IA_GUID)
#define _IA_GUID

#pragma warning(disable : 4115)
#include <objbase.h>
#pragma warning(default : 4115)

EXTERN_C const GUID NULLGUID;

#define INDEX_GUID_ROTATEDBOUNDINGBOX       0
#define INDEX_GUID_CUSTOMRECOGNIZERID       1
#define INDEX_GUID_SHAPENAME                2
#define INDEX_GUID_ALIGNMENTLEVEL           3
#define INDEX_GUID_NODEDATA                 4
#define INDEX_GUID_SEMANTICTYPE             5
#define INDEX_GUID_CONTENTTYPE              6
#define INDEX_GUID_ASCENDER                 7
#define INDEX_GUID_DESCENDER                8
#define INDEX_GUID_BASELINE                 9
#define INDEX_GUID_MIDLINE                 10
#define INDEX_GUID_RECOGNIZEDSTRING        11
#define INDEX_GUID_CONFIDENCELEVEL         12
#define INDEX_GUID_HOTPOINTS               13
#define INDEX_GUID_CENTROID                14


#define INDEX_GUID_ANALYSISHINTNAME         0
#define INDEX_GUID_GUIDE                    1
#define INDEX_GUID_WORDMODE                 2
#define INDEX_GUID_COERCETOFACTOID          3
#define INDEX_GUID_ALLOWPARTIALDICTIONARYTERMS 4
#define INDEX_GUID_PREFIXTEXT               5
#define INDEX_GUID_SUFFIXTEXT               6
#define INDEX_GUID_FACTOID                  7
#define INDEX_GUID_WORDLIST                 8
#define INDEX_GUID_TOPINKBREAKSONLY         9
#define INDEX_GUID_ENABLEDUNICODECHARACTERRANGES 10


#define INDEX_GUID_ROOT                     0
#define INDEX_GUID_UNCLASSIFIEDINK          1
#define INDEX_GUID_WRITINGREGION            2
#define INDEX_GUID_ANALYSISHINT             3
#define INDEX_GUID_OBJECT                   4
#define INDEX_GUID_INKDRAWING               5
#define INDEX_GUID_IMAGE                    6
#define INDEX_GUID_PARAGRAPH                7
#define INDEX_GUID_LINE                     8
#define INDEX_GUID_INKBULLET                9
#define INDEX_GUID_INKWORD                 10
#define INDEX_GUID_TEXTWORD                11
#define INDEX_GUID_CUSTOMRECOGNIZER        12

#define INDEX_INK_ANALYSIS_GUID_MAX                   128

#if !defined(INITGUID)

EXTERN_C const ULONG KNOWN_INK_ANALYSIS_GUID_BASE_INDEX;
EXTERN_C const ULONG KNOWN_INK_ANALYSIS_GUID_INDEX_LIMIT;

EXTERN_C const ULONG CUSTOM_INK_ANALYSIS_GUID_BASE_INDEX;

EXTERN_C const GUID FAR KNOWN_INK_ANALYSIS_GUIDS[];

EXTERN_C const ULONG KNOWN_INK_ANALYSIS_GUID_COUNT;

#if defined(__cplusplus)

// Guids for predefined Context Node Properties
EXTERN_C const GUID& GUID_CNP_ROTATEDBOUNDINGBOX;
EXTERN_C const GUID& GUID_CNP_SHAPENAME;
EXTERN_C const GUID& GUID_CNP_ALIGNMENTLEVEL;
EXTERN_C const GUID& GUID_CNP_CONTENTTYPE;
EXTERN_C const GUID& GUID_CNP_NODEDATA;
EXTERN_C const GUID& GUID_CNP_ASCENDER;
EXTERN_C const GUID& GUID_CNP_DESCENDER;
EXTERN_C const GUID& GUID_CNP_BASELINE;
EXTERN_C const GUID& GUID_CNP_MIDLINE;
EXTERN_C const GUID& GUID_CNP_RECOGNIZEDSTRING;
EXTERN_C const GUID& GUID_CNP_CUSTOMRECOGNIZERID;
EXTERN_C const GUID& GUID_CNP_CONFIDENCELEVEL;
EXTERN_C const GUID& GUID_CNP_SEMANTICTYPE;
EXTERN_C const GUID& GUID_CNP_HOTPOINTS;
EXTERN_C const GUID& GUID_CNP_CENTROID;

// Guids for predefined AnalysisHint properties
EXTERN_C const GUID& GUID_AHP_ANALYSISHINTNAME;
EXTERN_C const GUID& GUID_AHP_GUIDE;
EXTERN_C const GUID& GUID_AHP_WORDMODE;
EXTERN_C const GUID& GUID_AHP_COERCETOFACTOID;
EXTERN_C const GUID& GUID_AHP_ALLOWPARTIALDICTIONARYTERMS;
EXTERN_C const GUID& GUID_AHP_PREFIXTEXT;
EXTERN_C const GUID& GUID_AHP_SUFFIXTEXT;
EXTERN_C const GUID& GUID_AHP_FACTOID;
EXTERN_C const GUID& GUID_AHP_WORDLIST;
EXTERN_C const GUID& GUID_AHP_TOPINKBREAKSONLY;
EXTERN_C const GUID& GUID_AHP_ENABLEDUNICODECHARACTERRANGES;


// Guids for predefined Context Node Type
EXTERN_C const GUID& GUID_CNT_ROOT;
EXTERN_C const GUID& GUID_CNT_UNCLASSIFIEDINK;
EXTERN_C const GUID& GUID_CNT_WRITINGREGION;
EXTERN_C const GUID& GUID_CNT_ANALYSISHINT;
EXTERN_C const GUID& GUID_CNT_OBJECT;
EXTERN_C const GUID& GUID_CNT_INKDRAWING;
EXTERN_C const GUID& GUID_CNT_IMAGE;
EXTERN_C const GUID& GUID_CNT_PARAGRAPH;
EXTERN_C const GUID& GUID_CNT_LINE;
EXTERN_C const GUID& GUID_CNT_INKBULLET;
EXTERN_C const GUID& GUID_CNT_INKWORD;
EXTERN_C const GUID& GUID_CNT_TEXTWORD;
EXTERN_C const GUID& GUID_CNT_CUSTOMRECOGNIZER;

#endif // of #if defined(__cplusplus)

#else /* of #if !defined(INITGUID) */


#define MAX_KNOWN_INK_ANALYSIS_GUID_INDEX    128

EXTERN_C const ULONG KNOWN_INK_ANALYSIS_GUID_INDEX_LIMIT = MAX_KNOWN_INK_ANALYSIS_GUID_INDEX;
EXTERN_C const ULONG CUSTOM_INK_ANALYSIS_GUID_BASE_INDEX = MAX_KNOWN_INK_ANALYSIS_GUID_INDEX;

// We need to have the real count of GUID values here to satisfy PreFix

EXTERN_C const GUID FAR KNOWN_INK_ANALYSIS_GUIDS[15] = 
{
    // Known Properties
    { 0x9DABD067, 0x4748, 0x4e35, { 0xBA, 0x1F, 0xF6, 0x43, 0xFB, 0xE6, 0x7C, 0x62 } },   // RotatedBoundingBox
    { 0xCE620704, 0x71F7, 0x4C87, { 0xA8, 0x55, 0x8b, 0x66, 0xCD, 0x70, 0xC7, 0x67 } },   // CustomAnalysisRecognizerId
    { 0x83AA077C, 0x955A, 0x4EF8, { 0x80, 0x15, 0xD5, 0x32, 0x35, 0xEB, 0x15, 0x30 } },   // ShapeName
    { 0xAE0BFB16, 0xB9DF, 0x4399, { 0x82, 0x28, 0x1F, 0x5B, 0x6D, 0x90, 0x56, 0xED } },   // Indent Level
    { 0xF5D5FB58, 0x4AA1, 0x448A, { 0xA9, 0x00, 0x40, 0x5F, 0x6D, 0xA1, 0xF8, 0x8D } },   // Node Data
    { 0xE0FDA714, 0xD3A9, 0x4CEE, { 0xBB, 0xB6, 0xAD, 0x0C, 0x8A, 0xA7, 0x18, 0x76 } },   // Semantic type
    { 0x5BC84266, 0x7D7E, 0x4CCC, { 0xA8, 0x1F, 0x16, 0xA2, 0x56, 0xF6, 0xCB, 0x30 } },   // Content Type

    // Recognition Result Properties
    { 0xFFBE58C0, 0x9895, 0x4A5d, { 0xB0, 0x6B, 0xC7, 0xC9, 0x77, 0x4E, 0x32, 0x47 } },   // Ascender
    { 0x106F1013, 0x0517, 0x4BB3, { 0x83, 0x28, 0x2D, 0x6C, 0xBA, 0xB1, 0x00, 0xE3 } },   // Descender
    { 0x19859AE9, 0x35ED, 0x4D53, { 0x91, 0x9D, 0xF7, 0x05, 0xEC, 0xA8, 0x34, 0x73 } },   // Midline
    { 0xEC351E6F, 0xF560, 0x4C0F, { 0xAD, 0x13, 0x17, 0xC0, 0xCD, 0x49, 0x8D, 0xAF } },   // BaseLine 
    { 0x25979182, 0x2D6B, 0x44A3, { 0xAC, 0xD6, 0x5A, 0x2A, 0xD5, 0x1C, 0xD0, 0x5D } },   // TopString
    
    // Recognition Lattice Properties
    { 0x7DFE11A7, 0xFB5D, 0x4958, { 0x87, 0x65, 0x15, 0x4A, 0xDF, 0x0D, 0x83, 0x3F } },   // ConfidenceLevel
    { 0x4F344747, 0xBC2D, 0x471E, { 0x8C, 0xBA, 0x00, 0x2D, 0x11, 0xA3, 0x6E, 0x32 } },   // HotPoints
    { 0xFDC4935E, 0xF009, 0x4C92, { 0x8B, 0x17, 0x37, 0x54, 0xCC, 0xAB, 0x0D, 0xF4 } },   // Centroid
};

EXTERN_C const GUID FAR KNOWN_INK_ANALYSIS_HINT_GUIDS[11] =
{
    // AnalysisHint Properties
    { 0x2967B8B1, 0x739D, 0x4837, { 0x99, 0xA2, 0x50, 0xFD, 0xA9, 0x70, 0x35, 0x69 } },   // AnalysisHintName
    { 0x6D112F6B, 0xD5F9, 0x4c6c, { 0xA4, 0x9C, 0x3A, 0x7C, 0xB8, 0xCB, 0x7E, 0x9A } },   // Guide
    { 0x08D18D88, 0xDD81, 0x4489, { 0x80, 0xD6, 0x11, 0x19, 0x7F, 0x83, 0x63, 0x16 } },   // WordMode
    { 0x4A7A02B9, 0x3D6E, 0x4127, { 0x94, 0x53, 0x12, 0x91, 0x1F, 0x36, 0xC6, 0xA4 } },   // Coerce
    { 0xA41B59B6, 0x3D34, 0x4c06, { 0x85, 0x91, 0x3B, 0x88, 0xA8, 0xA5, 0xAE, 0x00 } },   // AllowPartialDictionaryTerms
    { 0xF77659DC, 0x7480, 0x4598, { 0xAA, 0xB4, 0xDC, 0x9B, 0x28, 0x05, 0x59, 0xF1 } },   // PrefixText
    { 0xAF720D9E, 0x7A41, 0x4099, { 0x85, 0x59, 0x2A, 0x50, 0x8B, 0x35, 0xCC, 0x87 } },   // SuffixText
    { 0x9D104BEA, 0x822B, 0x430b, { 0xBA, 0x6A, 0xE0, 0x53, 0x30, 0xDC, 0xC7, 0x0F } },   // Factoid
    { 0xFCEBB0BD, 0xE304, 0x4966, { 0x80, 0x22, 0x09, 0xCD, 0x4B, 0x45, 0xCD, 0x3D } },   // Wordlist
    { 0x131F5E3B, 0x2B85, 0x43a2, { 0x90, 0xD0, 0xE7, 0x9B, 0x1F, 0x0F, 0xAE, 0x0E } },   // TopInkBreaksOnly
    { 0x02AFC9E0, 0xCB15, 0x42b0, { 0xAC, 0x66, 0x29, 0xF3, 0xD8, 0x22, 0xC5, 0xA2 } },   // EnabledUnicodeCharacterRanges
};

// We need to have the real count of GUID values here to satisfy PreFix

EXTERN_C const GUID FAR KNOWN_NODETYPE_GUIDS[13] = 
{
    { 0xA219A8C3, 0xCEB5, 0x4E26, { 0xBC, 0x66, 0xE8, 0xE3, 0xB4, 0xF9, 0xAA, 0xE1 } },   // Root
    { 0x1CC7E245, 0xD03D, 0x4DF2, { 0x8A, 0x81, 0xA5, 0x5C, 0xF7, 0x40, 0x3E, 0xB5 } },   // Unclassified
    { 0xEC91D634, 0x4105, 0x4C84, { 0x9E, 0x4D, 0xF6, 0x9E, 0xBA, 0x17, 0xFA, 0xEC } },   // WritingRegion
    { 0xB3E85327, 0x34D8, 0x4A53, { 0x9B, 0xED, 0xC4, 0xAA, 0x61, 0x24, 0x28, 0xD3 } },   // AnalysisHint
    { 0x9D81B680, 0x534F, 0x4FFF, { 0xB9, 0xD0, 0xAE, 0x39, 0x95, 0xEA, 0x37, 0x86 } },   // Object
    { 0xAA19D319, 0x57CD, 0x4503, { 0x93, 0x50, 0x6C, 0x0F, 0xB7, 0x66, 0xA4, 0xB8 } },   // InkDrawing
    { 0x142D59BA, 0x3E9A, 0x4EE0, { 0xBC, 0x91, 0x19, 0x9A, 0x7B, 0x7F, 0x7E, 0x17 } },   // Image
    { 0x65B9CE71, 0xA963, 0x48AD, { 0x91, 0x3F, 0x41, 0x1E, 0x81, 0xC9, 0x85, 0xF0 } },   // Paragraph
    { 0x67D98603, 0xB3C5, 0x4261, { 0x82, 0x56, 0xAD, 0xC3, 0xCE, 0xA2, 0xAD, 0x67 } },   // Line
    { 0x88A74BDF, 0x43FA, 0x4A15, { 0x89, 0x0B, 0x9A, 0x33, 0x86, 0x5A, 0x60, 0x91 } },   // InkBullet
    { 0xBD6AAA31, 0x588B, 0x4246, { 0x86, 0x50, 0x4E, 0x78, 0x59, 0x23, 0x30, 0x17 } },   // InkWord
    { 0x4F84A842, 0x2936, 0x464C, { 0xAB, 0x61, 0x37, 0x52, 0x45, 0x1C, 0x21, 0x29 } },   // TextWord
    { 0x8A269227, 0x2BD1, 0x4281, { 0xAB, 0x62, 0x79, 0xFA, 0x24, 0x18, 0xA5, 0xAC } },   // CustomRecognizer

};


EXTERN_C const ULONG KNOWN_INK_ANALYSIS_GUID_COUNT = sizeof(KNOWN_INK_ANALYSIS_GUIDS) / sizeof(GUID);

#if defined(__cplusplus)

EXTERN_C const GUID& GUID_CNP_ROTATEDBOUNDINGBOX            = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_ROTATEDBOUNDINGBOX             ]; 
EXTERN_C const GUID& GUID_CNP_CUSTOMRECOGNIZERID            = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_CUSTOMRECOGNIZERID             ]; 
EXTERN_C const GUID& GUID_CNP_SHAPENAME                     = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_SHAPENAME                      ]; 
EXTERN_C const GUID& GUID_CNP_ALIGNMENTLEVEL                = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_ALIGNMENTLEVEL                 ]; 
EXTERN_C const GUID& GUID_CNP_CONTENTTYPE                   = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_CONTENTTYPE                    ]; 
EXTERN_C const GUID& GUID_CNP_NODEDATA                      = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_NODEDATA                       ];
EXTERN_C const GUID& GUID_CNP_SEMANTICTYPE                  = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_SEMANTICTYPE                   ];
EXTERN_C const GUID& GUID_CNP_ASCENDER                      = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_ASCENDER                       ]; 
EXTERN_C const GUID& GUID_CNP_DESCENDER                     = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_DESCENDER                      ]; 
EXTERN_C const GUID& GUID_CNP_BASELINE                      = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_BASELINE                       ]; 
EXTERN_C const GUID& GUID_CNP_MIDLINE                       = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_MIDLINE                        ]; 
EXTERN_C const GUID& GUID_CNP_RECOGNIZEDSTRING              = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_RECOGNIZEDSTRING               ]; 
EXTERN_C const GUID& GUID_CNP_CONFIDENCELEVEL               = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_CONFIDENCELEVEL                ];
EXTERN_C const GUID& GUID_CNP_HOTPOINTS                     = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_HOTPOINTS                      ];
EXTERN_C const GUID& GUID_CNP_CENTROID                      = KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_CENTROID                       ];

EXTERN_C const GUID& GUID_AHP_ANALYSISHINTNAME              = KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_ANALYSISHINTNAME             ]; 
EXTERN_C const GUID& GUID_AHP_GUIDE                         = KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_GUIDE                        ]; 
EXTERN_C const GUID& GUID_AHP_WORDMODE                      = KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_WORDMODE                     ]; 
EXTERN_C const GUID& GUID_AHP_COERCETOFACTOID               = KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_COERCETOFACTOID              ]; 
EXTERN_C const GUID& GUID_AHP_ALLOWPARTIALDICTIONARYTERMS   = KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_ALLOWPARTIALDICTIONARYTERMS  ]; 
EXTERN_C const GUID& GUID_AHP_PREFIXTEXT                    = KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_PREFIXTEXT                   ]; 
EXTERN_C const GUID& GUID_AHP_SUFFIXTEXT                    = KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_SUFFIXTEXT                   ]; 
EXTERN_C const GUID& GUID_AHP_FACTOID                       = KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_FACTOID                      ]; 
EXTERN_C const GUID& GUID_AHP_WORDLIST                      = KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_WORDLIST                     ]; 
EXTERN_C const GUID& GUID_AHP_TOPINKBREAKSONLY              = KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_TOPINKBREAKSONLY             ]; 
EXTERN_C const GUID& GUID_AHP_ENABLEDUNICODECHARACTERRANGES = KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_ENABLEDUNICODECHARACTERRANGES]; 


EXTERN_C const GUID& GUID_CNT_ROOT                          = KNOWN_NODETYPE_GUIDS[INDEX_GUID_ROOT                  ];
EXTERN_C const GUID& GUID_CNT_UNCLASSIFIEDINK               = KNOWN_NODETYPE_GUIDS[INDEX_GUID_UNCLASSIFIEDINK       ];
EXTERN_C const GUID& GUID_CNT_WRITINGREGION                 = KNOWN_NODETYPE_GUIDS[INDEX_GUID_WRITINGREGION         ];
EXTERN_C const GUID& GUID_CNT_ANALYSISHINT                  = KNOWN_NODETYPE_GUIDS[INDEX_GUID_ANALYSISHINT          ];
EXTERN_C const GUID& GUID_CNT_OBJECT                        = KNOWN_NODETYPE_GUIDS[INDEX_GUID_OBJECT                ];
EXTERN_C const GUID& GUID_CNT_INKDRAWING                    = KNOWN_NODETYPE_GUIDS[INDEX_GUID_INKDRAWING            ];
EXTERN_C const GUID& GUID_CNT_IMAGE                         = KNOWN_NODETYPE_GUIDS[INDEX_GUID_IMAGE                 ];
EXTERN_C const GUID& GUID_CNT_PARAGRAPH                     = KNOWN_NODETYPE_GUIDS[INDEX_GUID_PARAGRAPH             ];
EXTERN_C const GUID& GUID_CNT_LINE                          = KNOWN_NODETYPE_GUIDS[INDEX_GUID_LINE                  ];
EXTERN_C const GUID& GUID_CNT_INKBULLET                     = KNOWN_NODETYPE_GUIDS[INDEX_GUID_INKBULLET             ];
EXTERN_C const GUID& GUID_CNT_INKWORD                       = KNOWN_NODETYPE_GUIDS[INDEX_GUID_INKWORD               ];
EXTERN_C const GUID& GUID_CNT_TEXTWORD                      = KNOWN_NODETYPE_GUIDS[INDEX_GUID_TEXTWORD              ];
EXTERN_C const GUID& GUID_CNT_CUSTOMRECOGNIZER              = KNOWN_NODETYPE_GUIDS[INDEX_GUID_CUSTOMRECOGNIZER      ];

#endif //of #if defined(__cplusplus)

#endif /* of #if !defined(INITGUID) */

#if !defined(__cplusplus)

#define GUID_CNP_ROTATEDBOUNDINGBOX            (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_ROTATEDBOUNDINGBOX           ]))) 
#define GUID_CNP_CUSTOMRECOGNIZERID            (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_CUSTOMRECOGNIZERID           ])))
#define GUID_CNP_SHAPENAME                     (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_SHAPENAME                    ]))) 
#define GUID_CNP_ALIGNMENTLEVEL                (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_ALIGNMENTLEVEL               ])))
#define GUID_CNP_CONTENTTYPE                   (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_CONTENTTYPE                  ])))
#define GUID_CNP_NODEDATA                      (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_NODEDATA                     ])))
#define GUID_CNP_SEMANTICTYPE                  (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_SEMANTICTYPE                 ])))
#define GUID_CNP_ASCENDER                      (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_ASCENDER                    ]))) 
#define GUID_CNP_DESCENDER                     (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_DESCENDER                   ]))) 
#define GUID_CNP_BASELINE                      (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_BASELINE                     ]))) 
#define GUID_CNP_MIDLINE                       (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_MIDLINE                      ]))) 
#define GUID_CNP_RECOGNIZEDSTRING              (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_RECOGNIZEDSTRING             ]))) 
#define GUID_CNP_CONFIDENCELEVEL               (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_CONFIDENCELEVEL              ])))
#define GUID_CNP_HOTPOINTS                     (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_HOTPOINTS                    ])))
#define GUID_CNP_CENTROID                      (*((GUID*)&(KNOWN_INK_ANALYSIS_GUIDS[INDEX_GUID_CENTROID                     ])))

#define GUID_AHP_ANALYSISHINTNAME              (*((GUID*)&(KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_ANALYSISHINTNAME             ]))) 
#define GUID_AHP_GUIDE                         (*((GUID*)&(KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_GUIDE                        ]))) 
#define GUID_AHP_WORDMODE                      (*((GUID*)&(KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_WORDMODE                     ]))) 
#define GUID_AHP_COERCETOFACTOID               (*((GUID*)&(KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_COERCETOFACTOID              ]))) 
#define GUID_AHP_ALLOWPARTIALDICTIONARYTERMS   (*((GUID*)&(KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_ALLOWPARTIALDICTIONARYTERMS  ]))) 
#define GUID_AHP_PREFIXTEXT                    (*((GUID*)&(KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_PREFIXTEXT                   ]))) 
#define GUID_AHP_SUFFIXTEXT                    (*((GUID*)&(KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_SUFFIXTEXT                   ]))) 
#define GUID_AHP_FACTOID                       (*((GUID*)&(KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_FACTOID                      ]))) 
#define GUID_AHP_WORDLIST                      (*((GUID*)&(KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_WORDLIST                     ])))
#define GUID_AHP_TOPINKBREAKSONLY              (*((GUID*)&(KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_TOPINKBREAKSONLY             ])))
#define GUID_AHP_ENABLEDUNICODECHARACTERRANGES (*((GUID*)&(KNOWN_INK_ANALYSIS_HINT_GUIDS[INDEX_GUID_ENABLEDUNICODECHARACTERRANGES])))


#define GUID_CNT_ROOT                          (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_ROOT                  ])))
#define GUID_CNT_UNCLASSIFIEDINKNODE           (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_UNCLASSIFIEDINK       ])))
#define GUID_CNT_WRITINGREGION                 (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_WRITINGREGION         ])))
#define GUID_CNT_ANALYSISHINT                  (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_ANALYSISHINT          ])))
#define GUID_CNT_OBJECT                        (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_OBJECT                ])))
#define GUID_CNT_INKDRAWING                    (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_INKDRAWING            ])))
#define GUID_CNT_IMAGE                         (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_IMAGE                 ])))
#define GUID_CNT_PARAGRAPH                     (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_PARAGRAPH             ])))
#define GUID_CNT_LINE                          (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_LINE                  ])))
#define GUID_CNT_INKBULLET                     (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_INKBULLET             ])))
#define GUID_CNT_INKWORD                       (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_INKWORD               ])))
#define GUID_CNT_TEXTWORD                      (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_TEXTWORD              ])))
#define GUID_CNT_CUSTOMRECOGNIZER              (*((GUID*)&(KNOWN_NODETYPE_GUIDS[INDEX_GUID_CUSTOMRECOGNIZER      ])))

#endif //of #if !defined(__cplusplus)

#endif /* of #if !defined(_WISP_GUID) */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\ichannelcredentials.h ===
//-----------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//-----------------------------------------------------------------------------
//=--------------------------------------------------------------------------=
// IChannelCredentials.h
//=--------------------------------------------------------------------------=
// Copyright (c) Microsoft Corporation. All rights reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0366 */
/* Compiler settings for proxymanager.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __ichannelcredentials_h__
#define __ichannelcredentials_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IChannelCredentials_FWD_DEFINED__
#define __IChannelCredentials_FWD_DEFINED__
typedef interface IChannelCredentials IChannelCredentials;
#endif 	/* __IChannelCredentials_FWD_DEFINED__ */


/* header files for imported files */
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 


#ifndef __IChannelCredentials_INTERFACE_DEFINED__
#define __IChannelCredentials_INTERFACE_DEFINED__

/* interface IChannelCredentials */
/* [unique][helpstring][uuid][local][object] */ 


EXTERN_C const IID IID_IChannelCredentials;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("181b448c-c17c-4b17-ac6d-06699b93198f")
    IChannelCredentials : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetWindowsCredential( 
            /* [in] */ BSTR domain,
            /* [in] */ BSTR username,
            /* [in] */ BSTR password,
            /* [in] */ int impersonationLevel,
            /* [in] */ BOOL allowNtlm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetUserNameCredential( 
            /* [in] */ BSTR username,
            /* [in] */ BSTR password) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetClientCertificateFromStore( 
            /* [in] */ BSTR storeLocation,
            /* [in] */ BSTR storeName,
            /* [in] */ BSTR findYype,
            /* [in] */ VARIANT findValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetClientCertificateFromStoreByName( 
            /* [in] */ BSTR subjectName,
            /* [in] */ BSTR storeLocation,
            /* [in] */ BSTR storeName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetClientCertificateFromFile( 
            /* [in] */ BSTR filename,
            /* [in] */ BSTR password,
            /* [in] */ BSTR keystorageFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDefaultServiceCertificateFromStore( 
            /* [in] */ BSTR storeLocation,
            /* [in] */ BSTR storeName,
            /* [in] */ BSTR findType,
            /* [in] */ VARIANT findValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDefaultServiceCertificateFromStoreByName( 
            /* [in] */ BSTR subjectName,
            /* [in] */ BSTR storeLocation,
            /* [in] */ BSTR storeName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDefaultServiceCertificateFromFile( 
            /* [in] */ BSTR filename,
            /* [in] */ BSTR password,
            /* [in] */ BSTR keystorageFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetServiceCertificateAuthentication( 
            /* [in] */ BSTR storeLocation,
            /* [in] */ BSTR revocationMode,
            /* [in] */ BSTR certificateValidationMode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetIssuedToken( 
            /* [in] */ BSTR localIssuerAddres,
            /* [in] */ BSTR localIssuerBindingType,
            /* [in] */ BSTR localIssuerBinding) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IChannelCredentialsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IChannelCredentials * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IChannelCredentials * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IChannelCredentials * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IChannelCredentials * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IChannelCredentials * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IChannelCredentials * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IChannelCredentials * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *SetWindowsCredential )( 
            IChannelCredentials * This,
            /* [in] */ BSTR domain,
            /* [in] */ BSTR username,
            /* [in] */ BSTR password,
            /* [in] */ int impersonationLevel,
            /* [in] */ BOOL allowNtlm);
        
        HRESULT ( STDMETHODCALLTYPE *SetUserNameCredential )( 
            IChannelCredentials * This,
            /* [in] */ BSTR username,
            /* [in] */ BSTR password);
        
        HRESULT ( STDMETHODCALLTYPE *SetClientCertificateFromStore )( 
            IChannelCredentials * This,
            /* [in] */ BSTR storeLocation,
            /* [in] */ BSTR storeName,
            /* [in] */ BSTR findYype,
            /* [in] */ VARIANT findValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetClientCertificateFromStoreByName )( 
            IChannelCredentials * This,
            /* [in] */ BSTR subjectName,
            /* [in] */ BSTR storeLocation,
            /* [in] */ BSTR storeName);
        
        HRESULT ( STDMETHODCALLTYPE *SetClientCertificateFromFile )( 
            IChannelCredentials * This,
            /* [in] */ BSTR filename,
            /* [in] */ BSTR password,
            /* [in] */ BSTR keystorageFlags);
        
        HRESULT ( STDMETHODCALLTYPE *SetDefaultServiceCertificateFromStore )( 
            IChannelCredentials * This,
            /* [in] */ BSTR storeLocation,
            /* [in] */ BSTR storeName,
            /* [in] */ BSTR findType,
            /* [in] */ VARIANT findValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetDefaultServiceCertificateFromStoreByName )( 
            IChannelCredentials * This,
            /* [in] */ BSTR subjectName,
            /* [in] */ BSTR storeLocation,
            /* [in] */ BSTR storeName);
        
        HRESULT ( STDMETHODCALLTYPE *SetDefaultServiceCertificateFromFile )( 
            IChannelCredentials * This,
            /* [in] */ BSTR filename,
            /* [in] */ BSTR password,
            /* [in] */ BSTR keystorageFlags);
        
        HRESULT ( STDMETHODCALLTYPE *SetServiceCertificateAuthentication )( 
            IChannelCredentials * This,
            /* [in] */ BSTR storeLocation,
            /* [in] */ BSTR revocationMode,
            /* [in] */ BSTR certificateValidationMode);
        
        HRESULT ( STDMETHODCALLTYPE *SetIssuedToken )( 
            IChannelCredentials * This,
            /* [in] */ BSTR localIssuerAddres,
            /* [in] */ BSTR localIssuerBindingType,
            /* [in] */ BSTR localIssuerBinding);
        
        END_INTERFACE
    } IChannelCredentialsVtbl;

    interface IChannelCredentials
    {
        CONST_VTBL struct IChannelCredentialsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IChannelCredentials_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IChannelCredentials_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IChannelCredentials_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IChannelCredentials_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IChannelCredentials_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IChannelCredentials_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IChannelCredentials_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IChannelCredentials_SetWindowsCredential(This,domain,username,password,impersonationLevel,allowNtlm)	\
    (This)->lpVtbl -> SetWindowsCredential(This,domain,username,password,impersonationLevel,allowNtlm)

#define IChannelCredentials_SetUserNameCredential(This,username,password)	\
    (This)->lpVtbl -> SetUserNameCredential(This,username,password)

#define IChannelCredentials_SetClientCertificateFromStore(This,storeLocation,storeName,findYype,findValue)	\
    (This)->lpVtbl -> SetClientCertificateFromStore(This,storeLocation,storeName,findYype,findValue)

#define IChannelCredentials_SetClientCertificateFromStoreByName(This,subjectName,storeLocation,storeName)	\
    (This)->lpVtbl -> SetClientCertificateFromStoreByName(This,subjectName,storeLocation,storeName)

#define IChannelCredentials_SetClientCertificateFromFile(This,filename,password,keystorageFlags)	\
    (This)->lpVtbl -> SetClientCertificateFromFile(This,filename,password,keystorageFlags)

#define IChannelCredentials_SetDefaultServiceCertificateFromStore(This,storeLocation,storeName,findType,findValue)	\
    (This)->lpVtbl -> SetDefaultServiceCertificateFromStore(This,storeLocation,storeName,findType,findValue)

#define IChannelCredentials_SetDefaultServiceCertificateFromStoreByName(This,subjectName,storeLocation,storeName)	\
    (This)->lpVtbl -> SetDefaultServiceCertificateFromStoreByName(This,subjectName,storeLocation,storeName)

#define IChannelCredentials_SetDefaultServiceCertificateFromFile(This,filename,password,keystorageFlags)	\
    (This)->lpVtbl -> SetDefaultServiceCertificateFromFile(This,filename,password,keystorageFlags)

#define IChannelCredentials_SetServiceCertificateAuthentication(This,storeLocation,revocationMode,certificateValidationMode)	\
    (This)->lpVtbl -> SetServiceCertificateAuthentication(This,storeLocation,revocationMode,certificateValidationMode)

#define IChannelCredentials_SetIssuedToken(This,localIssuerAddres,localIssuerBindingType,localIssuerBinding)	\
    (This)->lpVtbl -> SetIssuedToken(This,localIssuerAddres,localIssuerBindingType,localIssuerBinding)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __IChannelCredentials_INTERFACE_DEFINED__ */


#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\ICeeFileGen.h ===
// ==++==
// 
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// 
// ==--==
// See code:EEStartup#TableOfContents for EE overview
/*****************************************************************************
 **                                                                         **
 ** ICeeFileGen.h - code generator interface.                               **
 **                                                                         **
 ** This interface provides functionality to create a CLR PE executable.    **
 ** This will typically be used by compilers to generate their compiled     **
 ** output executable.                                                      **
 **                                                                         **
 ** The implemenation lives in mscorpe.dll                                  **
 **                                                                         **
 *****************************************************************************/

/*
  This is how this is typically used:
  
  // Step #1 ... Get CLR hosting API:
  #include <mscoree.h>
  #include <metahost.h>

  ICLRMetaHost * pMetaHost;
  CLRCreateInstance(CLSID_CLRMetaHost, IID_ICLRMetaHost, &pMetaHost); // defined in mscoree.h
  
  ICLRRuntimeInfo * pCLRRuntimeInfo;
  pMetaHost->GetRuntime(wszClrVersion, IID_ICLRRuntimeInfo, &pCLRRuntimeInfo);
  
  // Step #2 ... Load mscorpe.dll and get its entrypoints
  HMODULE hModule;
  pCLRRuntimeInfo->LoadLibrary(L"mscorpe.dll", &hModule);
  
  PFN_CreateICeeFileGen pfnCreateICeeFileGen = (PFN_CreateICeeFileGen)::GetProcAddress("CreateICeeFileGen"); // Windows API
  PFN_DestroyICeeFileGen pfnDestroyICeeFileGen = (PFN_DestroyICeeFileGen)::GetProcAddress("DestroyICeeFileGen"); // Windows API
  
  // Step #3 ... Use mscorpe.dll APIs
  pfnCreateICeeFileGen(...);    // Get a ICeeFileGen
  
  CreateCeeFile(...);           // Get a HCEEFILE (called for every output file needed)
  SetOutputFileName(...);       // Set the name for the output file
  pEmit = IMetaDataEmit object; // Get a metadata emitter
  GetSectionBlock(...);, AddSectionReloc(...); ... // Get blocks, write non-metadata information, and add necessary relocation
  EmitMetaDataEx(pEmit);        // Write out the metadata
  GenerateCeeFile(...);         // Write out the file. Implicitly calls LinkCeeFile and FixupCeeFile
  
  pfnDestroyICeeFileGen(...);   // Release the ICeeFileGen object
*/


#ifndef _ICEEFILEGEN_H_
#define _ICEEFILEGEN_H_

#include <ole2.h>
#include "cor.h"

class ICeeFileGen;

typedef void *HCEEFILE;

typedef HRESULT (__stdcall * PFN_CreateICeeFileGen)(ICeeFileGen ** ceeFileGen);  // call this to instantiate an ICeeFileGen interface
typedef HRESULT (__stdcall * PFN_DestroyICeeFileGen)(ICeeFileGen ** ceeFileGen); // call this to delete an ICeeFileGen

#define ICEE_CREATE_FILE_PE32	       0x00000001  // Create a PE  (32-bit)
#define ICEE_CREATE_FILE_PE64	       0x00000002  // Create a PE+ (64-bit) 
#define ICEE_CREATE_FILE_CORMAIN_STUB  0x00000004  // add a mscoree!_Cor___Main call stub 
#define ICEE_CREATE_FILE_STRIP_RELOCS  0x00000008  // strip the .reloc section
#define ICEE_CREATE_FILE_EMIT_FIXUPS   0x00000010  // emit fixups for use by Vulcan

#define ICEE_CREATE_MACHINE_MASK       0x0000FF00  // space for up to 256 machine targets
#define ICEE_CREATE_MACHINE_ILLEGAL    0x00000000  // An illegal machine name
#define ICEE_CREATE_MACHINE_I386       0x00000100  // Create a IMAGE_FILE_MACHINE_I386 
#define ICEE_CREATE_MACHINE_IA64       0x00000200  // Create a IMAGE_FILE_MACHINE_IA64
#define ICEE_CREATE_MACHINE_AMD64      0x00000400  // Create a IMAGE_FILE_MACHINE_AMD64

    // Pass this to CreateCeeFileEx to create a pure IL Exe or DLL
#define ICEE_CREATE_FILE_PURE_IL  ICEE_CREATE_FILE_PE32         | \
                                  ICEE_CREATE_FILE_CORMAIN_STUB | \
                                  ICEE_CREATE_MACHINE_I386

class ICeeFileGen {
  public:
    virtual HRESULT CreateCeeFile(HCEEFILE *ceeFile); // call this to instantiate a file handle

    // <TODO>@FUTURE: remove this function. We no longer support mdScope.</TODO>
    virtual HRESULT EmitMetaData (HCEEFILE ceeFile, IMetaDataEmit *emitter, mdScope scope);
    virtual HRESULT EmitLibraryName (HCEEFILE ceeFile, IMetaDataEmit *emitter, mdScope scope);
    virtual HRESULT EmitMethod (); // <TODO>@FUTURE: remove</TODO>
    virtual HRESULT GetMethodRVA (HCEEFILE ceeFile, ULONG codeOffset, ULONG *codeRVA); 
    virtual HRESULT EmitSignature (); // <TODO>@FUTURE: remove</TODO>

    virtual HRESULT EmitString (HCEEFILE ceeFile,__in LPWSTR strValue, ULONG *strRef);
    virtual HRESULT GenerateCeeFile (HCEEFILE ceeFile);

    virtual HRESULT SetOutputFileName (HCEEFILE ceeFile, __in LPWSTR outputFileName);
    __success(return == S_OK)
    virtual HRESULT GetOutputFileName (HCEEFILE ceeFile, __out LPWSTR *outputFileName);

    virtual HRESULT SetResourceFileName (HCEEFILE ceeFile, __in LPWSTR resourceFileName);

    __success(return == S_OK)
    virtual HRESULT GetResourceFileName (HCEEFILE ceeFile, __out LPWSTR *resourceFileName);

    virtual HRESULT SetImageBase(HCEEFILE ceeFile, size_t imageBase);

    virtual HRESULT SetSubsystem(HCEEFILE ceeFile, DWORD subsystem, DWORD major, DWORD minor);

    virtual HRESULT SetEntryClassToken (); //<TODO>@FUTURE: remove</TODO>
    virtual HRESULT GetEntryClassToken (); //<TODO>@FUTURE: remove</TODO>

    virtual HRESULT SetEntryPointDescr (); //<TODO>@FUTURE: remove</TODO>
    virtual HRESULT GetEntryPointDescr (); //<TODO>@FUTURE: remove</TODO>

    virtual HRESULT SetEntryPointFlags (); //<TODO>@FUTURE: remove</TODO>
    virtual HRESULT GetEntryPointFlags (); //<TODO>@FUTURE: remove</TODO>

    virtual HRESULT SetDllSwitch (HCEEFILE ceeFile, BOOL dllSwitch);
    virtual HRESULT GetDllSwitch (HCEEFILE ceeFile, BOOL *dllSwitch);

    virtual HRESULT SetLibraryName (HCEEFILE ceeFile, __in LPWSTR LibraryName);
    __success( return == S_OK )
    virtual HRESULT GetLibraryName (HCEEFILE ceeFile, __out LPWSTR *LibraryName);

    virtual HRESULT SetLibraryGuid (HCEEFILE ceeFile, __in LPWSTR LibraryGuid);

    virtual HRESULT DestroyCeeFile(HCEEFILE *ceeFile); // call this to delete a file handle

    virtual HRESULT GetSectionCreate (HCEEFILE ceeFile, const char *name, DWORD flags, HCEESECTION *section);
    virtual HRESULT GetIlSection (HCEEFILE ceeFile, HCEESECTION *section);
    virtual HRESULT GetRdataSection (HCEEFILE ceeFile, HCEESECTION *section);

    virtual HRESULT GetSectionDataLen (HCEESECTION section, ULONG *dataLen);
    virtual HRESULT GetSectionBlock (HCEESECTION section, ULONG len, ULONG align=1, void **ppBytes=0);
    virtual HRESULT TruncateSection (HCEESECTION section, ULONG len);
    virtual HRESULT AddSectionReloc (HCEESECTION section, ULONG offset, HCEESECTION relativeTo, CeeSectionRelocType relocType);

    // deprecated: use SetDirectoryEntry instead
    virtual HRESULT SetSectionDirectoryEntry (HCEESECTION section, ULONG num);

    virtual HRESULT CreateSig (); //<TODO>@FUTURE: Remove</TODO>
    virtual HRESULT AddSigArg (); //<TODO>@FUTURE: Remove</TODO>
    virtual HRESULT SetSigReturnType (); //<TODO>@FUTURE: Remove</TODO>
    virtual HRESULT SetSigCallingConvention (); //<TODO>@FUTURE: Remove</TODO>
    virtual HRESULT DeleteSig (); //<TODO>@FUTURE: Remove</TODO>

    virtual HRESULT SetEntryPoint (HCEEFILE ceeFile, mdMethodDef method);
    virtual HRESULT GetEntryPoint (HCEEFILE ceeFile, mdMethodDef *method);

    virtual HRESULT SetComImageFlags (HCEEFILE ceeFile, DWORD mask);
    virtual HRESULT GetComImageFlags (HCEEFILE ceeFile, DWORD *mask);

    // get IMapToken interface for tracking mapped tokens
    virtual HRESULT GetIMapTokenIface(HCEEFILE ceeFile, IMetaDataEmit *emitter, IUnknown **pIMapToken);
    virtual HRESULT SetDirectoryEntry (HCEEFILE ceeFile, HCEESECTION section, ULONG num, ULONG size, ULONG offset = 0);

    // Write out the metadata in "emitter" to the metadata section in "ceeFile"
    // Use EmitMetaDataAt() for more control
    virtual HRESULT EmitMetaDataEx (HCEEFILE ceeFile, IMetaDataEmit *emitter); 

    virtual HRESULT EmitLibraryNameEx (HCEEFILE ceeFile, IMetaDataEmit *emitter);
    virtual HRESULT GetIMapTokenIfaceEx(HCEEFILE ceeFile, IMetaDataEmit *emitter, IUnknown **pIMapToken);

    virtual HRESULT EmitMacroDefinitions(HCEEFILE ceeFile, void *pData, DWORD cData);
    virtual HRESULT CreateCeeFileFromICeeGen(
        ICeeGen *pFromICeeGen, HCEEFILE *ceeFile, DWORD createFlags = ICEE_CREATE_FILE_PURE_IL); // call this to instantiate a file handle

    virtual HRESULT SetManifestEntry(HCEEFILE ceeFile, ULONG size, ULONG offset);

    virtual HRESULT SetEnCRVABase(HCEEFILE ceeFile, ULONG dataBase, ULONG rdataBase);
    virtual HRESULT GenerateCeeMemoryImage (HCEEFILE ceeFile, void **ppImage);

    virtual HRESULT ComputeSectionOffset(HCEESECTION section, __in char *ptr,
                                         unsigned *offset);
    
    virtual HRESULT ComputeOffset(HCEEFILE file, __in char *ptr,
                                  HCEESECTION *pSection, unsigned *offset);
    
    virtual HRESULT GetCorHeader(HCEEFILE ceeFile, 
                                 IMAGE_COR20_HEADER **header);
    
    // Layout the sections and assign their starting addresses
    virtual HRESULT LinkCeeFile (HCEEFILE ceeFile);     

    // Apply relocations to any pointer data. Also generate PE base relocs
    virtual HRESULT FixupCeeFile (HCEEFILE ceeFile);

    // Base RVA assinged to the section. To be called only after LinkCeeFile()
    virtual HRESULT GetSectionRVA (HCEESECTION section, ULONG *rva);
    
    __success(return == S_OK)
    virtual HRESULT ComputeSectionPointer(HCEESECTION section, ULONG offset,
                                          __out char **ptr);

    virtual HRESULT SetObjSwitch (HCEEFILE ceeFile, BOOL objSwitch);
    virtual HRESULT GetObjSwitch (HCEEFILE ceeFile, BOOL *objSwitch);
    virtual HRESULT SetVTableEntry(HCEEFILE ceeFile, ULONG size, ULONG offset);
    // See the end of interface for another overload of AetVTableEntry

    virtual HRESULT SetStrongNameEntry(HCEEFILE ceeFile, ULONG size, ULONG offset);

    // Emit the metadata from "emitter".
    // If 'section != 0, it will put the data in 'buffer'.  This
    // buffer is assumed to be in 'section' at 'offset' and of size 'buffLen'
    // (should use GetSaveSize to insure that buffer is big enough
    virtual HRESULT EmitMetaDataAt (HCEEFILE ceeFile, IMetaDataEmit *emitter, 
                                    HCEESECTION section, DWORD offset, 
                                    BYTE* buffer, unsigned buffLen);

    virtual HRESULT GetFileTimeStamp (HCEEFILE ceeFile, DWORD *pTimeStamp);

    // Add a notification handler. If it implements an interface that
    // the ICeeFileGen understands, S_OK is returned. Otherwise,
    // E_NOINTERFACE.
    virtual HRESULT AddNotificationHandler(HCEEFILE ceeFile,
                                           IUnknown *pHandler);

    virtual HRESULT SetFileAlignment(HCEEFILE ceeFile, ULONG fileAlignment);

    virtual HRESULT ClearComImageFlags (HCEEFILE ceeFile, DWORD mask);

    // call this to instantiate a PE+ (64-bit PE file)
    virtual HRESULT CreateCeeFileEx(HCEEFILE *ceeFile, ULONG createFlags);
    virtual HRESULT SetImageBase64(HCEEFILE ceeFile, ULONGLONG imageBase);

    virtual HRESULT GetHeaderInfo (HCEEFILE ceeFile, PIMAGE_NT_HEADERS *ppNtHeaders,
                                                     PIMAGE_SECTION_HEADER *ppSections,
                                                     ULONG *pNumSections);

    // Seed file is a base file which is copied over into the output file
    // Note that there are restrictions on the seed file (the sections
    // cannot be relocated), and that the copy is not complete as the new
    // headers overwrite the seed file headers.
    virtual HRESULT CreateCeeFileEx2(HCEEFILE *ceeFile, ULONG createFlags,
                                     LPCWSTR seedFileName = NULL);

    virtual HRESULT SetVTableEntry64(HCEEFILE ceeFile, ULONG size, void* ptr);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\icftypes.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for icftypes.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __icftypes_h__
#define __icftypes_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

/* header files for imported files */
#include "wtypes.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_icftypes_0000_0000 */
/* [local] */ 

typedef 
enum NET_FW_POLICY_TYPE_
    {	NET_FW_POLICY_GROUP	= 0,
	NET_FW_POLICY_LOCAL	= ( NET_FW_POLICY_GROUP + 1 ) ,
	NET_FW_POLICY_EFFECTIVE	= ( NET_FW_POLICY_LOCAL + 1 ) ,
	NET_FW_POLICY_TYPE_MAX	= ( NET_FW_POLICY_EFFECTIVE + 1 ) 
    } 	NET_FW_POLICY_TYPE;

typedef 
enum NET_FW_PROFILE_TYPE_
    {	NET_FW_PROFILE_DOMAIN	= 0,
	NET_FW_PROFILE_STANDARD	= ( NET_FW_PROFILE_DOMAIN + 1 ) ,
	NET_FW_PROFILE_CURRENT	= ( NET_FW_PROFILE_STANDARD + 1 ) ,
	NET_FW_PROFILE_TYPE_MAX	= ( NET_FW_PROFILE_CURRENT + 1 ) 
    } 	NET_FW_PROFILE_TYPE;

typedef 
enum NET_FW_PROFILE_TYPE2_
    {	NET_FW_PROFILE2_DOMAIN	= 0x1,
	NET_FW_PROFILE2_PRIVATE	= 0x2,
	NET_FW_PROFILE2_PUBLIC	= 0x4,
	NET_FW_PROFILE2_ALL	= 0x7fffffff
    } 	NET_FW_PROFILE_TYPE2;

typedef 
enum NET_FW_IP_VERSION_
    {	NET_FW_IP_VERSION_V4	= 0,
	NET_FW_IP_VERSION_V6	= ( NET_FW_IP_VERSION_V4 + 1 ) ,
	NET_FW_IP_VERSION_ANY	= ( NET_FW_IP_VERSION_V6 + 1 ) ,
	NET_FW_IP_VERSION_MAX	= ( NET_FW_IP_VERSION_ANY + 1 ) 
    } 	NET_FW_IP_VERSION;

typedef 
enum NET_FW_SCOPE_
    {	NET_FW_SCOPE_ALL	= 0,
	NET_FW_SCOPE_LOCAL_SUBNET	= ( NET_FW_SCOPE_ALL + 1 ) ,
	NET_FW_SCOPE_CUSTOM	= ( NET_FW_SCOPE_LOCAL_SUBNET + 1 ) ,
	NET_FW_SCOPE_MAX	= ( NET_FW_SCOPE_CUSTOM + 1 ) 
    } 	NET_FW_SCOPE;

typedef 
enum NET_FW_IP_PROTOCOL_
    {	NET_FW_IP_PROTOCOL_TCP	= 6,
	NET_FW_IP_PROTOCOL_UDP	= 17,
	NET_FW_IP_PROTOCOL_ANY	= 256
    } 	NET_FW_IP_PROTOCOL;

typedef 
enum NET_FW_SERVICE_TYPE_
    {	NET_FW_SERVICE_FILE_AND_PRINT	= 0,
	NET_FW_SERVICE_UPNP	= ( NET_FW_SERVICE_FILE_AND_PRINT + 1 ) ,
	NET_FW_SERVICE_REMOTE_DESKTOP	= ( NET_FW_SERVICE_UPNP + 1 ) ,
	NET_FW_SERVICE_NONE	= ( NET_FW_SERVICE_REMOTE_DESKTOP + 1 ) ,
	NET_FW_SERVICE_TYPE_MAX	= ( NET_FW_SERVICE_NONE + 1 ) 
    } 	NET_FW_SERVICE_TYPE;

typedef 
enum NET_FW_RULE_DIRECTION_
    {	NET_FW_RULE_DIR_IN	= 1,
	NET_FW_RULE_DIR_OUT	= ( NET_FW_RULE_DIR_IN + 1 ) ,
	NET_FW_RULE_DIR_MAX	= ( NET_FW_RULE_DIR_OUT + 1 ) 
    } 	NET_FW_RULE_DIRECTION;

typedef 
enum NET_FW_ACTION_
    {	NET_FW_ACTION_BLOCK	= 0,
	NET_FW_ACTION_ALLOW	= ( NET_FW_ACTION_BLOCK + 1 ) ,
	NET_FW_ACTION_MAX	= ( NET_FW_ACTION_ALLOW + 1 ) 
    } 	NET_FW_ACTION;

typedef 
enum NET_FW_MODIFY_STATE_
    {	NET_FW_MODIFY_STATE_OK	= 0,
	NET_FW_MODIFY_STATE_GP_OVERRIDE	= ( NET_FW_MODIFY_STATE_OK + 1 ) ,
	NET_FW_MODIFY_STATE_INBOUND_BLOCKED	= ( NET_FW_MODIFY_STATE_GP_OVERRIDE + 1 ) 
    } 	NET_FW_MODIFY_STATE;

typedef 
enum NET_FW_RULE_CATEGORY_
    {	NET_FW_RULE_CATEGORY_BOOT	= 0,
	NET_FW_RULE_CATEGORY_STEALTH	= ( NET_FW_RULE_CATEGORY_BOOT + 1 ) ,
	NET_FW_RULE_CATEGORY_FIREWALL	= ( NET_FW_RULE_CATEGORY_STEALTH + 1 ) ,
	NET_FW_RULE_CATEGORY_CONSEC	= ( NET_FW_RULE_CATEGORY_FIREWALL + 1 ) ,
	NET_FW_RULE_CATEGORY_MAX	= ( NET_FW_RULE_CATEGORY_CONSEC + 1 ) 
    } 	NET_FW_RULE_CATEGORY;

typedef 
enum NET_FW_EDGE_TRAVERSAL_TYPE_
    {	NET_FW_EDGE_TRAVERSAL_TYPE_DENY	= 0,
	NET_FW_EDGE_TRAVERSAL_TYPE_ALLOW	= ( NET_FW_EDGE_TRAVERSAL_TYPE_DENY + 1 ) ,
	NET_FW_EDGE_TRAVERSAL_TYPE_DEFER_TO_APP	= ( NET_FW_EDGE_TRAVERSAL_TYPE_ALLOW + 1 ) ,
	NET_FW_EDGE_TRAVERSAL_TYPE_DEFER_TO_USER	= ( NET_FW_EDGE_TRAVERSAL_TYPE_DEFER_TO_APP + 1 ) 
    } 	NET_FW_EDGE_TRAVERSAL_TYPE;



extern RPC_IF_HANDLE __MIDL_itf_icftypes_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_icftypes_0000_0000_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Iads.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for ads.odl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __iads_h__
#define __iads_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IADs_FWD_DEFINED__
#define __IADs_FWD_DEFINED__
typedef interface IADs IADs;
#endif 	/* __IADs_FWD_DEFINED__ */


#ifndef __IADsContainer_FWD_DEFINED__
#define __IADsContainer_FWD_DEFINED__
typedef interface IADsContainer IADsContainer;
#endif 	/* __IADsContainer_FWD_DEFINED__ */


#ifndef __IADsCollection_FWD_DEFINED__
#define __IADsCollection_FWD_DEFINED__
typedef interface IADsCollection IADsCollection;
#endif 	/* __IADsCollection_FWD_DEFINED__ */


#ifndef __IADsMembers_FWD_DEFINED__
#define __IADsMembers_FWD_DEFINED__
typedef interface IADsMembers IADsMembers;
#endif 	/* __IADsMembers_FWD_DEFINED__ */


#ifndef __IADsPropertyList_FWD_DEFINED__
#define __IADsPropertyList_FWD_DEFINED__
typedef interface IADsPropertyList IADsPropertyList;
#endif 	/* __IADsPropertyList_FWD_DEFINED__ */


#ifndef __IADsPropertyEntry_FWD_DEFINED__
#define __IADsPropertyEntry_FWD_DEFINED__
typedef interface IADsPropertyEntry IADsPropertyEntry;
#endif 	/* __IADsPropertyEntry_FWD_DEFINED__ */


#ifndef __PropertyEntry_FWD_DEFINED__
#define __PropertyEntry_FWD_DEFINED__

#ifdef __cplusplus
typedef class PropertyEntry PropertyEntry;
#else
typedef struct PropertyEntry PropertyEntry;
#endif /* __cplusplus */

#endif 	/* __PropertyEntry_FWD_DEFINED__ */


#ifndef __IADsPropertyValue_FWD_DEFINED__
#define __IADsPropertyValue_FWD_DEFINED__
typedef interface IADsPropertyValue IADsPropertyValue;
#endif 	/* __IADsPropertyValue_FWD_DEFINED__ */


#ifndef __IADsPropertyValue2_FWD_DEFINED__
#define __IADsPropertyValue2_FWD_DEFINED__
typedef interface IADsPropertyValue2 IADsPropertyValue2;
#endif 	/* __IADsPropertyValue2_FWD_DEFINED__ */


#ifndef __PropertyValue_FWD_DEFINED__
#define __PropertyValue_FWD_DEFINED__

#ifdef __cplusplus
typedef class PropertyValue PropertyValue;
#else
typedef struct PropertyValue PropertyValue;
#endif /* __cplusplus */

#endif 	/* __PropertyValue_FWD_DEFINED__ */


#ifndef __IPrivateDispatch_FWD_DEFINED__
#define __IPrivateDispatch_FWD_DEFINED__
typedef interface IPrivateDispatch IPrivateDispatch;
#endif 	/* __IPrivateDispatch_FWD_DEFINED__ */


#ifndef __IPrivateUnknown_FWD_DEFINED__
#define __IPrivateUnknown_FWD_DEFINED__
typedef interface IPrivateUnknown IPrivateUnknown;
#endif 	/* __IPrivateUnknown_FWD_DEFINED__ */


#ifndef __IADsExtension_FWD_DEFINED__
#define __IADsExtension_FWD_DEFINED__
typedef interface IADsExtension IADsExtension;
#endif 	/* __IADsExtension_FWD_DEFINED__ */


#ifndef __IADsDeleteOps_FWD_DEFINED__
#define __IADsDeleteOps_FWD_DEFINED__
typedef interface IADsDeleteOps IADsDeleteOps;
#endif 	/* __IADsDeleteOps_FWD_DEFINED__ */


#ifndef __IADsNamespaces_FWD_DEFINED__
#define __IADsNamespaces_FWD_DEFINED__
typedef interface IADsNamespaces IADsNamespaces;
#endif 	/* __IADsNamespaces_FWD_DEFINED__ */


#ifndef __IADsClass_FWD_DEFINED__
#define __IADsClass_FWD_DEFINED__
typedef interface IADsClass IADsClass;
#endif 	/* __IADsClass_FWD_DEFINED__ */


#ifndef __IADsProperty_FWD_DEFINED__
#define __IADsProperty_FWD_DEFINED__
typedef interface IADsProperty IADsProperty;
#endif 	/* __IADsProperty_FWD_DEFINED__ */


#ifndef __IADsSyntax_FWD_DEFINED__
#define __IADsSyntax_FWD_DEFINED__
typedef interface IADsSyntax IADsSyntax;
#endif 	/* __IADsSyntax_FWD_DEFINED__ */


#ifndef __IADsLocality_FWD_DEFINED__
#define __IADsLocality_FWD_DEFINED__
typedef interface IADsLocality IADsLocality;
#endif 	/* __IADsLocality_FWD_DEFINED__ */


#ifndef __IADsO_FWD_DEFINED__
#define __IADsO_FWD_DEFINED__
typedef interface IADsO IADsO;
#endif 	/* __IADsO_FWD_DEFINED__ */


#ifndef __IADsOU_FWD_DEFINED__
#define __IADsOU_FWD_DEFINED__
typedef interface IADsOU IADsOU;
#endif 	/* __IADsOU_FWD_DEFINED__ */


#ifndef __IADsDomain_FWD_DEFINED__
#define __IADsDomain_FWD_DEFINED__
typedef interface IADsDomain IADsDomain;
#endif 	/* __IADsDomain_FWD_DEFINED__ */


#ifndef __IADsComputer_FWD_DEFINED__
#define __IADsComputer_FWD_DEFINED__
typedef interface IADsComputer IADsComputer;
#endif 	/* __IADsComputer_FWD_DEFINED__ */


#ifndef __IADsComputerOperations_FWD_DEFINED__
#define __IADsComputerOperations_FWD_DEFINED__
typedef interface IADsComputerOperations IADsComputerOperations;
#endif 	/* __IADsComputerOperations_FWD_DEFINED__ */


#ifndef __IADsGroup_FWD_DEFINED__
#define __IADsGroup_FWD_DEFINED__
typedef interface IADsGroup IADsGroup;
#endif 	/* __IADsGroup_FWD_DEFINED__ */


#ifndef __IADsUser_FWD_DEFINED__
#define __IADsUser_FWD_DEFINED__
typedef interface IADsUser IADsUser;
#endif 	/* __IADsUser_FWD_DEFINED__ */


#ifndef __IADsPrintQueue_FWD_DEFINED__
#define __IADsPrintQueue_FWD_DEFINED__
typedef interface IADsPrintQueue IADsPrintQueue;
#endif 	/* __IADsPrintQueue_FWD_DEFINED__ */


#ifndef __IADsPrintQueueOperations_FWD_DEFINED__
#define __IADsPrintQueueOperations_FWD_DEFINED__
typedef interface IADsPrintQueueOperations IADsPrintQueueOperations;
#endif 	/* __IADsPrintQueueOperations_FWD_DEFINED__ */


#ifndef __IADsPrintJob_FWD_DEFINED__
#define __IADsPrintJob_FWD_DEFINED__
typedef interface IADsPrintJob IADsPrintJob;
#endif 	/* __IADsPrintJob_FWD_DEFINED__ */


#ifndef __IADsPrintJobOperations_FWD_DEFINED__
#define __IADsPrintJobOperations_FWD_DEFINED__
typedef interface IADsPrintJobOperations IADsPrintJobOperations;
#endif 	/* __IADsPrintJobOperations_FWD_DEFINED__ */


#ifndef __IADsService_FWD_DEFINED__
#define __IADsService_FWD_DEFINED__
typedef interface IADsService IADsService;
#endif 	/* __IADsService_FWD_DEFINED__ */


#ifndef __IADsServiceOperations_FWD_DEFINED__
#define __IADsServiceOperations_FWD_DEFINED__
typedef interface IADsServiceOperations IADsServiceOperations;
#endif 	/* __IADsServiceOperations_FWD_DEFINED__ */


#ifndef __IADsFileService_FWD_DEFINED__
#define __IADsFileService_FWD_DEFINED__
typedef interface IADsFileService IADsFileService;
#endif 	/* __IADsFileService_FWD_DEFINED__ */


#ifndef __IADsFileServiceOperations_FWD_DEFINED__
#define __IADsFileServiceOperations_FWD_DEFINED__
typedef interface IADsFileServiceOperations IADsFileServiceOperations;
#endif 	/* __IADsFileServiceOperations_FWD_DEFINED__ */


#ifndef __IADsFileShare_FWD_DEFINED__
#define __IADsFileShare_FWD_DEFINED__
typedef interface IADsFileShare IADsFileShare;
#endif 	/* __IADsFileShare_FWD_DEFINED__ */


#ifndef __IADsSession_FWD_DEFINED__
#define __IADsSession_FWD_DEFINED__
typedef interface IADsSession IADsSession;
#endif 	/* __IADsSession_FWD_DEFINED__ */


#ifndef __IADsResource_FWD_DEFINED__
#define __IADsResource_FWD_DEFINED__
typedef interface IADsResource IADsResource;
#endif 	/* __IADsResource_FWD_DEFINED__ */


#ifndef __IADsOpenDSObject_FWD_DEFINED__
#define __IADsOpenDSObject_FWD_DEFINED__
typedef interface IADsOpenDSObject IADsOpenDSObject;
#endif 	/* __IADsOpenDSObject_FWD_DEFINED__ */


#ifndef __IDirectoryObject_FWD_DEFINED__
#define __IDirectoryObject_FWD_DEFINED__
typedef interface IDirectoryObject IDirectoryObject;
#endif 	/* __IDirectoryObject_FWD_DEFINED__ */


#ifndef __IDirectorySearch_FWD_DEFINED__
#define __IDirectorySearch_FWD_DEFINED__
typedef interface IDirectorySearch IDirectorySearch;
#endif 	/* __IDirectorySearch_FWD_DEFINED__ */


#ifndef __IDirectorySchemaMgmt_FWD_DEFINED__
#define __IDirectorySchemaMgmt_FWD_DEFINED__
typedef interface IDirectorySchemaMgmt IDirectorySchemaMgmt;
#endif 	/* __IDirectorySchemaMgmt_FWD_DEFINED__ */


#ifndef __IADsAggregatee_FWD_DEFINED__
#define __IADsAggregatee_FWD_DEFINED__
typedef interface IADsAggregatee IADsAggregatee;
#endif 	/* __IADsAggregatee_FWD_DEFINED__ */


#ifndef __IADsAggregator_FWD_DEFINED__
#define __IADsAggregator_FWD_DEFINED__
typedef interface IADsAggregator IADsAggregator;
#endif 	/* __IADsAggregator_FWD_DEFINED__ */


#ifndef __IADsAccessControlEntry_FWD_DEFINED__
#define __IADsAccessControlEntry_FWD_DEFINED__
typedef interface IADsAccessControlEntry IADsAccessControlEntry;
#endif 	/* __IADsAccessControlEntry_FWD_DEFINED__ */


#ifndef __AccessControlEntry_FWD_DEFINED__
#define __AccessControlEntry_FWD_DEFINED__

#ifdef __cplusplus
typedef class AccessControlEntry AccessControlEntry;
#else
typedef struct AccessControlEntry AccessControlEntry;
#endif /* __cplusplus */

#endif 	/* __AccessControlEntry_FWD_DEFINED__ */


#ifndef __IADsAccessControlList_FWD_DEFINED__
#define __IADsAccessControlList_FWD_DEFINED__
typedef interface IADsAccessControlList IADsAccessControlList;
#endif 	/* __IADsAccessControlList_FWD_DEFINED__ */


#ifndef __AccessControlList_FWD_DEFINED__
#define __AccessControlList_FWD_DEFINED__

#ifdef __cplusplus
typedef class AccessControlList AccessControlList;
#else
typedef struct AccessControlList AccessControlList;
#endif /* __cplusplus */

#endif 	/* __AccessControlList_FWD_DEFINED__ */


#ifndef __IADsSecurityDescriptor_FWD_DEFINED__
#define __IADsSecurityDescriptor_FWD_DEFINED__
typedef interface IADsSecurityDescriptor IADsSecurityDescriptor;
#endif 	/* __IADsSecurityDescriptor_FWD_DEFINED__ */


#ifndef __SecurityDescriptor_FWD_DEFINED__
#define __SecurityDescriptor_FWD_DEFINED__

#ifdef __cplusplus
typedef class SecurityDescriptor SecurityDescriptor;
#else
typedef struct SecurityDescriptor SecurityDescriptor;
#endif /* __cplusplus */

#endif 	/* __SecurityDescriptor_FWD_DEFINED__ */


#ifndef __IADsLargeInteger_FWD_DEFINED__
#define __IADsLargeInteger_FWD_DEFINED__
typedef interface IADsLargeInteger IADsLargeInteger;
#endif 	/* __IADsLargeInteger_FWD_DEFINED__ */


#ifndef __LargeInteger_FWD_DEFINED__
#define __LargeInteger_FWD_DEFINED__

#ifdef __cplusplus
typedef class LargeInteger LargeInteger;
#else
typedef struct LargeInteger LargeInteger;
#endif /* __cplusplus */

#endif 	/* __LargeInteger_FWD_DEFINED__ */


#ifndef __IADsNameTranslate_FWD_DEFINED__
#define __IADsNameTranslate_FWD_DEFINED__
typedef interface IADsNameTranslate IADsNameTranslate;
#endif 	/* __IADsNameTranslate_FWD_DEFINED__ */


#ifndef __NameTranslate_FWD_DEFINED__
#define __NameTranslate_FWD_DEFINED__

#ifdef __cplusplus
typedef class NameTranslate NameTranslate;
#else
typedef struct NameTranslate NameTranslate;
#endif /* __cplusplus */

#endif 	/* __NameTranslate_FWD_DEFINED__ */


#ifndef __IADsCaseIgnoreList_FWD_DEFINED__
#define __IADsCaseIgnoreList_FWD_DEFINED__
typedef interface IADsCaseIgnoreList IADsCaseIgnoreList;
#endif 	/* __IADsCaseIgnoreList_FWD_DEFINED__ */


#ifndef __CaseIgnoreList_FWD_DEFINED__
#define __CaseIgnoreList_FWD_DEFINED__

#ifdef __cplusplus
typedef class CaseIgnoreList CaseIgnoreList;
#else
typedef struct CaseIgnoreList CaseIgnoreList;
#endif /* __cplusplus */

#endif 	/* __CaseIgnoreList_FWD_DEFINED__ */


#ifndef __IADsFaxNumber_FWD_DEFINED__
#define __IADsFaxNumber_FWD_DEFINED__
typedef interface IADsFaxNumber IADsFaxNumber;
#endif 	/* __IADsFaxNumber_FWD_DEFINED__ */


#ifndef __FaxNumber_FWD_DEFINED__
#define __FaxNumber_FWD_DEFINED__

#ifdef __cplusplus
typedef class FaxNumber FaxNumber;
#else
typedef struct FaxNumber FaxNumber;
#endif /* __cplusplus */

#endif 	/* __FaxNumber_FWD_DEFINED__ */


#ifndef __IADsNetAddress_FWD_DEFINED__
#define __IADsNetAddress_FWD_DEFINED__
typedef interface IADsNetAddress IADsNetAddress;
#endif 	/* __IADsNetAddress_FWD_DEFINED__ */


#ifndef __NetAddress_FWD_DEFINED__
#define __NetAddress_FWD_DEFINED__

#ifdef __cplusplus
typedef class NetAddress NetAddress;
#else
typedef struct NetAddress NetAddress;
#endif /* __cplusplus */

#endif 	/* __NetAddress_FWD_DEFINED__ */


#ifndef __IADsOctetList_FWD_DEFINED__
#define __IADsOctetList_FWD_DEFINED__
typedef interface IADsOctetList IADsOctetList;
#endif 	/* __IADsOctetList_FWD_DEFINED__ */


#ifndef __OctetList_FWD_DEFINED__
#define __OctetList_FWD_DEFINED__

#ifdef __cplusplus
typedef class OctetList OctetList;
#else
typedef struct OctetList OctetList;
#endif /* __cplusplus */

#endif 	/* __OctetList_FWD_DEFINED__ */


#ifndef __IADsEmail_FWD_DEFINED__
#define __IADsEmail_FWD_DEFINED__
typedef interface IADsEmail IADsEmail;
#endif 	/* __IADsEmail_FWD_DEFINED__ */


#ifndef __Email_FWD_DEFINED__
#define __Email_FWD_DEFINED__

#ifdef __cplusplus
typedef class Email Email;
#else
typedef struct Email Email;
#endif /* __cplusplus */

#endif 	/* __Email_FWD_DEFINED__ */


#ifndef __IADsPath_FWD_DEFINED__
#define __IADsPath_FWD_DEFINED__
typedef interface IADsPath IADsPath;
#endif 	/* __IADsPath_FWD_DEFINED__ */


#ifndef __Path_FWD_DEFINED__
#define __Path_FWD_DEFINED__

#ifdef __cplusplus
typedef class Path Path;
#else
typedef struct Path Path;
#endif /* __cplusplus */

#endif 	/* __Path_FWD_DEFINED__ */


#ifndef __IADsReplicaPointer_FWD_DEFINED__
#define __IADsReplicaPointer_FWD_DEFINED__
typedef interface IADsReplicaPointer IADsReplicaPointer;
#endif 	/* __IADsReplicaPointer_FWD_DEFINED__ */


#ifndef __ReplicaPointer_FWD_DEFINED__
#define __ReplicaPointer_FWD_DEFINED__

#ifdef __cplusplus
typedef class ReplicaPointer ReplicaPointer;
#else
typedef struct ReplicaPointer ReplicaPointer;
#endif /* __cplusplus */

#endif 	/* __ReplicaPointer_FWD_DEFINED__ */


#ifndef __IADsAcl_FWD_DEFINED__
#define __IADsAcl_FWD_DEFINED__
typedef interface IADsAcl IADsAcl;
#endif 	/* __IADsAcl_FWD_DEFINED__ */


#ifndef __IADsTimestamp_FWD_DEFINED__
#define __IADsTimestamp_FWD_DEFINED__
typedef interface IADsTimestamp IADsTimestamp;
#endif 	/* __IADsTimestamp_FWD_DEFINED__ */


#ifndef __Timestamp_FWD_DEFINED__
#define __Timestamp_FWD_DEFINED__

#ifdef __cplusplus
typedef class Timestamp Timestamp;
#else
typedef struct Timestamp Timestamp;
#endif /* __cplusplus */

#endif 	/* __Timestamp_FWD_DEFINED__ */


#ifndef __IADsPostalAddress_FWD_DEFINED__
#define __IADsPostalAddress_FWD_DEFINED__
typedef interface IADsPostalAddress IADsPostalAddress;
#endif 	/* __IADsPostalAddress_FWD_DEFINED__ */


#ifndef __PostalAddress_FWD_DEFINED__
#define __PostalAddress_FWD_DEFINED__

#ifdef __cplusplus
typedef class PostalAddress PostalAddress;
#else
typedef struct PostalAddress PostalAddress;
#endif /* __cplusplus */

#endif 	/* __PostalAddress_FWD_DEFINED__ */


#ifndef __IADsBackLink_FWD_DEFINED__
#define __IADsBackLink_FWD_DEFINED__
typedef interface IADsBackLink IADsBackLink;
#endif 	/* __IADsBackLink_FWD_DEFINED__ */


#ifndef __BackLink_FWD_DEFINED__
#define __BackLink_FWD_DEFINED__

#ifdef __cplusplus
typedef class BackLink BackLink;
#else
typedef struct BackLink BackLink;
#endif /* __cplusplus */

#endif 	/* __BackLink_FWD_DEFINED__ */


#ifndef __IADsTypedName_FWD_DEFINED__
#define __IADsTypedName_FWD_DEFINED__
typedef interface IADsTypedName IADsTypedName;
#endif 	/* __IADsTypedName_FWD_DEFINED__ */


#ifndef __TypedName_FWD_DEFINED__
#define __TypedName_FWD_DEFINED__

#ifdef __cplusplus
typedef class TypedName TypedName;
#else
typedef struct TypedName TypedName;
#endif /* __cplusplus */

#endif 	/* __TypedName_FWD_DEFINED__ */


#ifndef __IADsHold_FWD_DEFINED__
#define __IADsHold_FWD_DEFINED__
typedef interface IADsHold IADsHold;
#endif 	/* __IADsHold_FWD_DEFINED__ */


#ifndef __Hold_FWD_DEFINED__
#define __Hold_FWD_DEFINED__

#ifdef __cplusplus
typedef class Hold Hold;
#else
typedef struct Hold Hold;
#endif /* __cplusplus */

#endif 	/* __Hold_FWD_DEFINED__ */


#ifndef __IADsObjectOptions_FWD_DEFINED__
#define __IADsObjectOptions_FWD_DEFINED__
typedef interface IADsObjectOptions IADsObjectOptions;
#endif 	/* __IADsObjectOptions_FWD_DEFINED__ */


#ifndef __IADsPathname_FWD_DEFINED__
#define __IADsPathname_FWD_DEFINED__
typedef interface IADsPathname IADsPathname;
#endif 	/* __IADsPathname_FWD_DEFINED__ */


#ifndef __Pathname_FWD_DEFINED__
#define __Pathname_FWD_DEFINED__

#ifdef __cplusplus
typedef class Pathname Pathname;
#else
typedef struct Pathname Pathname;
#endif /* __cplusplus */

#endif 	/* __Pathname_FWD_DEFINED__ */


#ifndef __IADsADSystemInfo_FWD_DEFINED__
#define __IADsADSystemInfo_FWD_DEFINED__
typedef interface IADsADSystemInfo IADsADSystemInfo;
#endif 	/* __IADsADSystemInfo_FWD_DEFINED__ */


#ifndef __ADSystemInfo_FWD_DEFINED__
#define __ADSystemInfo_FWD_DEFINED__

#ifdef __cplusplus
typedef class ADSystemInfo ADSystemInfo;
#else
typedef struct ADSystemInfo ADSystemInfo;
#endif /* __cplusplus */

#endif 	/* __ADSystemInfo_FWD_DEFINED__ */


#ifndef __IADsWinNTSystemInfo_FWD_DEFINED__
#define __IADsWinNTSystemInfo_FWD_DEFINED__
typedef interface IADsWinNTSystemInfo IADsWinNTSystemInfo;
#endif 	/* __IADsWinNTSystemInfo_FWD_DEFINED__ */


#ifndef __WinNTSystemInfo_FWD_DEFINED__
#define __WinNTSystemInfo_FWD_DEFINED__

#ifdef __cplusplus
typedef class WinNTSystemInfo WinNTSystemInfo;
#else
typedef struct WinNTSystemInfo WinNTSystemInfo;
#endif /* __cplusplus */

#endif 	/* __WinNTSystemInfo_FWD_DEFINED__ */


#ifndef __IADsDNWithBinary_FWD_DEFINED__
#define __IADsDNWithBinary_FWD_DEFINED__
typedef interface IADsDNWithBinary IADsDNWithBinary;
#endif 	/* __IADsDNWithBinary_FWD_DEFINED__ */


#ifndef __DNWithBinary_FWD_DEFINED__
#define __DNWithBinary_FWD_DEFINED__

#ifdef __cplusplus
typedef class DNWithBinary DNWithBinary;
#else
typedef struct DNWithBinary DNWithBinary;
#endif /* __cplusplus */

#endif 	/* __DNWithBinary_FWD_DEFINED__ */


#ifndef __IADsDNWithString_FWD_DEFINED__
#define __IADsDNWithString_FWD_DEFINED__
typedef interface IADsDNWithString IADsDNWithString;
#endif 	/* __IADsDNWithString_FWD_DEFINED__ */


#ifndef __DNWithString_FWD_DEFINED__
#define __DNWithString_FWD_DEFINED__

#ifdef __cplusplus
typedef class DNWithString DNWithString;
#else
typedef struct DNWithString DNWithString;
#endif /* __cplusplus */

#endif 	/* __DNWithString_FWD_DEFINED__ */


#ifndef __IADsSecurityUtility_FWD_DEFINED__
#define __IADsSecurityUtility_FWD_DEFINED__
typedef interface IADsSecurityUtility IADsSecurityUtility;
#endif 	/* __IADsSecurityUtility_FWD_DEFINED__ */


#ifndef __ADsSecurityUtility_FWD_DEFINED__
#define __ADsSecurityUtility_FWD_DEFINED__

#ifdef __cplusplus
typedef class ADsSecurityUtility ADsSecurityUtility;
#else
typedef struct ADsSecurityUtility ADsSecurityUtility;
#endif /* __cplusplus */

#endif 	/* __ADsSecurityUtility_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __ActiveDs_LIBRARY_DEFINED__
#define __ActiveDs_LIBRARY_DEFINED__

/* library ActiveDs */
/* [helpstring][version][uuid] */ 

#pragma once
#pragma once
#pragma once
#pragma once
typedef /* [public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_ads_0000_0000_0001
    {	ADSTYPE_INVALID	= 0,
	ADSTYPE_DN_STRING	= ( ADSTYPE_INVALID + 1 ) ,
	ADSTYPE_CASE_EXACT_STRING	= ( ADSTYPE_DN_STRING + 1 ) ,
	ADSTYPE_CASE_IGNORE_STRING	= ( ADSTYPE_CASE_EXACT_STRING + 1 ) ,
	ADSTYPE_PRINTABLE_STRING	= ( ADSTYPE_CASE_IGNORE_STRING + 1 ) ,
	ADSTYPE_NUMERIC_STRING	= ( ADSTYPE_PRINTABLE_STRING + 1 ) ,
	ADSTYPE_BOOLEAN	= ( ADSTYPE_NUMERIC_STRING + 1 ) ,
	ADSTYPE_INTEGER	= ( ADSTYPE_BOOLEAN + 1 ) ,
	ADSTYPE_OCTET_STRING	= ( ADSTYPE_INTEGER + 1 ) ,
	ADSTYPE_UTC_TIME	= ( ADSTYPE_OCTET_STRING + 1 ) ,
	ADSTYPE_LARGE_INTEGER	= ( ADSTYPE_UTC_TIME + 1 ) ,
	ADSTYPE_PROV_SPECIFIC	= ( ADSTYPE_LARGE_INTEGER + 1 ) ,
	ADSTYPE_OBJECT_CLASS	= ( ADSTYPE_PROV_SPECIFIC + 1 ) ,
	ADSTYPE_CASEIGNORE_LIST	= ( ADSTYPE_OBJECT_CLASS + 1 ) ,
	ADSTYPE_OCTET_LIST	= ( ADSTYPE_CASEIGNORE_LIST + 1 ) ,
	ADSTYPE_PATH	= ( ADSTYPE_OCTET_LIST + 1 ) ,
	ADSTYPE_POSTALADDRESS	= ( ADSTYPE_PATH + 1 ) ,
	ADSTYPE_TIMESTAMP	= ( ADSTYPE_POSTALADDRESS + 1 ) ,
	ADSTYPE_BACKLINK	= ( ADSTYPE_TIMESTAMP + 1 ) ,
	ADSTYPE_TYPEDNAME	= ( ADSTYPE_BACKLINK + 1 ) ,
	ADSTYPE_HOLD	= ( ADSTYPE_TYPEDNAME + 1 ) ,
	ADSTYPE_NETADDRESS	= ( ADSTYPE_HOLD + 1 ) ,
	ADSTYPE_REPLICAPOINTER	= ( ADSTYPE_NETADDRESS + 1 ) ,
	ADSTYPE_FAXNUMBER	= ( ADSTYPE_REPLICAPOINTER + 1 ) ,
	ADSTYPE_EMAIL	= ( ADSTYPE_FAXNUMBER + 1 ) ,
	ADSTYPE_NT_SECURITY_DESCRIPTOR	= ( ADSTYPE_EMAIL + 1 ) ,
	ADSTYPE_UNKNOWN	= ( ADSTYPE_NT_SECURITY_DESCRIPTOR + 1 ) ,
	ADSTYPE_DN_WITH_BINARY	= ( ADSTYPE_UNKNOWN + 1 ) ,
	ADSTYPE_DN_WITH_STRING	= ( ADSTYPE_DN_WITH_BINARY + 1 ) 
    } 	ADSTYPEENUM;

typedef ADSTYPEENUM ADSTYPE;

typedef unsigned char BYTE;

typedef unsigned char *LPBYTE;

typedef unsigned char *PBYTE;

typedef LPWSTR ADS_DN_STRING;

typedef LPWSTR *PADS_DN_STRING;

typedef LPWSTR ADS_CASE_EXACT_STRING;

typedef LPWSTR *PADS_CASE_EXACT_STRING;

typedef LPWSTR ADS_CASE_IGNORE_STRING;

typedef LPWSTR *PADS_CASE_IGNORE_STRING;

typedef LPWSTR ADS_PRINTABLE_STRING;

typedef LPWSTR *PADS_PRINTABLE_STRING;

typedef LPWSTR ADS_NUMERIC_STRING;

typedef LPWSTR *PADS_NUMERIC_STRING;

typedef DWORD ADS_BOOLEAN;

typedef DWORD *LPNDS_BOOLEAN;

typedef DWORD ADS_INTEGER;

typedef DWORD *PADS_INTEGER;

typedef /* [public][public][public][public][public][public][public][public][public][public][public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0002
    {
    DWORD dwLength;
    LPBYTE lpValue;
    } 	ADS_OCTET_STRING;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0002 *PADS_OCTET_STRING;

typedef /* [public][public][public][public][public][public][public][public][public][public][public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0003
    {
    DWORD dwLength;
    LPBYTE lpValue;
    } 	ADS_NT_SECURITY_DESCRIPTOR;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0003 *PADS_NT_SECURITY_DESCRIPTOR;

typedef SYSTEMTIME ADS_UTC_TIME;

typedef SYSTEMTIME *PADS_UTC_TIME;

typedef LARGE_INTEGER ADS_LARGE_INTEGER;

typedef LARGE_INTEGER *PADS_LARGE_INTEGER;

typedef LPWSTR ADS_OBJECT_CLASS;

typedef LPWSTR *PADS_OBJECT_CLASS;

typedef /* [public][public][public][public][public][public][public][public][public][public][public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0004
    {
    DWORD dwLength;
    LPBYTE lpValue;
    } 	ADS_PROV_SPECIFIC;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0004 *PADS_PROV_SPECIFIC;

typedef struct _ADS_CASEIGNORE_LIST
    {
    struct _ADS_CASEIGNORE_LIST *Next;
    LPWSTR String;
    } 	ADS_CASEIGNORE_LIST;

typedef struct _ADS_CASEIGNORE_LIST *PADS_CASEIGNORE_LIST;

typedef struct _ADS_OCTET_LIST
    {
    struct _ADS_OCTET_LIST *Next;
    DWORD Length;
    BYTE *Data;
    } 	ADS_OCTET_LIST;

typedef struct _ADS_OCTET_LIST *PADS_OCTET_LIST;

typedef /* [public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0005
    {
    DWORD Type;
    LPWSTR VolumeName;
    LPWSTR Path;
    } 	ADS_PATH;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0005 *PADS_PATH;

typedef /* [public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0006
    {
    LPWSTR PostalAddress[ 6 ];
    } 	ADS_POSTALADDRESS;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0006 *PADS_POSTALADDRESS;

typedef /* [public][public][public][public][public][public][public][public][public][public][public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0007
    {
    DWORD WholeSeconds;
    DWORD EventID;
    } 	ADS_TIMESTAMP;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0007 *PADS_TIMESTAMP;

typedef /* [public][public][public][public][public][public][public][public][public][public][public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0008
    {
    DWORD RemoteID;
    LPWSTR ObjectName;
    } 	ADS_BACKLINK;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0008 *PADS_BACKLINK;

typedef /* [public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0009
    {
    LPWSTR ObjectName;
    DWORD Level;
    DWORD Interval;
    } 	ADS_TYPEDNAME;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0009 *PADS_TYPEDNAME;

typedef /* [public][public][public][public][public][public][public][public][public][public][public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0010
    {
    LPWSTR ObjectName;
    DWORD Amount;
    } 	ADS_HOLD;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0010 *PADS_HOLD;

typedef /* [public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0011
    {
    DWORD AddressType;
    DWORD AddressLength;
    BYTE *Address;
    } 	ADS_NETADDRESS;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0011 *PADS_NETADDRESS;

typedef /* [public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0012
    {
    LPWSTR ServerName;
    DWORD ReplicaType;
    DWORD ReplicaNumber;
    DWORD Count;
    PADS_NETADDRESS ReplicaAddressHints;
    } 	ADS_REPLICAPOINTER;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0012 *PADS_REPLICAPOINTER;

typedef /* [public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0013
    {
    LPWSTR TelephoneNumber;
    DWORD NumberOfBits;
    LPBYTE Parameters;
    } 	ADS_FAXNUMBER;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0013 *PADS_FAXNUMBER;

typedef /* [public][public][public][public][public][public][public][public][public][public][public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0014
    {
    LPWSTR Address;
    DWORD Type;
    } 	ADS_EMAIL;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0014 *PADS_EMAIL;

typedef /* [public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0015
    {
    DWORD dwLength;
    LPBYTE lpBinaryValue;
    LPWSTR pszDNString;
    } 	ADS_DN_WITH_BINARY;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0015 *PADS_DN_WITH_BINARY;

typedef /* [public] */ struct __MIDL___MIDL_itf_ads_0000_0000_0016
    {
    LPWSTR pszStringValue;
    LPWSTR pszDNString;
    } 	ADS_DN_WITH_STRING;

typedef struct __MIDL___MIDL_itf_ads_0000_0000_0016 *PADS_DN_WITH_STRING;

typedef struct _adsvalue
    {
    ADSTYPE dwType;
    union 
        {
        ADS_DN_STRING DNString;
        ADS_CASE_EXACT_STRING CaseExactString;
        ADS_CASE_IGNORE_STRING CaseIgnoreString;
        ADS_PRINTABLE_STRING PrintableString;
        ADS_NUMERIC_STRING NumericString;
        ADS_BOOLEAN Boolean;
        ADS_INTEGER Integer;
        ADS_OCTET_STRING OctetString;
        ADS_UTC_TIME UTCTime;
        ADS_LARGE_INTEGER LargeInteger;
        ADS_OBJECT_CLASS ClassName;
        ADS_PROV_SPECIFIC ProviderSpecific;
        PADS_CASEIGNORE_LIST pCaseIgnoreList;
        PADS_OCTET_LIST pOctetList;
        PADS_PATH pPath;
        PADS_POSTALADDRESS pPostalAddress;
        ADS_TIMESTAMP Timestamp;
        ADS_BACKLINK BackLink;
        PADS_TYPEDNAME pTypedName;
        ADS_HOLD Hold;
        PADS_NETADDRESS pNetAddress;
        PADS_REPLICAPOINTER pReplicaPointer;
        PADS_FAXNUMBER pFaxNumber;
        ADS_EMAIL Email;
        ADS_NT_SECURITY_DESCRIPTOR SecurityDescriptor;
        PADS_DN_WITH_BINARY pDNWithBinary;
        PADS_DN_WITH_STRING pDNWithString;
        } 	;
    } 	ADSVALUE;

typedef struct _adsvalue *PADSVALUE;

typedef struct _adsvalue *LPADSVALUE;

typedef struct _ads_attr_info
    {
    LPWSTR pszAttrName;
    DWORD dwControlCode;
    ADSTYPE dwADsType;
    PADSVALUE pADsValues;
    DWORD dwNumValues;
    } 	ADS_ATTR_INFO;

typedef struct _ads_attr_info *PADS_ATTR_INFO;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0000_0000_0018
    {	ADS_SECURE_AUTHENTICATION	= 0x1,
	ADS_USE_ENCRYPTION	= 0x2,
	ADS_USE_SSL	= 0x2,
	ADS_READONLY_SERVER	= 0x4,
	ADS_PROMPT_CREDENTIALS	= 0x8,
	ADS_NO_AUTHENTICATION	= 0x10,
	ADS_FAST_BIND	= 0x20,
	ADS_USE_SIGNING	= 0x40,
	ADS_USE_SEALING	= 0x80,
	ADS_USE_DELEGATION	= 0x100,
	ADS_SERVER_BIND	= 0x200,
	ADS_NO_REFERRAL_CHASING	= 0x400,
	ADS_AUTH_RESERVED	= 0x80000000
    } 	ADS_AUTHENTICATION_ENUM;

#define	ADS_ATTR_CLEAR	( 1 )

#define	ADS_ATTR_UPDATE	( 2 )

#define	ADS_ATTR_APPEND	( 3 )

#define	ADS_ATTR_DELETE	( 4 )

typedef struct _ads_object_info
    {
    LPWSTR pszRDN;
    LPWSTR pszObjectDN;
    LPWSTR pszParentDN;
    LPWSTR pszSchemaDN;
    LPWSTR pszClassName;
    } 	ADS_OBJECT_INFO;

typedef struct _ads_object_info *PADS_OBJECT_INFO;

typedef /* [public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_ads_0000_0000_0019
    {	ADS_STATUS_S_OK	= 0,
	ADS_STATUS_INVALID_SEARCHPREF	= ( ADS_STATUS_S_OK + 1 ) ,
	ADS_STATUS_INVALID_SEARCHPREFVALUE	= ( ADS_STATUS_INVALID_SEARCHPREF + 1 ) 
    } 	ADS_STATUSENUM;

typedef ADS_STATUSENUM ADS_STATUS;

typedef ADS_STATUSENUM *PADS_STATUS;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0000_0000_0020
    {	ADS_DEREF_NEVER	= 0,
	ADS_DEREF_SEARCHING	= 1,
	ADS_DEREF_FINDING	= 2,
	ADS_DEREF_ALWAYS	= 3
    } 	ADS_DEREFENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0000_0000_0021
    {	ADS_SCOPE_BASE	= 0,
	ADS_SCOPE_ONELEVEL	= 1,
	ADS_SCOPE_SUBTREE	= 2
    } 	ADS_SCOPEENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0000_0000_0022
    {	ADSIPROP_ASYNCHRONOUS	= 0,
	ADSIPROP_DEREF_ALIASES	= 0x1,
	ADSIPROP_SIZE_LIMIT	= 0x2,
	ADSIPROP_TIME_LIMIT	= 0x3,
	ADSIPROP_ATTRIBTYPES_ONLY	= 0x4,
	ADSIPROP_SEARCH_SCOPE	= 0x5,
	ADSIPROP_TIMEOUT	= 0x6,
	ADSIPROP_PAGESIZE	= 0x7,
	ADSIPROP_PAGED_TIME_LIMIT	= 0x8,
	ADSIPROP_CHASE_REFERRALS	= 0x9,
	ADSIPROP_SORT_ON	= 0xa,
	ADSIPROP_CACHE_RESULTS	= 0xb,
	ADSIPROP_ADSIFLAG	= 0xc
    } 	ADS_PREFERENCES_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0000_0000_0023
    {	ADSI_DIALECT_LDAP	= 0,
	ADSI_DIALECT_SQL	= 0x1
    } 	ADSI_DIALECT_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0000_0000_0024
    {	ADS_CHASE_REFERRALS_NEVER	= 0,
	ADS_CHASE_REFERRALS_SUBORDINATE	= 0x20,
	ADS_CHASE_REFERRALS_EXTERNAL	= 0x40,
	ADS_CHASE_REFERRALS_ALWAYS	= ( ADS_CHASE_REFERRALS_SUBORDINATE | ADS_CHASE_REFERRALS_EXTERNAL ) 
    } 	ADS_CHASE_REFERRALS_ENUM;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_ads_0000_0000_0025
    {	ADS_SEARCHPREF_ASYNCHRONOUS	= 0,
	ADS_SEARCHPREF_DEREF_ALIASES	= ( ADS_SEARCHPREF_ASYNCHRONOUS + 1 ) ,
	ADS_SEARCHPREF_SIZE_LIMIT	= ( ADS_SEARCHPREF_DEREF_ALIASES + 1 ) ,
	ADS_SEARCHPREF_TIME_LIMIT	= ( ADS_SEARCHPREF_SIZE_LIMIT + 1 ) ,
	ADS_SEARCHPREF_ATTRIBTYPES_ONLY	= ( ADS_SEARCHPREF_TIME_LIMIT + 1 ) ,
	ADS_SEARCHPREF_SEARCH_SCOPE	= ( ADS_SEARCHPREF_ATTRIBTYPES_ONLY + 1 ) ,
	ADS_SEARCHPREF_TIMEOUT	= ( ADS_SEARCHPREF_SEARCH_SCOPE + 1 ) ,
	ADS_SEARCHPREF_PAGESIZE	= ( ADS_SEARCHPREF_TIMEOUT + 1 ) ,
	ADS_SEARCHPREF_PAGED_TIME_LIMIT	= ( ADS_SEARCHPREF_PAGESIZE + 1 ) ,
	ADS_SEARCHPREF_CHASE_REFERRALS	= ( ADS_SEARCHPREF_PAGED_TIME_LIMIT + 1 ) ,
	ADS_SEARCHPREF_SORT_ON	= ( ADS_SEARCHPREF_CHASE_REFERRALS + 1 ) ,
	ADS_SEARCHPREF_CACHE_RESULTS	= ( ADS_SEARCHPREF_SORT_ON + 1 ) ,
	ADS_SEARCHPREF_DIRSYNC	= ( ADS_SEARCHPREF_CACHE_RESULTS + 1 ) ,
	ADS_SEARCHPREF_TOMBSTONE	= ( ADS_SEARCHPREF_DIRSYNC + 1 ) ,
	ADS_SEARCHPREF_VLV	= ( ADS_SEARCHPREF_TOMBSTONE + 1 ) ,
	ADS_SEARCHPREF_ATTRIBUTE_QUERY	= ( ADS_SEARCHPREF_VLV + 1 ) ,
	ADS_SEARCHPREF_SECURITY_MASK	= ( ADS_SEARCHPREF_ATTRIBUTE_QUERY + 1 ) ,
	ADS_SEARCHPREF_DIRSYNC_FLAG	= ( ADS_SEARCHPREF_SECURITY_MASK + 1 ) ,
	ADS_SEARCHPREF_EXTENDED_DN	= ( ADS_SEARCHPREF_DIRSYNC_FLAG + 1 ) 
    } 	ADS_SEARCHPREF_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0000_0000_0026
    {	ADS_PASSWORD_ENCODE_REQUIRE_SSL	= 0,
	ADS_PASSWORD_ENCODE_CLEAR	= 1
    } 	ADS_PASSWORD_ENCODING_ENUM;

typedef ADS_SEARCHPREF_ENUM ADS_SEARCHPREF;

typedef struct ads_searchpref_info
    {
    ADS_SEARCHPREF dwSearchPref;
    ADSVALUE vValue;
    ADS_STATUS dwStatus;
    } 	ADS_SEARCHPREF_INFO;

typedef struct ads_searchpref_info *PADS_SEARCHPREF_INFO;

typedef struct ads_searchpref_info *LPADS_SEARCHPREF_INFO;

#define	ADS_DIRSYNC_COOKIE	( L"fc8cb04d-311d-406c-8cb9-1ae8b843b418" )

#define	ADS_VLV_RESPONSE	( L"fc8cb04d-311d-406c-8cb9-1ae8b843b419" )

typedef HANDLE ADS_SEARCH_HANDLE;

typedef HANDLE *PADS_SEARCH_HANDLE;

typedef struct ads_search_column
    {
    LPWSTR pszAttrName;
    ADSTYPE dwADsType;
    PADSVALUE pADsValues;
    DWORD dwNumValues;
    HANDLE hReserved;
    } 	ADS_SEARCH_COLUMN;

typedef struct ads_search_column *PADS_SEARCH_COLUMN;

typedef struct _ads_attr_def
    {
    LPWSTR pszAttrName;
    ADSTYPE dwADsType;
    DWORD dwMinRange;
    DWORD dwMaxRange;
    BOOL fMultiValued;
    } 	ADS_ATTR_DEF;

typedef struct _ads_attr_def *PADS_ATTR_DEF;

typedef struct _ads_class_def
    {
    LPWSTR pszClassName;
    DWORD dwMandatoryAttrs;
    LPWSTR *ppszMandatoryAttrs;
    DWORD optionalAttrs;
    LPWSTR **ppszOptionalAttrs;
    DWORD dwNamingAttrs;
    LPWSTR **ppszNamingAttrs;
    DWORD dwSuperClasses;
    LPWSTR **ppszSuperClasses;
    BOOL fIsContainer;
    } 	ADS_CLASS_DEF;

typedef struct _ads_class_def *PADS_CLASS_DEF;

typedef struct _ads_sortkey
    {
    LPWSTR pszAttrType;
    LPWSTR pszReserved;
    BOOLEAN fReverseorder;
    } 	ADS_SORTKEY;

typedef struct _ads_sortkey *PADS_SORTKEY;

typedef struct _ads_vlv
    {
    DWORD dwBeforeCount;
    DWORD dwAfterCount;
    DWORD dwOffset;
    DWORD dwContentCount;
    LPWSTR pszTarget;
    DWORD dwContextIDLength;
    LPBYTE lpContextID;
    } 	ADS_VLV;

typedef struct _ads_vlv *PADS_VLV;

#define	ADS_EXT_MINEXTDISPID	( 1 )

#define	ADS_EXT_MAXEXTDISPID	( 16777215 )

#define	ADS_EXT_INITCREDENTIALS	( 1 )

#define	ADS_EXT_INITIALIZE_COMPLETE	( 2 )

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0000_0000_0027
    {	ADS_PROPERTY_CLEAR	= 1,
	ADS_PROPERTY_UPDATE	= 2,
	ADS_PROPERTY_APPEND	= 3,
	ADS_PROPERTY_DELETE	= 4
    } 	ADS_PROPERTY_OPERATION_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0015_0001
    {	ADS_SYSTEMFLAG_DISALLOW_DELETE	= 0x80000000,
	ADS_SYSTEMFLAG_CONFIG_ALLOW_RENAME	= 0x40000000,
	ADS_SYSTEMFLAG_CONFIG_ALLOW_MOVE	= 0x20000000,
	ADS_SYSTEMFLAG_CONFIG_ALLOW_LIMITED_MOVE	= 0x10000000,
	ADS_SYSTEMFLAG_DOMAIN_DISALLOW_RENAME	= 0x8000000,
	ADS_SYSTEMFLAG_DOMAIN_DISALLOW_MOVE	= 0x4000000,
	ADS_SYSTEMFLAG_CR_NTDS_NC	= 0x1,
	ADS_SYSTEMFLAG_CR_NTDS_DOMAIN	= 0x2,
	ADS_SYSTEMFLAG_ATTR_NOT_REPLICATED	= 0x1,
	ADS_SYSTEMFLAG_ATTR_IS_CONSTRUCTED	= 0x4
    } 	ADS_SYSTEMFLAG_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0021_0001
    {	ADS_GROUP_TYPE_GLOBAL_GROUP	= 0x2,
	ADS_GROUP_TYPE_DOMAIN_LOCAL_GROUP	= 0x4,
	ADS_GROUP_TYPE_LOCAL_GROUP	= 0x4,
	ADS_GROUP_TYPE_UNIVERSAL_GROUP	= 0x8,
	ADS_GROUP_TYPE_SECURITY_ENABLED	= 0x80000000
    } 	ADS_GROUP_TYPE_ENUM;

typedef 
enum ADS_USER_FLAG
    {	ADS_UF_SCRIPT	= 0x1,
	ADS_UF_ACCOUNTDISABLE	= 0x2,
	ADS_UF_HOMEDIR_REQUIRED	= 0x8,
	ADS_UF_LOCKOUT	= 0x10,
	ADS_UF_PASSWD_NOTREQD	= 0x20,
	ADS_UF_PASSWD_CANT_CHANGE	= 0x40,
	ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED	= 0x80,
	ADS_UF_TEMP_DUPLICATE_ACCOUNT	= 0x100,
	ADS_UF_NORMAL_ACCOUNT	= 0x200,
	ADS_UF_INTERDOMAIN_TRUST_ACCOUNT	= 0x800,
	ADS_UF_WORKSTATION_TRUST_ACCOUNT	= 0x1000,
	ADS_UF_SERVER_TRUST_ACCOUNT	= 0x2000,
	ADS_UF_DONT_EXPIRE_PASSWD	= 0x10000,
	ADS_UF_MNS_LOGON_ACCOUNT	= 0x20000,
	ADS_UF_SMARTCARD_REQUIRED	= 0x40000,
	ADS_UF_TRUSTED_FOR_DELEGATION	= 0x80000,
	ADS_UF_NOT_DELEGATED	= 0x100000,
	ADS_UF_USE_DES_KEY_ONLY	= 0x200000,
	ADS_UF_DONT_REQUIRE_PREAUTH	= 0x400000,
	ADS_UF_PASSWORD_EXPIRED	= 0x800000,
	ADS_UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION	= 0x1000000
    } 	ADS_USER_FLAG_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0043_0001
    {	ADS_RIGHT_DELETE	= 0x10000,
	ADS_RIGHT_READ_CONTROL	= 0x20000,
	ADS_RIGHT_WRITE_DAC	= 0x40000,
	ADS_RIGHT_WRITE_OWNER	= 0x80000,
	ADS_RIGHT_SYNCHRONIZE	= 0x100000,
	ADS_RIGHT_ACCESS_SYSTEM_SECURITY	= 0x1000000,
	ADS_RIGHT_GENERIC_READ	= 0x80000000,
	ADS_RIGHT_GENERIC_WRITE	= 0x40000000,
	ADS_RIGHT_GENERIC_EXECUTE	= 0x20000000,
	ADS_RIGHT_GENERIC_ALL	= 0x10000000,
	ADS_RIGHT_DS_CREATE_CHILD	= 0x1,
	ADS_RIGHT_DS_DELETE_CHILD	= 0x2,
	ADS_RIGHT_ACTRL_DS_LIST	= 0x4,
	ADS_RIGHT_DS_SELF	= 0x8,
	ADS_RIGHT_DS_READ_PROP	= 0x10,
	ADS_RIGHT_DS_WRITE_PROP	= 0x20,
	ADS_RIGHT_DS_DELETE_TREE	= 0x40,
	ADS_RIGHT_DS_LIST_OBJECT	= 0x80,
	ADS_RIGHT_DS_CONTROL_ACCESS	= 0x100
    } 	ADS_RIGHTS_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0043_0002
    {	ADS_ACETYPE_ACCESS_ALLOWED	= 0,
	ADS_ACETYPE_ACCESS_DENIED	= 0x1,
	ADS_ACETYPE_SYSTEM_AUDIT	= 0x2,
	ADS_ACETYPE_ACCESS_ALLOWED_OBJECT	= 0x5,
	ADS_ACETYPE_ACCESS_DENIED_OBJECT	= 0x6,
	ADS_ACETYPE_SYSTEM_AUDIT_OBJECT	= 0x7,
	ADS_ACETYPE_SYSTEM_ALARM_OBJECT	= 0x8,
	ADS_ACETYPE_ACCESS_ALLOWED_CALLBACK	= 0x9,
	ADS_ACETYPE_ACCESS_DENIED_CALLBACK	= 0xa,
	ADS_ACETYPE_ACCESS_ALLOWED_CALLBACK_OBJECT	= 0xb,
	ADS_ACETYPE_ACCESS_DENIED_CALLBACK_OBJECT	= 0xc,
	ADS_ACETYPE_SYSTEM_AUDIT_CALLBACK	= 0xd,
	ADS_ACETYPE_SYSTEM_ALARM_CALLBACK	= 0xe,
	ADS_ACETYPE_SYSTEM_AUDIT_CALLBACK_OBJECT	= 0xf,
	ADS_ACETYPE_SYSTEM_ALARM_CALLBACK_OBJECT	= 0x10
    } 	ADS_ACETYPE_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0043_0003
    {	ADS_ACEFLAG_INHERIT_ACE	= 0x2,
	ADS_ACEFLAG_NO_PROPAGATE_INHERIT_ACE	= 0x4,
	ADS_ACEFLAG_INHERIT_ONLY_ACE	= 0x8,
	ADS_ACEFLAG_INHERITED_ACE	= 0x10,
	ADS_ACEFLAG_VALID_INHERIT_FLAGS	= 0x1f,
	ADS_ACEFLAG_SUCCESSFUL_ACCESS	= 0x40,
	ADS_ACEFLAG_FAILED_ACCESS	= 0x80
    } 	ADS_ACEFLAG_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0043_0004
    {	ADS_FLAG_OBJECT_TYPE_PRESENT	= 0x1,
	ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT	= 0x2
    } 	ADS_FLAGTYPE_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0043_0005
    {	ADS_SD_CONTROL_SE_OWNER_DEFAULTED	= 0x1,
	ADS_SD_CONTROL_SE_GROUP_DEFAULTED	= 0x2,
	ADS_SD_CONTROL_SE_DACL_PRESENT	= 0x4,
	ADS_SD_CONTROL_SE_DACL_DEFAULTED	= 0x8,
	ADS_SD_CONTROL_SE_SACL_PRESENT	= 0x10,
	ADS_SD_CONTROL_SE_SACL_DEFAULTED	= 0x20,
	ADS_SD_CONTROL_SE_DACL_AUTO_INHERIT_REQ	= 0x100,
	ADS_SD_CONTROL_SE_SACL_AUTO_INHERIT_REQ	= 0x200,
	ADS_SD_CONTROL_SE_DACL_AUTO_INHERITED	= 0x400,
	ADS_SD_CONTROL_SE_SACL_AUTO_INHERITED	= 0x800,
	ADS_SD_CONTROL_SE_DACL_PROTECTED	= 0x1000,
	ADS_SD_CONTROL_SE_SACL_PROTECTED	= 0x2000,
	ADS_SD_CONTROL_SE_SELF_RELATIVE	= 0x8000
    } 	ADS_SD_CONTROL_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0043_0006
    {	ADS_SD_REVISION_DS	= 4
    } 	ADS_SD_REVISION_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0044_0001
    {	ADS_NAME_TYPE_1779	= 1,
	ADS_NAME_TYPE_CANONICAL	= 2,
	ADS_NAME_TYPE_NT4	= 3,
	ADS_NAME_TYPE_DISPLAY	= 4,
	ADS_NAME_TYPE_DOMAIN_SIMPLE	= 5,
	ADS_NAME_TYPE_ENTERPRISE_SIMPLE	= 6,
	ADS_NAME_TYPE_GUID	= 7,
	ADS_NAME_TYPE_UNKNOWN	= 8,
	ADS_NAME_TYPE_USER_PRINCIPAL_NAME	= 9,
	ADS_NAME_TYPE_CANONICAL_EX	= 10,
	ADS_NAME_TYPE_SERVICE_PRINCIPAL_NAME	= 11,
	ADS_NAME_TYPE_SID_OR_SID_HISTORY_NAME	= 12
    } 	ADS_NAME_TYPE_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0044_0002
    {	ADS_NAME_INITTYPE_DOMAIN	= 1,
	ADS_NAME_INITTYPE_SERVER	= 2,
	ADS_NAME_INITTYPE_GC	= 3
    } 	ADS_NAME_INITTYPE_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0058_0001
    {	ADS_OPTION_SERVERNAME	= 0,
	ADS_OPTION_REFERRALS	= ( ADS_OPTION_SERVERNAME + 1 ) ,
	ADS_OPTION_PAGE_SIZE	= ( ADS_OPTION_REFERRALS + 1 ) ,
	ADS_OPTION_SECURITY_MASK	= ( ADS_OPTION_PAGE_SIZE + 1 ) ,
	ADS_OPTION_MUTUAL_AUTH_STATUS	= ( ADS_OPTION_SECURITY_MASK + 1 ) ,
	ADS_OPTION_QUOTA	= ( ADS_OPTION_MUTUAL_AUTH_STATUS + 1 ) ,
	ADS_OPTION_PASSWORD_PORTNUMBER	= ( ADS_OPTION_QUOTA + 1 ) ,
	ADS_OPTION_PASSWORD_METHOD	= ( ADS_OPTION_PASSWORD_PORTNUMBER + 1 ) ,
	ADS_OPTION_ACCUMULATIVE_MODIFICATION	= ( ADS_OPTION_PASSWORD_METHOD + 1 ) ,
	ADS_OPTION_SKIP_SID_LOOKUP	= ( ADS_OPTION_ACCUMULATIVE_MODIFICATION + 1 ) 
    } 	ADS_OPTION_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0058_0002
    {	ADS_SECURITY_INFO_OWNER	= 0x1,
	ADS_SECURITY_INFO_GROUP	= 0x2,
	ADS_SECURITY_INFO_DACL	= 0x4,
	ADS_SECURITY_INFO_SACL	= 0x8
    } 	ADS_SECURITY_INFO_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0059_0001
    {	ADS_SETTYPE_FULL	= 1,
	ADS_SETTYPE_PROVIDER	= 2,
	ADS_SETTYPE_SERVER	= 3,
	ADS_SETTYPE_DN	= 4
    } 	ADS_SETTYPE_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0059_0002
    {	ADS_FORMAT_WINDOWS	= 1,
	ADS_FORMAT_WINDOWS_NO_SERVER	= 2,
	ADS_FORMAT_WINDOWS_DN	= 3,
	ADS_FORMAT_WINDOWS_PARENT	= 4,
	ADS_FORMAT_X500	= 5,
	ADS_FORMAT_X500_NO_SERVER	= 6,
	ADS_FORMAT_X500_DN	= 7,
	ADS_FORMAT_X500_PARENT	= 8,
	ADS_FORMAT_SERVER	= 9,
	ADS_FORMAT_PROVIDER	= 10,
	ADS_FORMAT_LEAF	= 11
    } 	ADS_FORMAT_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0059_0003
    {	ADS_DISPLAY_FULL	= 1,
	ADS_DISPLAY_VALUE_ONLY	= 2
    } 	ADS_DISPLAY_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0059_0004
    {	ADS_ESCAPEDMODE_DEFAULT	= 1,
	ADS_ESCAPEDMODE_ON	= 2,
	ADS_ESCAPEDMODE_OFF	= 3,
	ADS_ESCAPEDMODE_OFF_EX	= 4
    } 	ADS_ESCAPE_MODE_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0064_0001
    {	ADS_PATH_FILE	= 1,
	ADS_PATH_FILESHARE	= 2,
	ADS_PATH_REGISTRY	= 3
    } 	ADS_PATHTYPE_ENUM;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_ads_0001_0064_0002
    {	ADS_SD_FORMAT_IID	= 1,
	ADS_SD_FORMAT_RAW	= 2,
	ADS_SD_FORMAT_HEXSTRING	= 3
    } 	ADS_SD_FORMAT_ENUM;


EXTERN_C const IID LIBID_ActiveDs;

#ifndef __IADs_INTERFACE_DEFINED__
#define __IADs_INTERFACE_DEFINED__

/* interface IADs */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fd8256d0-fd15-11ce-abc4-02608c9e7553")
    IADs : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Class( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_GUID( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ADsPath( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Schema( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetInfo( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetInfo( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Get( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Put( 
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetEx( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PutEx( 
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetInfoEx( 
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADs * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADs * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADs * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADs * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADs * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADs * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADs * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADs * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADs * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADs * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADs * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADs * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADs * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        END_INTERFACE
    } IADsVtbl;

    interface IADs
    {
        CONST_VTBL struct IADsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADs_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADs_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADs_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADs_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADs_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADs_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADs_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADs_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADs_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADs_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADs_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADs_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADs_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADs_INTERFACE_DEFINED__ */


#ifndef __IADsContainer_INTERFACE_DEFINED__
#define __IADsContainer_INTERFACE_DEFINED__

/* interface IADsContainer */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsContainer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("001677d0-fd16-11ce-abc4-02608c9e7553")
    IADsContainer : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Filter( 
            /* [retval][out] */ VARIANT *pVar) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Filter( 
            /* [in] */ VARIANT Var) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Hints( 
            /* [retval][out] */ VARIANT *pvFilter) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Hints( 
            /* [in] */ VARIANT vHints) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ BSTR ClassName,
            /* [in] */ BSTR RelativeName,
            /* [retval][out] */ IDispatch **ppObject) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ BSTR ClassName,
            /* [in] */ BSTR RelativeName,
            /* [retval][out] */ IDispatch **ppObject) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ BSTR bstrClassName,
            /* [in] */ BSTR bstrRelativeName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CopyHere( 
            /* [in] */ BSTR SourceName,
            /* [in] */ BSTR NewName,
            /* [out][retval] */ IDispatch **ppObject) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE MoveHere( 
            /* [in] */ BSTR SourceName,
            /* [in] */ BSTR NewName,
            /* [out][retval] */ IDispatch **ppObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsContainerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsContainer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsContainer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsContainer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsContainer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsContainer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsContainer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsContainer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IADsContainer * This,
            /* [retval][out] */ long *retval);
        
        /* [id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IADsContainer * This,
            /* [retval][out] */ IUnknown **retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Filter )( 
            IADsContainer * This,
            /* [retval][out] */ VARIANT *pVar);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Filter )( 
            IADsContainer * This,
            /* [in] */ VARIANT Var);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Hints )( 
            IADsContainer * This,
            /* [retval][out] */ VARIANT *pvFilter);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Hints )( 
            IADsContainer * This,
            /* [in] */ VARIANT vHints);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            IADsContainer * This,
            /* [in] */ BSTR ClassName,
            /* [in] */ BSTR RelativeName,
            /* [retval][out] */ IDispatch **ppObject);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Create )( 
            IADsContainer * This,
            /* [in] */ BSTR ClassName,
            /* [in] */ BSTR RelativeName,
            /* [retval][out] */ IDispatch **ppObject);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IADsContainer * This,
            /* [in] */ BSTR bstrClassName,
            /* [in] */ BSTR bstrRelativeName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CopyHere )( 
            IADsContainer * This,
            /* [in] */ BSTR SourceName,
            /* [in] */ BSTR NewName,
            /* [out][retval] */ IDispatch **ppObject);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *MoveHere )( 
            IADsContainer * This,
            /* [in] */ BSTR SourceName,
            /* [in] */ BSTR NewName,
            /* [out][retval] */ IDispatch **ppObject);
        
        END_INTERFACE
    } IADsContainerVtbl;

    interface IADsContainer
    {
        CONST_VTBL struct IADsContainerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsContainer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsContainer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsContainer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsContainer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsContainer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsContainer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsContainer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsContainer_get_Count(This,retval)	\
    ( (This)->lpVtbl -> get_Count(This,retval) ) 

#define IADsContainer_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define IADsContainer_get_Filter(This,pVar)	\
    ( (This)->lpVtbl -> get_Filter(This,pVar) ) 

#define IADsContainer_put_Filter(This,Var)	\
    ( (This)->lpVtbl -> put_Filter(This,Var) ) 

#define IADsContainer_get_Hints(This,pvFilter)	\
    ( (This)->lpVtbl -> get_Hints(This,pvFilter) ) 

#define IADsContainer_put_Hints(This,vHints)	\
    ( (This)->lpVtbl -> put_Hints(This,vHints) ) 

#define IADsContainer_GetObject(This,ClassName,RelativeName,ppObject)	\
    ( (This)->lpVtbl -> GetObject(This,ClassName,RelativeName,ppObject) ) 

#define IADsContainer_Create(This,ClassName,RelativeName,ppObject)	\
    ( (This)->lpVtbl -> Create(This,ClassName,RelativeName,ppObject) ) 

#define IADsContainer_Delete(This,bstrClassName,bstrRelativeName)	\
    ( (This)->lpVtbl -> Delete(This,bstrClassName,bstrRelativeName) ) 

#define IADsContainer_CopyHere(This,SourceName,NewName,ppObject)	\
    ( (This)->lpVtbl -> CopyHere(This,SourceName,NewName,ppObject) ) 

#define IADsContainer_MoveHere(This,SourceName,NewName,ppObject)	\
    ( (This)->lpVtbl -> MoveHere(This,SourceName,NewName,ppObject) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsContainer_INTERFACE_DEFINED__ */


#ifndef __IADsCollection_INTERFACE_DEFINED__
#define __IADsCollection_INTERFACE_DEFINED__

/* interface IADsCollection */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("72b945e0-253b-11cf-a988-00aa006bc149")
    IADsCollection : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **ppEnumerator) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vItem) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ BSTR bstrItemToBeRemoved) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IADsCollection * This,
            /* [retval][out] */ IUnknown **ppEnumerator);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IADsCollection * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vItem);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IADsCollection * This,
            /* [in] */ BSTR bstrItemToBeRemoved);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            IADsCollection * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvItem);
        
        END_INTERFACE
    } IADsCollectionVtbl;

    interface IADsCollection
    {
        CONST_VTBL struct IADsCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsCollection_get__NewEnum(This,ppEnumerator)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumerator) ) 

#define IADsCollection_Add(This,bstrName,vItem)	\
    ( (This)->lpVtbl -> Add(This,bstrName,vItem) ) 

#define IADsCollection_Remove(This,bstrItemToBeRemoved)	\
    ( (This)->lpVtbl -> Remove(This,bstrItemToBeRemoved) ) 

#define IADsCollection_GetObject(This,bstrName,pvItem)	\
    ( (This)->lpVtbl -> GetObject(This,bstrName,pvItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsCollection_INTERFACE_DEFINED__ */


#ifndef __IADsMembers_INTERFACE_DEFINED__
#define __IADsMembers_INTERFACE_DEFINED__

/* interface IADsMembers */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsMembers;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("451a0030-72ec-11cf-b03b-00aa006e0975")
    IADsMembers : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **ppEnumerator) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Filter( 
            /* [retval][out] */ VARIANT *pvFilter) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_Filter( 
            /* [in] */ VARIANT pvFilter) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsMembersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsMembers * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsMembers * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsMembers * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsMembers * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsMembers * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsMembers * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsMembers * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IADsMembers * This,
            /* [retval][out] */ long *plCount);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IADsMembers * This,
            /* [retval][out] */ IUnknown **ppEnumerator);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Filter )( 
            IADsMembers * This,
            /* [retval][out] */ VARIANT *pvFilter);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Filter )( 
            IADsMembers * This,
            /* [in] */ VARIANT pvFilter);
        
        END_INTERFACE
    } IADsMembersVtbl;

    interface IADsMembers
    {
        CONST_VTBL struct IADsMembersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsMembers_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsMembers_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsMembers_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsMembers_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsMembers_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsMembers_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsMembers_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsMembers_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define IADsMembers_get__NewEnum(This,ppEnumerator)	\
    ( (This)->lpVtbl -> get__NewEnum(This,ppEnumerator) ) 

#define IADsMembers_get_Filter(This,pvFilter)	\
    ( (This)->lpVtbl -> get_Filter(This,pvFilter) ) 

#define IADsMembers_put_Filter(This,pvFilter)	\
    ( (This)->lpVtbl -> put_Filter(This,pvFilter) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsMembers_INTERFACE_DEFINED__ */


#ifndef __IADsPropertyList_INTERFACE_DEFINED__
#define __IADsPropertyList_INTERFACE_DEFINED__

/* interface IADsPropertyList */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsPropertyList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c6f602b6-8f69-11d0-8528-00c04fd8d503")
    IADsPropertyList : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_PropertyCount( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [retval][out] */ VARIANT *pVariant) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ long cElements) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ VARIANT *pVariant) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetPropertyItem( 
            /* [in] */ BSTR bstrName,
            /* [in] */ LONG lnADsType,
            /* [retval][out] */ VARIANT *pVariant) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PutPropertyItem( 
            /* [in] */ VARIANT varData) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ResetPropertyItem( 
            /* [in] */ VARIANT varEntry) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PurgePropertyList( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsPropertyListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsPropertyList * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsPropertyList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsPropertyList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsPropertyList * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsPropertyList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsPropertyList * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsPropertyList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PropertyCount )( 
            IADsPropertyList * This,
            /* [retval][out] */ long *plCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Next )( 
            IADsPropertyList * This,
            /* [retval][out] */ VARIANT *pVariant);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IADsPropertyList * This,
            /* [in] */ long cElements);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IADsPropertyList * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            IADsPropertyList * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ VARIANT *pVariant);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyItem )( 
            IADsPropertyList * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ LONG lnADsType,
            /* [retval][out] */ VARIANT *pVariant);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutPropertyItem )( 
            IADsPropertyList * This,
            /* [in] */ VARIANT varData);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ResetPropertyItem )( 
            IADsPropertyList * This,
            /* [in] */ VARIANT varEntry);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PurgePropertyList )( 
            IADsPropertyList * This);
        
        END_INTERFACE
    } IADsPropertyListVtbl;

    interface IADsPropertyList
    {
        CONST_VTBL struct IADsPropertyListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsPropertyList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsPropertyList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsPropertyList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsPropertyList_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsPropertyList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsPropertyList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsPropertyList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsPropertyList_get_PropertyCount(This,plCount)	\
    ( (This)->lpVtbl -> get_PropertyCount(This,plCount) ) 

#define IADsPropertyList_Next(This,pVariant)	\
    ( (This)->lpVtbl -> Next(This,pVariant) ) 

#define IADsPropertyList_Skip(This,cElements)	\
    ( (This)->lpVtbl -> Skip(This,cElements) ) 

#define IADsPropertyList_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IADsPropertyList_Item(This,varIndex,pVariant)	\
    ( (This)->lpVtbl -> Item(This,varIndex,pVariant) ) 

#define IADsPropertyList_GetPropertyItem(This,bstrName,lnADsType,pVariant)	\
    ( (This)->lpVtbl -> GetPropertyItem(This,bstrName,lnADsType,pVariant) ) 

#define IADsPropertyList_PutPropertyItem(This,varData)	\
    ( (This)->lpVtbl -> PutPropertyItem(This,varData) ) 

#define IADsPropertyList_ResetPropertyItem(This,varEntry)	\
    ( (This)->lpVtbl -> ResetPropertyItem(This,varEntry) ) 

#define IADsPropertyList_PurgePropertyList(This)	\
    ( (This)->lpVtbl -> PurgePropertyList(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsPropertyList_INTERFACE_DEFINED__ */


#ifndef __IADsPropertyEntry_INTERFACE_DEFINED__
#define __IADsPropertyEntry_INTERFACE_DEFINED__

/* interface IADsPropertyEntry */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsPropertyEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("05792c8e-941f-11d0-8529-00c04fd8d503")
    IADsPropertyEntry : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ADsType( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ADsType( 
            /* [in] */ long lnADsType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ControlCode( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ControlCode( 
            /* [in] */ long lnControlCode) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Values( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Values( 
            /* [in] */ VARIANT vValues) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsPropertyEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsPropertyEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsPropertyEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsPropertyEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsPropertyEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsPropertyEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsPropertyEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsPropertyEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            IADsPropertyEntry * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsPropertyEntry * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IADsPropertyEntry * This,
            /* [in] */ BSTR bstrName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsType )( 
            IADsPropertyEntry * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ADsType )( 
            IADsPropertyEntry * This,
            /* [in] */ long lnADsType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ControlCode )( 
            IADsPropertyEntry * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ControlCode )( 
            IADsPropertyEntry * This,
            /* [in] */ long lnControlCode);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Values )( 
            IADsPropertyEntry * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Values )( 
            IADsPropertyEntry * This,
            /* [in] */ VARIANT vValues);
        
        END_INTERFACE
    } IADsPropertyEntryVtbl;

    interface IADsPropertyEntry
    {
        CONST_VTBL struct IADsPropertyEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsPropertyEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsPropertyEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsPropertyEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsPropertyEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsPropertyEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsPropertyEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsPropertyEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsPropertyEntry_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define IADsPropertyEntry_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsPropertyEntry_put_Name(This,bstrName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrName) ) 

#define IADsPropertyEntry_get_ADsType(This,retval)	\
    ( (This)->lpVtbl -> get_ADsType(This,retval) ) 

#define IADsPropertyEntry_put_ADsType(This,lnADsType)	\
    ( (This)->lpVtbl -> put_ADsType(This,lnADsType) ) 

#define IADsPropertyEntry_get_ControlCode(This,retval)	\
    ( (This)->lpVtbl -> get_ControlCode(This,retval) ) 

#define IADsPropertyEntry_put_ControlCode(This,lnControlCode)	\
    ( (This)->lpVtbl -> put_ControlCode(This,lnControlCode) ) 

#define IADsPropertyEntry_get_Values(This,retval)	\
    ( (This)->lpVtbl -> get_Values(This,retval) ) 

#define IADsPropertyEntry_put_Values(This,vValues)	\
    ( (This)->lpVtbl -> put_Values(This,vValues) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsPropertyEntry_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PropertyEntry;

#ifdef __cplusplus

class DECLSPEC_UUID("72d3edc2-a4c4-11d0-8533-00c04fd8d503")
PropertyEntry;
#endif

#ifndef __IADsPropertyValue_INTERFACE_DEFINED__
#define __IADsPropertyValue_INTERFACE_DEFINED__

/* interface IADsPropertyValue */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsPropertyValue;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("79fa9ad0-a97c-11d0-8534-00c04fd8d503")
    IADsPropertyValue : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ADsType( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ADsType( 
            /* [in] */ long lnADsType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DNString( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_DNString( 
            /* [in] */ BSTR bstrDNString) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_CaseExactString( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_CaseExactString( 
            /* [in] */ BSTR bstrCaseExactString) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_CaseIgnoreString( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_CaseIgnoreString( 
            /* [in] */ BSTR bstrCaseIgnoreString) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PrintableString( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PrintableString( 
            /* [in] */ BSTR bstrPrintableString) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_NumericString( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_NumericString( 
            /* [in] */ BSTR bstrNumericString) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Boolean( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Boolean( 
            /* [in] */ long lnBoolean) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Integer( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Integer( 
            /* [in] */ long lnInteger) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_OctetString( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_OctetString( 
            /* [in] */ VARIANT vOctetString) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SecurityDescriptor( 
            /* [retval][out] */ IDispatch **retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SecurityDescriptor( 
            /* [in] */ IDispatch *pSecurityDescriptor) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LargeInteger( 
            /* [retval][out] */ IDispatch **retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_LargeInteger( 
            /* [in] */ IDispatch *pLargeInteger) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_UTCTime( 
            /* [retval][out] */ DATE *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_UTCTime( 
            /* [in] */ DATE daUTCTime) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsPropertyValueVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsPropertyValue * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsPropertyValue * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsPropertyValue * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsPropertyValue * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsPropertyValue * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsPropertyValue * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsPropertyValue * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            IADsPropertyValue * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsType )( 
            IADsPropertyValue * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ADsType )( 
            IADsPropertyValue * This,
            /* [in] */ long lnADsType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DNString )( 
            IADsPropertyValue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DNString )( 
            IADsPropertyValue * This,
            /* [in] */ BSTR bstrDNString);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CaseExactString )( 
            IADsPropertyValue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CaseExactString )( 
            IADsPropertyValue * This,
            /* [in] */ BSTR bstrCaseExactString);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CaseIgnoreString )( 
            IADsPropertyValue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CaseIgnoreString )( 
            IADsPropertyValue * This,
            /* [in] */ BSTR bstrCaseIgnoreString);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrintableString )( 
            IADsPropertyValue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PrintableString )( 
            IADsPropertyValue * This,
            /* [in] */ BSTR bstrPrintableString);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumericString )( 
            IADsPropertyValue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumericString )( 
            IADsPropertyValue * This,
            /* [in] */ BSTR bstrNumericString);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Boolean )( 
            IADsPropertyValue * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Boolean )( 
            IADsPropertyValue * This,
            /* [in] */ long lnBoolean);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Integer )( 
            IADsPropertyValue * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Integer )( 
            IADsPropertyValue * This,
            /* [in] */ long lnInteger);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OctetString )( 
            IADsPropertyValue * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OctetString )( 
            IADsPropertyValue * This,
            /* [in] */ VARIANT vOctetString);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityDescriptor )( 
            IADsPropertyValue * This,
            /* [retval][out] */ IDispatch **retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SecurityDescriptor )( 
            IADsPropertyValue * This,
            /* [in] */ IDispatch *pSecurityDescriptor);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LargeInteger )( 
            IADsPropertyValue * This,
            /* [retval][out] */ IDispatch **retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LargeInteger )( 
            IADsPropertyValue * This,
            /* [in] */ IDispatch *pLargeInteger);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UTCTime )( 
            IADsPropertyValue * This,
            /* [retval][out] */ DATE *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UTCTime )( 
            IADsPropertyValue * This,
            /* [in] */ DATE daUTCTime);
        
        END_INTERFACE
    } IADsPropertyValueVtbl;

    interface IADsPropertyValue
    {
        CONST_VTBL struct IADsPropertyValueVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsPropertyValue_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsPropertyValue_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsPropertyValue_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsPropertyValue_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsPropertyValue_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsPropertyValue_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsPropertyValue_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsPropertyValue_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define IADsPropertyValue_get_ADsType(This,retval)	\
    ( (This)->lpVtbl -> get_ADsType(This,retval) ) 

#define IADsPropertyValue_put_ADsType(This,lnADsType)	\
    ( (This)->lpVtbl -> put_ADsType(This,lnADsType) ) 

#define IADsPropertyValue_get_DNString(This,retval)	\
    ( (This)->lpVtbl -> get_DNString(This,retval) ) 

#define IADsPropertyValue_put_DNString(This,bstrDNString)	\
    ( (This)->lpVtbl -> put_DNString(This,bstrDNString) ) 

#define IADsPropertyValue_get_CaseExactString(This,retval)	\
    ( (This)->lpVtbl -> get_CaseExactString(This,retval) ) 

#define IADsPropertyValue_put_CaseExactString(This,bstrCaseExactString)	\
    ( (This)->lpVtbl -> put_CaseExactString(This,bstrCaseExactString) ) 

#define IADsPropertyValue_get_CaseIgnoreString(This,retval)	\
    ( (This)->lpVtbl -> get_CaseIgnoreString(This,retval) ) 

#define IADsPropertyValue_put_CaseIgnoreString(This,bstrCaseIgnoreString)	\
    ( (This)->lpVtbl -> put_CaseIgnoreString(This,bstrCaseIgnoreString) ) 

#define IADsPropertyValue_get_PrintableString(This,retval)	\
    ( (This)->lpVtbl -> get_PrintableString(This,retval) ) 

#define IADsPropertyValue_put_PrintableString(This,bstrPrintableString)	\
    ( (This)->lpVtbl -> put_PrintableString(This,bstrPrintableString) ) 

#define IADsPropertyValue_get_NumericString(This,retval)	\
    ( (This)->lpVtbl -> get_NumericString(This,retval) ) 

#define IADsPropertyValue_put_NumericString(This,bstrNumericString)	\
    ( (This)->lpVtbl -> put_NumericString(This,bstrNumericString) ) 

#define IADsPropertyValue_get_Boolean(This,retval)	\
    ( (This)->lpVtbl -> get_Boolean(This,retval) ) 

#define IADsPropertyValue_put_Boolean(This,lnBoolean)	\
    ( (This)->lpVtbl -> put_Boolean(This,lnBoolean) ) 

#define IADsPropertyValue_get_Integer(This,retval)	\
    ( (This)->lpVtbl -> get_Integer(This,retval) ) 

#define IADsPropertyValue_put_Integer(This,lnInteger)	\
    ( (This)->lpVtbl -> put_Integer(This,lnInteger) ) 

#define IADsPropertyValue_get_OctetString(This,retval)	\
    ( (This)->lpVtbl -> get_OctetString(This,retval) ) 

#define IADsPropertyValue_put_OctetString(This,vOctetString)	\
    ( (This)->lpVtbl -> put_OctetString(This,vOctetString) ) 

#define IADsPropertyValue_get_SecurityDescriptor(This,retval)	\
    ( (This)->lpVtbl -> get_SecurityDescriptor(This,retval) ) 

#define IADsPropertyValue_put_SecurityDescriptor(This,pSecurityDescriptor)	\
    ( (This)->lpVtbl -> put_SecurityDescriptor(This,pSecurityDescriptor) ) 

#define IADsPropertyValue_get_LargeInteger(This,retval)	\
    ( (This)->lpVtbl -> get_LargeInteger(This,retval) ) 

#define IADsPropertyValue_put_LargeInteger(This,pLargeInteger)	\
    ( (This)->lpVtbl -> put_LargeInteger(This,pLargeInteger) ) 

#define IADsPropertyValue_get_UTCTime(This,retval)	\
    ( (This)->lpVtbl -> get_UTCTime(This,retval) ) 

#define IADsPropertyValue_put_UTCTime(This,daUTCTime)	\
    ( (This)->lpVtbl -> put_UTCTime(This,daUTCTime) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsPropertyValue_INTERFACE_DEFINED__ */


#ifndef __IADsPropertyValue2_INTERFACE_DEFINED__
#define __IADsPropertyValue2_INTERFACE_DEFINED__

/* interface IADsPropertyValue2 */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsPropertyValue2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("306e831c-5bc7-11d1-a3b8-00c04fb950dc")
    IADsPropertyValue2 : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetObjectProperty( 
            /* [out][in] */ long *lnADsType,
            /* [retval][out] */ VARIANT *pvProp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PutObjectProperty( 
            /* [in] */ long lnADsType,
            /* [in] */ VARIANT vProp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsPropertyValue2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsPropertyValue2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsPropertyValue2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsPropertyValue2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsPropertyValue2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsPropertyValue2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsPropertyValue2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsPropertyValue2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetObjectProperty )( 
            IADsPropertyValue2 * This,
            /* [out][in] */ long *lnADsType,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutObjectProperty )( 
            IADsPropertyValue2 * This,
            /* [in] */ long lnADsType,
            /* [in] */ VARIANT vProp);
        
        END_INTERFACE
    } IADsPropertyValue2Vtbl;

    interface IADsPropertyValue2
    {
        CONST_VTBL struct IADsPropertyValue2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsPropertyValue2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsPropertyValue2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsPropertyValue2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsPropertyValue2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsPropertyValue2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsPropertyValue2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsPropertyValue2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsPropertyValue2_GetObjectProperty(This,lnADsType,pvProp)	\
    ( (This)->lpVtbl -> GetObjectProperty(This,lnADsType,pvProp) ) 

#define IADsPropertyValue2_PutObjectProperty(This,lnADsType,vProp)	\
    ( (This)->lpVtbl -> PutObjectProperty(This,lnADsType,vProp) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsPropertyValue2_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PropertyValue;

#ifdef __cplusplus

class DECLSPEC_UUID("7b9e38b0-a97c-11d0-8534-00c04fd8d503")
PropertyValue;
#endif

#ifndef __IPrivateDispatch_INTERFACE_DEFINED__
#define __IPrivateDispatch_INTERFACE_DEFINED__

/* interface IPrivateDispatch */
/* [object][uuid] */ 


EXTERN_C const IID IID_IPrivateDispatch;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("86ab4bbe-65f6-11d1-8c13-00c04fd8d503")
    IPrivateDispatch : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ADSIInitializeDispatchManager( 
            /* [in] */ long dwExtensionId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ADSIGetTypeInfoCount( 
            /* [out] */ UINT *pctinfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ADSIGetTypeInfo( 
            /* [in] */ UINT itinfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **pptinfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ADSIGetIDsOfNames( 
            /* [in] */ REFIID riid,
            /* [in] */ OLECHAR **rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [out] */ DISPID *rgdispid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ADSIInvoke( 
            /* [in] */ DISPID dispidMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [in] */ DISPPARAMS *pdispparams,
            /* [out] */ VARIANT *pvarResult,
            /* [out] */ EXCEPINFO *pexcepinfo,
            /* [out] */ UINT *puArgErr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPrivateDispatchVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPrivateDispatch * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPrivateDispatch * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPrivateDispatch * This);
        
        HRESULT ( STDMETHODCALLTYPE *ADSIInitializeDispatchManager )( 
            IPrivateDispatch * This,
            /* [in] */ long dwExtensionId);
        
        HRESULT ( STDMETHODCALLTYPE *ADSIGetTypeInfoCount )( 
            IPrivateDispatch * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *ADSIGetTypeInfo )( 
            IPrivateDispatch * This,
            /* [in] */ UINT itinfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **pptinfo);
        
        HRESULT ( STDMETHODCALLTYPE *ADSIGetIDsOfNames )( 
            IPrivateDispatch * This,
            /* [in] */ REFIID riid,
            /* [in] */ OLECHAR **rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [out] */ DISPID *rgdispid);
        
        HRESULT ( STDMETHODCALLTYPE *ADSIInvoke )( 
            IPrivateDispatch * This,
            /* [in] */ DISPID dispidMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [in] */ DISPPARAMS *pdispparams,
            /* [out] */ VARIANT *pvarResult,
            /* [out] */ EXCEPINFO *pexcepinfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IPrivateDispatchVtbl;

    interface IPrivateDispatch
    {
        CONST_VTBL struct IPrivateDispatchVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPrivateDispatch_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPrivateDispatch_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPrivateDispatch_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPrivateDispatch_ADSIInitializeDispatchManager(This,dwExtensionId)	\
    ( (This)->lpVtbl -> ADSIInitializeDispatchManager(This,dwExtensionId) ) 

#define IPrivateDispatch_ADSIGetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> ADSIGetTypeInfoCount(This,pctinfo) ) 

#define IPrivateDispatch_ADSIGetTypeInfo(This,itinfo,lcid,pptinfo)	\
    ( (This)->lpVtbl -> ADSIGetTypeInfo(This,itinfo,lcid,pptinfo) ) 

#define IPrivateDispatch_ADSIGetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid)	\
    ( (This)->lpVtbl -> ADSIGetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid) ) 

#define IPrivateDispatch_ADSIInvoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr)	\
    ( (This)->lpVtbl -> ADSIInvoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPrivateDispatch_INTERFACE_DEFINED__ */


#ifndef __IPrivateUnknown_INTERFACE_DEFINED__
#define __IPrivateUnknown_INTERFACE_DEFINED__

/* interface IPrivateUnknown */
/* [object][uuid] */ 


EXTERN_C const IID IID_IPrivateUnknown;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("89126bab-6ead-11d1-8c18-00c04fd8d503")
    IPrivateUnknown : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ADSIInitializeObject( 
            /* [in] */ BSTR lpszUserName,
            /* [in] */ BSTR lpszPassword,
            /* [in] */ long lnReserved) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ADSIReleaseObject( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPrivateUnknownVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPrivateUnknown * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPrivateUnknown * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPrivateUnknown * This);
        
        HRESULT ( STDMETHODCALLTYPE *ADSIInitializeObject )( 
            IPrivateUnknown * This,
            /* [in] */ BSTR lpszUserName,
            /* [in] */ BSTR lpszPassword,
            /* [in] */ long lnReserved);
        
        HRESULT ( STDMETHODCALLTYPE *ADSIReleaseObject )( 
            IPrivateUnknown * This);
        
        END_INTERFACE
    } IPrivateUnknownVtbl;

    interface IPrivateUnknown
    {
        CONST_VTBL struct IPrivateUnknownVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPrivateUnknown_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPrivateUnknown_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPrivateUnknown_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IPrivateUnknown_ADSIInitializeObject(This,lpszUserName,lpszPassword,lnReserved)	\
    ( (This)->lpVtbl -> ADSIInitializeObject(This,lpszUserName,lpszPassword,lnReserved) ) 

#define IPrivateUnknown_ADSIReleaseObject(This)	\
    ( (This)->lpVtbl -> ADSIReleaseObject(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPrivateUnknown_INTERFACE_DEFINED__ */


#ifndef __IADsExtension_INTERFACE_DEFINED__
#define __IADsExtension_INTERFACE_DEFINED__

/* interface IADsExtension */
/* [object][uuid] */ 


EXTERN_C const IID IID_IADsExtension;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3d35553c-d2b0-11d1-b17b-0000f87593a0")
    IADsExtension : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Operate( 
            /* [in] */ DWORD dwCode,
            /* [in] */ VARIANT varData1,
            /* [in] */ VARIANT varData2,
            /* [in] */ VARIANT varData3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PrivateGetIDsOfNames( 
            /* [in] */ REFIID riid,
            /* [in] */ OLECHAR **rgszNames,
            /* [in] */ unsigned int cNames,
            /* [in] */ LCID lcid,
            /* [out] */ DISPID *rgDispid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PrivateInvoke( 
            /* [in] */ DISPID dispidMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [in] */ DISPPARAMS *pdispparams,
            /* [out] */ VARIANT *pvarResult,
            /* [out] */ EXCEPINFO *pexcepinfo,
            /* [out] */ unsigned int *puArgErr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsExtensionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsExtension * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsExtension * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsExtension * This);
        
        HRESULT ( STDMETHODCALLTYPE *Operate )( 
            IADsExtension * This,
            /* [in] */ DWORD dwCode,
            /* [in] */ VARIANT varData1,
            /* [in] */ VARIANT varData2,
            /* [in] */ VARIANT varData3);
        
        HRESULT ( STDMETHODCALLTYPE *PrivateGetIDsOfNames )( 
            IADsExtension * This,
            /* [in] */ REFIID riid,
            /* [in] */ OLECHAR **rgszNames,
            /* [in] */ unsigned int cNames,
            /* [in] */ LCID lcid,
            /* [out] */ DISPID *rgDispid);
        
        HRESULT ( STDMETHODCALLTYPE *PrivateInvoke )( 
            IADsExtension * This,
            /* [in] */ DISPID dispidMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [in] */ DISPPARAMS *pdispparams,
            /* [out] */ VARIANT *pvarResult,
            /* [out] */ EXCEPINFO *pexcepinfo,
            /* [out] */ unsigned int *puArgErr);
        
        END_INTERFACE
    } IADsExtensionVtbl;

    interface IADsExtension
    {
        CONST_VTBL struct IADsExtensionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsExtension_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsExtension_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsExtension_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsExtension_Operate(This,dwCode,varData1,varData2,varData3)	\
    ( (This)->lpVtbl -> Operate(This,dwCode,varData1,varData2,varData3) ) 

#define IADsExtension_PrivateGetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispid)	\
    ( (This)->lpVtbl -> PrivateGetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispid) ) 

#define IADsExtension_PrivateInvoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr)	\
    ( (This)->lpVtbl -> PrivateInvoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsExtension_INTERFACE_DEFINED__ */


#ifndef __IADsDeleteOps_INTERFACE_DEFINED__
#define __IADsDeleteOps_INTERFACE_DEFINED__

/* interface IADsDeleteOps */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsDeleteOps;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b2bd0902-8878-11d1-8c21-00c04fd8d503")
    IADsDeleteOps : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DeleteObject( 
            /* [in] */ long lnFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsDeleteOpsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsDeleteOps * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsDeleteOps * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsDeleteOps * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsDeleteOps * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsDeleteOps * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsDeleteOps * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsDeleteOps * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DeleteObject )( 
            IADsDeleteOps * This,
            /* [in] */ long lnFlags);
        
        END_INTERFACE
    } IADsDeleteOpsVtbl;

    interface IADsDeleteOps
    {
        CONST_VTBL struct IADsDeleteOpsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsDeleteOps_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsDeleteOps_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsDeleteOps_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsDeleteOps_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsDeleteOps_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsDeleteOps_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsDeleteOps_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsDeleteOps_DeleteObject(This,lnFlags)	\
    ( (This)->lpVtbl -> DeleteObject(This,lnFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsDeleteOps_INTERFACE_DEFINED__ */


#ifndef __IADsNamespaces_INTERFACE_DEFINED__
#define __IADsNamespaces_INTERFACE_DEFINED__

/* interface IADsNamespaces */
/* [object][oleautomation][dual][uuid] */ 


EXTERN_C const IID IID_IADsNamespaces;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("28b96ba0-b330-11cf-a9ad-00aa006bc149")
    IADsNamespaces : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultContainer( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_DefaultContainer( 
            /* [in] */ BSTR bstrDefaultContainer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsNamespacesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsNamespaces * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsNamespaces * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsNamespaces * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsNamespaces * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsNamespaces * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsNamespaces * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsNamespaces * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsNamespaces * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsNamespaces * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsNamespaces * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsNamespaces * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsNamespaces * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsNamespaces * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsNamespaces * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsNamespaces * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsNamespaces * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsNamespaces * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsNamespaces * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsNamespaces * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsNamespaces * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultContainer )( 
            IADsNamespaces * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultContainer )( 
            IADsNamespaces * This,
            /* [in] */ BSTR bstrDefaultContainer);
        
        END_INTERFACE
    } IADsNamespacesVtbl;

    interface IADsNamespaces
    {
        CONST_VTBL struct IADsNamespacesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsNamespaces_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsNamespaces_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsNamespaces_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsNamespaces_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsNamespaces_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsNamespaces_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsNamespaces_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsNamespaces_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsNamespaces_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsNamespaces_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsNamespaces_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsNamespaces_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsNamespaces_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsNamespaces_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsNamespaces_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsNamespaces_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsNamespaces_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsNamespaces_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsNamespaces_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsNamespaces_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsNamespaces_get_DefaultContainer(This,retval)	\
    ( (This)->lpVtbl -> get_DefaultContainer(This,retval) ) 

#define IADsNamespaces_put_DefaultContainer(This,bstrDefaultContainer)	\
    ( (This)->lpVtbl -> put_DefaultContainer(This,bstrDefaultContainer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsNamespaces_INTERFACE_DEFINED__ */


#ifndef __IADsClass_INTERFACE_DEFINED__
#define __IADsClass_INTERFACE_DEFINED__

/* interface IADsClass */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsClass;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c8f93dd0-4ae0-11cf-9e73-00aa004a5691")
    IADsClass : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PrimaryInterface( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_CLSID( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_CLSID( 
            /* [in] */ BSTR bstrCLSID) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_OID( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_OID( 
            /* [in] */ BSTR bstrOID) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Abstract( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Abstract( 
            /* [in] */ VARIANT_BOOL fAbstract) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Auxiliary( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Auxiliary( 
            /* [in] */ VARIANT_BOOL fAuxiliary) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MandatoryProperties( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MandatoryProperties( 
            /* [in] */ VARIANT vMandatoryProperties) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_OptionalProperties( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_OptionalProperties( 
            /* [in] */ VARIANT vOptionalProperties) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_NamingProperties( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_NamingProperties( 
            /* [in] */ VARIANT vNamingProperties) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DerivedFrom( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_DerivedFrom( 
            /* [in] */ VARIANT vDerivedFrom) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AuxDerivedFrom( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_AuxDerivedFrom( 
            /* [in] */ VARIANT vAuxDerivedFrom) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PossibleSuperiors( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PossibleSuperiors( 
            /* [in] */ VARIANT vPossibleSuperiors) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Containment( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Containment( 
            /* [in] */ VARIANT vContainment) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Container( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Container( 
            /* [in] */ VARIANT_BOOL fContainer) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HelpFileName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_HelpFileName( 
            /* [in] */ BSTR bstrHelpFileName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HelpFileContext( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_HelpFileContext( 
            /* [in] */ long lnHelpFileContext) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Qualifiers( 
            /* [retval][out] */ IADsCollection **ppQualifiers) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsClassVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsClass * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsClass * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsClass * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsClass * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsClass * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsClass * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsClass * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsClass * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsClass * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsClass * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsClass * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsClass * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsClass * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsClass * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsClass * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsClass * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsClass * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsClass * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsClass * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsClass * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrimaryInterface )( 
            IADsClass * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CLSID )( 
            IADsClass * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CLSID )( 
            IADsClass * This,
            /* [in] */ BSTR bstrCLSID);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OID )( 
            IADsClass * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OID )( 
            IADsClass * This,
            /* [in] */ BSTR bstrOID);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Abstract )( 
            IADsClass * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Abstract )( 
            IADsClass * This,
            /* [in] */ VARIANT_BOOL fAbstract);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Auxiliary )( 
            IADsClass * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Auxiliary )( 
            IADsClass * This,
            /* [in] */ VARIANT_BOOL fAuxiliary);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MandatoryProperties )( 
            IADsClass * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MandatoryProperties )( 
            IADsClass * This,
            /* [in] */ VARIANT vMandatoryProperties);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OptionalProperties )( 
            IADsClass * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OptionalProperties )( 
            IADsClass * This,
            /* [in] */ VARIANT vOptionalProperties);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NamingProperties )( 
            IADsClass * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NamingProperties )( 
            IADsClass * This,
            /* [in] */ VARIANT vNamingProperties);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedFrom )( 
            IADsClass * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DerivedFrom )( 
            IADsClass * This,
            /* [in] */ VARIANT vDerivedFrom);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AuxDerivedFrom )( 
            IADsClass * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AuxDerivedFrom )( 
            IADsClass * This,
            /* [in] */ VARIANT vAuxDerivedFrom);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PossibleSuperiors )( 
            IADsClass * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PossibleSuperiors )( 
            IADsClass * This,
            /* [in] */ VARIANT vPossibleSuperiors);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Containment )( 
            IADsClass * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Containment )( 
            IADsClass * This,
            /* [in] */ VARIANT vContainment);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Container )( 
            IADsClass * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Container )( 
            IADsClass * This,
            /* [in] */ VARIANT_BOOL fContainer);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HelpFileName )( 
            IADsClass * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HelpFileName )( 
            IADsClass * This,
            /* [in] */ BSTR bstrHelpFileName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HelpFileContext )( 
            IADsClass * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HelpFileContext )( 
            IADsClass * This,
            /* [in] */ long lnHelpFileContext);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Qualifiers )( 
            IADsClass * This,
            /* [retval][out] */ IADsCollection **ppQualifiers);
        
        END_INTERFACE
    } IADsClassVtbl;

    interface IADsClass
    {
        CONST_VTBL struct IADsClassVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsClass_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsClass_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsClass_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsClass_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsClass_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsClass_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsClass_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsClass_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsClass_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsClass_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsClass_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsClass_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsClass_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsClass_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsClass_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsClass_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsClass_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsClass_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsClass_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsClass_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsClass_get_PrimaryInterface(This,retval)	\
    ( (This)->lpVtbl -> get_PrimaryInterface(This,retval) ) 

#define IADsClass_get_CLSID(This,retval)	\
    ( (This)->lpVtbl -> get_CLSID(This,retval) ) 

#define IADsClass_put_CLSID(This,bstrCLSID)	\
    ( (This)->lpVtbl -> put_CLSID(This,bstrCLSID) ) 

#define IADsClass_get_OID(This,retval)	\
    ( (This)->lpVtbl -> get_OID(This,retval) ) 

#define IADsClass_put_OID(This,bstrOID)	\
    ( (This)->lpVtbl -> put_OID(This,bstrOID) ) 

#define IADsClass_get_Abstract(This,retval)	\
    ( (This)->lpVtbl -> get_Abstract(This,retval) ) 

#define IADsClass_put_Abstract(This,fAbstract)	\
    ( (This)->lpVtbl -> put_Abstract(This,fAbstract) ) 

#define IADsClass_get_Auxiliary(This,retval)	\
    ( (This)->lpVtbl -> get_Auxiliary(This,retval) ) 

#define IADsClass_put_Auxiliary(This,fAuxiliary)	\
    ( (This)->lpVtbl -> put_Auxiliary(This,fAuxiliary) ) 

#define IADsClass_get_MandatoryProperties(This,retval)	\
    ( (This)->lpVtbl -> get_MandatoryProperties(This,retval) ) 

#define IADsClass_put_MandatoryProperties(This,vMandatoryProperties)	\
    ( (This)->lpVtbl -> put_MandatoryProperties(This,vMandatoryProperties) ) 

#define IADsClass_get_OptionalProperties(This,retval)	\
    ( (This)->lpVtbl -> get_OptionalProperties(This,retval) ) 

#define IADsClass_put_OptionalProperties(This,vOptionalProperties)	\
    ( (This)->lpVtbl -> put_OptionalProperties(This,vOptionalProperties) ) 

#define IADsClass_get_NamingProperties(This,retval)	\
    ( (This)->lpVtbl -> get_NamingProperties(This,retval) ) 

#define IADsClass_put_NamingProperties(This,vNamingProperties)	\
    ( (This)->lpVtbl -> put_NamingProperties(This,vNamingProperties) ) 

#define IADsClass_get_DerivedFrom(This,retval)	\
    ( (This)->lpVtbl -> get_DerivedFrom(This,retval) ) 

#define IADsClass_put_DerivedFrom(This,vDerivedFrom)	\
    ( (This)->lpVtbl -> put_DerivedFrom(This,vDerivedFrom) ) 

#define IADsClass_get_AuxDerivedFrom(This,retval)	\
    ( (This)->lpVtbl -> get_AuxDerivedFrom(This,retval) ) 

#define IADsClass_put_AuxDerivedFrom(This,vAuxDerivedFrom)	\
    ( (This)->lpVtbl -> put_AuxDerivedFrom(This,vAuxDerivedFrom) ) 

#define IADsClass_get_PossibleSuperiors(This,retval)	\
    ( (This)->lpVtbl -> get_PossibleSuperiors(This,retval) ) 

#define IADsClass_put_PossibleSuperiors(This,vPossibleSuperiors)	\
    ( (This)->lpVtbl -> put_PossibleSuperiors(This,vPossibleSuperiors) ) 

#define IADsClass_get_Containment(This,retval)	\
    ( (This)->lpVtbl -> get_Containment(This,retval) ) 

#define IADsClass_put_Containment(This,vContainment)	\
    ( (This)->lpVtbl -> put_Containment(This,vContainment) ) 

#define IADsClass_get_Container(This,retval)	\
    ( (This)->lpVtbl -> get_Container(This,retval) ) 

#define IADsClass_put_Container(This,fContainer)	\
    ( (This)->lpVtbl -> put_Container(This,fContainer) ) 

#define IADsClass_get_HelpFileName(This,retval)	\
    ( (This)->lpVtbl -> get_HelpFileName(This,retval) ) 

#define IADsClass_put_HelpFileName(This,bstrHelpFileName)	\
    ( (This)->lpVtbl -> put_HelpFileName(This,bstrHelpFileName) ) 

#define IADsClass_get_HelpFileContext(This,retval)	\
    ( (This)->lpVtbl -> get_HelpFileContext(This,retval) ) 

#define IADsClass_put_HelpFileContext(This,lnHelpFileContext)	\
    ( (This)->lpVtbl -> put_HelpFileContext(This,lnHelpFileContext) ) 

#define IADsClass_Qualifiers(This,ppQualifiers)	\
    ( (This)->lpVtbl -> Qualifiers(This,ppQualifiers) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsClass_INTERFACE_DEFINED__ */


#ifndef __IADsProperty_INTERFACE_DEFINED__
#define __IADsProperty_INTERFACE_DEFINED__

/* interface IADsProperty */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsProperty;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c8f93dd3-4ae0-11cf-9e73-00aa004a5691")
    IADsProperty : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_OID( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_OID( 
            /* [in] */ BSTR bstrOID) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Syntax( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Syntax( 
            /* [in] */ BSTR bstrSyntax) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MaxRange( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MaxRange( 
            /* [in] */ long lnMaxRange) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MinRange( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MinRange( 
            /* [in] */ long lnMinRange) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MultiValued( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MultiValued( 
            /* [in] */ VARIANT_BOOL fMultiValued) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Qualifiers( 
            /* [retval][out] */ IADsCollection **ppQualifiers) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsPropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsProperty * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsProperty * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsProperty * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsProperty * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsProperty * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsProperty * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsProperty * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsProperty * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsProperty * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsProperty * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsProperty * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsProperty * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsProperty * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsProperty * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsProperty * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsProperty * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsProperty * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsProperty * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsProperty * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsProperty * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OID )( 
            IADsProperty * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OID )( 
            IADsProperty * This,
            /* [in] */ BSTR bstrOID);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Syntax )( 
            IADsProperty * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Syntax )( 
            IADsProperty * This,
            /* [in] */ BSTR bstrSyntax);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxRange )( 
            IADsProperty * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaxRange )( 
            IADsProperty * This,
            /* [in] */ long lnMaxRange);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinRange )( 
            IADsProperty * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MinRange )( 
            IADsProperty * This,
            /* [in] */ long lnMinRange);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MultiValued )( 
            IADsProperty * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MultiValued )( 
            IADsProperty * This,
            /* [in] */ VARIANT_BOOL fMultiValued);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Qualifiers )( 
            IADsProperty * This,
            /* [retval][out] */ IADsCollection **ppQualifiers);
        
        END_INTERFACE
    } IADsPropertyVtbl;

    interface IADsProperty
    {
        CONST_VTBL struct IADsPropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsProperty_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsProperty_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsProperty_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsProperty_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsProperty_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsProperty_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsProperty_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsProperty_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsProperty_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsProperty_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsProperty_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsProperty_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsProperty_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsProperty_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsProperty_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsProperty_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsProperty_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsProperty_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsProperty_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsProperty_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsProperty_get_OID(This,retval)	\
    ( (This)->lpVtbl -> get_OID(This,retval) ) 

#define IADsProperty_put_OID(This,bstrOID)	\
    ( (This)->lpVtbl -> put_OID(This,bstrOID) ) 

#define IADsProperty_get_Syntax(This,retval)	\
    ( (This)->lpVtbl -> get_Syntax(This,retval) ) 

#define IADsProperty_put_Syntax(This,bstrSyntax)	\
    ( (This)->lpVtbl -> put_Syntax(This,bstrSyntax) ) 

#define IADsProperty_get_MaxRange(This,retval)	\
    ( (This)->lpVtbl -> get_MaxRange(This,retval) ) 

#define IADsProperty_put_MaxRange(This,lnMaxRange)	\
    ( (This)->lpVtbl -> put_MaxRange(This,lnMaxRange) ) 

#define IADsProperty_get_MinRange(This,retval)	\
    ( (This)->lpVtbl -> get_MinRange(This,retval) ) 

#define IADsProperty_put_MinRange(This,lnMinRange)	\
    ( (This)->lpVtbl -> put_MinRange(This,lnMinRange) ) 

#define IADsProperty_get_MultiValued(This,retval)	\
    ( (This)->lpVtbl -> get_MultiValued(This,retval) ) 

#define IADsProperty_put_MultiValued(This,fMultiValued)	\
    ( (This)->lpVtbl -> put_MultiValued(This,fMultiValued) ) 

#define IADsProperty_Qualifiers(This,ppQualifiers)	\
    ( (This)->lpVtbl -> Qualifiers(This,ppQualifiers) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsProperty_INTERFACE_DEFINED__ */


#ifndef __IADsSyntax_INTERFACE_DEFINED__
#define __IADsSyntax_INTERFACE_DEFINED__

/* interface IADsSyntax */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsSyntax;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c8f93dd2-4ae0-11cf-9e73-00aa004a5691")
    IADsSyntax : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_OleAutoDataType( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_OleAutoDataType( 
            /* [in] */ long lnOleAutoDataType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsSyntaxVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsSyntax * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsSyntax * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsSyntax * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsSyntax * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsSyntax * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsSyntax * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsSyntax * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsSyntax * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsSyntax * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsSyntax * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsSyntax * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsSyntax * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsSyntax * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsSyntax * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsSyntax * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsSyntax * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsSyntax * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsSyntax * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsSyntax * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsSyntax * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OleAutoDataType )( 
            IADsSyntax * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OleAutoDataType )( 
            IADsSyntax * This,
            /* [in] */ long lnOleAutoDataType);
        
        END_INTERFACE
    } IADsSyntaxVtbl;

    interface IADsSyntax
    {
        CONST_VTBL struct IADsSyntaxVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsSyntax_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsSyntax_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsSyntax_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsSyntax_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsSyntax_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsSyntax_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsSyntax_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsSyntax_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsSyntax_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsSyntax_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsSyntax_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsSyntax_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsSyntax_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsSyntax_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsSyntax_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsSyntax_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsSyntax_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsSyntax_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsSyntax_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsSyntax_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsSyntax_get_OleAutoDataType(This,retval)	\
    ( (This)->lpVtbl -> get_OleAutoDataType(This,retval) ) 

#define IADsSyntax_put_OleAutoDataType(This,lnOleAutoDataType)	\
    ( (This)->lpVtbl -> put_OleAutoDataType(This,lnOleAutoDataType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsSyntax_INTERFACE_DEFINED__ */


#ifndef __IADsLocality_INTERFACE_DEFINED__
#define __IADsLocality_INTERFACE_DEFINED__

/* interface IADsLocality */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsLocality;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a05e03a2-effe-11cf-8abc-00c04fd8d503")
    IADsLocality : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LocalityName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_LocalityName( 
            /* [in] */ BSTR bstrLocalityName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PostalAddress( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PostalAddress( 
            /* [in] */ BSTR bstrPostalAddress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SeeAlso( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SeeAlso( 
            /* [in] */ VARIANT vSeeAlso) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsLocalityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsLocality * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsLocality * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsLocality * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsLocality * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsLocality * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsLocality * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsLocality * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsLocality * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsLocality * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsLocality * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsLocality * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsLocality * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsLocality * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsLocality * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsLocality * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsLocality * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsLocality * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsLocality * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsLocality * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsLocality * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IADsLocality * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IADsLocality * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalityName )( 
            IADsLocality * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LocalityName )( 
            IADsLocality * This,
            /* [in] */ BSTR bstrLocalityName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PostalAddress )( 
            IADsLocality * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PostalAddress )( 
            IADsLocality * This,
            /* [in] */ BSTR bstrPostalAddress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SeeAlso )( 
            IADsLocality * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SeeAlso )( 
            IADsLocality * This,
            /* [in] */ VARIANT vSeeAlso);
        
        END_INTERFACE
    } IADsLocalityVtbl;

    interface IADsLocality
    {
        CONST_VTBL struct IADsLocalityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsLocality_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsLocality_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsLocality_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsLocality_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsLocality_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsLocality_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsLocality_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsLocality_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsLocality_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsLocality_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsLocality_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsLocality_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsLocality_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsLocality_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsLocality_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsLocality_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsLocality_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsLocality_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsLocality_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsLocality_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsLocality_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IADsLocality_put_Description(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_Description(This,bstrDescription) ) 

#define IADsLocality_get_LocalityName(This,retval)	\
    ( (This)->lpVtbl -> get_LocalityName(This,retval) ) 

#define IADsLocality_put_LocalityName(This,bstrLocalityName)	\
    ( (This)->lpVtbl -> put_LocalityName(This,bstrLocalityName) ) 

#define IADsLocality_get_PostalAddress(This,retval)	\
    ( (This)->lpVtbl -> get_PostalAddress(This,retval) ) 

#define IADsLocality_put_PostalAddress(This,bstrPostalAddress)	\
    ( (This)->lpVtbl -> put_PostalAddress(This,bstrPostalAddress) ) 

#define IADsLocality_get_SeeAlso(This,retval)	\
    ( (This)->lpVtbl -> get_SeeAlso(This,retval) ) 

#define IADsLocality_put_SeeAlso(This,vSeeAlso)	\
    ( (This)->lpVtbl -> put_SeeAlso(This,vSeeAlso) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsLocality_INTERFACE_DEFINED__ */


#ifndef __IADsO_INTERFACE_DEFINED__
#define __IADsO_INTERFACE_DEFINED__

/* interface IADsO */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsO;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a1cd2dc6-effe-11cf-8abc-00c04fd8d503")
    IADsO : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LocalityName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_LocalityName( 
            /* [in] */ BSTR bstrLocalityName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PostalAddress( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PostalAddress( 
            /* [in] */ BSTR bstrPostalAddress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TelephoneNumber( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_TelephoneNumber( 
            /* [in] */ BSTR bstrTelephoneNumber) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_FaxNumber( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_FaxNumber( 
            /* [in] */ BSTR bstrFaxNumber) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SeeAlso( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SeeAlso( 
            /* [in] */ VARIANT vSeeAlso) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsOVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsO * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsO * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsO * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsO * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsO * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsO * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsO * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsO * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsO * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsO * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsO * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsO * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsO * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsO * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsO * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsO * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsO * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsO * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsO * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsO * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IADsO * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IADsO * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalityName )( 
            IADsO * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LocalityName )( 
            IADsO * This,
            /* [in] */ BSTR bstrLocalityName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PostalAddress )( 
            IADsO * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PostalAddress )( 
            IADsO * This,
            /* [in] */ BSTR bstrPostalAddress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TelephoneNumber )( 
            IADsO * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TelephoneNumber )( 
            IADsO * This,
            /* [in] */ BSTR bstrTelephoneNumber);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FaxNumber )( 
            IADsO * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FaxNumber )( 
            IADsO * This,
            /* [in] */ BSTR bstrFaxNumber);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SeeAlso )( 
            IADsO * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SeeAlso )( 
            IADsO * This,
            /* [in] */ VARIANT vSeeAlso);
        
        END_INTERFACE
    } IADsOVtbl;

    interface IADsO
    {
        CONST_VTBL struct IADsOVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsO_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsO_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsO_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsO_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsO_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsO_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsO_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsO_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsO_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsO_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsO_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsO_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsO_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsO_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsO_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsO_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsO_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsO_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsO_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsO_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsO_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IADsO_put_Description(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_Description(This,bstrDescription) ) 

#define IADsO_get_LocalityName(This,retval)	\
    ( (This)->lpVtbl -> get_LocalityName(This,retval) ) 

#define IADsO_put_LocalityName(This,bstrLocalityName)	\
    ( (This)->lpVtbl -> put_LocalityName(This,bstrLocalityName) ) 

#define IADsO_get_PostalAddress(This,retval)	\
    ( (This)->lpVtbl -> get_PostalAddress(This,retval) ) 

#define IADsO_put_PostalAddress(This,bstrPostalAddress)	\
    ( (This)->lpVtbl -> put_PostalAddress(This,bstrPostalAddress) ) 

#define IADsO_get_TelephoneNumber(This,retval)	\
    ( (This)->lpVtbl -> get_TelephoneNumber(This,retval) ) 

#define IADsO_put_TelephoneNumber(This,bstrTelephoneNumber)	\
    ( (This)->lpVtbl -> put_TelephoneNumber(This,bstrTelephoneNumber) ) 

#define IADsO_get_FaxNumber(This,retval)	\
    ( (This)->lpVtbl -> get_FaxNumber(This,retval) ) 

#define IADsO_put_FaxNumber(This,bstrFaxNumber)	\
    ( (This)->lpVtbl -> put_FaxNumber(This,bstrFaxNumber) ) 

#define IADsO_get_SeeAlso(This,retval)	\
    ( (This)->lpVtbl -> get_SeeAlso(This,retval) ) 

#define IADsO_put_SeeAlso(This,vSeeAlso)	\
    ( (This)->lpVtbl -> put_SeeAlso(This,vSeeAlso) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsO_INTERFACE_DEFINED__ */


#ifndef __IADsOU_INTERFACE_DEFINED__
#define __IADsOU_INTERFACE_DEFINED__

/* interface IADsOU */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsOU;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a2f733b8-effe-11cf-8abc-00c04fd8d503")
    IADsOU : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LocalityName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_LocalityName( 
            /* [in] */ BSTR bstrLocalityName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PostalAddress( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PostalAddress( 
            /* [in] */ BSTR bstrPostalAddress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TelephoneNumber( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_TelephoneNumber( 
            /* [in] */ BSTR bstrTelephoneNumber) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_FaxNumber( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_FaxNumber( 
            /* [in] */ BSTR bstrFaxNumber) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SeeAlso( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SeeAlso( 
            /* [in] */ VARIANT vSeeAlso) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_BusinessCategory( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_BusinessCategory( 
            /* [in] */ BSTR bstrBusinessCategory) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsOUVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsOU * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsOU * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsOU * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsOU * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsOU * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsOU * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsOU * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsOU * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsOU * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsOU * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsOU * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsOU * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsOU * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsOU * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsOU * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsOU * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsOU * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsOU * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsOU * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsOU * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IADsOU * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IADsOU * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalityName )( 
            IADsOU * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LocalityName )( 
            IADsOU * This,
            /* [in] */ BSTR bstrLocalityName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PostalAddress )( 
            IADsOU * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PostalAddress )( 
            IADsOU * This,
            /* [in] */ BSTR bstrPostalAddress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TelephoneNumber )( 
            IADsOU * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TelephoneNumber )( 
            IADsOU * This,
            /* [in] */ BSTR bstrTelephoneNumber);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FaxNumber )( 
            IADsOU * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FaxNumber )( 
            IADsOU * This,
            /* [in] */ BSTR bstrFaxNumber);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SeeAlso )( 
            IADsOU * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SeeAlso )( 
            IADsOU * This,
            /* [in] */ VARIANT vSeeAlso);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BusinessCategory )( 
            IADsOU * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BusinessCategory )( 
            IADsOU * This,
            /* [in] */ BSTR bstrBusinessCategory);
        
        END_INTERFACE
    } IADsOUVtbl;

    interface IADsOU
    {
        CONST_VTBL struct IADsOUVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsOU_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsOU_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsOU_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsOU_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsOU_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsOU_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsOU_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsOU_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsOU_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsOU_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsOU_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsOU_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsOU_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsOU_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsOU_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsOU_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsOU_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsOU_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsOU_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsOU_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsOU_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IADsOU_put_Description(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_Description(This,bstrDescription) ) 

#define IADsOU_get_LocalityName(This,retval)	\
    ( (This)->lpVtbl -> get_LocalityName(This,retval) ) 

#define IADsOU_put_LocalityName(This,bstrLocalityName)	\
    ( (This)->lpVtbl -> put_LocalityName(This,bstrLocalityName) ) 

#define IADsOU_get_PostalAddress(This,retval)	\
    ( (This)->lpVtbl -> get_PostalAddress(This,retval) ) 

#define IADsOU_put_PostalAddress(This,bstrPostalAddress)	\
    ( (This)->lpVtbl -> put_PostalAddress(This,bstrPostalAddress) ) 

#define IADsOU_get_TelephoneNumber(This,retval)	\
    ( (This)->lpVtbl -> get_TelephoneNumber(This,retval) ) 

#define IADsOU_put_TelephoneNumber(This,bstrTelephoneNumber)	\
    ( (This)->lpVtbl -> put_TelephoneNumber(This,bstrTelephoneNumber) ) 

#define IADsOU_get_FaxNumber(This,retval)	\
    ( (This)->lpVtbl -> get_FaxNumber(This,retval) ) 

#define IADsOU_put_FaxNumber(This,bstrFaxNumber)	\
    ( (This)->lpVtbl -> put_FaxNumber(This,bstrFaxNumber) ) 

#define IADsOU_get_SeeAlso(This,retval)	\
    ( (This)->lpVtbl -> get_SeeAlso(This,retval) ) 

#define IADsOU_put_SeeAlso(This,vSeeAlso)	\
    ( (This)->lpVtbl -> put_SeeAlso(This,vSeeAlso) ) 

#define IADsOU_get_BusinessCategory(This,retval)	\
    ( (This)->lpVtbl -> get_BusinessCategory(This,retval) ) 

#define IADsOU_put_BusinessCategory(This,bstrBusinessCategory)	\
    ( (This)->lpVtbl -> put_BusinessCategory(This,bstrBusinessCategory) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsOU_INTERFACE_DEFINED__ */


#ifndef __IADsDomain_INTERFACE_DEFINED__
#define __IADsDomain_INTERFACE_DEFINED__

/* interface IADsDomain */
/* [object][oleautomation][dual][uuid] */ 


EXTERN_C const IID IID_IADsDomain;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00e4c220-fd16-11ce-abc4-02608c9e7553")
    IADsDomain : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_IsWorkgroup( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MinPasswordLength( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MinPasswordLength( 
            /* [in] */ long lnMinPasswordLength) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MinPasswordAge( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MinPasswordAge( 
            /* [in] */ long lnMinPasswordAge) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MaxPasswordAge( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MaxPasswordAge( 
            /* [in] */ long lnMaxPasswordAge) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MaxBadPasswordsAllowed( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MaxBadPasswordsAllowed( 
            /* [in] */ long lnMaxBadPasswordsAllowed) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PasswordHistoryLength( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PasswordHistoryLength( 
            /* [in] */ long lnPasswordHistoryLength) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PasswordAttributes( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PasswordAttributes( 
            /* [in] */ long lnPasswordAttributes) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoUnlockInterval( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoUnlockInterval( 
            /* [in] */ long lnAutoUnlockInterval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LockoutObservationInterval( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_LockoutObservationInterval( 
            /* [in] */ long lnLockoutObservationInterval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsDomainVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsDomain * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsDomain * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsDomain * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsDomain * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsDomain * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsDomain * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsDomain * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsDomain * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsDomain * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsDomain * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsDomain * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsDomain * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsDomain * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsDomain * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsDomain * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsDomain * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsDomain * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsDomain * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsDomain * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsDomain * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsWorkgroup )( 
            IADsDomain * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinPasswordLength )( 
            IADsDomain * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MinPasswordLength )( 
            IADsDomain * This,
            /* [in] */ long lnMinPasswordLength);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinPasswordAge )( 
            IADsDomain * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MinPasswordAge )( 
            IADsDomain * This,
            /* [in] */ long lnMinPasswordAge);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxPasswordAge )( 
            IADsDomain * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaxPasswordAge )( 
            IADsDomain * This,
            /* [in] */ long lnMaxPasswordAge);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxBadPasswordsAllowed )( 
            IADsDomain * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaxBadPasswordsAllowed )( 
            IADsDomain * This,
            /* [in] */ long lnMaxBadPasswordsAllowed);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordHistoryLength )( 
            IADsDomain * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PasswordHistoryLength )( 
            IADsDomain * This,
            /* [in] */ long lnPasswordHistoryLength);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordAttributes )( 
            IADsDomain * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PasswordAttributes )( 
            IADsDomain * This,
            /* [in] */ long lnPasswordAttributes);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUnlockInterval )( 
            IADsDomain * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUnlockInterval )( 
            IADsDomain * This,
            /* [in] */ long lnAutoUnlockInterval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LockoutObservationInterval )( 
            IADsDomain * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LockoutObservationInterval )( 
            IADsDomain * This,
            /* [in] */ long lnLockoutObservationInterval);
        
        END_INTERFACE
    } IADsDomainVtbl;

    interface IADsDomain
    {
        CONST_VTBL struct IADsDomainVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsDomain_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsDomain_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsDomain_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsDomain_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsDomain_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsDomain_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsDomain_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsDomain_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsDomain_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsDomain_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsDomain_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsDomain_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsDomain_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsDomain_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsDomain_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsDomain_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsDomain_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsDomain_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsDomain_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsDomain_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsDomain_get_IsWorkgroup(This,retval)	\
    ( (This)->lpVtbl -> get_IsWorkgroup(This,retval) ) 

#define IADsDomain_get_MinPasswordLength(This,retval)	\
    ( (This)->lpVtbl -> get_MinPasswordLength(This,retval) ) 

#define IADsDomain_put_MinPasswordLength(This,lnMinPasswordLength)	\
    ( (This)->lpVtbl -> put_MinPasswordLength(This,lnMinPasswordLength) ) 

#define IADsDomain_get_MinPasswordAge(This,retval)	\
    ( (This)->lpVtbl -> get_MinPasswordAge(This,retval) ) 

#define IADsDomain_put_MinPasswordAge(This,lnMinPasswordAge)	\
    ( (This)->lpVtbl -> put_MinPasswordAge(This,lnMinPasswordAge) ) 

#define IADsDomain_get_MaxPasswordAge(This,retval)	\
    ( (This)->lpVtbl -> get_MaxPasswordAge(This,retval) ) 

#define IADsDomain_put_MaxPasswordAge(This,lnMaxPasswordAge)	\
    ( (This)->lpVtbl -> put_MaxPasswordAge(This,lnMaxPasswordAge) ) 

#define IADsDomain_get_MaxBadPasswordsAllowed(This,retval)	\
    ( (This)->lpVtbl -> get_MaxBadPasswordsAllowed(This,retval) ) 

#define IADsDomain_put_MaxBadPasswordsAllowed(This,lnMaxBadPasswordsAllowed)	\
    ( (This)->lpVtbl -> put_MaxBadPasswordsAllowed(This,lnMaxBadPasswordsAllowed) ) 

#define IADsDomain_get_PasswordHistoryLength(This,retval)	\
    ( (This)->lpVtbl -> get_PasswordHistoryLength(This,retval) ) 

#define IADsDomain_put_PasswordHistoryLength(This,lnPasswordHistoryLength)	\
    ( (This)->lpVtbl -> put_PasswordHistoryLength(This,lnPasswordHistoryLength) ) 

#define IADsDomain_get_PasswordAttributes(This,retval)	\
    ( (This)->lpVtbl -> get_PasswordAttributes(This,retval) ) 

#define IADsDomain_put_PasswordAttributes(This,lnPasswordAttributes)	\
    ( (This)->lpVtbl -> put_PasswordAttributes(This,lnPasswordAttributes) ) 

#define IADsDomain_get_AutoUnlockInterval(This,retval)	\
    ( (This)->lpVtbl -> get_AutoUnlockInterval(This,retval) ) 

#define IADsDomain_put_AutoUnlockInterval(This,lnAutoUnlockInterval)	\
    ( (This)->lpVtbl -> put_AutoUnlockInterval(This,lnAutoUnlockInterval) ) 

#define IADsDomain_get_LockoutObservationInterval(This,retval)	\
    ( (This)->lpVtbl -> get_LockoutObservationInterval(This,retval) ) 

#define IADsDomain_put_LockoutObservationInterval(This,lnLockoutObservationInterval)	\
    ( (This)->lpVtbl -> put_LockoutObservationInterval(This,lnLockoutObservationInterval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsDomain_INTERFACE_DEFINED__ */


#ifndef __IADsComputer_INTERFACE_DEFINED__
#define __IADsComputer_INTERFACE_DEFINED__

/* interface IADsComputer */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsComputer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("efe3cc70-1d9f-11cf-b1f3-02608c9e7553")
    IADsComputer : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ComputerID( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Site( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Location( 
            /* [in] */ BSTR bstrLocation) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PrimaryUser( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PrimaryUser( 
            /* [in] */ BSTR bstrPrimaryUser) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Owner( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Owner( 
            /* [in] */ BSTR bstrOwner) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Division( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Division( 
            /* [in] */ BSTR bstrDivision) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Department( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Department( 
            /* [in] */ BSTR bstrDepartment) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Role( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Role( 
            /* [in] */ BSTR bstrRole) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_OperatingSystem( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_OperatingSystem( 
            /* [in] */ BSTR bstrOperatingSystem) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_OperatingSystemVersion( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_OperatingSystemVersion( 
            /* [in] */ BSTR bstrOperatingSystemVersion) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Model( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Model( 
            /* [in] */ BSTR bstrModel) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Processor( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Processor( 
            /* [in] */ BSTR bstrProcessor) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ProcessorCount( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ProcessorCount( 
            /* [in] */ BSTR bstrProcessorCount) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MemorySize( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MemorySize( 
            /* [in] */ BSTR bstrMemorySize) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_StorageCapacity( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_StorageCapacity( 
            /* [in] */ BSTR bstrStorageCapacity) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_NetAddresses( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_NetAddresses( 
            /* [in] */ VARIANT vNetAddresses) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsComputerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsComputer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsComputer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsComputer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsComputer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsComputer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsComputer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsComputer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsComputer * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsComputer * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsComputer * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsComputer * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ComputerID )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrLocation);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrimaryUser )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PrimaryUser )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrPrimaryUser);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Owner )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Owner )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrOwner);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Division )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Division )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrDivision);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Department )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Department )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrDepartment);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Role )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Role )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrRole);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OperatingSystem )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OperatingSystem )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrOperatingSystem);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OperatingSystemVersion )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OperatingSystemVersion )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrOperatingSystemVersion);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Model )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Model )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrModel);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Processor )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Processor )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrProcessor);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProcessorCount )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProcessorCount )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrProcessorCount);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MemorySize )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MemorySize )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrMemorySize);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StorageCapacity )( 
            IADsComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StorageCapacity )( 
            IADsComputer * This,
            /* [in] */ BSTR bstrStorageCapacity);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NetAddresses )( 
            IADsComputer * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NetAddresses )( 
            IADsComputer * This,
            /* [in] */ VARIANT vNetAddresses);
        
        END_INTERFACE
    } IADsComputerVtbl;

    interface IADsComputer
    {
        CONST_VTBL struct IADsComputerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsComputer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsComputer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsComputer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsComputer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsComputer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsComputer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsComputer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsComputer_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsComputer_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsComputer_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsComputer_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsComputer_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsComputer_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsComputer_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsComputer_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsComputer_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsComputer_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsComputer_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsComputer_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsComputer_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsComputer_get_ComputerID(This,retval)	\
    ( (This)->lpVtbl -> get_ComputerID(This,retval) ) 

#define IADsComputer_get_Site(This,retval)	\
    ( (This)->lpVtbl -> get_Site(This,retval) ) 

#define IADsComputer_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IADsComputer_put_Description(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_Description(This,bstrDescription) ) 

#define IADsComputer_get_Location(This,retval)	\
    ( (This)->lpVtbl -> get_Location(This,retval) ) 

#define IADsComputer_put_Location(This,bstrLocation)	\
    ( (This)->lpVtbl -> put_Location(This,bstrLocation) ) 

#define IADsComputer_get_PrimaryUser(This,retval)	\
    ( (This)->lpVtbl -> get_PrimaryUser(This,retval) ) 

#define IADsComputer_put_PrimaryUser(This,bstrPrimaryUser)	\
    ( (This)->lpVtbl -> put_PrimaryUser(This,bstrPrimaryUser) ) 

#define IADsComputer_get_Owner(This,retval)	\
    ( (This)->lpVtbl -> get_Owner(This,retval) ) 

#define IADsComputer_put_Owner(This,bstrOwner)	\
    ( (This)->lpVtbl -> put_Owner(This,bstrOwner) ) 

#define IADsComputer_get_Division(This,retval)	\
    ( (This)->lpVtbl -> get_Division(This,retval) ) 

#define IADsComputer_put_Division(This,bstrDivision)	\
    ( (This)->lpVtbl -> put_Division(This,bstrDivision) ) 

#define IADsComputer_get_Department(This,retval)	\
    ( (This)->lpVtbl -> get_Department(This,retval) ) 

#define IADsComputer_put_Department(This,bstrDepartment)	\
    ( (This)->lpVtbl -> put_Department(This,bstrDepartment) ) 

#define IADsComputer_get_Role(This,retval)	\
    ( (This)->lpVtbl -> get_Role(This,retval) ) 

#define IADsComputer_put_Role(This,bstrRole)	\
    ( (This)->lpVtbl -> put_Role(This,bstrRole) ) 

#define IADsComputer_get_OperatingSystem(This,retval)	\
    ( (This)->lpVtbl -> get_OperatingSystem(This,retval) ) 

#define IADsComputer_put_OperatingSystem(This,bstrOperatingSystem)	\
    ( (This)->lpVtbl -> put_OperatingSystem(This,bstrOperatingSystem) ) 

#define IADsComputer_get_OperatingSystemVersion(This,retval)	\
    ( (This)->lpVtbl -> get_OperatingSystemVersion(This,retval) ) 

#define IADsComputer_put_OperatingSystemVersion(This,bstrOperatingSystemVersion)	\
    ( (This)->lpVtbl -> put_OperatingSystemVersion(This,bstrOperatingSystemVersion) ) 

#define IADsComputer_get_Model(This,retval)	\
    ( (This)->lpVtbl -> get_Model(This,retval) ) 

#define IADsComputer_put_Model(This,bstrModel)	\
    ( (This)->lpVtbl -> put_Model(This,bstrModel) ) 

#define IADsComputer_get_Processor(This,retval)	\
    ( (This)->lpVtbl -> get_Processor(This,retval) ) 

#define IADsComputer_put_Processor(This,bstrProcessor)	\
    ( (This)->lpVtbl -> put_Processor(This,bstrProcessor) ) 

#define IADsComputer_get_ProcessorCount(This,retval)	\
    ( (This)->lpVtbl -> get_ProcessorCount(This,retval) ) 

#define IADsComputer_put_ProcessorCount(This,bstrProcessorCount)	\
    ( (This)->lpVtbl -> put_ProcessorCount(This,bstrProcessorCount) ) 

#define IADsComputer_get_MemorySize(This,retval)	\
    ( (This)->lpVtbl -> get_MemorySize(This,retval) ) 

#define IADsComputer_put_MemorySize(This,bstrMemorySize)	\
    ( (This)->lpVtbl -> put_MemorySize(This,bstrMemorySize) ) 

#define IADsComputer_get_StorageCapacity(This,retval)	\
    ( (This)->lpVtbl -> get_StorageCapacity(This,retval) ) 

#define IADsComputer_put_StorageCapacity(This,bstrStorageCapacity)	\
    ( (This)->lpVtbl -> put_StorageCapacity(This,bstrStorageCapacity) ) 

#define IADsComputer_get_NetAddresses(This,retval)	\
    ( (This)->lpVtbl -> get_NetAddresses(This,retval) ) 

#define IADsComputer_put_NetAddresses(This,vNetAddresses)	\
    ( (This)->lpVtbl -> put_NetAddresses(This,vNetAddresses) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsComputer_INTERFACE_DEFINED__ */


#ifndef __IADsComputerOperations_INTERFACE_DEFINED__
#define __IADsComputerOperations_INTERFACE_DEFINED__

/* interface IADsComputerOperations */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsComputerOperations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ef497680-1d9f-11cf-b1f3-02608c9e7553")
    IADsComputerOperations : public IADs
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Status( 
            /* [retval][out] */ IDispatch **ppObject) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Shutdown( 
            /* [in] */ VARIANT_BOOL bReboot) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsComputerOperationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsComputerOperations * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsComputerOperations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsComputerOperations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsComputerOperations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsComputerOperations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsComputerOperations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsComputerOperations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsComputerOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsComputerOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsComputerOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsComputerOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsComputerOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsComputerOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsComputerOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsComputerOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsComputerOperations * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsComputerOperations * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsComputerOperations * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsComputerOperations * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsComputerOperations * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Status )( 
            IADsComputerOperations * This,
            /* [retval][out] */ IDispatch **ppObject);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            IADsComputerOperations * This,
            /* [in] */ VARIANT_BOOL bReboot);
        
        END_INTERFACE
    } IADsComputerOperationsVtbl;

    interface IADsComputerOperations
    {
        CONST_VTBL struct IADsComputerOperationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsComputerOperations_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsComputerOperations_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsComputerOperations_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsComputerOperations_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsComputerOperations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsComputerOperations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsComputerOperations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsComputerOperations_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsComputerOperations_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsComputerOperations_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsComputerOperations_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsComputerOperations_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsComputerOperations_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsComputerOperations_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsComputerOperations_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsComputerOperations_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsComputerOperations_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsComputerOperations_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsComputerOperations_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsComputerOperations_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsComputerOperations_Status(This,ppObject)	\
    ( (This)->lpVtbl -> Status(This,ppObject) ) 

#define IADsComputerOperations_Shutdown(This,bReboot)	\
    ( (This)->lpVtbl -> Shutdown(This,bReboot) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsComputerOperations_INTERFACE_DEFINED__ */


#ifndef __IADsGroup_INTERFACE_DEFINED__
#define __IADsGroup_INTERFACE_DEFINED__

/* interface IADsGroup */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsGroup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("27636b00-410f-11cf-b1ff-02608c9e7553")
    IADsGroup : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Members( 
            /* [retval][out] */ IADsMembers **ppMembers) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE IsMember( 
            /* [in] */ BSTR bstrMember,
            /* [retval][out] */ VARIANT_BOOL *bMember) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR bstrNewItem) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ BSTR bstrItemToBeRemoved) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsGroupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsGroup * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsGroup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsGroup * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsGroup * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsGroup * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsGroup * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsGroup * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsGroup * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsGroup * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsGroup * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsGroup * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsGroup * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsGroup * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsGroup * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsGroup * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsGroup * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsGroup * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsGroup * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsGroup * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsGroup * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IADsGroup * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IADsGroup * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Members )( 
            IADsGroup * This,
            /* [retval][out] */ IADsMembers **ppMembers);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsMember )( 
            IADsGroup * This,
            /* [in] */ BSTR bstrMember,
            /* [retval][out] */ VARIANT_BOOL *bMember);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IADsGroup * This,
            /* [in] */ BSTR bstrNewItem);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IADsGroup * This,
            /* [in] */ BSTR bstrItemToBeRemoved);
        
        END_INTERFACE
    } IADsGroupVtbl;

    interface IADsGroup
    {
        CONST_VTBL struct IADsGroupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsGroup_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsGroup_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsGroup_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsGroup_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsGroup_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsGroup_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsGroup_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsGroup_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsGroup_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsGroup_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsGroup_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsGroup_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsGroup_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsGroup_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsGroup_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsGroup_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsGroup_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsGroup_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsGroup_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsGroup_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsGroup_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IADsGroup_put_Description(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_Description(This,bstrDescription) ) 

#define IADsGroup_Members(This,ppMembers)	\
    ( (This)->lpVtbl -> Members(This,ppMembers) ) 

#define IADsGroup_IsMember(This,bstrMember,bMember)	\
    ( (This)->lpVtbl -> IsMember(This,bstrMember,bMember) ) 

#define IADsGroup_Add(This,bstrNewItem)	\
    ( (This)->lpVtbl -> Add(This,bstrNewItem) ) 

#define IADsGroup_Remove(This,bstrItemToBeRemoved)	\
    ( (This)->lpVtbl -> Remove(This,bstrItemToBeRemoved) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsGroup_INTERFACE_DEFINED__ */


#ifndef __IADsUser_INTERFACE_DEFINED__
#define __IADsUser_INTERFACE_DEFINED__

/* interface IADsUser */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsUser;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3e37e320-17e2-11cf-abc4-02608c9e7553")
    IADsUser : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_BadLoginAddress( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_BadLoginCount( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LastLogin( 
            /* [retval][out] */ DATE *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LastLogoff( 
            /* [retval][out] */ DATE *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LastFailedLogin( 
            /* [retval][out] */ DATE *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PasswordLastChanged( 
            /* [retval][out] */ DATE *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Division( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Division( 
            /* [in] */ BSTR bstrDivision) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Department( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Department( 
            /* [in] */ BSTR bstrDepartment) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_EmployeeID( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_EmployeeID( 
            /* [in] */ BSTR bstrEmployeeID) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_FullName( 
            /* [in] */ BSTR bstrFullName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_FirstName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_FirstName( 
            /* [in] */ BSTR bstrFirstName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LastName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_LastName( 
            /* [in] */ BSTR bstrLastName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_OtherName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_OtherName( 
            /* [in] */ BSTR bstrOtherName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_NamePrefix( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_NamePrefix( 
            /* [in] */ BSTR bstrNamePrefix) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_NameSuffix( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_NameSuffix( 
            /* [in] */ BSTR bstrNameSuffix) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Title( 
            /* [in] */ BSTR bstrTitle) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Manager( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Manager( 
            /* [in] */ BSTR bstrManager) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TelephoneHome( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_TelephoneHome( 
            /* [in] */ VARIANT vTelephoneHome) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TelephoneMobile( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_TelephoneMobile( 
            /* [in] */ VARIANT vTelephoneMobile) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TelephoneNumber( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_TelephoneNumber( 
            /* [in] */ VARIANT vTelephoneNumber) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TelephonePager( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_TelephonePager( 
            /* [in] */ VARIANT vTelephonePager) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_FaxNumber( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_FaxNumber( 
            /* [in] */ VARIANT vFaxNumber) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_OfficeLocations( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_OfficeLocations( 
            /* [in] */ VARIANT vOfficeLocations) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PostalAddresses( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PostalAddresses( 
            /* [in] */ VARIANT vPostalAddresses) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PostalCodes( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PostalCodes( 
            /* [in] */ VARIANT vPostalCodes) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SeeAlso( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SeeAlso( 
            /* [in] */ VARIANT vSeeAlso) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AccountDisabled( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_AccountDisabled( 
            /* [in] */ VARIANT_BOOL fAccountDisabled) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AccountExpirationDate( 
            /* [retval][out] */ DATE *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_AccountExpirationDate( 
            /* [in] */ DATE daAccountExpirationDate) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_GraceLoginsAllowed( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_GraceLoginsAllowed( 
            /* [in] */ long lnGraceLoginsAllowed) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_GraceLoginsRemaining( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_GraceLoginsRemaining( 
            /* [in] */ long lnGraceLoginsRemaining) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_IsAccountLocked( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_IsAccountLocked( 
            /* [in] */ VARIANT_BOOL fIsAccountLocked) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LoginHours( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_LoginHours( 
            /* [in] */ VARIANT vLoginHours) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LoginWorkstations( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_LoginWorkstations( 
            /* [in] */ VARIANT vLoginWorkstations) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MaxLogins( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MaxLogins( 
            /* [in] */ long lnMaxLogins) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MaxStorage( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MaxStorage( 
            /* [in] */ long lnMaxStorage) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PasswordExpirationDate( 
            /* [retval][out] */ DATE *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PasswordExpirationDate( 
            /* [in] */ DATE daPasswordExpirationDate) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PasswordMinimumLength( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PasswordMinimumLength( 
            /* [in] */ long lnPasswordMinimumLength) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PasswordRequired( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PasswordRequired( 
            /* [in] */ VARIANT_BOOL fPasswordRequired) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_RequireUniquePassword( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_RequireUniquePassword( 
            /* [in] */ VARIANT_BOOL fRequireUniquePassword) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_EmailAddress( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_EmailAddress( 
            /* [in] */ BSTR bstrEmailAddress) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HomeDirectory( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_HomeDirectory( 
            /* [in] */ BSTR bstrHomeDirectory) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Languages( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Languages( 
            /* [in] */ VARIANT vLanguages) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Profile( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Profile( 
            /* [in] */ BSTR bstrProfile) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LoginScript( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_LoginScript( 
            /* [in] */ BSTR bstrLoginScript) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Picture( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Picture( 
            /* [in] */ VARIANT vPicture) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HomePage( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_HomePage( 
            /* [in] */ BSTR bstrHomePage) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Groups( 
            /* [retval][out] */ IADsMembers **ppGroups) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetPassword( 
            /* [in] */ BSTR NewPassword) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ChangePassword( 
            /* [in] */ BSTR bstrOldPassword,
            /* [in] */ BSTR bstrNewPassword) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsUserVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsUser * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsUser * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsUser * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsUser * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsUser * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsUser * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsUser * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsUser * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsUser * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsUser * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsUser * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsUser * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsUser * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsUser * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BadLoginAddress )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BadLoginCount )( 
            IADsUser * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastLogin )( 
            IADsUser * This,
            /* [retval][out] */ DATE *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastLogoff )( 
            IADsUser * This,
            /* [retval][out] */ DATE *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastFailedLogin )( 
            IADsUser * This,
            /* [retval][out] */ DATE *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordLastChanged )( 
            IADsUser * This,
            /* [retval][out] */ DATE *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IADsUser * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Division )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Division )( 
            IADsUser * This,
            /* [in] */ BSTR bstrDivision);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Department )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Department )( 
            IADsUser * This,
            /* [in] */ BSTR bstrDepartment);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmployeeID )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EmployeeID )( 
            IADsUser * This,
            /* [in] */ BSTR bstrEmployeeID);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FullName )( 
            IADsUser * This,
            /* [in] */ BSTR bstrFullName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstName )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FirstName )( 
            IADsUser * This,
            /* [in] */ BSTR bstrFirstName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastName )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LastName )( 
            IADsUser * This,
            /* [in] */ BSTR bstrLastName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OtherName )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OtherName )( 
            IADsUser * This,
            /* [in] */ BSTR bstrOtherName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NamePrefix )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NamePrefix )( 
            IADsUser * This,
            /* [in] */ BSTR bstrNamePrefix);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NameSuffix )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NameSuffix )( 
            IADsUser * This,
            /* [in] */ BSTR bstrNameSuffix);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            IADsUser * This,
            /* [in] */ BSTR bstrTitle);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Manager )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Manager )( 
            IADsUser * This,
            /* [in] */ BSTR bstrManager);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TelephoneHome )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TelephoneHome )( 
            IADsUser * This,
            /* [in] */ VARIANT vTelephoneHome);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TelephoneMobile )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TelephoneMobile )( 
            IADsUser * This,
            /* [in] */ VARIANT vTelephoneMobile);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TelephoneNumber )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TelephoneNumber )( 
            IADsUser * This,
            /* [in] */ VARIANT vTelephoneNumber);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TelephonePager )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TelephonePager )( 
            IADsUser * This,
            /* [in] */ VARIANT vTelephonePager);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FaxNumber )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FaxNumber )( 
            IADsUser * This,
            /* [in] */ VARIANT vFaxNumber);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OfficeLocations )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OfficeLocations )( 
            IADsUser * This,
            /* [in] */ VARIANT vOfficeLocations);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PostalAddresses )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PostalAddresses )( 
            IADsUser * This,
            /* [in] */ VARIANT vPostalAddresses);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PostalCodes )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PostalCodes )( 
            IADsUser * This,
            /* [in] */ VARIANT vPostalCodes);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SeeAlso )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SeeAlso )( 
            IADsUser * This,
            /* [in] */ VARIANT vSeeAlso);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AccountDisabled )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AccountDisabled )( 
            IADsUser * This,
            /* [in] */ VARIANT_BOOL fAccountDisabled);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AccountExpirationDate )( 
            IADsUser * This,
            /* [retval][out] */ DATE *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AccountExpirationDate )( 
            IADsUser * This,
            /* [in] */ DATE daAccountExpirationDate);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GraceLoginsAllowed )( 
            IADsUser * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GraceLoginsAllowed )( 
            IADsUser * This,
            /* [in] */ long lnGraceLoginsAllowed);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GraceLoginsRemaining )( 
            IADsUser * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GraceLoginsRemaining )( 
            IADsUser * This,
            /* [in] */ long lnGraceLoginsRemaining);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsAccountLocked )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IsAccountLocked )( 
            IADsUser * This,
            /* [in] */ VARIANT_BOOL fIsAccountLocked);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LoginHours )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LoginHours )( 
            IADsUser * This,
            /* [in] */ VARIANT vLoginHours);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LoginWorkstations )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LoginWorkstations )( 
            IADsUser * This,
            /* [in] */ VARIANT vLoginWorkstations);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxLogins )( 
            IADsUser * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaxLogins )( 
            IADsUser * This,
            /* [in] */ long lnMaxLogins);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxStorage )( 
            IADsUser * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaxStorage )( 
            IADsUser * This,
            /* [in] */ long lnMaxStorage);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordExpirationDate )( 
            IADsUser * This,
            /* [retval][out] */ DATE *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PasswordExpirationDate )( 
            IADsUser * This,
            /* [in] */ DATE daPasswordExpirationDate);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordMinimumLength )( 
            IADsUser * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PasswordMinimumLength )( 
            IADsUser * This,
            /* [in] */ long lnPasswordMinimumLength);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordRequired )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PasswordRequired )( 
            IADsUser * This,
            /* [in] */ VARIANT_BOOL fPasswordRequired);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RequireUniquePassword )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RequireUniquePassword )( 
            IADsUser * This,
            /* [in] */ VARIANT_BOOL fRequireUniquePassword);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmailAddress )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EmailAddress )( 
            IADsUser * This,
            /* [in] */ BSTR bstrEmailAddress);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomeDirectory )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomeDirectory )( 
            IADsUser * This,
            /* [in] */ BSTR bstrHomeDirectory);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Languages )( 
            IADsUser * This,
            /* [in] */ VARIANT vLanguages);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Profile )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Profile )( 
            IADsUser * This,
            /* [in] */ BSTR bstrProfile);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LoginScript )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LoginScript )( 
            IADsUser * This,
            /* [in] */ BSTR bstrLoginScript);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Picture )( 
            IADsUser * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Picture )( 
            IADsUser * This,
            /* [in] */ VARIANT vPicture);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HomePage )( 
            IADsUser * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HomePage )( 
            IADsUser * This,
            /* [in] */ BSTR bstrHomePage);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Groups )( 
            IADsUser * This,
            /* [retval][out] */ IADsMembers **ppGroups);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetPassword )( 
            IADsUser * This,
            /* [in] */ BSTR NewPassword);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ChangePassword )( 
            IADsUser * This,
            /* [in] */ BSTR bstrOldPassword,
            /* [in] */ BSTR bstrNewPassword);
        
        END_INTERFACE
    } IADsUserVtbl;

    interface IADsUser
    {
        CONST_VTBL struct IADsUserVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsUser_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsUser_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsUser_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsUser_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsUser_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsUser_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsUser_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsUser_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsUser_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsUser_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsUser_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsUser_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsUser_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsUser_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsUser_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsUser_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsUser_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsUser_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsUser_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsUser_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsUser_get_BadLoginAddress(This,retval)	\
    ( (This)->lpVtbl -> get_BadLoginAddress(This,retval) ) 

#define IADsUser_get_BadLoginCount(This,retval)	\
    ( (This)->lpVtbl -> get_BadLoginCount(This,retval) ) 

#define IADsUser_get_LastLogin(This,retval)	\
    ( (This)->lpVtbl -> get_LastLogin(This,retval) ) 

#define IADsUser_get_LastLogoff(This,retval)	\
    ( (This)->lpVtbl -> get_LastLogoff(This,retval) ) 

#define IADsUser_get_LastFailedLogin(This,retval)	\
    ( (This)->lpVtbl -> get_LastFailedLogin(This,retval) ) 

#define IADsUser_get_PasswordLastChanged(This,retval)	\
    ( (This)->lpVtbl -> get_PasswordLastChanged(This,retval) ) 

#define IADsUser_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IADsUser_put_Description(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_Description(This,bstrDescription) ) 

#define IADsUser_get_Division(This,retval)	\
    ( (This)->lpVtbl -> get_Division(This,retval) ) 

#define IADsUser_put_Division(This,bstrDivision)	\
    ( (This)->lpVtbl -> put_Division(This,bstrDivision) ) 

#define IADsUser_get_Department(This,retval)	\
    ( (This)->lpVtbl -> get_Department(This,retval) ) 

#define IADsUser_put_Department(This,bstrDepartment)	\
    ( (This)->lpVtbl -> put_Department(This,bstrDepartment) ) 

#define IADsUser_get_EmployeeID(This,retval)	\
    ( (This)->lpVtbl -> get_EmployeeID(This,retval) ) 

#define IADsUser_put_EmployeeID(This,bstrEmployeeID)	\
    ( (This)->lpVtbl -> put_EmployeeID(This,bstrEmployeeID) ) 

#define IADsUser_get_FullName(This,retval)	\
    ( (This)->lpVtbl -> get_FullName(This,retval) ) 

#define IADsUser_put_FullName(This,bstrFullName)	\
    ( (This)->lpVtbl -> put_FullName(This,bstrFullName) ) 

#define IADsUser_get_FirstName(This,retval)	\
    ( (This)->lpVtbl -> get_FirstName(This,retval) ) 

#define IADsUser_put_FirstName(This,bstrFirstName)	\
    ( (This)->lpVtbl -> put_FirstName(This,bstrFirstName) ) 

#define IADsUser_get_LastName(This,retval)	\
    ( (This)->lpVtbl -> get_LastName(This,retval) ) 

#define IADsUser_put_LastName(This,bstrLastName)	\
    ( (This)->lpVtbl -> put_LastName(This,bstrLastName) ) 

#define IADsUser_get_OtherName(This,retval)	\
    ( (This)->lpVtbl -> get_OtherName(This,retval) ) 

#define IADsUser_put_OtherName(This,bstrOtherName)	\
    ( (This)->lpVtbl -> put_OtherName(This,bstrOtherName) ) 

#define IADsUser_get_NamePrefix(This,retval)	\
    ( (This)->lpVtbl -> get_NamePrefix(This,retval) ) 

#define IADsUser_put_NamePrefix(This,bstrNamePrefix)	\
    ( (This)->lpVtbl -> put_NamePrefix(This,bstrNamePrefix) ) 

#define IADsUser_get_NameSuffix(This,retval)	\
    ( (This)->lpVtbl -> get_NameSuffix(This,retval) ) 

#define IADsUser_put_NameSuffix(This,bstrNameSuffix)	\
    ( (This)->lpVtbl -> put_NameSuffix(This,bstrNameSuffix) ) 

#define IADsUser_get_Title(This,retval)	\
    ( (This)->lpVtbl -> get_Title(This,retval) ) 

#define IADsUser_put_Title(This,bstrTitle)	\
    ( (This)->lpVtbl -> put_Title(This,bstrTitle) ) 

#define IADsUser_get_Manager(This,retval)	\
    ( (This)->lpVtbl -> get_Manager(This,retval) ) 

#define IADsUser_put_Manager(This,bstrManager)	\
    ( (This)->lpVtbl -> put_Manager(This,bstrManager) ) 

#define IADsUser_get_TelephoneHome(This,retval)	\
    ( (This)->lpVtbl -> get_TelephoneHome(This,retval) ) 

#define IADsUser_put_TelephoneHome(This,vTelephoneHome)	\
    ( (This)->lpVtbl -> put_TelephoneHome(This,vTelephoneHome) ) 

#define IADsUser_get_TelephoneMobile(This,retval)	\
    ( (This)->lpVtbl -> get_TelephoneMobile(This,retval) ) 

#define IADsUser_put_TelephoneMobile(This,vTelephoneMobile)	\
    ( (This)->lpVtbl -> put_TelephoneMobile(This,vTelephoneMobile) ) 

#define IADsUser_get_TelephoneNumber(This,retval)	\
    ( (This)->lpVtbl -> get_TelephoneNumber(This,retval) ) 

#define IADsUser_put_TelephoneNumber(This,vTelephoneNumber)	\
    ( (This)->lpVtbl -> put_TelephoneNumber(This,vTelephoneNumber) ) 

#define IADsUser_get_TelephonePager(This,retval)	\
    ( (This)->lpVtbl -> get_TelephonePager(This,retval) ) 

#define IADsUser_put_TelephonePager(This,vTelephonePager)	\
    ( (This)->lpVtbl -> put_TelephonePager(This,vTelephonePager) ) 

#define IADsUser_get_FaxNumber(This,retval)	\
    ( (This)->lpVtbl -> get_FaxNumber(This,retval) ) 

#define IADsUser_put_FaxNumber(This,vFaxNumber)	\
    ( (This)->lpVtbl -> put_FaxNumber(This,vFaxNumber) ) 

#define IADsUser_get_OfficeLocations(This,retval)	\
    ( (This)->lpVtbl -> get_OfficeLocations(This,retval) ) 

#define IADsUser_put_OfficeLocations(This,vOfficeLocations)	\
    ( (This)->lpVtbl -> put_OfficeLocations(This,vOfficeLocations) ) 

#define IADsUser_get_PostalAddresses(This,retval)	\
    ( (This)->lpVtbl -> get_PostalAddresses(This,retval) ) 

#define IADsUser_put_PostalAddresses(This,vPostalAddresses)	\
    ( (This)->lpVtbl -> put_PostalAddresses(This,vPostalAddresses) ) 

#define IADsUser_get_PostalCodes(This,retval)	\
    ( (This)->lpVtbl -> get_PostalCodes(This,retval) ) 

#define IADsUser_put_PostalCodes(This,vPostalCodes)	\
    ( (This)->lpVtbl -> put_PostalCodes(This,vPostalCodes) ) 

#define IADsUser_get_SeeAlso(This,retval)	\
    ( (This)->lpVtbl -> get_SeeAlso(This,retval) ) 

#define IADsUser_put_SeeAlso(This,vSeeAlso)	\
    ( (This)->lpVtbl -> put_SeeAlso(This,vSeeAlso) ) 

#define IADsUser_get_AccountDisabled(This,retval)	\
    ( (This)->lpVtbl -> get_AccountDisabled(This,retval) ) 

#define IADsUser_put_AccountDisabled(This,fAccountDisabled)	\
    ( (This)->lpVtbl -> put_AccountDisabled(This,fAccountDisabled) ) 

#define IADsUser_get_AccountExpirationDate(This,retval)	\
    ( (This)->lpVtbl -> get_AccountExpirationDate(This,retval) ) 

#define IADsUser_put_AccountExpirationDate(This,daAccountExpirationDate)	\
    ( (This)->lpVtbl -> put_AccountExpirationDate(This,daAccountExpirationDate) ) 

#define IADsUser_get_GraceLoginsAllowed(This,retval)	\
    ( (This)->lpVtbl -> get_GraceLoginsAllowed(This,retval) ) 

#define IADsUser_put_GraceLoginsAllowed(This,lnGraceLoginsAllowed)	\
    ( (This)->lpVtbl -> put_GraceLoginsAllowed(This,lnGraceLoginsAllowed) ) 

#define IADsUser_get_GraceLoginsRemaining(This,retval)	\
    ( (This)->lpVtbl -> get_GraceLoginsRemaining(This,retval) ) 

#define IADsUser_put_GraceLoginsRemaining(This,lnGraceLoginsRemaining)	\
    ( (This)->lpVtbl -> put_GraceLoginsRemaining(This,lnGraceLoginsRemaining) ) 

#define IADsUser_get_IsAccountLocked(This,retval)	\
    ( (This)->lpVtbl -> get_IsAccountLocked(This,retval) ) 

#define IADsUser_put_IsAccountLocked(This,fIsAccountLocked)	\
    ( (This)->lpVtbl -> put_IsAccountLocked(This,fIsAccountLocked) ) 

#define IADsUser_get_LoginHours(This,retval)	\
    ( (This)->lpVtbl -> get_LoginHours(This,retval) ) 

#define IADsUser_put_LoginHours(This,vLoginHours)	\
    ( (This)->lpVtbl -> put_LoginHours(This,vLoginHours) ) 

#define IADsUser_get_LoginWorkstations(This,retval)	\
    ( (This)->lpVtbl -> get_LoginWorkstations(This,retval) ) 

#define IADsUser_put_LoginWorkstations(This,vLoginWorkstations)	\
    ( (This)->lpVtbl -> put_LoginWorkstations(This,vLoginWorkstations) ) 

#define IADsUser_get_MaxLogins(This,retval)	\
    ( (This)->lpVtbl -> get_MaxLogins(This,retval) ) 

#define IADsUser_put_MaxLogins(This,lnMaxLogins)	\
    ( (This)->lpVtbl -> put_MaxLogins(This,lnMaxLogins) ) 

#define IADsUser_get_MaxStorage(This,retval)	\
    ( (This)->lpVtbl -> get_MaxStorage(This,retval) ) 

#define IADsUser_put_MaxStorage(This,lnMaxStorage)	\
    ( (This)->lpVtbl -> put_MaxStorage(This,lnMaxStorage) ) 

#define IADsUser_get_PasswordExpirationDate(This,retval)	\
    ( (This)->lpVtbl -> get_PasswordExpirationDate(This,retval) ) 

#define IADsUser_put_PasswordExpirationDate(This,daPasswordExpirationDate)	\
    ( (This)->lpVtbl -> put_PasswordExpirationDate(This,daPasswordExpirationDate) ) 

#define IADsUser_get_PasswordMinimumLength(This,retval)	\
    ( (This)->lpVtbl -> get_PasswordMinimumLength(This,retval) ) 

#define IADsUser_put_PasswordMinimumLength(This,lnPasswordMinimumLength)	\
    ( (This)->lpVtbl -> put_PasswordMinimumLength(This,lnPasswordMinimumLength) ) 

#define IADsUser_get_PasswordRequired(This,retval)	\
    ( (This)->lpVtbl -> get_PasswordRequired(This,retval) ) 

#define IADsUser_put_PasswordRequired(This,fPasswordRequired)	\
    ( (This)->lpVtbl -> put_PasswordRequired(This,fPasswordRequired) ) 

#define IADsUser_get_RequireUniquePassword(This,retval)	\
    ( (This)->lpVtbl -> get_RequireUniquePassword(This,retval) ) 

#define IADsUser_put_RequireUniquePassword(This,fRequireUniquePassword)	\
    ( (This)->lpVtbl -> put_RequireUniquePassword(This,fRequireUniquePassword) ) 

#define IADsUser_get_EmailAddress(This,retval)	\
    ( (This)->lpVtbl -> get_EmailAddress(This,retval) ) 

#define IADsUser_put_EmailAddress(This,bstrEmailAddress)	\
    ( (This)->lpVtbl -> put_EmailAddress(This,bstrEmailAddress) ) 

#define IADsUser_get_HomeDirectory(This,retval)	\
    ( (This)->lpVtbl -> get_HomeDirectory(This,retval) ) 

#define IADsUser_put_HomeDirectory(This,bstrHomeDirectory)	\
    ( (This)->lpVtbl -> put_HomeDirectory(This,bstrHomeDirectory) ) 

#define IADsUser_get_Languages(This,retval)	\
    ( (This)->lpVtbl -> get_Languages(This,retval) ) 

#define IADsUser_put_Languages(This,vLanguages)	\
    ( (This)->lpVtbl -> put_Languages(This,vLanguages) ) 

#define IADsUser_get_Profile(This,retval)	\
    ( (This)->lpVtbl -> get_Profile(This,retval) ) 

#define IADsUser_put_Profile(This,bstrProfile)	\
    ( (This)->lpVtbl -> put_Profile(This,bstrProfile) ) 

#define IADsUser_get_LoginScript(This,retval)	\
    ( (This)->lpVtbl -> get_LoginScript(This,retval) ) 

#define IADsUser_put_LoginScript(This,bstrLoginScript)	\
    ( (This)->lpVtbl -> put_LoginScript(This,bstrLoginScript) ) 

#define IADsUser_get_Picture(This,retval)	\
    ( (This)->lpVtbl -> get_Picture(This,retval) ) 

#define IADsUser_put_Picture(This,vPicture)	\
    ( (This)->lpVtbl -> put_Picture(This,vPicture) ) 

#define IADsUser_get_HomePage(This,retval)	\
    ( (This)->lpVtbl -> get_HomePage(This,retval) ) 

#define IADsUser_put_HomePage(This,bstrHomePage)	\
    ( (This)->lpVtbl -> put_HomePage(This,bstrHomePage) ) 

#define IADsUser_Groups(This,ppGroups)	\
    ( (This)->lpVtbl -> Groups(This,ppGroups) ) 

#define IADsUser_SetPassword(This,NewPassword)	\
    ( (This)->lpVtbl -> SetPassword(This,NewPassword) ) 

#define IADsUser_ChangePassword(This,bstrOldPassword,bstrNewPassword)	\
    ( (This)->lpVtbl -> ChangePassword(This,bstrOldPassword,bstrNewPassword) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsUser_INTERFACE_DEFINED__ */


#ifndef __IADsPrintQueue_INTERFACE_DEFINED__
#define __IADsPrintQueue_INTERFACE_DEFINED__

/* interface IADsPrintQueue */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsPrintQueue;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b15160d0-1226-11cf-a985-00aa006bc149")
    IADsPrintQueue : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PrinterPath( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PrinterPath( 
            /* [in] */ BSTR bstrPrinterPath) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Model( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Model( 
            /* [in] */ BSTR bstrModel) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Datatype( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Datatype( 
            /* [in] */ BSTR bstrDatatype) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PrintProcessor( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PrintProcessor( 
            /* [in] */ BSTR bstrPrintProcessor) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Location( 
            /* [in] */ BSTR bstrLocation) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_StartTime( 
            /* [retval][out] */ DATE *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_StartTime( 
            /* [in] */ DATE daStartTime) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_UntilTime( 
            /* [retval][out] */ DATE *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_UntilTime( 
            /* [in] */ DATE daUntilTime) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultJobPriority( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_DefaultJobPriority( 
            /* [in] */ long lnDefaultJobPriority) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Priority( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Priority( 
            /* [in] */ long lnPriority) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_BannerPage( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_BannerPage( 
            /* [in] */ BSTR bstrBannerPage) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PrintDevices( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PrintDevices( 
            /* [in] */ VARIANT vPrintDevices) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_NetAddresses( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_NetAddresses( 
            /* [in] */ VARIANT vNetAddresses) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsPrintQueueVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsPrintQueue * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsPrintQueue * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsPrintQueue * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsPrintQueue * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsPrintQueue * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsPrintQueue * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsPrintQueue * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsPrintQueue * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsPrintQueue * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsPrintQueue * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsPrintQueue * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsPrintQueue * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsPrintQueue * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsPrintQueue * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrinterPath )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PrinterPath )( 
            IADsPrintQueue * This,
            /* [in] */ BSTR bstrPrinterPath);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Model )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Model )( 
            IADsPrintQueue * This,
            /* [in] */ BSTR bstrModel);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Datatype )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Datatype )( 
            IADsPrintQueue * This,
            /* [in] */ BSTR bstrDatatype);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrintProcessor )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PrintProcessor )( 
            IADsPrintQueue * This,
            /* [in] */ BSTR bstrPrintProcessor);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IADsPrintQueue * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            IADsPrintQueue * This,
            /* [in] */ BSTR bstrLocation);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartTime )( 
            IADsPrintQueue * This,
            /* [retval][out] */ DATE *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartTime )( 
            IADsPrintQueue * This,
            /* [in] */ DATE daStartTime);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UntilTime )( 
            IADsPrintQueue * This,
            /* [retval][out] */ DATE *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UntilTime )( 
            IADsPrintQueue * This,
            /* [in] */ DATE daUntilTime);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultJobPriority )( 
            IADsPrintQueue * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultJobPriority )( 
            IADsPrintQueue * This,
            /* [in] */ long lnDefaultJobPriority);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Priority )( 
            IADsPrintQueue * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Priority )( 
            IADsPrintQueue * This,
            /* [in] */ long lnPriority);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BannerPage )( 
            IADsPrintQueue * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BannerPage )( 
            IADsPrintQueue * This,
            /* [in] */ BSTR bstrBannerPage);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrintDevices )( 
            IADsPrintQueue * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PrintDevices )( 
            IADsPrintQueue * This,
            /* [in] */ VARIANT vPrintDevices);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NetAddresses )( 
            IADsPrintQueue * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NetAddresses )( 
            IADsPrintQueue * This,
            /* [in] */ VARIANT vNetAddresses);
        
        END_INTERFACE
    } IADsPrintQueueVtbl;

    interface IADsPrintQueue
    {
        CONST_VTBL struct IADsPrintQueueVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsPrintQueue_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsPrintQueue_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsPrintQueue_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsPrintQueue_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsPrintQueue_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsPrintQueue_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsPrintQueue_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsPrintQueue_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsPrintQueue_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsPrintQueue_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsPrintQueue_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsPrintQueue_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsPrintQueue_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsPrintQueue_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsPrintQueue_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsPrintQueue_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsPrintQueue_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsPrintQueue_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsPrintQueue_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsPrintQueue_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsPrintQueue_get_PrinterPath(This,retval)	\
    ( (This)->lpVtbl -> get_PrinterPath(This,retval) ) 

#define IADsPrintQueue_put_PrinterPath(This,bstrPrinterPath)	\
    ( (This)->lpVtbl -> put_PrinterPath(This,bstrPrinterPath) ) 

#define IADsPrintQueue_get_Model(This,retval)	\
    ( (This)->lpVtbl -> get_Model(This,retval) ) 

#define IADsPrintQueue_put_Model(This,bstrModel)	\
    ( (This)->lpVtbl -> put_Model(This,bstrModel) ) 

#define IADsPrintQueue_get_Datatype(This,retval)	\
    ( (This)->lpVtbl -> get_Datatype(This,retval) ) 

#define IADsPrintQueue_put_Datatype(This,bstrDatatype)	\
    ( (This)->lpVtbl -> put_Datatype(This,bstrDatatype) ) 

#define IADsPrintQueue_get_PrintProcessor(This,retval)	\
    ( (This)->lpVtbl -> get_PrintProcessor(This,retval) ) 

#define IADsPrintQueue_put_PrintProcessor(This,bstrPrintProcessor)	\
    ( (This)->lpVtbl -> put_PrintProcessor(This,bstrPrintProcessor) ) 

#define IADsPrintQueue_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IADsPrintQueue_put_Description(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_Description(This,bstrDescription) ) 

#define IADsPrintQueue_get_Location(This,retval)	\
    ( (This)->lpVtbl -> get_Location(This,retval) ) 

#define IADsPrintQueue_put_Location(This,bstrLocation)	\
    ( (This)->lpVtbl -> put_Location(This,bstrLocation) ) 

#define IADsPrintQueue_get_StartTime(This,retval)	\
    ( (This)->lpVtbl -> get_StartTime(This,retval) ) 

#define IADsPrintQueue_put_StartTime(This,daStartTime)	\
    ( (This)->lpVtbl -> put_StartTime(This,daStartTime) ) 

#define IADsPrintQueue_get_UntilTime(This,retval)	\
    ( (This)->lpVtbl -> get_UntilTime(This,retval) ) 

#define IADsPrintQueue_put_UntilTime(This,daUntilTime)	\
    ( (This)->lpVtbl -> put_UntilTime(This,daUntilTime) ) 

#define IADsPrintQueue_get_DefaultJobPriority(This,retval)	\
    ( (This)->lpVtbl -> get_DefaultJobPriority(This,retval) ) 

#define IADsPrintQueue_put_DefaultJobPriority(This,lnDefaultJobPriority)	\
    ( (This)->lpVtbl -> put_DefaultJobPriority(This,lnDefaultJobPriority) ) 

#define IADsPrintQueue_get_Priority(This,retval)	\
    ( (This)->lpVtbl -> get_Priority(This,retval) ) 

#define IADsPrintQueue_put_Priority(This,lnPriority)	\
    ( (This)->lpVtbl -> put_Priority(This,lnPriority) ) 

#define IADsPrintQueue_get_BannerPage(This,retval)	\
    ( (This)->lpVtbl -> get_BannerPage(This,retval) ) 

#define IADsPrintQueue_put_BannerPage(This,bstrBannerPage)	\
    ( (This)->lpVtbl -> put_BannerPage(This,bstrBannerPage) ) 

#define IADsPrintQueue_get_PrintDevices(This,retval)	\
    ( (This)->lpVtbl -> get_PrintDevices(This,retval) ) 

#define IADsPrintQueue_put_PrintDevices(This,vPrintDevices)	\
    ( (This)->lpVtbl -> put_PrintDevices(This,vPrintDevices) ) 

#define IADsPrintQueue_get_NetAddresses(This,retval)	\
    ( (This)->lpVtbl -> get_NetAddresses(This,retval) ) 

#define IADsPrintQueue_put_NetAddresses(This,vNetAddresses)	\
    ( (This)->lpVtbl -> put_NetAddresses(This,vNetAddresses) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsPrintQueue_INTERFACE_DEFINED__ */


#ifndef __IADsPrintQueueOperations_INTERFACE_DEFINED__
#define __IADsPrintQueueOperations_INTERFACE_DEFINED__

/* interface IADsPrintQueueOperations */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsPrintQueueOperations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("124be5c0-156e-11cf-a986-00aa006bc149")
    IADsPrintQueueOperations : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PrintJobs( 
            /* [retval][out] */ IADsCollection **pObject) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Purge( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsPrintQueueOperationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsPrintQueueOperations * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsPrintQueueOperations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsPrintQueueOperations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsPrintQueueOperations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsPrintQueueOperations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsPrintQueueOperations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsPrintQueueOperations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsPrintQueueOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsPrintQueueOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsPrintQueueOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsPrintQueueOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsPrintQueueOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsPrintQueueOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsPrintQueueOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsPrintQueueOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsPrintQueueOperations * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsPrintQueueOperations * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsPrintQueueOperations * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsPrintQueueOperations * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsPrintQueueOperations * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IADsPrintQueueOperations * This,
            /* [retval][out] */ long *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PrintJobs )( 
            IADsPrintQueueOperations * This,
            /* [retval][out] */ IADsCollection **pObject);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IADsPrintQueueOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Resume )( 
            IADsPrintQueueOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Purge )( 
            IADsPrintQueueOperations * This);
        
        END_INTERFACE
    } IADsPrintQueueOperationsVtbl;

    interface IADsPrintQueueOperations
    {
        CONST_VTBL struct IADsPrintQueueOperationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsPrintQueueOperations_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsPrintQueueOperations_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsPrintQueueOperations_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsPrintQueueOperations_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsPrintQueueOperations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsPrintQueueOperations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsPrintQueueOperations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsPrintQueueOperations_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsPrintQueueOperations_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsPrintQueueOperations_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsPrintQueueOperations_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsPrintQueueOperations_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsPrintQueueOperations_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsPrintQueueOperations_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsPrintQueueOperations_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsPrintQueueOperations_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsPrintQueueOperations_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsPrintQueueOperations_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsPrintQueueOperations_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsPrintQueueOperations_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsPrintQueueOperations_get_Status(This,retval)	\
    ( (This)->lpVtbl -> get_Status(This,retval) ) 

#define IADsPrintQueueOperations_PrintJobs(This,pObject)	\
    ( (This)->lpVtbl -> PrintJobs(This,pObject) ) 

#define IADsPrintQueueOperations_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IADsPrintQueueOperations_Resume(This)	\
    ( (This)->lpVtbl -> Resume(This) ) 

#define IADsPrintQueueOperations_Purge(This)	\
    ( (This)->lpVtbl -> Purge(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsPrintQueueOperations_INTERFACE_DEFINED__ */


#ifndef __IADsPrintJob_INTERFACE_DEFINED__
#define __IADsPrintJob_INTERFACE_DEFINED__

/* interface IADsPrintJob */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsPrintJob;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("32fb6780-1ed0-11cf-a988-00aa006bc149")
    IADsPrintJob : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HostPrintQueue( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_User( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_UserPath( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TimeSubmitted( 
            /* [retval][out] */ DATE *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TotalPages( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Priority( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Priority( 
            /* [in] */ long lnPriority) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_StartTime( 
            /* [retval][out] */ DATE *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_StartTime( 
            /* [in] */ DATE daStartTime) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_UntilTime( 
            /* [retval][out] */ DATE *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_UntilTime( 
            /* [in] */ DATE daUntilTime) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Notify( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Notify( 
            /* [in] */ BSTR bstrNotify) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_NotifyPath( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_NotifyPath( 
            /* [in] */ BSTR bstrNotifyPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsPrintJobVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsPrintJob * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsPrintJob * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsPrintJob * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsPrintJob * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsPrintJob * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsPrintJob * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsPrintJob * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsPrintJob * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsPrintJob * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsPrintJob * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsPrintJob * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsPrintJob * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsPrintJob * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsPrintJob * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsPrintJob * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsPrintJob * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsPrintJob * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsPrintJob * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsPrintJob * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsPrintJob * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HostPrintQueue )( 
            IADsPrintJob * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_User )( 
            IADsPrintJob * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserPath )( 
            IADsPrintJob * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeSubmitted )( 
            IADsPrintJob * This,
            /* [retval][out] */ DATE *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalPages )( 
            IADsPrintJob * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            IADsPrintJob * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IADsPrintJob * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IADsPrintJob * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Priority )( 
            IADsPrintJob * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Priority )( 
            IADsPrintJob * This,
            /* [in] */ long lnPriority);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartTime )( 
            IADsPrintJob * This,
            /* [retval][out] */ DATE *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartTime )( 
            IADsPrintJob * This,
            /* [in] */ DATE daStartTime);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UntilTime )( 
            IADsPrintJob * This,
            /* [retval][out] */ DATE *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UntilTime )( 
            IADsPrintJob * This,
            /* [in] */ DATE daUntilTime);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Notify )( 
            IADsPrintJob * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Notify )( 
            IADsPrintJob * This,
            /* [in] */ BSTR bstrNotify);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NotifyPath )( 
            IADsPrintJob * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NotifyPath )( 
            IADsPrintJob * This,
            /* [in] */ BSTR bstrNotifyPath);
        
        END_INTERFACE
    } IADsPrintJobVtbl;

    interface IADsPrintJob
    {
        CONST_VTBL struct IADsPrintJobVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsPrintJob_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsPrintJob_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsPrintJob_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsPrintJob_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsPrintJob_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsPrintJob_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsPrintJob_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsPrintJob_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsPrintJob_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsPrintJob_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsPrintJob_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsPrintJob_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsPrintJob_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsPrintJob_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsPrintJob_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsPrintJob_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsPrintJob_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsPrintJob_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsPrintJob_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsPrintJob_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsPrintJob_get_HostPrintQueue(This,retval)	\
    ( (This)->lpVtbl -> get_HostPrintQueue(This,retval) ) 

#define IADsPrintJob_get_User(This,retval)	\
    ( (This)->lpVtbl -> get_User(This,retval) ) 

#define IADsPrintJob_get_UserPath(This,retval)	\
    ( (This)->lpVtbl -> get_UserPath(This,retval) ) 

#define IADsPrintJob_get_TimeSubmitted(This,retval)	\
    ( (This)->lpVtbl -> get_TimeSubmitted(This,retval) ) 

#define IADsPrintJob_get_TotalPages(This,retval)	\
    ( (This)->lpVtbl -> get_TotalPages(This,retval) ) 

#define IADsPrintJob_get_Size(This,retval)	\
    ( (This)->lpVtbl -> get_Size(This,retval) ) 

#define IADsPrintJob_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IADsPrintJob_put_Description(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_Description(This,bstrDescription) ) 

#define IADsPrintJob_get_Priority(This,retval)	\
    ( (This)->lpVtbl -> get_Priority(This,retval) ) 

#define IADsPrintJob_put_Priority(This,lnPriority)	\
    ( (This)->lpVtbl -> put_Priority(This,lnPriority) ) 

#define IADsPrintJob_get_StartTime(This,retval)	\
    ( (This)->lpVtbl -> get_StartTime(This,retval) ) 

#define IADsPrintJob_put_StartTime(This,daStartTime)	\
    ( (This)->lpVtbl -> put_StartTime(This,daStartTime) ) 

#define IADsPrintJob_get_UntilTime(This,retval)	\
    ( (This)->lpVtbl -> get_UntilTime(This,retval) ) 

#define IADsPrintJob_put_UntilTime(This,daUntilTime)	\
    ( (This)->lpVtbl -> put_UntilTime(This,daUntilTime) ) 

#define IADsPrintJob_get_Notify(This,retval)	\
    ( (This)->lpVtbl -> get_Notify(This,retval) ) 

#define IADsPrintJob_put_Notify(This,bstrNotify)	\
    ( (This)->lpVtbl -> put_Notify(This,bstrNotify) ) 

#define IADsPrintJob_get_NotifyPath(This,retval)	\
    ( (This)->lpVtbl -> get_NotifyPath(This,retval) ) 

#define IADsPrintJob_put_NotifyPath(This,bstrNotifyPath)	\
    ( (This)->lpVtbl -> put_NotifyPath(This,bstrNotifyPath) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsPrintJob_INTERFACE_DEFINED__ */


#ifndef __IADsPrintJobOperations_INTERFACE_DEFINED__
#define __IADsPrintJobOperations_INTERFACE_DEFINED__

/* interface IADsPrintJobOperations */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsPrintJobOperations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9a52db30-1ecf-11cf-a988-00aa006bc149")
    IADsPrintJobOperations : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TimeElapsed( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PagesPrinted( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ long lnPosition) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsPrintJobOperationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsPrintJobOperations * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsPrintJobOperations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsPrintJobOperations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsPrintJobOperations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsPrintJobOperations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsPrintJobOperations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsPrintJobOperations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsPrintJobOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsPrintJobOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsPrintJobOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsPrintJobOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsPrintJobOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsPrintJobOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsPrintJobOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsPrintJobOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsPrintJobOperations * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsPrintJobOperations * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsPrintJobOperations * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsPrintJobOperations * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsPrintJobOperations * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IADsPrintJobOperations * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeElapsed )( 
            IADsPrintJobOperations * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PagesPrinted )( 
            IADsPrintJobOperations * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            IADsPrintJobOperations * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            IADsPrintJobOperations * This,
            /* [in] */ long lnPosition);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IADsPrintJobOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Resume )( 
            IADsPrintJobOperations * This);
        
        END_INTERFACE
    } IADsPrintJobOperationsVtbl;

    interface IADsPrintJobOperations
    {
        CONST_VTBL struct IADsPrintJobOperationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsPrintJobOperations_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsPrintJobOperations_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsPrintJobOperations_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsPrintJobOperations_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsPrintJobOperations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsPrintJobOperations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsPrintJobOperations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsPrintJobOperations_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsPrintJobOperations_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsPrintJobOperations_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsPrintJobOperations_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsPrintJobOperations_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsPrintJobOperations_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsPrintJobOperations_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsPrintJobOperations_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsPrintJobOperations_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsPrintJobOperations_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsPrintJobOperations_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsPrintJobOperations_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsPrintJobOperations_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsPrintJobOperations_get_Status(This,retval)	\
    ( (This)->lpVtbl -> get_Status(This,retval) ) 

#define IADsPrintJobOperations_get_TimeElapsed(This,retval)	\
    ( (This)->lpVtbl -> get_TimeElapsed(This,retval) ) 

#define IADsPrintJobOperations_get_PagesPrinted(This,retval)	\
    ( (This)->lpVtbl -> get_PagesPrinted(This,retval) ) 

#define IADsPrintJobOperations_get_Position(This,retval)	\
    ( (This)->lpVtbl -> get_Position(This,retval) ) 

#define IADsPrintJobOperations_put_Position(This,lnPosition)	\
    ( (This)->lpVtbl -> put_Position(This,lnPosition) ) 

#define IADsPrintJobOperations_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IADsPrintJobOperations_Resume(This)	\
    ( (This)->lpVtbl -> Resume(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsPrintJobOperations_INTERFACE_DEFINED__ */


#ifndef __IADsService_INTERFACE_DEFINED__
#define __IADsService_INTERFACE_DEFINED__

/* interface IADsService */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsService;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("68af66e0-31ca-11cf-a98a-00aa006bc149")
    IADsService : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HostComputer( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_HostComputer( 
            /* [in] */ BSTR bstrHostComputer) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DisplayName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_DisplayName( 
            /* [in] */ BSTR bstrDisplayName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Version( 
            /* [in] */ BSTR bstrVersion) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ServiceType( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ServiceType( 
            /* [in] */ long lnServiceType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_StartType( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_StartType( 
            /* [in] */ long lnStartType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Path( 
            /* [in] */ BSTR bstrPath) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_StartupParameters( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_StartupParameters( 
            /* [in] */ BSTR bstrStartupParameters) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ErrorControl( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ErrorControl( 
            /* [in] */ long lnErrorControl) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LoadOrderGroup( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_LoadOrderGroup( 
            /* [in] */ BSTR bstrLoadOrderGroup) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ServiceAccountName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ServiceAccountName( 
            /* [in] */ BSTR bstrServiceAccountName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ServiceAccountPath( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ServiceAccountPath( 
            /* [in] */ BSTR bstrServiceAccountPath) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Dependencies( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Dependencies( 
            /* [in] */ VARIANT vDependencies) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsServiceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsService * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsService * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsService * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsService * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsService * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsService * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsService * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsService * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsService * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsService * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsService * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsService * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsService * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsService * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HostComputer )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HostComputer )( 
            IADsService * This,
            /* [in] */ BSTR bstrHostComputer);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IADsService * This,
            /* [in] */ BSTR bstrDisplayName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Version )( 
            IADsService * This,
            /* [in] */ BSTR bstrVersion);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceType )( 
            IADsService * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceType )( 
            IADsService * This,
            /* [in] */ long lnServiceType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartType )( 
            IADsService * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartType )( 
            IADsService * This,
            /* [in] */ long lnStartType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IADsService * This,
            /* [in] */ BSTR bstrPath);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartupParameters )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartupParameters )( 
            IADsService * This,
            /* [in] */ BSTR bstrStartupParameters);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorControl )( 
            IADsService * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ErrorControl )( 
            IADsService * This,
            /* [in] */ long lnErrorControl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LoadOrderGroup )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LoadOrderGroup )( 
            IADsService * This,
            /* [in] */ BSTR bstrLoadOrderGroup);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceAccountName )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceAccountName )( 
            IADsService * This,
            /* [in] */ BSTR bstrServiceAccountName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceAccountPath )( 
            IADsService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceAccountPath )( 
            IADsService * This,
            /* [in] */ BSTR bstrServiceAccountPath);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dependencies )( 
            IADsService * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Dependencies )( 
            IADsService * This,
            /* [in] */ VARIANT vDependencies);
        
        END_INTERFACE
    } IADsServiceVtbl;

    interface IADsService
    {
        CONST_VTBL struct IADsServiceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsService_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsService_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsService_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsService_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsService_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsService_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsService_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsService_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsService_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsService_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsService_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsService_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsService_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsService_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsService_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsService_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsService_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsService_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsService_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsService_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsService_get_HostComputer(This,retval)	\
    ( (This)->lpVtbl -> get_HostComputer(This,retval) ) 

#define IADsService_put_HostComputer(This,bstrHostComputer)	\
    ( (This)->lpVtbl -> put_HostComputer(This,bstrHostComputer) ) 

#define IADsService_get_DisplayName(This,retval)	\
    ( (This)->lpVtbl -> get_DisplayName(This,retval) ) 

#define IADsService_put_DisplayName(This,bstrDisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,bstrDisplayName) ) 

#define IADsService_get_Version(This,retval)	\
    ( (This)->lpVtbl -> get_Version(This,retval) ) 

#define IADsService_put_Version(This,bstrVersion)	\
    ( (This)->lpVtbl -> put_Version(This,bstrVersion) ) 

#define IADsService_get_ServiceType(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceType(This,retval) ) 

#define IADsService_put_ServiceType(This,lnServiceType)	\
    ( (This)->lpVtbl -> put_ServiceType(This,lnServiceType) ) 

#define IADsService_get_StartType(This,retval)	\
    ( (This)->lpVtbl -> get_StartType(This,retval) ) 

#define IADsService_put_StartType(This,lnStartType)	\
    ( (This)->lpVtbl -> put_StartType(This,lnStartType) ) 

#define IADsService_get_Path(This,retval)	\
    ( (This)->lpVtbl -> get_Path(This,retval) ) 

#define IADsService_put_Path(This,bstrPath)	\
    ( (This)->lpVtbl -> put_Path(This,bstrPath) ) 

#define IADsService_get_StartupParameters(This,retval)	\
    ( (This)->lpVtbl -> get_StartupParameters(This,retval) ) 

#define IADsService_put_StartupParameters(This,bstrStartupParameters)	\
    ( (This)->lpVtbl -> put_StartupParameters(This,bstrStartupParameters) ) 

#define IADsService_get_ErrorControl(This,retval)	\
    ( (This)->lpVtbl -> get_ErrorControl(This,retval) ) 

#define IADsService_put_ErrorControl(This,lnErrorControl)	\
    ( (This)->lpVtbl -> put_ErrorControl(This,lnErrorControl) ) 

#define IADsService_get_LoadOrderGroup(This,retval)	\
    ( (This)->lpVtbl -> get_LoadOrderGroup(This,retval) ) 

#define IADsService_put_LoadOrderGroup(This,bstrLoadOrderGroup)	\
    ( (This)->lpVtbl -> put_LoadOrderGroup(This,bstrLoadOrderGroup) ) 

#define IADsService_get_ServiceAccountName(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceAccountName(This,retval) ) 

#define IADsService_put_ServiceAccountName(This,bstrServiceAccountName)	\
    ( (This)->lpVtbl -> put_ServiceAccountName(This,bstrServiceAccountName) ) 

#define IADsService_get_ServiceAccountPath(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceAccountPath(This,retval) ) 

#define IADsService_put_ServiceAccountPath(This,bstrServiceAccountPath)	\
    ( (This)->lpVtbl -> put_ServiceAccountPath(This,bstrServiceAccountPath) ) 

#define IADsService_get_Dependencies(This,retval)	\
    ( (This)->lpVtbl -> get_Dependencies(This,retval) ) 

#define IADsService_put_Dependencies(This,vDependencies)	\
    ( (This)->lpVtbl -> put_Dependencies(This,vDependencies) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsService_INTERFACE_DEFINED__ */


#ifndef __IADsServiceOperations_INTERFACE_DEFINED__
#define __IADsServiceOperations_INTERFACE_DEFINED__

/* interface IADsServiceOperations */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsServiceOperations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5d7b33f0-31ca-11cf-a98a-00aa006bc149")
    IADsServiceOperations : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Start( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Continue( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetPassword( 
            /* [in] */ BSTR bstrNewPassword) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsServiceOperationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsServiceOperations * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsServiceOperations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsServiceOperations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsServiceOperations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsServiceOperations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsServiceOperations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsServiceOperations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsServiceOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsServiceOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsServiceOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsServiceOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsServiceOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsServiceOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsServiceOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsServiceOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsServiceOperations * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsServiceOperations * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsServiceOperations * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsServiceOperations * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsServiceOperations * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IADsServiceOperations * This,
            /* [retval][out] */ long *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IADsServiceOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IADsServiceOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IADsServiceOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Continue )( 
            IADsServiceOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetPassword )( 
            IADsServiceOperations * This,
            /* [in] */ BSTR bstrNewPassword);
        
        END_INTERFACE
    } IADsServiceOperationsVtbl;

    interface IADsServiceOperations
    {
        CONST_VTBL struct IADsServiceOperationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsServiceOperations_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsServiceOperations_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsServiceOperations_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsServiceOperations_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsServiceOperations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsServiceOperations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsServiceOperations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsServiceOperations_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsServiceOperations_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsServiceOperations_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsServiceOperations_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsServiceOperations_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsServiceOperations_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsServiceOperations_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsServiceOperations_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsServiceOperations_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsServiceOperations_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsServiceOperations_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsServiceOperations_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsServiceOperations_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsServiceOperations_get_Status(This,retval)	\
    ( (This)->lpVtbl -> get_Status(This,retval) ) 

#define IADsServiceOperations_Start(This)	\
    ( (This)->lpVtbl -> Start(This) ) 

#define IADsServiceOperations_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IADsServiceOperations_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IADsServiceOperations_Continue(This)	\
    ( (This)->lpVtbl -> Continue(This) ) 

#define IADsServiceOperations_SetPassword(This,bstrNewPassword)	\
    ( (This)->lpVtbl -> SetPassword(This,bstrNewPassword) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsServiceOperations_INTERFACE_DEFINED__ */


#ifndef __IADsFileService_INTERFACE_DEFINED__
#define __IADsFileService_INTERFACE_DEFINED__

/* interface IADsFileService */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsFileService;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a89d1900-31ca-11cf-a98a-00aa006bc149")
    IADsFileService : public IADsService
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MaxUserCount( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MaxUserCount( 
            /* [in] */ long lnMaxUserCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsFileServiceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsFileService * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsFileService * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsFileService * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsFileService * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsFileService * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsFileService * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsFileService * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsFileService * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsFileService * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsFileService * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsFileService * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsFileService * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsFileService * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsFileService * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HostComputer )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HostComputer )( 
            IADsFileService * This,
            /* [in] */ BSTR bstrHostComputer);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IADsFileService * This,
            /* [in] */ BSTR bstrDisplayName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Version )( 
            IADsFileService * This,
            /* [in] */ BSTR bstrVersion);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceType )( 
            IADsFileService * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceType )( 
            IADsFileService * This,
            /* [in] */ long lnServiceType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartType )( 
            IADsFileService * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartType )( 
            IADsFileService * This,
            /* [in] */ long lnStartType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IADsFileService * This,
            /* [in] */ BSTR bstrPath);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartupParameters )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StartupParameters )( 
            IADsFileService * This,
            /* [in] */ BSTR bstrStartupParameters);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorControl )( 
            IADsFileService * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ErrorControl )( 
            IADsFileService * This,
            /* [in] */ long lnErrorControl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LoadOrderGroup )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LoadOrderGroup )( 
            IADsFileService * This,
            /* [in] */ BSTR bstrLoadOrderGroup);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceAccountName )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceAccountName )( 
            IADsFileService * This,
            /* [in] */ BSTR bstrServiceAccountName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceAccountPath )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceAccountPath )( 
            IADsFileService * This,
            /* [in] */ BSTR bstrServiceAccountPath);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dependencies )( 
            IADsFileService * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Dependencies )( 
            IADsFileService * This,
            /* [in] */ VARIANT vDependencies);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IADsFileService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IADsFileService * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxUserCount )( 
            IADsFileService * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaxUserCount )( 
            IADsFileService * This,
            /* [in] */ long lnMaxUserCount);
        
        END_INTERFACE
    } IADsFileServiceVtbl;

    interface IADsFileService
    {
        CONST_VTBL struct IADsFileServiceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsFileService_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsFileService_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsFileService_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsFileService_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsFileService_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsFileService_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsFileService_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsFileService_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsFileService_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsFileService_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsFileService_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsFileService_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsFileService_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsFileService_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsFileService_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsFileService_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsFileService_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsFileService_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsFileService_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsFileService_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsFileService_get_HostComputer(This,retval)	\
    ( (This)->lpVtbl -> get_HostComputer(This,retval) ) 

#define IADsFileService_put_HostComputer(This,bstrHostComputer)	\
    ( (This)->lpVtbl -> put_HostComputer(This,bstrHostComputer) ) 

#define IADsFileService_get_DisplayName(This,retval)	\
    ( (This)->lpVtbl -> get_DisplayName(This,retval) ) 

#define IADsFileService_put_DisplayName(This,bstrDisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,bstrDisplayName) ) 

#define IADsFileService_get_Version(This,retval)	\
    ( (This)->lpVtbl -> get_Version(This,retval) ) 

#define IADsFileService_put_Version(This,bstrVersion)	\
    ( (This)->lpVtbl -> put_Version(This,bstrVersion) ) 

#define IADsFileService_get_ServiceType(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceType(This,retval) ) 

#define IADsFileService_put_ServiceType(This,lnServiceType)	\
    ( (This)->lpVtbl -> put_ServiceType(This,lnServiceType) ) 

#define IADsFileService_get_StartType(This,retval)	\
    ( (This)->lpVtbl -> get_StartType(This,retval) ) 

#define IADsFileService_put_StartType(This,lnStartType)	\
    ( (This)->lpVtbl -> put_StartType(This,lnStartType) ) 

#define IADsFileService_get_Path(This,retval)	\
    ( (This)->lpVtbl -> get_Path(This,retval) ) 

#define IADsFileService_put_Path(This,bstrPath)	\
    ( (This)->lpVtbl -> put_Path(This,bstrPath) ) 

#define IADsFileService_get_StartupParameters(This,retval)	\
    ( (This)->lpVtbl -> get_StartupParameters(This,retval) ) 

#define IADsFileService_put_StartupParameters(This,bstrStartupParameters)	\
    ( (This)->lpVtbl -> put_StartupParameters(This,bstrStartupParameters) ) 

#define IADsFileService_get_ErrorControl(This,retval)	\
    ( (This)->lpVtbl -> get_ErrorControl(This,retval) ) 

#define IADsFileService_put_ErrorControl(This,lnErrorControl)	\
    ( (This)->lpVtbl -> put_ErrorControl(This,lnErrorControl) ) 

#define IADsFileService_get_LoadOrderGroup(This,retval)	\
    ( (This)->lpVtbl -> get_LoadOrderGroup(This,retval) ) 

#define IADsFileService_put_LoadOrderGroup(This,bstrLoadOrderGroup)	\
    ( (This)->lpVtbl -> put_LoadOrderGroup(This,bstrLoadOrderGroup) ) 

#define IADsFileService_get_ServiceAccountName(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceAccountName(This,retval) ) 

#define IADsFileService_put_ServiceAccountName(This,bstrServiceAccountName)	\
    ( (This)->lpVtbl -> put_ServiceAccountName(This,bstrServiceAccountName) ) 

#define IADsFileService_get_ServiceAccountPath(This,retval)	\
    ( (This)->lpVtbl -> get_ServiceAccountPath(This,retval) ) 

#define IADsFileService_put_ServiceAccountPath(This,bstrServiceAccountPath)	\
    ( (This)->lpVtbl -> put_ServiceAccountPath(This,bstrServiceAccountPath) ) 

#define IADsFileService_get_Dependencies(This,retval)	\
    ( (This)->lpVtbl -> get_Dependencies(This,retval) ) 

#define IADsFileService_put_Dependencies(This,vDependencies)	\
    ( (This)->lpVtbl -> put_Dependencies(This,vDependencies) ) 


#define IADsFileService_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IADsFileService_put_Description(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_Description(This,bstrDescription) ) 

#define IADsFileService_get_MaxUserCount(This,retval)	\
    ( (This)->lpVtbl -> get_MaxUserCount(This,retval) ) 

#define IADsFileService_put_MaxUserCount(This,lnMaxUserCount)	\
    ( (This)->lpVtbl -> put_MaxUserCount(This,lnMaxUserCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsFileService_INTERFACE_DEFINED__ */


#ifndef __IADsFileServiceOperations_INTERFACE_DEFINED__
#define __IADsFileServiceOperations_INTERFACE_DEFINED__

/* interface IADsFileServiceOperations */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsFileServiceOperations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a02ded10-31ca-11cf-a98a-00aa006bc149")
    IADsFileServiceOperations : public IADsServiceOperations
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Sessions( 
            /* [retval][out] */ IADsCollection **ppSessions) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Resources( 
            /* [retval][out] */ IADsCollection **ppResources) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsFileServiceOperationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsFileServiceOperations * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsFileServiceOperations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsFileServiceOperations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsFileServiceOperations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsFileServiceOperations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsFileServiceOperations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsFileServiceOperations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsFileServiceOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsFileServiceOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsFileServiceOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsFileServiceOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsFileServiceOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsFileServiceOperations * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsFileServiceOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsFileServiceOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsFileServiceOperations * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsFileServiceOperations * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsFileServiceOperations * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsFileServiceOperations * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsFileServiceOperations * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IADsFileServiceOperations * This,
            /* [retval][out] */ long *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IADsFileServiceOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IADsFileServiceOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IADsFileServiceOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Continue )( 
            IADsFileServiceOperations * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetPassword )( 
            IADsFileServiceOperations * This,
            /* [in] */ BSTR bstrNewPassword);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Sessions )( 
            IADsFileServiceOperations * This,
            /* [retval][out] */ IADsCollection **ppSessions);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Resources )( 
            IADsFileServiceOperations * This,
            /* [retval][out] */ IADsCollection **ppResources);
        
        END_INTERFACE
    } IADsFileServiceOperationsVtbl;

    interface IADsFileServiceOperations
    {
        CONST_VTBL struct IADsFileServiceOperationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsFileServiceOperations_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsFileServiceOperations_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsFileServiceOperations_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsFileServiceOperations_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsFileServiceOperations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsFileServiceOperations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsFileServiceOperations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsFileServiceOperations_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsFileServiceOperations_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsFileServiceOperations_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsFileServiceOperations_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsFileServiceOperations_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsFileServiceOperations_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsFileServiceOperations_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsFileServiceOperations_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsFileServiceOperations_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsFileServiceOperations_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsFileServiceOperations_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsFileServiceOperations_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsFileServiceOperations_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsFileServiceOperations_get_Status(This,retval)	\
    ( (This)->lpVtbl -> get_Status(This,retval) ) 

#define IADsFileServiceOperations_Start(This)	\
    ( (This)->lpVtbl -> Start(This) ) 

#define IADsFileServiceOperations_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IADsFileServiceOperations_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IADsFileServiceOperations_Continue(This)	\
    ( (This)->lpVtbl -> Continue(This) ) 

#define IADsFileServiceOperations_SetPassword(This,bstrNewPassword)	\
    ( (This)->lpVtbl -> SetPassword(This,bstrNewPassword) ) 


#define IADsFileServiceOperations_Sessions(This,ppSessions)	\
    ( (This)->lpVtbl -> Sessions(This,ppSessions) ) 

#define IADsFileServiceOperations_Resources(This,ppResources)	\
    ( (This)->lpVtbl -> Resources(This,ppResources) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsFileServiceOperations_INTERFACE_DEFINED__ */


#ifndef __IADsFileShare_INTERFACE_DEFINED__
#define __IADsFileShare_INTERFACE_DEFINED__

/* interface IADsFileShare */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsFileShare;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eb6dcaf0-4b83-11cf-a995-00aa006bc149")
    IADsFileShare : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentUserCount( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HostComputer( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_HostComputer( 
            /* [in] */ BSTR bstrHostComputer) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Path( 
            /* [in] */ BSTR bstrPath) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MaxUserCount( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MaxUserCount( 
            /* [in] */ long lnMaxUserCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsFileShareVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsFileShare * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsFileShare * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsFileShare * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsFileShare * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsFileShare * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsFileShare * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsFileShare * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsFileShare * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsFileShare * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsFileShare * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsFileShare * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsFileShare * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsFileShare * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsFileShare * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsFileShare * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsFileShare * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsFileShare * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsFileShare * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsFileShare * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsFileShare * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentUserCount )( 
            IADsFileShare * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IADsFileShare * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IADsFileShare * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HostComputer )( 
            IADsFileShare * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HostComputer )( 
            IADsFileShare * This,
            /* [in] */ BSTR bstrHostComputer);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IADsFileShare * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IADsFileShare * This,
            /* [in] */ BSTR bstrPath);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxUserCount )( 
            IADsFileShare * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaxUserCount )( 
            IADsFileShare * This,
            /* [in] */ long lnMaxUserCount);
        
        END_INTERFACE
    } IADsFileShareVtbl;

    interface IADsFileShare
    {
        CONST_VTBL struct IADsFileShareVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsFileShare_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsFileShare_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsFileShare_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsFileShare_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsFileShare_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsFileShare_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsFileShare_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsFileShare_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsFileShare_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsFileShare_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsFileShare_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsFileShare_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsFileShare_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsFileShare_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsFileShare_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsFileShare_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsFileShare_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsFileShare_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsFileShare_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsFileShare_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsFileShare_get_CurrentUserCount(This,retval)	\
    ( (This)->lpVtbl -> get_CurrentUserCount(This,retval) ) 

#define IADsFileShare_get_Description(This,retval)	\
    ( (This)->lpVtbl -> get_Description(This,retval) ) 

#define IADsFileShare_put_Description(This,bstrDescription)	\
    ( (This)->lpVtbl -> put_Description(This,bstrDescription) ) 

#define IADsFileShare_get_HostComputer(This,retval)	\
    ( (This)->lpVtbl -> get_HostComputer(This,retval) ) 

#define IADsFileShare_put_HostComputer(This,bstrHostComputer)	\
    ( (This)->lpVtbl -> put_HostComputer(This,bstrHostComputer) ) 

#define IADsFileShare_get_Path(This,retval)	\
    ( (This)->lpVtbl -> get_Path(This,retval) ) 

#define IADsFileShare_put_Path(This,bstrPath)	\
    ( (This)->lpVtbl -> put_Path(This,bstrPath) ) 

#define IADsFileShare_get_MaxUserCount(This,retval)	\
    ( (This)->lpVtbl -> get_MaxUserCount(This,retval) ) 

#define IADsFileShare_put_MaxUserCount(This,lnMaxUserCount)	\
    ( (This)->lpVtbl -> put_MaxUserCount(This,lnMaxUserCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsFileShare_INTERFACE_DEFINED__ */


#ifndef __IADsSession_INTERFACE_DEFINED__
#define __IADsSession_INTERFACE_DEFINED__

/* interface IADsSession */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsSession;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("398b7da0-4aab-11cf-ae2c-00aa006ebfb9")
    IADsSession : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_User( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_UserPath( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Computer( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ComputerPath( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectTime( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_IdleTime( 
            /* [retval][out] */ long *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsSessionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsSession * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsSession * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsSession * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsSession * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsSession * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsSession * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsSession * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsSession * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsSession * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsSession * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsSession * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsSession * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsSession * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsSession * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsSession * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsSession * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsSession * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsSession * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsSession * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsSession * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_User )( 
            IADsSession * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserPath )( 
            IADsSession * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Computer )( 
            IADsSession * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ComputerPath )( 
            IADsSession * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectTime )( 
            IADsSession * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdleTime )( 
            IADsSession * This,
            /* [retval][out] */ long *retval);
        
        END_INTERFACE
    } IADsSessionVtbl;

    interface IADsSession
    {
        CONST_VTBL struct IADsSessionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsSession_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsSession_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsSession_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsSession_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsSession_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsSession_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsSession_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsSession_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsSession_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsSession_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsSession_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsSession_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsSession_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsSession_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsSession_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsSession_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsSession_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsSession_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsSession_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsSession_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsSession_get_User(This,retval)	\
    ( (This)->lpVtbl -> get_User(This,retval) ) 

#define IADsSession_get_UserPath(This,retval)	\
    ( (This)->lpVtbl -> get_UserPath(This,retval) ) 

#define IADsSession_get_Computer(This,retval)	\
    ( (This)->lpVtbl -> get_Computer(This,retval) ) 

#define IADsSession_get_ComputerPath(This,retval)	\
    ( (This)->lpVtbl -> get_ComputerPath(This,retval) ) 

#define IADsSession_get_ConnectTime(This,retval)	\
    ( (This)->lpVtbl -> get_ConnectTime(This,retval) ) 

#define IADsSession_get_IdleTime(This,retval)	\
    ( (This)->lpVtbl -> get_IdleTime(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsSession_INTERFACE_DEFINED__ */


#ifndef __IADsResource_INTERFACE_DEFINED__
#define __IADsResource_INTERFACE_DEFINED__

/* interface IADsResource */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsResource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("34a05b20-4aab-11cf-ae2c-00aa006ebfb9")
    IADsResource : public IADs
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_User( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_UserPath( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LockCount( 
            /* [retval][out] */ long *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsResourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsResource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsResource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsResource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsResource * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsResource * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsResource * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsResource * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IADsResource * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IADsResource * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IADsResource * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IADsResource * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IADsResource * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IADsResource * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IADsResource * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IADsResource * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsResource * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IADsResource * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsResource * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IADsResource * This,
            /* [in] */ long lnControlCode,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vProp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IADsResource * This,
            /* [in] */ VARIANT vProperties,
            /* [in] */ long lnReserved);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_User )( 
            IADsResource * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserPath )( 
            IADsResource * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IADsResource * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LockCount )( 
            IADsResource * This,
            /* [retval][out] */ long *retval);
        
        END_INTERFACE
    } IADsResourceVtbl;

    interface IADsResource
    {
        CONST_VTBL struct IADsResourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsResource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsResource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsResource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsResource_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsResource_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsResource_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsResource_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsResource_get_Name(This,retval)	\
    ( (This)->lpVtbl -> get_Name(This,retval) ) 

#define IADsResource_get_Class(This,retval)	\
    ( (This)->lpVtbl -> get_Class(This,retval) ) 

#define IADsResource_get_GUID(This,retval)	\
    ( (This)->lpVtbl -> get_GUID(This,retval) ) 

#define IADsResource_get_ADsPath(This,retval)	\
    ( (This)->lpVtbl -> get_ADsPath(This,retval) ) 

#define IADsResource_get_Parent(This,retval)	\
    ( (This)->lpVtbl -> get_Parent(This,retval) ) 

#define IADsResource_get_Schema(This,retval)	\
    ( (This)->lpVtbl -> get_Schema(This,retval) ) 

#define IADsResource_GetInfo(This)	\
    ( (This)->lpVtbl -> GetInfo(This) ) 

#define IADsResource_SetInfo(This)	\
    ( (This)->lpVtbl -> SetInfo(This) ) 

#define IADsResource_Get(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> Get(This,bstrName,pvProp) ) 

#define IADsResource_Put(This,bstrName,vProp)	\
    ( (This)->lpVtbl -> Put(This,bstrName,vProp) ) 

#define IADsResource_GetEx(This,bstrName,pvProp)	\
    ( (This)->lpVtbl -> GetEx(This,bstrName,pvProp) ) 

#define IADsResource_PutEx(This,lnControlCode,bstrName,vProp)	\
    ( (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp) ) 

#define IADsResource_GetInfoEx(This,vProperties,lnReserved)	\
    ( (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved) ) 


#define IADsResource_get_User(This,retval)	\
    ( (This)->lpVtbl -> get_User(This,retval) ) 

#define IADsResource_get_UserPath(This,retval)	\
    ( (This)->lpVtbl -> get_UserPath(This,retval) ) 

#define IADsResource_get_Path(This,retval)	\
    ( (This)->lpVtbl -> get_Path(This,retval) ) 

#define IADsResource_get_LockCount(This,retval)	\
    ( (This)->lpVtbl -> get_LockCount(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsResource_INTERFACE_DEFINED__ */


#ifndef __IADsOpenDSObject_INTERFACE_DEFINED__
#define __IADsOpenDSObject_INTERFACE_DEFINED__

/* interface IADsOpenDSObject */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsOpenDSObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ddf2891e-0f9c-11d0-8ad4-00c04fd8d503")
    IADsOpenDSObject : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OpenDSObject( 
            /* [in] */ BSTR lpszDNName,
            /* [in] */ BSTR lpszUserName,
            /* [in] */ BSTR lpszPassword,
            /* [in] */ long lnReserved,
            /* [retval][out] */ IDispatch **ppOleDsObj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsOpenDSObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsOpenDSObject * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsOpenDSObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsOpenDSObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsOpenDSObject * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsOpenDSObject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsOpenDSObject * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsOpenDSObject * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OpenDSObject )( 
            IADsOpenDSObject * This,
            /* [in] */ BSTR lpszDNName,
            /* [in] */ BSTR lpszUserName,
            /* [in] */ BSTR lpszPassword,
            /* [in] */ long lnReserved,
            /* [retval][out] */ IDispatch **ppOleDsObj);
        
        END_INTERFACE
    } IADsOpenDSObjectVtbl;

    interface IADsOpenDSObject
    {
        CONST_VTBL struct IADsOpenDSObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsOpenDSObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsOpenDSObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsOpenDSObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsOpenDSObject_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsOpenDSObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsOpenDSObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsOpenDSObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsOpenDSObject_OpenDSObject(This,lpszDNName,lpszUserName,lpszPassword,lnReserved,ppOleDsObj)	\
    ( (This)->lpVtbl -> OpenDSObject(This,lpszDNName,lpszUserName,lpszPassword,lnReserved,ppOleDsObj) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsOpenDSObject_INTERFACE_DEFINED__ */


#ifndef __IDirectoryObject_INTERFACE_DEFINED__
#define __IDirectoryObject_INTERFACE_DEFINED__

/* interface IDirectoryObject */
/* [object][uuid] */ 


EXTERN_C const IID IID_IDirectoryObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e798de2c-22e4-11d0-84fe-00c04fd8d503")
    IDirectoryObject : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetObjectInformation( 
            /* [out] */ PADS_OBJECT_INFO *ppObjInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetObjectAttributes( 
            /* [in] */ LPWSTR *pAttributeNames,
            /* [in] */ DWORD dwNumberAttributes,
            /* [out] */ PADS_ATTR_INFO *ppAttributeEntries,
            /* [out] */ DWORD *pdwNumAttributesReturned) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetObjectAttributes( 
            /* [in] */ PADS_ATTR_INFO pAttributeEntries,
            /* [in] */ DWORD dwNumAttributes,
            /* [out] */ DWORD *pdwNumAttributesModified) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDSObject( 
            /* [in] */ LPWSTR pszRDNName,
            /* [in] */ PADS_ATTR_INFO pAttributeEntries,
            /* [in] */ DWORD dwNumAttributes,
            /* [out] */ IDispatch **ppObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteDSObject( 
            /* [in] */ LPWSTR pszRDNName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDirectoryObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDirectoryObject * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDirectoryObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDirectoryObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectInformation )( 
            IDirectoryObject * This,
            /* [out] */ PADS_OBJECT_INFO *ppObjInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectAttributes )( 
            IDirectoryObject * This,
            /* [in] */ LPWSTR *pAttributeNames,
            /* [in] */ DWORD dwNumberAttributes,
            /* [out] */ PADS_ATTR_INFO *ppAttributeEntries,
            /* [out] */ DWORD *pdwNumAttributesReturned);
        
        HRESULT ( STDMETHODCALLTYPE *SetObjectAttributes )( 
            IDirectoryObject * This,
            /* [in] */ PADS_ATTR_INFO pAttributeEntries,
            /* [in] */ DWORD dwNumAttributes,
            /* [out] */ DWORD *pdwNumAttributesModified);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDSObject )( 
            IDirectoryObject * This,
            /* [in] */ LPWSTR pszRDNName,
            /* [in] */ PADS_ATTR_INFO pAttributeEntries,
            /* [in] */ DWORD dwNumAttributes,
            /* [out] */ IDispatch **ppObject);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteDSObject )( 
            IDirectoryObject * This,
            /* [in] */ LPWSTR pszRDNName);
        
        END_INTERFACE
    } IDirectoryObjectVtbl;

    interface IDirectoryObject
    {
        CONST_VTBL struct IDirectoryObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDirectoryObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDirectoryObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDirectoryObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDirectoryObject_GetObjectInformation(This,ppObjInfo)	\
    ( (This)->lpVtbl -> GetObjectInformation(This,ppObjInfo) ) 

#define IDirectoryObject_GetObjectAttributes(This,pAttributeNames,dwNumberAttributes,ppAttributeEntries,pdwNumAttributesReturned)	\
    ( (This)->lpVtbl -> GetObjectAttributes(This,pAttributeNames,dwNumberAttributes,ppAttributeEntries,pdwNumAttributesReturned) ) 

#define IDirectoryObject_SetObjectAttributes(This,pAttributeEntries,dwNumAttributes,pdwNumAttributesModified)	\
    ( (This)->lpVtbl -> SetObjectAttributes(This,pAttributeEntries,dwNumAttributes,pdwNumAttributesModified) ) 

#define IDirectoryObject_CreateDSObject(This,pszRDNName,pAttributeEntries,dwNumAttributes,ppObject)	\
    ( (This)->lpVtbl -> CreateDSObject(This,pszRDNName,pAttributeEntries,dwNumAttributes,ppObject) ) 

#define IDirectoryObject_DeleteDSObject(This,pszRDNName)	\
    ( (This)->lpVtbl -> DeleteDSObject(This,pszRDNName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDirectoryObject_INTERFACE_DEFINED__ */


#ifndef __IDirectorySearch_INTERFACE_DEFINED__
#define __IDirectorySearch_INTERFACE_DEFINED__

/* interface IDirectorySearch */
/* [object][uuid] */ 


EXTERN_C const IID IID_IDirectorySearch;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("109ba8ec-92f0-11d0-a790-00c04fd8d5a8")
    IDirectorySearch : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetSearchPreference( 
            /* [in] */ PADS_SEARCHPREF_INFO pSearchPrefs,
            /* [in] */ DWORD dwNumPrefs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ExecuteSearch( 
            /* [in] */ LPWSTR pszSearchFilter,
            /* [in] */ LPWSTR *pAttributeNames,
            /* [in] */ DWORD dwNumberAttributes,
            /* [out] */ PADS_SEARCH_HANDLE phSearchResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AbandonSearch( 
            /* [in] */ ADS_SEARCH_HANDLE phSearchResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFirstRow( 
            /* [in] */ ADS_SEARCH_HANDLE hSearchResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNextRow( 
            /* [in] */ ADS_SEARCH_HANDLE hSearchResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPreviousRow( 
            /* [in] */ ADS_SEARCH_HANDLE hSearchResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNextColumnName( 
            /* [in] */ ADS_SEARCH_HANDLE hSearchHandle,
            /* [out] */ LPWSTR *ppszColumnName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetColumn( 
            /* [in] */ ADS_SEARCH_HANDLE hSearchResult,
            /* [in] */ LPWSTR szColumnName,
            /* [out] */ PADS_SEARCH_COLUMN pSearchColumn) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FreeColumn( 
            /* [in] */ PADS_SEARCH_COLUMN pSearchColumn) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CloseSearchHandle( 
            /* [in] */ ADS_SEARCH_HANDLE hSearchResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDirectorySearchVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDirectorySearch * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDirectorySearch * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDirectorySearch * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetSearchPreference )( 
            IDirectorySearch * This,
            /* [in] */ PADS_SEARCHPREF_INFO pSearchPrefs,
            /* [in] */ DWORD dwNumPrefs);
        
        HRESULT ( STDMETHODCALLTYPE *ExecuteSearch )( 
            IDirectorySearch * This,
            /* [in] */ LPWSTR pszSearchFilter,
            /* [in] */ LPWSTR *pAttributeNames,
            /* [in] */ DWORD dwNumberAttributes,
            /* [out] */ PADS_SEARCH_HANDLE phSearchResult);
        
        HRESULT ( STDMETHODCALLTYPE *AbandonSearch )( 
            IDirectorySearch * This,
            /* [in] */ ADS_SEARCH_HANDLE phSearchResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetFirstRow )( 
            IDirectorySearch * This,
            /* [in] */ ADS_SEARCH_HANDLE hSearchResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextRow )( 
            IDirectorySearch * This,
            /* [in] */ ADS_SEARCH_HANDLE hSearchResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetPreviousRow )( 
            IDirectorySearch * This,
            /* [in] */ ADS_SEARCH_HANDLE hSearchResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextColumnName )( 
            IDirectorySearch * This,
            /* [in] */ ADS_SEARCH_HANDLE hSearchHandle,
            /* [out] */ LPWSTR *ppszColumnName);
        
        HRESULT ( STDMETHODCALLTYPE *GetColumn )( 
            IDirectorySearch * This,
            /* [in] */ ADS_SEARCH_HANDLE hSearchResult,
            /* [in] */ LPWSTR szColumnName,
            /* [out] */ PADS_SEARCH_COLUMN pSearchColumn);
        
        HRESULT ( STDMETHODCALLTYPE *FreeColumn )( 
            IDirectorySearch * This,
            /* [in] */ PADS_SEARCH_COLUMN pSearchColumn);
        
        HRESULT ( STDMETHODCALLTYPE *CloseSearchHandle )( 
            IDirectorySearch * This,
            /* [in] */ ADS_SEARCH_HANDLE hSearchResult);
        
        END_INTERFACE
    } IDirectorySearchVtbl;

    interface IDirectorySearch
    {
        CONST_VTBL struct IDirectorySearchVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDirectorySearch_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDirectorySearch_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDirectorySearch_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDirectorySearch_SetSearchPreference(This,pSearchPrefs,dwNumPrefs)	\
    ( (This)->lpVtbl -> SetSearchPreference(This,pSearchPrefs,dwNumPrefs) ) 

#define IDirectorySearch_ExecuteSearch(This,pszSearchFilter,pAttributeNames,dwNumberAttributes,phSearchResult)	\
    ( (This)->lpVtbl -> ExecuteSearch(This,pszSearchFilter,pAttributeNames,dwNumberAttributes,phSearchResult) ) 

#define IDirectorySearch_AbandonSearch(This,phSearchResult)	\
    ( (This)->lpVtbl -> AbandonSearch(This,phSearchResult) ) 

#define IDirectorySearch_GetFirstRow(This,hSearchResult)	\
    ( (This)->lpVtbl -> GetFirstRow(This,hSearchResult) ) 

#define IDirectorySearch_GetNextRow(This,hSearchResult)	\
    ( (This)->lpVtbl -> GetNextRow(This,hSearchResult) ) 

#define IDirectorySearch_GetPreviousRow(This,hSearchResult)	\
    ( (This)->lpVtbl -> GetPreviousRow(This,hSearchResult) ) 

#define IDirectorySearch_GetNextColumnName(This,hSearchHandle,ppszColumnName)	\
    ( (This)->lpVtbl -> GetNextColumnName(This,hSearchHandle,ppszColumnName) ) 

#define IDirectorySearch_GetColumn(This,hSearchResult,szColumnName,pSearchColumn)	\
    ( (This)->lpVtbl -> GetColumn(This,hSearchResult,szColumnName,pSearchColumn) ) 

#define IDirectorySearch_FreeColumn(This,pSearchColumn)	\
    ( (This)->lpVtbl -> FreeColumn(This,pSearchColumn) ) 

#define IDirectorySearch_CloseSearchHandle(This,hSearchResult)	\
    ( (This)->lpVtbl -> CloseSearchHandle(This,hSearchResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDirectorySearch_INTERFACE_DEFINED__ */


#ifndef __IDirectorySchemaMgmt_INTERFACE_DEFINED__
#define __IDirectorySchemaMgmt_INTERFACE_DEFINED__

/* interface IDirectorySchemaMgmt */
/* [object][uuid] */ 


EXTERN_C const IID IID_IDirectorySchemaMgmt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("75db3b9c-a4d8-11d0-a79c-00c04fd8d5a8")
    IDirectorySchemaMgmt : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumAttributes( 
            LPWSTR *ppszAttrNames,
            DWORD dwNumAttributes,
            PADS_ATTR_DEF *ppAttrDefinition,
            DWORD *pdwNumAttributes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateAttributeDefinition( 
            LPWSTR pszAttributeName,
            PADS_ATTR_DEF pAttributeDefinition) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WriteAttributeDefinition( 
            LPWSTR pszAttributeName,
            PADS_ATTR_DEF pAttributeDefinition) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteAttributeDefinition( 
            LPWSTR pszAttributeName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumClasses( 
            LPWSTR *ppszClassNames,
            DWORD dwNumClasses,
            PADS_CLASS_DEF *ppClassDefinition,
            DWORD *pdwNumClasses) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WriteClassDefinition( 
            LPWSTR pszClassName,
            PADS_CLASS_DEF pClassDefinition) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateClassDefinition( 
            LPWSTR pszClassName,
            PADS_CLASS_DEF pClassDefinition) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteClassDefinition( 
            LPWSTR pszClassName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDirectorySchemaMgmtVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDirectorySchemaMgmt * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDirectorySchemaMgmt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDirectorySchemaMgmt * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumAttributes )( 
            IDirectorySchemaMgmt * This,
            LPWSTR *ppszAttrNames,
            DWORD dwNumAttributes,
            PADS_ATTR_DEF *ppAttrDefinition,
            DWORD *pdwNumAttributes);
        
        HRESULT ( STDMETHODCALLTYPE *CreateAttributeDefinition )( 
            IDirectorySchemaMgmt * This,
            LPWSTR pszAttributeName,
            PADS_ATTR_DEF pAttributeDefinition);
        
        HRESULT ( STDMETHODCALLTYPE *WriteAttributeDefinition )( 
            IDirectorySchemaMgmt * This,
            LPWSTR pszAttributeName,
            PADS_ATTR_DEF pAttributeDefinition);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteAttributeDefinition )( 
            IDirectorySchemaMgmt * This,
            LPWSTR pszAttributeName);
        
        HRESULT ( STDMETHODCALLTYPE *EnumClasses )( 
            IDirectorySchemaMgmt * This,
            LPWSTR *ppszClassNames,
            DWORD dwNumClasses,
            PADS_CLASS_DEF *ppClassDefinition,
            DWORD *pdwNumClasses);
        
        HRESULT ( STDMETHODCALLTYPE *WriteClassDefinition )( 
            IDirectorySchemaMgmt * This,
            LPWSTR pszClassName,
            PADS_CLASS_DEF pClassDefinition);
        
        HRESULT ( STDMETHODCALLTYPE *CreateClassDefinition )( 
            IDirectorySchemaMgmt * This,
            LPWSTR pszClassName,
            PADS_CLASS_DEF pClassDefinition);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteClassDefinition )( 
            IDirectorySchemaMgmt * This,
            LPWSTR pszClassName);
        
        END_INTERFACE
    } IDirectorySchemaMgmtVtbl;

    interface IDirectorySchemaMgmt
    {
        CONST_VTBL struct IDirectorySchemaMgmtVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDirectorySchemaMgmt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDirectorySchemaMgmt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDirectorySchemaMgmt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDirectorySchemaMgmt_EnumAttributes(This,ppszAttrNames,dwNumAttributes,ppAttrDefinition,pdwNumAttributes)	\
    ( (This)->lpVtbl -> EnumAttributes(This,ppszAttrNames,dwNumAttributes,ppAttrDefinition,pdwNumAttributes) ) 

#define IDirectorySchemaMgmt_CreateAttributeDefinition(This,pszAttributeName,pAttributeDefinition)	\
    ( (This)->lpVtbl -> CreateAttributeDefinition(This,pszAttributeName,pAttributeDefinition) ) 

#define IDirectorySchemaMgmt_WriteAttributeDefinition(This,pszAttributeName,pAttributeDefinition)	\
    ( (This)->lpVtbl -> WriteAttributeDefinition(This,pszAttributeName,pAttributeDefinition) ) 

#define IDirectorySchemaMgmt_DeleteAttributeDefinition(This,pszAttributeName)	\
    ( (This)->lpVtbl -> DeleteAttributeDefinition(This,pszAttributeName) ) 

#define IDirectorySchemaMgmt_EnumClasses(This,ppszClassNames,dwNumClasses,ppClassDefinition,pdwNumClasses)	\
    ( (This)->lpVtbl -> EnumClasses(This,ppszClassNames,dwNumClasses,ppClassDefinition,pdwNumClasses) ) 

#define IDirectorySchemaMgmt_WriteClassDefinition(This,pszClassName,pClassDefinition)	\
    ( (This)->lpVtbl -> WriteClassDefinition(This,pszClassName,pClassDefinition) ) 

#define IDirectorySchemaMgmt_CreateClassDefinition(This,pszClassName,pClassDefinition)	\
    ( (This)->lpVtbl -> CreateClassDefinition(This,pszClassName,pClassDefinition) ) 

#define IDirectorySchemaMgmt_DeleteClassDefinition(This,pszClassName)	\
    ( (This)->lpVtbl -> DeleteClassDefinition(This,pszClassName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDirectorySchemaMgmt_INTERFACE_DEFINED__ */


#ifndef __IADsAggregatee_INTERFACE_DEFINED__
#define __IADsAggregatee_INTERFACE_DEFINED__

/* interface IADsAggregatee */
/* [object][uuid] */ 


EXTERN_C const IID IID_IADsAggregatee;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1346ce8c-9039-11d0-8528-00c04fd8d503")
    IADsAggregatee : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ConnectAsAggregatee( 
            IUnknown *pOuterUnknown) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DisconnectAsAggregatee( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RelinquishInterface( 
            REFIID riid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RestoreInterface( 
            REFIID riid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsAggregateeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsAggregatee * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsAggregatee * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsAggregatee * This);
        
        HRESULT ( STDMETHODCALLTYPE *ConnectAsAggregatee )( 
            IADsAggregatee * This,
            IUnknown *pOuterUnknown);
        
        HRESULT ( STDMETHODCALLTYPE *DisconnectAsAggregatee )( 
            IADsAggregatee * This);
        
        HRESULT ( STDMETHODCALLTYPE *RelinquishInterface )( 
            IADsAggregatee * This,
            REFIID riid);
        
        HRESULT ( STDMETHODCALLTYPE *RestoreInterface )( 
            IADsAggregatee * This,
            REFIID riid);
        
        END_INTERFACE
    } IADsAggregateeVtbl;

    interface IADsAggregatee
    {
        CONST_VTBL struct IADsAggregateeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsAggregatee_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsAggregatee_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsAggregatee_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsAggregatee_ConnectAsAggregatee(This,pOuterUnknown)	\
    ( (This)->lpVtbl -> ConnectAsAggregatee(This,pOuterUnknown) ) 

#define IADsAggregatee_DisconnectAsAggregatee(This)	\
    ( (This)->lpVtbl -> DisconnectAsAggregatee(This) ) 

#define IADsAggregatee_RelinquishInterface(This,riid)	\
    ( (This)->lpVtbl -> RelinquishInterface(This,riid) ) 

#define IADsAggregatee_RestoreInterface(This,riid)	\
    ( (This)->lpVtbl -> RestoreInterface(This,riid) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsAggregatee_INTERFACE_DEFINED__ */


#ifndef __IADsAggregator_INTERFACE_DEFINED__
#define __IADsAggregator_INTERFACE_DEFINED__

/* interface IADsAggregator */
/* [object][uuid] */ 


EXTERN_C const IID IID_IADsAggregator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("52db5fb0-941f-11d0-8529-00c04fd8d503")
    IADsAggregator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ConnectAsAggregator( 
            IUnknown *pAggregatee) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DisconnectAsAggregator( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsAggregatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsAggregator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsAggregator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsAggregator * This);
        
        HRESULT ( STDMETHODCALLTYPE *ConnectAsAggregator )( 
            IADsAggregator * This,
            IUnknown *pAggregatee);
        
        HRESULT ( STDMETHODCALLTYPE *DisconnectAsAggregator )( 
            IADsAggregator * This);
        
        END_INTERFACE
    } IADsAggregatorVtbl;

    interface IADsAggregator
    {
        CONST_VTBL struct IADsAggregatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsAggregator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsAggregator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsAggregator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsAggregator_ConnectAsAggregator(This,pAggregatee)	\
    ( (This)->lpVtbl -> ConnectAsAggregator(This,pAggregatee) ) 

#define IADsAggregator_DisconnectAsAggregator(This)	\
    ( (This)->lpVtbl -> DisconnectAsAggregator(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsAggregator_INTERFACE_DEFINED__ */


#ifndef __IADsAccessControlEntry_INTERFACE_DEFINED__
#define __IADsAccessControlEntry_INTERFACE_DEFINED__

/* interface IADsAccessControlEntry */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsAccessControlEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b4f3a14c-9bdd-11d0-852c-00c04fd8d503")
    IADsAccessControlEntry : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AccessMask( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_AccessMask( 
            /* [in] */ long lnAccessMask) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AceType( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_AceType( 
            /* [in] */ long lnAceType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AceFlags( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_AceFlags( 
            /* [in] */ long lnAceFlags) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Flags( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Flags( 
            /* [in] */ long lnFlags) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ObjectType( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ObjectType( 
            /* [in] */ BSTR bstrObjectType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_InheritedObjectType( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_InheritedObjectType( 
            /* [in] */ BSTR bstrInheritedObjectType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Trustee( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Trustee( 
            /* [in] */ BSTR bstrTrustee) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsAccessControlEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsAccessControlEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsAccessControlEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsAccessControlEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsAccessControlEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsAccessControlEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsAccessControlEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsAccessControlEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AccessMask )( 
            IADsAccessControlEntry * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AccessMask )( 
            IADsAccessControlEntry * This,
            /* [in] */ long lnAccessMask);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AceType )( 
            IADsAccessControlEntry * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AceType )( 
            IADsAccessControlEntry * This,
            /* [in] */ long lnAceType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AceFlags )( 
            IADsAccessControlEntry * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AceFlags )( 
            IADsAccessControlEntry * This,
            /* [in] */ long lnAceFlags);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            IADsAccessControlEntry * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Flags )( 
            IADsAccessControlEntry * This,
            /* [in] */ long lnFlags);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectType )( 
            IADsAccessControlEntry * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectType )( 
            IADsAccessControlEntry * This,
            /* [in] */ BSTR bstrObjectType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InheritedObjectType )( 
            IADsAccessControlEntry * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_InheritedObjectType )( 
            IADsAccessControlEntry * This,
            /* [in] */ BSTR bstrInheritedObjectType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Trustee )( 
            IADsAccessControlEntry * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Trustee )( 
            IADsAccessControlEntry * This,
            /* [in] */ BSTR bstrTrustee);
        
        END_INTERFACE
    } IADsAccessControlEntryVtbl;

    interface IADsAccessControlEntry
    {
        CONST_VTBL struct IADsAccessControlEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsAccessControlEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsAccessControlEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsAccessControlEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsAccessControlEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsAccessControlEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsAccessControlEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsAccessControlEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsAccessControlEntry_get_AccessMask(This,retval)	\
    ( (This)->lpVtbl -> get_AccessMask(This,retval) ) 

#define IADsAccessControlEntry_put_AccessMask(This,lnAccessMask)	\
    ( (This)->lpVtbl -> put_AccessMask(This,lnAccessMask) ) 

#define IADsAccessControlEntry_get_AceType(This,retval)	\
    ( (This)->lpVtbl -> get_AceType(This,retval) ) 

#define IADsAccessControlEntry_put_AceType(This,lnAceType)	\
    ( (This)->lpVtbl -> put_AceType(This,lnAceType) ) 

#define IADsAccessControlEntry_get_AceFlags(This,retval)	\
    ( (This)->lpVtbl -> get_AceFlags(This,retval) ) 

#define IADsAccessControlEntry_put_AceFlags(This,lnAceFlags)	\
    ( (This)->lpVtbl -> put_AceFlags(This,lnAceFlags) ) 

#define IADsAccessControlEntry_get_Flags(This,retval)	\
    ( (This)->lpVtbl -> get_Flags(This,retval) ) 

#define IADsAccessControlEntry_put_Flags(This,lnFlags)	\
    ( (This)->lpVtbl -> put_Flags(This,lnFlags) ) 

#define IADsAccessControlEntry_get_ObjectType(This,retval)	\
    ( (This)->lpVtbl -> get_ObjectType(This,retval) ) 

#define IADsAccessControlEntry_put_ObjectType(This,bstrObjectType)	\
    ( (This)->lpVtbl -> put_ObjectType(This,bstrObjectType) ) 

#define IADsAccessControlEntry_get_InheritedObjectType(This,retval)	\
    ( (This)->lpVtbl -> get_InheritedObjectType(This,retval) ) 

#define IADsAccessControlEntry_put_InheritedObjectType(This,bstrInheritedObjectType)	\
    ( (This)->lpVtbl -> put_InheritedObjectType(This,bstrInheritedObjectType) ) 

#define IADsAccessControlEntry_get_Trustee(This,retval)	\
    ( (This)->lpVtbl -> get_Trustee(This,retval) ) 

#define IADsAccessControlEntry_put_Trustee(This,bstrTrustee)	\
    ( (This)->lpVtbl -> put_Trustee(This,bstrTrustee) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsAccessControlEntry_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_AccessControlEntry;

#ifdef __cplusplus

class DECLSPEC_UUID("b75ac000-9bdd-11d0-852c-00c04fd8d503")
AccessControlEntry;
#endif

#ifndef __IADsAccessControlList_INTERFACE_DEFINED__
#define __IADsAccessControlList_INTERFACE_DEFINED__

/* interface IADsAccessControlList */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsAccessControlList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b7ee91cc-9bdd-11d0-852c-00c04fd8d503")
    IADsAccessControlList : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AclRevision( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_AclRevision( 
            /* [in] */ long lnAclRevision) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AceCount( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_AceCount( 
            /* [in] */ long lnAceCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddAce( 
            /* [in] */ IDispatch *pAccessControlEntry) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveAce( 
            /* [in] */ IDispatch *pAccessControlEntry) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CopyAccessList( 
            /* [retval][out] */ IDispatch **ppAccessControlList) = 0;
        
        virtual /* [id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsAccessControlListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsAccessControlList * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsAccessControlList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsAccessControlList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsAccessControlList * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsAccessControlList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsAccessControlList * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsAccessControlList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AclRevision )( 
            IADsAccessControlList * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AclRevision )( 
            IADsAccessControlList * This,
            /* [in] */ long lnAclRevision);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AceCount )( 
            IADsAccessControlList * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AceCount )( 
            IADsAccessControlList * This,
            /* [in] */ long lnAceCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddAce )( 
            IADsAccessControlList * This,
            /* [in] */ IDispatch *pAccessControlEntry);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAce )( 
            IADsAccessControlList * This,
            /* [in] */ IDispatch *pAccessControlEntry);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CopyAccessList )( 
            IADsAccessControlList * This,
            /* [retval][out] */ IDispatch **ppAccessControlList);
        
        /* [id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IADsAccessControlList * This,
            /* [retval][out] */ IUnknown **retval);
        
        END_INTERFACE
    } IADsAccessControlListVtbl;

    interface IADsAccessControlList
    {
        CONST_VTBL struct IADsAccessControlListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsAccessControlList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsAccessControlList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsAccessControlList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsAccessControlList_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsAccessControlList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsAccessControlList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsAccessControlList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsAccessControlList_get_AclRevision(This,retval)	\
    ( (This)->lpVtbl -> get_AclRevision(This,retval) ) 

#define IADsAccessControlList_put_AclRevision(This,lnAclRevision)	\
    ( (This)->lpVtbl -> put_AclRevision(This,lnAclRevision) ) 

#define IADsAccessControlList_get_AceCount(This,retval)	\
    ( (This)->lpVtbl -> get_AceCount(This,retval) ) 

#define IADsAccessControlList_put_AceCount(This,lnAceCount)	\
    ( (This)->lpVtbl -> put_AceCount(This,lnAceCount) ) 

#define IADsAccessControlList_AddAce(This,pAccessControlEntry)	\
    ( (This)->lpVtbl -> AddAce(This,pAccessControlEntry) ) 

#define IADsAccessControlList_RemoveAce(This,pAccessControlEntry)	\
    ( (This)->lpVtbl -> RemoveAce(This,pAccessControlEntry) ) 

#define IADsAccessControlList_CopyAccessList(This,ppAccessControlList)	\
    ( (This)->lpVtbl -> CopyAccessList(This,ppAccessControlList) ) 

#define IADsAccessControlList_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsAccessControlList_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_AccessControlList;

#ifdef __cplusplus

class DECLSPEC_UUID("b85ea052-9bdd-11d0-852c-00c04fd8d503")
AccessControlList;
#endif

#ifndef __IADsSecurityDescriptor_INTERFACE_DEFINED__
#define __IADsSecurityDescriptor_INTERFACE_DEFINED__

/* interface IADsSecurityDescriptor */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsSecurityDescriptor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b8c787ca-9bdd-11d0-852c-00c04fd8d503")
    IADsSecurityDescriptor : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Revision( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Revision( 
            /* [in] */ long lnRevision) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Control( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Control( 
            /* [in] */ long lnControl) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Owner( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Owner( 
            /* [in] */ BSTR bstrOwner) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_OwnerDefaulted( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_OwnerDefaulted( 
            /* [in] */ VARIANT_BOOL fOwnerDefaulted) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Group( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Group( 
            /* [in] */ BSTR bstrGroup) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_GroupDefaulted( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_GroupDefaulted( 
            /* [in] */ VARIANT_BOOL fGroupDefaulted) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DiscretionaryAcl( 
            /* [retval][out] */ IDispatch **retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_DiscretionaryAcl( 
            /* [in] */ IDispatch *pDiscretionaryAcl) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DaclDefaulted( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_DaclDefaulted( 
            /* [in] */ VARIANT_BOOL fDaclDefaulted) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SystemAcl( 
            /* [retval][out] */ IDispatch **retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SystemAcl( 
            /* [in] */ IDispatch *pSystemAcl) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SaclDefaulted( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SaclDefaulted( 
            /* [in] */ VARIANT_BOOL fSaclDefaulted) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CopySecurityDescriptor( 
            /* [retval][out] */ IDispatch **ppSecurityDescriptor) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsSecurityDescriptorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsSecurityDescriptor * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsSecurityDescriptor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsSecurityDescriptor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsSecurityDescriptor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsSecurityDescriptor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsSecurityDescriptor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsSecurityDescriptor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Revision )( 
            IADsSecurityDescriptor * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Revision )( 
            IADsSecurityDescriptor * This,
            /* [in] */ long lnRevision);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Control )( 
            IADsSecurityDescriptor * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Control )( 
            IADsSecurityDescriptor * This,
            /* [in] */ long lnControl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Owner )( 
            IADsSecurityDescriptor * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Owner )( 
            IADsSecurityDescriptor * This,
            /* [in] */ BSTR bstrOwner);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerDefaulted )( 
            IADsSecurityDescriptor * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OwnerDefaulted )( 
            IADsSecurityDescriptor * This,
            /* [in] */ VARIANT_BOOL fOwnerDefaulted);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            IADsSecurityDescriptor * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            IADsSecurityDescriptor * This,
            /* [in] */ BSTR bstrGroup);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GroupDefaulted )( 
            IADsSecurityDescriptor * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GroupDefaulted )( 
            IADsSecurityDescriptor * This,
            /* [in] */ VARIANT_BOOL fGroupDefaulted);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiscretionaryAcl )( 
            IADsSecurityDescriptor * This,
            /* [retval][out] */ IDispatch **retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DiscretionaryAcl )( 
            IADsSecurityDescriptor * This,
            /* [in] */ IDispatch *pDiscretionaryAcl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DaclDefaulted )( 
            IADsSecurityDescriptor * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DaclDefaulted )( 
            IADsSecurityDescriptor * This,
            /* [in] */ VARIANT_BOOL fDaclDefaulted);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SystemAcl )( 
            IADsSecurityDescriptor * This,
            /* [retval][out] */ IDispatch **retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SystemAcl )( 
            IADsSecurityDescriptor * This,
            /* [in] */ IDispatch *pSystemAcl);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SaclDefaulted )( 
            IADsSecurityDescriptor * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SaclDefaulted )( 
            IADsSecurityDescriptor * This,
            /* [in] */ VARIANT_BOOL fSaclDefaulted);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CopySecurityDescriptor )( 
            IADsSecurityDescriptor * This,
            /* [retval][out] */ IDispatch **ppSecurityDescriptor);
        
        END_INTERFACE
    } IADsSecurityDescriptorVtbl;

    interface IADsSecurityDescriptor
    {
        CONST_VTBL struct IADsSecurityDescriptorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsSecurityDescriptor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsSecurityDescriptor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsSecurityDescriptor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsSecurityDescriptor_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsSecurityDescriptor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsSecurityDescriptor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsSecurityDescriptor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsSecurityDescriptor_get_Revision(This,retval)	\
    ( (This)->lpVtbl -> get_Revision(This,retval) ) 

#define IADsSecurityDescriptor_put_Revision(This,lnRevision)	\
    ( (This)->lpVtbl -> put_Revision(This,lnRevision) ) 

#define IADsSecurityDescriptor_get_Control(This,retval)	\
    ( (This)->lpVtbl -> get_Control(This,retval) ) 

#define IADsSecurityDescriptor_put_Control(This,lnControl)	\
    ( (This)->lpVtbl -> put_Control(This,lnControl) ) 

#define IADsSecurityDescriptor_get_Owner(This,retval)	\
    ( (This)->lpVtbl -> get_Owner(This,retval) ) 

#define IADsSecurityDescriptor_put_Owner(This,bstrOwner)	\
    ( (This)->lpVtbl -> put_Owner(This,bstrOwner) ) 

#define IADsSecurityDescriptor_get_OwnerDefaulted(This,retval)	\
    ( (This)->lpVtbl -> get_OwnerDefaulted(This,retval) ) 

#define IADsSecurityDescriptor_put_OwnerDefaulted(This,fOwnerDefaulted)	\
    ( (This)->lpVtbl -> put_OwnerDefaulted(This,fOwnerDefaulted) ) 

#define IADsSecurityDescriptor_get_Group(This,retval)	\
    ( (This)->lpVtbl -> get_Group(This,retval) ) 

#define IADsSecurityDescriptor_put_Group(This,bstrGroup)	\
    ( (This)->lpVtbl -> put_Group(This,bstrGroup) ) 

#define IADsSecurityDescriptor_get_GroupDefaulted(This,retval)	\
    ( (This)->lpVtbl -> get_GroupDefaulted(This,retval) ) 

#define IADsSecurityDescriptor_put_GroupDefaulted(This,fGroupDefaulted)	\
    ( (This)->lpVtbl -> put_GroupDefaulted(This,fGroupDefaulted) ) 

#define IADsSecurityDescriptor_get_DiscretionaryAcl(This,retval)	\
    ( (This)->lpVtbl -> get_DiscretionaryAcl(This,retval) ) 

#define IADsSecurityDescriptor_put_DiscretionaryAcl(This,pDiscretionaryAcl)	\
    ( (This)->lpVtbl -> put_DiscretionaryAcl(This,pDiscretionaryAcl) ) 

#define IADsSecurityDescriptor_get_DaclDefaulted(This,retval)	\
    ( (This)->lpVtbl -> get_DaclDefaulted(This,retval) ) 

#define IADsSecurityDescriptor_put_DaclDefaulted(This,fDaclDefaulted)	\
    ( (This)->lpVtbl -> put_DaclDefaulted(This,fDaclDefaulted) ) 

#define IADsSecurityDescriptor_get_SystemAcl(This,retval)	\
    ( (This)->lpVtbl -> get_SystemAcl(This,retval) ) 

#define IADsSecurityDescriptor_put_SystemAcl(This,pSystemAcl)	\
    ( (This)->lpVtbl -> put_SystemAcl(This,pSystemAcl) ) 

#define IADsSecurityDescriptor_get_SaclDefaulted(This,retval)	\
    ( (This)->lpVtbl -> get_SaclDefaulted(This,retval) ) 

#define IADsSecurityDescriptor_put_SaclDefaulted(This,fSaclDefaulted)	\
    ( (This)->lpVtbl -> put_SaclDefaulted(This,fSaclDefaulted) ) 

#define IADsSecurityDescriptor_CopySecurityDescriptor(This,ppSecurityDescriptor)	\
    ( (This)->lpVtbl -> CopySecurityDescriptor(This,ppSecurityDescriptor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsSecurityDescriptor_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_SecurityDescriptor;

#ifdef __cplusplus

class DECLSPEC_UUID("b958f73c-9bdd-11d0-852c-00c04fd8d503")
SecurityDescriptor;
#endif

#ifndef __IADsLargeInteger_INTERFACE_DEFINED__
#define __IADsLargeInteger_INTERFACE_DEFINED__

/* interface IADsLargeInteger */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsLargeInteger;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9068270b-0939-11d1-8be1-00c04fd8d503")
    IADsLargeInteger : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HighPart( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_HighPart( 
            /* [in] */ long lnHighPart) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_LowPart( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_LowPart( 
            /* [in] */ long lnLowPart) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsLargeIntegerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsLargeInteger * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsLargeInteger * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsLargeInteger * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsLargeInteger * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsLargeInteger * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsLargeInteger * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsLargeInteger * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HighPart )( 
            IADsLargeInteger * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HighPart )( 
            IADsLargeInteger * This,
            /* [in] */ long lnHighPart);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LowPart )( 
            IADsLargeInteger * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LowPart )( 
            IADsLargeInteger * This,
            /* [in] */ long lnLowPart);
        
        END_INTERFACE
    } IADsLargeIntegerVtbl;

    interface IADsLargeInteger
    {
        CONST_VTBL struct IADsLargeIntegerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsLargeInteger_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsLargeInteger_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsLargeInteger_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsLargeInteger_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsLargeInteger_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsLargeInteger_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsLargeInteger_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsLargeInteger_get_HighPart(This,retval)	\
    ( (This)->lpVtbl -> get_HighPart(This,retval) ) 

#define IADsLargeInteger_put_HighPart(This,lnHighPart)	\
    ( (This)->lpVtbl -> put_HighPart(This,lnHighPart) ) 

#define IADsLargeInteger_get_LowPart(This,retval)	\
    ( (This)->lpVtbl -> get_LowPart(This,retval) ) 

#define IADsLargeInteger_put_LowPart(This,lnLowPart)	\
    ( (This)->lpVtbl -> put_LowPart(This,lnLowPart) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsLargeInteger_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_LargeInteger;

#ifdef __cplusplus

class DECLSPEC_UUID("927971f5-0939-11d1-8be1-00c04fd8d503")
LargeInteger;
#endif

#ifndef __IADsNameTranslate_INTERFACE_DEFINED__
#define __IADsNameTranslate_INTERFACE_DEFINED__

/* interface IADsNameTranslate */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsNameTranslate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b1b272a3-3625-11d1-a3a4-00c04fb950dc")
    IADsNameTranslate : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ChaseReferral( 
            /* [in] */ long lnChaseReferral) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Init( 
            /* [in] */ long lnSetType,
            /* [in] */ BSTR bstrADsPath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE InitEx( 
            /* [in] */ long lnSetType,
            /* [in] */ BSTR bstrADsPath,
            /* [in] */ BSTR bstrUserID,
            /* [in] */ BSTR bstrDomain,
            /* [in] */ BSTR bstrPassword) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Set( 
            /* [in] */ long lnSetType,
            /* [in] */ BSTR bstrADsPath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Get( 
            /* [in] */ long lnFormatType,
            /* [retval][out] */ BSTR *pbstrADsPath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetEx( 
            /* [in] */ long lnFormatType,
            /* [in] */ VARIANT pvar) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetEx( 
            /* [in] */ long lnFormatType,
            /* [retval][out] */ VARIANT *pvar) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsNameTranslateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsNameTranslate * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsNameTranslate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsNameTranslate * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsNameTranslate * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsNameTranslate * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsNameTranslate * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsNameTranslate * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChaseReferral )( 
            IADsNameTranslate * This,
            /* [in] */ long lnChaseReferral);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Init )( 
            IADsNameTranslate * This,
            /* [in] */ long lnSetType,
            /* [in] */ BSTR bstrADsPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *InitEx )( 
            IADsNameTranslate * This,
            /* [in] */ long lnSetType,
            /* [in] */ BSTR bstrADsPath,
            /* [in] */ BSTR bstrUserID,
            /* [in] */ BSTR bstrDomain,
            /* [in] */ BSTR bstrPassword);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Set )( 
            IADsNameTranslate * This,
            /* [in] */ long lnSetType,
            /* [in] */ BSTR bstrADsPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IADsNameTranslate * This,
            /* [in] */ long lnFormatType,
            /* [retval][out] */ BSTR *pbstrADsPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetEx )( 
            IADsNameTranslate * This,
            /* [in] */ long lnFormatType,
            /* [in] */ VARIANT pvar);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IADsNameTranslate * This,
            /* [in] */ long lnFormatType,
            /* [retval][out] */ VARIANT *pvar);
        
        END_INTERFACE
    } IADsNameTranslateVtbl;

    interface IADsNameTranslate
    {
        CONST_VTBL struct IADsNameTranslateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsNameTranslate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsNameTranslate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsNameTranslate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsNameTranslate_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsNameTranslate_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsNameTranslate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsNameTranslate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsNameTranslate_put_ChaseReferral(This,lnChaseReferral)	\
    ( (This)->lpVtbl -> put_ChaseReferral(This,lnChaseReferral) ) 

#define IADsNameTranslate_Init(This,lnSetType,bstrADsPath)	\
    ( (This)->lpVtbl -> Init(This,lnSetType,bstrADsPath) ) 

#define IADsNameTranslate_InitEx(This,lnSetType,bstrADsPath,bstrUserID,bstrDomain,bstrPassword)	\
    ( (This)->lpVtbl -> InitEx(This,lnSetType,bstrADsPath,bstrUserID,bstrDomain,bstrPassword) ) 

#define IADsNameTranslate_Set(This,lnSetType,bstrADsPath)	\
    ( (This)->lpVtbl -> Set(This,lnSetType,bstrADsPath) ) 

#define IADsNameTranslate_Get(This,lnFormatType,pbstrADsPath)	\
    ( (This)->lpVtbl -> Get(This,lnFormatType,pbstrADsPath) ) 

#define IADsNameTranslate_SetEx(This,lnFormatType,pvar)	\
    ( (This)->lpVtbl -> SetEx(This,lnFormatType,pvar) ) 

#define IADsNameTranslate_GetEx(This,lnFormatType,pvar)	\
    ( (This)->lpVtbl -> GetEx(This,lnFormatType,pvar) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsNameTranslate_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_NameTranslate;

#ifdef __cplusplus

class DECLSPEC_UUID("274fae1f-3626-11d1-a3a4-00c04fb950dc")
NameTranslate;
#endif

#ifndef __IADsCaseIgnoreList_INTERFACE_DEFINED__
#define __IADsCaseIgnoreList_INTERFACE_DEFINED__

/* interface IADsCaseIgnoreList */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsCaseIgnoreList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7b66b533-4680-11d1-a3b4-00c04fb950dc")
    IADsCaseIgnoreList : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_CaseIgnoreList( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_CaseIgnoreList( 
            /* [in] */ VARIANT vCaseIgnoreList) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsCaseIgnoreListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsCaseIgnoreList * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsCaseIgnoreList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsCaseIgnoreList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsCaseIgnoreList * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsCaseIgnoreList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsCaseIgnoreList * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsCaseIgnoreList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CaseIgnoreList )( 
            IADsCaseIgnoreList * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CaseIgnoreList )( 
            IADsCaseIgnoreList * This,
            /* [in] */ VARIANT vCaseIgnoreList);
        
        END_INTERFACE
    } IADsCaseIgnoreListVtbl;

    interface IADsCaseIgnoreList
    {
        CONST_VTBL struct IADsCaseIgnoreListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsCaseIgnoreList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsCaseIgnoreList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsCaseIgnoreList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsCaseIgnoreList_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsCaseIgnoreList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsCaseIgnoreList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsCaseIgnoreList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsCaseIgnoreList_get_CaseIgnoreList(This,retval)	\
    ( (This)->lpVtbl -> get_CaseIgnoreList(This,retval) ) 

#define IADsCaseIgnoreList_put_CaseIgnoreList(This,vCaseIgnoreList)	\
    ( (This)->lpVtbl -> put_CaseIgnoreList(This,vCaseIgnoreList) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsCaseIgnoreList_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_CaseIgnoreList;

#ifdef __cplusplus

class DECLSPEC_UUID("15f88a55-4680-11d1-a3b4-00c04fb950dc")
CaseIgnoreList;
#endif

#ifndef __IADsFaxNumber_INTERFACE_DEFINED__
#define __IADsFaxNumber_INTERFACE_DEFINED__

/* interface IADsFaxNumber */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsFaxNumber;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a910dea9-4680-11d1-a3b4-00c04fb950dc")
    IADsFaxNumber : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_TelephoneNumber( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_TelephoneNumber( 
            /* [in] */ BSTR bstrTelephoneNumber) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Parameters( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Parameters( 
            /* [in] */ VARIANT vParameters) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsFaxNumberVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsFaxNumber * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsFaxNumber * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsFaxNumber * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsFaxNumber * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsFaxNumber * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsFaxNumber * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsFaxNumber * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TelephoneNumber )( 
            IADsFaxNumber * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TelephoneNumber )( 
            IADsFaxNumber * This,
            /* [in] */ BSTR bstrTelephoneNumber);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parameters )( 
            IADsFaxNumber * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Parameters )( 
            IADsFaxNumber * This,
            /* [in] */ VARIANT vParameters);
        
        END_INTERFACE
    } IADsFaxNumberVtbl;

    interface IADsFaxNumber
    {
        CONST_VTBL struct IADsFaxNumberVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsFaxNumber_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsFaxNumber_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsFaxNumber_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsFaxNumber_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsFaxNumber_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsFaxNumber_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsFaxNumber_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsFaxNumber_get_TelephoneNumber(This,retval)	\
    ( (This)->lpVtbl -> get_TelephoneNumber(This,retval) ) 

#define IADsFaxNumber_put_TelephoneNumber(This,bstrTelephoneNumber)	\
    ( (This)->lpVtbl -> put_TelephoneNumber(This,bstrTelephoneNumber) ) 

#define IADsFaxNumber_get_Parameters(This,retval)	\
    ( (This)->lpVtbl -> get_Parameters(This,retval) ) 

#define IADsFaxNumber_put_Parameters(This,vParameters)	\
    ( (This)->lpVtbl -> put_Parameters(This,vParameters) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsFaxNumber_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_FaxNumber;

#ifdef __cplusplus

class DECLSPEC_UUID("a5062215-4681-11d1-a3b4-00c04fb950dc")
FaxNumber;
#endif

#ifndef __IADsNetAddress_INTERFACE_DEFINED__
#define __IADsNetAddress_INTERFACE_DEFINED__

/* interface IADsNetAddress */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsNetAddress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b21a50a9-4080-11d1-a3ac-00c04fb950dc")
    IADsNetAddress : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AddressType( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_AddressType( 
            /* [in] */ long lnAddressType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Address( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Address( 
            /* [in] */ VARIANT vAddress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsNetAddressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsNetAddress * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsNetAddress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsNetAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsNetAddress * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsNetAddress * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsNetAddress * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsNetAddress * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AddressType )( 
            IADsNetAddress * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AddressType )( 
            IADsNetAddress * This,
            /* [in] */ long lnAddressType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Address )( 
            IADsNetAddress * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Address )( 
            IADsNetAddress * This,
            /* [in] */ VARIANT vAddress);
        
        END_INTERFACE
    } IADsNetAddressVtbl;

    interface IADsNetAddress
    {
        CONST_VTBL struct IADsNetAddressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsNetAddress_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsNetAddress_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsNetAddress_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsNetAddress_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsNetAddress_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsNetAddress_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsNetAddress_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsNetAddress_get_AddressType(This,retval)	\
    ( (This)->lpVtbl -> get_AddressType(This,retval) ) 

#define IADsNetAddress_put_AddressType(This,lnAddressType)	\
    ( (This)->lpVtbl -> put_AddressType(This,lnAddressType) ) 

#define IADsNetAddress_get_Address(This,retval)	\
    ( (This)->lpVtbl -> get_Address(This,retval) ) 

#define IADsNetAddress_put_Address(This,vAddress)	\
    ( (This)->lpVtbl -> put_Address(This,vAddress) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsNetAddress_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_NetAddress;

#ifdef __cplusplus

class DECLSPEC_UUID("b0b71247-4080-11d1-a3ac-00c04fb950dc")
NetAddress;
#endif

#ifndef __IADsOctetList_INTERFACE_DEFINED__
#define __IADsOctetList_INTERFACE_DEFINED__

/* interface IADsOctetList */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsOctetList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7b28b80f-4680-11d1-a3b4-00c04fb950dc")
    IADsOctetList : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_OctetList( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_OctetList( 
            /* [in] */ VARIANT vOctetList) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsOctetListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsOctetList * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsOctetList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsOctetList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsOctetList * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsOctetList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsOctetList * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsOctetList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OctetList )( 
            IADsOctetList * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OctetList )( 
            IADsOctetList * This,
            /* [in] */ VARIANT vOctetList);
        
        END_INTERFACE
    } IADsOctetListVtbl;

    interface IADsOctetList
    {
        CONST_VTBL struct IADsOctetListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsOctetList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsOctetList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsOctetList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsOctetList_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsOctetList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsOctetList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsOctetList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsOctetList_get_OctetList(This,retval)	\
    ( (This)->lpVtbl -> get_OctetList(This,retval) ) 

#define IADsOctetList_put_OctetList(This,vOctetList)	\
    ( (This)->lpVtbl -> put_OctetList(This,vOctetList) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsOctetList_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_OctetList;

#ifdef __cplusplus

class DECLSPEC_UUID("1241400f-4680-11d1-a3b4-00c04fb950dc")
OctetList;
#endif

#ifndef __IADsEmail_INTERFACE_DEFINED__
#define __IADsEmail_INTERFACE_DEFINED__

/* interface IADsEmail */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsEmail;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("97af011a-478e-11d1-a3b4-00c04fb950dc")
    IADsEmail : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ long lnType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Address( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Address( 
            /* [in] */ BSTR bstrAddress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsEmailVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsEmail * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsEmail * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsEmail * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsEmail * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsEmail * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsEmail * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsEmail * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IADsEmail * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            IADsEmail * This,
            /* [in] */ long lnType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Address )( 
            IADsEmail * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Address )( 
            IADsEmail * This,
            /* [in] */ BSTR bstrAddress);
        
        END_INTERFACE
    } IADsEmailVtbl;

    interface IADsEmail
    {
        CONST_VTBL struct IADsEmailVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsEmail_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsEmail_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsEmail_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsEmail_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsEmail_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsEmail_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsEmail_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsEmail_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define IADsEmail_put_Type(This,lnType)	\
    ( (This)->lpVtbl -> put_Type(This,lnType) ) 

#define IADsEmail_get_Address(This,retval)	\
    ( (This)->lpVtbl -> get_Address(This,retval) ) 

#define IADsEmail_put_Address(This,bstrAddress)	\
    ( (This)->lpVtbl -> put_Address(This,bstrAddress) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsEmail_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Email;

#ifdef __cplusplus

class DECLSPEC_UUID("8f92a857-478e-11d1-a3b4-00c04fb950dc")
Email;
#endif

#ifndef __IADsPath_INTERFACE_DEFINED__
#define __IADsPath_INTERFACE_DEFINED__

/* interface IADsPath */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsPath;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b287fcd5-4080-11d1-a3ac-00c04fb950dc")
    IADsPath : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ long lnType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_VolumeName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_VolumeName( 
            /* [in] */ BSTR bstrVolumeName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Path( 
            /* [in] */ BSTR bstrPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsPathVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsPath * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsPath * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsPath * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsPath * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsPath * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsPath * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsPath * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IADsPath * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            IADsPath * This,
            /* [in] */ long lnType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VolumeName )( 
            IADsPath * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_VolumeName )( 
            IADsPath * This,
            /* [in] */ BSTR bstrVolumeName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IADsPath * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IADsPath * This,
            /* [in] */ BSTR bstrPath);
        
        END_INTERFACE
    } IADsPathVtbl;

    interface IADsPath
    {
        CONST_VTBL struct IADsPathVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsPath_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsPath_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsPath_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsPath_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsPath_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsPath_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsPath_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsPath_get_Type(This,retval)	\
    ( (This)->lpVtbl -> get_Type(This,retval) ) 

#define IADsPath_put_Type(This,lnType)	\
    ( (This)->lpVtbl -> put_Type(This,lnType) ) 

#define IADsPath_get_VolumeName(This,retval)	\
    ( (This)->lpVtbl -> get_VolumeName(This,retval) ) 

#define IADsPath_put_VolumeName(This,bstrVolumeName)	\
    ( (This)->lpVtbl -> put_VolumeName(This,bstrVolumeName) ) 

#define IADsPath_get_Path(This,retval)	\
    ( (This)->lpVtbl -> get_Path(This,retval) ) 

#define IADsPath_put_Path(This,bstrPath)	\
    ( (This)->lpVtbl -> put_Path(This,bstrPath) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsPath_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Path;

#ifdef __cplusplus

class DECLSPEC_UUID("b2538919-4080-11d1-a3ac-00c04fb950dc")
Path;
#endif

#ifndef __IADsReplicaPointer_INTERFACE_DEFINED__
#define __IADsReplicaPointer_INTERFACE_DEFINED__

/* interface IADsReplicaPointer */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsReplicaPointer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f60fb803-4080-11d1-a3ac-00c04fb950dc")
    IADsReplicaPointer : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ServerName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ServerName( 
            /* [in] */ BSTR bstrServerName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ReplicaType( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ReplicaType( 
            /* [in] */ long lnReplicaType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ReplicaNumber( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ReplicaNumber( 
            /* [in] */ long lnReplicaNumber) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Count( 
            /* [in] */ long lnCount) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ReplicaAddressHints( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ReplicaAddressHints( 
            /* [in] */ VARIANT vReplicaAddressHints) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsReplicaPointerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsReplicaPointer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsReplicaPointer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsReplicaPointer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsReplicaPointer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsReplicaPointer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsReplicaPointer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsReplicaPointer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ServerName )( 
            IADsReplicaPointer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ServerName )( 
            IADsReplicaPointer * This,
            /* [in] */ BSTR bstrServerName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReplicaType )( 
            IADsReplicaPointer * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReplicaType )( 
            IADsReplicaPointer * This,
            /* [in] */ long lnReplicaType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReplicaNumber )( 
            IADsReplicaPointer * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReplicaNumber )( 
            IADsReplicaPointer * This,
            /* [in] */ long lnReplicaNumber);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IADsReplicaPointer * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Count )( 
            IADsReplicaPointer * This,
            /* [in] */ long lnCount);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReplicaAddressHints )( 
            IADsReplicaPointer * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReplicaAddressHints )( 
            IADsReplicaPointer * This,
            /* [in] */ VARIANT vReplicaAddressHints);
        
        END_INTERFACE
    } IADsReplicaPointerVtbl;

    interface IADsReplicaPointer
    {
        CONST_VTBL struct IADsReplicaPointerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsReplicaPointer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsReplicaPointer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsReplicaPointer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsReplicaPointer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsReplicaPointer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsReplicaPointer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsReplicaPointer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsReplicaPointer_get_ServerName(This,retval)	\
    ( (This)->lpVtbl -> get_ServerName(This,retval) ) 

#define IADsReplicaPointer_put_ServerName(This,bstrServerName)	\
    ( (This)->lpVtbl -> put_ServerName(This,bstrServerName) ) 

#define IADsReplicaPointer_get_ReplicaType(This,retval)	\
    ( (This)->lpVtbl -> get_ReplicaType(This,retval) ) 

#define IADsReplicaPointer_put_ReplicaType(This,lnReplicaType)	\
    ( (This)->lpVtbl -> put_ReplicaType(This,lnReplicaType) ) 

#define IADsReplicaPointer_get_ReplicaNumber(This,retval)	\
    ( (This)->lpVtbl -> get_ReplicaNumber(This,retval) ) 

#define IADsReplicaPointer_put_ReplicaNumber(This,lnReplicaNumber)	\
    ( (This)->lpVtbl -> put_ReplicaNumber(This,lnReplicaNumber) ) 

#define IADsReplicaPointer_get_Count(This,retval)	\
    ( (This)->lpVtbl -> get_Count(This,retval) ) 

#define IADsReplicaPointer_put_Count(This,lnCount)	\
    ( (This)->lpVtbl -> put_Count(This,lnCount) ) 

#define IADsReplicaPointer_get_ReplicaAddressHints(This,retval)	\
    ( (This)->lpVtbl -> get_ReplicaAddressHints(This,retval) ) 

#define IADsReplicaPointer_put_ReplicaAddressHints(This,vReplicaAddressHints)	\
    ( (This)->lpVtbl -> put_ReplicaAddressHints(This,vReplicaAddressHints) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsReplicaPointer_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ReplicaPointer;

#ifdef __cplusplus

class DECLSPEC_UUID("f5d1badf-4080-11d1-a3ac-00c04fb950dc")
ReplicaPointer;
#endif

#ifndef __IADsAcl_INTERFACE_DEFINED__
#define __IADsAcl_INTERFACE_DEFINED__

/* interface IADsAcl */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsAcl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8452d3ab-0869-11d1-a377-00c04fb950dc")
    IADsAcl : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ProtectedAttrName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ProtectedAttrName( 
            /* [in] */ BSTR bstrProtectedAttrName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SubjectName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SubjectName( 
            /* [in] */ BSTR bstrSubjectName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Privileges( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Privileges( 
            /* [in] */ long lnPrivileges) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CopyAcl( 
            /* [retval][out] */ IDispatch **ppAcl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsAclVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsAcl * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsAcl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsAcl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsAcl * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsAcl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsAcl * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsAcl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProtectedAttrName )( 
            IADsAcl * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProtectedAttrName )( 
            IADsAcl * This,
            /* [in] */ BSTR bstrProtectedAttrName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SubjectName )( 
            IADsAcl * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SubjectName )( 
            IADsAcl * This,
            /* [in] */ BSTR bstrSubjectName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Privileges )( 
            IADsAcl * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Privileges )( 
            IADsAcl * This,
            /* [in] */ long lnPrivileges);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CopyAcl )( 
            IADsAcl * This,
            /* [retval][out] */ IDispatch **ppAcl);
        
        END_INTERFACE
    } IADsAclVtbl;

    interface IADsAcl
    {
        CONST_VTBL struct IADsAclVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsAcl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsAcl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsAcl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsAcl_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsAcl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsAcl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsAcl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsAcl_get_ProtectedAttrName(This,retval)	\
    ( (This)->lpVtbl -> get_ProtectedAttrName(This,retval) ) 

#define IADsAcl_put_ProtectedAttrName(This,bstrProtectedAttrName)	\
    ( (This)->lpVtbl -> put_ProtectedAttrName(This,bstrProtectedAttrName) ) 

#define IADsAcl_get_SubjectName(This,retval)	\
    ( (This)->lpVtbl -> get_SubjectName(This,retval) ) 

#define IADsAcl_put_SubjectName(This,bstrSubjectName)	\
    ( (This)->lpVtbl -> put_SubjectName(This,bstrSubjectName) ) 

#define IADsAcl_get_Privileges(This,retval)	\
    ( (This)->lpVtbl -> get_Privileges(This,retval) ) 

#define IADsAcl_put_Privileges(This,lnPrivileges)	\
    ( (This)->lpVtbl -> put_Privileges(This,lnPrivileges) ) 

#define IADsAcl_CopyAcl(This,ppAcl)	\
    ( (This)->lpVtbl -> CopyAcl(This,ppAcl) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsAcl_INTERFACE_DEFINED__ */


#ifndef __IADsTimestamp_INTERFACE_DEFINED__
#define __IADsTimestamp_INTERFACE_DEFINED__

/* interface IADsTimestamp */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsTimestamp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b2f5a901-4080-11d1-a3ac-00c04fb950dc")
    IADsTimestamp : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_WholeSeconds( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_WholeSeconds( 
            /* [in] */ long lnWholeSeconds) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_EventID( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_EventID( 
            /* [in] */ long lnEventID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsTimestampVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsTimestamp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsTimestamp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsTimestamp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsTimestamp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsTimestamp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsTimestamp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsTimestamp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WholeSeconds )( 
            IADsTimestamp * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WholeSeconds )( 
            IADsTimestamp * This,
            /* [in] */ long lnWholeSeconds);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventID )( 
            IADsTimestamp * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EventID )( 
            IADsTimestamp * This,
            /* [in] */ long lnEventID);
        
        END_INTERFACE
    } IADsTimestampVtbl;

    interface IADsTimestamp
    {
        CONST_VTBL struct IADsTimestampVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsTimestamp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsTimestamp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsTimestamp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsTimestamp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsTimestamp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsTimestamp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsTimestamp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsTimestamp_get_WholeSeconds(This,retval)	\
    ( (This)->lpVtbl -> get_WholeSeconds(This,retval) ) 

#define IADsTimestamp_put_WholeSeconds(This,lnWholeSeconds)	\
    ( (This)->lpVtbl -> put_WholeSeconds(This,lnWholeSeconds) ) 

#define IADsTimestamp_get_EventID(This,retval)	\
    ( (This)->lpVtbl -> get_EventID(This,retval) ) 

#define IADsTimestamp_put_EventID(This,lnEventID)	\
    ( (This)->lpVtbl -> put_EventID(This,lnEventID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsTimestamp_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Timestamp;

#ifdef __cplusplus

class DECLSPEC_UUID("b2bed2eb-4080-11d1-a3ac-00c04fb950dc")
Timestamp;
#endif

#ifndef __IADsPostalAddress_INTERFACE_DEFINED__
#define __IADsPostalAddress_INTERFACE_DEFINED__

/* interface IADsPostalAddress */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsPostalAddress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7adecf29-4680-11d1-a3b4-00c04fb950dc")
    IADsPostalAddress : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PostalAddress( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_PostalAddress( 
            /* [in] */ VARIANT vPostalAddress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsPostalAddressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsPostalAddress * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsPostalAddress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsPostalAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsPostalAddress * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsPostalAddress * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsPostalAddress * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsPostalAddress * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PostalAddress )( 
            IADsPostalAddress * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PostalAddress )( 
            IADsPostalAddress * This,
            /* [in] */ VARIANT vPostalAddress);
        
        END_INTERFACE
    } IADsPostalAddressVtbl;

    interface IADsPostalAddress
    {
        CONST_VTBL struct IADsPostalAddressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsPostalAddress_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsPostalAddress_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsPostalAddress_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsPostalAddress_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsPostalAddress_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsPostalAddress_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsPostalAddress_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsPostalAddress_get_PostalAddress(This,retval)	\
    ( (This)->lpVtbl -> get_PostalAddress(This,retval) ) 

#define IADsPostalAddress_put_PostalAddress(This,vPostalAddress)	\
    ( (This)->lpVtbl -> put_PostalAddress(This,vPostalAddress) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsPostalAddress_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PostalAddress;

#ifdef __cplusplus

class DECLSPEC_UUID("0a75afcd-4680-11d1-a3b4-00c04fb950dc")
PostalAddress;
#endif

#ifndef __IADsBackLink_INTERFACE_DEFINED__
#define __IADsBackLink_INTERFACE_DEFINED__

/* interface IADsBackLink */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsBackLink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fd1302bd-4080-11d1-a3ac-00c04fb950dc")
    IADsBackLink : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_RemoteID( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_RemoteID( 
            /* [in] */ long lnRemoteID) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ObjectName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ObjectName( 
            /* [in] */ BSTR bstrObjectName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsBackLinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsBackLink * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsBackLink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsBackLink * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsBackLink * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsBackLink * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsBackLink * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsBackLink * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RemoteID )( 
            IADsBackLink * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RemoteID )( 
            IADsBackLink * This,
            /* [in] */ long lnRemoteID);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IADsBackLink * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectName )( 
            IADsBackLink * This,
            /* [in] */ BSTR bstrObjectName);
        
        END_INTERFACE
    } IADsBackLinkVtbl;

    interface IADsBackLink
    {
        CONST_VTBL struct IADsBackLinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsBackLink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsBackLink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsBackLink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsBackLink_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsBackLink_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsBackLink_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsBackLink_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsBackLink_get_RemoteID(This,retval)	\
    ( (This)->lpVtbl -> get_RemoteID(This,retval) ) 

#define IADsBackLink_put_RemoteID(This,lnRemoteID)	\
    ( (This)->lpVtbl -> put_RemoteID(This,lnRemoteID) ) 

#define IADsBackLink_get_ObjectName(This,retval)	\
    ( (This)->lpVtbl -> get_ObjectName(This,retval) ) 

#define IADsBackLink_put_ObjectName(This,bstrObjectName)	\
    ( (This)->lpVtbl -> put_ObjectName(This,bstrObjectName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsBackLink_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_BackLink;

#ifdef __cplusplus

class DECLSPEC_UUID("fcbf906f-4080-11d1-a3ac-00c04fb950dc")
BackLink;
#endif

#ifndef __IADsTypedName_INTERFACE_DEFINED__
#define __IADsTypedName_INTERFACE_DEFINED__

/* interface IADsTypedName */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsTypedName;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b371a349-4080-11d1-a3ac-00c04fb950dc")
    IADsTypedName : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ObjectName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ObjectName( 
            /* [in] */ BSTR bstrObjectName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Level( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Level( 
            /* [in] */ long lnLevel) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Interval( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Interval( 
            /* [in] */ long lnInterval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsTypedNameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsTypedName * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsTypedName * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsTypedName * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsTypedName * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsTypedName * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsTypedName * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsTypedName * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IADsTypedName * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectName )( 
            IADsTypedName * This,
            /* [in] */ BSTR bstrObjectName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Level )( 
            IADsTypedName * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Level )( 
            IADsTypedName * This,
            /* [in] */ long lnLevel);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Interval )( 
            IADsTypedName * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Interval )( 
            IADsTypedName * This,
            /* [in] */ long lnInterval);
        
        END_INTERFACE
    } IADsTypedNameVtbl;

    interface IADsTypedName
    {
        CONST_VTBL struct IADsTypedNameVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsTypedName_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsTypedName_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsTypedName_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsTypedName_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsTypedName_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsTypedName_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsTypedName_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsTypedName_get_ObjectName(This,retval)	\
    ( (This)->lpVtbl -> get_ObjectName(This,retval) ) 

#define IADsTypedName_put_ObjectName(This,bstrObjectName)	\
    ( (This)->lpVtbl -> put_ObjectName(This,bstrObjectName) ) 

#define IADsTypedName_get_Level(This,retval)	\
    ( (This)->lpVtbl -> get_Level(This,retval) ) 

#define IADsTypedName_put_Level(This,lnLevel)	\
    ( (This)->lpVtbl -> put_Level(This,lnLevel) ) 

#define IADsTypedName_get_Interval(This,retval)	\
    ( (This)->lpVtbl -> get_Interval(This,retval) ) 

#define IADsTypedName_put_Interval(This,lnInterval)	\
    ( (This)->lpVtbl -> put_Interval(This,lnInterval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsTypedName_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TypedName;

#ifdef __cplusplus

class DECLSPEC_UUID("b33143cb-4080-11d1-a3ac-00c04fb950dc")
TypedName;
#endif

#ifndef __IADsHold_INTERFACE_DEFINED__
#define __IADsHold_INTERFACE_DEFINED__

/* interface IADsHold */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsHold;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b3eb3b37-4080-11d1-a3ac-00c04fb950dc")
    IADsHold : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ObjectName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ObjectName( 
            /* [in] */ BSTR bstrObjectName) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Amount( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Amount( 
            /* [in] */ long lnAmount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsHoldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsHold * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsHold * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsHold * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsHold * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsHold * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsHold * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsHold * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectName )( 
            IADsHold * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectName )( 
            IADsHold * This,
            /* [in] */ BSTR bstrObjectName);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Amount )( 
            IADsHold * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Amount )( 
            IADsHold * This,
            /* [in] */ long lnAmount);
        
        END_INTERFACE
    } IADsHoldVtbl;

    interface IADsHold
    {
        CONST_VTBL struct IADsHoldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsHold_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsHold_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsHold_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsHold_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsHold_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsHold_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsHold_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsHold_get_ObjectName(This,retval)	\
    ( (This)->lpVtbl -> get_ObjectName(This,retval) ) 

#define IADsHold_put_ObjectName(This,bstrObjectName)	\
    ( (This)->lpVtbl -> put_ObjectName(This,bstrObjectName) ) 

#define IADsHold_get_Amount(This,retval)	\
    ( (This)->lpVtbl -> get_Amount(This,retval) ) 

#define IADsHold_put_Amount(This,lnAmount)	\
    ( (This)->lpVtbl -> put_Amount(This,lnAmount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsHold_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Hold;

#ifdef __cplusplus

class DECLSPEC_UUID("b3ad3e13-4080-11d1-a3ac-00c04fb950dc")
Hold;
#endif

#ifndef __IADsObjectOptions_INTERFACE_DEFINED__
#define __IADsObjectOptions_INTERFACE_DEFINED__

/* interface IADsObjectOptions */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsObjectOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("46f14fda-232b-11d1-a808-00c04fd8d5a8")
    IADsObjectOptions : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetOption( 
            /* [in] */ long lnOption,
            /* [retval][out] */ VARIANT *pvValue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetOption( 
            /* [in] */ long lnOption,
            /* [in] */ VARIANT vValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsObjectOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsObjectOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsObjectOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsObjectOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsObjectOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsObjectOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsObjectOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsObjectOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetOption )( 
            IADsObjectOptions * This,
            /* [in] */ long lnOption,
            /* [retval][out] */ VARIANT *pvValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetOption )( 
            IADsObjectOptions * This,
            /* [in] */ long lnOption,
            /* [in] */ VARIANT vValue);
        
        END_INTERFACE
    } IADsObjectOptionsVtbl;

    interface IADsObjectOptions
    {
        CONST_VTBL struct IADsObjectOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsObjectOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsObjectOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsObjectOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsObjectOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsObjectOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsObjectOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsObjectOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsObjectOptions_GetOption(This,lnOption,pvValue)	\
    ( (This)->lpVtbl -> GetOption(This,lnOption,pvValue) ) 

#define IADsObjectOptions_SetOption(This,lnOption,vValue)	\
    ( (This)->lpVtbl -> SetOption(This,lnOption,vValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsObjectOptions_INTERFACE_DEFINED__ */


#ifndef __IADsPathname_INTERFACE_DEFINED__
#define __IADsPathname_INTERFACE_DEFINED__

/* interface IADsPathname */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsPathname;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d592aed4-f420-11d0-a36e-00c04fb950dc")
    IADsPathname : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Set( 
            /* [in] */ BSTR bstrADsPath,
            /* [in] */ long lnSetType) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetDisplayType( 
            /* [in] */ long lnDisplayType) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Retrieve( 
            /* [in] */ long lnFormatType,
            /* [retval][out] */ BSTR *pbstrADsPath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetNumElements( 
            /* [retval][out] */ long *plnNumPathElements) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetElement( 
            /* [in] */ long lnElementIndex,
            /* [retval][out] */ BSTR *pbstrElement) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddLeafElement( 
            /* [in] */ BSTR bstrLeafElement) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveLeafElement( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CopyPath( 
            /* [retval][out] */ IDispatch **ppAdsPath) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetEscapedElement( 
            /* [in] */ long lnReserved,
            /* [in] */ BSTR bstrInStr,
            /* [retval][out] */ BSTR *pbstrOutStr) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_EscapedMode( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_EscapedMode( 
            /* [in] */ long lnEscapedMode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsPathnameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsPathname * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsPathname * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsPathname * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsPathname * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsPathname * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsPathname * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsPathname * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Set )( 
            IADsPathname * This,
            /* [in] */ BSTR bstrADsPath,
            /* [in] */ long lnSetType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayType )( 
            IADsPathname * This,
            /* [in] */ long lnDisplayType);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Retrieve )( 
            IADsPathname * This,
            /* [in] */ long lnFormatType,
            /* [retval][out] */ BSTR *pbstrADsPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNumElements )( 
            IADsPathname * This,
            /* [retval][out] */ long *plnNumPathElements);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetElement )( 
            IADsPathname * This,
            /* [in] */ long lnElementIndex,
            /* [retval][out] */ BSTR *pbstrElement);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddLeafElement )( 
            IADsPathname * This,
            /* [in] */ BSTR bstrLeafElement);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveLeafElement )( 
            IADsPathname * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CopyPath )( 
            IADsPathname * This,
            /* [retval][out] */ IDispatch **ppAdsPath);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetEscapedElement )( 
            IADsPathname * This,
            /* [in] */ long lnReserved,
            /* [in] */ BSTR bstrInStr,
            /* [retval][out] */ BSTR *pbstrOutStr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EscapedMode )( 
            IADsPathname * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EscapedMode )( 
            IADsPathname * This,
            /* [in] */ long lnEscapedMode);
        
        END_INTERFACE
    } IADsPathnameVtbl;

    interface IADsPathname
    {
        CONST_VTBL struct IADsPathnameVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsPathname_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsPathname_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsPathname_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsPathname_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsPathname_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsPathname_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsPathname_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsPathname_Set(This,bstrADsPath,lnSetType)	\
    ( (This)->lpVtbl -> Set(This,bstrADsPath,lnSetType) ) 

#define IADsPathname_SetDisplayType(This,lnDisplayType)	\
    ( (This)->lpVtbl -> SetDisplayType(This,lnDisplayType) ) 

#define IADsPathname_Retrieve(This,lnFormatType,pbstrADsPath)	\
    ( (This)->lpVtbl -> Retrieve(This,lnFormatType,pbstrADsPath) ) 

#define IADsPathname_GetNumElements(This,plnNumPathElements)	\
    ( (This)->lpVtbl -> GetNumElements(This,plnNumPathElements) ) 

#define IADsPathname_GetElement(This,lnElementIndex,pbstrElement)	\
    ( (This)->lpVtbl -> GetElement(This,lnElementIndex,pbstrElement) ) 

#define IADsPathname_AddLeafElement(This,bstrLeafElement)	\
    ( (This)->lpVtbl -> AddLeafElement(This,bstrLeafElement) ) 

#define IADsPathname_RemoveLeafElement(This)	\
    ( (This)->lpVtbl -> RemoveLeafElement(This) ) 

#define IADsPathname_CopyPath(This,ppAdsPath)	\
    ( (This)->lpVtbl -> CopyPath(This,ppAdsPath) ) 

#define IADsPathname_GetEscapedElement(This,lnReserved,bstrInStr,pbstrOutStr)	\
    ( (This)->lpVtbl -> GetEscapedElement(This,lnReserved,bstrInStr,pbstrOutStr) ) 

#define IADsPathname_get_EscapedMode(This,retval)	\
    ( (This)->lpVtbl -> get_EscapedMode(This,retval) ) 

#define IADsPathname_put_EscapedMode(This,lnEscapedMode)	\
    ( (This)->lpVtbl -> put_EscapedMode(This,lnEscapedMode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsPathname_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Pathname;

#ifdef __cplusplus

class DECLSPEC_UUID("080d0d78-f421-11d0-a36e-00c04fb950dc")
Pathname;
#endif

#ifndef __IADsADSystemInfo_INTERFACE_DEFINED__
#define __IADsADSystemInfo_INTERFACE_DEFINED__

/* interface IADsADSystemInfo */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsADSystemInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5BB11929-AFD1-11d2-9CB9-0000F87A369E")
    IADsADSystemInfo : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_UserName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ComputerName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SiteName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DomainShortName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DomainDNSName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ForestDNSName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PDCRoleOwner( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SchemaRoleOwner( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_IsNativeMode( 
            /* [retval][out] */ VARIANT_BOOL *retval) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetAnyDCName( 
            /* [retval][out] */ BSTR *pszDCName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetDCSiteName( 
            /* [in] */ BSTR szServer,
            /* [retval][out] */ BSTR *pszSiteName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RefreshSchemaCache( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetTrees( 
            /* [retval][out] */ VARIANT *pvTrees) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsADSystemInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsADSystemInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsADSystemInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsADSystemInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsADSystemInfo * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsADSystemInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsADSystemInfo * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsADSystemInfo * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserName )( 
            IADsADSystemInfo * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ComputerName )( 
            IADsADSystemInfo * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SiteName )( 
            IADsADSystemInfo * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DomainShortName )( 
            IADsADSystemInfo * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DomainDNSName )( 
            IADsADSystemInfo * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForestDNSName )( 
            IADsADSystemInfo * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PDCRoleOwner )( 
            IADsADSystemInfo * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SchemaRoleOwner )( 
            IADsADSystemInfo * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsNativeMode )( 
            IADsADSystemInfo * This,
            /* [retval][out] */ VARIANT_BOOL *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetAnyDCName )( 
            IADsADSystemInfo * This,
            /* [retval][out] */ BSTR *pszDCName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetDCSiteName )( 
            IADsADSystemInfo * This,
            /* [in] */ BSTR szServer,
            /* [retval][out] */ BSTR *pszSiteName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RefreshSchemaCache )( 
            IADsADSystemInfo * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetTrees )( 
            IADsADSystemInfo * This,
            /* [retval][out] */ VARIANT *pvTrees);
        
        END_INTERFACE
    } IADsADSystemInfoVtbl;

    interface IADsADSystemInfo
    {
        CONST_VTBL struct IADsADSystemInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsADSystemInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsADSystemInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsADSystemInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsADSystemInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsADSystemInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsADSystemInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsADSystemInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsADSystemInfo_get_UserName(This,retval)	\
    ( (This)->lpVtbl -> get_UserName(This,retval) ) 

#define IADsADSystemInfo_get_ComputerName(This,retval)	\
    ( (This)->lpVtbl -> get_ComputerName(This,retval) ) 

#define IADsADSystemInfo_get_SiteName(This,retval)	\
    ( (This)->lpVtbl -> get_SiteName(This,retval) ) 

#define IADsADSystemInfo_get_DomainShortName(This,retval)	\
    ( (This)->lpVtbl -> get_DomainShortName(This,retval) ) 

#define IADsADSystemInfo_get_DomainDNSName(This,retval)	\
    ( (This)->lpVtbl -> get_DomainDNSName(This,retval) ) 

#define IADsADSystemInfo_get_ForestDNSName(This,retval)	\
    ( (This)->lpVtbl -> get_ForestDNSName(This,retval) ) 

#define IADsADSystemInfo_get_PDCRoleOwner(This,retval)	\
    ( (This)->lpVtbl -> get_PDCRoleOwner(This,retval) ) 

#define IADsADSystemInfo_get_SchemaRoleOwner(This,retval)	\
    ( (This)->lpVtbl -> get_SchemaRoleOwner(This,retval) ) 

#define IADsADSystemInfo_get_IsNativeMode(This,retval)	\
    ( (This)->lpVtbl -> get_IsNativeMode(This,retval) ) 

#define IADsADSystemInfo_GetAnyDCName(This,pszDCName)	\
    ( (This)->lpVtbl -> GetAnyDCName(This,pszDCName) ) 

#define IADsADSystemInfo_GetDCSiteName(This,szServer,pszSiteName)	\
    ( (This)->lpVtbl -> GetDCSiteName(This,szServer,pszSiteName) ) 

#define IADsADSystemInfo_RefreshSchemaCache(This)	\
    ( (This)->lpVtbl -> RefreshSchemaCache(This) ) 

#define IADsADSystemInfo_GetTrees(This,pvTrees)	\
    ( (This)->lpVtbl -> GetTrees(This,pvTrees) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsADSystemInfo_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ADSystemInfo;

#ifdef __cplusplus

class DECLSPEC_UUID("50B6327F-AFD1-11d2-9CB9-0000F87A369E")
ADSystemInfo;
#endif

#ifndef __IADsWinNTSystemInfo_INTERFACE_DEFINED__
#define __IADsWinNTSystemInfo_INTERFACE_DEFINED__

/* interface IADsWinNTSystemInfo */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsWinNTSystemInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6C6D65DC-AFD1-11d2-9CB9-0000F87A369E")
    IADsWinNTSystemInfo : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_UserName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_ComputerName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DomainName( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PDC( 
            /* [retval][out] */ BSTR *retval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsWinNTSystemInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsWinNTSystemInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsWinNTSystemInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsWinNTSystemInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsWinNTSystemInfo * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsWinNTSystemInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsWinNTSystemInfo * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsWinNTSystemInfo * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserName )( 
            IADsWinNTSystemInfo * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ComputerName )( 
            IADsWinNTSystemInfo * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DomainName )( 
            IADsWinNTSystemInfo * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PDC )( 
            IADsWinNTSystemInfo * This,
            /* [retval][out] */ BSTR *retval);
        
        END_INTERFACE
    } IADsWinNTSystemInfoVtbl;

    interface IADsWinNTSystemInfo
    {
        CONST_VTBL struct IADsWinNTSystemInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsWinNTSystemInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsWinNTSystemInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsWinNTSystemInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsWinNTSystemInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsWinNTSystemInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsWinNTSystemInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsWinNTSystemInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsWinNTSystemInfo_get_UserName(This,retval)	\
    ( (This)->lpVtbl -> get_UserName(This,retval) ) 

#define IADsWinNTSystemInfo_get_ComputerName(This,retval)	\
    ( (This)->lpVtbl -> get_ComputerName(This,retval) ) 

#define IADsWinNTSystemInfo_get_DomainName(This,retval)	\
    ( (This)->lpVtbl -> get_DomainName(This,retval) ) 

#define IADsWinNTSystemInfo_get_PDC(This,retval)	\
    ( (This)->lpVtbl -> get_PDC(This,retval) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsWinNTSystemInfo_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_WinNTSystemInfo;

#ifdef __cplusplus

class DECLSPEC_UUID("66182EC4-AFD1-11d2-9CB9-0000F87A369E")
WinNTSystemInfo;
#endif

#ifndef __IADsDNWithBinary_INTERFACE_DEFINED__
#define __IADsDNWithBinary_INTERFACE_DEFINED__

/* interface IADsDNWithBinary */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsDNWithBinary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7e99c0a2-f935-11d2-ba96-00c04fb6d0d1")
    IADsDNWithBinary : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_BinaryValue( 
            /* [retval][out] */ VARIANT *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_BinaryValue( 
            /* [in] */ VARIANT vBinaryValue) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DNString( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_DNString( 
            /* [in] */ BSTR bstrDNString) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsDNWithBinaryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsDNWithBinary * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsDNWithBinary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsDNWithBinary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsDNWithBinary * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsDNWithBinary * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsDNWithBinary * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsDNWithBinary * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BinaryValue )( 
            IADsDNWithBinary * This,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BinaryValue )( 
            IADsDNWithBinary * This,
            /* [in] */ VARIANT vBinaryValue);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DNString )( 
            IADsDNWithBinary * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DNString )( 
            IADsDNWithBinary * This,
            /* [in] */ BSTR bstrDNString);
        
        END_INTERFACE
    } IADsDNWithBinaryVtbl;

    interface IADsDNWithBinary
    {
        CONST_VTBL struct IADsDNWithBinaryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsDNWithBinary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsDNWithBinary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsDNWithBinary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsDNWithBinary_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsDNWithBinary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsDNWithBinary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsDNWithBinary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsDNWithBinary_get_BinaryValue(This,retval)	\
    ( (This)->lpVtbl -> get_BinaryValue(This,retval) ) 

#define IADsDNWithBinary_put_BinaryValue(This,vBinaryValue)	\
    ( (This)->lpVtbl -> put_BinaryValue(This,vBinaryValue) ) 

#define IADsDNWithBinary_get_DNString(This,retval)	\
    ( (This)->lpVtbl -> get_DNString(This,retval) ) 

#define IADsDNWithBinary_put_DNString(This,bstrDNString)	\
    ( (This)->lpVtbl -> put_DNString(This,bstrDNString) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsDNWithBinary_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DNWithBinary;

#ifdef __cplusplus

class DECLSPEC_UUID("7e99c0a3-f935-11d2-ba96-00c04fb6d0d1")
DNWithBinary;
#endif

#ifndef __IADsDNWithString_INTERFACE_DEFINED__
#define __IADsDNWithString_INTERFACE_DEFINED__

/* interface IADsDNWithString */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsDNWithString;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("370df02e-f934-11d2-ba96-00c04fb6d0d1")
    IADsDNWithString : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_StringValue( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_StringValue( 
            /* [in] */ BSTR bstrStringValue) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DNString( 
            /* [retval][out] */ BSTR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_DNString( 
            /* [in] */ BSTR bstrDNString) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsDNWithStringVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsDNWithString * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsDNWithString * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsDNWithString * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsDNWithString * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsDNWithString * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsDNWithString * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsDNWithString * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StringValue )( 
            IADsDNWithString * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StringValue )( 
            IADsDNWithString * This,
            /* [in] */ BSTR bstrStringValue);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DNString )( 
            IADsDNWithString * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DNString )( 
            IADsDNWithString * This,
            /* [in] */ BSTR bstrDNString);
        
        END_INTERFACE
    } IADsDNWithStringVtbl;

    interface IADsDNWithString
    {
        CONST_VTBL struct IADsDNWithStringVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsDNWithString_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsDNWithString_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsDNWithString_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsDNWithString_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsDNWithString_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsDNWithString_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsDNWithString_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsDNWithString_get_StringValue(This,retval)	\
    ( (This)->lpVtbl -> get_StringValue(This,retval) ) 

#define IADsDNWithString_put_StringValue(This,bstrStringValue)	\
    ( (This)->lpVtbl -> put_StringValue(This,bstrStringValue) ) 

#define IADsDNWithString_get_DNString(This,retval)	\
    ( (This)->lpVtbl -> get_DNString(This,retval) ) 

#define IADsDNWithString_put_DNString(This,bstrDNString)	\
    ( (This)->lpVtbl -> put_DNString(This,bstrDNString) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsDNWithString_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DNWithString;

#ifdef __cplusplus

class DECLSPEC_UUID("334857cc-f934-11d2-ba96-00c04fb6d0d1")
DNWithString;
#endif

#ifndef __IADsSecurityUtility_INTERFACE_DEFINED__
#define __IADsSecurityUtility_INTERFACE_DEFINED__

/* interface IADsSecurityUtility */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IADsSecurityUtility;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a63251b2-5f21-474b-ab52-4a8efad10895")
    IADsSecurityUtility : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetSecurityDescriptor( 
            /* [in] */ VARIANT varPath,
            /* [in] */ long lPathFormat,
            /* [in] */ long lFormat,
            /* [retval][out] */ VARIANT *pVariant) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetSecurityDescriptor( 
            /* [in] */ VARIANT varPath,
            /* [in] */ long lPathFormat,
            /* [in] */ VARIANT varData,
            /* [in] */ long lDataFormat) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ConvertSecurityDescriptor( 
            /* [in] */ VARIANT varSD,
            /* [in] */ long lDataFormat,
            /* [in] */ long lOutFormat,
            /* [retval][out] */ VARIANT *pResult) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_SecurityMask( 
            /* [retval][out] */ long *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_SecurityMask( 
            /* [in] */ long lnSecurityMask) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IADsSecurityUtilityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IADsSecurityUtility * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IADsSecurityUtility * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IADsSecurityUtility * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IADsSecurityUtility * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IADsSecurityUtility * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IADsSecurityUtility * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IADsSecurityUtility * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetSecurityDescriptor )( 
            IADsSecurityUtility * This,
            /* [in] */ VARIANT varPath,
            /* [in] */ long lPathFormat,
            /* [in] */ long lFormat,
            /* [retval][out] */ VARIANT *pVariant);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetSecurityDescriptor )( 
            IADsSecurityUtility * This,
            /* [in] */ VARIANT varPath,
            /* [in] */ long lPathFormat,
            /* [in] */ VARIANT varData,
            /* [in] */ long lDataFormat);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ConvertSecurityDescriptor )( 
            IADsSecurityUtility * This,
            /* [in] */ VARIANT varSD,
            /* [in] */ long lDataFormat,
            /* [in] */ long lOutFormat,
            /* [retval][out] */ VARIANT *pResult);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityMask )( 
            IADsSecurityUtility * This,
            /* [retval][out] */ long *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SecurityMask )( 
            IADsSecurityUtility * This,
            /* [in] */ long lnSecurityMask);
        
        END_INTERFACE
    } IADsSecurityUtilityVtbl;

    interface IADsSecurityUtility
    {
        CONST_VTBL struct IADsSecurityUtilityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IADsSecurityUtility_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IADsSecurityUtility_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IADsSecurityUtility_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IADsSecurityUtility_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IADsSecurityUtility_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IADsSecurityUtility_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IADsSecurityUtility_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IADsSecurityUtility_GetSecurityDescriptor(This,varPath,lPathFormat,lFormat,pVariant)	\
    ( (This)->lpVtbl -> GetSecurityDescriptor(This,varPath,lPathFormat,lFormat,pVariant) ) 

#define IADsSecurityUtility_SetSecurityDescriptor(This,varPath,lPathFormat,varData,lDataFormat)	\
    ( (This)->lpVtbl -> SetSecurityDescriptor(This,varPath,lPathFormat,varData,lDataFormat) ) 

#define IADsSecurityUtility_ConvertSecurityDescriptor(This,varSD,lDataFormat,lOutFormat,pResult)	\
    ( (This)->lpVtbl -> ConvertSecurityDescriptor(This,varSD,lDataFormat,lOutFormat,pResult) ) 

#define IADsSecurityUtility_get_SecurityMask(This,retval)	\
    ( (This)->lpVtbl -> get_SecurityMask(This,retval) ) 

#define IADsSecurityUtility_put_SecurityMask(This,lnSecurityMask)	\
    ( (This)->lpVtbl -> put_SecurityMask(This,lnSecurityMask) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IADsSecurityUtility_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ADsSecurityUtility;

#ifdef __cplusplus

class DECLSPEC_UUID("f270c64a-ffb8-4ae4-85fe-3a75e5347966")
ADsSecurityUtility;
#endif
#endif /* __ActiveDs_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Icm.h ===
/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    icm.h

Abstract:

    Public header file for Image Color Management

Revision History:

--*/

#ifndef _ICM_H_
#define _ICM_H_

#if _MSC_VER > 1000
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif

//
// Support for named color profiles
//

typedef char COLOR_NAME[32];
typedef COLOR_NAME *PCOLOR_NAME, *LPCOLOR_NAME;

typedef struct tagNAMED_PROFILE_INFO{
        DWORD           dwFlags;
        DWORD           dwCount;
        DWORD           dwCountDevCoordinates;
        COLOR_NAME      szPrefix;
        COLOR_NAME      szSuffix;
} NAMED_PROFILE_INFO;
typedef NAMED_PROFILE_INFO *PNAMED_PROFILE_INFO, *LPNAMED_PROFILE_INFO;


//
// Color spaces
//
// The following color spaces are supported.
// Gray, RGB, CMYK, XYZ, Yxy, Lab, generic 3 channel color spaces where
// the profiles defines how to interpret the 3 channels, named color spaces
// which can either be indices into the space or have color names, and
// multichannel spaces with 1 byte per channel up to MAX_COLOR_CHANNELS.
//

#define MAX_COLOR_CHANNELS  8   // maximum number of HiFi color channels

struct GRAYCOLOR {
    WORD    gray;
};

struct RGBCOLOR {
    WORD    red;
    WORD    green;
    WORD    blue;
};

struct CMYKCOLOR {
    WORD    cyan;
    WORD    magenta;
    WORD    yellow;
    WORD    black;
};

struct XYZCOLOR {
    WORD    X;
    WORD    Y;
    WORD    Z;
};

struct YxyCOLOR {
    WORD    Y;
    WORD    x;
    WORD    y;
};

struct LabCOLOR {
    WORD    L;
    WORD    a;
    WORD    b;
};

struct GENERIC3CHANNEL {
    WORD    ch1;
    WORD    ch2;
    WORD    ch3;
};

struct NAMEDCOLOR {
    DWORD        dwIndex;
};

struct HiFiCOLOR {
    BYTE    channel[MAX_COLOR_CHANNELS];
};

#if _MSC_VER > 1200
#pragma warning(push)
#pragma warning(disable:4201)	// nameless struct/union
#endif

typedef union tagCOLOR {
    struct GRAYCOLOR        gray;
    struct RGBCOLOR         rgb;
    struct CMYKCOLOR        cmyk;
    struct XYZCOLOR         XYZ;
    struct YxyCOLOR         Yxy;
    struct LabCOLOR         Lab;
    struct GENERIC3CHANNEL  gen3ch;
    struct NAMEDCOLOR       named;
    struct HiFiCOLOR        hifi;

    struct {                // alignment padding.
        DWORD reserved1;
        VOID *reserved2;
    };

} COLOR;
typedef COLOR *PCOLOR, *LPCOLOR;

#if _MSC_VER > 1200
#pragma warning(pop)
#endif

typedef enum {
    COLOR_GRAY           =   1,
    COLOR_RGB,
    COLOR_XYZ,
    COLOR_Yxy,
    COLOR_Lab,
    COLOR_3_CHANNEL,        // WORD per channel
    COLOR_CMYK,
    COLOR_5_CHANNEL,        // BYTE per channel
    COLOR_6_CHANNEL,        //      - do -
    COLOR_7_CHANNEL,        //      - do -
    COLOR_8_CHANNEL,        //      - do -
    COLOR_NAMED,
} COLORTYPE;
typedef COLORTYPE *PCOLORTYPE, *LPCOLORTYPE;

//
// Rendering Intents
//
// + INTENT_PERCEPTUAL            = LCS_GM_IMAGES for LOGCOLORSPACE
//                                = DMICM_CONTRAST for DEVMODE
//                                = "Pictures" for SetupColorMathing/Printer UI
//
// + INTENT_RELATIVE_COLORIMETRIC = LCS_GM_GRAPHICS for LOGCOLORSPACE
//                                = DMICM_COLORIMETRIC for DEVMODE
//                                = "Proof" for SetupColorMatching/Printer UI
//
// + INTENT_SATURATION            = LCS_GM_BUSINESS for LOGCOLORSPACE
//                                = DMICM_SATURATE for DEVMODE
//                                = "Graphics" for SetupColorMatching/Printer UI
//
// + INTENT_ABSOLUTE_COLORIMETRIC = LCS_GM_ABS_COLORIMETRIC for LOGCOLORSPACE
//                                = DMICM_ABS_COLORIMETRIC for DEVMODE
//                                = "Match" for SetupColorMatching/Printer UI
//

#define INTENT_PERCEPTUAL               0
#define INTENT_RELATIVE_COLORIMETRIC    1
#define INTENT_SATURATION               2
#define INTENT_ABSOLUTE_COLORIMETRIC    3



#if NTDDI_VERSION >= NTDDI_VISTA

typedef enum {
    CPT_ICC,
    CPT_DMP,
    CPT_CAMP,
    CPT_GMMP
} COLORPROFILETYPE;
typedef COLORPROFILETYPE *PCOLORPROFILETYPE, *LPCOLORPROFILETYPE;

typedef enum {

    // intent
    CPST_PERCEPTUAL             = INTENT_PERCEPTUAL,
    CPST_RELATIVE_COLORIMETRIC  = INTENT_RELATIVE_COLORIMETRIC,
    CPST_SATURATION             = INTENT_SATURATION,
    CPST_ABSOLUTE_COLORIMETRIC  = INTENT_ABSOLUTE_COLORIMETRIC,

    // working space
    CPST_NONE,
    CPST_RGB_WORKING_SPACE,
    CPST_CUSTOM_WORKING_SPACE,

} COLORPROFILESUBTYPE;
typedef COLORPROFILESUBTYPE *PCOLORPROFILESUBTYPE, *LPCOLORPROFILESUBTYPE;

//
// Device color data type
//
typedef enum {
    COLOR_BYTE       =   1,     // BYTE per channel. data range [0, 255]
    COLOR_WORD,                 // WORD per channel. data range [0, 65535]
    COLOR_FLOAT,                // FLOAT per channel. IEEE 32-bit floating point
    COLOR_S2DOT13FIXED,          // WORD per channel. data range [-4, +4] using s2.13
    
//#if NTDDI_VERSION >= NTDDI_WIN7
    COLOR_10b_R10G10B10A2,	    // Packed WORD per channel.  data range [0, 1]
    COLOR_10b_R10G10B10A2_XR,   // Packed extended range WORD per channel.  data range [-1, 3] 
                                // using 4.0 scale and -1.0 bias.
    COLOR_FLOAT16               // FLOAT16 per channel.
//#endif //NTDDI_VERSION >= NTDDI_WIN7

} COLORDATATYPE;
typedef COLORDATATYPE *PCOLORDATATYPE, *LPCOLORDATATYPE;

#endif // NTDDI_VERSION >= NTDDI_VISTA

//
// Bitmap formats supported
//

typedef enum {

    //
    // 16bpp - 5 bits per channel. The most significant bit is ignored.
    //

    BM_x555RGB      = 0x0000,
    BM_x555XYZ      = 0x0101,
    BM_x555Yxy,
    BM_x555Lab,
    BM_x555G3CH,

    //
    // Packed 8 bits per channel => 8bpp for GRAY and
    // 24bpp for the 3 channel colors, more for hifi channels
    //

    BM_RGBTRIPLETS  = 0x0002,
    BM_BGRTRIPLETS  = 0x0004,
    BM_XYZTRIPLETS  = 0x0201,
    BM_YxyTRIPLETS,
    BM_LabTRIPLETS,
    BM_G3CHTRIPLETS,
    BM_5CHANNEL,
    BM_6CHANNEL,
    BM_7CHANNEL,
    BM_8CHANNEL,
    BM_GRAY,

    //
    // 32bpp - 8 bits per channel. The most significant byte is ignored
    // for the 3 channel colors.
    //

    BM_xRGBQUADS    = 0x0008,
    BM_xBGRQUADS    = 0x0010,
    BM_xG3CHQUADS   = 0x0304,
    BM_KYMCQUADS,
    BM_CMYKQUADS    = 0x0020,

    //
    // 32bpp - 10 bits per channel. The 2 most significant bits are ignored.
    //

    BM_10b_RGB      = 0x0009,
    BM_10b_XYZ      = 0x0401,
    BM_10b_Yxy,
    BM_10b_Lab,
    BM_10b_G3CH,

    //
    // 32bpp - named color indices (1-based)
    //

    BM_NAMED_INDEX,

    //
    // Packed 16 bits per channel => 16bpp for GRAY and
    // 48bpp for the 3 channel colors.
    //

    BM_16b_RGB      = 0x000A,
    BM_16b_XYZ      = 0x0501,
    BM_16b_Yxy,
    BM_16b_Lab,
    BM_16b_G3CH,
    BM_16b_GRAY,

    //
    // 16 bpp - 5 bits for Red & Blue, 6 bits for Green
    //

    BM_565RGB       = 0x0001,

//#if NTDDI_VERSION >= NTDDI_VISTA
    //
    // scRGB - 32 bits per channel floating point
    //         16 bits per channel floating point
    //

    BM_32b_scRGB            = 0x0601,
    BM_32b_scARGB           = 0x0602,
    BM_S2DOT13FIXED_scRGB   = 0x0603,
    BM_S2DOT13FIXED_scARGB  = 0x0604,
//#endif // NTDDI_VERSION >= NTDDI_VISTA

//#if NTDDI_VERSION >= NTDDI_WIN7
    BM_R10G10B10A2          = 0x0701,
    BM_R10G10B10A2_XR        = 0x0702,
    BM_R16G16B16A16_FLOAT   = 0x0703
//#endif // NTDDI_VERSION >= NTDDI_WIN7

} BMFORMAT;
typedef BMFORMAT *PBMFORMAT, *LPBMFORMAT;

//
// Callback function definition
//

typedef BOOL (WINAPI *PBMCALLBACKFN)(ULONG, ULONG, LPARAM);
typedef PBMCALLBACKFN LPBMCALLBACKFN;

//
// ICC profile header
//

typedef struct tagPROFILEHEADER {
    DWORD   phSize;             // profile size in bytes
    DWORD   phCMMType;          // CMM for this profile
    DWORD   phVersion;          // profile format version number
    DWORD   phClass;            // type of profile
    DWORD   phDataColorSpace;   // color space of data
    DWORD   phConnectionSpace;  // PCS
    DWORD   phDateTime[3];      // date profile was created
    DWORD   phSignature;        // magic number
    DWORD   phPlatform;         // primary platform
    DWORD   phProfileFlags;     // various bit settings
    DWORD   phManufacturer;     // device manufacturer
    DWORD   phModel;            // device model number
    DWORD   phAttributes[2];    // device attributes
    DWORD   phRenderingIntent;  // rendering intent
    CIEXYZ  phIlluminant;       // profile illuminant
    DWORD   phCreator;          // profile creator
    BYTE    phReserved[44];     // reserved for future use
} PROFILEHEADER;
typedef PROFILEHEADER *PPROFILEHEADER, *LPPROFILEHEADER;

//
// Profile class values
//

#define CLASS_MONITOR           'mntr'
#define CLASS_PRINTER           'prtr'
#define CLASS_SCANNER           'scnr'
#define CLASS_LINK              'link'
#define CLASS_ABSTRACT          'abst'
#define CLASS_COLORSPACE        'spac'
#define CLASS_NAMED             'nmcl'
#if NTDDI_VERSION >= NTDDI_VISTA
#define CLASS_CAMP              'camp'
#define CLASS_GMMP              'gmmp'
#endif // NTDDI_VERSION >= NTDDI_VISTA

//
// Color space values
//

#define SPACE_XYZ               'XYZ '
#define SPACE_Lab               'Lab '
#define SPACE_Luv               'Luv '
#define SPACE_YCbCr             'YCbr'
#define SPACE_Yxy               'Yxy '
#define SPACE_RGB               'RGB '
#define SPACE_GRAY              'GRAY'
#define SPACE_HSV               'HSV '
#define SPACE_HLS               'HLS '
#define SPACE_CMYK              'CMYK'
#define SPACE_CMY               'CMY '
#define SPACE_2_CHANNEL         '2CLR'
#define SPACE_3_CHANNEL         '3CLR'
#define SPACE_4_CHANNEL         '4CLR'
#define SPACE_5_CHANNEL         '5CLR'
#define SPACE_6_CHANNEL         '6CLR'
#define SPACE_7_CHANNEL         '7CLR'
#define SPACE_8_CHANNEL         '8CLR'

//
// Profile flag bitfield values
//

#define FLAG_EMBEDDEDPROFILE    0x00000001
#define FLAG_DEPENDENTONDATA    0x00000002

//
// Profile flag bits for vendor extensions (bytes 44..45 of the ICC profile header).
//

#if NTDDI_VERSION >= NTDDI_VISTA

//
// Enable support for chromatic adaptation.
//
#define FLAG_ENABLE_CHROMATIC_ADAPTATION 0x02000000

#endif // NTDDI_VERSION >= NTDDI_VISTA

//
// Profile attributes bitfield values
//

#define ATTRIB_TRANSPARENCY     0x00000001
#define ATTRIB_MATTE            0x00000002

//
// Profile data structure
//

typedef struct tagPROFILE {
    DWORD   dwType;             // profile type
    PVOID   pProfileData;       // filename or buffer containing profile
    DWORD   cbDataSize;         // size of profile data
} PROFILE;
typedef PROFILE *PPROFILE, *LPPROFILE;


//
// Profile types to be used in the PROFILE structure
//

#define PROFILE_FILENAME    1   // profile data is NULL terminated filename
#define PROFILE_MEMBUFFER   2   // profile data is a buffer containing
                                // the profile
//
// Desired access mode for opening profiles
//

#define PROFILE_READ        1   // opened for read access
#define PROFILE_READWRITE   2   // opened for read and write access

//
// Handles returned to applications
//

typedef HANDLE HPROFILE;        // handle to profile object
typedef HPROFILE *PHPROFILE;
typedef HANDLE HTRANSFORM;      // handle to color transform object

//
// CMM selection for CreateMultiProfileTransform and SelectCMM.
//

#define INDEX_DONT_CARE     0

#define CMM_FROM_PROFILE    INDEX_DONT_CARE // Use CMM specified in profile.
#define CMM_WINDOWS_DEFAULT 'Win '          // Use Windows default CMM always.

//
// Tags found in ICC profiles
//

typedef DWORD      TAGTYPE;
typedef TAGTYPE   *PTAGTYPE, *LPTAGTYPE;

//
// Profile enumeration data structure
//

#define ENUM_TYPE_VERSION    0x0300

typedef struct tagENUMTYPEA {
    DWORD   dwSize;             // structure size
    DWORD   dwVersion;          // structure version
    DWORD   dwFields;           // bit fields
    PCSTR   pDeviceName;        // device friendly name
    DWORD   dwMediaType;        // media type
    DWORD   dwDitheringMode;    // dithering mode
    DWORD   dwResolution[2];    // x and y resolutions
    DWORD   dwCMMType;          // cmm ID
    DWORD   dwClass;            // profile class
    DWORD   dwDataColorSpace;   // color space of data
    DWORD   dwConnectionSpace;  // pcs
    DWORD   dwSignature;        // magic number
    DWORD   dwPlatform;         // primary platform
    DWORD   dwProfileFlags;     // various bit settings in profile
    DWORD   dwManufacturer;     // manufacturer ID
    DWORD   dwModel;            // model ID
    DWORD   dwAttributes[2];    // device attributes
    DWORD   dwRenderingIntent;  // rendering intent
    DWORD   dwCreator;          // profile creator
    DWORD   dwDeviceClass;      // device class
} ENUMTYPEA, *PENUMTYPEA, *LPENUMTYPEA;


typedef struct tagENUMTYPEW {
    DWORD   dwSize;             // structure size
    DWORD   dwVersion;          // structure version
    DWORD   dwFields;           // bit fields
    PCWSTR  pDeviceName;        // device friendly name
    DWORD   dwMediaType;        // media type
    DWORD   dwDitheringMode;    // dithering mode
    DWORD   dwResolution[2];    // x and y resolutions
    DWORD   dwCMMType;          // cmm ID
    DWORD   dwClass;            // profile class
    DWORD   dwDataColorSpace;   // color space of data
    DWORD   dwConnectionSpace;  // pcs
    DWORD   dwSignature;        // magic number
    DWORD   dwPlatform;         // primary platform
    DWORD   dwProfileFlags;     // various bit settings in profile
    DWORD   dwManufacturer;     // manufacturer ID
    DWORD   dwModel;            // model ID
    DWORD   dwAttributes[2];    // device attributes
    DWORD   dwRenderingIntent;  // rendering intent
    DWORD   dwCreator;          // profile creator
    DWORD   dwDeviceClass;      // device class
} ENUMTYPEW, *PENUMTYPEW, *LPENUMTYPEW;

//
// Bitfields for enumeration record above
//

#define ET_DEVICENAME           0x00000001
#define ET_MEDIATYPE            0x00000002
#define ET_DITHERMODE           0x00000004
#define ET_RESOLUTION           0x00000008
#define ET_CMMTYPE              0x00000010
#define ET_CLASS                0x00000020
#define ET_DATACOLORSPACE       0x00000040
#define ET_CONNECTIONSPACE      0x00000080
#define ET_SIGNATURE            0x00000100
#define ET_PLATFORM             0x00000200
#define ET_PROFILEFLAGS         0x00000400
#define ET_MANUFACTURER         0x00000800
#define ET_MODEL                0x00001000
#define ET_ATTRIBUTES           0x00002000
#define ET_RENDERINGINTENT      0x00004000
#define ET_CREATOR              0x00008000
#define ET_DEVICECLASS          0x00010000

#if NTDDI_VERSION >= NTDDI_VISTA

//
// WCS profile management scope - system-wide and current-user
//

typedef enum
{
    WCS_PROFILE_MANAGEMENT_SCOPE_SYSTEM_WIDE,
    WCS_PROFILE_MANAGEMENT_SCOPE_CURRENT_USER
} WCS_PROFILE_MANAGEMENT_SCOPE;

#endif // NTDDI_VERSION >= NTDDI_VISTA

//
// Flags for creating color transforms
//

#define PROOF_MODE                  0x00000001
#define NORMAL_MODE                 0x00000002
#define BEST_MODE                   0x00000003
#define ENABLE_GAMUT_CHECKING       0x00010000
#define USE_RELATIVE_COLORIMETRIC   0x00020000
#define FAST_TRANSLATE              0x00040000
#if NTDDI_VERSION >= NTDDI_VISTA
#define PRESERVEBLACK               0x00100000
#define WCS_ALWAYS                  0x00200000
#define SEQUENTIAL_TRANSFORM        0x80800000
#endif // NTDDI_VERSION >= NTDDI_VISTA
#define RESERVED                    0x80000000

//
// Parameter for GetPS2ColorSpaceArray
//

#define CSA_A                   1
#define CSA_ABC                 2
#define CSA_DEF                 3
#define CSA_DEFG                4
#define CSA_GRAY                5
#define CSA_RGB                 6
#define CSA_CMYK                7
#define CSA_Lab                 8

//
// Parameter for CMGetInfo()
//

#define CMM_WIN_VERSION     0
#define CMM_IDENT           1
#define CMM_DRIVER_VERSION  2
#define CMM_DLL_VERSION     3
#define CMM_VERSION         4
#define CMM_DESCRIPTION     5
#define CMM_LOGOICON        6

//
// Parameter for CMTranslateRGBs()
//

#define CMS_FORWARD         0
#define CMS_BACKWARD        1

//
//  Constants for SetupColorMatching()
//

#define COLOR_MATCH_VERSION  0x0200

//
//  Constants for flags
//

#define CMS_DISABLEICM          1     // Disable color matching
#define CMS_ENABLEPROOFING      2     // Enable proofing

#define CMS_SETRENDERINTENT     4     // Use passed in value
#define CMS_SETPROOFINTENT      8
#define CMS_SETMONITORPROFILE   0x10  // Use passed in profile name initially
#define CMS_SETPRINTERPROFILE   0x20
#define CMS_SETTARGETPROFILE    0x40

#define CMS_USEHOOK             0x80  // Use hook procedure in lpfnHook
#define CMS_USEAPPLYCALLBACK    0x100 // Use callback procedure when applied
#define CMS_USEDESCRIPTION      0x200 // Use profile description in UI
                                      //   (default is filename)

#define CMS_DISABLEINTENT       0x400 // Disable intent selection (render & proofing) always
#define CMS_DISABLERENDERINTENT 0x800 // Disable rendering intent selection while in proofing mode
                                      // Only proofing intent selection is enabled.

//
//  Used to denote too-small buffers (output only)
//

#define CMS_MONITOROVERFLOW     0x80000000L
#define CMS_PRINTEROVERFLOW     0x40000000L
#define CMS_TARGETOVERFLOW      0x20000000L

//
//  Structures (both ANSI and Unicode)
//
struct _tagCOLORMATCHSETUPW;
struct _tagCOLORMATCHSETUPA;

typedef BOOL (WINAPI *PCMSCALLBACKW)(struct _tagCOLORMATCHSETUPW *,LPARAM);
typedef BOOL (WINAPI *PCMSCALLBACKA)(struct _tagCOLORMATCHSETUPA *,LPARAM);

typedef struct _tagCOLORMATCHSETUPW {

    DWORD   dwSize;                 //  Size of structure in bytes
    DWORD   dwVersion;              //  Set to COLOR_MATCH_VERSION

    DWORD   dwFlags;                //  See constants listed previously
    HWND    hwndOwner;              //  Window handle of owner

    PCWSTR  pSourceName;            //  Name of Image Source, defaults to "sRGB Color Space"
    PCWSTR  pDisplayName;           //  If null, defaults to first enumerated monitor
    PCWSTR  pPrinterName;           //  If null, defaults to default printer.

    DWORD   dwRenderIntent;         //  Rendering Intent
    DWORD   dwProofingIntent;       //  Rendering Intent for Proofing

    PWSTR   pMonitorProfile;        //  Monitor profile name
    DWORD   ccMonitorProfile;       //  Size of above in characters

    PWSTR   pPrinterProfile;        //  Printer profile name
    DWORD   ccPrinterProfile;       //  Size of above in characters

    PWSTR   pTargetProfile;         //  Target profile name
    DWORD   ccTargetProfile;        //  Size of above in characters

    DLGPROC lpfnHook;               //  Hook Procedure address
    LPARAM  lParam;                 //  Given to hook procedure at WM_INITDIALOG

    PCMSCALLBACKW lpfnApplyCallback;   //  Callback Procedure address when apply is pushed
    LPARAM        lParamApplyCallback; //  Given to callback Procedure for apply

}   COLORMATCHSETUPW, *PCOLORMATCHSETUPW, *LPCOLORMATCHSETUPW;

typedef struct _tagCOLORMATCHSETUPA {

    DWORD   dwSize;                 //  Size of structure in bytes
    DWORD   dwVersion;              //  Set to COLOR_MATCH_VERSION

    DWORD   dwFlags;                //  See constants listed previously
    HWND    hwndOwner;              //  Window handle of owner

    PCSTR   pSourceName;            //  Name of Image Source, defaults to  "This Document"
    PCSTR   pDisplayName;           //  If null, defaults to first enumerated monitor
    PCSTR   pPrinterName;           //  If null, defaults to default printer.

    DWORD   dwRenderIntent;         //  Rendering Intent
    DWORD   dwProofingIntent;       //  Rendering Intent for Proofing

    PSTR    pMonitorProfile;        //  Monitor profile name
    DWORD   ccMonitorProfile;       //  Size of above in characters

    PSTR    pPrinterProfile;        //  Printer profile name
    DWORD   ccPrinterProfile;       //  Size of above in characters

    PSTR    pTargetProfile;         //  Target profile name
    DWORD   ccTargetProfile;        //  Size of above in characters

    DLGPROC lpfnHook;               //  Hook Procedure address
    LPARAM  lParam;                 //  Given to hook procedure at WM_INITDIALOG

    PCMSCALLBACKA lpfnApplyCallback;   //  Callback Procedure address when apply is pushed
    LPARAM        lParamApplyCallback; //  Given to callback Procedure for apply

}   COLORMATCHSETUPA, *PCOLORMATCHSETUPA, *LPCOLORMATCHSETUPA;

//
// Windows API definitions
//

HPROFILE   WINAPI OpenColorProfileA(__in PPROFILE pProfile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwCreationMode);
HPROFILE   WINAPI OpenColorProfileW(__in PPROFILE pProfile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwCreationMode);
BOOL       WINAPI CloseColorProfile(__in_opt HPROFILE hProfile);
BOOL       WINAPI GetColorProfileFromHandle(__in HPROFILE hProfile, __out_bcount_opt(*pcbProfile) PBYTE pProfile, __inout PDWORD pcbProfile);
BOOL       WINAPI IsColorProfileValid(__in HPROFILE hProfile, __out PBOOL pbValid);
BOOL       WINAPI CreateProfileFromLogColorSpaceA(__in LPLOGCOLORSPACEA pLogColorSpace, __deref_out_xcount(GlobalSize(*pProfile)) PBYTE* pProfile);
BOOL       WINAPI CreateProfileFromLogColorSpaceW(__in LPLOGCOLORSPACEW pLogColorSpace, __deref_out_xcount(GlobalSize(*pProfile)) PBYTE* pProfile);
BOOL       WINAPI GetCountColorProfileElements(__in HPROFILE hProfile, __out PDWORD pnElementCount);
BOOL       WINAPI GetColorProfileHeader(__in HPROFILE hProfile, __out PPROFILEHEADER pHeader);
BOOL       WINAPI GetColorProfileElementTag(__in HPROFILE hProfile, DWORD dwIndex, __out PTAGTYPE pTag);
BOOL       WINAPI IsColorProfileTagPresent(__in HPROFILE hProfile, TAGTYPE tag, __out PBOOL pbPresent);
BOOL       WINAPI GetColorProfileElement(__in HPROFILE hProfile, TAGTYPE tag, DWORD dwOffset, __inout PDWORD pcbElement, __out_bcount_opt(*pcbElement) PVOID pElement, __out PBOOL pbReference);
BOOL       WINAPI SetColorProfileHeader(__in HPROFILE hProfile, __in_bcount(sizeof(PROFILEHEADER)) PPROFILEHEADER pHeader);
BOOL       WINAPI SetColorProfileElementSize(__in HPROFILE hProfile, TAGTYPE tagType, DWORD pcbElement);
BOOL       WINAPI SetColorProfileElement(__in HPROFILE hProfile, TAGTYPE tag, DWORD dwOffset, __in PDWORD pcbElement, __in_ecount(*pcbElement) PVOID pElement);
BOOL       WINAPI SetColorProfileElementReference(__in HPROFILE hProfile, TAGTYPE newTag, TAGTYPE refTag);
BOOL       WINAPI GetPS2ColorSpaceArray(__in HPROFILE hProfile, DWORD dwIntent, DWORD dwCSAType, __out_bcount_opt(*pcbPS2ColorSpaceArray) PBYTE pPS2ColorSpaceArray, __inout PDWORD pcbPS2ColorSpaceArray, __out PBOOL pbBinary);
BOOL       WINAPI GetPS2ColorRenderingIntent(__in HPROFILE hProfile, DWORD dwIntent, __out_bcount_opt(*pcbPS2ColorRenderingIntent) PBYTE pBuffer, __inout PDWORD pcbPS2ColorRenderingIntent);
BOOL       WINAPI GetPS2ColorRenderingDictionary(__in HPROFILE hProfile, DWORD dwIntent, __out_bcount_opt(*pcbPS2ColorRenderingDictionary) PBYTE pPS2ColorRenderingDictionary, __inout PDWORD pcbPS2ColorRenderingDictionary, __inout PBOOL pbBinary);
BOOL       WINAPI GetNamedProfileInfo(__in HPROFILE hProfile, __inout_bcount(sizeof(NAMED_PROFILE_INFO)) PNAMED_PROFILE_INFO pNamedProfileInfo);
BOOL       WINAPI ConvertColorNameToIndex(__in HPROFILE hProfile, __in_ecount(dwCount) PCOLOR_NAME paColorName, __out_ecount(dwCount) PDWORD paIndex, DWORD dwCount);
BOOL       WINAPI ConvertIndexToColorName(__in HPROFILE hProfile, __in_ecount(dwCount) PDWORD paIndex, __out_ecount(dwCount) PCOLOR_NAME paColorName, DWORD dwCount);
BOOL       WINAPI CreateDeviceLinkProfile(__in_ecount(nProfiles) PHPROFILE hProfile, DWORD nProfiles, __in_ecount(nIntents) PDWORD padwIntent, DWORD nIntents, DWORD dwFlags, __deref_out_xcount(GlobalSize(*pProfileData)) PBYTE* pProfileData, DWORD indexPreferredCMM);
HTRANSFORM WINAPI CreateColorTransformA(__in LPLOGCOLORSPACEA pLogColorSpace, __in HPROFILE hDestProfile, __in HPROFILE hTargetProfile, DWORD dwFlags);
HTRANSFORM WINAPI CreateColorTransformW(__in LPLOGCOLORSPACEW pLogColorSpace, __in HPROFILE hDestProfile, __in HPROFILE hTargetProfile, DWORD dwFlags);
HTRANSFORM WINAPI CreateMultiProfileTransform(__in_ecount(nProfiles) PHPROFILE pahProfiles, DWORD nProfiles, __in_ecount(nIntents) PDWORD padwIntent, DWORD nIntents, DWORD dwFlags, DWORD indexPreferredCMM);
BOOL       WINAPI DeleteColorTransform(__inout HTRANSFORM hxform);
BOOL       WINAPI TranslateBitmapBits(__in HTRANSFORM hColorTransform, __in PVOID pSrcBits, BMFORMAT bmInput, DWORD dwWidth, DWORD dwHeight, DWORD dwInputStride, __out PVOID pDestBits, BMFORMAT bmOutput, DWORD dwOutputStride, __in_opt __callback PBMCALLBACKFN pfnCallBack, __in_opt LPARAM ulCallbackData);
BOOL       WINAPI CheckBitmapBits(__in HTRANSFORM hColorTransform, __in PVOID pSrcBits, BMFORMAT bmInput, DWORD dwWidth, DWORD dwHeight, DWORD dwStride, __out_ecount(dwWidth * dwHeight) PBYTE paResult, __in_opt __callback PBMCALLBACKFN pfnCallback, __in_opt LPARAM lpCallbackData);
BOOL       WINAPI TranslateColors(__in HTRANSFORM hColorTransform, __in_ecount(nColors) PCOLOR paInputColors, DWORD nColors, COLORTYPE ctInput, __out_ecount(nColors) PCOLOR paOutputColors, COLORTYPE ctOutput);
BOOL       WINAPI CheckColors(__in HTRANSFORM hColorTransform, __in_ecount(nColors) PCOLOR paInputColors, DWORD nColors, COLORTYPE ctInput, __out_ecount(nColors) PBYTE paResult);
DWORD      WINAPI GetCMMInfo(__in HTRANSFORM hColorTransform, __in DWORD);
BOOL       WINAPI RegisterCMMA(__in_opt PCSTR pMachineName, __in DWORD cmmID, __in PCSTR pCMMdll);
BOOL       WINAPI RegisterCMMW(__in_opt PCWSTR pMachineName, __in DWORD cmmID, __in PCWSTR pCMMdll);
BOOL       WINAPI UnregisterCMMA(__in_opt PCSTR pMachineName, __in DWORD cmmID);
BOOL       WINAPI UnregisterCMMW(__in_opt PCWSTR pMachineName, __in DWORD cmmID);
BOOL       WINAPI SelectCMM(DWORD dwCMMType);

BOOL
WINAPI
GetColorDirectoryA(
    __in_opt PCSTR pMachineName,
    __out_bcount_part_opt(*pdwSize, *pdwSize) PSTR pBuffer,
    __inout PDWORD pdwSize
    );

BOOL
WINAPI
GetColorDirectoryW(
    __in_opt PCWSTR pMachineName,
    __out_bcount_part_opt(*pdwSize, *pdwSize) PWSTR pBuffer,
    __inout PDWORD pdwSize
    );


BOOL       WINAPI InstallColorProfileA(__in_opt PCSTR  pMachineName, __in PCSTR  pProfileName);
BOOL       WINAPI InstallColorProfileW(__in_opt PCWSTR pMachineName, __in PCWSTR pProfileName);
BOOL       WINAPI UninstallColorProfileA(__in_opt PCSTR  pMachineName, __in PCSTR pProfileName,  BOOL bDelete);
BOOL       WINAPI UninstallColorProfileW(__in_opt PCWSTR pMachineName, __in PCWSTR pProfileName, BOOL bDelete);
BOOL       WINAPI EnumColorProfilesA(__in_opt PCSTR  pMachineName, __in PENUMTYPEA pEnumRecord, __out_bcount_opt(*pdwSizeOfEnumerationBuffer) PBYTE pEnumerationBuffer, __inout PDWORD pdwSizeOfEnumerationBuffer, __out_opt PDWORD pnProfiles);
BOOL       WINAPI EnumColorProfilesW(__in_opt PCWSTR pMachineName, __in PENUMTYPEW pEnumRecord, __out_bcount_opt(*pdwSizeOfEnumerationBuffer) PBYTE pEnumerationBuffer, __inout PDWORD pdwSizeOfEnumerationBuffer, __out_opt PDWORD pnProfiles);
BOOL       WINAPI SetStandardColorSpaceProfileA(__in_opt PCSTR pMachineName,  DWORD dwProfileID, __in PCSTR  pProfilename);
BOOL       WINAPI SetStandardColorSpaceProfileW(__in_opt PCWSTR pMachineName, DWORD dwProfileID, __in PCWSTR pProfileName);

BOOL
WINAPI
GetStandardColorSpaceProfileA(
    __in_opt PCSTR pMachineName,
    __in DWORD dwSCS,
    __out_bcount_part_opt(*pcbSize, *pcbSize) PSTR pBuffer,
    __inout PDWORD pcbSize
    );

BOOL
WINAPI
GetStandardColorSpaceProfileW(
    __in_opt PCWSTR pMachineName,
    __in DWORD dwSCS,
    __out_bcount_part_opt(*pcbSize, *pcbSize) PWSTR pBuffer,
    __inout PDWORD pcbSize
    );

BOOL       WINAPI AssociateColorProfileWithDeviceA(__in_opt PCSTR pMachineName, __in PCSTR pProfileName, __in PCSTR pDeviceName);
BOOL       WINAPI AssociateColorProfileWithDeviceW(__in_opt PCWSTR pMachineName, __in PCWSTR pProfileName, __in PCWSTR pDeviceName);
BOOL       WINAPI DisassociateColorProfileFromDeviceA(__in_opt PCSTR pMachineName, __in PCSTR pProfileName, __in PCSTR pDeviceName);
BOOL       WINAPI DisassociateColorProfileFromDeviceW(__in_opt PCWSTR pMachineName, __in PCWSTR pProfileName, __in PCWSTR pDeviceName);
BOOL       WINAPI SetupColorMatchingW(__inout_bcount(sizeof(COLORMATCHSETUPW)) PCOLORMATCHSETUPW pcms);
BOOL       WINAPI SetupColorMatchingA(__inout_bcount(sizeof(COLORMATCHSETUPA)) PCOLORMATCHSETUPA pcms);

#if NTDDI_VERSION >= NTDDI_VISTA

BOOL
WINAPI
WcsAssociateColorProfileWithDevice(
    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,
    __in PCWSTR pProfileName,
    __in PCWSTR pDeviceName
    );

BOOL
WINAPI
WcsDisassociateColorProfileFromDevice(
    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,
    __in PCWSTR pProfileName,
    __in PCWSTR pDeviceName
    );

BOOL
WINAPI
WcsEnumColorProfilesSize(
    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,
    __in PENUMTYPEW pEnumRecord,
    __out PDWORD pdwSize
    );

BOOL
WINAPI
WcsEnumColorProfiles(
    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,
    __in PENUMTYPEW pEnumRecord,
    __out_bcount(dwSize) PBYTE pBuffer,
    __in DWORD dwSize,
    __out_opt PDWORD pnProfiles
    );

BOOL
WINAPI
WcsGetDefaultColorProfileSize(
    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,
    __in_opt PCWSTR pDeviceName,
    __in COLORPROFILETYPE cptColorProfileType,
    __in COLORPROFILESUBTYPE cpstColorProfileSubType,
    __in DWORD dwProfileID,
    __out PDWORD pcbProfileName
    );

BOOL
WINAPI
WcsGetDefaultColorProfile(
    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,
    __in_opt PCWSTR pDeviceName,
    __in COLORPROFILETYPE cptColorProfileType,
    __in COLORPROFILESUBTYPE cpstColorProfileSubType,
    __in DWORD dwProfileID,
    __in DWORD cbProfileName,
    __out_bcount(cbProfileName) LPWSTR pProfileName
    );

BOOL
WINAPI
WcsSetDefaultColorProfile(
    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,
    __in_opt PCWSTR pDeviceName,
    __in COLORPROFILETYPE cptColorProfileType,
    __in COLORPROFILESUBTYPE cpstColorProfileSubType,
    __in DWORD dwProfileID,
    __in_opt LPCWSTR pProfileName
    );

BOOL
WINAPI
WcsSetDefaultRenderingIntent(
    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,
    __in DWORD dwRenderingIntent
    );

BOOL
WINAPI
WcsGetDefaultRenderingIntent(
    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,
    __out PDWORD pdwRenderingIntent
    );

BOOL
WINAPI
WcsGetUsePerUserProfiles(
    __in LPCWSTR pDeviceName,
    __in DWORD dwDeviceClass,
    __out PBOOL pUsePerUserProfiles
    );

BOOL
WINAPI
WcsSetUsePerUserProfiles(
    __in LPCWSTR pDeviceName,
    __in DWORD dwDeviceClass,
    __in BOOL usePerUserProfiles
    );

BOOL
WINAPI
WcsTranslateColors(
    __in HTRANSFORM hColorTransform,
    __in DWORD nColors,
    __in DWORD nInputChannels,
    __in COLORDATATYPE cdtInput,
    __in DWORD cbInput,
    __in_bcount(cbInput) PVOID pInputData,
    __in DWORD nOutputChannels,
    __in COLORDATATYPE cdtOutput,
    __in DWORD cbOutput,
    __out_bcount(cbOutput) PVOID pOutputData
    );

BOOL
WINAPI
WcsCheckColors(
    __in HTRANSFORM hColorTransform,
    __in DWORD nColors,
    __in DWORD nInputChannels,
    __in COLORDATATYPE cdtInput,
    __in DWORD cbInput,
    __in_bcount(cbInput) PVOID pInputData,
    __out_ecount(nColors) PBYTE paResult
    );

//
// The APIs SetupColorMatchingA and SetupColorMatchingW are
// deprecated as of Windows Vista. The implementations in icmui.dll
// now SetLastError to ERROR_NOT_SUPPORTED, and return FALSE.
//
#pragma deprecated (SetupColorMatchingA)
#pragma deprecated (SetupColorMatchingW)

#endif // NTDDI_VERSION >= NTDDI_VISTA

#ifdef UNICODE

#define ENUMTYPE                            ENUMTYPEW
#define PENUMTYPE                           PENUMTYPEW
#define COLORMATCHSETUP                     COLORMATCHSETUPW
#define PCOLORMATCHSETUP                    PCOLORMATCHSETUPW
#define LPCOLORMATCHSETUP                   LPCOLORMATCHSETUPW
#define PCMSCALLBACK                        PCMSCALLBACKW
#define CreateColorTransform                CreateColorTransformW
#define OpenColorProfile                    OpenColorProfileW
#define CreateProfileFromLogColorSpace      CreateProfileFromLogColorSpaceW
#define RegisterCMM                         RegisterCMMW
#define UnregisterCMM                       UnregisterCMMW
#define GetColorDirectory                   GetColorDirectoryW
#define InstallColorProfile                 InstallColorProfileW
#define UninstallColorProfile               UninstallColorProfileW
#define AssociateColorProfileWithDevice     AssociateColorProfileWithDeviceW
#define DisassociateColorProfileFromDevice  DisassociateColorProfileFromDeviceW
#define EnumColorProfiles                   EnumColorProfilesW
#define SetStandardColorSpaceProfile        SetStandardColorSpaceProfileW
#define GetStandardColorSpaceProfile        GetStandardColorSpaceProfileW
#define SetupColorMatching                  SetupColorMatchingW
#if NTDDI_VERSION >= NTDDI_VISTA
#define WcsOpenColorProfile                 WcsOpenColorProfileW
#endif // NTDDI_VERSION >= NTDDI_VISTA

#else

#define ENUMTYPE                            ENUMTYPEA
#define PENUMTYPE                           PENUMTYPEA
#define COLORMATCHSETUP                     COLORMATCHSETUPA
#define PCOLORMATCHSETUP                    PCOLORMATCHSETUPA
#define LPCOLORMATCHSETUP                   LPCOLORMATCHSETUPA
#define PCMSCALLBACK                        PCMSCALLBACKA
#define CreateColorTransform                CreateColorTransformA
#define OpenColorProfile                    OpenColorProfileA
#define CreateProfileFromLogColorSpace      CreateProfileFromLogColorSpaceA
#define RegisterCMM                         RegisterCMMA
#define UnregisterCMM                       UnregisterCMMA
#define GetColorDirectory                   GetColorDirectoryA
#define InstallColorProfile                 InstallColorProfileA
#define UninstallColorProfile               UninstallColorProfileA
#define AssociateColorProfileWithDevice     AssociateColorProfileWithDeviceA
#define DisassociateColorProfileFromDevice  DisassociateColorProfileFromDeviceA
#define EnumColorProfiles                   EnumColorProfilesA
#define SetStandardColorSpaceProfile        SetStandardColorSpaceProfileA
#define GetStandardColorSpaceProfile        GetStandardColorSpaceProfileA
#define SetupColorMatching                  SetupColorMatchingA
#if NTDDI_VERSION >= NTDDI_VISTA
#define WcsOpenColorProfile                 WcsOpenColorProfileA
#endif // NTDDI_VERSION >= NTDDI_VISTA

#endif  // !UNICODE

//
// Transform returned by CMM
//

typedef HANDLE  HCMTRANSFORM;

//
// Pointer to ICC color profile data.
//

typedef PVOID   LPDEVCHARACTER;

//
// CMM API definition
//

BOOL WINAPI CMCheckColors(
    __in                    HCMTRANSFORM hcmTransform,  // transform handle
    __in_ecount(nColors)    LPCOLOR lpaInputColors,     // array of COLORs
                            DWORD nColors,              // COLOR array size
                            COLORTYPE ctInput,          // input color type
    __out_ecount(nColors)   LPBYTE lpaResult            // buffer for results
    );

BOOL WINAPI CMCheckRGBs(
    __in                                HCMTRANSFORM hcmTransform,  // transform handle
    __in                                LPVOID lpSrcBits,           // source bitmap bits
                                        BMFORMAT bmInput,           // source bitmap format
                                        DWORD dwWidth,              // source bitmap width
                                        DWORD dwHeight,             // source bitmap hight
                                        DWORD dwStride,             // source bitmap delta
    __out_ecount(dwWidth * dwHeight)    LPBYTE lpaResult,           // buffer for results
    __callback                          PBMCALLBACKFN pfnCallback,  // pointer to callback function
                                        LPARAM ulCallbackData       // caller-defined parameter to callback
    );

BOOL WINAPI CMConvertColorNameToIndex(
    __in                  HPROFILE hProfile,
    __in_ecount(dwCount)  PCOLOR_NAME paColorName,
    __out_ecount(dwCount) PDWORD paIndex,
                          DWORD dwCount
    );

BOOL WINAPI CMConvertIndexToColorName(
    __in                  HPROFILE hProfile,
    __in_ecount(dwCount)  PDWORD paIndex,
    __out_ecount(dwCount) PCOLOR_NAME paColorName,
                          DWORD dwCount
    );

BOOL WINAPI CMCreateDeviceLinkProfile(
    __in_ecount(nProfiles)                          PHPROFILE pahProfiles,    // array of profile handles
                                                    DWORD nProfiles,          // profile handle array size
    __in_ecount(nIntents)                           PDWORD padwIntents,       // array of rendering intents
                                                    DWORD nIntents,           // intent array size
                                                    DWORD dwFlags,            // transform creation flags
    __deref_out_xcount(GlobalSize(*lpProfileData))  LPBYTE *lpProfileData     // pointer to pointer to buffer
    );

HCMTRANSFORM WINAPI CMCreateMultiProfileTransform(
    __in_ecount(nProfiles) PHPROFILE pahProfiles,    // array of profile handles
                           DWORD nProfiles,          // profile handle array size
    __in_ecount(nIntents)  PDWORD padwIntents,       // array of rendering intents
                           DWORD nIntents,           // intent array size
                           DWORD dwFlags             // transform creation flags
    );

BOOL WINAPI CMCreateProfileW(
    __inout LPLOGCOLORSPACEW lpColorSpace,  // pointer to a logical color space
    __out   LPDEVCHARACTER   *lpProfileData // pointer to pointer to buffer
    );

//
// The CMM APIs CMCreateTransform, CMCreateTransformW, and CMCreateTransformExt are
// deprecated as of Windows Vista, and CMM implementors are no longer required to
// implement them. The implementations in the default CMM (icm32.dll) in Windows Vista
// now SetLastError to ERROR_NOT_SUPPORTED, and return an invalid transform handle
// (a value < 256).
//
HCMTRANSFORM WINAPI CMCreateTransform(
    __in LPLOGCOLORSPACEA lpColorSpace,       // pointer to logical color space
    __in LPDEVCHARACTER lpDevCharacter,       // profile data
    __in LPDEVCHARACTER lpTargetDevCharacter  // target profile data
    );

HCMTRANSFORM WINAPI CMCreateTransformW(
    __in LPLOGCOLORSPACEW lpColorSpace,       // pointer to logical color space
    __in LPDEVCHARACTER lpDevCharacter,       // profile data
    __in LPDEVCHARACTER lpTargetDevCharacter  // target profile data
    );

HCMTRANSFORM WINAPI CMCreateTransformExt(
    __in LPLOGCOLORSPACEA lpColorSpace,        // pointer to logical color space
    __in LPDEVCHARACTER lpDevCharacter,        // profile data
    __in LPDEVCHARACTER lpTargetDevCharacter,  // target profile data
    __in DWORD dwFlags                         // creation flags
    );

//
// The CMM APIs CMCheckColorsInGamut, CMCreateProfile, CMTranslateRGB and CMTranslateRGBs are
// deprecated as of Windows 7, and CMM implementors are no longer required to
// implement them. The implementations in the default CMM (icm32.dll) in Windows 7
// now SetLastError to ERROR_NOT_SUPPORTED, and return FALSE.
//

BOOL WINAPI CMCheckColorsInGamut(
    __in                 HCMTRANSFORM    hcmTransform,  // transform handle
    __in_ecount(nCount)  RGBTRIPLE       *lpaRGBTriple, // RGB triple array
    __out_bcount(nCount) LPBYTE          lpaResult,     // buffer for results
                         UINT            nCount         // result buffer size
    );

BOOL WINAPI CMCreateProfile(
    __inout LPLOGCOLORSPACEA lpColorSpace,  // pointer to a logical color space
    __out   LPDEVCHARACTER   *lpProfileData // pointer to pointer to buffer
    );

BOOL WINAPI CMTranslateRGB(
    __in  HCMTRANSFORM hcmTransform,
          COLORREF ColorRef,
    __out LPCOLORREF lpColorRef,
          DWORD dwFlags
    );

BOOL WINAPI CMTranslateRGBs(
    __in  HCMTRANSFORM hcmTransform,
    __in  LPVOID lpSrcBits,
          BMFORMAT bmInput,
          DWORD dwWidth,
          DWORD dwHeight,
          DWORD dwStride,
    __out LPVOID lpDestBits,
          BMFORMAT bmOutput,
          DWORD dwTranslateDirection
    );

#if NTDDI_VERSION >= NTDDI_VISTA
#pragma deprecated (CMCreateTransform)
#pragma deprecated (CMCreateTransformW)
#pragma deprecated (CMCreateTransformExt)
#pragma deprecated (CMCheckColorsInGamut)
#pragma deprecated (CMCreateProfile)
#pragma deprecated (CMTranslateRGB)
#endif // NTDDI_VERSION >= NTDDI_VISTA

#if NTDDI_VERSION > NTDDI_VISTA
#pragma deprecated (CMTranslateRGBs)
#endif // NTDDI_VERSION > NTDDI_VISTA

HCMTRANSFORM WINAPI CMCreateTransformExtW(
         __in LPLOGCOLORSPACEW lpColorSpace,        // pointer to logical color space
         __in LPDEVCHARACTER lpDevCharacter,        // profile data
         __in LPDEVCHARACTER lpTargetDevCharacter,  // target profile data
         __in DWORD dwFlags                              // creation flags
    );

BOOL WINAPI CMDeleteTransform(
    __inout HCMTRANSFORM hcmTransform             // transform handle to be deleted.
    );

DWORD WINAPI CMGetInfo(
    DWORD dwInfo
    );

BOOL WINAPI CMGetNamedProfileInfo(
    __in    HPROFILE hProfile,                    // profile handle
    __inout PNAMED_PROFILE_INFO pNamedProfileInfo // pointer to named profile info
    );

BOOL WINAPI CMGetPS2ColorRenderingDictionary(
    __in                        HPROFILE hProfile,
                                DWORD dwIntent,
    __out_bcount_opt(*lpcbSize) LPBYTE lpBuffer,
    __inout                     LPDWORD lpcbSize,
    __inout                     LPBOOL lpbBinary
    );

BOOL WINAPI CMGetPS2ColorRenderingIntent(
    __in                        HPROFILE hProfile,
                                DWORD dwIntent,
    __out_bcount_opt(*lpcbSize) LPBYTE lpBuffer,
    __inout                     LPDWORD lpcbSize
    );

BOOL WINAPI CMGetPS2ColorSpaceArray(
    __in                        HPROFILE hProfile,
                                DWORD dwIntent,
                                DWORD dwCSAType,
    __out_bcount_opt(*lpcbSize) LPBYTE lpBuffer,
    __inout                     LPDWORD lpcbSize,
    __inout                     LPBOOL lpbBinary
    );

BOOL WINAPI CMIsProfileValid(
    __in    HPROFILE hProfile,  // proflle handle
    __out   LPBOOL lpbValid     // buffer for result.
    );

BOOL WINAPI CMTranslateColors(
    __in                  HCMTRANSFORM hcmTransform,          // transform handle
    __in_ecount(nColors)  LPCOLOR lpaInputColors,             // pointer to input color array
                          DWORD nColors,                      // number of color in color array
                          COLORTYPE ctInput,                  // input color type
    __out_ecount(nColors) LPCOLOR lpaOutputColors,            // pointer to output color array
                          COLORTYPE ctOutput                  // output color type
    );

BOOL WINAPI CMTranslateRGBsExt(
    __in       HCMTRANSFORM hcmTransform,
    __in       LPVOID lpSrcBits,
               BMFORMAT bmInput,
               DWORD dwWidth,
               DWORD dwHeight,
               DWORD dwInputStride,
    __out      LPVOID lpDestBits,
               BMFORMAT bmOutput,
               DWORD dwOutputStride,
    __callback LPBMCALLBACKFN lpfnCallback,
               LPARAM ulCallbackData
    );

#if NTDDI_VERSION >= NTDDI_VISTA

//
//    Windows Color System APIs
//


//
// Passed in as a bit-flag for dwFlags, this instructs WcsOpenColorProfile
// to ignore any embedded Wcs information in the WcsProfiles tag if the input
// profile is an ICC one.
//

#define DONT_USE_EMBEDDED_WCS_PROFILES 0x00000001L


HPROFILE WINAPI WcsOpenColorProfileA(
    __in        PPROFILE pCDMPProfile,
    __in_opt    PPROFILE pCAMPProfile,
    __in_opt    PPROFILE pGMMPProfile,
    __in        DWORD    dwDesireAccess,
    __in        DWORD    dwShareMode,
    __in        DWORD    dwCreationMode,
    __in        DWORD    dwFlags
    );

HPROFILE WINAPI WcsOpenColorProfileW(
    __in        PPROFILE pCDMPProfile,
    __in_opt    PPROFILE pCAMPProfile,
    __in_opt    PPROFILE pGMMPProfile,
    __in        DWORD    dwDesireAccess,
    __in        DWORD    dwShareMode,
    __in        DWORD    dwCreationMode,
    __in        DWORD    dwFlags
    );

//
// Flags for WcsCreateIccProfile.
//
// By default, the original WCS profiles used for the conversion are embedded
// in the output ICC profile in a WcsProfilesTag, resulting in an ICC profile
// which is compatible with ICC software, yet still has the original WCS
// profile data available to code which is designed to parse it.
//
// This flag is set to produce an ICC profile without any of the original
// WCS profile data embedded. The WcsProfilesTag will not be present in the
// output profile. This will result in a smaller output profile, however the
// original WCS profile data will not be available to code that would be able
// to parse it instead of the ICC data.
//
//
// These flags should be ORed in with one of the four ICC INTENT_ flags
// Thus, they must use different bits from the INTENT_ flags. Currrently, the INTENT_ flags
// use the values 0-3, or the low order two bits. Hence we use the third lowest bit.
//


#define WCS_DEFAULT 0x00000000L
#define WCS_ICCONLY 0x00010000L

HPROFILE WINAPI WcsCreateIccProfile(
    __in HPROFILE hWcsProfile,
    __in DWORD dwOptions
    );

//
// ICC TAGTYPE for the embedded Wcs information.
//

#define WCS_EMBEDDED_TAG_SIGNATURE 'MS00'
#define WCS_EMBEDDED_TAG_TYPE_SIGNATURE 'MS10'

#endif // NTDDI_VERSION >= NTDDI_VISTA

#if NTDDI_VERSION >= NTDDI_WIN7

BOOL WcsGetCalibrationManagementState (
    __out BOOL *pbIsEnabled
    );

BOOL WcsSetCalibrationManagementState (
    __in BOOL bIsEnabled
    );
    
#endif // NTDDI_VERSION >= NTDDI_WIN7
    

#ifdef __cplusplus
}
#endif

#endif  // ifndef _ICM_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\icontact.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for icontact.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __icontact_h__
#define __icontact_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IContactManager_FWD_DEFINED__
#define __IContactManager_FWD_DEFINED__
typedef interface IContactManager IContactManager;
#endif 	/* __IContactManager_FWD_DEFINED__ */


#ifndef __IContactCollection_FWD_DEFINED__
#define __IContactCollection_FWD_DEFINED__
typedef interface IContactCollection IContactCollection;
#endif 	/* __IContactCollection_FWD_DEFINED__ */


#ifndef __IContactProperties_FWD_DEFINED__
#define __IContactProperties_FWD_DEFINED__
typedef interface IContactProperties IContactProperties;
#endif 	/* __IContactProperties_FWD_DEFINED__ */


#ifndef __IContact_FWD_DEFINED__
#define __IContact_FWD_DEFINED__
typedef interface IContact IContact;
#endif 	/* __IContact_FWD_DEFINED__ */


#ifndef __IContactPropertyCollection_FWD_DEFINED__
#define __IContactPropertyCollection_FWD_DEFINED__
typedef interface IContactPropertyCollection IContactPropertyCollection;
#endif 	/* __IContactPropertyCollection_FWD_DEFINED__ */


#ifndef __Contact_FWD_DEFINED__
#define __Contact_FWD_DEFINED__

#ifdef __cplusplus
typedef class Contact Contact;
#else
typedef struct Contact Contact;
#endif /* __cplusplus */

#endif 	/* __Contact_FWD_DEFINED__ */


#ifndef __ContactManager_FWD_DEFINED__
#define __ContactManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class ContactManager ContactManager;
#else
typedef struct ContactManager ContactManager;
#endif /* __cplusplus */

#endif 	/* __ContactManager_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_icontact_0000_0000 */
/* [local] */ 







extern RPC_IF_HANDLE __MIDL_itf_icontact_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_icontact_0000_0000_v0_0_s_ifspec;

#ifndef __IContactManager_INTERFACE_DEFINED__
#define __IContactManager_INTERFACE_DEFINED__

/* interface IContactManager */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IContactManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ad553d98-deb1-474a-8e17-fc0c2075b738")
    IContactManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszAppName,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszAppVersion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Load( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszContactID,
            /* [out] */ __RPC__deref_out_opt IContact **ppContact) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MergeContactIDs( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszNewContactID,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszOldContactID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMeContact( 
            /* [out] */ __RPC__deref_out_opt IContact **ppMeContact) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMeContact( 
            /* [in] */ __RPC__in_opt IContact *pMeContact) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContactCollection( 
            /* [out] */ __RPC__deref_out_opt IContactCollection **ppContactCollection) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContactManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IContactManager * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IContactManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IContactManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            __RPC__in IContactManager * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszAppName,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszAppVersion);
        
        HRESULT ( STDMETHODCALLTYPE *Load )( 
            __RPC__in IContactManager * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszContactID,
            /* [out] */ __RPC__deref_out_opt IContact **ppContact);
        
        HRESULT ( STDMETHODCALLTYPE *MergeContactIDs )( 
            __RPC__in IContactManager * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszNewContactID,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszOldContactID);
        
        HRESULT ( STDMETHODCALLTYPE *GetMeContact )( 
            __RPC__in IContactManager * This,
            /* [out] */ __RPC__deref_out_opt IContact **ppMeContact);
        
        HRESULT ( STDMETHODCALLTYPE *SetMeContact )( 
            __RPC__in IContactManager * This,
            /* [in] */ __RPC__in_opt IContact *pMeContact);
        
        HRESULT ( STDMETHODCALLTYPE *GetContactCollection )( 
            __RPC__in IContactManager * This,
            /* [out] */ __RPC__deref_out_opt IContactCollection **ppContactCollection);
        
        END_INTERFACE
    } IContactManagerVtbl;

    interface IContactManager
    {
        CONST_VTBL struct IContactManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContactManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IContactManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IContactManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IContactManager_Initialize(This,pszAppName,pszAppVersion)	\
    ( (This)->lpVtbl -> Initialize(This,pszAppName,pszAppVersion) ) 

#define IContactManager_Load(This,pszContactID,ppContact)	\
    ( (This)->lpVtbl -> Load(This,pszContactID,ppContact) ) 

#define IContactManager_MergeContactIDs(This,pszNewContactID,pszOldContactID)	\
    ( (This)->lpVtbl -> MergeContactIDs(This,pszNewContactID,pszOldContactID) ) 

#define IContactManager_GetMeContact(This,ppMeContact)	\
    ( (This)->lpVtbl -> GetMeContact(This,ppMeContact) ) 

#define IContactManager_SetMeContact(This,pMeContact)	\
    ( (This)->lpVtbl -> SetMeContact(This,pMeContact) ) 

#define IContactManager_GetContactCollection(This,ppContactCollection)	\
    ( (This)->lpVtbl -> GetContactCollection(This,ppContactCollection) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IContactManager_INTERFACE_DEFINED__ */


#ifndef __IContactCollection_INTERFACE_DEFINED__
#define __IContactCollection_INTERFACE_DEFINED__

/* interface IContactCollection */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IContactCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b6afa338-d779-11d9-8bde-f66bad1e3f3a")
    IContactCollection : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrent( 
            /* [out] */ __RPC__deref_out_opt IContact **ppContact) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContactCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IContactCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IContactCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IContactCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IContactCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IContactCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrent )( 
            __RPC__in IContactCollection * This,
            /* [out] */ __RPC__deref_out_opt IContact **ppContact);
        
        END_INTERFACE
    } IContactCollectionVtbl;

    interface IContactCollection
    {
        CONST_VTBL struct IContactCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContactCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IContactCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IContactCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IContactCollection_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IContactCollection_Next(This)	\
    ( (This)->lpVtbl -> Next(This) ) 

#define IContactCollection_GetCurrent(This,ppContact)	\
    ( (This)->lpVtbl -> GetCurrent(This,ppContact) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IContactCollection_INTERFACE_DEFINED__ */


#ifndef __IContactProperties_INTERFACE_DEFINED__
#define __IContactProperties_INTERFACE_DEFINED__

/* interface IContactProperties */
/* [unique][helpstring][uuid][object] */ 

#define CGD_DEFAULT                      0x00000000

EXTERN_C const IID IID_IContactProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("70dd27dd-5cbd-46e8-bef0-23b6b346288f")
    IContactProperties : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetString( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags,
            /* [size_is][unique][string][out][in] */ __RPC__inout_ecount_full_opt_string(cchValue) LPWSTR pszValue,
            /* [in] */ DWORD cchValue,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchPropertyValueRequired) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDate( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags,
            /* [unique][out][in] */ __RPC__inout_opt FILETIME *pftDateTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBinary( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags,
            /* [size_is][unique][out][in] */ __RPC__inout_ecount_full_opt(cchContentType) LPWSTR pszContentType,
            /* [in] */ DWORD cchContentType,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchContentTypeRequired,
            /* [out] */ __RPC__deref_out_opt IStream **ppStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLabels( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszArrayElementName,
            DWORD dwFlags,
            /* [size_is][unique][out][in] */ __RPC__inout_ecount_full_opt(cchLabels) LPWSTR pszLabels,
            /* [in] */ DWORD cchLabels,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchLabelsRequired) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetString( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDate( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags,
            /* [in] */ FILETIME ftDateTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetBinary( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszContentType,
            /* [unique][in] */ __RPC__in_opt IStream *pStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLabels( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszArrayElementName,
            DWORD dwFlags,
            /* [in] */ DWORD dwLabelCount,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(dwLabelCount) LPCWSTR ppszLabels[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateArrayNode( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszArrayName,
            DWORD dwFlags,
            BOOL fAppend,
            /* [size_is][string][unique][out][in] */ __RPC__inout_ecount_full_opt_string(cchNewArrayElementName) LPWSTR pszNewArrayElementName,
            DWORD cchNewArrayElementName,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchNewArrayElementNameRequired) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteProperty( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteArrayNode( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszArrayElementName,
            DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteLabels( 
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszArrayElementName,
            DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyCollection( 
            /* [out] */ __RPC__deref_out_opt IContactPropertyCollection **ppPropertyCollection,
            DWORD dwFlags,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszMultiValueName,
            /* [in] */ DWORD dwLabelCount,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(dwLabelCount) LPCWSTR ppszLabels[  ],
            BOOL fAnyLabelMatches) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContactPropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IContactProperties * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IContactProperties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IContactProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetString )( 
            __RPC__in IContactProperties * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags,
            /* [size_is][unique][string][out][in] */ __RPC__inout_ecount_full_opt_string(cchValue) LPWSTR pszValue,
            /* [in] */ DWORD cchValue,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchPropertyValueRequired);
        
        HRESULT ( STDMETHODCALLTYPE *GetDate )( 
            __RPC__in IContactProperties * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags,
            /* [unique][out][in] */ __RPC__inout_opt FILETIME *pftDateTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetBinary )( 
            __RPC__in IContactProperties * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags,
            /* [size_is][unique][out][in] */ __RPC__inout_ecount_full_opt(cchContentType) LPWSTR pszContentType,
            /* [in] */ DWORD cchContentType,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchContentTypeRequired,
            /* [out] */ __RPC__deref_out_opt IStream **ppStream);
        
        HRESULT ( STDMETHODCALLTYPE *GetLabels )( 
            __RPC__in IContactProperties * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszArrayElementName,
            DWORD dwFlags,
            /* [size_is][unique][out][in] */ __RPC__inout_ecount_full_opt(cchLabels) LPWSTR pszLabels,
            /* [in] */ DWORD cchLabels,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchLabelsRequired);
        
        HRESULT ( STDMETHODCALLTYPE *SetString )( 
            __RPC__in IContactProperties * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetDate )( 
            __RPC__in IContactProperties * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags,
            /* [in] */ FILETIME ftDateTime);
        
        HRESULT ( STDMETHODCALLTYPE *SetBinary )( 
            __RPC__in IContactProperties * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszContentType,
            /* [unique][in] */ __RPC__in_opt IStream *pStream);
        
        HRESULT ( STDMETHODCALLTYPE *SetLabels )( 
            __RPC__in IContactProperties * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszArrayElementName,
            DWORD dwFlags,
            /* [in] */ DWORD dwLabelCount,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(dwLabelCount) LPCWSTR ppszLabels[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *CreateArrayNode )( 
            __RPC__in IContactProperties * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszArrayName,
            DWORD dwFlags,
            BOOL fAppend,
            /* [size_is][string][unique][out][in] */ __RPC__inout_ecount_full_opt_string(cchNewArrayElementName) LPWSTR pszNewArrayElementName,
            DWORD cchNewArrayElementName,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchNewArrayElementNameRequired);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteProperty )( 
            __RPC__in IContactProperties * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszPropertyName,
            DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteArrayNode )( 
            __RPC__in IContactProperties * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszArrayElementName,
            DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteLabels )( 
            __RPC__in IContactProperties * This,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszArrayElementName,
            DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyCollection )( 
            __RPC__in IContactProperties * This,
            /* [out] */ __RPC__deref_out_opt IContactPropertyCollection **ppPropertyCollection,
            DWORD dwFlags,
            /* [unique][string][in] */ __RPC__in_opt_string LPCWSTR pszMultiValueName,
            /* [in] */ DWORD dwLabelCount,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(dwLabelCount) LPCWSTR ppszLabels[  ],
            BOOL fAnyLabelMatches);
        
        END_INTERFACE
    } IContactPropertiesVtbl;

    interface IContactProperties
    {
        CONST_VTBL struct IContactPropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContactProperties_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IContactProperties_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IContactProperties_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IContactProperties_GetString(This,pszPropertyName,dwFlags,pszValue,cchValue,pdwcchPropertyValueRequired)	\
    ( (This)->lpVtbl -> GetString(This,pszPropertyName,dwFlags,pszValue,cchValue,pdwcchPropertyValueRequired) ) 

#define IContactProperties_GetDate(This,pszPropertyName,dwFlags,pftDateTime)	\
    ( (This)->lpVtbl -> GetDate(This,pszPropertyName,dwFlags,pftDateTime) ) 

#define IContactProperties_GetBinary(This,pszPropertyName,dwFlags,pszContentType,cchContentType,pdwcchContentTypeRequired,ppStream)	\
    ( (This)->lpVtbl -> GetBinary(This,pszPropertyName,dwFlags,pszContentType,cchContentType,pdwcchContentTypeRequired,ppStream) ) 

#define IContactProperties_GetLabels(This,pszArrayElementName,dwFlags,pszLabels,cchLabels,pdwcchLabelsRequired)	\
    ( (This)->lpVtbl -> GetLabels(This,pszArrayElementName,dwFlags,pszLabels,cchLabels,pdwcchLabelsRequired) ) 

#define IContactProperties_SetString(This,pszPropertyName,dwFlags,pszValue)	\
    ( (This)->lpVtbl -> SetString(This,pszPropertyName,dwFlags,pszValue) ) 

#define IContactProperties_SetDate(This,pszPropertyName,dwFlags,ftDateTime)	\
    ( (This)->lpVtbl -> SetDate(This,pszPropertyName,dwFlags,ftDateTime) ) 

#define IContactProperties_SetBinary(This,pszPropertyName,dwFlags,pszContentType,pStream)	\
    ( (This)->lpVtbl -> SetBinary(This,pszPropertyName,dwFlags,pszContentType,pStream) ) 

#define IContactProperties_SetLabels(This,pszArrayElementName,dwFlags,dwLabelCount,ppszLabels)	\
    ( (This)->lpVtbl -> SetLabels(This,pszArrayElementName,dwFlags,dwLabelCount,ppszLabels) ) 

#define IContactProperties_CreateArrayNode(This,pszArrayName,dwFlags,fAppend,pszNewArrayElementName,cchNewArrayElementName,pdwcchNewArrayElementNameRequired)	\
    ( (This)->lpVtbl -> CreateArrayNode(This,pszArrayName,dwFlags,fAppend,pszNewArrayElementName,cchNewArrayElementName,pdwcchNewArrayElementNameRequired) ) 

#define IContactProperties_DeleteProperty(This,pszPropertyName,dwFlags)	\
    ( (This)->lpVtbl -> DeleteProperty(This,pszPropertyName,dwFlags) ) 

#define IContactProperties_DeleteArrayNode(This,pszArrayElementName,dwFlags)	\
    ( (This)->lpVtbl -> DeleteArrayNode(This,pszArrayElementName,dwFlags) ) 

#define IContactProperties_DeleteLabels(This,pszArrayElementName,dwFlags)	\
    ( (This)->lpVtbl -> DeleteLabels(This,pszArrayElementName,dwFlags) ) 

#define IContactProperties_GetPropertyCollection(This,ppPropertyCollection,dwFlags,pszMultiValueName,dwLabelCount,ppszLabels,fAnyLabelMatches)	\
    ( (This)->lpVtbl -> GetPropertyCollection(This,ppPropertyCollection,dwFlags,pszMultiValueName,dwLabelCount,ppszLabels,fAnyLabelMatches) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IContactProperties_INTERFACE_DEFINED__ */


#ifndef __IContact_INTERFACE_DEFINED__
#define __IContact_INTERFACE_DEFINED__

/* interface IContact */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IContact;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F941B671-BDA7-4f77-884A-F46462F226A7")
    IContact : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetContactID( 
            /* [size_is][string][out][in] */ __RPC__inout_ecount_full_string(cchContactID) LPWSTR pszContactID,
            /* [in] */ DWORD cchContactID,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchContactIDRequired) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPath( 
            /* [size_is][string][out][in] */ __RPC__inout_ecount_full_string(cchPath) LPWSTR pszPath,
            /* [in] */ DWORD cchPath,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchPathRequired) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CommitChanges( 
            /* [in] */ DWORD dwCommitFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContactVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IContact * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IContact * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IContact * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetContactID )( 
            __RPC__in IContact * This,
            /* [size_is][string][out][in] */ __RPC__inout_ecount_full_string(cchContactID) LPWSTR pszContactID,
            /* [in] */ DWORD cchContactID,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchContactIDRequired);
        
        HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            __RPC__in IContact * This,
            /* [size_is][string][out][in] */ __RPC__inout_ecount_full_string(cchPath) LPWSTR pszPath,
            /* [in] */ DWORD cchPath,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchPathRequired);
        
        HRESULT ( STDMETHODCALLTYPE *CommitChanges )( 
            __RPC__in IContact * This,
            /* [in] */ DWORD dwCommitFlags);
        
        END_INTERFACE
    } IContactVtbl;

    interface IContact
    {
        CONST_VTBL struct IContactVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContact_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IContact_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IContact_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IContact_GetContactID(This,pszContactID,cchContactID,pdwcchContactIDRequired)	\
    ( (This)->lpVtbl -> GetContactID(This,pszContactID,cchContactID,pdwcchContactIDRequired) ) 

#define IContact_GetPath(This,pszPath,cchPath,pdwcchPathRequired)	\
    ( (This)->lpVtbl -> GetPath(This,pszPath,cchPath,pdwcchPathRequired) ) 

#define IContact_CommitChanges(This,dwCommitFlags)	\
    ( (This)->lpVtbl -> CommitChanges(This,dwCommitFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IContact_INTERFACE_DEFINED__ */


#ifndef __IContactPropertyCollection_INTERFACE_DEFINED__
#define __IContactPropertyCollection_INTERFACE_DEFINED__

/* interface IContactPropertyCollection */
/* [unique][helpstring][uuid][object] */ 

#define CGD_UNKNOWN_PROPERTY     0x00000000
#define CGD_STRING_PROPERTY      0x00000001
#define CGD_DATE_PROPERTY        0x00000002
#define CGD_BINARY_PROPERTY      0x00000004
#define CGD_ARRAY_NODE           0x00000008

EXTERN_C const IID IID_IContactPropertyCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ffd3adf8-fa64-4328-b1b6-2e0db509cb3c")
    IContactPropertyCollection : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyName( 
            /* [unique][size_is][string][unique][out][in] */ __RPC__inout_ecount_full_opt_string(cchPropertyName) LPWSTR pszPropertyName,
            /* [in] */ DWORD cchPropertyName,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchPropertyNameRequired) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyType( 
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyVersion( 
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwVersion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyModificationDate( 
            /* [unique][out][in] */ __RPC__inout_opt FILETIME *pftModificationDate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyArrayElementID( 
            /* [unique][size_is][string][unique][out][in] */ __RPC__inout_ecount_full_opt_string(cchArrayElementID) LPWSTR pszArrayElementID,
            /* [in] */ DWORD cchArrayElementID,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchArrayElementIDRequired) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IContactPropertyCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IContactPropertyCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IContactPropertyCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IContactPropertyCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IContactPropertyCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IContactPropertyCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyName )( 
            __RPC__in IContactPropertyCollection * This,
            /* [unique][size_is][string][unique][out][in] */ __RPC__inout_ecount_full_opt_string(cchPropertyName) LPWSTR pszPropertyName,
            /* [in] */ DWORD cchPropertyName,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchPropertyNameRequired);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyType )( 
            __RPC__in IContactPropertyCollection * This,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwType);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyVersion )( 
            __RPC__in IContactPropertyCollection * This,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyModificationDate )( 
            __RPC__in IContactPropertyCollection * This,
            /* [unique][out][in] */ __RPC__inout_opt FILETIME *pftModificationDate);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyArrayElementID )( 
            __RPC__in IContactPropertyCollection * This,
            /* [unique][size_is][string][unique][out][in] */ __RPC__inout_ecount_full_opt_string(cchArrayElementID) LPWSTR pszArrayElementID,
            /* [in] */ DWORD cchArrayElementID,
            /* [unique][out][in] */ __RPC__inout_opt DWORD *pdwcchArrayElementIDRequired);
        
        END_INTERFACE
    } IContactPropertyCollectionVtbl;

    interface IContactPropertyCollection
    {
        CONST_VTBL struct IContactPropertyCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IContactPropertyCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IContactPropertyCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IContactPropertyCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IContactPropertyCollection_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IContactPropertyCollection_Next(This)	\
    ( (This)->lpVtbl -> Next(This) ) 

#define IContactPropertyCollection_GetPropertyName(This,pszPropertyName,cchPropertyName,pdwcchPropertyNameRequired)	\
    ( (This)->lpVtbl -> GetPropertyName(This,pszPropertyName,cchPropertyName,pdwcchPropertyNameRequired) ) 

#define IContactPropertyCollection_GetPropertyType(This,pdwType)	\
    ( (This)->lpVtbl -> GetPropertyType(This,pdwType) ) 

#define IContactPropertyCollection_GetPropertyVersion(This,pdwVersion)	\
    ( (This)->lpVtbl -> GetPropertyVersion(This,pdwVersion) ) 

#define IContactPropertyCollection_GetPropertyModificationDate(This,pftModificationDate)	\
    ( (This)->lpVtbl -> GetPropertyModificationDate(This,pftModificationDate) ) 

#define IContactPropertyCollection_GetPropertyArrayElementID(This,pszArrayElementID,cchArrayElementID,pdwcchArrayElementIDRequired)	\
    ( (This)->lpVtbl -> GetPropertyArrayElementID(This,pszArrayElementID,cchArrayElementID,pdwcchArrayElementIDRequired) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IContactPropertyCollection_INTERFACE_DEFINED__ */



#ifndef __CONTACT_LIBRARY_DEFINED__
#define __CONTACT_LIBRARY_DEFINED__

/* library CONTACT */
/* [version][lcid][helpstring][uuid] */ 


EXTERN_C const IID LIBID_CONTACT;

EXTERN_C const CLSID CLSID_Contact;

#ifdef __cplusplus

class DECLSPEC_UUID("61b68808-8eee-4fd1-acb8-3d804c8db056")
Contact;
#endif

EXTERN_C const CLSID CLSID_ContactManager;

#ifdef __cplusplus

class DECLSPEC_UUID("7165c8ab-af88-42bd-86fd-5310b4285a02")
ContactManager;
#endif
#endif /* __CONTACT_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IcmpAPI.h ===
/*++

Copyright (c) 1991-1999  Microsoft Corporation

Module Name:

    icmpapi.h

Abstract:

    Declarations for the Win32 ICMP Echo request API.

Author:

    Portable Systems Group 30-December-1993

Revision History:


Notes:

--*/

#ifndef _ICMP_INCLUDED_
#define _ICMP_INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif

//
// Exported Routines.
//

//++
//
// Routine Name:
//
//     IcmpCreateFile
//
// Routine Description:
//
//     Opens a handle on which ICMP Echo Requests can be issued.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     An open file handle or INVALID_HANDLE_VALUE. Extended error information
//     is available by calling GetLastError().
//
//--

HANDLE
WINAPI
IcmpCreateFile(
    VOID
    );

#if (NTDDI_VERSION >= NTDDI_WINXP)
//++
//
// Routine Name:
//
//     Icmp6CreateFile
//
// Routine Description:
//
//     Opens a handle on which ICMPv6 Echo Requests can be issued.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     An open file handle or INVALID_HANDLE_VALUE. Extended error information
//     is available by calling GetLastError().
//
//--

HANDLE
WINAPI
Icmp6CreateFile(
    VOID
    );
#endif

//++
//
// Routine Name:
//
//     IcmpCloseHandle
//
// Routine Description:
//
//     Closes a handle opened by ICMPOpenFile.
//
// Arguments:
//
//     IcmpHandle  - The handle to close.
//
// Return Value:
//
//     TRUE if the handle was closed successfully, otherwise FALSE. Extended
//     error information is available by calling GetLastError().
//
//--

BOOL
WINAPI
IcmpCloseHandle(
    __in HANDLE  IcmpHandle
    );

//++
//
// Routine Name:
//
//     IcmpSendEcho
//
// Routine Description:
//
//     Sends an ICMP Echo request and returns any replies. The
//     call returns when the timeout has expired or the reply buffer
//     is filled.
//
// Arguments:
//
//     IcmpHandle           - An open handle returned by ICMPCreateFile.
//
//     DestinationAddress   - The destination of the echo request.
//
//     RequestData          - A buffer containing the data to send in the
//                            request.
//
//     RequestSize          - The number of bytes in the request data buffer.
//
//     RequestOptions       - Pointer to the IP header options for the request.
//                            May be NULL.
//
//     ReplyBuffer          - A buffer to hold any replies to the request.
//                            On return, the buffer will contain an array of
//                            ICMP_ECHO_REPLY structures followed by the
//                            options and data for the replies. The buffer
//                            should be large enough to hold at least one
//                            ICMP_ECHO_REPLY structure plus
//                            MAX(RequestSize, 8) bytes of data since an ICMP
//                            error message contains 8 bytes of data.
//
//     ReplySize            - The size in bytes of the reply buffer.
//
//     Timeout              - The time in milliseconds to wait for replies.
//
// Return Value:
//
//     Returns the number of ICMP_ECHO_REPLY structures stored in ReplyBuffer.
//     The status of each reply is contained in the structure. If the return
//     value is zero, extended error information is available via
//     GetLastError().
//
//--

DWORD
WINAPI
IcmpSendEcho(
    __in                       HANDLE                   IcmpHandle,
    __in                       IPAddr                   DestinationAddress,
    __in_bcount(RequestSize)   LPVOID                   RequestData,
    __in                       WORD                     RequestSize,
    __in_opt                   PIP_OPTION_INFORMATION   RequestOptions,
    __out_bcount(ReplySize)    LPVOID                   ReplyBuffer,
    __in                       DWORD                    ReplySize,
    __in                       DWORD                    Timeout
    );


//++
//
// Routine Description:
//
//    Sends an ICMP Echo request and the call returns either immediately
//    (if Event or ApcRoutine is NonNULL) or returns after the specified
//    timeout.   The ReplyBuffer contains the ICMP responses, if any.
//
// Arguments:
//
//    IcmpHandle           - An open handle returned by ICMPCreateFile.
//
//    Event                - This is the event to be signalled whenever an IcmpResponse
//                           comes in.
//
//    ApcRoutine           - This routine would be called when the calling thread
//                           is in an alertable thread and an ICMP reply comes in.
//
//    ApcContext           - This optional parameter is given to the ApcRoutine when
//                           this call succeeds.
//
//    DestinationAddress   - The destination of the echo request.
//
//    RequestData          - A buffer containing the data to send in the
//                           request.
//
//    RequestSize          - The number of bytes in the request data buffer.
//
//    RequestOptions       - Pointer to the IP header options for the request.
//                           May be NULL.
//
//    ReplyBuffer          - A buffer to hold any replies to the request.
//                           On return, the buffer will contain an array of
//                           ICMP_ECHO_REPLY structures followed by options
//                           and data. The buffer must be large enough to
//                           hold at least one ICMP_ECHO_REPLY structure.
//                           It should be large enough to also hold
//                           8 more bytes of data - this is the size of
//                           an ICMP error message.
//
//    ReplySize            - The size in bytes of the reply buffer.
//
//    Timeout              - The time in milliseconds to wait for replies.
//                           This is NOT used if ApcRoutine is not NULL or if Event
//                           is not NULL.
//
// Return Value:
//
//    Returns the number of replies received and stored in ReplyBuffer. If
//    the return value is zero, extended error information is available
//    via GetLastError().
//
// Remarks:
//
//    On NT platforms,
//    If used Asynchronously (either ApcRoutine or Event is specified), then
//    ReplyBuffer and ReplySize are still needed.  This is where the response
//    comes in.
//    ICMP Response data is copied to the ReplyBuffer provided, and the caller of
//    this function has to parse it asynchronously.  The function IcmpParseReply
//    is provided for this purpose.
//
//    On non-NT platforms,
//    Event, ApcRoutine and ApcContext are IGNORED.
//
//--


DWORD
WINAPI
IcmpSendEcho2(
    __in                        HANDLE                   IcmpHandle,
    __in_opt                    HANDLE                   Event,
#ifdef PIO_APC_ROUTINE_DEFINED
    __in_opt                    PIO_APC_ROUTINE          ApcRoutine,
#else
    __in_opt                    FARPROC                  ApcRoutine,
#endif
    __in_opt                    PVOID                    ApcContext,
    __in                        IPAddr                   DestinationAddress,
    __in_bcount(RequestSize)    LPVOID                   RequestData,
    __in                        WORD                     RequestSize,
    __in_opt                    PIP_OPTION_INFORMATION   RequestOptions,
    __out_bcount(ReplySize)     LPVOID                   ReplyBuffer,
    __in                        DWORD                    ReplySize,
    __in                        DWORD                    Timeout
    );

#if (NTDDI_VERSION >= NTDDI_VISTASP1)
DWORD
WINAPI
IcmpSendEcho2Ex(
    __in                       HANDLE                   IcmpHandle,
    __in_opt                   HANDLE                   Event,
#ifdef PIO_APC_ROUTINE_DEFINED
    __in_opt                   PIO_APC_ROUTINE          ApcRoutine,
#else
    __in_opt                   FARPROC                  ApcRoutine,
#endif
    __in_opt                   PVOID                    ApcContext,
    __in                       IPAddr                   SourceAddress,
    __in                       IPAddr                   DestinationAddress,
    __in_bcount(RequestSize)   LPVOID                   RequestData,
    __in                       WORD                     RequestSize,
    __in_opt                   PIP_OPTION_INFORMATION   RequestOptions,
    __out_bcount(ReplySize)    LPVOID                   ReplyBuffer,
    __in                       DWORD                    ReplySize,
    __in                       DWORD                    Timeout
    );
#endif

#if (NTDDI_VERSION >= NTDDI_WINXP)
DWORD
WINAPI
Icmp6SendEcho2(
    __in                     HANDLE                   IcmpHandle,
    __in_opt                 HANDLE                   Event,
#ifdef PIO_APC_ROUTINE_DEFINED
    __in_opt                 PIO_APC_ROUTINE          ApcRoutine,
#else
    __in_opt                 FARPROC                  ApcRoutine,
#endif
    __in_opt                 PVOID                    ApcContext,
    __in                     struct sockaddr_in6     *SourceAddress,
    __in                     struct sockaddr_in6     *DestinationAddress,
    __in_bcount(RequestSize) LPVOID                   RequestData,
    __in                     WORD                     RequestSize,
    __in_opt                 PIP_OPTION_INFORMATION   RequestOptions,
    __out_bcount(ReplySize)  LPVOID                   ReplyBuffer,
    __in                     DWORD                    ReplySize,
    __in                     DWORD                    Timeout
    );
#endif

//++
//
// Routine Description:
//
//    Parses the reply buffer provided and returns the number of ICMP responses found.
//
// Arguments:
//
//    ReplyBuffer            - This must be the same buffer that was passed to IcmpSendEcho2
//                             This is rewritten to hold an array of ICMP_ECHO_REPLY structures.
//                             (i.e. the type is PICMP_ECHO_REPLY).
//
//    ReplySize              - This must be the size of the above buffer.
//
// Return Value:
//    Returns the number of ICMP responses found.  If there is an errors, return value is
//    zero.  The error can be determined by a call to GetLastError.
//
// Remarks:
//    This function SHOULD NOT BE USED on a reply buffer that was passed to SendIcmpEcho.
//    SendIcmpEcho actually parses the buffer before returning back to the user.  This function
//    is meant to be used only with SendIcmpEcho2.
//--

DWORD
WINAPI
IcmpParseReplies(
    __in_bcount(ReplySize)   LPVOID                   ReplyBuffer,
    __in                     DWORD                    ReplySize
    );

#if (NTDDI_VERSION >= NTDDI_WINXP)
DWORD
WINAPI
Icmp6ParseReplies(
    __in_bcount(ReplySize)   LPVOID                   ReplyBuffer,
    __in                     DWORD                    ReplySize
    );
#endif

#ifdef __cplusplus
}
#endif

#endif // _ICMP_INCLUDED_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\icwcfg.h ===
/********************************************************************

  ICWCFG.H

  Copyright(c) Microsoft Corporation, 1996-1998

  *** N O T   F O R   E X T E R N A L   R E L E A S E *******
  *
  * This header file is not intended for distribution outside Microsoft.
  *
  ***********************************************************

  Header file for Internet Connection Wizard external configuration
  routines found in INETCFG.DLL.

  Routines:

  CheckConnectionWizard - Checks which parts of ICW are installed
		and if it has been run before.  It optionally will start
		either the full or manual path of ICW if it is insalled
		but has not been run before.

  History:	10/22/96	Created
		10/24/96	Added defines and typedefs
		2/25/97		Added CreateDirectoryService -- jmazner
		4/24/97		Removed InetCreate*, these are now owned
					by the Account Manager -- jmazner

  Support:	This header file (and INETCFG.DLL) is supported by the
			Internet Connection Wizard team (alias icwcore).  Please
			do not modify this directly.

*********************************************************************/

#ifndef _ICWCFG_H_

//
// defines
//

// ICW registry settings

// HKEY_CURRENT_USER
#define ICW_REGPATHSETTINGS	"Software\\Microsoft\\Internet Connection Wizard"
#define ICW_REGKEYCOMPLETED	"Completed"

// Maximum field lengths
#define ICW_MAX_ACCTNAME	256
#define ICW_MAX_PASSWORD	256	// PWLEN
#define ICW_MAX_LOGONNAME	256	// UNLEN
#define ICW_MAX_SERVERNAME	64
#define ICW_MAX_RASNAME		256	// RAS_MaxEntryName
#define ICW_MAX_EMAILNAME	64
#define ICW_MAX_EMAILADDR	128

// Bit-mapped flags

// CheckConnectionWizard input flags
#define ICW_CHECKSTATUS		0x0001

#define ICW_LAUNCHFULL		0x0100
#define ICW_LAUNCHMANUAL	0x0200
#define ICW_USE_SHELLNEXT	0x0400
#define ICW_FULL_SMARTSTART	0x0800

// CheckConnectionWizard output flags
#define ICW_FULLPRESENT		0x0001
#define ICW_MANUALPRESENT	0x0002
#define ICW_ALREADYRUN		0x0004

#define ICW_LAUNCHEDFULL	0x0100
#define ICW_LAUNCHEDMANUAL	0x0200

// InetCreateMailNewsAccount input flags
#define ICW_USEDEFAULTS		0x0001

#ifdef __cplusplus
extern "C"
{
#endif // __cplusplus


//
// external function typedefs
//
typedef DWORD	(WINAPI *PFNCHECKCONNECTIONWIZARD) (DWORD, LPDWORD);
typedef DWORD	(WINAPI *PFNSETSHELLNEXT) (__in PSTR);

//
// external function declarations
//
DWORD WINAPI CheckConnectionWizard(DWORD, LPDWORD);

DWORD
WINAPI
SetShellNext(
    __in PSTR szShellNext
    );


#ifdef __cplusplus
}
#endif // __cplusplus

#endif // _ICWCFG_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IdentityStore.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for identitystore.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __identitystore_h__
#define __identitystore_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IIdentityStore_FWD_DEFINED__
#define __IIdentityStore_FWD_DEFINED__
typedef interface IIdentityStore IIdentityStore;
#endif 	/* __IIdentityStore_FWD_DEFINED__ */


#ifndef __AsyncIIdentityStore_FWD_DEFINED__
#define __AsyncIIdentityStore_FWD_DEFINED__
typedef interface AsyncIIdentityStore AsyncIIdentityStore;
#endif 	/* __AsyncIIdentityStore_FWD_DEFINED__ */


#ifndef __CoClassIdentityStore_FWD_DEFINED__
#define __CoClassIdentityStore_FWD_DEFINED__

#ifdef __cplusplus
typedef class CoClassIdentityStore CoClassIdentityStore;
#else
typedef struct CoClassIdentityStore CoClassIdentityStore;
#endif /* __cplusplus */

#endif 	/* __CoClassIdentityStore_FWD_DEFINED__ */


#ifndef __CIdentityProfileHandler_FWD_DEFINED__
#define __CIdentityProfileHandler_FWD_DEFINED__

#ifdef __cplusplus
typedef class CIdentityProfileHandler CIdentityProfileHandler;
#else
typedef struct CIdentityProfileHandler CIdentityProfileHandler;
#endif /* __cplusplus */

#endif 	/* __CIdentityProfileHandler_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "propsys.h"
#include "IdentityCommon.h"

#ifdef __cplusplus
extern "C"{
#endif 


#ifndef __IIdentityStore_INTERFACE_DEFINED__
#define __IIdentityStore_INTERFACE_DEFINED__

/* interface IIdentityStore */
/* [unique][helpstring][async_uuid][uuid][object] */ 


EXTERN_C const IID IID_IIdentityStore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("df586fa5-6f35-44f1-b209-b38e169772eb")
    IIdentityStore : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ __RPC__out DWORD *pdwProviders) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAt( 
            /* [in] */ const DWORD dwProvider,
            /* [unique][out][in] */ __RPC__inout_opt GUID *pProvGuid,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppIdentityProvider) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddToCache( 
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [in] */ __RPC__in REFGUID ProviderGUID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ConvertToSid( 
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [in] */ __RPC__in REFGUID ProviderGUID,
            /* [in] */ USHORT cbSid,
            /* [size_is][unique][out][in] */ __RPC__inout_ecount_full_opt(cbSid) BYTE *pSid,
            /* [out] */ __RPC__out USHORT *pcbRequiredSid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumerateIdentities( 
            /* [in] */ const IDENTITY_TYPE eIdentityType,
            /* [unique][in] */ __RPC__in_opt const PROPERTYKEY *pFilterkey,
            /* [unique][in] */ __RPC__in_opt const PROPVARIANT *pFilterPropVarValue,
            /* [out] */ __RPC__deref_out_opt IEnumUnknown **ppIdentityEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IIdentityStoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IIdentityStore * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IIdentityStore * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IIdentityStore * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            __RPC__in IIdentityStore * This,
            /* [out] */ __RPC__out DWORD *pdwProviders);
        
        HRESULT ( STDMETHODCALLTYPE *GetAt )( 
            __RPC__in IIdentityStore * This,
            /* [in] */ const DWORD dwProvider,
            /* [unique][out][in] */ __RPC__inout_opt GUID *pProvGuid,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppIdentityProvider);
        
        HRESULT ( STDMETHODCALLTYPE *AddToCache )( 
            __RPC__in IIdentityStore * This,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [in] */ __RPC__in REFGUID ProviderGUID);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertToSid )( 
            __RPC__in IIdentityStore * This,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [in] */ __RPC__in REFGUID ProviderGUID,
            /* [in] */ USHORT cbSid,
            /* [size_is][unique][out][in] */ __RPC__inout_ecount_full_opt(cbSid) BYTE *pSid,
            /* [out] */ __RPC__out USHORT *pcbRequiredSid);
        
        HRESULT ( STDMETHODCALLTYPE *EnumerateIdentities )( 
            __RPC__in IIdentityStore * This,
            /* [in] */ const IDENTITY_TYPE eIdentityType,
            /* [unique][in] */ __RPC__in_opt const PROPERTYKEY *pFilterkey,
            /* [unique][in] */ __RPC__in_opt const PROPVARIANT *pFilterPropVarValue,
            /* [out] */ __RPC__deref_out_opt IEnumUnknown **ppIdentityEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IIdentityStore * This);
        
        END_INTERFACE
    } IIdentityStoreVtbl;

    interface IIdentityStore
    {
        CONST_VTBL struct IIdentityStoreVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IIdentityStore_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IIdentityStore_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IIdentityStore_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IIdentityStore_GetCount(This,pdwProviders)	\
    ( (This)->lpVtbl -> GetCount(This,pdwProviders) ) 

#define IIdentityStore_GetAt(This,dwProvider,pProvGuid,ppIdentityProvider)	\
    ( (This)->lpVtbl -> GetAt(This,dwProvider,pProvGuid,ppIdentityProvider) ) 

#define IIdentityStore_AddToCache(This,lpszUniqueID,ProviderGUID)	\
    ( (This)->lpVtbl -> AddToCache(This,lpszUniqueID,ProviderGUID) ) 

#define IIdentityStore_ConvertToSid(This,lpszUniqueID,ProviderGUID,cbSid,pSid,pcbRequiredSid)	\
    ( (This)->lpVtbl -> ConvertToSid(This,lpszUniqueID,ProviderGUID,cbSid,pSid,pcbRequiredSid) ) 

#define IIdentityStore_EnumerateIdentities(This,eIdentityType,pFilterkey,pFilterPropVarValue,ppIdentityEnum)	\
    ( (This)->lpVtbl -> EnumerateIdentities(This,eIdentityType,pFilterkey,pFilterPropVarValue,ppIdentityEnum) ) 

#define IIdentityStore_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IIdentityStore_INTERFACE_DEFINED__ */


#ifndef __AsyncIIdentityStore_INTERFACE_DEFINED__
#define __AsyncIIdentityStore_INTERFACE_DEFINED__

/* interface AsyncIIdentityStore */
/* [uuid][unique][helpstring][object] */ 


EXTERN_C const IID IID_AsyncIIdentityStore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eefa1616-48de-4872-aa64-6e6206535a51")
    AsyncIIdentityStore : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Begin_GetCount( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_GetCount( 
            /* [out] */ __RPC__out DWORD *pdwProviders) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_GetAt( 
            /* [in] */ const DWORD dwProvider,
            /* [unique][out][in] */ __RPC__inout_opt GUID *pProvGuid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_GetAt( 
            /* [unique][out][in] */ __RPC__inout_opt GUID *pProvGuid,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppIdentityProvider) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_AddToCache( 
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [in] */ __RPC__in REFGUID ProviderGUID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_AddToCache( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_ConvertToSid( 
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [in] */ __RPC__in REFGUID ProviderGUID,
            /* [in] */ USHORT cbSid,
            /* [size_is][unique][out][in] */ __RPC__inout_xcount_full_opt(cbSid) BYTE *pSid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_ConvertToSid( 
            /* [size_is][unique][out][in] */ __RPC__inout_xcount_full_opt(cbSid) BYTE *pSid,
            /* [out] */ __RPC__out USHORT *pcbRequiredSid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_EnumerateIdentities( 
            /* [in] */ const IDENTITY_TYPE eIdentityType,
            /* [unique][in] */ __RPC__in_opt const PROPERTYKEY *pFilterkey,
            /* [unique][in] */ __RPC__in_opt const PROPVARIANT *pFilterPropVarValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_EnumerateIdentities( 
            /* [out] */ __RPC__deref_out_opt IEnumUnknown **ppIdentityEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_Reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AsyncIIdentityStoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in AsyncIIdentityStore * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in AsyncIIdentityStore * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in AsyncIIdentityStore * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_GetCount )( 
            __RPC__in AsyncIIdentityStore * This);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_GetCount )( 
            __RPC__in AsyncIIdentityStore * This,
            /* [out] */ __RPC__out DWORD *pdwProviders);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_GetAt )( 
            __RPC__in AsyncIIdentityStore * This,
            /* [in] */ const DWORD dwProvider,
            /* [unique][out][in] */ __RPC__inout_opt GUID *pProvGuid);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_GetAt )( 
            __RPC__in AsyncIIdentityStore * This,
            /* [unique][out][in] */ __RPC__inout_opt GUID *pProvGuid,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppIdentityProvider);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_AddToCache )( 
            __RPC__in AsyncIIdentityStore * This,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [in] */ __RPC__in REFGUID ProviderGUID);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_AddToCache )( 
            __RPC__in AsyncIIdentityStore * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_ConvertToSid )( 
            __RPC__in AsyncIIdentityStore * This,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [in] */ __RPC__in REFGUID ProviderGUID,
            /* [in] */ USHORT cbSid,
            /* [size_is][unique][out][in] */ __RPC__inout_xcount_full_opt(cbSid) BYTE *pSid);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_ConvertToSid )( 
            __RPC__in AsyncIIdentityStore * This,
            /* [size_is][unique][out][in] */ __RPC__inout_xcount_full_opt(cbSid) BYTE *pSid,
            /* [out] */ __RPC__out USHORT *pcbRequiredSid);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_EnumerateIdentities )( 
            __RPC__in AsyncIIdentityStore * This,
            /* [in] */ const IDENTITY_TYPE eIdentityType,
            /* [unique][in] */ __RPC__in_opt const PROPERTYKEY *pFilterkey,
            /* [unique][in] */ __RPC__in_opt const PROPVARIANT *pFilterPropVarValue);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_EnumerateIdentities )( 
            __RPC__in AsyncIIdentityStore * This,
            /* [out] */ __RPC__deref_out_opt IEnumUnknown **ppIdentityEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_Reset )( 
            __RPC__in AsyncIIdentityStore * This);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_Reset )( 
            __RPC__in AsyncIIdentityStore * This);
        
        END_INTERFACE
    } AsyncIIdentityStoreVtbl;

    interface AsyncIIdentityStore
    {
        CONST_VTBL struct AsyncIIdentityStoreVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AsyncIIdentityStore_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AsyncIIdentityStore_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AsyncIIdentityStore_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AsyncIIdentityStore_Begin_GetCount(This)	\
    ( (This)->lpVtbl -> Begin_GetCount(This) ) 

#define AsyncIIdentityStore_Finish_GetCount(This,pdwProviders)	\
    ( (This)->lpVtbl -> Finish_GetCount(This,pdwProviders) ) 

#define AsyncIIdentityStore_Begin_GetAt(This,dwProvider,pProvGuid)	\
    ( (This)->lpVtbl -> Begin_GetAt(This,dwProvider,pProvGuid) ) 

#define AsyncIIdentityStore_Finish_GetAt(This,pProvGuid,ppIdentityProvider)	\
    ( (This)->lpVtbl -> Finish_GetAt(This,pProvGuid,ppIdentityProvider) ) 

#define AsyncIIdentityStore_Begin_AddToCache(This,lpszUniqueID,ProviderGUID)	\
    ( (This)->lpVtbl -> Begin_AddToCache(This,lpszUniqueID,ProviderGUID) ) 

#define AsyncIIdentityStore_Finish_AddToCache(This)	\
    ( (This)->lpVtbl -> Finish_AddToCache(This) ) 

#define AsyncIIdentityStore_Begin_ConvertToSid(This,lpszUniqueID,ProviderGUID,cbSid,pSid)	\
    ( (This)->lpVtbl -> Begin_ConvertToSid(This,lpszUniqueID,ProviderGUID,cbSid,pSid) ) 

#define AsyncIIdentityStore_Finish_ConvertToSid(This,pSid,pcbRequiredSid)	\
    ( (This)->lpVtbl -> Finish_ConvertToSid(This,pSid,pcbRequiredSid) ) 

#define AsyncIIdentityStore_Begin_EnumerateIdentities(This,eIdentityType,pFilterkey,pFilterPropVarValue)	\
    ( (This)->lpVtbl -> Begin_EnumerateIdentities(This,eIdentityType,pFilterkey,pFilterPropVarValue) ) 

#define AsyncIIdentityStore_Finish_EnumerateIdentities(This,ppIdentityEnum)	\
    ( (This)->lpVtbl -> Finish_EnumerateIdentities(This,ppIdentityEnum) ) 

#define AsyncIIdentityStore_Begin_Reset(This)	\
    ( (This)->lpVtbl -> Begin_Reset(This) ) 

#define AsyncIIdentityStore_Finish_Reset(This)	\
    ( (This)->lpVtbl -> Finish_Reset(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AsyncIIdentityStore_INTERFACE_DEFINED__ */



#ifndef __IdentityStoreLib_LIBRARY_DEFINED__
#define __IdentityStoreLib_LIBRARY_DEFINED__

/* library IdentityStoreLib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_IdentityStoreLib;

EXTERN_C const CLSID CLSID_CoClassIdentityStore;

#ifdef __cplusplus

class DECLSPEC_UUID("30d49246-d217-465f-b00b-ac9ddd652eb7")
CoClassIdentityStore;
#endif

EXTERN_C const CLSID CLSID_CIdentityProfileHandler;

#ifdef __cplusplus

class DECLSPEC_UUID("ecf5bf46-e3b6-449a-b56b-43f58f867814")
CIdentityProfileHandler;
#endif
#endif /* __IdentityStoreLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree(     __RPC__in unsigned long *, __RPC__in LPSAFEARRAY * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree64(     __RPC__in unsigned long *, __RPC__in LPSAFEARRAY * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IdentityCommon.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for identitycommon.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __identitycommon_h__
#define __identitycommon_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_identitycommon_0000_0000 */
/* [local] */ 

typedef 
enum _IdentityType
    {	IDENTITIES_ALL	= 0,
	IDENTITIES_ME_ONLY	= 0x1
    } 	IDENTITY_TYPE;



extern RPC_IF_HANDLE __MIDL_itf_identitycommon_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_identitycommon_0000_0000_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\icontactproperties.h ===
/**************************************************************************\
    Copyright Microsoft Corporation. All Rights Reserved.
\**************************************************************************/


#ifndef _CONTACT_PROPERTIES_H_
#define _CONTACT_PROPERTIES_H_


// ===================================================================
// Windows contact schema
//
// DESCRIPTION:
//      This defines how the contact schema is used to read and write
//  contact properties via IContactProperties.
//
//
// STRUCTURE:
//      Contact properties fall into one of two categories:
//
//  Category 1 - Single Value: These properties have a single simple value
//                      and don't require a hierarchy structure.
//
//  Category 2 - Hierarchical: These properties have multiple values for any contact
//                      and require labeling to differentiate individual values.
//
//                      PhoneNumber is one example of this type of property
//                      Any given contact can have one or more home, work, and mobile phone numbers.
//
//
// PROPERTY EXTENSIBILITY:
//      All applications that use contacts need to have additional data available
//      on contacts that the base schema does not provide for.
//
//      There are two ways supported by IContactProperties to extend the contact schema.
//
//      1) Labels (arbitrary strings) can be applied to any existing OS contact array node.
//          Ex: phoneNumbers/PhoneNumber[1] can be labeled with the two labels: Preferred and Business.
//
//              The set of built-in labels for all multi value properties are:
//                    Preferred
//                    Personal
//                    Business
//                    Other
//
//                Some collections can have more labels set (PhoneNumber can have Mobile, Fax, ...)
//
//              Additional labels can be set.  Custom labels must be in the form of URIs.
//
//              Manipulation of labels can be done with IContactProperties::GetLabel / SetLabel / DeleteLabels
//
//              Filtering of data contact can be done with IContactProperties::GetPropertyCollection
//
//      2) New contact properties and array nodes can be defined by an application.
//            The data contained in these properties can be enumerated by other users of IContactProperties
//
//          To create a new property for an application, the same interface is used as standard properties.
//            Use the same property Set functions as built in properties.  The caller must prepend
//            a string with a namespace (in braces) for the contact property.
//
//              **NB: make sure the selected namespace is unique to avoid conflicts with other applications**
//
//           For the application custom.exe to Get or Set a new string property, use:
//              ex:   [CustomNameSpace]CustomStringProperty
//
//           Creating new multivalue properties is also supported.
//            The above syntax is extended to include an array node name
//            for the the call to IContactProperties::CreateArrayNode
//
//              ex:   [CustomNameSpace:CustomArrayNodeName]customArrayName
//
//            CreateArrayNode will return the new property name (as always) in the outbound arguments.
//
//===================================================================

// ===================================================================
// Single Value properties
//
// DESCRIPTION:
//      These properties are simple and have no hierarchy.
//

//
// String properties
//

// free text content
#define CONTACTPROP_PUB_NOTES                       L"Notes"

// contact's email program
#define CONTACTPROP_PUB_MAILER                      L"Mailer"
// ProgID
#define CONTACTPROP_PUB_PROGID                      L"ProgID"

// gender of contact
// Chooose one of L"Male", L"Female", L"Unspecified" (default)
#define CONTACTPROP_PUB_GENDER                      L"Gender"

#define     CONTACTPROP_PUB_GENDER_UNSPECIFIED          L"Unspecified"
#define     CONTACTPROP_PUB_GENDER_MALE                 L"Male"
#define     CONTACTPROP_PUB_GENDER_FEMALE               L"Female"

//
// DateTime Properties
//

// The date and time the contact was created in the system
#define CONTACTPROP_PUB_CREATIONDATE                L"CreationDate"



// ===================================================================
// Hierarchical properties
//
// DESCRIPTION:
//      These properties contain many values differentiated by labels
//
//      Individual properties are accessed via IContactProperties by index
//
//      examples property names include:
//          PhoneNumberCollection/PhoneNumber[1]/Number
//              for the 1st phone number on the contact
//
//          EmailAddressCollection/EmailAddress[4]/Address
//              for the 4th email address on the contact
//
//      Labels differentiate second level entries(L2) entries.
//          Programmatic access for labels is via IContactProperties (see icontact.idl)
//

//
// collection of ContactIDs associated with this contact
//
#define CONTACTPROP_PUB_L1_CONTACTIDCOLLECTION      L"ContactIDCollection"
// an entry in the collection of IDs
#define     CONTACTPROP_PUB_L2_CONTACTID                L"/ContactID"
// one of the unique identifiers for this contact (as a string)
#define         CONTACTPROP_PUB_L3_VALUE                    L"/Value"

//
// collection of names associated with this contact
//
#define CONTACTPROP_PUB_L1_NAMECOLLECTION           L"NameCollection"
// an entry in the collection of names
#define     CONTACTPROP_PUB_L2_NAME                     L"/Name"

//
// Contact data related to names
//

// as displayed
#define CONTACTPROP_PUB_L3_FORMATTEDNAME                    L"/FormattedName"
// as pronounced
#define CONTACTPROP_PUB_L3_PHONETIC                         L"/Phonetic"

#define CONTACTPROP_PUB_L3_PREFIX                           L"/Prefix"
#define CONTACTPROP_PUB_L3_TITLE                            L"/Title"
#define CONTACTPROP_PUB_L3_GIVENNAME                        L"/GivenName"
#define CONTACTPROP_PUB_L3_FAMILYNAME                       L"/FamilyName"
#define CONTACTPROP_PUB_L3_MIDDLENAME                       L"/MiddleName"
#define CONTACTPROP_PUB_L3_GENERATION                       L"/Generation"
#define CONTACTPROP_PUB_L3_SUFFIX                           L"/Suffix"
#define CONTACTPROP_PUB_L3_NICKNAME                         L"/NickName"

//
// Contact data relating to positions a contact holds
//
#define CONTACTPROP_PUB_L1_POSITIONCOLLECTION       L"PositionCollection"
// an entry in the collection of names
#define     CONTACTPROP_PUB_L2_POSITION                 L"/Position"

// the organization ex: IEEE
#define CONTACTPROP_PUB_L3_ORGANIZATION                     L"/Organization"
// the company ex: Microsoft
#define CONTACTPROP_PUB_L3_COMPANY                          L"/Company"
// the department ex: Windows
#define CONTACTPROP_PUB_L3_DEPARTMENT                       L"/Department"
// the office ex: Building A / Office 1234
#define CONTACTPROP_PUB_L3_OFFICE                           L"/Office"
// any job title ex: Software Engineer
#define CONTACTPROP_PUB_L3_JOB_TITLE                        L"/JobTitle"
// the line of work ex: Engineering
#define CONTACTPROP_PUB_L3_PROFESSION                       L"/Profession"
// the role in the organization ex: Quality Assurance
#define CONTACTPROP_PUB_L3_ROLE                             L"/Role"



//
// people associated with the contact
//
#define CONTACTPROP_PUB_L1_PERSONCOLLECTION         L"PersonCollection"
// entry in the collection
#define     CONTACTPROP_PUB_L2_PERSON                   L"/Person"
//
// Use labels to indicate the relationship to contact
// ex:
//      wab:Spouse
//      wab:Child
//      wab:Manager
//      wab:Assistant

// person's formatted (display) name - (as string)
#define CONTACTPROP_PUB_L3_FORMATTEDNAME                    L"/FormattedName"

// a unique identifier for this person (optional),
// which may be one of the ContactIDs contained in an IContact 
#define CONTACTPROP_PUB_L3_PERSONID                        L"/PersonID"

//
// calendar dates associated with the contact
//
#define CONTACTPROP_PUB_L1_DATECOLLECTION           L"DateCollection"
// entry in the collection
#define     CONTACTPROP_PUB_L2_DATE                     L"/Date"
//
// Use labels to indicate the type of data being expressed.
// ex: 
//    wab:Birthday - the date of birth for the contact
//    wab:Anniversary - the spouse anniversary date for the contact

// value for this date, as a DateTime
#define         CONTACTPROP_PUB_L3_VALUE                    L"/Value"


//
// email addresses
//
#define CONTACTPROP_PUB_L1_EMAILADDRESSCOLLECTION       L"EmailAddressCollection"
// entry in the collection
#define     CONTACTPROP_PUB_L2_EMAILADDRESS                 L"/EmailAddress"
// example@microsoft.com (as string)
#define             CONTACTPROP_PUB_L3_ADDRESS                  L"/Address"
// type of address (e.g. SMTP, x509)
#define             CONTACTPROP_PUB_L3_TYPE                     L"/Type"


//
// certificate data and thumbprints
//

#define CONTACTPROP_PUB_L1_CERTIFICATECOLLECTION        L"CertificateCollection"
// entry in the collection
#define     CONTACTPROP_PUB_L2_CERTIFICATE                  L"/Certificate"
// certificate value
#define         CONTACTPROP_PUB_L3_VALUE                        L"/Value"
// thumbprint value
#define         CONTACTPROP_PUB_L3_THUMBPRINT                   L"/ThumbPrint"

//
// phone numbers
//
#define CONTACTPROP_PUB_L1_PHONENUMBERCOLLECTION    L"PhoneNumberCollection"
// entry in the collection
#define     CONTACTPROP_PUB_L2_PHONENUMBER              L"/PhoneNumber"
// normal number to display (as string)
#define             CONTACTPROP_PUB_L3_NUMBER               L"/Number"
// alternate number (tty) (as string)
#define             CONTACTPROP_PUB_L3_ALTERNATE            L"/Alternate"


//
// physical addresses
//
#define CONTACTPROP_PUB_L1_PHYSICALADDRESSCOLLECTION    L"PhysicalAddressCollection"
// entry in the collection
#define     CONTACTPROP_PUB_L2_PHYSICALADDRESS              L"/PhysicalAddress"
// the exact data that a mailing label should have
#define             CONTACTPROP_PUB_L3_ADDRESSLABEL             L"/AddressLabel"
// number and street
#define             CONTACTPROP_PUB_L3_STREET                   L"/Street"
// City
#define             CONTACTPROP_PUB_L3_LOCALITY                 L"/Locality"
// State/Providence
#define             CONTACTPROP_PUB_L3_REGION                   L"/Region"
// Zip / PostalCode
#define             CONTACTPROP_PUB_L3_POSTALCODE               L"/PostalCode"
// the country
#define             CONTACTPROP_PUB_L3_COUNTRY                  L"/Country"
// any POBox number
#define             CONTACTPROP_PUB_L3_POBOX                    L"/POBox"
// any extra information
#define             CONTACTPROP_PUB_L3_EXTENDEDADDRESS          L"/ExtendedAddress"

//
// Instant Messaging Addresess and protocols
//
#define CONTACTPROP_PUB_L1_IMADDRESSCOLLECTION              L"IMAddressCollection"
#define     CONTACTPROP_PUB_L2_IMADDRESSENTRY                   L"/IMAddress"
// the identifing data for this ImAddress (ex: username@microsoft.com)
#define         CONTACTPROP_PUB_L3_VALUE                        L"/Value"
// the string protocol used for this ImAddress (ex: Messenger Protocol)
#define         CONTACTPROP_PUB_L3_PROTOCOL                     L"/Protocol"

//
// collection of URLs associated with this contact
//
#define CONTACTPROP_PUB_L1_URLCOLLECTION            L"UrlCollection"
// an entry in the collection of url
#define     CONTACTPROP_PUB_L2_URL                      L"/Url"
// the actual URL data
#define         CONTACTPROP_PUB_L3_VALUE                    L"/Value"

//
// collection of images associated with this contact
//
#define CONTACTPROP_PUB_L1_PHOTOCOLLECTION          L"PhotoCollection"
// an entry in the collection of photos
#define CONTACTPROP_PUB_L2_PHOTO                        L"/Photo"
// an image to use for representing the contact - as binary, with MIME type
#define CONTACTPROP_PUB_L3_VALUE                            L"/Value"
// a URL for retrieving the image - as a string
#define CONTACTPROP_PUB_L3_URL                              L"/Url"



// ===================================================================
//
// Common Labels that may be associated with any contact properties.
//

//
// Labels can also be URIs.  See comment at beginning of this file
//

// NOTE: many entries in a set may have this "Preferred" label set
#define CONTACTLABEL_PUB_PREFERRED                   L"Preferred"

// Home related data
#define CONTACTLABEL_PUB_PERSONAL                    L"Personal"

// Work related data
#define CONTACTLABEL_PUB_BUSINESS                    L"Business"

// other, non specified label
#define CONTACTLABEL_PUB_OTHER                       L"Other"

//
// Labels that can be associated with PhoneNumber elements
//

// number supports voice conversation
#define CONTACTLABEL_PUB_VOICE                       L"Voice"

// mobile phone number
#define CONTACTLABEL_PUB_MOBILE                      L"Mobile"

// PCS support
#define CONTACTLABEL_PUB_PCS                         L"PCS"

// cell phone support
#define CONTACTLABEL_PUB_CELLULAR                    L"Cellular"

// number travel with the Car
#define CONTACTLABEL_PUB_CAR                         L"Car"

// pager number
#define CONTACTLABEL_PUB_PAGER                       L"Pager"

// tty machine
#define CONTACTLABEL_PUB_TTY                         L"TTY"

// fax machine
#define CONTACTLABEL_PUB_FAX                         L"Fax"

// number supports video conversation
#define CONTACTLABEL_PUB_VIDEO                       L"Video"

// number for modem connection
#define CONTACTLABEL_PUB_MODEM                       L"Modem"

// number for BBS connection
#define CONTACTLABEL_PUB_BBS                         L"BBS"

// number for ISDN
#define CONTACTLABEL_PUB_ISDN                        L"ISDN"


//
// Labels that can be associated with Person elements
//

// to indicate this person is allowed to work on behalf of the contact
#define CONTACTLABEL_PUB_AGENT                       L"Agent"

//
// Labels that can be associated with PhysicalAddress elements
//

// a domestic mailing address
#define CONTACTLABEL_PUB_DOMESTIC                    L"Domestic"

// an international mailing address
#define CONTACTLABEL_PUB_INTERNATIONAL               L"International"

// a mailing address which accepts mail
#define CONTACTLABEL_PUB_POSTAL                      L"Postal"

// a mailing address that accepts packages
#define CONTACTLABEL_PUB_PARCEL                      L"Parcel"


//
// Labels that can be associated with Photo elements
//

// an image used to represent the contact
#define CONTACTLABEL_PUB_USERTILE                    L"UserTile"

// a logo associated with the contact (ex: image for organization)
#define CONTACTLABEL_PUB_LOGO                        L"Logo"

//
// windows address book specific labels
//

// for PersonCollection
#define CONTACTLABEL_WAB_SPOUSE                      L"wab:Spouse"
#define CONTACTLABEL_WAB_CHILD                       L"wab:Child"
#define CONTACTLABEL_WAB_MANAGER                     L"wab:Manager"
#define CONTACTLABEL_WAB_ASSISTANT                   L"wab:Assistant"

// for DateCollection 
#define CONTACTLABEL_WAB_BIRTHDAY                    L"wab:Birthday"
#define CONTACTLABEL_WAB_ANNIVERSARY                 L"wab:Anniversary"

// for UrlCollection
#define CONTACTLABEL_WAB_SOCIALNETWORK               L"wab:SocialNetwork"
#define CONTACTLABEL_WAB_SCHOOL                      L"wab:School"
#define CONTACTLABEL_WAB_WISHLIST                    L"wab:WishList"


#endif // _CONTACT_PROPERTIES_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IdentityProvider.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for identityprovider.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __identityprovider_h__
#define __identityprovider_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IIdentityAdvise_FWD_DEFINED__
#define __IIdentityAdvise_FWD_DEFINED__
typedef interface IIdentityAdvise IIdentityAdvise;
#endif 	/* __IIdentityAdvise_FWD_DEFINED__ */


#ifndef __AsyncIIdentityAdvise_FWD_DEFINED__
#define __AsyncIIdentityAdvise_FWD_DEFINED__
typedef interface AsyncIIdentityAdvise AsyncIIdentityAdvise;
#endif 	/* __AsyncIIdentityAdvise_FWD_DEFINED__ */


#ifndef __IIdentityProvider_FWD_DEFINED__
#define __IIdentityProvider_FWD_DEFINED__
typedef interface IIdentityProvider IIdentityProvider;
#endif 	/* __IIdentityProvider_FWD_DEFINED__ */


#ifndef __AsyncIIdentityProvider_FWD_DEFINED__
#define __AsyncIIdentityProvider_FWD_DEFINED__
typedef interface AsyncIIdentityProvider AsyncIIdentityProvider;
#endif 	/* __AsyncIIdentityProvider_FWD_DEFINED__ */


#ifndef __IAssociatedIdentityProvider_FWD_DEFINED__
#define __IAssociatedIdentityProvider_FWD_DEFINED__
typedef interface IAssociatedIdentityProvider IAssociatedIdentityProvider;
#endif 	/* __IAssociatedIdentityProvider_FWD_DEFINED__ */


#ifndef __AsyncIAssociatedIdentityProvider_FWD_DEFINED__
#define __AsyncIAssociatedIdentityProvider_FWD_DEFINED__
typedef interface AsyncIAssociatedIdentityProvider AsyncIAssociatedIdentityProvider;
#endif 	/* __AsyncIAssociatedIdentityProvider_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "propsys.h"
#include "IdentityCommon.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_identityprovider_0000_0000 */
/* [local] */ 

#if 0
#endif // 0

enum tag_IdentityUpdateEvent
    {	IDENTITY_ASSOCIATED	= 0x1,
	IDENTITY_DISASSOCIATED	= 0x2,
	IDENTITY_CREATED	= 0x4,
	IDENTITY_IMPORTED	= 0x8,
	IDENTITY_DELETED	= 0x10,
	IDENTITY_PROPCHANGED	= 0x20
    } ;
#define      IDENTITY_KEYWORD_ASSOCIATED L"associated"
#define      IDENTITY_KEYWORD_LOCAL      L"local"
#define      IDENTITY_KEYWORD_HOMEGROUP  L"homegroup"
DEFINE_GUID(OID_OAssociatedIdentityProviderObject, 0x98c5a3dd, 0xdb68, 0x4f1a, 0x8d, 0x2b, 0x90, 0x79, 0xcd, 0xfe, 0xaf, 0x61);


extern RPC_IF_HANDLE __MIDL_itf_identityprovider_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_identityprovider_0000_0000_v0_0_s_ifspec;

#ifndef __IIdentityAdvise_INTERFACE_DEFINED__
#define __IIdentityAdvise_INTERFACE_DEFINED__

/* interface IIdentityAdvise */
/* [unique][async_uuid][uuid][object] */ 


EXTERN_C const IID IID_IIdentityAdvise;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4e982fed-d14b-440c-b8d6-bb386453d386")
    IIdentityAdvise : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IdentityUpdated( 
            /* [in] */ DWORD dwIdentityUpdateEvents,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IIdentityAdviseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IIdentityAdvise * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IIdentityAdvise * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IIdentityAdvise * This);
        
        HRESULT ( STDMETHODCALLTYPE *IdentityUpdated )( 
            __RPC__in IIdentityAdvise * This,
            /* [in] */ DWORD dwIdentityUpdateEvents,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID);
        
        END_INTERFACE
    } IIdentityAdviseVtbl;

    interface IIdentityAdvise
    {
        CONST_VTBL struct IIdentityAdviseVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IIdentityAdvise_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IIdentityAdvise_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IIdentityAdvise_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IIdentityAdvise_IdentityUpdated(This,dwIdentityUpdateEvents,lpszUniqueID)	\
    ( (This)->lpVtbl -> IdentityUpdated(This,dwIdentityUpdateEvents,lpszUniqueID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IIdentityAdvise_INTERFACE_DEFINED__ */


#ifndef __AsyncIIdentityAdvise_INTERFACE_DEFINED__
#define __AsyncIIdentityAdvise_INTERFACE_DEFINED__

/* interface AsyncIIdentityAdvise */
/* [uuid][unique][object] */ 


EXTERN_C const IID IID_AsyncIIdentityAdvise;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3ab4c8da-d038-4830-8dd9-3253c55a127f")
    AsyncIIdentityAdvise : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Begin_IdentityUpdated( 
            /* [in] */ DWORD dwIdentityUpdateEvents,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_IdentityUpdated( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AsyncIIdentityAdviseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in AsyncIIdentityAdvise * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in AsyncIIdentityAdvise * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in AsyncIIdentityAdvise * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_IdentityUpdated )( 
            __RPC__in AsyncIIdentityAdvise * This,
            /* [in] */ DWORD dwIdentityUpdateEvents,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_IdentityUpdated )( 
            __RPC__in AsyncIIdentityAdvise * This);
        
        END_INTERFACE
    } AsyncIIdentityAdviseVtbl;

    interface AsyncIIdentityAdvise
    {
        CONST_VTBL struct AsyncIIdentityAdviseVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AsyncIIdentityAdvise_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AsyncIIdentityAdvise_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AsyncIIdentityAdvise_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AsyncIIdentityAdvise_Begin_IdentityUpdated(This,dwIdentityUpdateEvents,lpszUniqueID)	\
    ( (This)->lpVtbl -> Begin_IdentityUpdated(This,dwIdentityUpdateEvents,lpszUniqueID) ) 

#define AsyncIIdentityAdvise_Finish_IdentityUpdated(This)	\
    ( (This)->lpVtbl -> Finish_IdentityUpdated(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AsyncIIdentityAdvise_INTERFACE_DEFINED__ */


#ifndef __IIdentityProvider_INTERFACE_DEFINED__
#define __IIdentityProvider_INTERFACE_DEFINED__

/* interface IIdentityProvider */
/* [unique][async_uuid][uuid][object] */ 


EXTERN_C const IID IID_IIdentityProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0d1b9e0c-e8ba-4f55-a81b-bce934b948f5")
    IIdentityProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetIdentityEnum( 
            /* [in] */ const IDENTITY_TYPE eIdentityType,
            /* [unique][in] */ __RPC__in_opt const PROPERTYKEY *pFilterkey,
            /* [unique][in] */ __RPC__in_opt const PROPVARIANT *pFilterPropVarValue,
            /* [out] */ __RPC__deref_out_opt IEnumUnknown **ppIdentityEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ __RPC__in LPCWSTR lpszUserName,
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore,
            /* [in] */ __RPC__in const PROPVARIANT *pKeywordsToAdd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Import( 
            /* [in] */ __RPC__in_opt IPropertyStore *pPropertyStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [in] */ __RPC__in const PROPVARIANT *pKeywordsToDelete) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindByUniqueID( 
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProviderPropertyStore( 
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Advise( 
            /* [in] */ __RPC__in_opt IIdentityAdvise *pIdentityAdvise,
            /* [in] */ DWORD dwIdentityUpdateEvents,
            /* [out] */ __RPC__out DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnAdvise( 
            /* [in] */ const DWORD dwCookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IIdentityProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IIdentityProvider * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IIdentityProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IIdentityProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetIdentityEnum )( 
            __RPC__in IIdentityProvider * This,
            /* [in] */ const IDENTITY_TYPE eIdentityType,
            /* [unique][in] */ __RPC__in_opt const PROPERTYKEY *pFilterkey,
            /* [unique][in] */ __RPC__in_opt const PROPVARIANT *pFilterPropVarValue,
            /* [out] */ __RPC__deref_out_opt IEnumUnknown **ppIdentityEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            __RPC__in IIdentityProvider * This,
            /* [in] */ __RPC__in LPCWSTR lpszUserName,
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore,
            /* [in] */ __RPC__in const PROPVARIANT *pKeywordsToAdd);
        
        HRESULT ( STDMETHODCALLTYPE *Import )( 
            __RPC__in IIdentityProvider * This,
            /* [in] */ __RPC__in_opt IPropertyStore *pPropertyStore);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IIdentityProvider * This,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [in] */ __RPC__in const PROPVARIANT *pKeywordsToDelete);
        
        HRESULT ( STDMETHODCALLTYPE *FindByUniqueID )( 
            __RPC__in IIdentityProvider * This,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore);
        
        HRESULT ( STDMETHODCALLTYPE *GetProviderPropertyStore )( 
            __RPC__in IIdentityProvider * This,
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore);
        
        HRESULT ( STDMETHODCALLTYPE *Advise )( 
            __RPC__in IIdentityProvider * This,
            /* [in] */ __RPC__in_opt IIdentityAdvise *pIdentityAdvise,
            /* [in] */ DWORD dwIdentityUpdateEvents,
            /* [out] */ __RPC__out DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *UnAdvise )( 
            __RPC__in IIdentityProvider * This,
            /* [in] */ const DWORD dwCookie);
        
        END_INTERFACE
    } IIdentityProviderVtbl;

    interface IIdentityProvider
    {
        CONST_VTBL struct IIdentityProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IIdentityProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IIdentityProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IIdentityProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IIdentityProvider_GetIdentityEnum(This,eIdentityType,pFilterkey,pFilterPropVarValue,ppIdentityEnum)	\
    ( (This)->lpVtbl -> GetIdentityEnum(This,eIdentityType,pFilterkey,pFilterPropVarValue,ppIdentityEnum) ) 

#define IIdentityProvider_Create(This,lpszUserName,ppPropertyStore,pKeywordsToAdd)	\
    ( (This)->lpVtbl -> Create(This,lpszUserName,ppPropertyStore,pKeywordsToAdd) ) 

#define IIdentityProvider_Import(This,pPropertyStore)	\
    ( (This)->lpVtbl -> Import(This,pPropertyStore) ) 

#define IIdentityProvider_Delete(This,lpszUniqueID,pKeywordsToDelete)	\
    ( (This)->lpVtbl -> Delete(This,lpszUniqueID,pKeywordsToDelete) ) 

#define IIdentityProvider_FindByUniqueID(This,lpszUniqueID,ppPropertyStore)	\
    ( (This)->lpVtbl -> FindByUniqueID(This,lpszUniqueID,ppPropertyStore) ) 

#define IIdentityProvider_GetProviderPropertyStore(This,ppPropertyStore)	\
    ( (This)->lpVtbl -> GetProviderPropertyStore(This,ppPropertyStore) ) 

#define IIdentityProvider_Advise(This,pIdentityAdvise,dwIdentityUpdateEvents,pdwCookie)	\
    ( (This)->lpVtbl -> Advise(This,pIdentityAdvise,dwIdentityUpdateEvents,pdwCookie) ) 

#define IIdentityProvider_UnAdvise(This,dwCookie)	\
    ( (This)->lpVtbl -> UnAdvise(This,dwCookie) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IIdentityProvider_INTERFACE_DEFINED__ */


#ifndef __AsyncIIdentityProvider_INTERFACE_DEFINED__
#define __AsyncIIdentityProvider_INTERFACE_DEFINED__

/* interface AsyncIIdentityProvider */
/* [uuid][unique][object] */ 


EXTERN_C const IID IID_AsyncIIdentityProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c6fc9901-c433-4646-8f48-4e4687aae2a0")
    AsyncIIdentityProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Begin_GetIdentityEnum( 
            /* [in] */ const IDENTITY_TYPE eIdentityType,
            /* [unique][in] */ __RPC__in_opt const PROPERTYKEY *pFilterkey,
            /* [unique][in] */ __RPC__in_opt const PROPVARIANT *pFilterPropVarValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_GetIdentityEnum( 
            /* [out] */ __RPC__deref_out_opt IEnumUnknown **ppIdentityEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_Create( 
            /* [in] */ __RPC__in LPCWSTR lpszUserName,
            /* [in] */ __RPC__in const PROPVARIANT *pKeywordsToAdd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_Create( 
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_Import( 
            /* [in] */ __RPC__in_opt IPropertyStore *pPropertyStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_Import( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_Delete( 
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [in] */ __RPC__in const PROPVARIANT *pKeywordsToDelete) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_Delete( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_FindByUniqueID( 
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_FindByUniqueID( 
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_GetProviderPropertyStore( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_GetProviderPropertyStore( 
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_Advise( 
            /* [in] */ __RPC__in_opt IIdentityAdvise *pIdentityAdvise,
            /* [in] */ DWORD dwIdentityUpdateEvents) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_Advise( 
            /* [out] */ __RPC__out DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_UnAdvise( 
            /* [in] */ const DWORD dwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_UnAdvise( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AsyncIIdentityProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in AsyncIIdentityProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in AsyncIIdentityProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_GetIdentityEnum )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [in] */ const IDENTITY_TYPE eIdentityType,
            /* [unique][in] */ __RPC__in_opt const PROPERTYKEY *pFilterkey,
            /* [unique][in] */ __RPC__in_opt const PROPVARIANT *pFilterPropVarValue);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_GetIdentityEnum )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [out] */ __RPC__deref_out_opt IEnumUnknown **ppIdentityEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_Create )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [in] */ __RPC__in LPCWSTR lpszUserName,
            /* [in] */ __RPC__in const PROPVARIANT *pKeywordsToAdd);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_Create )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_Import )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [in] */ __RPC__in_opt IPropertyStore *pPropertyStore);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_Import )( 
            __RPC__in AsyncIIdentityProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_Delete )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID,
            /* [in] */ __RPC__in const PROPVARIANT *pKeywordsToDelete);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_Delete )( 
            __RPC__in AsyncIIdentityProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_FindByUniqueID )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_FindByUniqueID )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_GetProviderPropertyStore )( 
            __RPC__in AsyncIIdentityProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_GetProviderPropertyStore )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_Advise )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [in] */ __RPC__in_opt IIdentityAdvise *pIdentityAdvise,
            /* [in] */ DWORD dwIdentityUpdateEvents);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_Advise )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [out] */ __RPC__out DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_UnAdvise )( 
            __RPC__in AsyncIIdentityProvider * This,
            /* [in] */ const DWORD dwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_UnAdvise )( 
            __RPC__in AsyncIIdentityProvider * This);
        
        END_INTERFACE
    } AsyncIIdentityProviderVtbl;

    interface AsyncIIdentityProvider
    {
        CONST_VTBL struct AsyncIIdentityProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AsyncIIdentityProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AsyncIIdentityProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AsyncIIdentityProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AsyncIIdentityProvider_Begin_GetIdentityEnum(This,eIdentityType,pFilterkey,pFilterPropVarValue)	\
    ( (This)->lpVtbl -> Begin_GetIdentityEnum(This,eIdentityType,pFilterkey,pFilterPropVarValue) ) 

#define AsyncIIdentityProvider_Finish_GetIdentityEnum(This,ppIdentityEnum)	\
    ( (This)->lpVtbl -> Finish_GetIdentityEnum(This,ppIdentityEnum) ) 

#define AsyncIIdentityProvider_Begin_Create(This,lpszUserName,pKeywordsToAdd)	\
    ( (This)->lpVtbl -> Begin_Create(This,lpszUserName,pKeywordsToAdd) ) 

#define AsyncIIdentityProvider_Finish_Create(This,ppPropertyStore)	\
    ( (This)->lpVtbl -> Finish_Create(This,ppPropertyStore) ) 

#define AsyncIIdentityProvider_Begin_Import(This,pPropertyStore)	\
    ( (This)->lpVtbl -> Begin_Import(This,pPropertyStore) ) 

#define AsyncIIdentityProvider_Finish_Import(This)	\
    ( (This)->lpVtbl -> Finish_Import(This) ) 

#define AsyncIIdentityProvider_Begin_Delete(This,lpszUniqueID,pKeywordsToDelete)	\
    ( (This)->lpVtbl -> Begin_Delete(This,lpszUniqueID,pKeywordsToDelete) ) 

#define AsyncIIdentityProvider_Finish_Delete(This)	\
    ( (This)->lpVtbl -> Finish_Delete(This) ) 

#define AsyncIIdentityProvider_Begin_FindByUniqueID(This,lpszUniqueID)	\
    ( (This)->lpVtbl -> Begin_FindByUniqueID(This,lpszUniqueID) ) 

#define AsyncIIdentityProvider_Finish_FindByUniqueID(This,ppPropertyStore)	\
    ( (This)->lpVtbl -> Finish_FindByUniqueID(This,ppPropertyStore) ) 

#define AsyncIIdentityProvider_Begin_GetProviderPropertyStore(This)	\
    ( (This)->lpVtbl -> Begin_GetProviderPropertyStore(This) ) 

#define AsyncIIdentityProvider_Finish_GetProviderPropertyStore(This,ppPropertyStore)	\
    ( (This)->lpVtbl -> Finish_GetProviderPropertyStore(This,ppPropertyStore) ) 

#define AsyncIIdentityProvider_Begin_Advise(This,pIdentityAdvise,dwIdentityUpdateEvents)	\
    ( (This)->lpVtbl -> Begin_Advise(This,pIdentityAdvise,dwIdentityUpdateEvents) ) 

#define AsyncIIdentityProvider_Finish_Advise(This,pdwCookie)	\
    ( (This)->lpVtbl -> Finish_Advise(This,pdwCookie) ) 

#define AsyncIIdentityProvider_Begin_UnAdvise(This,dwCookie)	\
    ( (This)->lpVtbl -> Begin_UnAdvise(This,dwCookie) ) 

#define AsyncIIdentityProvider_Finish_UnAdvise(This)	\
    ( (This)->lpVtbl -> Finish_UnAdvise(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AsyncIIdentityProvider_INTERFACE_DEFINED__ */


#ifndef __IAssociatedIdentityProvider_INTERFACE_DEFINED__
#define __IAssociatedIdentityProvider_INTERFACE_DEFINED__

/* interface IAssociatedIdentityProvider */
/* [unique][async_uuid][uuid][object] */ 


EXTERN_C const IID IID_IAssociatedIdentityProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2af066b3-4cbb-4cba-a798-204b6af68cc0")
    IAssociatedIdentityProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AssociateIdentity( 
            /* [in] */ __RPC__in HWND hwndParent,
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DisassociateIdentity( 
            /* [in] */ __RPC__in HWND hwndParent,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ChangeCredential( 
            /* [in] */ __RPC__in HWND hwndParent,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAssociatedIdentityProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAssociatedIdentityProvider * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAssociatedIdentityProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAssociatedIdentityProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *AssociateIdentity )( 
            __RPC__in IAssociatedIdentityProvider * This,
            /* [in] */ __RPC__in HWND hwndParent,
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore);
        
        HRESULT ( STDMETHODCALLTYPE *DisassociateIdentity )( 
            __RPC__in IAssociatedIdentityProvider * This,
            /* [in] */ __RPC__in HWND hwndParent,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID);
        
        HRESULT ( STDMETHODCALLTYPE *ChangeCredential )( 
            __RPC__in IAssociatedIdentityProvider * This,
            /* [in] */ __RPC__in HWND hwndParent,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID);
        
        END_INTERFACE
    } IAssociatedIdentityProviderVtbl;

    interface IAssociatedIdentityProvider
    {
        CONST_VTBL struct IAssociatedIdentityProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAssociatedIdentityProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAssociatedIdentityProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAssociatedIdentityProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAssociatedIdentityProvider_AssociateIdentity(This,hwndParent,ppPropertyStore)	\
    ( (This)->lpVtbl -> AssociateIdentity(This,hwndParent,ppPropertyStore) ) 

#define IAssociatedIdentityProvider_DisassociateIdentity(This,hwndParent,lpszUniqueID)	\
    ( (This)->lpVtbl -> DisassociateIdentity(This,hwndParent,lpszUniqueID) ) 

#define IAssociatedIdentityProvider_ChangeCredential(This,hwndParent,lpszUniqueID)	\
    ( (This)->lpVtbl -> ChangeCredential(This,hwndParent,lpszUniqueID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAssociatedIdentityProvider_INTERFACE_DEFINED__ */


#ifndef __AsyncIAssociatedIdentityProvider_INTERFACE_DEFINED__
#define __AsyncIAssociatedIdentityProvider_INTERFACE_DEFINED__

/* interface AsyncIAssociatedIdentityProvider */
/* [uuid][unique][object] */ 


EXTERN_C const IID IID_AsyncIAssociatedIdentityProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2834d6ed-297e-4e72-8a51-961e86f05152")
    AsyncIAssociatedIdentityProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Begin_AssociateIdentity( 
            /* [in] */ __RPC__in HWND hwndParent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_AssociateIdentity( 
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_DisassociateIdentity( 
            /* [in] */ __RPC__in HWND hwndParent,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_DisassociateIdentity( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Begin_ChangeCredential( 
            /* [in] */ __RPC__in HWND hwndParent,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finish_ChangeCredential( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AsyncIAssociatedIdentityProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in AsyncIAssociatedIdentityProvider * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in AsyncIAssociatedIdentityProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in AsyncIAssociatedIdentityProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_AssociateIdentity )( 
            __RPC__in AsyncIAssociatedIdentityProvider * This,
            /* [in] */ __RPC__in HWND hwndParent);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_AssociateIdentity )( 
            __RPC__in AsyncIAssociatedIdentityProvider * This,
            /* [out] */ __RPC__deref_out_opt IPropertyStore **ppPropertyStore);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_DisassociateIdentity )( 
            __RPC__in AsyncIAssociatedIdentityProvider * This,
            /* [in] */ __RPC__in HWND hwndParent,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_DisassociateIdentity )( 
            __RPC__in AsyncIAssociatedIdentityProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Begin_ChangeCredential )( 
            __RPC__in AsyncIAssociatedIdentityProvider * This,
            /* [in] */ __RPC__in HWND hwndParent,
            /* [in] */ __RPC__in LPCWSTR lpszUniqueID);
        
        HRESULT ( STDMETHODCALLTYPE *Finish_ChangeCredential )( 
            __RPC__in AsyncIAssociatedIdentityProvider * This);
        
        END_INTERFACE
    } AsyncIAssociatedIdentityProviderVtbl;

    interface AsyncIAssociatedIdentityProvider
    {
        CONST_VTBL struct AsyncIAssociatedIdentityProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AsyncIAssociatedIdentityProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AsyncIAssociatedIdentityProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AsyncIAssociatedIdentityProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AsyncIAssociatedIdentityProvider_Begin_AssociateIdentity(This,hwndParent)	\
    ( (This)->lpVtbl -> Begin_AssociateIdentity(This,hwndParent) ) 

#define AsyncIAssociatedIdentityProvider_Finish_AssociateIdentity(This,ppPropertyStore)	\
    ( (This)->lpVtbl -> Finish_AssociateIdentity(This,ppPropertyStore) ) 

#define AsyncIAssociatedIdentityProvider_Begin_DisassociateIdentity(This,hwndParent,lpszUniqueID)	\
    ( (This)->lpVtbl -> Begin_DisassociateIdentity(This,hwndParent,lpszUniqueID) ) 

#define AsyncIAssociatedIdentityProvider_Finish_DisassociateIdentity(This)	\
    ( (This)->lpVtbl -> Finish_DisassociateIdentity(This) ) 

#define AsyncIAssociatedIdentityProvider_Begin_ChangeCredential(This,hwndParent,lpszUniqueID)	\
    ( (This)->lpVtbl -> Begin_ChangeCredential(This,hwndParent,lpszUniqueID) ) 

#define AsyncIAssociatedIdentityProvider_Finish_ChangeCredential(This)	\
    ( (This)->lpVtbl -> Finish_ChangeCredential(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AsyncIAssociatedIdentityProvider_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  HWND_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HWND * ); 
void                      __RPC_USER  HWND_UserFree(     __RPC__in unsigned long *, __RPC__in HWND * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree(     __RPC__in unsigned long *, __RPC__in LPSAFEARRAY * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  HWND_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HWND * ); 
void                      __RPC_USER  HWND_UserFree64(     __RPC__in unsigned long *, __RPC__in HWND * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree64(     __RPC__in unsigned long *, __RPC__in LPSAFEARRAY * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\icrsint.h ===
//-----------------------------------------------------------------------------
// File:		icrsint.h
//
// Copyright:   Copyright (c) Microsoft Corporation         
//
// Contents:	ADO C/C++ Record Binding Definitions
//
// Comments:
//
//-----------------------------------------------------------------------------

#ifndef _ICRSINT_H_
#define _ICRSINT_H_

#include <olectl.h>
#include <stddef.h>

// forwards
class CADORecordBinding;

#define classoffset(base, derived) ((DWORD_PTR)(static_cast<base*>((derived*)8))-8)

enum ADOFieldStatusEnum
{	
	adFldOK = 0,
	adFldBadAccessor = 1,
	adFldCantConvertValue = 2,
	adFldNull = 3,
	adFldTruncated = 4,
	adFldSignMismatch = 5,
	adFldDataOverFlow = 6,
	adFldCantCreate = 7,
	adFldUnavailable = 8,
	adFldPermissionDenied = 9,
	adFldIntegrityViolation = 10,
	adFldSchemaViolation = 11,
	adFldBadStatus = 12,
	adFldDefault = 13
};

typedef struct stADO_BINDING_ENTRY
{
	ULONG_PTR		ulOrdinal;
    WORD			wDataType;
	BYTE			bPrecision;
	BYTE			bScale;
	ULONG_PTR		ulSize;
	ULONG_PTR		ulBufferOffset;
	ULONG_PTR		ulStatusOffset;
	ULONG_PTR		ulLengthOffset;
	ULONG_PTR		ulADORecordBindingOffSet;
	BOOL			fModify;
} ADO_BINDING_ENTRY;

#define BEGIN_ADO_BINDING(cls) public: \
	typedef cls ADORowClass; \
	const ADO_BINDING_ENTRY* STDMETHODCALLTYPE GetADOBindingEntries() { \
	static const ADO_BINDING_ENTRY rgADOBindingEntries[] = { 

//
// Fixed length non-numeric data
//
#define ADO_FIXED_LENGTH_ENTRY(Ordinal, DataType, Buffer, Status, Modify)\
	{Ordinal, \
	DataType, \
	0, \
	0, \
	0, \
	offsetof(ADORowClass, Buffer), \
	offsetof(ADORowClass, Status), \
	0, \
	classoffset(CADORecordBinding, ADORowClass), \
	Modify},

#define ADO_FIXED_LENGTH_ENTRY2(Ordinal, DataType, Buffer, Modify)\
	{Ordinal, \
	DataType, \
	0, \
	0, \
	0, \
	offsetof(ADORowClass, Buffer), \
	0, \
	0, \
	classoffset(CADORecordBinding, ADORowClass), \
	Modify},

//
// Numeric data
// 
#define ADO_NUMERIC_ENTRY(Ordinal, DataType, Buffer, Precision, Scale, Status, Modify)\
	{Ordinal, \
	DataType, \
	Precision, \
	Scale, \
	0, \
	offsetof(ADORowClass, Buffer), \
	offsetof(ADORowClass, Status), \
	0, \
	classoffset(CADORecordBinding, ADORowClass), \
	Modify},

#define ADO_NUMERIC_ENTRY2(Ordinal, DataType, Buffer, Precision, Scale, Modify)\
	{Ordinal, \
	DataType, \
	Precision, \
	Scale, \
	0, \
	offsetof(ADORowClass, Buffer), \
	0, \
	0, \
	classoffset(CADORecordBinding, ADORowClass), \
	Modify},

//
// Variable length data
//
#define ADO_VARIABLE_LENGTH_ENTRY(Ordinal, DataType, Buffer, Size, Status, Length, Modify)\
	{Ordinal, \
	DataType, \
	0, \
	0, \
	Size, \
	offsetof(ADORowClass, Buffer), \
	offsetof(ADORowClass, Status), \
	offsetof(ADORowClass, Length), \
	classoffset(CADORecordBinding, ADORowClass), \
	Modify},

#define ADO_VARIABLE_LENGTH_ENTRY2(Ordinal, DataType, Buffer, Size, Status, Modify)\
	{Ordinal, \
	DataType, \
	0, \
	0, \
	Size, \
	offsetof(ADORowClass, Buffer), \
	offsetof(ADORowClass, Status), \
	0, \
	classoffset(CADORecordBinding, ADORowClass), \
	Modify},

#define ADO_VARIABLE_LENGTH_ENTRY3(Ordinal, DataType, Buffer, Size, Length, Modify)\
	{Ordinal, \
	DataType, \
	0, \
	0, \
	Size, \
	offsetof(ADORowClass, Buffer), \
	0, \
	offsetof(ADORowClass, Length), \
	classoffset(CADORecordBinding, ADORowClass), \
	Modify},

#define ADO_VARIABLE_LENGTH_ENTRY4(Ordinal, DataType, Buffer, Size, Modify)\
	{Ordinal, \
	DataType, \
	0, \
	0, \
	Size, \
	offsetof(ADORowClass, Buffer), \
	0, \
	0, \
	classoffset(CADORecordBinding, ADORowClass), \
	Modify},

#define END_ADO_BINDING()   {0, adEmpty, 0, 0, 0, 0, 0, 0, 0, FALSE}};\
	return rgADOBindingEntries;}

//
// Interface that the client 'record' class needs to support. The ADO Binding entries
// provide the implementation for this interface.
//
class CADORecordBinding
{
public:
	STDMETHOD_(const ADO_BINDING_ENTRY*, GetADOBindingEntries) (VOID) PURE;
};

//
// Interface that allows a client to fetch a record of data into class data members.
//
struct __declspec(uuid("00000544-0000-0010-8000-00aa006d2ea4")) IADORecordBinding;
DECLARE_INTERFACE_(IADORecordBinding, IUnknown)
{
public:
	STDMETHOD(BindToRecordset) (CADORecordBinding *pAdoRecordBinding) PURE;
	STDMETHOD(AddNew) (CADORecordBinding *pAdoRecordBinding) PURE;
	STDMETHOD(Update) (CADORecordBinding *pAdoRecordBinding) PURE;
};

#endif // !_ICRSINT_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IDispIds.h ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright 1995-1998 Microsoft Corporation. All Rights Reserved.
//
//  File: idispids.h
//
//--------------------------------------------------------------------------

#define DISPID_READYSTATE                             (-525)
#define DISPID_READYSTATECHANGE                       (-609)
#define DISPID_AMBIENT_TRANSFERPRIORITY               (-728)
#define DISPID_AMBIENT_OFFLINEIFNOTCONNECTED          (-5501)
#define DISPID_AMBIENT_SILENT                         (-5502)

// Until these appear in OLECTL.H
#ifndef DISPID_AMBIENT_CODEPAGE
#define DISPID_AMBIENT_CODEPAGE         (-725)
#define DISPID_AMBIENT_CHARSET          (-727)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\Idf.h ===
//************************************************************************
//**
//**  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
//**  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED
//**  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR
//**  A PARTICULAR PURPOSE.
//**
//**  Copyright (C) 1993 - 1999 Microsoft Corporation. All Rights Reserved.
//**
//**  IDF.h
//**
//**  DESCRIPTION:
//**     This file contains the format of the .IDF files.
//**
//**  HISTORY:
//**     04/29/93       created.
//**     07/04/93       added UNICODE for displayable strings.
//**     09/04/93       added keymaps.
//**     09/05/93       added ID's for channel types.
//**
//************************************************************************

#ifndef __IDF_H__
#define __IDF_H__

/*
@doc  EXTERNAL SDK

@types   IDFHEADER |
   This is the format of the "hdr " chunk in a Microsoft IDF file.
   This will be the first subchunk of a "MMAP" list chunk.  This will 
   provide information on the IDF itself; what version, who created it,
   and a unique ASCII ID for the instrument.

@field   DWORD | cbStruct |
   This is the inclusive size of the header structure.

@field   DWORD | dwVersion |
   This is the version of the IDF file.
   under.

@field   DWORD | dwCreator |
   This is the creator ID for the IDF.

@field   DWORD | cbInstID |
   This is the size of the unique instrument identifier including the NULL.

@field   BYTE | abInstID[] |
   This is the actual ASCII bytes of the unique instrument id. This _IS_ 
   NULL terminated.  There is no UNICODE version of this since this will
   only be used internally and not displayed to the user.

@othertype  IDFHEADER * | PIDFHEADER |
   A memory model dependant pointer to the structure.

@othertype  IDFHEADER FAR* | LPIDFHEADER |
   A far pointer to the structure.
*/

typedef struct tag_IDFHEADER
{
   DWORD cbStruct;

   DWORD dwVersion;
   DWORD dwCreator;

   DWORD cbInstID;
   BYTE  abInstID[1];
} IDFHEADER, *PIDFHEADER, FAR *LPIDFHEADER;

/*
@doc  EXTERNAL SDK

@types   IDFINSTINFO |
   This is the format of the "inst" chunk in a Microsoft IDF file.
   This chunk will contain information on the instrument, e.g. who
   manufactured it, the name of the instrument, it's manufacturer and
   product id's and a revision number.

@field   DWORD | cbStruct |
   This is the inclusive size of the instrument information structure.

@field   DWORD | dwManufactID |
   Manufacturer's ID.

@field   DWORD | dwProductID |
   Product's ID.

@field   DWORD | dwRevision |
   Revision of the product.

@field   DWORD | cbManufactASCII |
   Length of the ASCII version of the manufacturuers name.

@field   DWORD | cbManufactUNICODE |
   Length of the UNICODE version of the manufacturuers name.

@field   DWORD | cbProductASCII |
   Length of the ASCII version of the product name.

@field   DWORD | cbProductUNICODE |
   Length of the UNICODE version of the product name.

@field   BYTE | abData[] |
   Contains the ASCII and UNICODE strings for the manufacturer and product
   names.  NOTE that all strings are separated by a NULL and the NULL IS
   counted in the string lengths.

@othertype  IDFINSTINFO * | PIDFINSTINFO |
   A memory model dependant pointer to the structure.

@othertype  IDFINSTINFO FAR * | LPIDFINSTINFO |
   A far pointer to the structure.

@comm The idea is that the cbManufactXXXXX and cbProductXXXXX will be the
      offsets into the bData array of bytes and it will contain a complete
      string that you can strcpy out.  That is why the NULL is included in
      the byte count and in the actual data.
*/

typedef struct tag_IDFINSTINFO
{
   DWORD cbStruct;

   DWORD dwManufactID;
   DWORD dwProductID;
   DWORD dwRevision;

   DWORD cbManufactASCII;
   DWORD cbManufactUNICODE;
   DWORD cbProductASCII;
   DWORD cbProductUNICODE;

   BYTE  abData[1];
} IDFINSTINFO, FAR *LPIDFINSTINFO;

/*
@doc  EXTERNAL SDK

@types   IDFINSTCAPS |
   This is the format of the "caps" chunk in a Microsoft IDF file.
   This chunk will contain information on the MIDI capabilities of
   the device. e.g. basic channel of the instrument, number of channels
   that the instrument has available. the polyphony of the instrument, 
   whether or not it supports General MIDI, etc....

@field   DWORD | cbStruct |
   This is the size of the capabilities structure.

@field   DWORD | fdwFlags |
   Flags specifiying additional capabilities of an instrument.

@flag IDFINSTCAPS_F_GENERAL_MIDI |
   Instrument supports General MIDI.

@flag IDFINSTCAPS_F_SYSTEMEXCLUSIVE |
   Instrument supports system exclusive messages

@field   DWORD | dwBasicChannel |
   The basic channel for the instrument.

@field   DWORD | cNumChannels |
   Number of channels that the instrument supports to.

@field   DWORD | cInstrumentPolyphony |
   The total polyphony for the instrument.

@field   DWORD | cChannelPolyphony |
   The polyphony per channel.

@othertype  IDFINSTCAPS * | PIDFINSTCAPS |
   A memory model dependant pointer to the structure.

@othertype  IDFINSTCAPS FAR * | LPIDFINSTCAPS |
   A far pointer to the structure.
*/

typedef struct tag_IDFINSTCAPS
{
   DWORD cbStruct;
   DWORD fdwFlags;
   DWORD dwBasicChannel;
   DWORD cNumChannels;
   DWORD cInstrumentPolyphony;
   DWORD cChannelPolyphony;
} IDFINSTCAPS, *PIDFINSTCAPS, FAR *LPIDFINSTCAPS;

#define  IDFINSTCAPS_F_GENERAL_MIDI       0x00000001
#define  IDFINSTCAPS_F_SYSTEMEXCLUSIVE    0x00000002

/*
@doc  EXTERNAL SDK

@types   IDFCHANNELHDR |
   This is the format of the "chan" chunk in a Microsoft IDF file.
   This contains a description on what "type" a channel is, i.e. 
   is it a General MIDI channel, a drum channel, etc... Directly 
   following this header is the actual data on each channel.

@field   DWORD | cbStruct |
   This is the size of the channel header structure.

@field   DWORD | fdwFlags |
   Flags describing the channel type information.

@flag IDFCHANNELHDR_F_GENERAL_MIDI |
   If this flag is set then any channels that are not defined in the 
   IDF are General MIDI channel types.  If this flag is _NOT_ set then
   any channels that are not defined in the IDF are undefined and should 
   NOT be used in mapping. This flag overrides the contents of dwGeneralMask
   and dwDrumMask.

@field DWORD | dwGeneralMask |
   This mask indicates which channels are available for
   use as general channels. The channels will be considered usable even if
   there is no associcate IDFCHANNELINFO structure defined.

@field DWORD | dwDrumMask |
   This mask indicates which channels are available for
   use as drum channels. The channels will be considered usable even if
   there is no associcate IDFCHANNELINFO structure defined.

@field   DWORD | cNumChannels |
   This is the number of channels that follows the header.

@othertype  IDFCHANNELHDR * | PIDFCHANNELHDR |
   A memory model dependant pointer to the structure.

@othertype  IDFCHANNELHDR FAR * | LPIDFCHANNELHDR |
   A far pointer to the structure.
*/

typedef struct tag_IDFCHANNELHDR
{
   DWORD cbStruct;
   DWORD dwGeneralMask;
   DWORD dwDrumMask;
   DWORD dwReserved;                    // Must be zero
   DWORD fdwFlags;
} IDFCHANNELHDR, *PIDFCHANNELHDR, FAR *LPIDFCHANNELHDR;

#define  IDFCHANNELHDR_F_GENERAL_MIDI     0x00000001

/*
@doc  EXTERNAL SDK

@types    IDFCHANNELINFO |
   This is the format of the actual channel information for Microsoft
   authored IDF files. This is the Microsoft supported format for
   channel information.

@field   DWORD | dwChannel |
   This is the channel number that the structure defines.

@field   DWORD | fdwChannel |
   Defines the possible types this channel can be.

   @flag    IDFCHANNELINFO_F_GENERAL_CHANNEL |
       Indicates that this channel may be a general channel.

   @flag    IDFCHANNELINFO_F_DRUM_CHANNEL |
       Indicates that this channel may be a drum channel.

@field   DWORD | cbInitData |
    Specifies the length of the data which should be sent to initialize
    the channel. This data will be send to initialize the channel each
    time the mapper is opened.

@field    BYTE | abData[] |
    This field contains the actual initialization data.
    <f cbInitData> should indicate the length of this sequence,
    byte aligned. However, the actual sequence should be padded so that
    it is actually DWORD aligned (i.e. even multiple
    of four bytes). <f cbStruct> should reflect the padded length of
    the sequences.
        
@othertype  IDFCHANNELINFO * | PIDFCHANNELINFO |
   A memory model dependant pointer to the structure.

@othertype  IDFCHANNELINFO FAR * | LPIDFCHANNELINFO |
   A far pointer to the structure.
*/

typedef struct tag_IDFCHANNELINFO
{
   DWORD cbStruct;
   DWORD dwChannel;
   DWORD cbInitData;
   BYTE  abData[];
} IDFCHANNELINFO, *PIDFCHANNELINFO, FAR *LPIDFCHANNELINFO;

/*
@doc  EXTERNAL SDK

@types   IDFPATCHMAPHDR |
   This is the format of the "map " chunk in a Microsoft IDF file.
   This chunk contains information on the patch map used for the 
   instrument. Directly following this header is the actual mapping 
   information for each patch.

@field   DWORD | cbStruct |
   This is the size of the patch map header structure.

@field   BYTE | abPatchMap[128] |
   This array contains the actual patch map. The incoming patch is
   used to index the array; the array contents are the new patch value
   and must be in the range 0x00-0x7F. Patch maps will only apply to
   channels of type general. If the instrument needs a patch change
   on a drum channel, it should be included in the initialization data
   in the IDFCHANNELINFO.

@othertype  IDFPATCHMAPHDR * | PIDFPATCHMAPHDR |
   A memory model dependant pointer to the structure.

@othertype  IDFPATCHMAPHDR FAR * | LPIDFPATCHMAPHDR |
   A far pointer to the structure.
*/

typedef struct tag_IDFPATCHMAPHDR
{
   DWORD cbStruct;
   BYTE  abPatchMap[128];
           
} IDFPATCHMAPHDR, *PIDFPATCHMAPHDR, FAR *LPIDFPATCHMAPHDR;

/*
@doc  EXTERNAL SDK

@types   IDFKEYMAPHDR |
   This is the format of the "key " chunk in a Microsoft IDF file.
   This chunk contains information on the all of the key maps used 
   for a given instrument. The information that is in this structure
   pertains to all of the key maps for the instrument.  It contains
   the total number of key maps for the instrument and whether or not
   the key maps are General MIDI.

@field   DWORD | cbStruct |
   This is the size of the key map header structure.

@field   DWORD | cNumKeyMaps |
   This is the number of key maps that follow the header.

@field   DWORD | cbKeyMap |
   This is the size of each key map that follows the header.   

@othertype  IDFPATCHMAPHDR * | PIDFPATCHMAPHDR |
   A memory model dependant pointer to the structure.

@othertype  IDFPATCHMAPHDR FAR * | LPIDFPATCHMAPHDR |
   A far pointer to the structure.
*/

typedef struct tag_IDFKEYMAPHDR
{
   DWORD cbStruct;
   DWORD cNumKeyMaps;
   DWORD cbKeyMap;
} IDFKEYMAPHDR, *PIDFKEYMAPHDR, FAR *LPIDFKEYMAPHDR;

/*
@doc  EXTERNAL SDK

@types   IDFKEYMAP |
   This is the format of the "gkey" or "dkey" chunk in a Microsoft
   IDF file. This chunk contains information on the all of the key maps
   used for a given instrument. The information that is in this structure
   pertains to all of the key maps for the instrument.  It contains
   the total number of key maps for the instrument and whether or not
   the key maps are General MIDI.

@field   DWORD | cbStruct |
   This is the size of the key map header structure.

@field   BYTE | abKeyMap[128] |
    This field contains the actual key map. The incoming key number from
    a note on or note off message is used to index this array; the array
    contents are the new key value. If the high bit it set in the new
    key value, then the note on or note off will be ignore; otherwise,
    it will be transmitted with the new key value.
    
@othertype  IDFKEYMAP * | PIDFKEYMAP |
   A memory model dependant pointer to the structure.

@othertype  IDFKEYMAP FAR * | LPIDFKEYMAP |
   A far pointer to the structure.
*/

typedef struct tag_IDFKEYMAP
{
   DWORD cbStruct;
   BYTE  abKeyMap[128];
} IDFKEYMAP, *PIDFKEYMAP, FAR *LPIDFKEYMAP;

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IDLMULTI.H ===
//-----------------------------------------------------------------------------
// File:			IDLMULTI.H
//
// Copyright:		Copyright (c) Microsoft Corporation          
//
// Contents: 		preprocessor trickery to make our .idl/.tdl files compile
//					with MIDL or APBU Mktyplib.
//
// Comments: 		
//
//-----------------------------------------------------------------------------

#ifndef __IDLMULTI_H__
#define __IDLMULTI_H__

#define ENDCOCLASS  };


#ifndef __MKTYPLIB__
#define TYPEDEF(guid)   \
typedef

#define LOCAL_INTERFACE(guid)       \
[                                   \
    local,                          \
    object,                         \
    uuid(guid),                     \
    pointer_default(unique)         \
]


#define REMOTED_INTERFACE(guid)     \
[                                   \
    object,                         \
    uuid(guid),                     \
    pointer_default(unique)         \
]


#define BEGINEVENTSET(es)   \
eventset es  \
{            \

#define ENDEVENTSET  };


#define COCLASS(name, dispint, events)  \
cotype name                                                 \
{                                                           \
    dispinterface dispint;                                  \
    eventset events;



#else // __MKTYPLIB__

#define TYPEDEF(guid) typedef [uuid(guid)]

#define cpp_quote(string)

#define const

#define LOCAL_INTERFACE(guid)    \
[                           \
    uuid(guid),             \
    odl                     \
]

#define REMOTED_INTERFACE(guid)    \
[                           \
    uuid(guid),             \
    odl                     \
]

#define BEGINEVENTSET(es)  \
dispinterface es           \
{                          \
properties:                \
                           \
methods:                   \

#define ENDEVENTSET  };


#define COCLASS(name, dispint, events)                 \
coclass name                                                \
{                                                           \
    dispinterface dispint;                                  \
    [source,] dispinterface events;                         \



#endif  /// MKTYPLIB

#endif  // __IDLMULTI_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IEObj.h ===
//+---------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       ieobj.h
//
//  Description:
//      Defines the IEFRAME API.
//
//----------------------------------------------------------------------------
#ifndef _IEOBJ_
#define _IEOBJ_

#if _MSC_VER > 1000
#pragma once
#endif

//
// Internet Explorer suppresses script-initiated dialog boxes and other UI
// elements if the calling thread is not the thread for the active tab or is not
// associated with the thread for the active tab.
//
// This method enables any thread to be associated with the specified tab thread
// so that the dialog suppression and other logic treats code running on the
// specified thread the same way that it does for the tab thread.
//
// Parameters:
//
//   dwTabThreadID - ID of the tab thread
//   dwAssociatedThreadID - ID of the thread to associate with the tab thread.
//
STDAPI IEAssociateThreadWithTab(__in DWORD dwTabThreadID,
                                __in DWORD dwAssociatedThreadID);

//
// This method unassociates a thread previously associated with IEAssociateThreadWithTab.
//
// Parameters:
//
//   dwTabThreadID - ID of the tab thread
//   dwAssociatedThreadID - ID of the thread to disassociate with the tab thread.
//
STDAPI IEDisassociateThreadWithTab(__in DWORD dwTabThreadID,
                                   __in DWORD dwAssociatedThreadID);


// This method returns Internet Explorer's InPrivate Browsing status.
//
// Return values:
// TRUE- InPrivate Browsing is enabled.
// FALSE - InPrivate Browsing is not enabled.
//
BOOL IEIsInPrivateBrowsing();

// This method returns Internet Explorer's InPrivate Browsing status.
//
// Return values:
// TRUE- InPrivate Blocking is enabled.
// FALSE - InPrivate Blocking is not enabled.
//
BOOL IEInPrivateFilteringEnabled();

#endif //_IEOBJ_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\ieverp.h ===
#define VER_USE_OTHER_MAJOR_MINOR_VER

//
// Note:
//  If you find yourself in here updating IE's version number, please also be
//  aware that LATEST_WIN32_IE_VERSION likely needs to be updated as well
//  (root/tools/makefile.def).  This allows individual 'sources' files
//  to pick up the version number change during the build passes.  For
//  bonus points, a new macro constant should be added to sdkddkver.w
//  (base/published) with the other _WIN32_IE_IExx macros.
//

//
// override the majorversion and minorversion (normall defined in ntverp.h)
//
#define VER_PRODUCTMAJORVERSION         8
#define VER_PRODUCTMINORVERSION         00

#define VER_PRODUCTVERSION_W            (0x0800)
#define VER_PRODUCTVERSION_DW           (0x08000000 | VER_PRODUCTBUILD)


//
// override product name (normally defined in ntverp.h / common.ver)
//
#ifdef RC_INVOKED
#define VER_PRODUCTNAME_STR L"Windows\256 Internet Explorer"
#else
#define VER_PRODUCTNAME_STR "Windows (R) Internet Explorer"
#endif

#include <ntverp.h>

// Define IE Specific Version numbers. Only component versions are effected by VER_IE*VERSION defined below. 
// Component versions are specified in the manifest files (inetcore\manifests) using the version attribute.
// Binary versions are still determined using VER_PRODUCT* etc. (defined above and in ntverp.h)


// if USE_IE_COMPONENT_VERSIONS is set the ie versions will be used to calculate manifest/component versions. 
// Otherwise ntverp versions will be used.
// eg. this flag will be removed to RI into win7.

#define USE_IE_COMPONENT_VERSIONS


// These will be used to create build variables $(build.xyz)
// build.IEVersion, build.IEMajorVersion, build.IEMinorVersion, build.IEBuildVersion, build.IEQfeVersion

// IE Package version tracks individual public releases of IE
// Primarily this drives active setup and the about box.  It is the version number
// of the package that doesn't change as individual binaries are revised.
// It should be revised daily during self-host, but be locked down in milestone branches
// Keep a history.

// IE8 BETA1 = 17136

#define VER_IEPACKAGEVERSION                17136

#ifdef USE_IE_COMPONENT_VERSIONS

#define VER_IEMAJORVERSION                  8
#define VER_IEMINORVERSION                  0
#define VER_IEBUILDVERSION                  VER_PRODUCTBUILD
#define VER_IEQFEVERSION                    VER_PRODUCTBUILD_QFE

#else

#define VER_IEMAJORVERSION                  VER_PRODUCTMAJORVERSION
#define VER_IEMINORVERSION                  VER_PRODUCTMINORVERSION
#define VER_IEBUILDVERSION                  VER_PRODUCTBUILD
#define VER_IEQFEVERSION                    VER_PRODUCTBUILD_QFE

#endif


#define VER_IEVERSION                       VER_IEMAJORVERSION,VER_IEMINORVERSION,VER_IEBUILDVERSION,VER_IEQFEVERSION

#define VER_IEVERSION_MAJORMINOR2(x,y)      #x "." #y
#define VER_IEVERSION_MAJORMINOR1(x,y)      VER_IEVERSION_MAJORMINOR2(x, y)
#define VER_IEVERSION_STRING                VER_IEVERSION_MAJORMINOR1(VER_IEMAJORVERSION, VER_IEMINORVERSION)

#define VER_IEVERSION_STR2(x,y)             VER_IEVERSION_STRING "." VER_BPAD #x "." #y
#define VER_IEVERSION_STR1(x,y)             VER_IEVERSION_STR2(x, y)
#define VER_IEVERSION_STR                   VER_IEVERSION_STR1(VER_IEBUILDVERSION, VER_IEQFEVERSION)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IEProcess.h ===
//+-------------------------------------------------------------------------
//
//  IEProcess.h -- This module defines the IE APIs that only exist in the IExplore process.
// 
//  Copyright (c) Microsoft Corp. All rights reserved.
//
//--------------------------------------------------------------------------

#pragma once

#if (_WIN32_IE >= _WIN32_IE_IE80)
#define IEPROCESS_MODULE_NAME               L"IERtUtil.dll"
#define IEGetProcessModule_PROC_NAME        "IEGetProcessModule"
#endif

/// <summary>
/// Get the module handle that provides per-process export tables.
/// Callers should use GetModuleHandle(IEPROCESS_MODULE_NAME)
/// and GetProcAddress(IEGetProcessModule_PROC_NAME) to bind to
/// this method.  
/// </summary>
/// <returns>
/// Non-NULL module handle if this process was initialized with 
///     IE process exports. Use handle when calling GetProcAddress() 
///     for any of the export table accessor (eg IETabWindowExports).  
///     The handle is invariant for the lifetime of the process.
/// NULL if the process has no process exports.
/// </returns>
typedef HMODULE (*IEGetProcessModule_t)();


/// <summary>
/// Table of tab window related functions exported by the IE process.
/// The table is invariant for the lifetime of the process.
/// </summary>
struct IE80TabWindowExports
{
    /// <summary>
    /// Tab windows are not always visible and IE avoids showing modal dialogs
    /// or showing new windows for a tab if the tab is hidden.  
    //  IE supports queuing of such actions so that when the tab is visible again, 
    /// this call will return. In addition to do the show/hide/enable logic correctly, 
    /// a different parent may need to be substituted.
    /// </summary>
    /// <param name="allowUnknownThread">Threads in a tab process are associated with 
    ///     a tab window where possible.  If this flag is false and the thread is not
    ///     associated with a tab window, the call will fail.  Callers should default 
    ///     to false.  Pass true to work even if the thread is unnassociated.  </param>
    /// <param name="proposedParentWindow">Proposed parent window to be used in 
    ///     CreateWindow(), MessageBox(), ShellExecute(), etc.</param>
    /// <param name="pActualParentWindow">Window that should be used instead
    ///     of the proposed parent.  Where possible this will be the proposed parent.</param>
    /// <returns>S_OK if the caller should continue, a failure code otherwise.</returns>
    /// <remarks>
    /// Method can block in it's own modal loop waiting for the parent window to be available.
    /// </remarks>
    HRESULT (WINAPI *WaitForTabWindow)(
        __in    bool    allowUnknownThread,  
        __in    HWND    proposedParentWindow,
        __out   HWND*   pActualParentWindow);  //  actual parent to use in following calls that require a parent.

    /// <summary>
    /// Helper for implementations that have their own dialog manager 
    /// or other similar modal loop.  Callers need to notify IE8 that 
    /// they will be running their loop by calling acquiring this lock.
    /// 
    /// In addition, the isolation boundaries need to be kept for 
    /// security reasons.  A new parent with the correct security
    /// mode and input forwarding will be provided if necessary.
    /// 
    /// When running in IE8, modal dialogs are treated specially.
    /// The security differences between windows in the hierarchy
    /// can affect whether or not a dialog will show up correctly.
    /// </summary>
    /// <param name="proposedParentWindow">Proposed parent window to be used in 
    ///     CreateWindow() and similar functions.</param>
    /// <param name="pActualParentWindow">Window that should be used instead
    ///     of the proposed parent.  Can be the same as the proposed parent.</param>
    /// <param name="phModalDialogLock">Handle to control the lifetime
    ///     of the lock.  Used when calling ReleaseModalDialogLockAndParent.
    ///     Can be NULL even in the success case.</param>
    /// <returns>S_OK if the caller should continue, a failure code otherwise.</returns>
    /// <remarks>
    /// This function uses COM and will CoInitialize() if necessary.
    /// It can also block in it's own modal loop making x-process COM calls.
    /// </remarks>
    HRESULT (WINAPI *AcquireModalDialogLockAndParent)(
        __in    HWND    proposedParentWindow,
        __out   HWND*   pActualParentWindow,
        __out   HANDLE* phModalDialogLock);

    /// <summary>
    /// Free and cleanup any resources initialized in AcquireModalDialogLockAndParent()
    /// </summary>
    void (WINAPI *ReleaseModalDialogLockAndParent)(
        __in_opt HANDLE hModalDialogLock);

};

#if (_WIN32_IE >= _WIN32_IE_IE80)
#define IETabWindowExports                  IE80TabWindowExports
#define IEGetTabWindowExports_PROC_NAME     "IEGetTabWindowExports"
#endif


/// <summary>
/// Get the table of tab window related exports for this process.
/// Callers should use the result of IEGetProcessModule() and 
/// GetProcAddress(IEGetTabWindowExports_PROC_NAME) to bind to
/// this method.  
/// </summary>
/// <returns>
/// Non-NULL table if this process exposes the tab window exports.
///     The table is invariant for the lifetime of the process.
/// NULL if the process has no process exports.
/// </returns>
typedef const IETabWindowExports* (*IEGetTabWindowExports_t)();

#if defined(__cplusplus) && !defined(NO_IEPROCESS_CLASS)
/// <summary>
/// Static helper class that encapsulates the kernel calls for
/// binding to the IEProcess export tables.
/// </summary>
class IEProcess
{
public:
    /// <summary>
    /// Gets the module handle that hosts the IE per-process exports.  
    /// Use in other IEProcess method calls.  This module handle
    /// doesn't need to be freed since it lasts the entire process.
    /// </summary>
    /// <returns>Non-NULL if any IE process exports have been initialized.</returns>
    static HMODULE 
    GetProcessModule()
    {
        HMODULE module = ::GetModuleHandle(IEPROCESS_MODULE_NAME);
        if (module)
        {
            IEGetProcessModule_t IEGetProcessModule = (IEGetProcessModule_t)::GetProcAddress(module, IEGetProcessModule_PROC_NAME);
            if (IEGetProcessModule)
            {
                return IEGetProcessModule();
            }
        }
        return NULL;
    }

    /// <summary>
    /// Gets the export table for Exports that implement IE process specific .  
    /// behavior relating to being hosted in a tab window.
    /// </summary>
    /// <returns>Non-NULL if the tab window exports have been initialized.</returns>
    static const IETabWindowExports* 
    GetTabWindowExports(HMODULE ieProcessModule)
    {
        if (ieProcessModule)
        {
            IEGetTabWindowExports_t IEGetTabWindowExports = (IEGetTabWindowExports_t)::GetProcAddress(ieProcessModule, IEGetTabWindowExports_PROC_NAME);
            if (IEGetTabWindowExports)
            {
                return IEGetTabWindowExports();
            }
        }
        return NULL;
    }      
};
#endif // NO_IEPROCESS_CLASS
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\iextag.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for iextag.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __iextag_h__
#define __iextag_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IPeerFactory_FWD_DEFINED__
#define __IPeerFactory_FWD_DEFINED__
typedef interface IPeerFactory IPeerFactory;
#endif 	/* __IPeerFactory_FWD_DEFINED__ */


#ifndef __IHomePage_FWD_DEFINED__
#define __IHomePage_FWD_DEFINED__
typedef interface IHomePage IHomePage;
#endif 	/* __IHomePage_FWD_DEFINED__ */


#ifndef __IClientCaps_FWD_DEFINED__
#define __IClientCaps_FWD_DEFINED__
typedef interface IClientCaps IClientCaps;
#endif 	/* __IClientCaps_FWD_DEFINED__ */


#ifndef __IIntelliForms_FWD_DEFINED__
#define __IIntelliForms_FWD_DEFINED__
typedef interface IIntelliForms IIntelliForms;
#endif 	/* __IIntelliForms_FWD_DEFINED__ */


#ifndef __Iwfolders_FWD_DEFINED__
#define __Iwfolders_FWD_DEFINED__
typedef interface Iwfolders Iwfolders;
#endif 	/* __Iwfolders_FWD_DEFINED__ */


#ifndef __IAnchorClick_FWD_DEFINED__
#define __IAnchorClick_FWD_DEFINED__
typedef interface IAnchorClick IAnchorClick;
#endif 	/* __IAnchorClick_FWD_DEFINED__ */


#ifndef __HTMLPersistEvents_FWD_DEFINED__
#define __HTMLPersistEvents_FWD_DEFINED__
typedef interface HTMLPersistEvents HTMLPersistEvents;
#endif 	/* __HTMLPersistEvents_FWD_DEFINED__ */


#ifndef __IHTMLUserDataOM_FWD_DEFINED__
#define __IHTMLUserDataOM_FWD_DEFINED__
typedef interface IHTMLUserDataOM IHTMLUserDataOM;
#endif 	/* __IHTMLUserDataOM_FWD_DEFINED__ */


#ifndef __IHTMLPersistDataOM_FWD_DEFINED__
#define __IHTMLPersistDataOM_FWD_DEFINED__
typedef interface IHTMLPersistDataOM IHTMLPersistDataOM;
#endif 	/* __IHTMLPersistDataOM_FWD_DEFINED__ */


#ifndef __IHTMLPersistData_FWD_DEFINED__
#define __IHTMLPersistData_FWD_DEFINED__
typedef interface IHTMLPersistData IHTMLPersistData;
#endif 	/* __IHTMLPersistData_FWD_DEFINED__ */


#ifndef __IDownloadBehavior_FWD_DEFINED__
#define __IDownloadBehavior_FWD_DEFINED__
typedef interface IDownloadBehavior IDownloadBehavior;
#endif 	/* __IDownloadBehavior_FWD_DEFINED__ */


#ifndef __LayoutRectEvents_FWD_DEFINED__
#define __LayoutRectEvents_FWD_DEFINED__
typedef interface LayoutRectEvents LayoutRectEvents;
#endif 	/* __LayoutRectEvents_FWD_DEFINED__ */


#ifndef __ILayoutRect_FWD_DEFINED__
#define __ILayoutRect_FWD_DEFINED__
typedef interface ILayoutRect ILayoutRect;
#endif 	/* __ILayoutRect_FWD_DEFINED__ */


#ifndef __IDeviceRect_FWD_DEFINED__
#define __IDeviceRect_FWD_DEFINED__
typedef interface IDeviceRect IDeviceRect;
#endif 	/* __IDeviceRect_FWD_DEFINED__ */


#ifndef __ITemplatePrinter_FWD_DEFINED__
#define __ITemplatePrinter_FWD_DEFINED__
typedef interface ITemplatePrinter ITemplatePrinter;
#endif 	/* __ITemplatePrinter_FWD_DEFINED__ */


#ifndef __ITemplatePrinter2_FWD_DEFINED__
#define __ITemplatePrinter2_FWD_DEFINED__
typedef interface ITemplatePrinter2 ITemplatePrinter2;
#endif 	/* __ITemplatePrinter2_FWD_DEFINED__ */


#ifndef __ITemplatePrinter3_FWD_DEFINED__
#define __ITemplatePrinter3_FWD_DEFINED__
typedef interface ITemplatePrinter3 ITemplatePrinter3;
#endif 	/* __ITemplatePrinter3_FWD_DEFINED__ */


#ifndef __IHeaderFooter_FWD_DEFINED__
#define __IHeaderFooter_FWD_DEFINED__
typedef interface IHeaderFooter IHeaderFooter;
#endif 	/* __IHeaderFooter_FWD_DEFINED__ */


#ifndef __IHeaderFooter2_FWD_DEFINED__
#define __IHeaderFooter2_FWD_DEFINED__
typedef interface IHeaderFooter2 IHeaderFooter2;
#endif 	/* __IHeaderFooter2_FWD_DEFINED__ */


#ifndef __PeerFactory_FWD_DEFINED__
#define __PeerFactory_FWD_DEFINED__

#ifdef __cplusplus
typedef class PeerFactory PeerFactory;
#else
typedef struct PeerFactory PeerFactory;
#endif /* __cplusplus */

#endif 	/* __PeerFactory_FWD_DEFINED__ */


#ifndef __ClientCaps_FWD_DEFINED__
#define __ClientCaps_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClientCaps ClientCaps;
#else
typedef struct ClientCaps ClientCaps;
#endif /* __cplusplus */

#endif 	/* __ClientCaps_FWD_DEFINED__ */


#ifndef __IntelliForms_FWD_DEFINED__
#define __IntelliForms_FWD_DEFINED__

#ifdef __cplusplus
typedef class IntelliForms IntelliForms;
#else
typedef struct IntelliForms IntelliForms;
#endif /* __cplusplus */

#endif 	/* __IntelliForms_FWD_DEFINED__ */


#ifndef __HomePage_FWD_DEFINED__
#define __HomePage_FWD_DEFINED__

#ifdef __cplusplus
typedef class HomePage HomePage;
#else
typedef struct HomePage HomePage;
#endif /* __cplusplus */

#endif 	/* __HomePage_FWD_DEFINED__ */


#ifndef __CPersistUserData_FWD_DEFINED__
#define __CPersistUserData_FWD_DEFINED__

#ifdef __cplusplus
typedef class CPersistUserData CPersistUserData;
#else
typedef struct CPersistUserData CPersistUserData;
#endif /* __cplusplus */

#endif 	/* __CPersistUserData_FWD_DEFINED__ */


#ifndef __CPersistDataPeer_FWD_DEFINED__
#define __CPersistDataPeer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CPersistDataPeer CPersistDataPeer;
#else
typedef struct CPersistDataPeer CPersistDataPeer;
#endif /* __cplusplus */

#endif 	/* __CPersistDataPeer_FWD_DEFINED__ */


#ifndef __CPersistShortcut_FWD_DEFINED__
#define __CPersistShortcut_FWD_DEFINED__

#ifdef __cplusplus
typedef class CPersistShortcut CPersistShortcut;
#else
typedef struct CPersistShortcut CPersistShortcut;
#endif /* __cplusplus */

#endif 	/* __CPersistShortcut_FWD_DEFINED__ */


#ifndef __CPersistHistory_FWD_DEFINED__
#define __CPersistHistory_FWD_DEFINED__

#ifdef __cplusplus
typedef class CPersistHistory CPersistHistory;
#else
typedef struct CPersistHistory CPersistHistory;
#endif /* __cplusplus */

#endif 	/* __CPersistHistory_FWD_DEFINED__ */


#ifndef __CPersistSnapshot_FWD_DEFINED__
#define __CPersistSnapshot_FWD_DEFINED__

#ifdef __cplusplus
typedef class CPersistSnapshot CPersistSnapshot;
#else
typedef struct CPersistSnapshot CPersistSnapshot;
#endif /* __cplusplus */

#endif 	/* __CPersistSnapshot_FWD_DEFINED__ */


#ifndef __CDownloadBehavior_FWD_DEFINED__
#define __CDownloadBehavior_FWD_DEFINED__

#ifdef __cplusplus
typedef class CDownloadBehavior CDownloadBehavior;
#else
typedef struct CDownloadBehavior CDownloadBehavior;
#endif /* __cplusplus */

#endif 	/* __CDownloadBehavior_FWD_DEFINED__ */


#ifndef __wfolders_FWD_DEFINED__
#define __wfolders_FWD_DEFINED__

#ifdef __cplusplus
typedef class wfolders wfolders;
#else
typedef struct wfolders wfolders;
#endif /* __cplusplus */

#endif 	/* __wfolders_FWD_DEFINED__ */


#ifndef __AnchorClick_FWD_DEFINED__
#define __AnchorClick_FWD_DEFINED__

#ifdef __cplusplus
typedef class AnchorClick AnchorClick;
#else
typedef struct AnchorClick AnchorClick;
#endif /* __cplusplus */

#endif 	/* __AnchorClick_FWD_DEFINED__ */


#ifndef __CLayoutRect_FWD_DEFINED__
#define __CLayoutRect_FWD_DEFINED__

#ifdef __cplusplus
typedef class CLayoutRect CLayoutRect;
#else
typedef struct CLayoutRect CLayoutRect;
#endif /* __cplusplus */

#endif 	/* __CLayoutRect_FWD_DEFINED__ */


#ifndef __CDeviceRect_FWD_DEFINED__
#define __CDeviceRect_FWD_DEFINED__

#ifdef __cplusplus
typedef class CDeviceRect CDeviceRect;
#else
typedef struct CDeviceRect CDeviceRect;
#endif /* __cplusplus */

#endif 	/* __CDeviceRect_FWD_DEFINED__ */


#ifndef __CTemplatePrinter_FWD_DEFINED__
#define __CTemplatePrinter_FWD_DEFINED__

#ifdef __cplusplus
typedef class CTemplatePrinter CTemplatePrinter;
#else
typedef struct CTemplatePrinter CTemplatePrinter;
#endif /* __cplusplus */

#endif 	/* __CTemplatePrinter_FWD_DEFINED__ */


#ifndef __CHeaderFooter_FWD_DEFINED__
#define __CHeaderFooter_FWD_DEFINED__

#ifdef __cplusplus
typedef class CHeaderFooter CHeaderFooter;
#else
typedef struct CHeaderFooter CHeaderFooter;
#endif /* __cplusplus */

#endif 	/* __CHeaderFooter_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_iextag_0000_0000 */
/* [local] */ 

//=--------------------------------------------------------------------------=
// iextag.h
//=--------------------------------------------------------------------------=
// (C) Copyright Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=



extern RPC_IF_HANDLE __MIDL_itf_iextag_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iextag_0000_0000_v0_0_s_ifspec;

#ifndef __IPeerFactory_INTERFACE_DEFINED__
#define __IPeerFactory_INTERFACE_DEFINED__

/* interface IPeerFactory */
/* [object][unique][helpstring][uuid] */ 


EXTERN_C const IID IID_IPeerFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6663F9D3-B482-11d1-89C6-00C04FB6BFC4")
    IPeerFactory : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IPeerFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IPeerFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IPeerFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IPeerFactory * This);
        
        END_INTERFACE
    } IPeerFactoryVtbl;

    interface IPeerFactory
    {
        CONST_VTBL struct IPeerFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPeerFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IPeerFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IPeerFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPeerFactory_INTERFACE_DEFINED__ */


#ifndef __IHomePage_INTERFACE_DEFINED__
#define __IHomePage_INTERFACE_DEFINED__

/* interface IHomePage */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IHomePage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("766BF2AF-D650-11d1-9811-00C04FC31D2E")
    IHomePage : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE navigateHomePage( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setHomePage( 
            /* [in] */ __RPC__in BSTR bstrURL) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE isHomePage( 
            /* [in] */ __RPC__in BSTR bstrURL,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHomePageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IHomePage * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IHomePage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IHomePage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IHomePage * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IHomePage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IHomePage * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHomePage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *navigateHomePage )( 
            __RPC__in IHomePage * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setHomePage )( 
            __RPC__in IHomePage * This,
            /* [in] */ __RPC__in BSTR bstrURL);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *isHomePage )( 
            __RPC__in IHomePage * This,
            /* [in] */ __RPC__in BSTR bstrURL,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *p);
        
        END_INTERFACE
    } IHomePageVtbl;

    interface IHomePage
    {
        CONST_VTBL struct IHomePageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHomePage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHomePage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHomePage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHomePage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IHomePage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IHomePage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IHomePage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IHomePage_navigateHomePage(This)	\
    ( (This)->lpVtbl -> navigateHomePage(This) ) 

#define IHomePage_setHomePage(This,bstrURL)	\
    ( (This)->lpVtbl -> setHomePage(This,bstrURL) ) 

#define IHomePage_isHomePage(This,bstrURL,p)	\
    ( (This)->lpVtbl -> isHomePage(This,bstrURL,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHomePage_INTERFACE_DEFINED__ */


#ifndef __IClientCaps_INTERFACE_DEFINED__
#define __IClientCaps_INTERFACE_DEFINED__

/* interface IClientCaps */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IClientCaps;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7E8BC44D-AEFF-11D1-89C2-00C04FB6BFC4")
    IClientCaps : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_javaEnabled( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cookieEnabled( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cpuClass( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_systemLanguage( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_userLanguage( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_platform( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_connectionSpeed( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_onLine( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_colorDepth( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bufferDepth( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_height( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_availHeight( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_availWidth( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_connectionType( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE isComponentInstalled( 
            /* [in] */ __RPC__in BSTR bstrName,
            /* [in] */ __RPC__in BSTR bstrType,
            /* [in][defaultvalue] */ __RPC__in BSTR bStrVer,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getComponentVersion( 
            /* [in] */ __RPC__in BSTR bstrName,
            /* [in] */ __RPC__in BSTR bstrType,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVer) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE compareVersions( 
            /* [in] */ __RPC__in BSTR bstrVer1,
            /* [in] */ __RPC__in BSTR bstrVer2,
            /* [retval][out] */ __RPC__out long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE addComponentRequest( 
            /* [in] */ __RPC__in BSTR bstrName,
            /* [in] */ __RPC__in BSTR bstrType,
            /* [in][defaultvalue] */ __RPC__in BSTR bstrVer = L"") = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE doComponentRequest( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE clearComponentRequest( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IClientCapsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IClientCaps * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IClientCaps * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IClientCaps * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IClientCaps * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IClientCaps * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IClientCaps * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IClientCaps * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_javaEnabled )( 
            __RPC__in IClientCaps * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_cookieEnabled )( 
            __RPC__in IClientCaps * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_cpuClass )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_systemLanguage )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_userLanguage )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_platform )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_connectionSpeed )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_onLine )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_colorDepth )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_bufferDepth )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_width )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_height )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_availHeight )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_availWidth )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_connectionType )( 
            __RPC__in IClientCaps * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *isComponentInstalled )( 
            __RPC__in IClientCaps * This,
            /* [in] */ __RPC__in BSTR bstrName,
            /* [in] */ __RPC__in BSTR bstrType,
            /* [in][defaultvalue] */ __RPC__in BSTR bStrVer,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getComponentVersion )( 
            __RPC__in IClientCaps * This,
            /* [in] */ __RPC__in BSTR bstrName,
            /* [in] */ __RPC__in BSTR bstrType,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVer);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *compareVersions )( 
            __RPC__in IClientCaps * This,
            /* [in] */ __RPC__in BSTR bstrVer1,
            /* [in] */ __RPC__in BSTR bstrVer2,
            /* [retval][out] */ __RPC__out long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *addComponentRequest )( 
            __RPC__in IClientCaps * This,
            /* [in] */ __RPC__in BSTR bstrName,
            /* [in] */ __RPC__in BSTR bstrType,
            /* [in][defaultvalue] */ __RPC__in BSTR bstrVer);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *doComponentRequest )( 
            __RPC__in IClientCaps * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *clearComponentRequest )( 
            __RPC__in IClientCaps * This);
        
        END_INTERFACE
    } IClientCapsVtbl;

    interface IClientCaps
    {
        CONST_VTBL struct IClientCapsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IClientCaps_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IClientCaps_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IClientCaps_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IClientCaps_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IClientCaps_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IClientCaps_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IClientCaps_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IClientCaps_get_javaEnabled(This,pVal)	\
    ( (This)->lpVtbl -> get_javaEnabled(This,pVal) ) 

#define IClientCaps_get_cookieEnabled(This,pVal)	\
    ( (This)->lpVtbl -> get_cookieEnabled(This,pVal) ) 

#define IClientCaps_get_cpuClass(This,p)	\
    ( (This)->lpVtbl -> get_cpuClass(This,p) ) 

#define IClientCaps_get_systemLanguage(This,p)	\
    ( (This)->lpVtbl -> get_systemLanguage(This,p) ) 

#define IClientCaps_get_userLanguage(This,p)	\
    ( (This)->lpVtbl -> get_userLanguage(This,p) ) 

#define IClientCaps_get_platform(This,p)	\
    ( (This)->lpVtbl -> get_platform(This,p) ) 

#define IClientCaps_get_connectionSpeed(This,p)	\
    ( (This)->lpVtbl -> get_connectionSpeed(This,p) ) 

#define IClientCaps_get_onLine(This,p)	\
    ( (This)->lpVtbl -> get_onLine(This,p) ) 

#define IClientCaps_get_colorDepth(This,p)	\
    ( (This)->lpVtbl -> get_colorDepth(This,p) ) 

#define IClientCaps_get_bufferDepth(This,p)	\
    ( (This)->lpVtbl -> get_bufferDepth(This,p) ) 

#define IClientCaps_get_width(This,p)	\
    ( (This)->lpVtbl -> get_width(This,p) ) 

#define IClientCaps_get_height(This,p)	\
    ( (This)->lpVtbl -> get_height(This,p) ) 

#define IClientCaps_get_availHeight(This,p)	\
    ( (This)->lpVtbl -> get_availHeight(This,p) ) 

#define IClientCaps_get_availWidth(This,p)	\
    ( (This)->lpVtbl -> get_availWidth(This,p) ) 

#define IClientCaps_get_connectionType(This,p)	\
    ( (This)->lpVtbl -> get_connectionType(This,p) ) 

#define IClientCaps_isComponentInstalled(This,bstrName,bstrType,bStrVer,p)	\
    ( (This)->lpVtbl -> isComponentInstalled(This,bstrName,bstrType,bStrVer,p) ) 

#define IClientCaps_getComponentVersion(This,bstrName,bstrType,pbstrVer)	\
    ( (This)->lpVtbl -> getComponentVersion(This,bstrName,bstrType,pbstrVer) ) 

#define IClientCaps_compareVersions(This,bstrVer1,bstrVer2,p)	\
    ( (This)->lpVtbl -> compareVersions(This,bstrVer1,bstrVer2,p) ) 

#define IClientCaps_addComponentRequest(This,bstrName,bstrType,bstrVer)	\
    ( (This)->lpVtbl -> addComponentRequest(This,bstrName,bstrType,bstrVer) ) 

#define IClientCaps_doComponentRequest(This,p)	\
    ( (This)->lpVtbl -> doComponentRequest(This,p) ) 

#define IClientCaps_clearComponentRequest(This)	\
    ( (This)->lpVtbl -> clearComponentRequest(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IClientCaps_INTERFACE_DEFINED__ */


#ifndef __IIntelliForms_INTERFACE_DEFINED__
#define __IIntelliForms_INTERFACE_DEFINED__

/* interface IIntelliForms */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_IIntelliForms;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9B9F68E6-1AAA-11d2-BCA5-00C04FD929DB")
    IIntelliForms : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_enabled( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_enabled( 
            /* [in] */ VARIANT_BOOL bVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IIntelliFormsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IIntelliForms * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IIntelliForms * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IIntelliForms * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IIntelliForms * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IIntelliForms * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IIntelliForms * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IIntelliForms * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_enabled )( 
            __RPC__in IIntelliForms * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_enabled )( 
            __RPC__in IIntelliForms * This,
            /* [in] */ VARIANT_BOOL bVal);
        
        END_INTERFACE
    } IIntelliFormsVtbl;

    interface IIntelliForms
    {
        CONST_VTBL struct IIntelliFormsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IIntelliForms_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IIntelliForms_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IIntelliForms_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IIntelliForms_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IIntelliForms_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IIntelliForms_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IIntelliForms_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IIntelliForms_get_enabled(This,pVal)	\
    ( (This)->lpVtbl -> get_enabled(This,pVal) ) 

#define IIntelliForms_put_enabled(This,bVal)	\
    ( (This)->lpVtbl -> put_enabled(This,bVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IIntelliForms_INTERFACE_DEFINED__ */


#ifndef __Iwfolders_INTERFACE_DEFINED__
#define __Iwfolders_INTERFACE_DEFINED__

/* interface Iwfolders */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_Iwfolders;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BAE31F98-1B81-11D2-A97A-00C04F8ECB02")
    Iwfolders : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE navigate( 
            /* [in] */ __RPC__in BSTR bstrUrl,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *pbstrRetVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE navigateFrame( 
            /* [in] */ __RPC__in BSTR bstrUrl,
            /* [in] */ __RPC__in BSTR bstrTargetFrame,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *pbstrRetVal) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE navigateNoSite( 
            /* [in] */ __RPC__in BSTR bstrUrl,
            /* [in] */ __RPC__in BSTR bstrTargetFrame,
            /* [in] */ DWORD dwhwnd,
            /* [in] */ __RPC__in_opt IUnknown *pwb) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IwfoldersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in Iwfolders * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in Iwfolders * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in Iwfolders * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in Iwfolders * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in Iwfolders * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in Iwfolders * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Iwfolders * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *navigate )( 
            __RPC__in Iwfolders * This,
            /* [in] */ __RPC__in BSTR bstrUrl,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *pbstrRetVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *navigateFrame )( 
            __RPC__in Iwfolders * This,
            /* [in] */ __RPC__in BSTR bstrUrl,
            /* [in] */ __RPC__in BSTR bstrTargetFrame,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *pbstrRetVal);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *navigateNoSite )( 
            __RPC__in Iwfolders * This,
            /* [in] */ __RPC__in BSTR bstrUrl,
            /* [in] */ __RPC__in BSTR bstrTargetFrame,
            /* [in] */ DWORD dwhwnd,
            /* [in] */ __RPC__in_opt IUnknown *pwb);
        
        END_INTERFACE
    } IwfoldersVtbl;

    interface Iwfolders
    {
        CONST_VTBL struct IwfoldersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Iwfolders_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Iwfolders_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Iwfolders_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Iwfolders_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Iwfolders_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Iwfolders_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Iwfolders_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Iwfolders_navigate(This,bstrUrl,pbstrRetVal)	\
    ( (This)->lpVtbl -> navigate(This,bstrUrl,pbstrRetVal) ) 

#define Iwfolders_navigateFrame(This,bstrUrl,bstrTargetFrame,pbstrRetVal)	\
    ( (This)->lpVtbl -> navigateFrame(This,bstrUrl,bstrTargetFrame,pbstrRetVal) ) 

#define Iwfolders_navigateNoSite(This,bstrUrl,bstrTargetFrame,dwhwnd,pwb)	\
    ( (This)->lpVtbl -> navigateNoSite(This,bstrUrl,bstrTargetFrame,dwhwnd,pwb) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Iwfolders_INTERFACE_DEFINED__ */


#ifndef __IAnchorClick_INTERFACE_DEFINED__
#define __IAnchorClick_INTERFACE_DEFINED__

/* interface IAnchorClick */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IAnchorClick;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("13D5413B-33B9-11D2-95A7-00C04F8ECB02")
    IAnchorClick : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ProcOnClick( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnchorClickVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAnchorClick * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAnchorClick * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAnchorClick * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IAnchorClick * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IAnchorClick * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IAnchorClick * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAnchorClick * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ProcOnClick )( 
            __RPC__in IAnchorClick * This);
        
        END_INTERFACE
    } IAnchorClickVtbl;

    interface IAnchorClick
    {
        CONST_VTBL struct IAnchorClickVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnchorClick_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAnchorClick_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAnchorClick_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAnchorClick_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAnchorClick_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAnchorClick_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAnchorClick_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAnchorClick_ProcOnClick(This)	\
    ( (This)->lpVtbl -> ProcOnClick(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAnchorClick_INTERFACE_DEFINED__ */


#ifndef __IHTMLUserDataOM_INTERFACE_DEFINED__
#define __IHTMLUserDataOM_INTERFACE_DEFINED__

/* interface IHTMLUserDataOM */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLUserDataOM;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f48f-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLUserDataOM : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_XMLDocument( 
            /* [out][retval] */ __RPC__deref_out_opt IDispatch **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE save( 
            /* [in] */ __RPC__in BSTR strName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE load( 
            /* [in] */ __RPC__in BSTR strName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getAttribute( 
            /* [in] */ __RPC__in BSTR name,
            /* [out][retval] */ __RPC__out VARIANT *pValue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setAttribute( 
            /* [in] */ __RPC__in BSTR name,
            /* [in] */ VARIANT value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE removeAttribute( 
            /* [in] */ __RPC__in BSTR name) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_expires( 
            /* [in] */ __RPC__in BSTR bstr) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_expires( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *pbstr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLUserDataOMVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IHTMLUserDataOM * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IHTMLUserDataOM * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IHTMLUserDataOM * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IHTMLUserDataOM * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IHTMLUserDataOM * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IHTMLUserDataOM * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLUserDataOM * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_XMLDocument )( 
            __RPC__in IHTMLUserDataOM * This,
            /* [out][retval] */ __RPC__deref_out_opt IDispatch **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *save )( 
            __RPC__in IHTMLUserDataOM * This,
            /* [in] */ __RPC__in BSTR strName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *load )( 
            __RPC__in IHTMLUserDataOM * This,
            /* [in] */ __RPC__in BSTR strName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            __RPC__in IHTMLUserDataOM * This,
            /* [in] */ __RPC__in BSTR name,
            /* [out][retval] */ __RPC__out VARIANT *pValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            __RPC__in IHTMLUserDataOM * This,
            /* [in] */ __RPC__in BSTR name,
            /* [in] */ VARIANT value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *removeAttribute )( 
            __RPC__in IHTMLUserDataOM * This,
            /* [in] */ __RPC__in BSTR name);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_expires )( 
            __RPC__in IHTMLUserDataOM * This,
            /* [in] */ __RPC__in BSTR bstr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_expires )( 
            __RPC__in IHTMLUserDataOM * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *pbstr);
        
        END_INTERFACE
    } IHTMLUserDataOMVtbl;

    interface IHTMLUserDataOM
    {
        CONST_VTBL struct IHTMLUserDataOMVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLUserDataOM_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHTMLUserDataOM_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHTMLUserDataOM_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHTMLUserDataOM_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IHTMLUserDataOM_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IHTMLUserDataOM_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IHTMLUserDataOM_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IHTMLUserDataOM_get_XMLDocument(This,p)	\
    ( (This)->lpVtbl -> get_XMLDocument(This,p) ) 

#define IHTMLUserDataOM_save(This,strName)	\
    ( (This)->lpVtbl -> save(This,strName) ) 

#define IHTMLUserDataOM_load(This,strName)	\
    ( (This)->lpVtbl -> load(This,strName) ) 

#define IHTMLUserDataOM_getAttribute(This,name,pValue)	\
    ( (This)->lpVtbl -> getAttribute(This,name,pValue) ) 

#define IHTMLUserDataOM_setAttribute(This,name,value)	\
    ( (This)->lpVtbl -> setAttribute(This,name,value) ) 

#define IHTMLUserDataOM_removeAttribute(This,name)	\
    ( (This)->lpVtbl -> removeAttribute(This,name) ) 

#define IHTMLUserDataOM_put_expires(This,bstr)	\
    ( (This)->lpVtbl -> put_expires(This,bstr) ) 

#define IHTMLUserDataOM_get_expires(This,pbstr)	\
    ( (This)->lpVtbl -> get_expires(This,pbstr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHTMLUserDataOM_INTERFACE_DEFINED__ */


#ifndef __IHTMLPersistDataOM_INTERFACE_DEFINED__
#define __IHTMLPersistDataOM_INTERFACE_DEFINED__

/* interface IHTMLPersistDataOM */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLPersistDataOM;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4c0-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLPersistDataOM : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_XMLDocument( 
            /* [out][retval] */ __RPC__deref_out_opt IDispatch **p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getAttribute( 
            /* [in] */ __RPC__in BSTR name,
            /* [out][retval] */ __RPC__out VARIANT *pValue) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setAttribute( 
            /* [in] */ __RPC__in BSTR name,
            /* [in] */ VARIANT value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE removeAttribute( 
            /* [in] */ __RPC__in BSTR name) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLPersistDataOMVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IHTMLPersistDataOM * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IHTMLPersistDataOM * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IHTMLPersistDataOM * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IHTMLPersistDataOM * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IHTMLPersistDataOM * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IHTMLPersistDataOM * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHTMLPersistDataOM * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_XMLDocument )( 
            __RPC__in IHTMLPersistDataOM * This,
            /* [out][retval] */ __RPC__deref_out_opt IDispatch **p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            __RPC__in IHTMLPersistDataOM * This,
            /* [in] */ __RPC__in BSTR name,
            /* [out][retval] */ __RPC__out VARIANT *pValue);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            __RPC__in IHTMLPersistDataOM * This,
            /* [in] */ __RPC__in BSTR name,
            /* [in] */ VARIANT value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *removeAttribute )( 
            __RPC__in IHTMLPersistDataOM * This,
            /* [in] */ __RPC__in BSTR name);
        
        END_INTERFACE
    } IHTMLPersistDataOMVtbl;

    interface IHTMLPersistDataOM
    {
        CONST_VTBL struct IHTMLPersistDataOMVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLPersistDataOM_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHTMLPersistDataOM_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHTMLPersistDataOM_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHTMLPersistDataOM_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IHTMLPersistDataOM_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IHTMLPersistDataOM_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IHTMLPersistDataOM_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IHTMLPersistDataOM_get_XMLDocument(This,p)	\
    ( (This)->lpVtbl -> get_XMLDocument(This,p) ) 

#define IHTMLPersistDataOM_getAttribute(This,name,pValue)	\
    ( (This)->lpVtbl -> getAttribute(This,name,pValue) ) 

#define IHTMLPersistDataOM_setAttribute(This,name,value)	\
    ( (This)->lpVtbl -> setAttribute(This,name,value) ) 

#define IHTMLPersistDataOM_removeAttribute(This,name)	\
    ( (This)->lpVtbl -> removeAttribute(This,name) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHTMLPersistDataOM_INTERFACE_DEFINED__ */


#ifndef __IHTMLPersistData_INTERFACE_DEFINED__
#define __IHTMLPersistData_INTERFACE_DEFINED__

/* interface IHTMLPersistData */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHTMLPersistData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f4c5-98b5-11cf-bb82-00aa00bdce0b")
    IHTMLPersistData : public IUnknown
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE save( 
            /* [in] */ __RPC__in_opt IUnknown *pUnk,
            /* [in] */ long lType,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *fContinueBroacast) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE load( 
            /* [in] */ __RPC__in_opt IUnknown *pUnk,
            /* [in] */ long lType,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *fDoDefault) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryType( 
            /* [in] */ long lType,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *pfSupportsType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLPersistDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IHTMLPersistData * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IHTMLPersistData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IHTMLPersistData * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *save )( 
            __RPC__in IHTMLPersistData * This,
            /* [in] */ __RPC__in_opt IUnknown *pUnk,
            /* [in] */ long lType,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *fContinueBroacast);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *load )( 
            __RPC__in IHTMLPersistData * This,
            /* [in] */ __RPC__in_opt IUnknown *pUnk,
            /* [in] */ long lType,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *fDoDefault);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *queryType )( 
            __RPC__in IHTMLPersistData * This,
            /* [in] */ long lType,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *pfSupportsType);
        
        END_INTERFACE
    } IHTMLPersistDataVtbl;

    interface IHTMLPersistData
    {
        CONST_VTBL struct IHTMLPersistDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLPersistData_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHTMLPersistData_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHTMLPersistData_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHTMLPersistData_save(This,pUnk,lType,fContinueBroacast)	\
    ( (This)->lpVtbl -> save(This,pUnk,lType,fContinueBroacast) ) 

#define IHTMLPersistData_load(This,pUnk,lType,fDoDefault)	\
    ( (This)->lpVtbl -> load(This,pUnk,lType,fDoDefault) ) 

#define IHTMLPersistData_queryType(This,lType,pfSupportsType)	\
    ( (This)->lpVtbl -> queryType(This,lType,pfSupportsType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHTMLPersistData_INTERFACE_DEFINED__ */


#ifndef __IDownloadBehavior_INTERFACE_DEFINED__
#define __IDownloadBehavior_INTERFACE_DEFINED__

/* interface IDownloadBehavior */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IDownloadBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f5bd-98b5-11cf-bb82-00aa00bdce0b")
    IDownloadBehavior : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE startDownload( 
            /* [in] */ __RPC__in BSTR bstrUrl,
            /* [in] */ __RPC__in_opt IDispatch *pdispCallback) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDownloadBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDownloadBehavior * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDownloadBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDownloadBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IDownloadBehavior * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IDownloadBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IDownloadBehavior * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDownloadBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *startDownload )( 
            __RPC__in IDownloadBehavior * This,
            /* [in] */ __RPC__in BSTR bstrUrl,
            /* [in] */ __RPC__in_opt IDispatch *pdispCallback);
        
        END_INTERFACE
    } IDownloadBehaviorVtbl;

    interface IDownloadBehavior
    {
        CONST_VTBL struct IDownloadBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDownloadBehavior_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDownloadBehavior_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDownloadBehavior_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDownloadBehavior_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDownloadBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDownloadBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDownloadBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDownloadBehavior_startDownload(This,bstrUrl,pdispCallback)	\
    ( (This)->lpVtbl -> startDownload(This,bstrUrl,pdispCallback) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDownloadBehavior_INTERFACE_DEFINED__ */


#ifndef __ILayoutRect_INTERFACE_DEFINED__
#define __ILayoutRect_INTERFACE_DEFINED__

/* interface ILayoutRect */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_ILayoutRect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f665-98b5-11cf-bb82-00aa00bdce0b")
    ILayoutRect : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_nextRect( 
            /* [in] */ __RPC__in BSTR bstrElementId) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_nextRect( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *pbstrElementId) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_contentSrc( 
            /* [in] */ VARIANT varContentSrc) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_contentSrc( 
            /* [out][retval] */ __RPC__out VARIANT *pvarContentSrc) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_honorPageBreaks( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_honorPageBreaks( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_honorPageRules( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_honorPageRules( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_nextRectElement( 
            /* [in] */ __RPC__in_opt IDispatch *pElem) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_nextRectElement( 
            /* [out][retval] */ __RPC__deref_out_opt IDispatch **ppElem) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_contentDocument( 
            /* [out][retval] */ __RPC__deref_out_opt IDispatch **pDoc) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILayoutRectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ILayoutRect * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ILayoutRect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ILayoutRect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ILayoutRect * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ILayoutRect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ILayoutRect * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ILayoutRect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nextRect )( 
            __RPC__in ILayoutRect * This,
            /* [in] */ __RPC__in BSTR bstrElementId);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextRect )( 
            __RPC__in ILayoutRect * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *pbstrElementId);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_contentSrc )( 
            __RPC__in ILayoutRect * This,
            /* [in] */ VARIANT varContentSrc);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_contentSrc )( 
            __RPC__in ILayoutRect * This,
            /* [out][retval] */ __RPC__out VARIANT *pvarContentSrc);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_honorPageBreaks )( 
            __RPC__in ILayoutRect * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_honorPageBreaks )( 
            __RPC__in ILayoutRect * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_honorPageRules )( 
            __RPC__in ILayoutRect * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_honorPageRules )( 
            __RPC__in ILayoutRect * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nextRectElement )( 
            __RPC__in ILayoutRect * This,
            /* [in] */ __RPC__in_opt IDispatch *pElem);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextRectElement )( 
            __RPC__in ILayoutRect * This,
            /* [out][retval] */ __RPC__deref_out_opt IDispatch **ppElem);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_contentDocument )( 
            __RPC__in ILayoutRect * This,
            /* [out][retval] */ __RPC__deref_out_opt IDispatch **pDoc);
        
        END_INTERFACE
    } ILayoutRectVtbl;

    interface ILayoutRect
    {
        CONST_VTBL struct ILayoutRectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILayoutRect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ILayoutRect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ILayoutRect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ILayoutRect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ILayoutRect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ILayoutRect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ILayoutRect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ILayoutRect_put_nextRect(This,bstrElementId)	\
    ( (This)->lpVtbl -> put_nextRect(This,bstrElementId) ) 

#define ILayoutRect_get_nextRect(This,pbstrElementId)	\
    ( (This)->lpVtbl -> get_nextRect(This,pbstrElementId) ) 

#define ILayoutRect_put_contentSrc(This,varContentSrc)	\
    ( (This)->lpVtbl -> put_contentSrc(This,varContentSrc) ) 

#define ILayoutRect_get_contentSrc(This,pvarContentSrc)	\
    ( (This)->lpVtbl -> get_contentSrc(This,pvarContentSrc) ) 

#define ILayoutRect_put_honorPageBreaks(This,v)	\
    ( (This)->lpVtbl -> put_honorPageBreaks(This,v) ) 

#define ILayoutRect_get_honorPageBreaks(This,p)	\
    ( (This)->lpVtbl -> get_honorPageBreaks(This,p) ) 

#define ILayoutRect_put_honorPageRules(This,v)	\
    ( (This)->lpVtbl -> put_honorPageRules(This,v) ) 

#define ILayoutRect_get_honorPageRules(This,p)	\
    ( (This)->lpVtbl -> get_honorPageRules(This,p) ) 

#define ILayoutRect_put_nextRectElement(This,pElem)	\
    ( (This)->lpVtbl -> put_nextRectElement(This,pElem) ) 

#define ILayoutRect_get_nextRectElement(This,ppElem)	\
    ( (This)->lpVtbl -> get_nextRectElement(This,ppElem) ) 

#define ILayoutRect_get_contentDocument(This,pDoc)	\
    ( (This)->lpVtbl -> get_contentDocument(This,pDoc) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ILayoutRect_INTERFACE_DEFINED__ */


#ifndef __IDeviceRect_INTERFACE_DEFINED__
#define __IDeviceRect_INTERFACE_DEFINED__

/* interface IDeviceRect */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IDeviceRect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f6d5-98b5-11cf-bb82-00aa00bdce0b")
    IDeviceRect : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDeviceRectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDeviceRect * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDeviceRect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDeviceRect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IDeviceRect * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IDeviceRect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IDeviceRect * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDeviceRect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IDeviceRectVtbl;

    interface IDeviceRect
    {
        CONST_VTBL struct IDeviceRectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDeviceRect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDeviceRect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDeviceRect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDeviceRect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDeviceRect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDeviceRect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDeviceRect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDeviceRect_INTERFACE_DEFINED__ */


#ifndef __ITemplatePrinter_INTERFACE_DEFINED__
#define __ITemplatePrinter_INTERFACE_DEFINED__

/* interface ITemplatePrinter */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_ITemplatePrinter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f6b4-98b5-11cf-bb82-00aa00bdce0b")
    ITemplatePrinter : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE startDoc( 
            /* [in] */ __RPC__in BSTR bstrTitle,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE stopDoc( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE printBlankPage( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE printPage( 
            /* [in] */ __RPC__in_opt IDispatch *pElemDisp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ensurePrintDialogDefaults( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE showPrintDialog( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE showPageSetupDialog( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE printNonNative( 
            /* [in] */ __RPC__in_opt IUnknown *pMarkup,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE printNonNativeFrames( 
            /* [in] */ __RPC__in_opt IUnknown *pMarkup,
            /* [in] */ VARIANT_BOOL fActiveFrame) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_framesetDocument( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_framesetDocument( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_frameActive( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frameActive( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_frameAsShown( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frameAsShown( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_selection( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_selection( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_selectedPages( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_selectedPages( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_currentPage( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_currentPage( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_currentPageAvail( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_currentPageAvail( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_collate( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_collate( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_duplex( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_copies( 
            /* [in] */ WORD v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_copies( 
            /* [out][retval] */ __RPC__out WORD *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_pageFrom( 
            /* [in] */ WORD v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_pageFrom( 
            /* [out][retval] */ __RPC__out WORD *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_pageTo( 
            /* [in] */ WORD v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_pageTo( 
            /* [out][retval] */ __RPC__out WORD *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_tableOfLinks( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_tableOfLinks( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_allLinkedDocuments( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_allLinkedDocuments( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_header( 
            /* [in] */ __RPC__in BSTR bstrHeader) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_header( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *bstrHeader) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_footer( 
            /* [in] */ __RPC__in BSTR bstrFooter) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_footer( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *bstrFooter) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_marginLeft( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_marginLeft( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_marginRight( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_marginRight( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_marginTop( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_marginTop( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_marginBottom( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_marginBottom( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_pageWidth( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_pageHeight( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_unprintableLeft( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_unprintableTop( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_unprintableRight( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_unprintableBottom( 
            /* [out][retval] */ __RPC__out long *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE updatePageStatus( 
            /* [in] */ __RPC__in long *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITemplatePrinterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITemplatePrinter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITemplatePrinter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITemplatePrinter * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITemplatePrinter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *startDoc )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ __RPC__in BSTR bstrTitle,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *stopDoc )( 
            __RPC__in ITemplatePrinter * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *printBlankPage )( 
            __RPC__in ITemplatePrinter * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *printPage )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ __RPC__in_opt IDispatch *pElemDisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ensurePrintDialogDefaults )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *showPrintDialog )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *showPageSetupDialog )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *printNonNative )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ __RPC__in_opt IUnknown *pMarkup,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *printNonNativeFrames )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ __RPC__in_opt IUnknown *pMarkup,
            /* [in] */ VARIANT_BOOL fActiveFrame);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_framesetDocument )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_framesetDocument )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_frameActive )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frameActive )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_frameAsShown )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frameAsShown )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_selection )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selection )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_selectedPages )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selectedPages )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_currentPage )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currentPage )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_currentPageAvail )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currentPageAvail )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_collate )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_collate )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_duplex )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_copies )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ WORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_copies )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out WORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_pageFrom )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ WORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageFrom )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out WORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_pageTo )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ WORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageTo )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out WORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_tableOfLinks )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tableOfLinks )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_allLinkedDocuments )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_allLinkedDocuments )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_header )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ __RPC__in BSTR bstrHeader);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_header )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *bstrHeader);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_footer )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ __RPC__in BSTR bstrFooter);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_footer )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *bstrFooter);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginLeft )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginLeft )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginRight )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginRight )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginTop )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginTop )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginBottom )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginBottom )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageWidth )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageHeight )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_unprintableLeft )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_unprintableTop )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_unprintableRight )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_unprintableBottom )( 
            __RPC__in ITemplatePrinter * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *updatePageStatus )( 
            __RPC__in ITemplatePrinter * This,
            /* [in] */ __RPC__in long *p);
        
        END_INTERFACE
    } ITemplatePrinterVtbl;

    interface ITemplatePrinter
    {
        CONST_VTBL struct ITemplatePrinterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITemplatePrinter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITemplatePrinter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITemplatePrinter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITemplatePrinter_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITemplatePrinter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITemplatePrinter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITemplatePrinter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITemplatePrinter_startDoc(This,bstrTitle,p)	\
    ( (This)->lpVtbl -> startDoc(This,bstrTitle,p) ) 

#define ITemplatePrinter_stopDoc(This)	\
    ( (This)->lpVtbl -> stopDoc(This) ) 

#define ITemplatePrinter_printBlankPage(This)	\
    ( (This)->lpVtbl -> printBlankPage(This) ) 

#define ITemplatePrinter_printPage(This,pElemDisp)	\
    ( (This)->lpVtbl -> printPage(This,pElemDisp) ) 

#define ITemplatePrinter_ensurePrintDialogDefaults(This,p)	\
    ( (This)->lpVtbl -> ensurePrintDialogDefaults(This,p) ) 

#define ITemplatePrinter_showPrintDialog(This,p)	\
    ( (This)->lpVtbl -> showPrintDialog(This,p) ) 

#define ITemplatePrinter_showPageSetupDialog(This,p)	\
    ( (This)->lpVtbl -> showPageSetupDialog(This,p) ) 

#define ITemplatePrinter_printNonNative(This,pMarkup,p)	\
    ( (This)->lpVtbl -> printNonNative(This,pMarkup,p) ) 

#define ITemplatePrinter_printNonNativeFrames(This,pMarkup,fActiveFrame)	\
    ( (This)->lpVtbl -> printNonNativeFrames(This,pMarkup,fActiveFrame) ) 

#define ITemplatePrinter_put_framesetDocument(This,v)	\
    ( (This)->lpVtbl -> put_framesetDocument(This,v) ) 

#define ITemplatePrinter_get_framesetDocument(This,p)	\
    ( (This)->lpVtbl -> get_framesetDocument(This,p) ) 

#define ITemplatePrinter_put_frameActive(This,v)	\
    ( (This)->lpVtbl -> put_frameActive(This,v) ) 

#define ITemplatePrinter_get_frameActive(This,p)	\
    ( (This)->lpVtbl -> get_frameActive(This,p) ) 

#define ITemplatePrinter_put_frameAsShown(This,v)	\
    ( (This)->lpVtbl -> put_frameAsShown(This,v) ) 

#define ITemplatePrinter_get_frameAsShown(This,p)	\
    ( (This)->lpVtbl -> get_frameAsShown(This,p) ) 

#define ITemplatePrinter_put_selection(This,v)	\
    ( (This)->lpVtbl -> put_selection(This,v) ) 

#define ITemplatePrinter_get_selection(This,p)	\
    ( (This)->lpVtbl -> get_selection(This,p) ) 

#define ITemplatePrinter_put_selectedPages(This,v)	\
    ( (This)->lpVtbl -> put_selectedPages(This,v) ) 

#define ITemplatePrinter_get_selectedPages(This,p)	\
    ( (This)->lpVtbl -> get_selectedPages(This,p) ) 

#define ITemplatePrinter_put_currentPage(This,v)	\
    ( (This)->lpVtbl -> put_currentPage(This,v) ) 

#define ITemplatePrinter_get_currentPage(This,p)	\
    ( (This)->lpVtbl -> get_currentPage(This,p) ) 

#define ITemplatePrinter_put_currentPageAvail(This,v)	\
    ( (This)->lpVtbl -> put_currentPageAvail(This,v) ) 

#define ITemplatePrinter_get_currentPageAvail(This,p)	\
    ( (This)->lpVtbl -> get_currentPageAvail(This,p) ) 

#define ITemplatePrinter_put_collate(This,v)	\
    ( (This)->lpVtbl -> put_collate(This,v) ) 

#define ITemplatePrinter_get_collate(This,p)	\
    ( (This)->lpVtbl -> get_collate(This,p) ) 

#define ITemplatePrinter_get_duplex(This,p)	\
    ( (This)->lpVtbl -> get_duplex(This,p) ) 

#define ITemplatePrinter_put_copies(This,v)	\
    ( (This)->lpVtbl -> put_copies(This,v) ) 

#define ITemplatePrinter_get_copies(This,p)	\
    ( (This)->lpVtbl -> get_copies(This,p) ) 

#define ITemplatePrinter_put_pageFrom(This,v)	\
    ( (This)->lpVtbl -> put_pageFrom(This,v) ) 

#define ITemplatePrinter_get_pageFrom(This,p)	\
    ( (This)->lpVtbl -> get_pageFrom(This,p) ) 

#define ITemplatePrinter_put_pageTo(This,v)	\
    ( (This)->lpVtbl -> put_pageTo(This,v) ) 

#define ITemplatePrinter_get_pageTo(This,p)	\
    ( (This)->lpVtbl -> get_pageTo(This,p) ) 

#define ITemplatePrinter_put_tableOfLinks(This,v)	\
    ( (This)->lpVtbl -> put_tableOfLinks(This,v) ) 

#define ITemplatePrinter_get_tableOfLinks(This,p)	\
    ( (This)->lpVtbl -> get_tableOfLinks(This,p) ) 

#define ITemplatePrinter_put_allLinkedDocuments(This,v)	\
    ( (This)->lpVtbl -> put_allLinkedDocuments(This,v) ) 

#define ITemplatePrinter_get_allLinkedDocuments(This,p)	\
    ( (This)->lpVtbl -> get_allLinkedDocuments(This,p) ) 

#define ITemplatePrinter_put_header(This,bstrHeader)	\
    ( (This)->lpVtbl -> put_header(This,bstrHeader) ) 

#define ITemplatePrinter_get_header(This,bstrHeader)	\
    ( (This)->lpVtbl -> get_header(This,bstrHeader) ) 

#define ITemplatePrinter_put_footer(This,bstrFooter)	\
    ( (This)->lpVtbl -> put_footer(This,bstrFooter) ) 

#define ITemplatePrinter_get_footer(This,bstrFooter)	\
    ( (This)->lpVtbl -> get_footer(This,bstrFooter) ) 

#define ITemplatePrinter_put_marginLeft(This,v)	\
    ( (This)->lpVtbl -> put_marginLeft(This,v) ) 

#define ITemplatePrinter_get_marginLeft(This,p)	\
    ( (This)->lpVtbl -> get_marginLeft(This,p) ) 

#define ITemplatePrinter_put_marginRight(This,v)	\
    ( (This)->lpVtbl -> put_marginRight(This,v) ) 

#define ITemplatePrinter_get_marginRight(This,p)	\
    ( (This)->lpVtbl -> get_marginRight(This,p) ) 

#define ITemplatePrinter_put_marginTop(This,v)	\
    ( (This)->lpVtbl -> put_marginTop(This,v) ) 

#define ITemplatePrinter_get_marginTop(This,p)	\
    ( (This)->lpVtbl -> get_marginTop(This,p) ) 

#define ITemplatePrinter_put_marginBottom(This,v)	\
    ( (This)->lpVtbl -> put_marginBottom(This,v) ) 

#define ITemplatePrinter_get_marginBottom(This,p)	\
    ( (This)->lpVtbl -> get_marginBottom(This,p) ) 

#define ITemplatePrinter_get_pageWidth(This,p)	\
    ( (This)->lpVtbl -> get_pageWidth(This,p) ) 

#define ITemplatePrinter_get_pageHeight(This,p)	\
    ( (This)->lpVtbl -> get_pageHeight(This,p) ) 

#define ITemplatePrinter_get_unprintableLeft(This,p)	\
    ( (This)->lpVtbl -> get_unprintableLeft(This,p) ) 

#define ITemplatePrinter_get_unprintableTop(This,p)	\
    ( (This)->lpVtbl -> get_unprintableTop(This,p) ) 

#define ITemplatePrinter_get_unprintableRight(This,p)	\
    ( (This)->lpVtbl -> get_unprintableRight(This,p) ) 

#define ITemplatePrinter_get_unprintableBottom(This,p)	\
    ( (This)->lpVtbl -> get_unprintableBottom(This,p) ) 

#define ITemplatePrinter_updatePageStatus(This,p)	\
    ( (This)->lpVtbl -> updatePageStatus(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITemplatePrinter_INTERFACE_DEFINED__ */


#ifndef __ITemplatePrinter2_INTERFACE_DEFINED__
#define __ITemplatePrinter2_INTERFACE_DEFINED__

/* interface ITemplatePrinter2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_ITemplatePrinter2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f83f-98b5-11cf-bb82-00aa00bdce0b")
    ITemplatePrinter2 : public ITemplatePrinter
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_selectionEnabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_selectionEnabled( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_frameActiveEnabled( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frameActiveEnabled( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_orientation( 
            /* [in] */ __RPC__in BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_orientation( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_usePrinterCopyCollate( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_usePrinterCopyCollate( 
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE deviceSupports( 
            /* [in] */ __RPC__in BSTR bstrProperty,
            /* [out][retval] */ __RPC__out VARIANT *pvar) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITemplatePrinter2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITemplatePrinter2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITemplatePrinter2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITemplatePrinter2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *startDoc )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ __RPC__in BSTR bstrTitle,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *stopDoc )( 
            __RPC__in ITemplatePrinter2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *printBlankPage )( 
            __RPC__in ITemplatePrinter2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *printPage )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ __RPC__in_opt IDispatch *pElemDisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ensurePrintDialogDefaults )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *showPrintDialog )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *showPageSetupDialog )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *printNonNative )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ __RPC__in_opt IUnknown *pMarkup,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *printNonNativeFrames )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ __RPC__in_opt IUnknown *pMarkup,
            /* [in] */ VARIANT_BOOL fActiveFrame);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_framesetDocument )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_framesetDocument )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_frameActive )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frameActive )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_frameAsShown )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frameAsShown )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_selection )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selection )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_selectedPages )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selectedPages )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_currentPage )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currentPage )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_currentPageAvail )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currentPageAvail )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_collate )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_collate )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_duplex )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_copies )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ WORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_copies )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out WORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_pageFrom )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ WORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageFrom )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out WORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_pageTo )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ WORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageTo )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out WORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_tableOfLinks )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tableOfLinks )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_allLinkedDocuments )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_allLinkedDocuments )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_header )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ __RPC__in BSTR bstrHeader);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_header )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *bstrHeader);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_footer )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ __RPC__in BSTR bstrFooter);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_footer )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *bstrFooter);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginLeft )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginLeft )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginRight )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginRight )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginTop )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginTop )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginBottom )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginBottom )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageWidth )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageHeight )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_unprintableLeft )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_unprintableTop )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_unprintableRight )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_unprintableBottom )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *updatePageStatus )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ __RPC__in long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_selectionEnabled )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selectionEnabled )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_frameActiveEnabled )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frameActiveEnabled )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_orientation )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_orientation )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_usePrinterCopyCollate )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_usePrinterCopyCollate )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *deviceSupports )( 
            __RPC__in ITemplatePrinter2 * This,
            /* [in] */ __RPC__in BSTR bstrProperty,
            /* [out][retval] */ __RPC__out VARIANT *pvar);
        
        END_INTERFACE
    } ITemplatePrinter2Vtbl;

    interface ITemplatePrinter2
    {
        CONST_VTBL struct ITemplatePrinter2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITemplatePrinter2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITemplatePrinter2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITemplatePrinter2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITemplatePrinter2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITemplatePrinter2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITemplatePrinter2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITemplatePrinter2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITemplatePrinter2_startDoc(This,bstrTitle,p)	\
    ( (This)->lpVtbl -> startDoc(This,bstrTitle,p) ) 

#define ITemplatePrinter2_stopDoc(This)	\
    ( (This)->lpVtbl -> stopDoc(This) ) 

#define ITemplatePrinter2_printBlankPage(This)	\
    ( (This)->lpVtbl -> printBlankPage(This) ) 

#define ITemplatePrinter2_printPage(This,pElemDisp)	\
    ( (This)->lpVtbl -> printPage(This,pElemDisp) ) 

#define ITemplatePrinter2_ensurePrintDialogDefaults(This,p)	\
    ( (This)->lpVtbl -> ensurePrintDialogDefaults(This,p) ) 

#define ITemplatePrinter2_showPrintDialog(This,p)	\
    ( (This)->lpVtbl -> showPrintDialog(This,p) ) 

#define ITemplatePrinter2_showPageSetupDialog(This,p)	\
    ( (This)->lpVtbl -> showPageSetupDialog(This,p) ) 

#define ITemplatePrinter2_printNonNative(This,pMarkup,p)	\
    ( (This)->lpVtbl -> printNonNative(This,pMarkup,p) ) 

#define ITemplatePrinter2_printNonNativeFrames(This,pMarkup,fActiveFrame)	\
    ( (This)->lpVtbl -> printNonNativeFrames(This,pMarkup,fActiveFrame) ) 

#define ITemplatePrinter2_put_framesetDocument(This,v)	\
    ( (This)->lpVtbl -> put_framesetDocument(This,v) ) 

#define ITemplatePrinter2_get_framesetDocument(This,p)	\
    ( (This)->lpVtbl -> get_framesetDocument(This,p) ) 

#define ITemplatePrinter2_put_frameActive(This,v)	\
    ( (This)->lpVtbl -> put_frameActive(This,v) ) 

#define ITemplatePrinter2_get_frameActive(This,p)	\
    ( (This)->lpVtbl -> get_frameActive(This,p) ) 

#define ITemplatePrinter2_put_frameAsShown(This,v)	\
    ( (This)->lpVtbl -> put_frameAsShown(This,v) ) 

#define ITemplatePrinter2_get_frameAsShown(This,p)	\
    ( (This)->lpVtbl -> get_frameAsShown(This,p) ) 

#define ITemplatePrinter2_put_selection(This,v)	\
    ( (This)->lpVtbl -> put_selection(This,v) ) 

#define ITemplatePrinter2_get_selection(This,p)	\
    ( (This)->lpVtbl -> get_selection(This,p) ) 

#define ITemplatePrinter2_put_selectedPages(This,v)	\
    ( (This)->lpVtbl -> put_selectedPages(This,v) ) 

#define ITemplatePrinter2_get_selectedPages(This,p)	\
    ( (This)->lpVtbl -> get_selectedPages(This,p) ) 

#define ITemplatePrinter2_put_currentPage(This,v)	\
    ( (This)->lpVtbl -> put_currentPage(This,v) ) 

#define ITemplatePrinter2_get_currentPage(This,p)	\
    ( (This)->lpVtbl -> get_currentPage(This,p) ) 

#define ITemplatePrinter2_put_currentPageAvail(This,v)	\
    ( (This)->lpVtbl -> put_currentPageAvail(This,v) ) 

#define ITemplatePrinter2_get_currentPageAvail(This,p)	\
    ( (This)->lpVtbl -> get_currentPageAvail(This,p) ) 

#define ITemplatePrinter2_put_collate(This,v)	\
    ( (This)->lpVtbl -> put_collate(This,v) ) 

#define ITemplatePrinter2_get_collate(This,p)	\
    ( (This)->lpVtbl -> get_collate(This,p) ) 

#define ITemplatePrinter2_get_duplex(This,p)	\
    ( (This)->lpVtbl -> get_duplex(This,p) ) 

#define ITemplatePrinter2_put_copies(This,v)	\
    ( (This)->lpVtbl -> put_copies(This,v) ) 

#define ITemplatePrinter2_get_copies(This,p)	\
    ( (This)->lpVtbl -> get_copies(This,p) ) 

#define ITemplatePrinter2_put_pageFrom(This,v)	\
    ( (This)->lpVtbl -> put_pageFrom(This,v) ) 

#define ITemplatePrinter2_get_pageFrom(This,p)	\
    ( (This)->lpVtbl -> get_pageFrom(This,p) ) 

#define ITemplatePrinter2_put_pageTo(This,v)	\
    ( (This)->lpVtbl -> put_pageTo(This,v) ) 

#define ITemplatePrinter2_get_pageTo(This,p)	\
    ( (This)->lpVtbl -> get_pageTo(This,p) ) 

#define ITemplatePrinter2_put_tableOfLinks(This,v)	\
    ( (This)->lpVtbl -> put_tableOfLinks(This,v) ) 

#define ITemplatePrinter2_get_tableOfLinks(This,p)	\
    ( (This)->lpVtbl -> get_tableOfLinks(This,p) ) 

#define ITemplatePrinter2_put_allLinkedDocuments(This,v)	\
    ( (This)->lpVtbl -> put_allLinkedDocuments(This,v) ) 

#define ITemplatePrinter2_get_allLinkedDocuments(This,p)	\
    ( (This)->lpVtbl -> get_allLinkedDocuments(This,p) ) 

#define ITemplatePrinter2_put_header(This,bstrHeader)	\
    ( (This)->lpVtbl -> put_header(This,bstrHeader) ) 

#define ITemplatePrinter2_get_header(This,bstrHeader)	\
    ( (This)->lpVtbl -> get_header(This,bstrHeader) ) 

#define ITemplatePrinter2_put_footer(This,bstrFooter)	\
    ( (This)->lpVtbl -> put_footer(This,bstrFooter) ) 

#define ITemplatePrinter2_get_footer(This,bstrFooter)	\
    ( (This)->lpVtbl -> get_footer(This,bstrFooter) ) 

#define ITemplatePrinter2_put_marginLeft(This,v)	\
    ( (This)->lpVtbl -> put_marginLeft(This,v) ) 

#define ITemplatePrinter2_get_marginLeft(This,p)	\
    ( (This)->lpVtbl -> get_marginLeft(This,p) ) 

#define ITemplatePrinter2_put_marginRight(This,v)	\
    ( (This)->lpVtbl -> put_marginRight(This,v) ) 

#define ITemplatePrinter2_get_marginRight(This,p)	\
    ( (This)->lpVtbl -> get_marginRight(This,p) ) 

#define ITemplatePrinter2_put_marginTop(This,v)	\
    ( (This)->lpVtbl -> put_marginTop(This,v) ) 

#define ITemplatePrinter2_get_marginTop(This,p)	\
    ( (This)->lpVtbl -> get_marginTop(This,p) ) 

#define ITemplatePrinter2_put_marginBottom(This,v)	\
    ( (This)->lpVtbl -> put_marginBottom(This,v) ) 

#define ITemplatePrinter2_get_marginBottom(This,p)	\
    ( (This)->lpVtbl -> get_marginBottom(This,p) ) 

#define ITemplatePrinter2_get_pageWidth(This,p)	\
    ( (This)->lpVtbl -> get_pageWidth(This,p) ) 

#define ITemplatePrinter2_get_pageHeight(This,p)	\
    ( (This)->lpVtbl -> get_pageHeight(This,p) ) 

#define ITemplatePrinter2_get_unprintableLeft(This,p)	\
    ( (This)->lpVtbl -> get_unprintableLeft(This,p) ) 

#define ITemplatePrinter2_get_unprintableTop(This,p)	\
    ( (This)->lpVtbl -> get_unprintableTop(This,p) ) 

#define ITemplatePrinter2_get_unprintableRight(This,p)	\
    ( (This)->lpVtbl -> get_unprintableRight(This,p) ) 

#define ITemplatePrinter2_get_unprintableBottom(This,p)	\
    ( (This)->lpVtbl -> get_unprintableBottom(This,p) ) 

#define ITemplatePrinter2_updatePageStatus(This,p)	\
    ( (This)->lpVtbl -> updatePageStatus(This,p) ) 


#define ITemplatePrinter2_put_selectionEnabled(This,v)	\
    ( (This)->lpVtbl -> put_selectionEnabled(This,v) ) 

#define ITemplatePrinter2_get_selectionEnabled(This,p)	\
    ( (This)->lpVtbl -> get_selectionEnabled(This,p) ) 

#define ITemplatePrinter2_put_frameActiveEnabled(This,v)	\
    ( (This)->lpVtbl -> put_frameActiveEnabled(This,v) ) 

#define ITemplatePrinter2_get_frameActiveEnabled(This,p)	\
    ( (This)->lpVtbl -> get_frameActiveEnabled(This,p) ) 

#define ITemplatePrinter2_put_orientation(This,v)	\
    ( (This)->lpVtbl -> put_orientation(This,v) ) 

#define ITemplatePrinter2_get_orientation(This,p)	\
    ( (This)->lpVtbl -> get_orientation(This,p) ) 

#define ITemplatePrinter2_put_usePrinterCopyCollate(This,v)	\
    ( (This)->lpVtbl -> put_usePrinterCopyCollate(This,v) ) 

#define ITemplatePrinter2_get_usePrinterCopyCollate(This,p)	\
    ( (This)->lpVtbl -> get_usePrinterCopyCollate(This,p) ) 

#define ITemplatePrinter2_deviceSupports(This,bstrProperty,pvar)	\
    ( (This)->lpVtbl -> deviceSupports(This,bstrProperty,pvar) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITemplatePrinter2_INTERFACE_DEFINED__ */


#ifndef __ITemplatePrinter3_INTERFACE_DEFINED__
#define __ITemplatePrinter3_INTERFACE_DEFINED__

/* interface ITemplatePrinter3 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_ITemplatePrinter3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("305104a3-98b5-11cf-bb82-00aa00bdce0b")
    ITemplatePrinter3 : public ITemplatePrinter2
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_headerFooterFont( 
            /* [in] */ __RPC__in BSTR bstrFooter) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_headerFooterFont( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *bstrFooter) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getPageMarginTop( 
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [in] */ long pageWidth,
            /* [in] */ long pageHeight,
            /* [retval][out] */ __RPC__out VARIANT *pMargin) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getPageMarginRight( 
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [in] */ long pageWidth,
            /* [in] */ long pageHeight,
            /* [retval][out] */ __RPC__out VARIANT *pMargin) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getPageMarginBottom( 
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [in] */ long pageWidth,
            /* [in] */ long pageHeight,
            /* [retval][out] */ __RPC__out VARIANT *pMargin) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getPageMarginLeft( 
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [in] */ long pageWidth,
            /* [in] */ long pageHeight,
            /* [retval][out] */ __RPC__out VARIANT *pMargin) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getPageMarginTopImportant( 
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbImportant) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getPageMarginRightImportant( 
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbImportant) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getPageMarginBottomImportant( 
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbImportant) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getPageMarginLeftImportant( 
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbImportant) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITemplatePrinter3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITemplatePrinter3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITemplatePrinter3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITemplatePrinter3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *startDoc )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in BSTR bstrTitle,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *stopDoc )( 
            __RPC__in ITemplatePrinter3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *printBlankPage )( 
            __RPC__in ITemplatePrinter3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *printPage )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in_opt IDispatch *pElemDisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ensurePrintDialogDefaults )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *showPrintDialog )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *showPageSetupDialog )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *printNonNative )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in_opt IUnknown *pMarkup,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *printNonNativeFrames )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in_opt IUnknown *pMarkup,
            /* [in] */ VARIANT_BOOL fActiveFrame);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_framesetDocument )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_framesetDocument )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_frameActive )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frameActive )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_frameAsShown )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frameAsShown )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_selection )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selection )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_selectedPages )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selectedPages )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_currentPage )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currentPage )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_currentPageAvail )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_currentPageAvail )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_collate )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_collate )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_duplex )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_copies )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ WORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_copies )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out WORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_pageFrom )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ WORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageFrom )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out WORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_pageTo )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ WORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageTo )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out WORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_tableOfLinks )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_tableOfLinks )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_allLinkedDocuments )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_allLinkedDocuments )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_header )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in BSTR bstrHeader);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_header )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *bstrHeader);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_footer )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in BSTR bstrFooter);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_footer )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *bstrFooter);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginLeft )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginLeft )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginRight )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginRight )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginTop )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginTop )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_marginBottom )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_marginBottom )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageWidth )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageHeight )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_unprintableLeft )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_unprintableTop )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_unprintableRight )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_unprintableBottom )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out long *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *updatePageStatus )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in long *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_selectionEnabled )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_selectionEnabled )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_frameActiveEnabled )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_frameActiveEnabled )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_orientation )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_orientation )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_usePrinterCopyCollate )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_usePrinterCopyCollate )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *deviceSupports )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in BSTR bstrProperty,
            /* [out][retval] */ __RPC__out VARIANT *pvar);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_headerFooterFont )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in BSTR bstrFooter);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_headerFooterFont )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *bstrFooter);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getPageMarginTop )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [in] */ long pageWidth,
            /* [in] */ long pageHeight,
            /* [retval][out] */ __RPC__out VARIANT *pMargin);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getPageMarginRight )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [in] */ long pageWidth,
            /* [in] */ long pageHeight,
            /* [retval][out] */ __RPC__out VARIANT *pMargin);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getPageMarginBottom )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [in] */ long pageWidth,
            /* [in] */ long pageHeight,
            /* [retval][out] */ __RPC__out VARIANT *pMargin);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getPageMarginLeft )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [in] */ long pageWidth,
            /* [in] */ long pageHeight,
            /* [retval][out] */ __RPC__out VARIANT *pMargin);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getPageMarginTopImportant )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbImportant);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getPageMarginRightImportant )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbImportant);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getPageMarginBottomImportant )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbImportant);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getPageMarginLeftImportant )( 
            __RPC__in ITemplatePrinter3 * This,
            /* [in] */ __RPC__in_opt IDispatch *pageRule,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbImportant);
        
        END_INTERFACE
    } ITemplatePrinter3Vtbl;

    interface ITemplatePrinter3
    {
        CONST_VTBL struct ITemplatePrinter3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITemplatePrinter3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITemplatePrinter3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITemplatePrinter3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITemplatePrinter3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITemplatePrinter3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITemplatePrinter3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITemplatePrinter3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITemplatePrinter3_startDoc(This,bstrTitle,p)	\
    ( (This)->lpVtbl -> startDoc(This,bstrTitle,p) ) 

#define ITemplatePrinter3_stopDoc(This)	\
    ( (This)->lpVtbl -> stopDoc(This) ) 

#define ITemplatePrinter3_printBlankPage(This)	\
    ( (This)->lpVtbl -> printBlankPage(This) ) 

#define ITemplatePrinter3_printPage(This,pElemDisp)	\
    ( (This)->lpVtbl -> printPage(This,pElemDisp) ) 

#define ITemplatePrinter3_ensurePrintDialogDefaults(This,p)	\
    ( (This)->lpVtbl -> ensurePrintDialogDefaults(This,p) ) 

#define ITemplatePrinter3_showPrintDialog(This,p)	\
    ( (This)->lpVtbl -> showPrintDialog(This,p) ) 

#define ITemplatePrinter3_showPageSetupDialog(This,p)	\
    ( (This)->lpVtbl -> showPageSetupDialog(This,p) ) 

#define ITemplatePrinter3_printNonNative(This,pMarkup,p)	\
    ( (This)->lpVtbl -> printNonNative(This,pMarkup,p) ) 

#define ITemplatePrinter3_printNonNativeFrames(This,pMarkup,fActiveFrame)	\
    ( (This)->lpVtbl -> printNonNativeFrames(This,pMarkup,fActiveFrame) ) 

#define ITemplatePrinter3_put_framesetDocument(This,v)	\
    ( (This)->lpVtbl -> put_framesetDocument(This,v) ) 

#define ITemplatePrinter3_get_framesetDocument(This,p)	\
    ( (This)->lpVtbl -> get_framesetDocument(This,p) ) 

#define ITemplatePrinter3_put_frameActive(This,v)	\
    ( (This)->lpVtbl -> put_frameActive(This,v) ) 

#define ITemplatePrinter3_get_frameActive(This,p)	\
    ( (This)->lpVtbl -> get_frameActive(This,p) ) 

#define ITemplatePrinter3_put_frameAsShown(This,v)	\
    ( (This)->lpVtbl -> put_frameAsShown(This,v) ) 

#define ITemplatePrinter3_get_frameAsShown(This,p)	\
    ( (This)->lpVtbl -> get_frameAsShown(This,p) ) 

#define ITemplatePrinter3_put_selection(This,v)	\
    ( (This)->lpVtbl -> put_selection(This,v) ) 

#define ITemplatePrinter3_get_selection(This,p)	\
    ( (This)->lpVtbl -> get_selection(This,p) ) 

#define ITemplatePrinter3_put_selectedPages(This,v)	\
    ( (This)->lpVtbl -> put_selectedPages(This,v) ) 

#define ITemplatePrinter3_get_selectedPages(This,p)	\
    ( (This)->lpVtbl -> get_selectedPages(This,p) ) 

#define ITemplatePrinter3_put_currentPage(This,v)	\
    ( (This)->lpVtbl -> put_currentPage(This,v) ) 

#define ITemplatePrinter3_get_currentPage(This,p)	\
    ( (This)->lpVtbl -> get_currentPage(This,p) ) 

#define ITemplatePrinter3_put_currentPageAvail(This,v)	\
    ( (This)->lpVtbl -> put_currentPageAvail(This,v) ) 

#define ITemplatePrinter3_get_currentPageAvail(This,p)	\
    ( (This)->lpVtbl -> get_currentPageAvail(This,p) ) 

#define ITemplatePrinter3_put_collate(This,v)	\
    ( (This)->lpVtbl -> put_collate(This,v) ) 

#define ITemplatePrinter3_get_collate(This,p)	\
    ( (This)->lpVtbl -> get_collate(This,p) ) 

#define ITemplatePrinter3_get_duplex(This,p)	\
    ( (This)->lpVtbl -> get_duplex(This,p) ) 

#define ITemplatePrinter3_put_copies(This,v)	\
    ( (This)->lpVtbl -> put_copies(This,v) ) 

#define ITemplatePrinter3_get_copies(This,p)	\
    ( (This)->lpVtbl -> get_copies(This,p) ) 

#define ITemplatePrinter3_put_pageFrom(This,v)	\
    ( (This)->lpVtbl -> put_pageFrom(This,v) ) 

#define ITemplatePrinter3_get_pageFrom(This,p)	\
    ( (This)->lpVtbl -> get_pageFrom(This,p) ) 

#define ITemplatePrinter3_put_pageTo(This,v)	\
    ( (This)->lpVtbl -> put_pageTo(This,v) ) 

#define ITemplatePrinter3_get_pageTo(This,p)	\
    ( (This)->lpVtbl -> get_pageTo(This,p) ) 

#define ITemplatePrinter3_put_tableOfLinks(This,v)	\
    ( (This)->lpVtbl -> put_tableOfLinks(This,v) ) 

#define ITemplatePrinter3_get_tableOfLinks(This,p)	\
    ( (This)->lpVtbl -> get_tableOfLinks(This,p) ) 

#define ITemplatePrinter3_put_allLinkedDocuments(This,v)	\
    ( (This)->lpVtbl -> put_allLinkedDocuments(This,v) ) 

#define ITemplatePrinter3_get_allLinkedDocuments(This,p)	\
    ( (This)->lpVtbl -> get_allLinkedDocuments(This,p) ) 

#define ITemplatePrinter3_put_header(This,bstrHeader)	\
    ( (This)->lpVtbl -> put_header(This,bstrHeader) ) 

#define ITemplatePrinter3_get_header(This,bstrHeader)	\
    ( (This)->lpVtbl -> get_header(This,bstrHeader) ) 

#define ITemplatePrinter3_put_footer(This,bstrFooter)	\
    ( (This)->lpVtbl -> put_footer(This,bstrFooter) ) 

#define ITemplatePrinter3_get_footer(This,bstrFooter)	\
    ( (This)->lpVtbl -> get_footer(This,bstrFooter) ) 

#define ITemplatePrinter3_put_marginLeft(This,v)	\
    ( (This)->lpVtbl -> put_marginLeft(This,v) ) 

#define ITemplatePrinter3_get_marginLeft(This,p)	\
    ( (This)->lpVtbl -> get_marginLeft(This,p) ) 

#define ITemplatePrinter3_put_marginRight(This,v)	\
    ( (This)->lpVtbl -> put_marginRight(This,v) ) 

#define ITemplatePrinter3_get_marginRight(This,p)	\
    ( (This)->lpVtbl -> get_marginRight(This,p) ) 

#define ITemplatePrinter3_put_marginTop(This,v)	\
    ( (This)->lpVtbl -> put_marginTop(This,v) ) 

#define ITemplatePrinter3_get_marginTop(This,p)	\
    ( (This)->lpVtbl -> get_marginTop(This,p) ) 

#define ITemplatePrinter3_put_marginBottom(This,v)	\
    ( (This)->lpVtbl -> put_marginBottom(This,v) ) 

#define ITemplatePrinter3_get_marginBottom(This,p)	\
    ( (This)->lpVtbl -> get_marginBottom(This,p) ) 

#define ITemplatePrinter3_get_pageWidth(This,p)	\
    ( (This)->lpVtbl -> get_pageWidth(This,p) ) 

#define ITemplatePrinter3_get_pageHeight(This,p)	\
    ( (This)->lpVtbl -> get_pageHeight(This,p) ) 

#define ITemplatePrinter3_get_unprintableLeft(This,p)	\
    ( (This)->lpVtbl -> get_unprintableLeft(This,p) ) 

#define ITemplatePrinter3_get_unprintableTop(This,p)	\
    ( (This)->lpVtbl -> get_unprintableTop(This,p) ) 

#define ITemplatePrinter3_get_unprintableRight(This,p)	\
    ( (This)->lpVtbl -> get_unprintableRight(This,p) ) 

#define ITemplatePrinter3_get_unprintableBottom(This,p)	\
    ( (This)->lpVtbl -> get_unprintableBottom(This,p) ) 

#define ITemplatePrinter3_updatePageStatus(This,p)	\
    ( (This)->lpVtbl -> updatePageStatus(This,p) ) 


#define ITemplatePrinter3_put_selectionEnabled(This,v)	\
    ( (This)->lpVtbl -> put_selectionEnabled(This,v) ) 

#define ITemplatePrinter3_get_selectionEnabled(This,p)	\
    ( (This)->lpVtbl -> get_selectionEnabled(This,p) ) 

#define ITemplatePrinter3_put_frameActiveEnabled(This,v)	\
    ( (This)->lpVtbl -> put_frameActiveEnabled(This,v) ) 

#define ITemplatePrinter3_get_frameActiveEnabled(This,p)	\
    ( (This)->lpVtbl -> get_frameActiveEnabled(This,p) ) 

#define ITemplatePrinter3_put_orientation(This,v)	\
    ( (This)->lpVtbl -> put_orientation(This,v) ) 

#define ITemplatePrinter3_get_orientation(This,p)	\
    ( (This)->lpVtbl -> get_orientation(This,p) ) 

#define ITemplatePrinter3_put_usePrinterCopyCollate(This,v)	\
    ( (This)->lpVtbl -> put_usePrinterCopyCollate(This,v) ) 

#define ITemplatePrinter3_get_usePrinterCopyCollate(This,p)	\
    ( (This)->lpVtbl -> get_usePrinterCopyCollate(This,p) ) 

#define ITemplatePrinter3_deviceSupports(This,bstrProperty,pvar)	\
    ( (This)->lpVtbl -> deviceSupports(This,bstrProperty,pvar) ) 


#define ITemplatePrinter3_put_headerFooterFont(This,bstrFooter)	\
    ( (This)->lpVtbl -> put_headerFooterFont(This,bstrFooter) ) 

#define ITemplatePrinter3_get_headerFooterFont(This,bstrFooter)	\
    ( (This)->lpVtbl -> get_headerFooterFont(This,bstrFooter) ) 

#define ITemplatePrinter3_getPageMarginTop(This,pageRule,pageWidth,pageHeight,pMargin)	\
    ( (This)->lpVtbl -> getPageMarginTop(This,pageRule,pageWidth,pageHeight,pMargin) ) 

#define ITemplatePrinter3_getPageMarginRight(This,pageRule,pageWidth,pageHeight,pMargin)	\
    ( (This)->lpVtbl -> getPageMarginRight(This,pageRule,pageWidth,pageHeight,pMargin) ) 

#define ITemplatePrinter3_getPageMarginBottom(This,pageRule,pageWidth,pageHeight,pMargin)	\
    ( (This)->lpVtbl -> getPageMarginBottom(This,pageRule,pageWidth,pageHeight,pMargin) ) 

#define ITemplatePrinter3_getPageMarginLeft(This,pageRule,pageWidth,pageHeight,pMargin)	\
    ( (This)->lpVtbl -> getPageMarginLeft(This,pageRule,pageWidth,pageHeight,pMargin) ) 

#define ITemplatePrinter3_getPageMarginTopImportant(This,pageRule,pbImportant)	\
    ( (This)->lpVtbl -> getPageMarginTopImportant(This,pageRule,pbImportant) ) 

#define ITemplatePrinter3_getPageMarginRightImportant(This,pageRule,pbImportant)	\
    ( (This)->lpVtbl -> getPageMarginRightImportant(This,pageRule,pbImportant) ) 

#define ITemplatePrinter3_getPageMarginBottomImportant(This,pageRule,pbImportant)	\
    ( (This)->lpVtbl -> getPageMarginBottomImportant(This,pageRule,pbImportant) ) 

#define ITemplatePrinter3_getPageMarginLeftImportant(This,pageRule,pbImportant)	\
    ( (This)->lpVtbl -> getPageMarginLeftImportant(This,pageRule,pbImportant) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITemplatePrinter3_INTERFACE_DEFINED__ */


#ifndef __IHeaderFooter_INTERFACE_DEFINED__
#define __IHeaderFooter_INTERFACE_DEFINED__

/* interface IHeaderFooter */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHeaderFooter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3050f6ce-98b5-11cf-bb82-00aa00bdce0b")
    IHeaderFooter : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_htmlHead( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_htmlFoot( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_textHead( 
            /* [in] */ __RPC__in BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_textHead( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_textFoot( 
            /* [in] */ __RPC__in BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_textFoot( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_page( 
            /* [in] */ DWORD v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_page( 
            /* [out][retval] */ __RPC__out DWORD *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_pageTotal( 
            /* [in] */ DWORD v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_pageTotal( 
            /* [out][retval] */ __RPC__out DWORD *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_URL( 
            /* [in] */ __RPC__in BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_URL( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_title( 
            /* [in] */ __RPC__in BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_title( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_dateShort( 
            /* [in] */ __RPC__in BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dateShort( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_dateLong( 
            /* [in] */ __RPC__in BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_dateLong( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_timeShort( 
            /* [in] */ __RPC__in BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_timeShort( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_timeLong( 
            /* [in] */ __RPC__in BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_timeLong( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHeaderFooterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IHeaderFooter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IHeaderFooter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IHeaderFooter * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHeaderFooter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_htmlHead )( 
            __RPC__in IHeaderFooter * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_htmlFoot )( 
            __RPC__in IHeaderFooter * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_textHead )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_textHead )( 
            __RPC__in IHeaderFooter * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_textFoot )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_textFoot )( 
            __RPC__in IHeaderFooter * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_page )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ DWORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_page )( 
            __RPC__in IHeaderFooter * This,
            /* [out][retval] */ __RPC__out DWORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_pageTotal )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ DWORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageTotal )( 
            __RPC__in IHeaderFooter * This,
            /* [out][retval] */ __RPC__out DWORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_URL )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            __RPC__in IHeaderFooter * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_title )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_title )( 
            __RPC__in IHeaderFooter * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dateShort )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dateShort )( 
            __RPC__in IHeaderFooter * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dateLong )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dateLong )( 
            __RPC__in IHeaderFooter * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_timeShort )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeShort )( 
            __RPC__in IHeaderFooter * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_timeLong )( 
            __RPC__in IHeaderFooter * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeLong )( 
            __RPC__in IHeaderFooter * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        END_INTERFACE
    } IHeaderFooterVtbl;

    interface IHeaderFooter
    {
        CONST_VTBL struct IHeaderFooterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHeaderFooter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHeaderFooter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHeaderFooter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHeaderFooter_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IHeaderFooter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IHeaderFooter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IHeaderFooter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IHeaderFooter_get_htmlHead(This,p)	\
    ( (This)->lpVtbl -> get_htmlHead(This,p) ) 

#define IHeaderFooter_get_htmlFoot(This,p)	\
    ( (This)->lpVtbl -> get_htmlFoot(This,p) ) 

#define IHeaderFooter_put_textHead(This,v)	\
    ( (This)->lpVtbl -> put_textHead(This,v) ) 

#define IHeaderFooter_get_textHead(This,p)	\
    ( (This)->lpVtbl -> get_textHead(This,p) ) 

#define IHeaderFooter_put_textFoot(This,v)	\
    ( (This)->lpVtbl -> put_textFoot(This,v) ) 

#define IHeaderFooter_get_textFoot(This,p)	\
    ( (This)->lpVtbl -> get_textFoot(This,p) ) 

#define IHeaderFooter_put_page(This,v)	\
    ( (This)->lpVtbl -> put_page(This,v) ) 

#define IHeaderFooter_get_page(This,p)	\
    ( (This)->lpVtbl -> get_page(This,p) ) 

#define IHeaderFooter_put_pageTotal(This,v)	\
    ( (This)->lpVtbl -> put_pageTotal(This,v) ) 

#define IHeaderFooter_get_pageTotal(This,p)	\
    ( (This)->lpVtbl -> get_pageTotal(This,p) ) 

#define IHeaderFooter_put_URL(This,v)	\
    ( (This)->lpVtbl -> put_URL(This,v) ) 

#define IHeaderFooter_get_URL(This,p)	\
    ( (This)->lpVtbl -> get_URL(This,p) ) 

#define IHeaderFooter_put_title(This,v)	\
    ( (This)->lpVtbl -> put_title(This,v) ) 

#define IHeaderFooter_get_title(This,p)	\
    ( (This)->lpVtbl -> get_title(This,p) ) 

#define IHeaderFooter_put_dateShort(This,v)	\
    ( (This)->lpVtbl -> put_dateShort(This,v) ) 

#define IHeaderFooter_get_dateShort(This,p)	\
    ( (This)->lpVtbl -> get_dateShort(This,p) ) 

#define IHeaderFooter_put_dateLong(This,v)	\
    ( (This)->lpVtbl -> put_dateLong(This,v) ) 

#define IHeaderFooter_get_dateLong(This,p)	\
    ( (This)->lpVtbl -> get_dateLong(This,p) ) 

#define IHeaderFooter_put_timeShort(This,v)	\
    ( (This)->lpVtbl -> put_timeShort(This,v) ) 

#define IHeaderFooter_get_timeShort(This,p)	\
    ( (This)->lpVtbl -> get_timeShort(This,p) ) 

#define IHeaderFooter_put_timeLong(This,v)	\
    ( (This)->lpVtbl -> put_timeLong(This,v) ) 

#define IHeaderFooter_get_timeLong(This,p)	\
    ( (This)->lpVtbl -> get_timeLong(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHeaderFooter_INTERFACE_DEFINED__ */


#ifndef __IHeaderFooter2_INTERFACE_DEFINED__
#define __IHeaderFooter2_INTERFACE_DEFINED__

/* interface IHeaderFooter2 */
/* [object][uuid][dual][oleautomation] */ 


EXTERN_C const IID IID_IHeaderFooter2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("305104a5-98b5-11cf-bb82-00aa00bdce0b")
    IHeaderFooter2 : public IHeaderFooter
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_font( 
            /* [in] */ __RPC__in BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_font( 
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHeaderFooter2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IHeaderFooter2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IHeaderFooter2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IHeaderFooter2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_htmlHead )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_htmlFoot )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_textHead )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_textHead )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_textFoot )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_textFoot )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_page )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ DWORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_page )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__out DWORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_pageTotal )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ DWORD v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_pageTotal )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__out DWORD *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_URL )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_title )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_title )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dateShort )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dateShort )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dateLong )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dateLong )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_timeShort )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeShort )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_timeLong )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_timeLong )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_font )( 
            __RPC__in IHeaderFooter2 * This,
            /* [in] */ __RPC__in BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_font )( 
            __RPC__in IHeaderFooter2 * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *p);
        
        END_INTERFACE
    } IHeaderFooter2Vtbl;

    interface IHeaderFooter2
    {
        CONST_VTBL struct IHeaderFooter2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHeaderFooter2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHeaderFooter2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHeaderFooter2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHeaderFooter2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IHeaderFooter2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IHeaderFooter2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IHeaderFooter2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IHeaderFooter2_get_htmlHead(This,p)	\
    ( (This)->lpVtbl -> get_htmlHead(This,p) ) 

#define IHeaderFooter2_get_htmlFoot(This,p)	\
    ( (This)->lpVtbl -> get_htmlFoot(This,p) ) 

#define IHeaderFooter2_put_textHead(This,v)	\
    ( (This)->lpVtbl -> put_textHead(This,v) ) 

#define IHeaderFooter2_get_textHead(This,p)	\
    ( (This)->lpVtbl -> get_textHead(This,p) ) 

#define IHeaderFooter2_put_textFoot(This,v)	\
    ( (This)->lpVtbl -> put_textFoot(This,v) ) 

#define IHeaderFooter2_get_textFoot(This,p)	\
    ( (This)->lpVtbl -> get_textFoot(This,p) ) 

#define IHeaderFooter2_put_page(This,v)	\
    ( (This)->lpVtbl -> put_page(This,v) ) 

#define IHeaderFooter2_get_page(This,p)	\
    ( (This)->lpVtbl -> get_page(This,p) ) 

#define IHeaderFooter2_put_pageTotal(This,v)	\
    ( (This)->lpVtbl -> put_pageTotal(This,v) ) 

#define IHeaderFooter2_get_pageTotal(This,p)	\
    ( (This)->lpVtbl -> get_pageTotal(This,p) ) 

#define IHeaderFooter2_put_URL(This,v)	\
    ( (This)->lpVtbl -> put_URL(This,v) ) 

#define IHeaderFooter2_get_URL(This,p)	\
    ( (This)->lpVtbl -> get_URL(This,p) ) 

#define IHeaderFooter2_put_title(This,v)	\
    ( (This)->lpVtbl -> put_title(This,v) ) 

#define IHeaderFooter2_get_title(This,p)	\
    ( (This)->lpVtbl -> get_title(This,p) ) 

#define IHeaderFooter2_put_dateShort(This,v)	\
    ( (This)->lpVtbl -> put_dateShort(This,v) ) 

#define IHeaderFooter2_get_dateShort(This,p)	\
    ( (This)->lpVtbl -> get_dateShort(This,p) ) 

#define IHeaderFooter2_put_dateLong(This,v)	\
    ( (This)->lpVtbl -> put_dateLong(This,v) ) 

#define IHeaderFooter2_get_dateLong(This,p)	\
    ( (This)->lpVtbl -> get_dateLong(This,p) ) 

#define IHeaderFooter2_put_timeShort(This,v)	\
    ( (This)->lpVtbl -> put_timeShort(This,v) ) 

#define IHeaderFooter2_get_timeShort(This,p)	\
    ( (This)->lpVtbl -> get_timeShort(This,p) ) 

#define IHeaderFooter2_put_timeLong(This,v)	\
    ( (This)->lpVtbl -> put_timeLong(This,v) ) 

#define IHeaderFooter2_get_timeLong(This,p)	\
    ( (This)->lpVtbl -> get_timeLong(This,p) ) 


#define IHeaderFooter2_put_font(This,v)	\
    ( (This)->lpVtbl -> put_font(This,v) ) 

#define IHeaderFooter2_get_font(This,p)	\
    ( (This)->lpVtbl -> get_font(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHeaderFooter2_INTERFACE_DEFINED__ */



#ifndef __IEXTagLib_LIBRARY_DEFINED__
#define __IEXTagLib_LIBRARY_DEFINED__

/* library IEXTagLib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_IEXTagLib;

EXTERN_C const CLSID CLSID_PeerFactory;

#ifdef __cplusplus

class DECLSPEC_UUID("3050F4CF-98B5-11CF-BB82-00AA00BDCE0B")
PeerFactory;
#endif

EXTERN_C const CLSID CLSID_ClientCaps;

#ifdef __cplusplus

class DECLSPEC_UUID("7E8BC44E-AEFF-11D1-89C2-00C04FB6BFC4")
ClientCaps;
#endif

EXTERN_C const CLSID CLSID_IntelliForms;

#ifdef __cplusplus

class DECLSPEC_UUID("613AB92E-16BF-11d2-BCA5-00C04FD929DB")
IntelliForms;
#endif

EXTERN_C const CLSID CLSID_HomePage;

#ifdef __cplusplus

class DECLSPEC_UUID("766BF2AE-D650-11d1-9811-00C04FC31D2E")
HomePage;
#endif

EXTERN_C const CLSID CLSID_CPersistUserData;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f48e-98b5-11cf-bb82-00aa00bdce0b")
CPersistUserData;
#endif

EXTERN_C const CLSID CLSID_CPersistDataPeer;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f487-98b5-11cf-bb82-00aa00bdce0b")
CPersistDataPeer;
#endif

EXTERN_C const CLSID CLSID_CPersistShortcut;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f4c6-98b5-11cf-bb82-00aa00bdce0b")
CPersistShortcut;
#endif

EXTERN_C const CLSID CLSID_CPersistHistory;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f4c8-98b5-11cf-bb82-00aa00bdce0b")
CPersistHistory;
#endif

EXTERN_C const CLSID CLSID_CPersistSnapshot;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f4c9-98b5-11cf-bb82-00aa00bdce0b")
CPersistSnapshot;
#endif

EXTERN_C const CLSID CLSID_CDownloadBehavior;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f5be-98b5-11cf-bb82-00aa00bdce0b")
CDownloadBehavior;
#endif

EXTERN_C const CLSID CLSID_wfolders;

#ifdef __cplusplus

class DECLSPEC_UUID("BAE31F9A-1B81-11D2-A97A-00C04F8ECB02")
wfolders;
#endif

EXTERN_C const CLSID CLSID_AnchorClick;

#ifdef __cplusplus

class DECLSPEC_UUID("13D5413C-33B9-11D2-95A7-00C04F8ECB02")
AnchorClick;
#endif

EXTERN_C const CLSID CLSID_CLayoutRect;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f664-98b5-11cf-bb82-00aa00bdce0b")
CLayoutRect;
#endif

EXTERN_C const CLSID CLSID_CDeviceRect;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f6d4-98b5-11cf-bb82-00aa00bdce0b")
CDeviceRect;
#endif

EXTERN_C const CLSID CLSID_CTemplatePrinter;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f6b3-98b5-11cf-bb82-00aa00bdce0b")
CTemplatePrinter;
#endif

EXTERN_C const CLSID CLSID_CHeaderFooter;

#ifdef __cplusplus

class DECLSPEC_UUID("3050f6cd-98b5-11cf-bb82-00aa00bdce0b")
CHeaderFooter;
#endif
#endif /* __IEXTagLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree64(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\iepmapi.h ===
//+-------------------------------------------------------------------------
//
//  iepmapi.h -- This module defines the IE Protected Mode APIs
// 
//  Copyright (c) Microsoft Corp. All rights reserved.
//
//--------------------------------------------------------------------------
#ifndef _IEPMAPI_
#define _IEPMAPI_


#if _MSC_VER > 1000
#pragma once
#endif

// Remap old API names to new ones.
#define IEGetWriteableHKCU      IEGetWriteableLowHKCU


// IE Launch Option Flags

typedef enum {
    IELAUNCHOPTION_SCRIPTDEBUG = 0x00000001,
} IELAUNCHOPTION_FLAGS;

//+-------------------------------------------------------------------------
//
// Structure:   IELAUNCHURLINFO
//
// Members:
//              cbSize - Size of the structure, in bytes.
//              dwCreationFlags - Process Creation flags used by CreateProcess 
//                                and CreateProcessAsUser functions.
//              dwLaunchOptions - Combination of IELAUNCHOPTION_FLAGS
//--------------------------------------------------------------------------
typedef struct _IELAUNCHURLINFO {
    DWORD cbSize;
    DWORD dwCreationFlags;
    DWORD dwLaunchOptionFlags;
} IELAUNCHURLINFO, *LPIELAUNCHURLINFO;

//+-------------------------------------------------------------------------
//
//  Method:     IESaveFile
// 
//  Synopsis:   Saves the file to the location selected by the user in a 
//              previous call to IEShowSaveFileDialog
//
//--------------------------------------------------------------------------
STDAPI IESaveFile(                                   
    __in HANDLE    hState,                           
    __in LPCWSTR   lpwstrSourceFile                  
    );                          


//+-------------------------------------------------------------------------
//
//  Method:     IECancelSaveFile
// 
//  Synopsis:   Cancels the save operation and releases the resources 
//              allocated for the previous call to IEShowSaveFileDialog
//
//--------------------------------------------------------------------------
STDAPI IECancelSaveFile(
    __in HANDLE    hState
    );


//+-------------------------------------------------------------------------
//
//  Method:     IEShowSaveFileDialog
// 
//  Synopsis:   Shows the standard SaveFile dialog from a higher integrity 
//              user context
//
//  Remarks:    When no longer needed, call CoTaskMemFree to release
//              lppwstrDestinationFilePath 
//
//--------------------------------------------------------------------------
STDAPI IEShowSaveFileDialog(                         
    __in        HWND     hwnd,                       
    __in        LPCWSTR  lpwstrInitialFileName,      
    __in_opt    LPCWSTR  lpwstrInitialDir,           
    __in_opt    LPCWSTR  lpwstrFilter,               
    __in_opt    LPCWSTR  lpwstrDefExt,               
    __in        DWORD    dwFilterIndex,              
    __in        DWORD    dwFlags,                    
    __deref_out LPWSTR   *lppwstrDestinationFilePath,
    __out       HANDLE   *phState                    
    );                                               


//+-------------------------------------------------------------------------
//
//  Method:     IEGetWriteableLowHKCU
// 
//  Synopsis:   Returns a handle to a write accessible location under 
//              HKEY_CURRENT_USER for MIC Low process
//
//  Remarks:    When no longer needed, call RegCloseKey function to close 
//              the HKEY
//
//--------------------------------------------------------------------------
STDAPI IEGetWriteableLowHKCU(                           
    __out HKEY    *pHKey                             
    );                                               


//+-------------------------------------------------------------------------
//
//  Method:     IEGetWriteableFolderPath
// 
//  Synopsis:   Returns the current location of the specified folder. 
//              In protected mode, the path points to a location where 
//              the user has write permissions
//
//  Remarks:    When no longer needed, call CoTaskMemFree to release the
//              lppwstrPath
//
//--------------------------------------------------------------------------
STDAPI IEGetWriteableFolderPath(                     
    __in        REFGUID clsidFolderID,               
    __deref_out LPWSTR   *lppwstrPath                
    );                                               


//+-------------------------------------------------------------------------
//
//  Method:     IEIsProtectedModeProcess
// 
//  Synopsis:   Determines if Internet Explorer is running in protected mode
//
//--------------------------------------------------------------------------
STDAPI IEIsProtectedModeProcess(                     
    __out BOOL     *pbResult                         
    );                                               


//+-------------------------------------------------------------------------
//
//  Method:     IEIsProtectedModeURL
// 
//  Synopsis:   Determines if the URL runs in Protected Mode or not
//
//--------------------------------------------------------------------------
STDAPI IEIsProtectedModeURL(                     
    __in LPCWSTR lpwstrUrl
    );

//+-------------------------------------------------------------------------
//
//  Method:     IELaunchURL
// 
//  Synopsis:   Launches the appropriate IE to handle the navigation to 
//              the URL
//
//--------------------------------------------------------------------------
STDAPI IELaunchURL(                     
    __in        LPCWSTR lpwstrUrl,
    __inout     PROCESS_INFORMATION *lpProcInfo,
    __in_opt    VOID *lpInfo
    );

//+-------------------------------------------------------------------------
//
//  Method:     IERefreshElevationPolicy
// 
//  Synopsis:   Causes the next elevation policy look up to refresh from
//              the registry
//
//--------------------------------------------------------------------------
STDAPI IERefreshElevationPolicy();

//+-------------------------------------------------------------------------
//
//  Method:     IEGetProtectedModeCookie
// 
//  Synopsis:   Retrieves the cookie data from the Protected Mode Cookie store
//
//--------------------------------------------------------------------------
STDAPI IEGetProtectedModeCookie(__in LPCWSTR lpszURL,
                                __in LPCWSTR lpszCookieName,
                                __inout_ecount(*pcchCookieData) LPWSTR lpszCookieData,
                                __inout DWORD *pcchCookieData,
                                __in DWORD dwFlags);

//+-------------------------------------------------------------------------
//
//  Method:     IESetProtectedModeCookie
// 
//  Synopsis:   Set the cookie data in the Protected Mode Cookie store
//
//--------------------------------------------------------------------------
STDAPI IESetProtectedModeCookie(__in LPCWSTR lpszURL,
                                __in LPCWSTR lpszCookieName,
                                __in LPCWSTR lpszCookieData,
                                __in DWORD dwFlags);

//+-------------------------------------------------------------------------
//
//  Method:     IERegisterWritableRegistryKey
// 
//  Synopsis:   Register a subkey path during installation so that 
//              low process can write into this location during run time.
//
//--------------------------------------------------------------------------
STDAPI IERegisterWritableRegistryKey(
    GUID guid,
    __in LPCWSTR lpSubkey,
    BOOL fSubkeyAllowed
);

//+-------------------------------------------------------------------------
//
//  Method:     IERegisterWritableRegistryValue
// 
//  Synopsis:   Register a value in a subkey path during installation so that 
//              low process can write into this location during run time.
//
//--------------------------------------------------------------------------
STDAPI IERegisterWritableRegistryValue(
    GUID guid,
    __in LPCWSTR lpPath, 
    __in LPCWSTR lpValueName, 
    DWORD dwType, 
    __in_opt const BYTE* lpData, 
    DWORD cbMaxData
);

//+-------------------------------------------------------------------------
//
//  Method:     IEUnregisterWritableRegistryKey
// 
//  Synopsis:   Unregister a registry path during uninstallation so that 
//              low process can not write into this location
//
//--------------------------------------------------------------------------
STDAPI IEUnregisterWritableRegistry(
    GUID guid
);

//+-------------------------------------------------------------------------
//
//  Method:     IERegCreateKeyEx
// 
//  Synopsis:   Call Broker to do RegCreateKeyEx on pre-registered locations
//
//--------------------------------------------------------------------------
STDAPI IERegCreateKeyEx(
  __in      LPCWSTR lpSubKey,
  __in      DWORD Reserved,
  __in_opt  LPWSTR lpClass,
  __in      DWORD dwOptions,
  __in      REGSAM samDesired,
  __in_opt  LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  __out     PHKEY phkResult,
  __out     LPDWORD lpdwDisposition);

//+-------------------------------------------------------------------------
//
//  Method:     IERegSetValueEx
// 
//  Synopsis:   Call Broker to do RegSetValueEx on pre-registered location
//
//--------------------------------------------------------------------------
STDAPI IERegSetValueEx(
  __in LPCWSTR lpSubKey,
  __in LPCWSTR lpValueName,
  __in DWORD Reserved,
  __in DWORD dwType,
  __in const BYTE* lpData,
  __in DWORD cbData);

//+-------------------------------------------------------------------------
//
//  Method:     IECreateFile
// 
//  Synopsis:   wrapper to CreateFile
//
//--------------------------------------------------------------------------
HANDLE IECreateFile(
  __in LPCWSTR lpFileName,
  DWORD dwDesiredAccess,
  DWORD dwShareMode,
  __in LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  DWORD dwCreationDisposition,
  DWORD dwFlagsAndAttributes,
  __in_opt HANDLE hTemplateFile
);

//+-------------------------------------------------------------------------
//
//  Method:     IEDeleteFile   
// 
//  Synopsis:   wrapper to DeleteFile
//
//--------------------------------------------------------------------------
BOOL IEDeleteFile(
  __in LPCWSTR lpFileName
);

//+-------------------------------------------------------------------------
//
//  Method:     IERemoveDirectory
// 
//  Synopsis:   wrapper to RemoveDirectory
//
//--------------------------------------------------------------------------
BOOL IERemoveDirectory(
  __in LPCWSTR lpPathName
);

//+-------------------------------------------------------------------------
//
//  Method:     IEMoveFileEx
// 
//  Synopsis:   wrapper to MoveFileEx
//
//--------------------------------------------------------------------------
BOOL IEMoveFileEx(
  __in LPCWSTR lpExistingFileName,
  __in LPCWSTR lpNewFileName,
  DWORD dwFlags
);

//+-------------------------------------------------------------------------
//
//  Method:     IECreateDirectory
// 
//  Synopsis:   wrapper to CreateDirectory
//
//--------------------------------------------------------------------------
BOOL IECreateDirectory(
  __in LPCWSTR lpPathName,
  __in LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

//+-------------------------------------------------------------------------
//
//  Method:     IEGetFileAttributesEx
// 
//  Synopsis:   wrapper to GetFileAttributesEx
//
//--------------------------------------------------------------------------
BOOL IEGetFileAttributesEx(
  __in LPCWSTR lpFileName,
  GET_FILEEX_INFO_LEVELS fInfoLevelId,
  __in LPVOID lpFileInformation
);

//+-------------------------------------------------------------------------
//
//  Method:     IEFindFirstFile
// 
//  Synopsis:   wrapper to FindFirstFile
//
//--------------------------------------------------------------------------
HANDLE IEFindFirstFile(
  __in LPCWSTR lpFileName,
  __in LPWIN32_FIND_DATA lpFindFileData
);

#endif //_IEPMAPI_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IEDial.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for iedial.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __iedial_h__
#define __iedial_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IDialEventSink_FWD_DEFINED__
#define __IDialEventSink_FWD_DEFINED__
typedef interface IDialEventSink IDialEventSink;
#endif 	/* __IDialEventSink_FWD_DEFINED__ */


#ifndef __IDialEngine_FWD_DEFINED__
#define __IDialEngine_FWD_DEFINED__
typedef interface IDialEngine IDialEngine;
#endif 	/* __IDialEngine_FWD_DEFINED__ */


#ifndef __IDialBranding_FWD_DEFINED__
#define __IDialBranding_FWD_DEFINED__
typedef interface IDialBranding IDialBranding;
#endif 	/* __IDialBranding_FWD_DEFINED__ */


/* header files for imported files */
#include "unknwn.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_iedial_0000_0000 */
/* [local] */ 

//=--------------------------------------------------------------------------=
// iedial.h
//=--------------------------------------------------------------------------=
// (C) Copyright Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=

#pragma comment(lib,"uuid.lib")

//---------------------------------------------------------------------------=



extern RPC_IF_HANDLE __MIDL_itf_iedial_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iedial_0000_0000_v0_0_s_ifspec;

#ifndef __IDialEventSink_INTERFACE_DEFINED__
#define __IDialEventSink_INTERFACE_DEFINED__

/* interface IDialEventSink */
/* [object][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IDialEventSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2d86f4ff-6e2d-4488-b2e9-6934afd41bea")
    IDialEventSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnEvent( 
            /* [in] */ DWORD dwEvent,
            /* [in] */ DWORD dwStatus) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDialEventSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDialEventSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDialEventSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDialEventSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnEvent )( 
            __RPC__in IDialEventSink * This,
            /* [in] */ DWORD dwEvent,
            /* [in] */ DWORD dwStatus);
        
        END_INTERFACE
    } IDialEventSinkVtbl;

    interface IDialEventSink
    {
        CONST_VTBL struct IDialEventSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDialEventSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDialEventSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDialEventSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDialEventSink_OnEvent(This,dwEvent,dwStatus)	\
    ( (This)->lpVtbl -> OnEvent(This,dwEvent,dwStatus) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDialEventSink_INTERFACE_DEFINED__ */


#ifndef __IDialEngine_INTERFACE_DEFINED__
#define __IDialEngine_INTERFACE_DEFINED__

/* interface IDialEngine */
/* [object][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IDialEngine;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("39fd782b-7905-40d5-9148-3c9b190423d5")
    IDialEngine : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ __RPC__in LPCWSTR pwzConnectoid,
            /* [in] */ __RPC__in_opt IDialEventSink *pIDES) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProperty( 
            /* [in] */ __RPC__in LPCWSTR pwzProperty,
            /* [in] */ __RPC__in LPWSTR pwzValue,
            /* [in] */ DWORD dwBufSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProperty( 
            /* [in] */ __RPC__in LPCWSTR pwzProperty,
            /* [in] */ __RPC__in LPCWSTR pwzValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Dial( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HangUp( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetConnectedState( 
            /* [out] */ __RPC__out DWORD *pdwState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetConnectHandle( 
            /* [out] */ __RPC__out DWORD_PTR *pdwHandle) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDialEngineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDialEngine * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDialEngine * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDialEngine * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            __RPC__in IDialEngine * This,
            /* [in] */ __RPC__in LPCWSTR pwzConnectoid,
            /* [in] */ __RPC__in_opt IDialEventSink *pIDES);
        
        HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
            __RPC__in IDialEngine * This,
            /* [in] */ __RPC__in LPCWSTR pwzProperty,
            /* [in] */ __RPC__in LPWSTR pwzValue,
            /* [in] */ DWORD dwBufSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetProperty )( 
            __RPC__in IDialEngine * This,
            /* [in] */ __RPC__in LPCWSTR pwzProperty,
            /* [in] */ __RPC__in LPCWSTR pwzValue);
        
        HRESULT ( STDMETHODCALLTYPE *Dial )( 
            __RPC__in IDialEngine * This);
        
        HRESULT ( STDMETHODCALLTYPE *HangUp )( 
            __RPC__in IDialEngine * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetConnectedState )( 
            __RPC__in IDialEngine * This,
            /* [out] */ __RPC__out DWORD *pdwState);
        
        HRESULT ( STDMETHODCALLTYPE *GetConnectHandle )( 
            __RPC__in IDialEngine * This,
            /* [out] */ __RPC__out DWORD_PTR *pdwHandle);
        
        END_INTERFACE
    } IDialEngineVtbl;

    interface IDialEngine
    {
        CONST_VTBL struct IDialEngineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDialEngine_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDialEngine_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDialEngine_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDialEngine_Initialize(This,pwzConnectoid,pIDES)	\
    ( (This)->lpVtbl -> Initialize(This,pwzConnectoid,pIDES) ) 

#define IDialEngine_GetProperty(This,pwzProperty,pwzValue,dwBufSize)	\
    ( (This)->lpVtbl -> GetProperty(This,pwzProperty,pwzValue,dwBufSize) ) 

#define IDialEngine_SetProperty(This,pwzProperty,pwzValue)	\
    ( (This)->lpVtbl -> SetProperty(This,pwzProperty,pwzValue) ) 

#define IDialEngine_Dial(This)	\
    ( (This)->lpVtbl -> Dial(This) ) 

#define IDialEngine_HangUp(This)	\
    ( (This)->lpVtbl -> HangUp(This) ) 

#define IDialEngine_GetConnectedState(This,pdwState)	\
    ( (This)->lpVtbl -> GetConnectedState(This,pdwState) ) 

#define IDialEngine_GetConnectHandle(This,pdwHandle)	\
    ( (This)->lpVtbl -> GetConnectHandle(This,pdwHandle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDialEngine_INTERFACE_DEFINED__ */


#ifndef __IDialBranding_INTERFACE_DEFINED__
#define __IDialBranding_INTERFACE_DEFINED__

/* interface IDialBranding */
/* [object][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IDialBranding;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8aecafa9-4306-43cc-8c5a-765f2979cc16")
    IDialBranding : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ __RPC__in LPCWSTR pwzConnectoid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBitmap( 
            /* [in] */ DWORD dwIndex,
            /* [out] */ __RPC__deref_out_opt HBITMAP *phBitmap) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDialBrandingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDialBranding * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDialBranding * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDialBranding * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            __RPC__in IDialBranding * This,
            /* [in] */ __RPC__in LPCWSTR pwzConnectoid);
        
        HRESULT ( STDMETHODCALLTYPE *GetBitmap )( 
            __RPC__in IDialBranding * This,
            /* [in] */ DWORD dwIndex,
            /* [out] */ __RPC__deref_out_opt HBITMAP *phBitmap);
        
        END_INTERFACE
    } IDialBrandingVtbl;

    interface IDialBranding
    {
        CONST_VTBL struct IDialBrandingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDialBranding_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDialBranding_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDialBranding_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDialBranding_Initialize(This,pwzConnectoid)	\
    ( (This)->lpVtbl -> Initialize(This,pwzConnectoid) ) 

#define IDialBranding_GetBitmap(This,dwIndex,phBitmap)	\
    ( (This)->lpVtbl -> GetBitmap(This,dwIndex,phBitmap) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDialBranding_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_iedial_0000_0003 */
/* [local] */ 

#define DIALPROP_USERNAME       L"UserName"        
#define DIALPROP_PASSWORD       L"Password"        
#define DIALPROP_DOMAIN         L"Domain"          
#define DIALPROP_SAVEPASSWORD   L"SavePassword"    
#define DIALPROP_REDIALCOUNT    L"RedialCount"     
#define DIALPROP_REDIALINTERVAL L"RedialInterval"  
#define DIALPROP_PHONENUMBER    L"PhoneNumber"     
#define DIALPROP_LASTERROR      L"LastError"       
#define DIALPROP_RESOLVEDPHONE  L"ResolvedPhone"   

#define DIALENG_OperationComplete   0x10000          
#define DIALENG_RedialAttempt       0x10001          
#define DIALENG_RedialWait          0x10002          


extern RPC_IF_HANDLE __MIDL_itf_iedial_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iedial_0000_0003_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  HBITMAP_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in HBITMAP * ); 
unsigned char * __RPC_USER  HBITMAP_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HBITMAP * ); 
unsigned char * __RPC_USER  HBITMAP_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HBITMAP * ); 
void                      __RPC_USER  HBITMAP_UserFree(     __RPC__in unsigned long *, __RPC__in HBITMAP * ); 

unsigned long             __RPC_USER  HBITMAP_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in HBITMAP * ); 
unsigned char * __RPC_USER  HBITMAP_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HBITMAP * ); 
unsigned char * __RPC_USER  HBITMAP_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HBITMAP * ); 
void                      __RPC_USER  HBITMAP_UserFree64(     __RPC__in unsigned long *, __RPC__in HBITMAP * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\ifmib.h ===
/*++

Copyright (c) Microsoft Corporation

Module Name:

    ifmib.h

Abstract:

    This module contains the public definitions and structures for the
    non-TCP/IP specific parts of MIB-II.  These definitions were previously
    in iprtrmib.h, which now includes this file.

--*/

#ifndef _IFMIB_
#define _IFMIB_
#pragma once

#include <ifdef.h>

#ifndef ANY_SIZE
#define ANY_SIZE 1
#endif

typedef struct _MIB_IFNUMBER
{
    DWORD    dwValue;
} MIB_IFNUMBER, *PMIB_IFNUMBER;


//
// $REVIEW: This has always been defined as 8.  However, this is not 
// sufficient for all media types.
//
#define MAXLEN_PHYSADDR 8

#define MAXLEN_IFDESCR 256

#define MAX_INTERFACE_NAME_LEN 256

typedef struct _MIB_IFROW {
    WCHAR wszName[MAX_INTERFACE_NAME_LEN];
    IF_INDEX dwIndex;
    IFTYPE dwType;
    DWORD dwMtu;
    DWORD dwSpeed;
    DWORD dwPhysAddrLen;
    UCHAR bPhysAddr[MAXLEN_PHYSADDR];
    DWORD dwAdminStatus;
    INTERNAL_IF_OPER_STATUS dwOperStatus;
    DWORD dwLastChange;
    DWORD dwInOctets;
    DWORD dwInUcastPkts;
    DWORD dwInNUcastPkts;
    DWORD dwInDiscards;
    DWORD dwInErrors;
    DWORD dwInUnknownProtos;
    DWORD dwOutOctets;
    DWORD dwOutUcastPkts;
    DWORD dwOutNUcastPkts;
    DWORD dwOutDiscards;
    DWORD dwOutErrors;
    DWORD dwOutQLen;
    DWORD dwDescrLen;
    UCHAR bDescr[MAXLEN_IFDESCR];
} MIB_IFROW, *PMIB_IFROW;

typedef struct _MIB_IFTABLE {
    DWORD dwNumEntries;
    MIB_IFROW table[ANY_SIZE];
} MIB_IFTABLE, *PMIB_IFTABLE;

#define SIZEOF_IFTABLE(X) (FIELD_OFFSET(MIB_IFTABLE,table[0]) + \
                           ((X) * sizeof(MIB_IFROW)) + ALIGN_SIZE)

#endif // _IFMIB_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\ifdef.h ===
/*++

Copyright (c) 2000-2001  Microsoft Corporation

Module Name:

    ifdef.h

Abstract:

    This module contains IF_* definitions.

Author:


Environment:

    user mode or kernel mode

--*/

#ifndef _IFDEF_
#define _IFDEF_
#pragma once


typedef ULONG32 NET_IF_OBJECT_ID, *PNET_IF_OBJECT_ID;


typedef enum _NET_IF_ADMIN_STATUS   // ifAdminStatus
{
    NET_IF_ADMIN_STATUS_UP = 1,
    NET_IF_ADMIN_STATUS_DOWN = 2,
    NET_IF_ADMIN_STATUS_TESTING = 3
} NET_IF_ADMIN_STATUS, *PNET_IF_ADMIN_STATUS;

typedef enum _NET_IF_OPER_STATUS   // ifOperStatus
{
    NET_IF_OPER_STATUS_UP = 1,
    NET_IF_OPER_STATUS_DOWN = 2,
    NET_IF_OPER_STATUS_TESTING = 3,
    NET_IF_OPER_STATUS_UNKNOWN = 4,
    NET_IF_OPER_STATUS_DORMANT = 5,
    NET_IF_OPER_STATUS_NOT_PRESENT = 6,
    NET_IF_OPER_STATUS_LOWER_LAYER_DOWN = 7
} NET_IF_OPER_STATUS, *PNET_IF_OPER_STATUS;

//
// Flags to extend operational status
//
#define NET_IF_OPER_STATUS_DOWN_NOT_AUTHENTICATED        0x00000001
#define NET_IF_OPER_STATUS_DOWN_NOT_MEDIA_CONNECTED      0x00000002
#define NET_IF_OPER_STATUS_DORMANT_PAUSED                0x00000004
#define NET_IF_OPER_STATUS_DORMANT_LOW_POWER             0x00000008


typedef UINT32 NET_IF_COMPARTMENT_ID, *PNET_IF_COMPARTMENT_ID;

//
// Define compartment ID type:
//
#define NET_IF_COMPARTMENT_ID_UNSPECIFIED   (NET_IF_COMPARTMENT_ID)0
#define NET_IF_COMPARTMENT_ID_PRIMARY       (NET_IF_COMPARTMENT_ID)1

#define NET_IF_OID_IF_ALIAS             0x00000001  // identifies the ifAlias string for an interface
#define NET_IF_OID_COMPARTMENT_ID       0x00000002  // identifies the compartment ID for an interface.
#define NET_IF_OID_NETWORK_GUID         0x00000003  // identifies the NetworkGuid for an interface.
#define NET_IF_OID_IF_ENTRY             0x00000004  // identifies statistics for an interface.

//
// Define NetworkGUID type:
//
typedef GUID NET_IF_NETWORK_GUID, *PNET_IF_NETWORK_GUID;

//
// Define macros for an "unspecified" NetworkGUID value to be used in structures
// that haven't had the NET_LUID field filled in yet.
//
#define NET_SET_UNSPECIFIED_NETWORK_GUID(_pNetworkGuid)
#define NET_IS_UNSPECIFIED_NETWORK_GUID(_NetworkGuidValue)

//
// To prevent collisions between user-assigned and system-assigend site-ids,
// we partition the site-id space into two:
// 1. User-Assigned: NET_SITEID_UNSPECIFIED < SiteId < NET_SITEID_MAXUSER
// 2. System-Assigned: NET_SITEID_MAXUSER < SiteId < NET_SITEID_MAXSYSTEM
//
// Note: A network's SiteId doesn't really need to be settable.
// 1. The network profile manager creates a network per network profile.
// 2. NDIS/IF assigns a unique SiteId to each network.
//
#define NET_SITEID_UNSPECIFIED (0)
#define NET_SITEID_MAXUSER (0x07ffffff)
#define NET_SITEID_MAXSYSTEM (0x0fffffff)
C_ASSERT(NET_SITEID_MAXUSER < NET_SITEID_MAXSYSTEM);

typedef enum _NET_IF_RCV_ADDRESS_TYPE // ifRcvAddressType
{
    NET_IF_RCV_ADDRESS_TYPE_OTHER = 1,
    NET_IF_RCV_ADDRESS_TYPE_VOLATILE = 2,
    NET_IF_RCV_ADDRESS_TYPE_NON_VOLATILE = 3
} NET_IF_RCV_ADDRESS_TYPE, *PNET_IF_RCV_ADDRESS_TYPE;

typedef struct _NET_IF_RCV_ADDRESS_LH
{
    NET_IF_RCV_ADDRESS_TYPE ifRcvAddressType;
    USHORT                  ifRcvAddressLength;
    USHORT                  ifRcvAddressOffset; // from beginning of this struct
} NET_IF_RCV_ADDRESS_LH, *PNET_IF_RCV_ADDRESS_LH;

typedef struct _NET_IF_ALIAS_LH
{
    USHORT  ifAliasLength;  // in bytes, of ifAlias string
    USHORT  ifAliasOffset;  // in bytes, from beginning of this struct
} NET_IF_ALIAS_LH, *PNET_IF_ALIAS_LH;

#pragma warning(push)
#pragma warning(disable:4214) // bit field types other than int
typedef union _NET_LUID_LH
{
    ULONG64     Value;
    struct
    {
        ULONG64     Reserved:24;
        ULONG64     NetLuidIndex:24;
        ULONG64     IfType:16;                  // equal to IANA IF type
    }Info;
} NET_LUID_LH, *PNET_LUID_LH;
#pragma warning(pop)

#if (NTDDI_VERSION >= NTDDI_VISTA)
typedef NET_IF_RCV_ADDRESS_LH NET_IF_RCV_ADDRESS;
typedef NET_IF_RCV_ADDRESS* PNET_IF_RCV_ADDRESS;

typedef NET_IF_ALIAS_LH NET_IF_ALIAS;
typedef NET_IF_ALIAS* PNET_IF_ALIAS;
#endif //NTDDI_VISTA

//
// Need to make this visible on all platforms (for the purpose of IF_LUID).
//
typedef NET_LUID_LH NET_LUID;
typedef NET_LUID* PNET_LUID;

//
// IF_LUID
//
// Define the locally unique datalink interface identifier type.
// This type is persistable.
//
typedef NET_LUID IF_LUID, *PIF_LUID;

typedef ULONG NET_IFINDEX, *PNET_IFINDEX;       // Interface Index (ifIndex)
typedef UINT16 NET_IFTYPE, *PNET_IFTYPE;        // Interface Type (IANA ifType)

#define NET_IFINDEX_UNSPECIFIED (NET_IFINDEX)(0)    // Not a valid ifIndex
#define NET_IFLUID_UNSPECIFIED (0)    // Not a valid if Luid

//
// Definitions for NET_IF_INFORMATION.Flags
//
#define NIIF_HARDWARE_INTERFACE         0x00000001  // Set iff hardware
#define NIIF_FILTER_INTERFACE           0x00000002
#define NIIF_NDIS_RESERVED1             0x00000004
#define NIIF_NDIS_RESERVED2             0x00000008
#define NIIF_NDIS_RESERVED3             0x00000010
#define NIIF_NDIS_WDM_INTERFACE         0x00000020
#define NIIF_NDIS_ENDPOINT_INTERFACE    0x00000040
#define NIIF_NDIS_ISCSI_INTERFACE       0x00000080

#define NIIF_WAN_TUNNEL_TYPE_UNKNOWN    ((ULONG)(-1))

//
// Define datalink interface access types.
//
typedef enum _NET_IF_ACCESS_TYPE
{
    NET_IF_ACCESS_LOOPBACK = 1,
    NET_IF_ACCESS_BROADCAST = 2,
    NET_IF_ACCESS_POINT_TO_POINT = 3,
    NET_IF_ACCESS_POINT_TO_MULTI_POINT = 4,
    NET_IF_ACCESS_MAXIMUM = 5
} NET_IF_ACCESS_TYPE, *PNET_IF_ACCESS_TYPE;


//
// Define datalink interface direction types.
//
typedef enum _NET_IF_DIRECTION_TYPE
{
    NET_IF_DIRECTION_SENDRECEIVE,
    NET_IF_DIRECTION_SENDONLY,
    NET_IF_DIRECTION_RECEIVEONLY,
    NET_IF_DIRECTION_MAXIMUM
} NET_IF_DIRECTION_TYPE, *PNET_IF_DIRECTION_TYPE;


typedef enum _NET_IF_CONNECTION_TYPE
{
   NET_IF_CONNECTION_DEDICATED = 1,
   NET_IF_CONNECTION_PASSIVE = 2,
   NET_IF_CONNECTION_DEMAND = 3,
   NET_IF_CONNECTION_MAXIMUM = 4
} NET_IF_CONNECTION_TYPE, *PNET_IF_CONNECTION_TYPE;


typedef enum _NET_IF_MEDIA_CONNECT_STATE
{
    MediaConnectStateUnknown,
    MediaConnectStateConnected,
    MediaConnectStateDisconnected
} NET_IF_MEDIA_CONNECT_STATE, *PNET_IF_MEDIA_CONNECT_STATE;

#define NET_IF_LINK_SPEED_UNKNOWN   ((ULONG64)(-1))

//
// Defines the duplex state of media
//
typedef enum _NET_IF_MEDIA_DUPLEX_STATE
{
    MediaDuplexStateUnknown,
    MediaDuplexStateHalf,
    MediaDuplexStateFull
} NET_IF_MEDIA_DUPLEX_STATE, *PNET_IF_MEDIA_DUPLEX_STATE;


// Special values for fields in NET_PHYSICAL_LOCATION
#define NIIF_BUS_NUMBER_UNKNOWN         ((ULONG)(-1))
#define NIIF_SLOT_NUMBER_UNKNOWN        ((ULONG)(-1))
#define NIIF_FUNCTION_NUMBER_UNKNOWN    ((ULONG)(-1))

typedef struct _NET_PHYSICAL_LOCATION_LH
{
    ULONG                   BusNumber;          // Physical location
    ULONG                   SlotNumber;         // ... for hardware
    ULONG                   FunctionNumber;     // ... devices.
} NET_PHYSICAL_LOCATION_LH, *PNET_PHYSICAL_LOCATION_LH;

//
// maximum string size in -wchar- units
//
#define IF_MAX_STRING_SIZE 256

typedef struct _IF_COUNTED_STRING_LH
{
    USHORT      Length; // in -Bytes-
    WCHAR       String[IF_MAX_STRING_SIZE + 1];
} IF_COUNTED_STRING_LH, *PIF_COUNTED_STRING_LH;

#define IF_MAX_PHYS_ADDRESS_LENGTH 32

typedef struct _IF_PHYSICAL_ADDRESS_LH
{
    USHORT      Length;
    UCHAR       Address[IF_MAX_PHYS_ADDRESS_LENGTH];
} IF_PHYSICAL_ADDRESS_LH, *PIF_PHYSICAL_ADDRESS_LH;

#if (NTDDI_VERSION >= NTDDI_VISTA)
typedef NET_PHYSICAL_LOCATION_LH NET_PHYSICAL_LOCATION;
typedef NET_PHYSICAL_LOCATION* PNET_PHYSICAL_LOCATION;

typedef IF_COUNTED_STRING_LH IF_COUNTED_STRING;
typedef IF_COUNTED_STRING* PIF_COUNTED_STRING;

typedef IF_PHYSICAL_ADDRESS_LH IF_PHYSICAL_ADDRESS;
typedef IF_PHYSICAL_ADDRESS* PIF_PHYSICAL_ADDRESS;
#endif


//
// IF_INDEX
//
// Define the interface index type.
// This type is not persistable.
// This must be unsigned (not an enum) to replace previous uses of
// an index that used a DWORD type.
//

typedef NET_IFINDEX IF_INDEX, *PIF_INDEX;
#define IFI_UNSPECIFIED NET_IFINDEX_UNSPECIFIED


//
// Get definitions for IFTYPE and IF_ACCESS_TYPE.
//
#include <ipifcons.h>


//
// Types of tunnels (sub-type of IF_TYPE when IF_TYPE is IF_TYPE_TUNNEL).
// See http://www.iana.org/assignments/ianaiftype-mib.
//
typedef enum {
    TUNNEL_TYPE_NONE = 0,
    TUNNEL_TYPE_OTHER = 1,
    TUNNEL_TYPE_DIRECT = 2,
    TUNNEL_TYPE_6TO4 = 11,
    TUNNEL_TYPE_ISATAP = 13,
    TUNNEL_TYPE_TEREDO = 14,
    TUNNEL_TYPE_IPHTTPS = 15,
} TUNNEL_TYPE, *PTUNNEL_TYPE;

//
// IF_ADMINISTRATIVE_STATE
//
// Datalink Interface Administrative State.
// Indicates whether the interface has been administratively enabled.
//

typedef enum _IF_ADMINISTRATIVE_STATE {
    IF_ADMINISTRATIVE_DISABLED,
    IF_ADMINISTRATIVE_ENABLED,
    IF_ADMINISTRATIVE_DEMANDDIAL,
} IF_ADMINISTRATIVE_STATE, *PIF_ADMINISTRATIVE_STATE;


//
// Note: Interface is Operational iff
// ((MediaSense is Connected) and (AdministrativeState is Enabled))
// or
// ((MediaSense is Connected) and (AdministrativeState is OnDemand))
//
// !Operational iff
// ((MediaSense != Connected) or (AdministrativeState is Disabled))
//

//
// OperStatus values from RFC 2863
//
typedef enum {
    IfOperStatusUp = 1,
    IfOperStatusDown,
    IfOperStatusTesting,
    IfOperStatusUnknown,
    IfOperStatusDormant,
    IfOperStatusNotPresent,
    IfOperStatusLowerLayerDown
} IF_OPER_STATUS;

typedef struct _NDIS_INTERFACE_INFORMATION
{
    //
    //  rod fields
    //
    NET_IF_OPER_STATUS          ifOperStatus;
    ULONG                       ifOperStatusFlags;
    NET_IF_MEDIA_CONNECT_STATE  MediaConnectState;
    NET_IF_MEDIA_DUPLEX_STATE   MediaDuplexState;
    ULONG                       ifMtu;
    BOOLEAN                 	ifPromiscuousMode;
    BOOLEAN                     ifDeviceWakeUpEnable;
    ULONG64                     XmitLinkSpeed;
    ULONG64                     RcvLinkSpeed;

    ULONG64                     ifLastChange;
    ULONG64                     ifCounterDiscontinuityTime;
    ULONG64                     ifInUnknownProtos;      

    //
    // OID_GEN_STATISTICS
    //
    ULONG64                     ifInDiscards;           // OID_GEN_RCV_DISCARDS = OID_GEN_RCV_ERROR + OID_GEN_RCV_NO_BUFFER
    ULONG64                     ifInErrors;             // OID_GEN_RCV_ERROR
    ULONG64                     ifHCInOctets;           // OID_GEN_BYTES_RCV = OID_GEN_DIRECTED_BYTES_RCV + OID_GEN_MULTICAST_BYTES_RCV + OID_GEN_BROADCAST_BYTES_RCV
    ULONG64                     ifHCInUcastPkts;        // OID_GEN_DIRECTED_FRAMES_RCV    
    ULONG64                     ifHCInMulticastPkts;    // OID_GEN_MULTICAST_FRAMES_RCV
    ULONG64                     ifHCInBroadcastPkts;    // OID_GEN_BROADCAST_FRAMES_RCV
    ULONG64                     ifHCOutOctets;          // OID_GEN_BYTES_XMIT = OID_GEN_DIRECTED_BYTES_XMIT + OID_GEN_MULTICAST_BYTES_XMIT + OID_GEN_BROADCAST_BYTES_XMIT
    ULONG64                     ifHCOutUcastPkts;       // OID_GEN_DIRECTED_FRAMES_XMIT
    ULONG64                     ifHCOutMulticastPkts;   // OID_GEN_MULTICAST_FRAMES_XMIT
    ULONG64                     ifHCOutBroadcastPkts;   // OID_GEN_BROADCAST_FRAMES_XMIT
    ULONG64                     ifOutErrors;            // OID_GEN_XMIT_ERROR    
    ULONG64                     ifOutDiscards;          // OID_GEN_XMIT_DISCARDS        
    ULONG64                     ifHCInUcastOctets;      // OID_GEN_DIRECTED_BYTES_RCV
    ULONG64                     ifHCInMulticastOctets;  // OID_GEN_MULTICAST_BYTES_RCV
    ULONG64                     ifHCInBroadcastOctets;  // OID_GEN_BROADCAST_BYTES_RCV    
    ULONG64                     ifHCOutUcastOctets;     // OID_GEN_DIRECTED_BYTES_XMIT
    ULONG64                     ifHCOutMulticastOctets; // OID_GEN_MULTICAST_BYTES_XMIT
    ULONG64                     ifHCOutBroadcastOctets; // OID_GEN_BROADCAST_BYTES_XMIT            
    NET_IF_COMPARTMENT_ID       CompartmentId;
    ULONG                       SupportedStatistics;
}NDIS_INTERFACE_INFORMATION, *PNDIS_INTERFACE_INFORMATION;

#endif // _IFDEF_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IIIS.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 5.03.0268 */
/* at Wed Jul 07 15:53:18 1999
 */
/* Compiler settings for iis.odl:
    Os (OptLev=s), W1, Zp8, env=Win32 (32b run), ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __iiis_h__
#define __iiis_h__

/* Forward Declarations */ 

#ifndef __IISMimeType_FWD_DEFINED__
#define __IISMimeType_FWD_DEFINED__
typedef interface IISMimeType IISMimeType;
#endif 	/* __IISMimeType_FWD_DEFINED__ */


#ifndef __MimeMap_FWD_DEFINED__
#define __MimeMap_FWD_DEFINED__

#ifdef __cplusplus
typedef class MimeMap MimeMap;
#else
typedef struct MimeMap MimeMap;
#endif /* __cplusplus */

#endif 	/* __MimeMap_FWD_DEFINED__ */


#ifndef __IISIPSecurity_FWD_DEFINED__
#define __IISIPSecurity_FWD_DEFINED__
typedef interface IISIPSecurity IISIPSecurity;
#endif 	/* __IISIPSecurity_FWD_DEFINED__ */


#ifndef __IPSecurity_FWD_DEFINED__
#define __IPSecurity_FWD_DEFINED__

#ifdef __cplusplus
typedef class IPSecurity IPSecurity;
#else
typedef struct IPSecurity IPSecurity;
#endif /* __cplusplus */

#endif 	/* __IPSecurity_FWD_DEFINED__ */


#ifndef __IISNamespace_FWD_DEFINED__
#define __IISNamespace_FWD_DEFINED__

#ifdef __cplusplus
typedef class IISNamespace IISNamespace;
#else
typedef struct IISNamespace IISNamespace;
#endif /* __cplusplus */

#endif 	/* __IISNamespace_FWD_DEFINED__ */


#ifndef __IISProvider_FWD_DEFINED__
#define __IISProvider_FWD_DEFINED__

#ifdef __cplusplus
typedef class IISProvider IISProvider;
#else
typedef struct IISProvider IISProvider;
#endif /* __cplusplus */

#endif 	/* __IISProvider_FWD_DEFINED__ */


#ifndef __IISBaseObject_FWD_DEFINED__
#define __IISBaseObject_FWD_DEFINED__
typedef interface IISBaseObject IISBaseObject;
#endif 	/* __IISBaseObject_FWD_DEFINED__ */


#ifndef __IISSchemaObject_FWD_DEFINED__
#define __IISSchemaObject_FWD_DEFINED__
typedef interface IISSchemaObject IISSchemaObject;
#endif 	/* __IISSchemaObject_FWD_DEFINED__ */


#ifndef __IISPropertyAttribute_FWD_DEFINED__
#define __IISPropertyAttribute_FWD_DEFINED__
typedef interface IISPropertyAttribute IISPropertyAttribute;
#endif 	/* __IISPropertyAttribute_FWD_DEFINED__ */


#ifndef __PropertyAttribute_FWD_DEFINED__
#define __PropertyAttribute_FWD_DEFINED__

#ifdef __cplusplus
typedef class PropertyAttribute PropertyAttribute;
#else
typedef struct PropertyAttribute PropertyAttribute;
#endif /* __cplusplus */

#endif 	/* __PropertyAttribute_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/* interface __MIDL_itf_iis_0000 */
/* [local] */ 

DEFINE_GUID(LIBID_IISOle,0x49D704A0L,0x89F7,0x11D0,0x85,0x27,0x00,0xC0,0x4F,0xD8,0xD5,0x03);
DEFINE_GUID(IID_IISBaseObject, 0x4b42e390, 0xe96, 0x11d1, 0x9c, 0x3f, 0x0, 0xa0,0xc9, 0x22, 0xe7, 0x3);


extern RPC_IF_HANDLE __MIDL_itf_iis_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iis_0000_v0_0_s_ifspec;


#ifndef __IISOle_LIBRARY_DEFINED__
#define __IISOle_LIBRARY_DEFINED__

/* library IISOle */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_IISOle;

#ifndef __IISMimeType_INTERFACE_DEFINED__
#define __IISMimeType_INTERFACE_DEFINED__

/* interface IISMimeType */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISMimeType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9036B027-A780-11d0-9B3D-0080C710EF95")
    IISMimeType : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MimeType( 
            /* [retval][out] */ BSTR __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MimeType( 
            /* [in] */ BSTR bstrMimeType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Extension( 
            /* [retval][out] */ BSTR __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Extension( 
            /* [in] */ BSTR bstrExtension) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISMimeTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IISMimeType __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IISMimeType __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IISMimeType __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IISMimeType __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IISMimeType __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IISMimeType __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IISMimeType __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_MimeType )( 
            IISMimeType __RPC_FAR * This,
            /* [retval][out] */ BSTR __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_MimeType )( 
            IISMimeType __RPC_FAR * This,
            /* [in] */ BSTR bstrMimeType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Extension )( 
            IISMimeType __RPC_FAR * This,
            /* [retval][out] */ BSTR __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Extension )( 
            IISMimeType __RPC_FAR * This,
            /* [in] */ BSTR bstrExtension);
        
        END_INTERFACE
    } IISMimeTypeVtbl;

    interface IISMimeType
    {
        CONST_VTBL struct IISMimeTypeVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISMimeType_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IISMimeType_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IISMimeType_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IISMimeType_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IISMimeType_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IISMimeType_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IISMimeType_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IISMimeType_get_MimeType(This,retval)	\
    (This)->lpVtbl -> get_MimeType(This,retval)

#define IISMimeType_put_MimeType(This,bstrMimeType)	\
    (This)->lpVtbl -> put_MimeType(This,bstrMimeType)

#define IISMimeType_get_Extension(This,retval)	\
    (This)->lpVtbl -> get_Extension(This,retval)

#define IISMimeType_put_Extension(This,bstrExtension)	\
    (This)->lpVtbl -> put_Extension(This,bstrExtension)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISMimeType_get_MimeType_Proxy( 
    IISMimeType __RPC_FAR * This,
    /* [retval][out] */ BSTR __RPC_FAR *retval);


void __RPC_STUB IISMimeType_get_MimeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISMimeType_put_MimeType_Proxy( 
    IISMimeType __RPC_FAR * This,
    /* [in] */ BSTR bstrMimeType);


void __RPC_STUB IISMimeType_put_MimeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISMimeType_get_Extension_Proxy( 
    IISMimeType __RPC_FAR * This,
    /* [retval][out] */ BSTR __RPC_FAR *retval);


void __RPC_STUB IISMimeType_get_Extension_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISMimeType_put_Extension_Proxy( 
    IISMimeType __RPC_FAR * This,
    /* [in] */ BSTR bstrExtension);


void __RPC_STUB IISMimeType_put_Extension_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISMimeType_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MimeMap;

#ifdef __cplusplus

class DECLSPEC_UUID("9036B028-A780-11d0-9B3D-0080C710EF95")
MimeMap;
#endif

#ifndef __IISIPSecurity_INTERFACE_DEFINED__
#define __IISIPSecurity_INTERFACE_DEFINED__

/* interface IISIPSecurity */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISIPSecurity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F3287521-BBA3-11d0-9BDC-00A0C922E703")
    IISIPSecurity : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_IPDeny( 
            /* [retval][out] */ VARIANT __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_IPDeny( 
            /* [in] */ VARIANT vIPDeny) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_IPGrant( 
            /* [retval][out] */ VARIANT __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_IPGrant( 
            /* [in] */ VARIANT vIPGrant) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DomainDeny( 
            /* [retval][out] */ VARIANT __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_DomainDeny( 
            /* [in] */ VARIANT vDomainDeny) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_DomainGrant( 
            /* [retval][out] */ VARIANT __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_DomainGrant( 
            /* [in] */ VARIANT vDomainGrant) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_GrantByDefault( 
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_GrantByDefault( 
            /* [in] */ VARIANT_BOOL fGrantByDefault) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISIPSecurityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IISIPSecurity __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IISIPSecurity __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IISIPSecurity __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IISIPSecurity __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IISIPSecurity __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IISIPSecurity __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IISIPSecurity __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_IPDeny )( 
            IISIPSecurity __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_IPDeny )( 
            IISIPSecurity __RPC_FAR * This,
            /* [in] */ VARIANT vIPDeny);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_IPGrant )( 
            IISIPSecurity __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_IPGrant )( 
            IISIPSecurity __RPC_FAR * This,
            /* [in] */ VARIANT vIPGrant);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_DomainDeny )( 
            IISIPSecurity __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_DomainDeny )( 
            IISIPSecurity __RPC_FAR * This,
            /* [in] */ VARIANT vDomainDeny);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_DomainGrant )( 
            IISIPSecurity __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_DomainGrant )( 
            IISIPSecurity __RPC_FAR * This,
            /* [in] */ VARIANT vDomainGrant);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_GrantByDefault )( 
            IISIPSecurity __RPC_FAR * This,
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_GrantByDefault )( 
            IISIPSecurity __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL fGrantByDefault);
        
        END_INTERFACE
    } IISIPSecurityVtbl;

    interface IISIPSecurity
    {
        CONST_VTBL struct IISIPSecurityVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISIPSecurity_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IISIPSecurity_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IISIPSecurity_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IISIPSecurity_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IISIPSecurity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IISIPSecurity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IISIPSecurity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IISIPSecurity_get_IPDeny(This,retval)	\
    (This)->lpVtbl -> get_IPDeny(This,retval)

#define IISIPSecurity_put_IPDeny(This,vIPDeny)	\
    (This)->lpVtbl -> put_IPDeny(This,vIPDeny)

#define IISIPSecurity_get_IPGrant(This,retval)	\
    (This)->lpVtbl -> get_IPGrant(This,retval)

#define IISIPSecurity_put_IPGrant(This,vIPGrant)	\
    (This)->lpVtbl -> put_IPGrant(This,vIPGrant)

#define IISIPSecurity_get_DomainDeny(This,retval)	\
    (This)->lpVtbl -> get_DomainDeny(This,retval)

#define IISIPSecurity_put_DomainDeny(This,vDomainDeny)	\
    (This)->lpVtbl -> put_DomainDeny(This,vDomainDeny)

#define IISIPSecurity_get_DomainGrant(This,retval)	\
    (This)->lpVtbl -> get_DomainGrant(This,retval)

#define IISIPSecurity_put_DomainGrant(This,vDomainGrant)	\
    (This)->lpVtbl -> put_DomainGrant(This,vDomainGrant)

#define IISIPSecurity_get_GrantByDefault(This,retval)	\
    (This)->lpVtbl -> get_GrantByDefault(This,retval)

#define IISIPSecurity_put_GrantByDefault(This,fGrantByDefault)	\
    (This)->lpVtbl -> put_GrantByDefault(This,fGrantByDefault)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISIPSecurity_get_IPDeny_Proxy( 
    IISIPSecurity __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *retval);


void __RPC_STUB IISIPSecurity_get_IPDeny_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISIPSecurity_put_IPDeny_Proxy( 
    IISIPSecurity __RPC_FAR * This,
    /* [in] */ VARIANT vIPDeny);


void __RPC_STUB IISIPSecurity_put_IPDeny_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISIPSecurity_get_IPGrant_Proxy( 
    IISIPSecurity __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *retval);


void __RPC_STUB IISIPSecurity_get_IPGrant_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISIPSecurity_put_IPGrant_Proxy( 
    IISIPSecurity __RPC_FAR * This,
    /* [in] */ VARIANT vIPGrant);


void __RPC_STUB IISIPSecurity_put_IPGrant_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISIPSecurity_get_DomainDeny_Proxy( 
    IISIPSecurity __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *retval);


void __RPC_STUB IISIPSecurity_get_DomainDeny_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISIPSecurity_put_DomainDeny_Proxy( 
    IISIPSecurity __RPC_FAR * This,
    /* [in] */ VARIANT vDomainDeny);


void __RPC_STUB IISIPSecurity_put_DomainDeny_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISIPSecurity_get_DomainGrant_Proxy( 
    IISIPSecurity __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *retval);


void __RPC_STUB IISIPSecurity_get_DomainGrant_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISIPSecurity_put_DomainGrant_Proxy( 
    IISIPSecurity __RPC_FAR * This,
    /* [in] */ VARIANT vDomainGrant);


void __RPC_STUB IISIPSecurity_put_DomainGrant_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISIPSecurity_get_GrantByDefault_Proxy( 
    IISIPSecurity __RPC_FAR * This,
    /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval);


void __RPC_STUB IISIPSecurity_get_GrantByDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISIPSecurity_put_GrantByDefault_Proxy( 
    IISIPSecurity __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL fGrantByDefault);


void __RPC_STUB IISIPSecurity_put_GrantByDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISIPSecurity_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_IPSecurity;

#ifdef __cplusplus

class DECLSPEC_UUID("F3287520-BBA3-11d0-9BDC-00A0C922E703")
IPSecurity;
#endif

EXTERN_C const CLSID CLSID_IISNamespace;

#ifdef __cplusplus

class DECLSPEC_UUID("d6bfa35e-89f2-11d0-8527-00c04fd8d503")
IISNamespace;
#endif

EXTERN_C const CLSID CLSID_IISProvider;

#ifdef __cplusplus

class DECLSPEC_UUID("d88966de-89f2-11d0-8527-00c04fd8d503")
IISProvider;
#endif

#ifndef __IISBaseObject_INTERFACE_DEFINED__
#define __IISBaseObject_INTERFACE_DEFINED__

/* interface IISBaseObject */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISBaseObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4B42E390-0E96-11d1-9C3F-00A0C922E703")
    IISBaseObject : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetDataPaths( 
            /* [in] */ BSTR bstrName,
            /* [in] */ LONG lnAttribute,
            /* [retval][out] */ VARIANT __RPC_FAR *pvPaths) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetPropertyAttribObj( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISBaseObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IISBaseObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IISBaseObject __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IISBaseObject __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IISBaseObject __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IISBaseObject __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IISBaseObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IISBaseObject __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetDataPaths )( 
            IISBaseObject __RPC_FAR * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ LONG lnAttribute,
            /* [retval][out] */ VARIANT __RPC_FAR *pvPaths);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetPropertyAttribObj )( 
            IISBaseObject __RPC_FAR * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppObject);
        
        END_INTERFACE
    } IISBaseObjectVtbl;

    interface IISBaseObject
    {
        CONST_VTBL struct IISBaseObjectVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISBaseObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IISBaseObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IISBaseObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IISBaseObject_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IISBaseObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IISBaseObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IISBaseObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IISBaseObject_GetDataPaths(This,bstrName,lnAttribute,pvPaths)	\
    (This)->lpVtbl -> GetDataPaths(This,bstrName,lnAttribute,pvPaths)

#define IISBaseObject_GetPropertyAttribObj(This,bstrName,ppObject)	\
    (This)->lpVtbl -> GetPropertyAttribObj(This,bstrName,ppObject)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IISBaseObject_GetDataPaths_Proxy( 
    IISBaseObject __RPC_FAR * This,
    /* [in] */ BSTR bstrName,
    /* [in] */ LONG lnAttribute,
    /* [retval][out] */ VARIANT __RPC_FAR *pvPaths);


void __RPC_STUB IISBaseObject_GetDataPaths_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISBaseObject_GetPropertyAttribObj_Proxy( 
    IISBaseObject __RPC_FAR * This,
    /* [in] */ BSTR bstrName,
    /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppObject);


void __RPC_STUB IISBaseObject_GetPropertyAttribObj_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISBaseObject_INTERFACE_DEFINED__ */


#ifndef __IISSchemaObject_INTERFACE_DEFINED__
#define __IISSchemaObject_INTERFACE_DEFINED__

/* interface IISSchemaObject */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISSchemaObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B6865A9C-3F64-11D2-A600-00A0C922E703")
    IISSchemaObject : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetSchemaPropertyAttributes( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppObject) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE PutSchemaPropertyAttributes( 
            /* [in] */ IDispatch __RPC_FAR *pObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISSchemaObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IISSchemaObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IISSchemaObject __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IISSchemaObject __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IISSchemaObject __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IISSchemaObject __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IISSchemaObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IISSchemaObject __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetSchemaPropertyAttributes )( 
            IISSchemaObject __RPC_FAR * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppObject);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *PutSchemaPropertyAttributes )( 
            IISSchemaObject __RPC_FAR * This,
            /* [in] */ IDispatch __RPC_FAR *pObject);
        
        END_INTERFACE
    } IISSchemaObjectVtbl;

    interface IISSchemaObject
    {
        CONST_VTBL struct IISSchemaObjectVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISSchemaObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IISSchemaObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IISSchemaObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IISSchemaObject_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IISSchemaObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IISSchemaObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IISSchemaObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IISSchemaObject_GetSchemaPropertyAttributes(This,bstrName,ppObject)	\
    (This)->lpVtbl -> GetSchemaPropertyAttributes(This,bstrName,ppObject)

#define IISSchemaObject_PutSchemaPropertyAttributes(This,pObject)	\
    (This)->lpVtbl -> PutSchemaPropertyAttributes(This,pObject)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IISSchemaObject_GetSchemaPropertyAttributes_Proxy( 
    IISSchemaObject __RPC_FAR * This,
    /* [in] */ BSTR bstrName,
    /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppObject);


void __RPC_STUB IISSchemaObject_GetSchemaPropertyAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISSchemaObject_PutSchemaPropertyAttributes_Proxy( 
    IISSchemaObject __RPC_FAR * This,
    /* [in] */ IDispatch __RPC_FAR *pObject);


void __RPC_STUB IISSchemaObject_PutSchemaPropertyAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISSchemaObject_INTERFACE_DEFINED__ */


#ifndef __IISPropertyAttribute_INTERFACE_DEFINED__
#define __IISPropertyAttribute_INTERFACE_DEFINED__

/* interface IISPropertyAttribute */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISPropertyAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("50E21930-A247-11D1-B79C-00A0C922E703")
    IISPropertyAttribute : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_PropName( 
            /* [retval][out] */ BSTR __RPC_FAR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_MetaId( 
            /* [retval][out] */ long __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_MetaId( 
            /* [in] */ long lnMetaId) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_UserType( 
            /* [retval][out] */ long __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_UserType( 
            /* [in] */ long lnUserType) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AllAttributes( 
            /* [retval][out] */ long __RPC_FAR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Inherit( 
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Inherit( 
            /* [in] */ VARIANT_BOOL fInherit) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Secure( 
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Secure( 
            /* [in] */ VARIANT_BOOL fSecure) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Reference( 
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Reference( 
            /* [in] */ VARIANT_BOOL fReference) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Volatile( 
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Volatile( 
            /* [in] */ VARIANT_BOOL fVolatile) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Isinherit( 
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Default( 
            /* [retval][out] */ VARIANT __RPC_FAR *retval) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Default( 
            /* [in] */ VARIANT vDefault) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISPropertyAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IISPropertyAttribute __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IISPropertyAttribute __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_PropName )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [retval][out] */ BSTR __RPC_FAR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_MetaId )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_MetaId )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [in] */ long lnMetaId);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_UserType )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_UserType )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [in] */ long lnUserType);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_AllAttributes )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Inherit )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Inherit )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL fInherit);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Secure )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Secure )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL fSecure);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Reference )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Reference )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL fReference);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Volatile )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Volatile )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL fVolatile);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Isinherit )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Default )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *retval);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Default )( 
            IISPropertyAttribute __RPC_FAR * This,
            /* [in] */ VARIANT vDefault);
        
        END_INTERFACE
    } IISPropertyAttributeVtbl;

    interface IISPropertyAttribute
    {
        CONST_VTBL struct IISPropertyAttributeVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISPropertyAttribute_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IISPropertyAttribute_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IISPropertyAttribute_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IISPropertyAttribute_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IISPropertyAttribute_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IISPropertyAttribute_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IISPropertyAttribute_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IISPropertyAttribute_get_PropName(This,retval)	\
    (This)->lpVtbl -> get_PropName(This,retval)

#define IISPropertyAttribute_get_MetaId(This,retval)	\
    (This)->lpVtbl -> get_MetaId(This,retval)

#define IISPropertyAttribute_put_MetaId(This,lnMetaId)	\
    (This)->lpVtbl -> put_MetaId(This,lnMetaId)

#define IISPropertyAttribute_get_UserType(This,retval)	\
    (This)->lpVtbl -> get_UserType(This,retval)

#define IISPropertyAttribute_put_UserType(This,lnUserType)	\
    (This)->lpVtbl -> put_UserType(This,lnUserType)

#define IISPropertyAttribute_get_AllAttributes(This,retval)	\
    (This)->lpVtbl -> get_AllAttributes(This,retval)

#define IISPropertyAttribute_get_Inherit(This,retval)	\
    (This)->lpVtbl -> get_Inherit(This,retval)

#define IISPropertyAttribute_put_Inherit(This,fInherit)	\
    (This)->lpVtbl -> put_Inherit(This,fInherit)

#define IISPropertyAttribute_get_Secure(This,retval)	\
    (This)->lpVtbl -> get_Secure(This,retval)

#define IISPropertyAttribute_put_Secure(This,fSecure)	\
    (This)->lpVtbl -> put_Secure(This,fSecure)

#define IISPropertyAttribute_get_Reference(This,retval)	\
    (This)->lpVtbl -> get_Reference(This,retval)

#define IISPropertyAttribute_put_Reference(This,fReference)	\
    (This)->lpVtbl -> put_Reference(This,fReference)

#define IISPropertyAttribute_get_Volatile(This,retval)	\
    (This)->lpVtbl -> get_Volatile(This,retval)

#define IISPropertyAttribute_put_Volatile(This,fVolatile)	\
    (This)->lpVtbl -> put_Volatile(This,fVolatile)

#define IISPropertyAttribute_get_Isinherit(This,retval)	\
    (This)->lpVtbl -> get_Isinherit(This,retval)

#define IISPropertyAttribute_get_Default(This,retval)	\
    (This)->lpVtbl -> get_Default(This,retval)

#define IISPropertyAttribute_put_Default(This,vDefault)	\
    (This)->lpVtbl -> put_Default(This,vDefault)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_get_PropName_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [retval][out] */ BSTR __RPC_FAR *retval);


void __RPC_STUB IISPropertyAttribute_get_PropName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_get_MetaId_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *retval);


void __RPC_STUB IISPropertyAttribute_get_MetaId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_put_MetaId_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [in] */ long lnMetaId);


void __RPC_STUB IISPropertyAttribute_put_MetaId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_get_UserType_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *retval);


void __RPC_STUB IISPropertyAttribute_get_UserType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_put_UserType_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [in] */ long lnUserType);


void __RPC_STUB IISPropertyAttribute_put_UserType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_get_AllAttributes_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *retval);


void __RPC_STUB IISPropertyAttribute_get_AllAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_get_Inherit_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval);


void __RPC_STUB IISPropertyAttribute_get_Inherit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_put_Inherit_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL fInherit);


void __RPC_STUB IISPropertyAttribute_put_Inherit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_get_Secure_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval);


void __RPC_STUB IISPropertyAttribute_get_Secure_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_put_Secure_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL fSecure);


void __RPC_STUB IISPropertyAttribute_put_Secure_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_get_Reference_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval);


void __RPC_STUB IISPropertyAttribute_get_Reference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_put_Reference_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL fReference);


void __RPC_STUB IISPropertyAttribute_put_Reference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_get_Volatile_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval);


void __RPC_STUB IISPropertyAttribute_get_Volatile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_put_Volatile_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL fVolatile);


void __RPC_STUB IISPropertyAttribute_put_Volatile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_get_Isinherit_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [retval][out] */ VARIANT_BOOL __RPC_FAR *retval);


void __RPC_STUB IISPropertyAttribute_get_Isinherit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_get_Default_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *retval);


void __RPC_STUB IISPropertyAttribute_get_Default_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IISPropertyAttribute_put_Default_Proxy( 
    IISPropertyAttribute __RPC_FAR * This,
    /* [in] */ VARIANT vDefault);


void __RPC_STUB IISPropertyAttribute_put_Default_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISPropertyAttribute_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_PropertyAttribute;

#ifdef __cplusplus

class DECLSPEC_UUID("FD2280A8-51A4-11D2-A601-3078302C2030")
PropertyAttribute;
#endif
#endif /* __IISOle_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IImgCtx.h ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright 1996-1998 Microsoft Corporation. All Rights Reserved.
//
//  File: iimgctx.h
//
//--------------------------------------------------------------------------

#ifndef _IImgCtxObjects_H_
#define _IImgCtxObjects_H_

#ifdef __cplusplus
extern "C" {
#endif
typedef void (CALLBACK *PFNIMGCTXCALLBACK)(void *, void *);
#ifdef __cplusplus
}
#endif

#define IMGCHG_SIZE         0x0001
#define IMGCHG_VIEW         0x0002
#define IMGCHG_COMPLETE     0x0004
#define IMGCHG_ANIMATE      0x0008
#define IMGCHG_MASK         0x000F

#define IMGLOAD_NOTLOADED   0x00100000  // Image has not yet been loaded
#define IMGLOAD_LOADING     0x00200000  // Image in the process of being loaded
#define IMGLOAD_STOPPED     0x00400000  // Imaged aborted
#define IMGLOAD_ERROR       0x00800000  // Error loading image
#define IMGLOAD_COMPLETE    0x01000000  // Image loaded
#define IMGLOAD_MASK        0x01F00000

#define IMGBITS_NONE        0x02000000
#define IMGBITS_PARTIAL     0x04000000
#define IMGBITS_TOTAL       0x08000000
#define IMGBITS_MASK        0x0E000000

#define IMGANIM_ANIMATED    0x10000000
#define IMGANIM_MASK        0x10000000

#define IMGTRANS_OPAQUE     0x20000000
#define IMGTRANS_MASK       0x20000000

#define DWN_COLORMODE       0x0000003F  // Explicit color mode requested
#define DWN_DOWNLOADONLY    0x00000040  // Download data only, don't decode
#define DWN_FORCEDITHER     0x00000080  // Override automatic dithering
#define DWN_RAWIMAGE        0x00000100  // Disable dithering
#define DWN_MIRRORIMAGE     0x00000200  // Mirror the image

/* Definition of interface: IImgCtx */
#undef INTERFACE
#define INTERFACE IImgCtx

// {3050f3d7-98b5-11cf-bb82-00aa00bdce0b}
DEFINE_GUID(IID_IImgCtx, 0x3050f3d7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

DECLARE_INTERFACE_(IImgCtx, IUnknown)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* IImgCtx methods */

    /* Initialization/Download methods */
    STDMETHOD(Load)(THIS_ LPCWSTR pszUrl, DWORD dwFlags) PURE;
    STDMETHOD(SelectChanges)(THIS_ ULONG ulChgOn, ULONG ulChgOff, BOOL fSignal) PURE;
    STDMETHOD(SetCallback)(THIS_ PFNIMGCTXCALLBACK pfn, void * pvPrivateData) PURE;
    STDMETHOD(Disconnect)(THIS) PURE;

        /* Query methods */
    STDMETHOD(GetUpdateRects)(THIS_ struct tagRECT FAR* prc, struct tagRECT FAR* prcImg, long FAR* pcrc) PURE;
    STDMETHOD(GetStateInfo)(THIS_ ULONG FAR* pulState, struct tagSIZE FAR* psize, BOOL fClearChanges) PURE;
    STDMETHOD(GetPalette)(THIS_ HPALETTE FAR* phpal) PURE;

    /* Rendering methods */
    STDMETHOD(Draw)(THIS_ HDC hdc, struct tagRECT FAR* prcBounds) PURE;
    STDMETHOD(Tile)(THIS_ HDC hdc, struct tagPOINT FAR* pptBackOrg, struct tagRECT FAR* prcClip, struct tagSIZE FAR* psize) PURE;
    STDMETHOD(StretchBlt)(THIS_ HDC hdc, int dstX, int dstY, int dstXE, int dstYE, int srcX, int srcY, int srcXE, int srcYE, DWORD dwROP) PURE;
};

#ifdef COBJMACROS


#define IImgCtx_QueryInterface(This,riid,ppvObject)     \
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IImgCtx_AddRef(This)    \
    (This)->lpVtbl -> AddRef(This)

#define IImgCtx_Release(This)   \
    (This)->lpVtbl -> Release(This)

#define IImgCtx_Load(This, pszUrl, dwFlags)     \
        (This)->lpVtbl -> Load(This, pszUrl, dwFlags)

#define IImgCtx_Draw(This, hdc, prcBounds)              \
        (This)->lpVtbl -> Draw(This, hdc, prcBounds)

#define IImgCtx_Tile(This, hdc, pptBackOrg, prcClip, psize)             \
        (This)->lpVtbl -> Tile(This, hdc, pptBackOrg, prcClip, psize)

#define IImgCtx_GetUpdateRects(This, prc, prcImg, pcrc) \
        (This)->lpVtbl -> GetUpdateRects(This, prc, prcImg, pcrc)

#define IImgCtx_GetStateInfo(This, pulState, psize, fClearChanges)      \
        (This)->lpVtbl -> GetStateInfo(This, pulState, psize, fClearChanges)

#define IImgCtx_GetPalette(This, phpal) \
        (This)->lpVtbl -> GetPalette(This, phpal)
        
#define IImgCtx_SelectChanges(This, ulChgOn, ulChgOff, fSignal) \
        (This)->lpVtbl -> SelectChanges(This, ulChgOn, ulChgOff, fSignal)

#define IImgCtx_SetCallback(This, pfnCallback, pvPrivateData)   \
        (This)->lpVtbl -> SetCallback(This, pfnCallback, pvPrivateData)

#define IImgCtx_Disconnect(This) \
    (This)->lpVtbl -> Disconnect(This)

#define IImgCtx_StretchBlt(This, hdc, dstX, dstY, dstXE, dstYE, srcX, srcY, srcXE, srcYE, dwROP)   \
    (This)->lpVtbl -> StretchBlt(This, hdc, dstX, dstY, dstXE, dstYE, srcX, srcY, srcXE, srcYE, dwROP)

#endif /* COBJMACROS */


// {3050f3d6-98b5-11cf-bb82-00aa00bdce0b}
DEFINE_GUID(CLSID_IImgCtx, 0x3050f3d6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\iisext_i.c ===
/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 6.00.0363 */
/* Compiler settings for iisext.odl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, LIBID_IISExt,0x2a56ea30,0xafeb,0x11d1,0x98,0x68,0x00,0xa0,0xc9,0x22,0xe7,0x03);


MIDL_DEFINE_GUID(IID, IID_IISApplicationPool,0x0B3CB1E1,0x829A,0x4c06,0x8B,0x09,0xF5,0x6D,0xA1,0x89,0x4C,0x88);


MIDL_DEFINE_GUID(IID, IID_IISApplicationPools,0x587F123F,0x49B4,0x49dd,0x93,0x9E,0xF4,0x54,0x7A,0xA3,0xFA,0x75);


MIDL_DEFINE_GUID(IID, IID_IISWebService,0xEE46D40C,0x1B38,0x4a02,0x89,0x8D,0x35,0x8E,0x74,0xDF,0xC9,0xD2);


MIDL_DEFINE_GUID(IID, IID_IISDsCrMap,0xedcd6a60,0xb053,0x11d0,0xa6,0x2f,0x00,0xa0,0xc9,0x22,0xe7,0x52);


MIDL_DEFINE_GUID(IID, IID_IISApp,0x46FBBB80,0x0192,0x11d1,0x9C,0x39,0x00,0xA0,0xC9,0x22,0xE7,0x03);


MIDL_DEFINE_GUID(IID, IID_IISApp2,0x603DCBEA,0x7350,0x11d2,0xA7,0xBE,0x00,0x00,0xF8,0x08,0x5B,0x95);


MIDL_DEFINE_GUID(IID, IID_IISApp3,0x2812B639,0x8FAC,0x4510,0x96,0xC5,0x71,0xDD,0xBD,0x1F,0x54,0xFC);


MIDL_DEFINE_GUID(IID, IID_IISComputer,0xCF87A2E0,0x078B,0x11d1,0x9C,0x3D,0x00,0xA0,0xC9,0x22,0xE7,0x03);


MIDL_DEFINE_GUID(IID, IID_IISComputer2,0x63d89839,0x5762,0x4a68,0xb1,0xb9,0x35,0x07,0xea,0x76,0xcb,0xbf);


MIDL_DEFINE_GUID(CLSID, CLSID_IISExtComputer,0x91ef9258,0xafec,0x11d1,0x98,0x68,0x00,0xa0,0xc9,0x22,0xe7,0x03);


MIDL_DEFINE_GUID(CLSID, CLSID_IISExtApp,0xb4f34438,0xafec,0x11d1,0x98,0x68,0x00,0xa0,0xc9,0x22,0xe7,0x03);


MIDL_DEFINE_GUID(CLSID, CLSID_IISExtServer,0xc3b32488,0xafec,0x11d1,0x98,0x68,0x00,0xa0,0xc9,0x22,0xe7,0x03);


MIDL_DEFINE_GUID(CLSID, CLSID_IISExtDsCrMap,0xbc36cde8,0xafeb,0x11d1,0x98,0x68,0x00,0xa0,0xc9,0x22,0xe7,0x03);


MIDL_DEFINE_GUID(CLSID, CLSID_IISExtApplicationPool,0xE99F9D0C,0xFB39,0x402b,0x9E,0xEB,0xAA,0x18,0x52,0x37,0xBD,0x34);


MIDL_DEFINE_GUID(CLSID, CLSID_IISExtApplicationPools,0x95863074,0xA389,0x406a,0xA2,0xD7,0xD9,0x8B,0xFC,0x95,0xB9,0x05);


MIDL_DEFINE_GUID(CLSID, CLSID_IISExtWebService,0x40B8F873,0xB30E,0x475d,0xBE,0xC5,0x4D,0x0E,0xBB,0x0D,0xBA,0xF3);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\iisrsta.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for iisrsta.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __iisrsta_h__
#define __iisrsta_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IIisServiceControl_FWD_DEFINED__
#define __IIisServiceControl_FWD_DEFINED__
typedef interface IIisServiceControl IIisServiceControl;
#endif 	/* __IIisServiceControl_FWD_DEFINED__ */


#ifndef __IisServiceControl_FWD_DEFINED__
#define __IisServiceControl_FWD_DEFINED__

#ifdef __cplusplus
typedef class IisServiceControl IisServiceControl;
#else
typedef struct IisServiceControl IisServiceControl;
#endif /* __cplusplus */

#endif 	/* __IisServiceControl_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_iisrsta_0000_0000 */
/* [local] */ 

DEFINE_GUID(IID_IIisServiceControl, 0xE8FB8620, 0x588F, 0x11d2, 0x9d, 0x61, 0x0,0xc0, 0x4f, 0x79, 0xc5, 0xfe);
DEFINE_GUID(CLSID_IisServiceControl, 0xE8FB8621, 0x588F, 0x11d2, 0x9d, 0x61, 0x0,0xc0, 0x4f, 0x79, 0xc5, 0xfe);
DEFINE_GUID(LIBID_IISRSTALib, 0xE8FB8614, 0x588F, 0x11d2, 0x9d, 0x61, 0x0,0xc0, 0x4f, 0x79, 0xc5, 0xfe);


extern RPC_IF_HANDLE __MIDL_itf_iisrsta_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iisrsta_0000_0000_v0_0_s_ifspec;

#ifndef __IIisServiceControl_INTERFACE_DEFINED__
#define __IIisServiceControl_INTERFACE_DEFINED__

/* interface IIisServiceControl */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IIisServiceControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E8FB8620-588F-11D2-9D61-00C04F79C5FE")
    IIisServiceControl : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Stop( 
            DWORD dwTimeoutMsecs,
            DWORD dwForce) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Start( 
            DWORD dwTimeoutMsecs) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Reboot( 
            DWORD dwTimeouMsecs,
            DWORD dwForceAppsClosed) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Status( 
            /* [in] */ DWORD dwBufferSize,
            /* [size_is][out] */ __RPC__out_ecount_full(dwBufferSize) unsigned char *pbBuffer,
            /* [out] */ __RPC__out DWORD *pdwMDRequiredBufferSize,
            /* [out] */ __RPC__out DWORD *pdwNumServices) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Kill( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IIisServiceControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IIisServiceControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IIisServiceControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IIisServiceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IIisServiceControl * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IIisServiceControl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IIisServiceControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IIisServiceControl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            __RPC__in IIisServiceControl * This,
            DWORD dwTimeoutMsecs,
            DWORD dwForce);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            __RPC__in IIisServiceControl * This,
            DWORD dwTimeoutMsecs);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reboot )( 
            __RPC__in IIisServiceControl * This,
            DWORD dwTimeouMsecs,
            DWORD dwForceAppsClosed);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Status )( 
            __RPC__in IIisServiceControl * This,
            /* [in] */ DWORD dwBufferSize,
            /* [size_is][out] */ __RPC__out_ecount_full(dwBufferSize) unsigned char *pbBuffer,
            /* [out] */ __RPC__out DWORD *pdwMDRequiredBufferSize,
            /* [out] */ __RPC__out DWORD *pdwNumServices);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Kill )( 
            __RPC__in IIisServiceControl * This);
        
        END_INTERFACE
    } IIisServiceControlVtbl;

    interface IIisServiceControl
    {
        CONST_VTBL struct IIisServiceControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IIisServiceControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IIisServiceControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IIisServiceControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IIisServiceControl_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IIisServiceControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IIisServiceControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IIisServiceControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IIisServiceControl_Stop(This,dwTimeoutMsecs,dwForce)	\
    ( (This)->lpVtbl -> Stop(This,dwTimeoutMsecs,dwForce) ) 

#define IIisServiceControl_Start(This,dwTimeoutMsecs)	\
    ( (This)->lpVtbl -> Start(This,dwTimeoutMsecs) ) 

#define IIisServiceControl_Reboot(This,dwTimeouMsecs,dwForceAppsClosed)	\
    ( (This)->lpVtbl -> Reboot(This,dwTimeouMsecs,dwForceAppsClosed) ) 

#define IIisServiceControl_Status(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize,pdwNumServices)	\
    ( (This)->lpVtbl -> Status(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize,pdwNumServices) ) 

#define IIisServiceControl_Kill(This)	\
    ( (This)->lpVtbl -> Kill(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IIisServiceControl_INTERFACE_DEFINED__ */



#ifndef __IISRSTALib_LIBRARY_DEFINED__
#define __IISRSTALib_LIBRARY_DEFINED__

/* library IISRSTALib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_IISRSTALib;

EXTERN_C const CLSID CLSID_IisServiceControl;

#ifdef __cplusplus

class DECLSPEC_UUID("E8FB8621-588F-11D2-9D61-00C04F79C5FE")
IisServiceControl;
#endif
#endif /* __IISRSTALib_LIBRARY_DEFINED__ */

/* interface __MIDL_itf_iisrsta_0000_0001 */
/* [local] */ 

typedef struct {
DWORD iServiceName;
DWORD iDisplayName;
SERVICE_STATUS ServiceStatus;
} SERIALIZED_ENUM_SERVICE_STATUS;


extern RPC_IF_HANDLE __MIDL_itf_iisrsta_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iisrsta_0000_0001_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\iiisext.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0363 */
/* Compiler settings for iisext.odl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __iiisext_h__
#define __iiisext_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IISApplicationPool_FWD_DEFINED__
#define __IISApplicationPool_FWD_DEFINED__
typedef interface IISApplicationPool IISApplicationPool;
#endif 	/* __IISApplicationPool_FWD_DEFINED__ */


#ifndef __IISApplicationPools_FWD_DEFINED__
#define __IISApplicationPools_FWD_DEFINED__
typedef interface IISApplicationPools IISApplicationPools;
#endif 	/* __IISApplicationPools_FWD_DEFINED__ */


#ifndef __IISWebService_FWD_DEFINED__
#define __IISWebService_FWD_DEFINED__
typedef interface IISWebService IISWebService;
#endif 	/* __IISWebService_FWD_DEFINED__ */


#ifndef __IISDsCrMap_FWD_DEFINED__
#define __IISDsCrMap_FWD_DEFINED__
typedef interface IISDsCrMap IISDsCrMap;
#endif 	/* __IISDsCrMap_FWD_DEFINED__ */


#ifndef __IISApp_FWD_DEFINED__
#define __IISApp_FWD_DEFINED__
typedef interface IISApp IISApp;
#endif 	/* __IISApp_FWD_DEFINED__ */


#ifndef __IISApp2_FWD_DEFINED__
#define __IISApp2_FWD_DEFINED__
typedef interface IISApp2 IISApp2;
#endif 	/* __IISApp2_FWD_DEFINED__ */


#ifndef __IISApp3_FWD_DEFINED__
#define __IISApp3_FWD_DEFINED__
typedef interface IISApp3 IISApp3;
#endif 	/* __IISApp3_FWD_DEFINED__ */


#ifndef __IISComputer_FWD_DEFINED__
#define __IISComputer_FWD_DEFINED__
typedef interface IISComputer IISComputer;
#endif 	/* __IISComputer_FWD_DEFINED__ */


#ifndef __IISComputer2_FWD_DEFINED__
#define __IISComputer2_FWD_DEFINED__
typedef interface IISComputer2 IISComputer2;
#endif 	/* __IISComputer2_FWD_DEFINED__ */


#ifndef __IISExtComputer_FWD_DEFINED__
#define __IISExtComputer_FWD_DEFINED__

#ifdef __cplusplus
typedef class IISExtComputer IISExtComputer;
#else
typedef struct IISExtComputer IISExtComputer;
#endif /* __cplusplus */

#endif 	/* __IISExtComputer_FWD_DEFINED__ */


#ifndef __IISExtApp_FWD_DEFINED__
#define __IISExtApp_FWD_DEFINED__

#ifdef __cplusplus
typedef class IISExtApp IISExtApp;
#else
typedef struct IISExtApp IISExtApp;
#endif /* __cplusplus */

#endif 	/* __IISExtApp_FWD_DEFINED__ */


#ifndef __IISExtServer_FWD_DEFINED__
#define __IISExtServer_FWD_DEFINED__

#ifdef __cplusplus
typedef class IISExtServer IISExtServer;
#else
typedef struct IISExtServer IISExtServer;
#endif /* __cplusplus */

#endif 	/* __IISExtServer_FWD_DEFINED__ */


#ifndef __IISExtDsCrMap_FWD_DEFINED__
#define __IISExtDsCrMap_FWD_DEFINED__

#ifdef __cplusplus
typedef class IISExtDsCrMap IISExtDsCrMap;
#else
typedef struct IISExtDsCrMap IISExtDsCrMap;
#endif /* __cplusplus */

#endif 	/* __IISExtDsCrMap_FWD_DEFINED__ */


#ifndef __IISExtApplicationPool_FWD_DEFINED__
#define __IISExtApplicationPool_FWD_DEFINED__

#ifdef __cplusplus
typedef class IISExtApplicationPool IISExtApplicationPool;
#else
typedef struct IISExtApplicationPool IISExtApplicationPool;
#endif /* __cplusplus */

#endif 	/* __IISExtApplicationPool_FWD_DEFINED__ */


#ifndef __IISExtApplicationPools_FWD_DEFINED__
#define __IISExtApplicationPools_FWD_DEFINED__

#ifdef __cplusplus
typedef class IISExtApplicationPools IISExtApplicationPools;
#else
typedef struct IISExtApplicationPools IISExtApplicationPools;
#endif /* __cplusplus */

#endif 	/* __IISExtApplicationPools_FWD_DEFINED__ */


#ifndef __IISExtWebService_FWD_DEFINED__
#define __IISExtWebService_FWD_DEFINED__

#ifdef __cplusplus
typedef class IISExtWebService IISExtWebService;
#else
typedef struct IISExtWebService IISExtWebService;
#endif /* __cplusplus */

#endif 	/* __IISExtWebService_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 


#ifndef __IISExt_LIBRARY_DEFINED__
#define __IISExt_LIBRARY_DEFINED__

/* library IISExt */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_IISExt;

#ifndef __IISApplicationPool_INTERFACE_DEFINED__
#define __IISApplicationPool_INTERFACE_DEFINED__

/* interface IISApplicationPool */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISApplicationPool;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0B3CB1E1-829A-4c06-8B09-F56DA1894C88")
    IISApplicationPool : public IADs
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Recycle( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumAppsInPool( 
            /* [retval][out] */ VARIANT *bstrBuffer) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Start( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISApplicationPoolVtbl
    {
        BEGIN_INTERFACE
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IISApplicationPool * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [out][idldescattr] */ void **ppvObj,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *AddRef )( 
            IISApplicationPool * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Release )( 
            IISApplicationPool * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IISApplicationPool * This,
            /* [out][idldescattr] */ unsigned UINT *pctinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IISApplicationPool * This,
            /* [in][idldescattr] */ unsigned UINT itinfo,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ void **pptinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IISApplicationPool * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ signed char **rgszNames,
            /* [in][idldescattr] */ unsigned UINT cNames,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ signed long *rgdispid,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IISApplicationPool * This,
            /* [in][idldescattr] */ signed long dispidMember,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [in][idldescattr] */ unsigned short wFlags,
            /* [in][idldescattr] */ struct DISPPARAMS *pdispparams,
            /* [out][idldescattr] */ VARIANT *pvarResult,
            /* [out][idldescattr] */ struct EXCEPINFO *pexcepinfo,
            /* [out][idldescattr] */ unsigned UINT *puArgErr,
            /* [retval][out] */ void *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IISApplicationPool * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IISApplicationPool * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IISApplicationPool * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IISApplicationPool * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IISApplicationPool * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IISApplicationPool * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IISApplicationPool * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IISApplicationPool * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IISApplicationPool * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IISApplicationPool * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IISApplicationPool * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IISApplicationPool * This,
            /* [in][idldescattr] */ signed long lnControlCode,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IISApplicationPool * This,
            /* [in][idldescattr] */ VARIANT vProperties,
            /* [in][idldescattr] */ signed long lnReserved,
            /* [retval][out] */ void *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Recycle )( 
            IISApplicationPool * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumAppsInPool )( 
            IISApplicationPool * This,
            /* [retval][out] */ VARIANT *bstrBuffer);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IISApplicationPool * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IISApplicationPool * This);
        
        END_INTERFACE
    } IISApplicationPoolVtbl;

    interface IISApplicationPool
    {
        CONST_VTBL struct IISApplicationPoolVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISApplicationPool_QueryInterface(This,riid,ppvObj,retval)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObj,retval)

#define IISApplicationPool_AddRef(This,retval)	\
    (This)->lpVtbl -> AddRef(This,retval)

#define IISApplicationPool_Release(This,retval)	\
    (This)->lpVtbl -> Release(This,retval)

#define IISApplicationPool_GetTypeInfoCount(This,pctinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo,retval)

#define IISApplicationPool_GetTypeInfo(This,itinfo,lcid,pptinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfo(This,itinfo,lcid,pptinfo,retval)

#define IISApplicationPool_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)

#define IISApplicationPool_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)	\
    (This)->lpVtbl -> Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)

#define IISApplicationPool_get_Name(This,retval)	\
    (This)->lpVtbl -> get_Name(This,retval)

#define IISApplicationPool_get_Class(This,retval)	\
    (This)->lpVtbl -> get_Class(This,retval)

#define IISApplicationPool_get_GUID(This,retval)	\
    (This)->lpVtbl -> get_GUID(This,retval)

#define IISApplicationPool_get_ADsPath(This,retval)	\
    (This)->lpVtbl -> get_ADsPath(This,retval)

#define IISApplicationPool_get_Parent(This,retval)	\
    (This)->lpVtbl -> get_Parent(This,retval)

#define IISApplicationPool_get_Schema(This,retval)	\
    (This)->lpVtbl -> get_Schema(This,retval)

#define IISApplicationPool_GetInfo(This,retval)	\
    (This)->lpVtbl -> GetInfo(This,retval)

#define IISApplicationPool_SetInfo(This,retval)	\
    (This)->lpVtbl -> SetInfo(This,retval)

#define IISApplicationPool_Get(This,bstrName,retval)	\
    (This)->lpVtbl -> Get(This,bstrName,retval)

#define IISApplicationPool_Put(This,bstrName,vProp,retval)	\
    (This)->lpVtbl -> Put(This,bstrName,vProp,retval)

#define IISApplicationPool_GetEx(This,bstrName,retval)	\
    (This)->lpVtbl -> GetEx(This,bstrName,retval)

#define IISApplicationPool_PutEx(This,lnControlCode,bstrName,vProp,retval)	\
    (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp,retval)

#define IISApplicationPool_GetInfoEx(This,vProperties,lnReserved,retval)	\
    (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved,retval)


#define IISApplicationPool_Recycle(This)	\
    (This)->lpVtbl -> Recycle(This)

#define IISApplicationPool_EnumAppsInPool(This,bstrBuffer)	\
    (This)->lpVtbl -> EnumAppsInPool(This,bstrBuffer)

#define IISApplicationPool_Start(This)	\
    (This)->lpVtbl -> Start(This)

#define IISApplicationPool_Stop(This)	\
    (This)->lpVtbl -> Stop(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IISApplicationPool_Recycle_Proxy( 
    IISApplicationPool * This);


void __RPC_STUB IISApplicationPool_Recycle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApplicationPool_EnumAppsInPool_Proxy( 
    IISApplicationPool * This,
    /* [retval][out] */ VARIANT *bstrBuffer);


void __RPC_STUB IISApplicationPool_EnumAppsInPool_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApplicationPool_Start_Proxy( 
    IISApplicationPool * This);


void __RPC_STUB IISApplicationPool_Start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApplicationPool_Stop_Proxy( 
    IISApplicationPool * This);


void __RPC_STUB IISApplicationPool_Stop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISApplicationPool_INTERFACE_DEFINED__ */


#ifndef __IISApplicationPools_INTERFACE_DEFINED__
#define __IISApplicationPools_INTERFACE_DEFINED__

/* interface IISApplicationPools */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISApplicationPools;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("587F123F-49B4-49dd-939E-F4547AA3FA75")
    IISApplicationPools : public IADs
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IISApplicationPoolsVtbl
    {
        BEGIN_INTERFACE
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IISApplicationPools * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [out][idldescattr] */ void **ppvObj,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *AddRef )( 
            IISApplicationPools * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Release )( 
            IISApplicationPools * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IISApplicationPools * This,
            /* [out][idldescattr] */ unsigned UINT *pctinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IISApplicationPools * This,
            /* [in][idldescattr] */ unsigned UINT itinfo,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ void **pptinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IISApplicationPools * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ signed char **rgszNames,
            /* [in][idldescattr] */ unsigned UINT cNames,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ signed long *rgdispid,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IISApplicationPools * This,
            /* [in][idldescattr] */ signed long dispidMember,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [in][idldescattr] */ unsigned short wFlags,
            /* [in][idldescattr] */ struct DISPPARAMS *pdispparams,
            /* [out][idldescattr] */ VARIANT *pvarResult,
            /* [out][idldescattr] */ struct EXCEPINFO *pexcepinfo,
            /* [out][idldescattr] */ unsigned UINT *puArgErr,
            /* [retval][out] */ void *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IISApplicationPools * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IISApplicationPools * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IISApplicationPools * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IISApplicationPools * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IISApplicationPools * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IISApplicationPools * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IISApplicationPools * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IISApplicationPools * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IISApplicationPools * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IISApplicationPools * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IISApplicationPools * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IISApplicationPools * This,
            /* [in][idldescattr] */ signed long lnControlCode,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IISApplicationPools * This,
            /* [in][idldescattr] */ VARIANT vProperties,
            /* [in][idldescattr] */ signed long lnReserved,
            /* [retval][out] */ void *retval);
        
        END_INTERFACE
    } IISApplicationPoolsVtbl;

    interface IISApplicationPools
    {
        CONST_VTBL struct IISApplicationPoolsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISApplicationPools_QueryInterface(This,riid,ppvObj,retval)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObj,retval)

#define IISApplicationPools_AddRef(This,retval)	\
    (This)->lpVtbl -> AddRef(This,retval)

#define IISApplicationPools_Release(This,retval)	\
    (This)->lpVtbl -> Release(This,retval)

#define IISApplicationPools_GetTypeInfoCount(This,pctinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo,retval)

#define IISApplicationPools_GetTypeInfo(This,itinfo,lcid,pptinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfo(This,itinfo,lcid,pptinfo,retval)

#define IISApplicationPools_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)

#define IISApplicationPools_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)	\
    (This)->lpVtbl -> Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)

#define IISApplicationPools_get_Name(This,retval)	\
    (This)->lpVtbl -> get_Name(This,retval)

#define IISApplicationPools_get_Class(This,retval)	\
    (This)->lpVtbl -> get_Class(This,retval)

#define IISApplicationPools_get_GUID(This,retval)	\
    (This)->lpVtbl -> get_GUID(This,retval)

#define IISApplicationPools_get_ADsPath(This,retval)	\
    (This)->lpVtbl -> get_ADsPath(This,retval)

#define IISApplicationPools_get_Parent(This,retval)	\
    (This)->lpVtbl -> get_Parent(This,retval)

#define IISApplicationPools_get_Schema(This,retval)	\
    (This)->lpVtbl -> get_Schema(This,retval)

#define IISApplicationPools_GetInfo(This,retval)	\
    (This)->lpVtbl -> GetInfo(This,retval)

#define IISApplicationPools_SetInfo(This,retval)	\
    (This)->lpVtbl -> SetInfo(This,retval)

#define IISApplicationPools_Get(This,bstrName,retval)	\
    (This)->lpVtbl -> Get(This,bstrName,retval)

#define IISApplicationPools_Put(This,bstrName,vProp,retval)	\
    (This)->lpVtbl -> Put(This,bstrName,vProp,retval)

#define IISApplicationPools_GetEx(This,bstrName,retval)	\
    (This)->lpVtbl -> GetEx(This,bstrName,retval)

#define IISApplicationPools_PutEx(This,lnControlCode,bstrName,vProp,retval)	\
    (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp,retval)

#define IISApplicationPools_GetInfoEx(This,vProperties,lnReserved,retval)	\
    (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved,retval)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IISApplicationPools_INTERFACE_DEFINED__ */


#ifndef __IISWebService_INTERFACE_DEFINED__
#define __IISWebService_INTERFACE_DEFINED__

/* interface IISWebService */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISWebService;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EE46D40C-1B38-4a02-898D-358E74DFC9D2")
    IISWebService : public IADs
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetCurrentMode( 
            /* [retval][out] */ VARIANT *pvServerMode) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CreateNewSite( 
            /* [in] */ BSTR bstrServerComment,
            /* [in] */ VARIANT *pvServerBindings,
            /* [in] */ BSTR bstrRootVDirPath,
            /* [defaultvalue][in] */ VARIANT vServerID,
            /* [retval][out] */ VARIANT *pvActualID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnableApplication( 
            /* [in] */ BSTR bstrAppName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveApplication( 
            /* [in] */ BSTR bstrAppName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ListApplications( 
            /* [retval][out] */ VARIANT *bstrBuffer) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddDependency( 
            /* [in] */ BSTR bstrApplication,
            /* [in] */ BSTR bstrGroupID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RemoveDependency( 
            /* [in] */ BSTR bstrApplication,
            /* [in] */ BSTR bstrGroupID) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnableWebServiceExtension( 
            /* [in] */ BSTR bstrExtension) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisableWebServiceExtension( 
            /* [in] */ BSTR bstrExtension) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ListWebServiceExtensions( 
            /* [retval][out] */ VARIANT *bstrBuffer) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnableExtensionFile( 
            /* [in] */ BSTR bstrExtensionFile) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisableExtensionFile( 
            /* [in] */ BSTR bstrExtensionFile) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AddExtensionFile( 
            /* [in] */ BSTR bstrExtensionFile,
            /* [in] */ VARIANT bAccess,
            /* [in] */ BSTR bstrGroupID,
            /* [in] */ VARIANT bCanDelete,
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DeleteExtensionFileRecord( 
            /* [in] */ BSTR bstrExtensionFile) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ListExtensionFiles( 
            /* [retval][out] */ VARIANT *bstrBuffer) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE QueryGroupIDStatus( 
            /* [in] */ BSTR bstrGroupID,
            /* [retval][out] */ VARIANT *bstrBuffer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISWebServiceVtbl
    {
        BEGIN_INTERFACE
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IISWebService * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [out][idldescattr] */ void **ppvObj,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *AddRef )( 
            IISWebService * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Release )( 
            IISWebService * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IISWebService * This,
            /* [out][idldescattr] */ unsigned UINT *pctinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IISWebService * This,
            /* [in][idldescattr] */ unsigned UINT itinfo,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ void **pptinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IISWebService * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ signed char **rgszNames,
            /* [in][idldescattr] */ unsigned UINT cNames,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ signed long *rgdispid,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IISWebService * This,
            /* [in][idldescattr] */ signed long dispidMember,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [in][idldescattr] */ unsigned short wFlags,
            /* [in][idldescattr] */ struct DISPPARAMS *pdispparams,
            /* [out][idldescattr] */ VARIANT *pvarResult,
            /* [out][idldescattr] */ struct EXCEPINFO *pexcepinfo,
            /* [out][idldescattr] */ unsigned UINT *puArgErr,
            /* [retval][out] */ void *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IISWebService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IISWebService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IISWebService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IISWebService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IISWebService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IISWebService * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IISWebService * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IISWebService * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IISWebService * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IISWebService * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IISWebService * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IISWebService * This,
            /* [in][idldescattr] */ signed long lnControlCode,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IISWebService * This,
            /* [in][idldescattr] */ VARIANT vProperties,
            /* [in][idldescattr] */ signed long lnReserved,
            /* [retval][out] */ void *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetCurrentMode )( 
            IISWebService * This,
            /* [retval][out] */ VARIANT *pvServerMode);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateNewSite )( 
            IISWebService * This,
            /* [in] */ BSTR bstrServerComment,
            /* [in] */ VARIANT *pvServerBindings,
            /* [in] */ BSTR bstrRootVDirPath,
            /* [defaultvalue][in] */ VARIANT vServerID,
            /* [retval][out] */ VARIANT *pvActualID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnableApplication )( 
            IISWebService * This,
            /* [in] */ BSTR bstrAppName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveApplication )( 
            IISWebService * This,
            /* [in] */ BSTR bstrAppName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ListApplications )( 
            IISWebService * This,
            /* [retval][out] */ VARIANT *bstrBuffer);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddDependency )( 
            IISWebService * This,
            /* [in] */ BSTR bstrApplication,
            /* [in] */ BSTR bstrGroupID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RemoveDependency )( 
            IISWebService * This,
            /* [in] */ BSTR bstrApplication,
            /* [in] */ BSTR bstrGroupID);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnableWebServiceExtension )( 
            IISWebService * This,
            /* [in] */ BSTR bstrExtension);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisableWebServiceExtension )( 
            IISWebService * This,
            /* [in] */ BSTR bstrExtension);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ListWebServiceExtensions )( 
            IISWebService * This,
            /* [retval][out] */ VARIANT *bstrBuffer);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnableExtensionFile )( 
            IISWebService * This,
            /* [in] */ BSTR bstrExtensionFile);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisableExtensionFile )( 
            IISWebService * This,
            /* [in] */ BSTR bstrExtensionFile);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AddExtensionFile )( 
            IISWebService * This,
            /* [in] */ BSTR bstrExtensionFile,
            /* [in] */ VARIANT bAccess,
            /* [in] */ BSTR bstrGroupID,
            /* [in] */ VARIANT bCanDelete,
            /* [in] */ BSTR bstrDescription);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DeleteExtensionFileRecord )( 
            IISWebService * This,
            /* [in] */ BSTR bstrExtensionFile);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ListExtensionFiles )( 
            IISWebService * This,
            /* [retval][out] */ VARIANT *bstrBuffer);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *QueryGroupIDStatus )( 
            IISWebService * This,
            /* [in] */ BSTR bstrGroupID,
            /* [retval][out] */ VARIANT *bstrBuffer);
        
        END_INTERFACE
    } IISWebServiceVtbl;

    interface IISWebService
    {
        CONST_VTBL struct IISWebServiceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISWebService_QueryInterface(This,riid,ppvObj,retval)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObj,retval)

#define IISWebService_AddRef(This,retval)	\
    (This)->lpVtbl -> AddRef(This,retval)

#define IISWebService_Release(This,retval)	\
    (This)->lpVtbl -> Release(This,retval)

#define IISWebService_GetTypeInfoCount(This,pctinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo,retval)

#define IISWebService_GetTypeInfo(This,itinfo,lcid,pptinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfo(This,itinfo,lcid,pptinfo,retval)

#define IISWebService_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)

#define IISWebService_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)	\
    (This)->lpVtbl -> Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)

#define IISWebService_get_Name(This,retval)	\
    (This)->lpVtbl -> get_Name(This,retval)

#define IISWebService_get_Class(This,retval)	\
    (This)->lpVtbl -> get_Class(This,retval)

#define IISWebService_get_GUID(This,retval)	\
    (This)->lpVtbl -> get_GUID(This,retval)

#define IISWebService_get_ADsPath(This,retval)	\
    (This)->lpVtbl -> get_ADsPath(This,retval)

#define IISWebService_get_Parent(This,retval)	\
    (This)->lpVtbl -> get_Parent(This,retval)

#define IISWebService_get_Schema(This,retval)	\
    (This)->lpVtbl -> get_Schema(This,retval)

#define IISWebService_GetInfo(This,retval)	\
    (This)->lpVtbl -> GetInfo(This,retval)

#define IISWebService_SetInfo(This,retval)	\
    (This)->lpVtbl -> SetInfo(This,retval)

#define IISWebService_Get(This,bstrName,retval)	\
    (This)->lpVtbl -> Get(This,bstrName,retval)

#define IISWebService_Put(This,bstrName,vProp,retval)	\
    (This)->lpVtbl -> Put(This,bstrName,vProp,retval)

#define IISWebService_GetEx(This,bstrName,retval)	\
    (This)->lpVtbl -> GetEx(This,bstrName,retval)

#define IISWebService_PutEx(This,lnControlCode,bstrName,vProp,retval)	\
    (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp,retval)

#define IISWebService_GetInfoEx(This,vProperties,lnReserved,retval)	\
    (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved,retval)


#define IISWebService_GetCurrentMode(This,pvServerMode)	\
    (This)->lpVtbl -> GetCurrentMode(This,pvServerMode)

#define IISWebService_CreateNewSite(This,bstrServerComment,pvServerBindings,bstrRootVDirPath,vServerID,pvActualID)	\
    (This)->lpVtbl -> CreateNewSite(This,bstrServerComment,pvServerBindings,bstrRootVDirPath,vServerID,pvActualID)

#define IISWebService_EnableApplication(This,bstrAppName)	\
    (This)->lpVtbl -> EnableApplication(This,bstrAppName)

#define IISWebService_RemoveApplication(This,bstrAppName)	\
    (This)->lpVtbl -> RemoveApplication(This,bstrAppName)

#define IISWebService_ListApplications(This,bstrBuffer)	\
    (This)->lpVtbl -> ListApplications(This,bstrBuffer)

#define IISWebService_AddDependency(This,bstrApplication,bstrGroupID)	\
    (This)->lpVtbl -> AddDependency(This,bstrApplication,bstrGroupID)

#define IISWebService_RemoveDependency(This,bstrApplication,bstrGroupID)	\
    (This)->lpVtbl -> RemoveDependency(This,bstrApplication,bstrGroupID)

#define IISWebService_EnableWebServiceExtension(This,bstrExtension)	\
    (This)->lpVtbl -> EnableWebServiceExtension(This,bstrExtension)

#define IISWebService_DisableWebServiceExtension(This,bstrExtension)	\
    (This)->lpVtbl -> DisableWebServiceExtension(This,bstrExtension)

#define IISWebService_ListWebServiceExtensions(This,bstrBuffer)	\
    (This)->lpVtbl -> ListWebServiceExtensions(This,bstrBuffer)

#define IISWebService_EnableExtensionFile(This,bstrExtensionFile)	\
    (This)->lpVtbl -> EnableExtensionFile(This,bstrExtensionFile)

#define IISWebService_DisableExtensionFile(This,bstrExtensionFile)	\
    (This)->lpVtbl -> DisableExtensionFile(This,bstrExtensionFile)

#define IISWebService_AddExtensionFile(This,bstrExtensionFile,bAccess,bstrGroupID,bCanDelete,bstrDescription)	\
    (This)->lpVtbl -> AddExtensionFile(This,bstrExtensionFile,bAccess,bstrGroupID,bCanDelete,bstrDescription)

#define IISWebService_DeleteExtensionFileRecord(This,bstrExtensionFile)	\
    (This)->lpVtbl -> DeleteExtensionFileRecord(This,bstrExtensionFile)

#define IISWebService_ListExtensionFiles(This,bstrBuffer)	\
    (This)->lpVtbl -> ListExtensionFiles(This,bstrBuffer)

#define IISWebService_QueryGroupIDStatus(This,bstrGroupID,bstrBuffer)	\
    (This)->lpVtbl -> QueryGroupIDStatus(This,bstrGroupID,bstrBuffer)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_GetCurrentMode_Proxy( 
    IISWebService * This,
    /* [retval][out] */ VARIANT *pvServerMode);


void __RPC_STUB IISWebService_GetCurrentMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_CreateNewSite_Proxy( 
    IISWebService * This,
    /* [in] */ BSTR bstrServerComment,
    /* [in] */ VARIANT *pvServerBindings,
    /* [in] */ BSTR bstrRootVDirPath,
    /* [defaultvalue][in] */ VARIANT vServerID,
    /* [retval][out] */ VARIANT *pvActualID);


void __RPC_STUB IISWebService_CreateNewSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_EnableApplication_Proxy( 
    IISWebService * This,
    /* [in] */ BSTR bstrAppName);


void __RPC_STUB IISWebService_EnableApplication_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_RemoveApplication_Proxy( 
    IISWebService * This,
    /* [in] */ BSTR bstrAppName);


void __RPC_STUB IISWebService_RemoveApplication_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_ListApplications_Proxy( 
    IISWebService * This,
    /* [retval][out] */ VARIANT *bstrBuffer);


void __RPC_STUB IISWebService_ListApplications_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_AddDependency_Proxy( 
    IISWebService * This,
    /* [in] */ BSTR bstrApplication,
    /* [in] */ BSTR bstrGroupID);


void __RPC_STUB IISWebService_AddDependency_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_RemoveDependency_Proxy( 
    IISWebService * This,
    /* [in] */ BSTR bstrApplication,
    /* [in] */ BSTR bstrGroupID);


void __RPC_STUB IISWebService_RemoveDependency_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_EnableWebServiceExtension_Proxy( 
    IISWebService * This,
    /* [in] */ BSTR bstrExtension);


void __RPC_STUB IISWebService_EnableWebServiceExtension_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_DisableWebServiceExtension_Proxy( 
    IISWebService * This,
    /* [in] */ BSTR bstrExtension);


void __RPC_STUB IISWebService_DisableWebServiceExtension_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_ListWebServiceExtensions_Proxy( 
    IISWebService * This,
    /* [retval][out] */ VARIANT *bstrBuffer);


void __RPC_STUB IISWebService_ListWebServiceExtensions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_EnableExtensionFile_Proxy( 
    IISWebService * This,
    /* [in] */ BSTR bstrExtensionFile);


void __RPC_STUB IISWebService_EnableExtensionFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_DisableExtensionFile_Proxy( 
    IISWebService * This,
    /* [in] */ BSTR bstrExtensionFile);


void __RPC_STUB IISWebService_DisableExtensionFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_AddExtensionFile_Proxy( 
    IISWebService * This,
    /* [in] */ BSTR bstrExtensionFile,
    /* [in] */ VARIANT bAccess,
    /* [in] */ BSTR bstrGroupID,
    /* [in] */ VARIANT bCanDelete,
    /* [in] */ BSTR bstrDescription);


void __RPC_STUB IISWebService_AddExtensionFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_DeleteExtensionFileRecord_Proxy( 
    IISWebService * This,
    /* [in] */ BSTR bstrExtensionFile);


void __RPC_STUB IISWebService_DeleteExtensionFileRecord_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_ListExtensionFiles_Proxy( 
    IISWebService * This,
    /* [retval][out] */ VARIANT *bstrBuffer);


void __RPC_STUB IISWebService_ListExtensionFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISWebService_QueryGroupIDStatus_Proxy( 
    IISWebService * This,
    /* [in] */ BSTR bstrGroupID,
    /* [retval][out] */ VARIANT *bstrBuffer);


void __RPC_STUB IISWebService_QueryGroupIDStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISWebService_INTERFACE_DEFINED__ */


#ifndef __IISDsCrMap_INTERFACE_DEFINED__
#define __IISDsCrMap_INTERFACE_DEFINED__

/* interface IISDsCrMap */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISDsCrMap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("edcd6a60-b053-11d0-a62f-00a0c922e752")
    IISDsCrMap : public IADs
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CreateMapping( 
            /* [in] */ VARIANT vCert,
            /* [in] */ BSTR bstrNtAcct,
            /* [in] */ BSTR bstrNtPwd,
            /* [in] */ BSTR bstrName,
            /* [in] */ LONG lEnabled) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetMapping( 
            /* [in] */ LONG lMethod,
            /* [in] */ VARIANT vKey,
            /* [out] */ VARIANT *pvCert,
            /* [out] */ VARIANT *pbstrNtAcct,
            /* [out] */ VARIANT *pbstrNtPwd,
            /* [out] */ VARIANT *pbstrName,
            /* [out] */ VARIANT *plEnabled) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DeleteMapping( 
            /* [in] */ LONG lMethod,
            /* [in] */ VARIANT vKey) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetEnabled( 
            /* [in] */ LONG lMethod,
            /* [in] */ VARIANT vKey,
            /* [in] */ LONG lEnabled) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetName( 
            /* [in] */ LONG lMethod,
            /* [in] */ VARIANT vKey,
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetPwd( 
            /* [in] */ LONG lMethod,
            /* [in] */ VARIANT vKey,
            /* [in] */ BSTR bstrPwd) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetAcct( 
            /* [in] */ LONG lMethod,
            /* [in] */ VARIANT vKey,
            /* [in] */ BSTR bstrAcct) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISDsCrMapVtbl
    {
        BEGIN_INTERFACE
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IISDsCrMap * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [out][idldescattr] */ void **ppvObj,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *AddRef )( 
            IISDsCrMap * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Release )( 
            IISDsCrMap * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IISDsCrMap * This,
            /* [out][idldescattr] */ unsigned UINT *pctinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IISDsCrMap * This,
            /* [in][idldescattr] */ unsigned UINT itinfo,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ void **pptinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IISDsCrMap * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ signed char **rgszNames,
            /* [in][idldescattr] */ unsigned UINT cNames,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ signed long *rgdispid,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IISDsCrMap * This,
            /* [in][idldescattr] */ signed long dispidMember,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [in][idldescattr] */ unsigned short wFlags,
            /* [in][idldescattr] */ struct DISPPARAMS *pdispparams,
            /* [out][idldescattr] */ VARIANT *pvarResult,
            /* [out][idldescattr] */ struct EXCEPINFO *pexcepinfo,
            /* [out][idldescattr] */ unsigned UINT *puArgErr,
            /* [retval][out] */ void *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IISDsCrMap * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IISDsCrMap * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IISDsCrMap * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IISDsCrMap * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IISDsCrMap * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IISDsCrMap * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IISDsCrMap * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IISDsCrMap * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IISDsCrMap * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IISDsCrMap * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IISDsCrMap * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IISDsCrMap * This,
            /* [in][idldescattr] */ signed long lnControlCode,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IISDsCrMap * This,
            /* [in][idldescattr] */ VARIANT vProperties,
            /* [in][idldescattr] */ signed long lnReserved,
            /* [retval][out] */ void *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CreateMapping )( 
            IISDsCrMap * This,
            /* [in] */ VARIANT vCert,
            /* [in] */ BSTR bstrNtAcct,
            /* [in] */ BSTR bstrNtPwd,
            /* [in] */ BSTR bstrName,
            /* [in] */ LONG lEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetMapping )( 
            IISDsCrMap * This,
            /* [in] */ LONG lMethod,
            /* [in] */ VARIANT vKey,
            /* [out] */ VARIANT *pvCert,
            /* [out] */ VARIANT *pbstrNtAcct,
            /* [out] */ VARIANT *pbstrNtPwd,
            /* [out] */ VARIANT *pbstrName,
            /* [out] */ VARIANT *plEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DeleteMapping )( 
            IISDsCrMap * This,
            /* [in] */ LONG lMethod,
            /* [in] */ VARIANT vKey);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetEnabled )( 
            IISDsCrMap * This,
            /* [in] */ LONG lMethod,
            /* [in] */ VARIANT vKey,
            /* [in] */ LONG lEnabled);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IISDsCrMap * This,
            /* [in] */ LONG lMethod,
            /* [in] */ VARIANT vKey,
            /* [in] */ BSTR bstrName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetPwd )( 
            IISDsCrMap * This,
            /* [in] */ LONG lMethod,
            /* [in] */ VARIANT vKey,
            /* [in] */ BSTR bstrPwd);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetAcct )( 
            IISDsCrMap * This,
            /* [in] */ LONG lMethod,
            /* [in] */ VARIANT vKey,
            /* [in] */ BSTR bstrAcct);
        
        END_INTERFACE
    } IISDsCrMapVtbl;

    interface IISDsCrMap
    {
        CONST_VTBL struct IISDsCrMapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISDsCrMap_QueryInterface(This,riid,ppvObj,retval)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObj,retval)

#define IISDsCrMap_AddRef(This,retval)	\
    (This)->lpVtbl -> AddRef(This,retval)

#define IISDsCrMap_Release(This,retval)	\
    (This)->lpVtbl -> Release(This,retval)

#define IISDsCrMap_GetTypeInfoCount(This,pctinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo,retval)

#define IISDsCrMap_GetTypeInfo(This,itinfo,lcid,pptinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfo(This,itinfo,lcid,pptinfo,retval)

#define IISDsCrMap_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)

#define IISDsCrMap_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)	\
    (This)->lpVtbl -> Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)

#define IISDsCrMap_get_Name(This,retval)	\
    (This)->lpVtbl -> get_Name(This,retval)

#define IISDsCrMap_get_Class(This,retval)	\
    (This)->lpVtbl -> get_Class(This,retval)

#define IISDsCrMap_get_GUID(This,retval)	\
    (This)->lpVtbl -> get_GUID(This,retval)

#define IISDsCrMap_get_ADsPath(This,retval)	\
    (This)->lpVtbl -> get_ADsPath(This,retval)

#define IISDsCrMap_get_Parent(This,retval)	\
    (This)->lpVtbl -> get_Parent(This,retval)

#define IISDsCrMap_get_Schema(This,retval)	\
    (This)->lpVtbl -> get_Schema(This,retval)

#define IISDsCrMap_GetInfo(This,retval)	\
    (This)->lpVtbl -> GetInfo(This,retval)

#define IISDsCrMap_SetInfo(This,retval)	\
    (This)->lpVtbl -> SetInfo(This,retval)

#define IISDsCrMap_Get(This,bstrName,retval)	\
    (This)->lpVtbl -> Get(This,bstrName,retval)

#define IISDsCrMap_Put(This,bstrName,vProp,retval)	\
    (This)->lpVtbl -> Put(This,bstrName,vProp,retval)

#define IISDsCrMap_GetEx(This,bstrName,retval)	\
    (This)->lpVtbl -> GetEx(This,bstrName,retval)

#define IISDsCrMap_PutEx(This,lnControlCode,bstrName,vProp,retval)	\
    (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp,retval)

#define IISDsCrMap_GetInfoEx(This,vProperties,lnReserved,retval)	\
    (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved,retval)


#define IISDsCrMap_CreateMapping(This,vCert,bstrNtAcct,bstrNtPwd,bstrName,lEnabled)	\
    (This)->lpVtbl -> CreateMapping(This,vCert,bstrNtAcct,bstrNtPwd,bstrName,lEnabled)

#define IISDsCrMap_GetMapping(This,lMethod,vKey,pvCert,pbstrNtAcct,pbstrNtPwd,pbstrName,plEnabled)	\
    (This)->lpVtbl -> GetMapping(This,lMethod,vKey,pvCert,pbstrNtAcct,pbstrNtPwd,pbstrName,plEnabled)

#define IISDsCrMap_DeleteMapping(This,lMethod,vKey)	\
    (This)->lpVtbl -> DeleteMapping(This,lMethod,vKey)

#define IISDsCrMap_SetEnabled(This,lMethod,vKey,lEnabled)	\
    (This)->lpVtbl -> SetEnabled(This,lMethod,vKey,lEnabled)

#define IISDsCrMap_SetName(This,lMethod,vKey,bstrName)	\
    (This)->lpVtbl -> SetName(This,lMethod,vKey,bstrName)

#define IISDsCrMap_SetPwd(This,lMethod,vKey,bstrPwd)	\
    (This)->lpVtbl -> SetPwd(This,lMethod,vKey,bstrPwd)

#define IISDsCrMap_SetAcct(This,lMethod,vKey,bstrAcct)	\
    (This)->lpVtbl -> SetAcct(This,lMethod,vKey,bstrAcct)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IISDsCrMap_CreateMapping_Proxy( 
    IISDsCrMap * This,
    /* [in] */ VARIANT vCert,
    /* [in] */ BSTR bstrNtAcct,
    /* [in] */ BSTR bstrNtPwd,
    /* [in] */ BSTR bstrName,
    /* [in] */ LONG lEnabled);


void __RPC_STUB IISDsCrMap_CreateMapping_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISDsCrMap_GetMapping_Proxy( 
    IISDsCrMap * This,
    /* [in] */ LONG lMethod,
    /* [in] */ VARIANT vKey,
    /* [out] */ VARIANT *pvCert,
    /* [out] */ VARIANT *pbstrNtAcct,
    /* [out] */ VARIANT *pbstrNtPwd,
    /* [out] */ VARIANT *pbstrName,
    /* [out] */ VARIANT *plEnabled);


void __RPC_STUB IISDsCrMap_GetMapping_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISDsCrMap_DeleteMapping_Proxy( 
    IISDsCrMap * This,
    /* [in] */ LONG lMethod,
    /* [in] */ VARIANT vKey);


void __RPC_STUB IISDsCrMap_DeleteMapping_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISDsCrMap_SetEnabled_Proxy( 
    IISDsCrMap * This,
    /* [in] */ LONG lMethod,
    /* [in] */ VARIANT vKey,
    /* [in] */ LONG lEnabled);


void __RPC_STUB IISDsCrMap_SetEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISDsCrMap_SetName_Proxy( 
    IISDsCrMap * This,
    /* [in] */ LONG lMethod,
    /* [in] */ VARIANT vKey,
    /* [in] */ BSTR bstrName);


void __RPC_STUB IISDsCrMap_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISDsCrMap_SetPwd_Proxy( 
    IISDsCrMap * This,
    /* [in] */ LONG lMethod,
    /* [in] */ VARIANT vKey,
    /* [in] */ BSTR bstrPwd);


void __RPC_STUB IISDsCrMap_SetPwd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISDsCrMap_SetAcct_Proxy( 
    IISDsCrMap * This,
    /* [in] */ LONG lMethod,
    /* [in] */ VARIANT vKey,
    /* [in] */ BSTR bstrAcct);


void __RPC_STUB IISDsCrMap_SetAcct_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISDsCrMap_INTERFACE_DEFINED__ */


#ifndef __IISApp_INTERFACE_DEFINED__
#define __IISApp_INTERFACE_DEFINED__

/* interface IISApp */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISApp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("46FBBB80-0192-11d1-9C39-00A0C922E703")
    IISApp : public IADs
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppCreate( 
            /* [in] */ VARIANT_BOOL bSetInProcFlag) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppDelete( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppDeleteRecursive( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppUnLoad( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppUnLoadRecursive( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppDisable( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppDisableRecursive( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppEnable( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppEnableRecursive( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppGetStatus( 
            /* [out] */ DWORD *pdwStatus) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AspAppRestart( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISAppVtbl
    {
        BEGIN_INTERFACE
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IISApp * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [out][idldescattr] */ void **ppvObj,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *AddRef )( 
            IISApp * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Release )( 
            IISApp * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IISApp * This,
            /* [out][idldescattr] */ unsigned UINT *pctinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IISApp * This,
            /* [in][idldescattr] */ unsigned UINT itinfo,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ void **pptinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IISApp * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ signed char **rgszNames,
            /* [in][idldescattr] */ unsigned UINT cNames,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ signed long *rgdispid,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IISApp * This,
            /* [in][idldescattr] */ signed long dispidMember,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [in][idldescattr] */ unsigned short wFlags,
            /* [in][idldescattr] */ struct DISPPARAMS *pdispparams,
            /* [out][idldescattr] */ VARIANT *pvarResult,
            /* [out][idldescattr] */ struct EXCEPINFO *pexcepinfo,
            /* [out][idldescattr] */ unsigned UINT *puArgErr,
            /* [retval][out] */ void *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IISApp * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IISApp * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IISApp * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IISApp * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IISApp * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IISApp * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IISApp * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IISApp * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IISApp * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IISApp * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IISApp * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IISApp * This,
            /* [in][idldescattr] */ signed long lnControlCode,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IISApp * This,
            /* [in][idldescattr] */ VARIANT vProperties,
            /* [in][idldescattr] */ signed long lnReserved,
            /* [retval][out] */ void *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppCreate )( 
            IISApp * This,
            /* [in] */ VARIANT_BOOL bSetInProcFlag);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppDelete )( 
            IISApp * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppDeleteRecursive )( 
            IISApp * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppUnLoad )( 
            IISApp * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppUnLoadRecursive )( 
            IISApp * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppDisable )( 
            IISApp * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppDisableRecursive )( 
            IISApp * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppEnable )( 
            IISApp * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppEnableRecursive )( 
            IISApp * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppGetStatus )( 
            IISApp * This,
            /* [out] */ DWORD *pdwStatus);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AspAppRestart )( 
            IISApp * This);
        
        END_INTERFACE
    } IISAppVtbl;

    interface IISApp
    {
        CONST_VTBL struct IISAppVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISApp_QueryInterface(This,riid,ppvObj,retval)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObj,retval)

#define IISApp_AddRef(This,retval)	\
    (This)->lpVtbl -> AddRef(This,retval)

#define IISApp_Release(This,retval)	\
    (This)->lpVtbl -> Release(This,retval)

#define IISApp_GetTypeInfoCount(This,pctinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo,retval)

#define IISApp_GetTypeInfo(This,itinfo,lcid,pptinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfo(This,itinfo,lcid,pptinfo,retval)

#define IISApp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)

#define IISApp_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)	\
    (This)->lpVtbl -> Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)

#define IISApp_get_Name(This,retval)	\
    (This)->lpVtbl -> get_Name(This,retval)

#define IISApp_get_Class(This,retval)	\
    (This)->lpVtbl -> get_Class(This,retval)

#define IISApp_get_GUID(This,retval)	\
    (This)->lpVtbl -> get_GUID(This,retval)

#define IISApp_get_ADsPath(This,retval)	\
    (This)->lpVtbl -> get_ADsPath(This,retval)

#define IISApp_get_Parent(This,retval)	\
    (This)->lpVtbl -> get_Parent(This,retval)

#define IISApp_get_Schema(This,retval)	\
    (This)->lpVtbl -> get_Schema(This,retval)

#define IISApp_GetInfo(This,retval)	\
    (This)->lpVtbl -> GetInfo(This,retval)

#define IISApp_SetInfo(This,retval)	\
    (This)->lpVtbl -> SetInfo(This,retval)

#define IISApp_Get(This,bstrName,retval)	\
    (This)->lpVtbl -> Get(This,bstrName,retval)

#define IISApp_Put(This,bstrName,vProp,retval)	\
    (This)->lpVtbl -> Put(This,bstrName,vProp,retval)

#define IISApp_GetEx(This,bstrName,retval)	\
    (This)->lpVtbl -> GetEx(This,bstrName,retval)

#define IISApp_PutEx(This,lnControlCode,bstrName,vProp,retval)	\
    (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp,retval)

#define IISApp_GetInfoEx(This,vProperties,lnReserved,retval)	\
    (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved,retval)


#define IISApp_AppCreate(This,bSetInProcFlag)	\
    (This)->lpVtbl -> AppCreate(This,bSetInProcFlag)

#define IISApp_AppDelete(This)	\
    (This)->lpVtbl -> AppDelete(This)

#define IISApp_AppDeleteRecursive(This)	\
    (This)->lpVtbl -> AppDeleteRecursive(This)

#define IISApp_AppUnLoad(This)	\
    (This)->lpVtbl -> AppUnLoad(This)

#define IISApp_AppUnLoadRecursive(This)	\
    (This)->lpVtbl -> AppUnLoadRecursive(This)

#define IISApp_AppDisable(This)	\
    (This)->lpVtbl -> AppDisable(This)

#define IISApp_AppDisableRecursive(This)	\
    (This)->lpVtbl -> AppDisableRecursive(This)

#define IISApp_AppEnable(This)	\
    (This)->lpVtbl -> AppEnable(This)

#define IISApp_AppEnableRecursive(This)	\
    (This)->lpVtbl -> AppEnableRecursive(This)

#define IISApp_AppGetStatus(This,pdwStatus)	\
    (This)->lpVtbl -> AppGetStatus(This,pdwStatus)

#define IISApp_AspAppRestart(This)	\
    (This)->lpVtbl -> AspAppRestart(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IISApp_AppCreate_Proxy( 
    IISApp * This,
    /* [in] */ VARIANT_BOOL bSetInProcFlag);


void __RPC_STUB IISApp_AppCreate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApp_AppDelete_Proxy( 
    IISApp * This);


void __RPC_STUB IISApp_AppDelete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApp_AppDeleteRecursive_Proxy( 
    IISApp * This);


void __RPC_STUB IISApp_AppDeleteRecursive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApp_AppUnLoad_Proxy( 
    IISApp * This);


void __RPC_STUB IISApp_AppUnLoad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApp_AppUnLoadRecursive_Proxy( 
    IISApp * This);


void __RPC_STUB IISApp_AppUnLoadRecursive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApp_AppDisable_Proxy( 
    IISApp * This);


void __RPC_STUB IISApp_AppDisable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApp_AppDisableRecursive_Proxy( 
    IISApp * This);


void __RPC_STUB IISApp_AppDisableRecursive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApp_AppEnable_Proxy( 
    IISApp * This);


void __RPC_STUB IISApp_AppEnable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApp_AppEnableRecursive_Proxy( 
    IISApp * This);


void __RPC_STUB IISApp_AppEnableRecursive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApp_AppGetStatus_Proxy( 
    IISApp * This,
    /* [out] */ DWORD *pdwStatus);


void __RPC_STUB IISApp_AppGetStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApp_AspAppRestart_Proxy( 
    IISApp * This);


void __RPC_STUB IISApp_AspAppRestart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISApp_INTERFACE_DEFINED__ */


#ifndef __IISApp2_INTERFACE_DEFINED__
#define __IISApp2_INTERFACE_DEFINED__

/* interface IISApp2 */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISApp2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("603DCBEA-7350-11d2-A7BE-0000F8085B95")
    IISApp2 : public IISApp
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppCreate2( 
            /* [in] */ LONG lAppMode) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppGetStatus2( 
            /* [retval][out] */ LONG *lpStatus) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISApp2Vtbl
    {
        BEGIN_INTERFACE
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IISApp2 * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [out][idldescattr] */ void **ppvObj,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *AddRef )( 
            IISApp2 * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Release )( 
            IISApp2 * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IISApp2 * This,
            /* [out][idldescattr] */ unsigned UINT *pctinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IISApp2 * This,
            /* [in][idldescattr] */ unsigned UINT itinfo,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ void **pptinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IISApp2 * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ signed char **rgszNames,
            /* [in][idldescattr] */ unsigned UINT cNames,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ signed long *rgdispid,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IISApp2 * This,
            /* [in][idldescattr] */ signed long dispidMember,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [in][idldescattr] */ unsigned short wFlags,
            /* [in][idldescattr] */ struct DISPPARAMS *pdispparams,
            /* [out][idldescattr] */ VARIANT *pvarResult,
            /* [out][idldescattr] */ struct EXCEPINFO *pexcepinfo,
            /* [out][idldescattr] */ unsigned UINT *puArgErr,
            /* [retval][out] */ void *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IISApp2 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IISApp2 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IISApp2 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IISApp2 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IISApp2 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IISApp2 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IISApp2 * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IISApp2 * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IISApp2 * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IISApp2 * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IISApp2 * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IISApp2 * This,
            /* [in][idldescattr] */ signed long lnControlCode,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IISApp2 * This,
            /* [in][idldescattr] */ VARIANT vProperties,
            /* [in][idldescattr] */ signed long lnReserved,
            /* [retval][out] */ void *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppCreate )( 
            IISApp2 * This,
            /* [in] */ VARIANT_BOOL bSetInProcFlag);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppDelete )( 
            IISApp2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppDeleteRecursive )( 
            IISApp2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppUnLoad )( 
            IISApp2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppUnLoadRecursive )( 
            IISApp2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppDisable )( 
            IISApp2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppDisableRecursive )( 
            IISApp2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppEnable )( 
            IISApp2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppEnableRecursive )( 
            IISApp2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppGetStatus )( 
            IISApp2 * This,
            /* [out] */ DWORD *pdwStatus);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AspAppRestart )( 
            IISApp2 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppCreate2 )( 
            IISApp2 * This,
            /* [in] */ LONG lAppMode);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppGetStatus2 )( 
            IISApp2 * This,
            /* [retval][out] */ LONG *lpStatus);
        
        END_INTERFACE
    } IISApp2Vtbl;

    interface IISApp2
    {
        CONST_VTBL struct IISApp2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISApp2_QueryInterface(This,riid,ppvObj,retval)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObj,retval)

#define IISApp2_AddRef(This,retval)	\
    (This)->lpVtbl -> AddRef(This,retval)

#define IISApp2_Release(This,retval)	\
    (This)->lpVtbl -> Release(This,retval)

#define IISApp2_GetTypeInfoCount(This,pctinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo,retval)

#define IISApp2_GetTypeInfo(This,itinfo,lcid,pptinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfo(This,itinfo,lcid,pptinfo,retval)

#define IISApp2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)

#define IISApp2_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)	\
    (This)->lpVtbl -> Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)

#define IISApp2_get_Name(This,retval)	\
    (This)->lpVtbl -> get_Name(This,retval)

#define IISApp2_get_Class(This,retval)	\
    (This)->lpVtbl -> get_Class(This,retval)

#define IISApp2_get_GUID(This,retval)	\
    (This)->lpVtbl -> get_GUID(This,retval)

#define IISApp2_get_ADsPath(This,retval)	\
    (This)->lpVtbl -> get_ADsPath(This,retval)

#define IISApp2_get_Parent(This,retval)	\
    (This)->lpVtbl -> get_Parent(This,retval)

#define IISApp2_get_Schema(This,retval)	\
    (This)->lpVtbl -> get_Schema(This,retval)

#define IISApp2_GetInfo(This,retval)	\
    (This)->lpVtbl -> GetInfo(This,retval)

#define IISApp2_SetInfo(This,retval)	\
    (This)->lpVtbl -> SetInfo(This,retval)

#define IISApp2_Get(This,bstrName,retval)	\
    (This)->lpVtbl -> Get(This,bstrName,retval)

#define IISApp2_Put(This,bstrName,vProp,retval)	\
    (This)->lpVtbl -> Put(This,bstrName,vProp,retval)

#define IISApp2_GetEx(This,bstrName,retval)	\
    (This)->lpVtbl -> GetEx(This,bstrName,retval)

#define IISApp2_PutEx(This,lnControlCode,bstrName,vProp,retval)	\
    (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp,retval)

#define IISApp2_GetInfoEx(This,vProperties,lnReserved,retval)	\
    (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved,retval)


#define IISApp2_AppCreate(This,bSetInProcFlag)	\
    (This)->lpVtbl -> AppCreate(This,bSetInProcFlag)

#define IISApp2_AppDelete(This)	\
    (This)->lpVtbl -> AppDelete(This)

#define IISApp2_AppDeleteRecursive(This)	\
    (This)->lpVtbl -> AppDeleteRecursive(This)

#define IISApp2_AppUnLoad(This)	\
    (This)->lpVtbl -> AppUnLoad(This)

#define IISApp2_AppUnLoadRecursive(This)	\
    (This)->lpVtbl -> AppUnLoadRecursive(This)

#define IISApp2_AppDisable(This)	\
    (This)->lpVtbl -> AppDisable(This)

#define IISApp2_AppDisableRecursive(This)	\
    (This)->lpVtbl -> AppDisableRecursive(This)

#define IISApp2_AppEnable(This)	\
    (This)->lpVtbl -> AppEnable(This)

#define IISApp2_AppEnableRecursive(This)	\
    (This)->lpVtbl -> AppEnableRecursive(This)

#define IISApp2_AppGetStatus(This,pdwStatus)	\
    (This)->lpVtbl -> AppGetStatus(This,pdwStatus)

#define IISApp2_AspAppRestart(This)	\
    (This)->lpVtbl -> AspAppRestart(This)


#define IISApp2_AppCreate2(This,lAppMode)	\
    (This)->lpVtbl -> AppCreate2(This,lAppMode)

#define IISApp2_AppGetStatus2(This,lpStatus)	\
    (This)->lpVtbl -> AppGetStatus2(This,lpStatus)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IISApp2_AppCreate2_Proxy( 
    IISApp2 * This,
    /* [in] */ LONG lAppMode);


void __RPC_STUB IISApp2_AppCreate2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISApp2_AppGetStatus2_Proxy( 
    IISApp2 * This,
    /* [retval][out] */ LONG *lpStatus);


void __RPC_STUB IISApp2_AppGetStatus2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISApp2_INTERFACE_DEFINED__ */


#ifndef __IISApp3_INTERFACE_DEFINED__
#define __IISApp3_INTERFACE_DEFINED__

/* interface IISApp3 */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISApp3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2812B639-8FAC-4510-96C5-71DDBD1F54FC")
    IISApp3 : public IISApp2
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE AppCreate3( 
            /* [in] */ LONG lAppMode,
            /* [in] */ VARIANT bstrAppPooI,
            /* [in] */ VARIANT bCreatePool) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISApp3Vtbl
    {
        BEGIN_INTERFACE
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IISApp3 * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [out][idldescattr] */ void **ppvObj,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *AddRef )( 
            IISApp3 * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Release )( 
            IISApp3 * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IISApp3 * This,
            /* [out][idldescattr] */ unsigned UINT *pctinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IISApp3 * This,
            /* [in][idldescattr] */ unsigned UINT itinfo,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ void **pptinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IISApp3 * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ signed char **rgszNames,
            /* [in][idldescattr] */ unsigned UINT cNames,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ signed long *rgdispid,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IISApp3 * This,
            /* [in][idldescattr] */ signed long dispidMember,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [in][idldescattr] */ unsigned short wFlags,
            /* [in][idldescattr] */ struct DISPPARAMS *pdispparams,
            /* [out][idldescattr] */ VARIANT *pvarResult,
            /* [out][idldescattr] */ struct EXCEPINFO *pexcepinfo,
            /* [out][idldescattr] */ unsigned UINT *puArgErr,
            /* [retval][out] */ void *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IISApp3 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IISApp3 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IISApp3 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IISApp3 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IISApp3 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IISApp3 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IISApp3 * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IISApp3 * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IISApp3 * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IISApp3 * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IISApp3 * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IISApp3 * This,
            /* [in][idldescattr] */ signed long lnControlCode,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IISApp3 * This,
            /* [in][idldescattr] */ VARIANT vProperties,
            /* [in][idldescattr] */ signed long lnReserved,
            /* [retval][out] */ void *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppCreate )( 
            IISApp3 * This,
            /* [in] */ VARIANT_BOOL bSetInProcFlag);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppDelete )( 
            IISApp3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppDeleteRecursive )( 
            IISApp3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppUnLoad )( 
            IISApp3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppUnLoadRecursive )( 
            IISApp3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppDisable )( 
            IISApp3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppDisableRecursive )( 
            IISApp3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppEnable )( 
            IISApp3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppEnableRecursive )( 
            IISApp3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppGetStatus )( 
            IISApp3 * This,
            /* [out] */ DWORD *pdwStatus);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AspAppRestart )( 
            IISApp3 * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppCreate2 )( 
            IISApp3 * This,
            /* [in] */ LONG lAppMode);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppGetStatus2 )( 
            IISApp3 * This,
            /* [retval][out] */ LONG *lpStatus);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *AppCreate3 )( 
            IISApp3 * This,
            /* [in] */ LONG lAppMode,
            /* [in] */ VARIANT bstrAppPooI,
            /* [in] */ VARIANT bCreatePool);
        
        END_INTERFACE
    } IISApp3Vtbl;

    interface IISApp3
    {
        CONST_VTBL struct IISApp3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISApp3_QueryInterface(This,riid,ppvObj,retval)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObj,retval)

#define IISApp3_AddRef(This,retval)	\
    (This)->lpVtbl -> AddRef(This,retval)

#define IISApp3_Release(This,retval)	\
    (This)->lpVtbl -> Release(This,retval)

#define IISApp3_GetTypeInfoCount(This,pctinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo,retval)

#define IISApp3_GetTypeInfo(This,itinfo,lcid,pptinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfo(This,itinfo,lcid,pptinfo,retval)

#define IISApp3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)

#define IISApp3_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)	\
    (This)->lpVtbl -> Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)

#define IISApp3_get_Name(This,retval)	\
    (This)->lpVtbl -> get_Name(This,retval)

#define IISApp3_get_Class(This,retval)	\
    (This)->lpVtbl -> get_Class(This,retval)

#define IISApp3_get_GUID(This,retval)	\
    (This)->lpVtbl -> get_GUID(This,retval)

#define IISApp3_get_ADsPath(This,retval)	\
    (This)->lpVtbl -> get_ADsPath(This,retval)

#define IISApp3_get_Parent(This,retval)	\
    (This)->lpVtbl -> get_Parent(This,retval)

#define IISApp3_get_Schema(This,retval)	\
    (This)->lpVtbl -> get_Schema(This,retval)

#define IISApp3_GetInfo(This,retval)	\
    (This)->lpVtbl -> GetInfo(This,retval)

#define IISApp3_SetInfo(This,retval)	\
    (This)->lpVtbl -> SetInfo(This,retval)

#define IISApp3_Get(This,bstrName,retval)	\
    (This)->lpVtbl -> Get(This,bstrName,retval)

#define IISApp3_Put(This,bstrName,vProp,retval)	\
    (This)->lpVtbl -> Put(This,bstrName,vProp,retval)

#define IISApp3_GetEx(This,bstrName,retval)	\
    (This)->lpVtbl -> GetEx(This,bstrName,retval)

#define IISApp3_PutEx(This,lnControlCode,bstrName,vProp,retval)	\
    (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp,retval)

#define IISApp3_GetInfoEx(This,vProperties,lnReserved,retval)	\
    (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved,retval)


#define IISApp3_AppCreate(This,bSetInProcFlag)	\
    (This)->lpVtbl -> AppCreate(This,bSetInProcFlag)

#define IISApp3_AppDelete(This)	\
    (This)->lpVtbl -> AppDelete(This)

#define IISApp3_AppDeleteRecursive(This)	\
    (This)->lpVtbl -> AppDeleteRecursive(This)

#define IISApp3_AppUnLoad(This)	\
    (This)->lpVtbl -> AppUnLoad(This)

#define IISApp3_AppUnLoadRecursive(This)	\
    (This)->lpVtbl -> AppUnLoadRecursive(This)

#define IISApp3_AppDisable(This)	\
    (This)->lpVtbl -> AppDisable(This)

#define IISApp3_AppDisableRecursive(This)	\
    (This)->lpVtbl -> AppDisableRecursive(This)

#define IISApp3_AppEnable(This)	\
    (This)->lpVtbl -> AppEnable(This)

#define IISApp3_AppEnableRecursive(This)	\
    (This)->lpVtbl -> AppEnableRecursive(This)

#define IISApp3_AppGetStatus(This,pdwStatus)	\
    (This)->lpVtbl -> AppGetStatus(This,pdwStatus)

#define IISApp3_AspAppRestart(This)	\
    (This)->lpVtbl -> AspAppRestart(This)


#define IISApp3_AppCreate2(This,lAppMode)	\
    (This)->lpVtbl -> AppCreate2(This,lAppMode)

#define IISApp3_AppGetStatus2(This,lpStatus)	\
    (This)->lpVtbl -> AppGetStatus2(This,lpStatus)


#define IISApp3_AppCreate3(This,lAppMode,bstrAppPooI,bCreatePool)	\
    (This)->lpVtbl -> AppCreate3(This,lAppMode,bstrAppPooI,bCreatePool)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IISApp3_AppCreate3_Proxy( 
    IISApp3 * This,
    /* [in] */ LONG lAppMode,
    /* [in] */ VARIANT bstrAppPooI,
    /* [in] */ VARIANT bCreatePool);


void __RPC_STUB IISApp3_AppCreate3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISApp3_INTERFACE_DEFINED__ */


#ifndef __IISComputer_INTERFACE_DEFINED__
#define __IISComputer_INTERFACE_DEFINED__

/* interface IISComputer */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISComputer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CF87A2E0-078B-11d1-9C3D-00A0C922E703")
    IISComputer : public IADs
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Backup( 
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion,
            /* [in] */ LONG lFlags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Restore( 
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion,
            /* [in] */ LONG lFlags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnumBackups( 
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lIndex,
            /* [out] */ VARIANT *pvVersion,
            /* [out] */ VARIANT *pvLocations,
            /* [out] */ VARIANT *pvDate) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DeleteBackup( 
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISComputerVtbl
    {
        BEGIN_INTERFACE
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IISComputer * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [out][idldescattr] */ void **ppvObj,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *AddRef )( 
            IISComputer * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Release )( 
            IISComputer * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IISComputer * This,
            /* [out][idldescattr] */ unsigned UINT *pctinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IISComputer * This,
            /* [in][idldescattr] */ unsigned UINT itinfo,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ void **pptinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IISComputer * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ signed char **rgszNames,
            /* [in][idldescattr] */ unsigned UINT cNames,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ signed long *rgdispid,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IISComputer * This,
            /* [in][idldescattr] */ signed long dispidMember,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [in][idldescattr] */ unsigned short wFlags,
            /* [in][idldescattr] */ struct DISPPARAMS *pdispparams,
            /* [out][idldescattr] */ VARIANT *pvarResult,
            /* [out][idldescattr] */ struct EXCEPINFO *pexcepinfo,
            /* [out][idldescattr] */ unsigned UINT *puArgErr,
            /* [retval][out] */ void *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IISComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IISComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IISComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IISComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IISComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IISComputer * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IISComputer * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IISComputer * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IISComputer * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IISComputer * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IISComputer * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IISComputer * This,
            /* [in][idldescattr] */ signed long lnControlCode,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IISComputer * This,
            /* [in][idldescattr] */ VARIANT vProperties,
            /* [in][idldescattr] */ signed long lnReserved,
            /* [retval][out] */ void *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Backup )( 
            IISComputer * This,
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion,
            /* [in] */ LONG lFlags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Restore )( 
            IISComputer * This,
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion,
            /* [in] */ LONG lFlags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumBackups )( 
            IISComputer * This,
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lIndex,
            /* [out] */ VARIANT *pvVersion,
            /* [out] */ VARIANT *pvLocations,
            /* [out] */ VARIANT *pvDate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DeleteBackup )( 
            IISComputer * This,
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion);
        
        END_INTERFACE
    } IISComputerVtbl;

    interface IISComputer
    {
        CONST_VTBL struct IISComputerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISComputer_QueryInterface(This,riid,ppvObj,retval)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObj,retval)

#define IISComputer_AddRef(This,retval)	\
    (This)->lpVtbl -> AddRef(This,retval)

#define IISComputer_Release(This,retval)	\
    (This)->lpVtbl -> Release(This,retval)

#define IISComputer_GetTypeInfoCount(This,pctinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo,retval)

#define IISComputer_GetTypeInfo(This,itinfo,lcid,pptinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfo(This,itinfo,lcid,pptinfo,retval)

#define IISComputer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)

#define IISComputer_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)	\
    (This)->lpVtbl -> Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)

#define IISComputer_get_Name(This,retval)	\
    (This)->lpVtbl -> get_Name(This,retval)

#define IISComputer_get_Class(This,retval)	\
    (This)->lpVtbl -> get_Class(This,retval)

#define IISComputer_get_GUID(This,retval)	\
    (This)->lpVtbl -> get_GUID(This,retval)

#define IISComputer_get_ADsPath(This,retval)	\
    (This)->lpVtbl -> get_ADsPath(This,retval)

#define IISComputer_get_Parent(This,retval)	\
    (This)->lpVtbl -> get_Parent(This,retval)

#define IISComputer_get_Schema(This,retval)	\
    (This)->lpVtbl -> get_Schema(This,retval)

#define IISComputer_GetInfo(This,retval)	\
    (This)->lpVtbl -> GetInfo(This,retval)

#define IISComputer_SetInfo(This,retval)	\
    (This)->lpVtbl -> SetInfo(This,retval)

#define IISComputer_Get(This,bstrName,retval)	\
    (This)->lpVtbl -> Get(This,bstrName,retval)

#define IISComputer_Put(This,bstrName,vProp,retval)	\
    (This)->lpVtbl -> Put(This,bstrName,vProp,retval)

#define IISComputer_GetEx(This,bstrName,retval)	\
    (This)->lpVtbl -> GetEx(This,bstrName,retval)

#define IISComputer_PutEx(This,lnControlCode,bstrName,vProp,retval)	\
    (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp,retval)

#define IISComputer_GetInfoEx(This,vProperties,lnReserved,retval)	\
    (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved,retval)


#define IISComputer_Backup(This,bstrLocation,lVersion,lFlags)	\
    (This)->lpVtbl -> Backup(This,bstrLocation,lVersion,lFlags)

#define IISComputer_Restore(This,bstrLocation,lVersion,lFlags)	\
    (This)->lpVtbl -> Restore(This,bstrLocation,lVersion,lFlags)

#define IISComputer_EnumBackups(This,bstrLocation,lIndex,pvVersion,pvLocations,pvDate)	\
    (This)->lpVtbl -> EnumBackups(This,bstrLocation,lIndex,pvVersion,pvLocations,pvDate)

#define IISComputer_DeleteBackup(This,bstrLocation,lVersion)	\
    (This)->lpVtbl -> DeleteBackup(This,bstrLocation,lVersion)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IISComputer_Backup_Proxy( 
    IISComputer * This,
    /* [in] */ BSTR bstrLocation,
    /* [in] */ LONG lVersion,
    /* [in] */ LONG lFlags);


void __RPC_STUB IISComputer_Backup_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISComputer_Restore_Proxy( 
    IISComputer * This,
    /* [in] */ BSTR bstrLocation,
    /* [in] */ LONG lVersion,
    /* [in] */ LONG lFlags);


void __RPC_STUB IISComputer_Restore_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISComputer_EnumBackups_Proxy( 
    IISComputer * This,
    /* [in] */ BSTR bstrLocation,
    /* [in] */ LONG lIndex,
    /* [out] */ VARIANT *pvVersion,
    /* [out] */ VARIANT *pvLocations,
    /* [out] */ VARIANT *pvDate);


void __RPC_STUB IISComputer_EnumBackups_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISComputer_DeleteBackup_Proxy( 
    IISComputer * This,
    /* [in] */ BSTR bstrLocation,
    /* [in] */ LONG lVersion);


void __RPC_STUB IISComputer_DeleteBackup_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISComputer_INTERFACE_DEFINED__ */


#ifndef __IISComputer2_INTERFACE_DEFINED__
#define __IISComputer2_INTERFACE_DEFINED__

/* interface IISComputer2 */
/* [object][dual][oleautomation][uuid] */ 


EXTERN_C const IID IID_IISComputer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("63d89839-5762-4a68-b1b9-3507ea76cbbf")
    IISComputer2 : public IISComputer
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE BackupWithPassword( 
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion,
            /* [in] */ LONG lFlags,
            /* [in] */ BSTR bstrPassword) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RestoreWithPassword( 
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion,
            /* [in] */ LONG lFlags,
            /* [in] */ BSTR bstrPassword) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Export( 
            /* [in] */ BSTR bstrPassword,
            /* [in] */ BSTR bstrFilename,
            /* [in] */ BSTR bstrSourcePath,
            /* [in] */ LONG lFlags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Import( 
            /* [in] */ BSTR bstrPassword,
            /* [in] */ BSTR bstrFilename,
            /* [in] */ BSTR bstrSourcePath,
            /* [in] */ BSTR bstrDestPath,
            /* [in] */ LONG lFlags) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SaveData( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IISComputer2Vtbl
    {
        BEGIN_INTERFACE
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IISComputer2 * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [out][idldescattr] */ void **ppvObj,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *AddRef )( 
            IISComputer2 * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Release )( 
            IISComputer2 * This,
            /* [retval][out] */ unsigned long *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IISComputer2 * This,
            /* [out][idldescattr] */ unsigned UINT *pctinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IISComputer2 * This,
            /* [in][idldescattr] */ unsigned UINT itinfo,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ void **pptinfo,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IISComputer2 * This,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ signed char **rgszNames,
            /* [in][idldescattr] */ unsigned UINT cNames,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [out][idldescattr] */ signed long *rgdispid,
            /* [retval][out] */ void *retval);
        
        /* [id][restricted][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IISComputer2 * This,
            /* [in][idldescattr] */ signed long dispidMember,
            /* [in][idldescattr] */ struct GUID *riid,
            /* [in][idldescattr] */ unsigned long lcid,
            /* [in][idldescattr] */ unsigned short wFlags,
            /* [in][idldescattr] */ struct DISPPARAMS *pdispparams,
            /* [out][idldescattr] */ VARIANT *pvarResult,
            /* [out][idldescattr] */ struct EXCEPINFO *pexcepinfo,
            /* [out][idldescattr] */ unsigned UINT *puArgErr,
            /* [retval][out] */ void *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IISComputer2 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            IISComputer2 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            IISComputer2 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            IISComputer2 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IISComputer2 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][propget][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *get_Schema )( 
            IISComputer2 * This,
            /* [retval][out] */ BSTR *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IISComputer2 * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            IISComputer2 * This,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            IISComputer2 * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *Put )( 
            IISComputer2 * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetEx )( 
            IISComputer2 * This,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *PutEx )( 
            IISComputer2 * This,
            /* [in][idldescattr] */ signed long lnControlCode,
            /* [in][idldescattr] */ BSTR bstrName,
            /* [in][idldescattr] */ VARIANT vProp,
            /* [retval][out] */ void *retval);
        
        /* [id][funcdescattr] */ HRESULT ( STDMETHODCALLTYPE *GetInfoEx )( 
            IISComputer2 * This,
            /* [in][idldescattr] */ VARIANT vProperties,
            /* [in][idldescattr] */ signed long lnReserved,
            /* [retval][out] */ void *retval);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Backup )( 
            IISComputer2 * This,
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion,
            /* [in] */ LONG lFlags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Restore )( 
            IISComputer2 * This,
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion,
            /* [in] */ LONG lFlags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnumBackups )( 
            IISComputer2 * This,
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lIndex,
            /* [out] */ VARIANT *pvVersion,
            /* [out] */ VARIANT *pvLocations,
            /* [out] */ VARIANT *pvDate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DeleteBackup )( 
            IISComputer2 * This,
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *BackupWithPassword )( 
            IISComputer2 * This,
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion,
            /* [in] */ LONG lFlags,
            /* [in] */ BSTR bstrPassword);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RestoreWithPassword )( 
            IISComputer2 * This,
            /* [in] */ BSTR bstrLocation,
            /* [in] */ LONG lVersion,
            /* [in] */ LONG lFlags,
            /* [in] */ BSTR bstrPassword);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Export )( 
            IISComputer2 * This,
            /* [in] */ BSTR bstrPassword,
            /* [in] */ BSTR bstrFilename,
            /* [in] */ BSTR bstrSourcePath,
            /* [in] */ LONG lFlags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Import )( 
            IISComputer2 * This,
            /* [in] */ BSTR bstrPassword,
            /* [in] */ BSTR bstrFilename,
            /* [in] */ BSTR bstrSourcePath,
            /* [in] */ BSTR bstrDestPath,
            /* [in] */ LONG lFlags);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SaveData )( 
            IISComputer2 * This);
        
        END_INTERFACE
    } IISComputer2Vtbl;

    interface IISComputer2
    {
        CONST_VTBL struct IISComputer2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IISComputer2_QueryInterface(This,riid,ppvObj,retval)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObj,retval)

#define IISComputer2_AddRef(This,retval)	\
    (This)->lpVtbl -> AddRef(This,retval)

#define IISComputer2_Release(This,retval)	\
    (This)->lpVtbl -> Release(This,retval)

#define IISComputer2_GetTypeInfoCount(This,pctinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo,retval)

#define IISComputer2_GetTypeInfo(This,itinfo,lcid,pptinfo,retval)	\
    (This)->lpVtbl -> GetTypeInfo(This,itinfo,lcid,pptinfo,retval)

#define IISComputer2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgdispid,retval)

#define IISComputer2_Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)	\
    (This)->lpVtbl -> Invoke(This,dispidMember,riid,lcid,wFlags,pdispparams,pvarResult,pexcepinfo,puArgErr,retval)

#define IISComputer2_get_Name(This,retval)	\
    (This)->lpVtbl -> get_Name(This,retval)

#define IISComputer2_get_Class(This,retval)	\
    (This)->lpVtbl -> get_Class(This,retval)

#define IISComputer2_get_GUID(This,retval)	\
    (This)->lpVtbl -> get_GUID(This,retval)

#define IISComputer2_get_ADsPath(This,retval)	\
    (This)->lpVtbl -> get_ADsPath(This,retval)

#define IISComputer2_get_Parent(This,retval)	\
    (This)->lpVtbl -> get_Parent(This,retval)

#define IISComputer2_get_Schema(This,retval)	\
    (This)->lpVtbl -> get_Schema(This,retval)

#define IISComputer2_GetInfo(This,retval)	\
    (This)->lpVtbl -> GetInfo(This,retval)

#define IISComputer2_SetInfo(This,retval)	\
    (This)->lpVtbl -> SetInfo(This,retval)

#define IISComputer2_Get(This,bstrName,retval)	\
    (This)->lpVtbl -> Get(This,bstrName,retval)

#define IISComputer2_Put(This,bstrName,vProp,retval)	\
    (This)->lpVtbl -> Put(This,bstrName,vProp,retval)

#define IISComputer2_GetEx(This,bstrName,retval)	\
    (This)->lpVtbl -> GetEx(This,bstrName,retval)

#define IISComputer2_PutEx(This,lnControlCode,bstrName,vProp,retval)	\
    (This)->lpVtbl -> PutEx(This,lnControlCode,bstrName,vProp,retval)

#define IISComputer2_GetInfoEx(This,vProperties,lnReserved,retval)	\
    (This)->lpVtbl -> GetInfoEx(This,vProperties,lnReserved,retval)


#define IISComputer2_Backup(This,bstrLocation,lVersion,lFlags)	\
    (This)->lpVtbl -> Backup(This,bstrLocation,lVersion,lFlags)

#define IISComputer2_Restore(This,bstrLocation,lVersion,lFlags)	\
    (This)->lpVtbl -> Restore(This,bstrLocation,lVersion,lFlags)

#define IISComputer2_EnumBackups(This,bstrLocation,lIndex,pvVersion,pvLocations,pvDate)	\
    (This)->lpVtbl -> EnumBackups(This,bstrLocation,lIndex,pvVersion,pvLocations,pvDate)

#define IISComputer2_DeleteBackup(This,bstrLocation,lVersion)	\
    (This)->lpVtbl -> DeleteBackup(This,bstrLocation,lVersion)


#define IISComputer2_BackupWithPassword(This,bstrLocation,lVersion,lFlags,bstrPassword)	\
    (This)->lpVtbl -> BackupWithPassword(This,bstrLocation,lVersion,lFlags,bstrPassword)

#define IISComputer2_RestoreWithPassword(This,bstrLocation,lVersion,lFlags,bstrPassword)	\
    (This)->lpVtbl -> RestoreWithPassword(This,bstrLocation,lVersion,lFlags,bstrPassword)

#define IISComputer2_Export(This,bstrPassword,bstrFilename,bstrSourcePath,lFlags)	\
    (This)->lpVtbl -> Export(This,bstrPassword,bstrFilename,bstrSourcePath,lFlags)

#define IISComputer2_Import(This,bstrPassword,bstrFilename,bstrSourcePath,bstrDestPath,lFlags)	\
    (This)->lpVtbl -> Import(This,bstrPassword,bstrFilename,bstrSourcePath,bstrDestPath,lFlags)

#define IISComputer2_SaveData(This)	\
    (This)->lpVtbl -> SaveData(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IISComputer2_BackupWithPassword_Proxy( 
    IISComputer2 * This,
    /* [in] */ BSTR bstrLocation,
    /* [in] */ LONG lVersion,
    /* [in] */ LONG lFlags,
    /* [in] */ BSTR bstrPassword);


void __RPC_STUB IISComputer2_BackupWithPassword_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISComputer2_RestoreWithPassword_Proxy( 
    IISComputer2 * This,
    /* [in] */ BSTR bstrLocation,
    /* [in] */ LONG lVersion,
    /* [in] */ LONG lFlags,
    /* [in] */ BSTR bstrPassword);


void __RPC_STUB IISComputer2_RestoreWithPassword_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISComputer2_Export_Proxy( 
    IISComputer2 * This,
    /* [in] */ BSTR bstrPassword,
    /* [in] */ BSTR bstrFilename,
    /* [in] */ BSTR bstrSourcePath,
    /* [in] */ LONG lFlags);


void __RPC_STUB IISComputer2_Export_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISComputer2_Import_Proxy( 
    IISComputer2 * This,
    /* [in] */ BSTR bstrPassword,
    /* [in] */ BSTR bstrFilename,
    /* [in] */ BSTR bstrSourcePath,
    /* [in] */ BSTR bstrDestPath,
    /* [in] */ LONG lFlags);


void __RPC_STUB IISComputer2_Import_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IISComputer2_SaveData_Proxy( 
    IISComputer2 * This);


void __RPC_STUB IISComputer2_SaveData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IISComputer2_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_IISExtComputer;

#ifdef __cplusplus

class DECLSPEC_UUID("91ef9258-afec-11d1-9868-00a0c922e703")
IISExtComputer;
#endif

EXTERN_C const CLSID CLSID_IISExtApp;

#ifdef __cplusplus

class DECLSPEC_UUID("b4f34438-afec-11d1-9868-00a0c922e703")
IISExtApp;
#endif

EXTERN_C const CLSID CLSID_IISExtServer;

#ifdef __cplusplus

class DECLSPEC_UUID("c3b32488-afec-11d1-9868-00a0c922e703")
IISExtServer;
#endif

EXTERN_C const CLSID CLSID_IISExtDsCrMap;

#ifdef __cplusplus

class DECLSPEC_UUID("bc36cde8-afeb-11d1-9868-00a0c922e703")
IISExtDsCrMap;
#endif

EXTERN_C const CLSID CLSID_IISExtApplicationPool;

#ifdef __cplusplus

class DECLSPEC_UUID("E99F9D0C-FB39-402b-9EEB-AA185237BD34")
IISExtApplicationPool;
#endif

EXTERN_C const CLSID CLSID_IISExtApplicationPools;

#ifdef __cplusplus

class DECLSPEC_UUID("95863074-A389-406a-A2D7-D98BFC95B905")
IISExtApplicationPools;
#endif

EXTERN_C const CLSID CLSID_IISExtWebService;

#ifdef __cplusplus

class DECLSPEC_UUID("40B8F873-B30E-475d-BEC5-4D0EBB0DBAF3")
IISExtWebService;
#endif
#endif /* __IISExt_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\il21dec.h ===
//------------------------------------------------------------------------------
// File: IL21Dec.h
//
// Desc: Line 21 Decoder related definitions and interfaces for ActiveMovie.
//
// Copyright (c) 1992 - 2001, Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------------------------


#ifndef __IL21DEC__
#define __IL21DEC__


//
//  Some enum data types used as line 21 decoder params by the interface
//
typedef enum _AM_LINE21_CCLEVEL {  // should we use TC1, TC2 in stead?
    AM_L21_CCLEVEL_TC2 = 0
} AM_LINE21_CCLEVEL, *PAM_LINE21_CCLEVEL ;

typedef enum _AM_LINE21_CCSERVICE {
    AM_L21_CCSERVICE_None = 0,
    AM_L21_CCSERVICE_Caption1,
    AM_L21_CCSERVICE_Caption2,
    AM_L21_CCSERVICE_Text1,
    AM_L21_CCSERVICE_Text2,
    AM_L21_CCSERVICE_XDS,
    AM_L21_CCSERVICE_DefChannel = 10,
    AM_L21_CCSERVICE_Invalid
} AM_LINE21_CCSERVICE, *PAM_LINE21_CCSERVICE ;

typedef enum _AM_LINE21_CCSTATE {
    AM_L21_CCSTATE_Off = 0,
    AM_L21_CCSTATE_On
} AM_LINE21_CCSTATE, *PAM_LINE21_CCSTATE ;

typedef enum _AM_LINE21_CCSTYLE {
    AM_L21_CCSTYLE_None = 0,
    AM_L21_CCSTYLE_PopOn,
    AM_L21_CCSTYLE_PaintOn,
    AM_L21_CCSTYLE_RollUp
} AM_LINE21_CCSTYLE, *PAM_LINE21_CCSTYLE ;

typedef enum _AM_LINE21_DRAWBGMODE {
    AM_L21_DRAWBGMODE_Opaque,
    AM_L21_DRAWBGMODE_Transparent
} AM_LINE21_DRAWBGMODE, *PAM_LINE21_DRAWBGMODE ;


#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

//
//  Line 21 Decoder standard COM interface
//
DECLARE_INTERFACE_(IAMLine21Decoder, IUnknown)
{
    public:
        //
        // Decoder options to be used by apps
        //

        // What is the decoder's level
        STDMETHOD(GetDecoderLevel)(THIS_ AM_LINE21_CCLEVEL *lpLevel) PURE ;  
        // supported level value is AM_L21Level_TC2 only
        // skipping the SetDecoderLevel( )

        // Which of the services is being currently used
        STDMETHOD(GetCurrentService)(THIS_ AM_LINE21_CCSERVICE *lpService) PURE ;  
        STDMETHOD(SetCurrentService)(THIS_ AM_LINE21_CCSERVICE Service) PURE ;  
        // supported service values are AM_L21Service_Caption1, 
        // AM_L21Service_Caption2, AM_L21Service_Text1, AM_L21Service_Text2, 
        // AM_L21Service_XDS, AM_L21Service_None)

        // Query/Set the service state (On/Off)
        // supported state values are AM_L21State_On and AM_L21State_Off
        STDMETHOD(GetServiceState)(THIS_ AM_LINE21_CCSTATE *lpState) PURE ;  
        STDMETHOD(SetServiceState)(THIS_ AM_LINE21_CCSTATE State) PURE ;  

        //
        // Output options to be used by downstream filters
        //

        // What size, bitdepth etc should the output video be
        STDMETHOD(GetOutputFormat)(THIS_ LPBITMAPINFOHEADER lpbmih) PURE ;
        // GetOutputFormat() method, if successful, returns 
        // 1.  S_FALSE if no output format has so far been defined by downstream filters
        // 2.  S_OK if an output format has already been defined by downstream filters
        STDMETHOD(SetOutputFormat)(THIS_ LPBITMAPINFO lpbmi) PURE ;

        // Specify physical color to be used in colorkeying the background 
        // for overlay mixing
        STDMETHOD(GetBackgroundColor)(THIS_ DWORD *pdwPhysColor) PURE ;
        STDMETHOD(SetBackgroundColor)(THIS_ DWORD dwPhysColor) PURE ;

        // Specify if whole output bitmap should be redrawn for each sample
        STDMETHOD(GetRedrawAlways)(THIS_ LPBOOL lpbOption) PURE ;
        STDMETHOD(SetRedrawAlways)(THIS_ BOOL bOption) PURE ;

        // Specify if the caption text background should be opaque/transparent
        STDMETHOD(GetDrawBackgroundMode)(THIS_ AM_LINE21_DRAWBGMODE *lpMode) PURE ;
        STDMETHOD(SetDrawBackgroundMode)(THIS_ AM_LINE21_DRAWBGMODE Mode) PURE ;
        // supported mode values are AM_L21_DrawBGMode_Opaque and
        // AM_L21_DrawBGMode_Transparent

} ;

#ifdef __cplusplus
}
#endif // __cplusplus
#endif // __IL21DEC__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\iketypes.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for iketypes.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __iketypes_h__
#define __iketypes_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

/* header files for imported files */
#include "fwptypes.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_iketypes_0000_0000 */
/* [local] */ 

#pragma once
#pragma once
#pragma once
#pragma once
#if _MSC_VER >=  800
#if _MSC_VER >= 1200
#pragma warning(push)
#endif
#pragma warning(disable:4201)
#endif
typedef struct IPSEC_V4_UDP_ENCAPSULATION0_ IPSEC_V4_UDP_ENCAPSULATION0;

typedef /* [v1_enum] */ 
enum IKEEXT_KEY_MODULE_TYPE_
    {	IKEEXT_KEY_MODULE_IKE	= 0,
	IKEEXT_KEY_MODULE_AUTHIP	= ( IKEEXT_KEY_MODULE_IKE + 1 ) ,
	IKEEXT_KEY_MODULE_IKEV2	= ( IKEEXT_KEY_MODULE_AUTHIP + 1 ) ,
	IKEEXT_KEY_MODULE_MAX	= ( IKEEXT_KEY_MODULE_IKEV2 + 1 ) 
    } 	IKEEXT_KEY_MODULE_TYPE;

typedef /* [v1_enum] */ 
enum IKEEXT_AUTHENTICATION_METHOD_TYPE_
    {	IKEEXT_PRESHARED_KEY	= 0,
	IKEEXT_CERTIFICATE	= ( IKEEXT_PRESHARED_KEY + 1 ) ,
	IKEEXT_KERBEROS	= ( IKEEXT_CERTIFICATE + 1 ) ,
	IKEEXT_ANONYMOUS	= ( IKEEXT_KERBEROS + 1 ) ,
	IKEEXT_SSL	= ( IKEEXT_ANONYMOUS + 1 ) ,
	IKEEXT_NTLM_V2	= ( IKEEXT_SSL + 1 ) ,
	IKEEXT_IPV6_CGA	= ( IKEEXT_NTLM_V2 + 1 ) ,
	IKEEXT_CERTIFICATE_ECDSA_P256	= ( IKEEXT_IPV6_CGA + 1 ) ,
	IKEEXT_CERTIFICATE_ECDSA_P384	= ( IKEEXT_CERTIFICATE_ECDSA_P256 + 1 ) ,
	IKEEXT_SSL_ECDSA_P256	= ( IKEEXT_CERTIFICATE_ECDSA_P384 + 1 ) ,
	IKEEXT_SSL_ECDSA_P384	= ( IKEEXT_SSL_ECDSA_P256 + 1 ) ,
	IKEEXT_EAP	= ( IKEEXT_SSL_ECDSA_P384 + 1 ) ,
	IKEEXT_AUTHENTICATION_METHOD_TYPE_MAX	= ( IKEEXT_EAP + 1 ) 
    } 	IKEEXT_AUTHENTICATION_METHOD_TYPE;

typedef /* [v1_enum] */ 
enum IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE_
    {	IKEEXT_IMPERSONATION_NONE	= 0,
	IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL	= ( IKEEXT_IMPERSONATION_NONE + 1 ) ,
	IKEEXT_IMPERSONATION_MAX	= ( IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL + 1 ) 
    } 	IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE;

typedef struct IKEEXT_PRESHARED_KEY_AUTHENTICATION0__
    {
    FWP_BYTE_BLOB presharedKey;
    } 	IKEEXT_PRESHARED_KEY_AUTHENTICATION0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
#define IKEEXT_PSK_FLAG_LOCAL_AUTH_ONLY  (0x00000001)
#define IKEEXT_PSK_FLAG_REMOTE_AUTH_ONLY  (0x00000002)
typedef struct IKEEXT_PRESHARED_KEY_AUTHENTICATION1__
    {
    FWP_BYTE_BLOB presharedKey;
    UINT32 flags;
    } 	IKEEXT_PRESHARED_KEY_AUTHENTICATION1;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)
#define IKEEXT_CERT_FLAG_ENABLE_ACCOUNT_MAPPING  (0x00000001)
#define IKEEXT_CERT_FLAG_DISABLE_REQUEST_PAYLOAD (0x00000002)
#define IKEEXT_CERT_FLAG_USE_NAP_CERTIFICATE     (0x00000004)
#define IKEEXT_CERT_FLAG_INTERMEDIATE_CA         (0x00000008)
#define IKEEXT_CERT_FLAG_IGNORE_INIT_CERT_MAP_FAILURE (0x00000010)
#define IKEEXT_CERT_FLAG_PREFER_NAP_CERTIFICATE_OUTBOUND (0x00000020)
typedef struct IKEEXT_CERT_ROOT_CONFIG0_
    {
    FWP_BYTE_BLOB certData;
    UINT32 flags;
    } 	IKEEXT_CERT_ROOT_CONFIG0;

#define IKEEXT_CERT_AUTH_FLAG_SSL_ONE_WAY              (0x00000001)
#define IKEEXT_CERT_AUTH_FLAG_DISABLE_CRL_CHECK        (0x00000002)
#define IKEEXT_CERT_AUTH_ENABLE_CRL_CHECK_STRONG       (0x00000004)
#define IKEEXT_CERT_AUTH_DISABLE_SSL_CERT_VALIDATION (0x00000008)
#if (NTDDI_VERSION >= NTDDI_WIN7)
#define IKEEXT_CERT_AUTH_ALLOW_HTTP_CERT_LOOKUP  (0x00000010)
#define IKEEXT_CERT_AUTH_URL_CONTAINS_BUNDLE  (0x00000020)
#endif // (NTDDI_VERSION >= NTDDI_WIN7)
typedef /* [v1_enum] */ 
enum IKEEXT_CERT_CONFIG_TYPE_
    {	IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST	= 0,
	IKEEXT_CERT_CONFIG_ENTERPRISE_STORE	= ( IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST + 1 ) ,
	IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE	= ( IKEEXT_CERT_CONFIG_ENTERPRISE_STORE + 1 ) ,
	IKEEXT_CERT_CONFIG_UNSPECIFIED	= ( IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE + 1 ) ,
	IKEEXT_CERT_CONFIG_TYPE_MAX	= ( IKEEXT_CERT_CONFIG_UNSPECIFIED + 1 ) 
    } 	IKEEXT_CERT_CONFIG_TYPE;

typedef struct IKEEXT_CERTIFICATE_AUTHENTICATION0_
    {
    IKEEXT_CERT_CONFIG_TYPE inboundConfigType;
    union 
        {
        struct 
            {
            UINT32 inboundRootArraySize;
            IKEEXT_CERT_ROOT_CONFIG0 *inboundRootArray;
            } 	;
        IKEEXT_CERT_ROOT_CONFIG0 *inboundEnterpriseStoreConfig;
        IKEEXT_CERT_ROOT_CONFIG0 *inboundTrustedRootStoreConfig;
        } 	;
    IKEEXT_CERT_CONFIG_TYPE outboundConfigType;
    union 
        {
        struct 
            {
            UINT32 outboundRootArraySize;
            IKEEXT_CERT_ROOT_CONFIG0 *outboundRootArray;
            } 	;
        IKEEXT_CERT_ROOT_CONFIG0 *outboundEnterpriseStoreConfig;
        IKEEXT_CERT_ROOT_CONFIG0 *outboundTrustedRootStoreConfig;
        } 	;
    UINT32 flags;
    } 	IKEEXT_CERTIFICATE_AUTHENTICATION0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_CERTIFICATE_AUTHENTICATION1_
    {
    IKEEXT_CERT_CONFIG_TYPE inboundConfigType;
    union 
        {
        struct 
            {
            UINT32 inboundRootArraySize;
            IKEEXT_CERT_ROOT_CONFIG0 *inboundRootArray;
            } 	;
        IKEEXT_CERT_ROOT_CONFIG0 *inboundEnterpriseStoreConfig;
        IKEEXT_CERT_ROOT_CONFIG0 *inboundTrustedRootStoreConfig;
         /* Empty union arm */ 
        } 	;
    IKEEXT_CERT_CONFIG_TYPE outboundConfigType;
    union 
        {
        struct 
            {
            UINT32 outboundRootArraySize;
            IKEEXT_CERT_ROOT_CONFIG0 *outboundRootArray;
            } 	;
        IKEEXT_CERT_ROOT_CONFIG0 *outboundEnterpriseStoreConfig;
        IKEEXT_CERT_ROOT_CONFIG0 *outboundTrustedRootStoreConfig;
         /* Empty union arm */ 
        } 	;
    UINT32 flags;
    FWP_BYTE_BLOB localCertLocationUrl;
    } 	IKEEXT_CERTIFICATE_AUTHENTICATION1;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_IPV6_CGA_AUTHENTICATION0_
    {
    wchar_t *keyContainerName;
    wchar_t *cspName;
    UINT32 cspType;
    FWP_BYTE_ARRAY16 cgaModifier;
    BYTE cgaCollisionCount;
    } 	IKEEXT_IPV6_CGA_AUTHENTICATION0;

#define IKEEXT_KERB_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION (0x00000001)
#define IKEEXT_KERB_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS (0x00000002)
typedef struct IKEEXT_KERBEROS_AUTHENTICATION0__
    {
    UINT32 flags;
    } 	IKEEXT_KERBEROS_AUTHENTICATION0;

#define IKEEXT_NTLM_V2_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS (0x00000001)
typedef struct IKEEXT_NTLM_V2_AUTHENTICATION0__
    {
    UINT32 flags;
    } 	IKEEXT_NTLM_V2_AUTHENTICATION0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
#define IKEEXT_EAP_FLAG_LOCAL_AUTH_ONLY  (0x00000001)
#define IKEEXT_EAP_FLAG_REMOTE_AUTH_ONLY  (0x00000002)
typedef struct IKEEXT_EAP_AUTHENTICATION0__
    {
    UINT32 flags;
    } 	IKEEXT_EAP_AUTHENTICATION0;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_AUTHENTICATION_METHOD0_
    {
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    union 
        {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION0 presharedKeyAuthentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION0 certificateAuthentication;
        IKEEXT_KERBEROS_AUTHENTICATION0 kerberosAuthentication;
        IKEEXT_NTLM_V2_AUTHENTICATION0 ntlmV2Authentication;
         /* Empty union arm */ 
        IKEEXT_CERTIFICATE_AUTHENTICATION0 sslAuthentication;
        IKEEXT_IPV6_CGA_AUTHENTICATION0 cgaAuthentication;
        } 	;
    } 	IKEEXT_AUTHENTICATION_METHOD0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_AUTHENTICATION_METHOD1_
    {
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    union 
        {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION1 presharedKeyAuthentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION1 certificateAuthentication;
        IKEEXT_KERBEROS_AUTHENTICATION0 kerberosAuthentication;
        IKEEXT_NTLM_V2_AUTHENTICATION0 ntlmV2Authentication;
         /* Empty union arm */ 
        IKEEXT_CERTIFICATE_AUTHENTICATION1 sslAuthentication;
        IKEEXT_IPV6_CGA_AUTHENTICATION0 cgaAuthentication;
        IKEEXT_EAP_AUTHENTICATION0 eapAuthentication;
        } 	;
    } 	IKEEXT_AUTHENTICATION_METHOD1;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)
typedef /* [v1_enum] */ 
enum IKEEXT_CIPHER_TYPE_
    {	IKEEXT_CIPHER_DES	= 0,
	IKEEXT_CIPHER_3DES	= ( IKEEXT_CIPHER_DES + 1 ) ,
	IKEEXT_CIPHER_AES_128	= ( IKEEXT_CIPHER_3DES + 1 ) ,
	IKEEXT_CIPHER_AES_192	= ( IKEEXT_CIPHER_AES_128 + 1 ) ,
	IKEEXT_CIPHER_AES_256	= ( IKEEXT_CIPHER_AES_192 + 1 ) ,
	IKEEXT_CIPHER_TYPE_MAX	= ( IKEEXT_CIPHER_AES_256 + 1 ) 
    } 	IKEEXT_CIPHER_TYPE;

typedef struct IKEEXT_CIPHER_ALGORITHM0_
    {
    IKEEXT_CIPHER_TYPE algoIdentifier;
    UINT32 keyLen;
    UINT32 rounds;
    } 	IKEEXT_CIPHER_ALGORITHM0;

typedef /* [v1_enum] */ 
enum IKEEXT_INTEGRITY_TYPE_
    {	IKEEXT_INTEGRITY_MD5	= 0,
	IKEEXT_INTEGRITY_SHA1	= ( IKEEXT_INTEGRITY_MD5 + 1 ) ,
	IKEEXT_INTEGRITY_SHA_256	= ( IKEEXT_INTEGRITY_SHA1 + 1 ) ,
	IKEEXT_INTEGRITY_SHA_384	= ( IKEEXT_INTEGRITY_SHA_256 + 1 ) ,
	IKEEXT_INTEGRITY_TYPE_MAX	= ( IKEEXT_INTEGRITY_SHA_384 + 1 ) 
    } 	IKEEXT_INTEGRITY_TYPE;

typedef struct IKEEXT_INTEGRITY_ALGORITHM0_
    {
    IKEEXT_INTEGRITY_TYPE algoIdentifier;
    } 	IKEEXT_INTEGRITY_ALGORITHM0;

typedef /* [v1_enum] */ 
enum IKEEXT_DH_GROUP_
    {	IKEEXT_DH_GROUP_NONE	= 0,
	IKEEXT_DH_GROUP_1	= ( IKEEXT_DH_GROUP_NONE + 1 ) ,
	IKEEXT_DH_GROUP_2	= ( IKEEXT_DH_GROUP_1 + 1 ) ,
	IKEEXT_DH_GROUP_2048	= ( IKEEXT_DH_GROUP_2 + 1 ) ,
	IKEEXT_DH_ECP_256	= ( IKEEXT_DH_GROUP_2048 + 1 ) ,
	IKEEXT_DH_ECP_384	= ( IKEEXT_DH_ECP_256 + 1 ) ,
	IKEEXT_DH_GROUP_MAX	= ( IKEEXT_DH_ECP_384 + 1 ) 
    } 	IKEEXT_DH_GROUP;

typedef struct IKEEXT_PROPOSAL0_
    {
    IKEEXT_CIPHER_ALGORITHM0 cipherAlgorithm;
    IKEEXT_INTEGRITY_ALGORITHM0 integrityAlgorithm;
    UINT32 maxLifetimeSeconds;
    IKEEXT_DH_GROUP dhGroup;
    UINT32 quickModeLimit;
    } 	IKEEXT_PROPOSAL0;

#define IKEEXT_POLICY_FLAG_DISABLE_DIAGNOSTICS (0x00000001)
#define IKEEXT_POLICY_FLAG_NO_MACHINE_LUID_VERIFY (0x00000002)
#define IKEEXT_POLICY_FLAG_NO_IMPERSONATION_LUID_VERIFY (0x00000004)
#define IKEEXT_POLICY_FLAG_ENABLE_OPTIONAL_DH (0x00000008)
typedef struct IKEEXT_POLICY0_
    {
    UINT32 softExpirationTime;
    UINT32 numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD0 *authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    UINT32 numIkeProposals;
    IKEEXT_PROPOSAL0 *ikeProposals;
    UINT32 flags;
    UINT32 maxDynamicFilters;
    } 	IKEEXT_POLICY0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_POLICY1_
    {
    UINT32 softExpirationTime;
    UINT32 numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD1 *authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    UINT32 numIkeProposals;
    IKEEXT_PROPOSAL0 *ikeProposals;
    UINT32 flags;
    UINT32 maxDynamicFilters;
    UINT32 retransmitDurationSecs;
    } 	IKEEXT_POLICY1;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_EM_POLICY0_
    {
    UINT32 numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD0 *authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    } 	IKEEXT_EM_POLICY0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_EM_POLICY1_
    {
    UINT32 numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD1 *authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    } 	IKEEXT_EM_POLICY1;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)
#define IKEEXT_ERROR_CODE_COUNT  \

(ERROR_IPSEC_IKE_NEG_STATUS_END - ERROR_IPSEC_IKE_NEG_STATUS_BEGIN)
typedef struct IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0_
    {
    UINT32 currentActiveMainModes;
    UINT32 totalMainModesStarted;
    UINT32 totalSuccessfulMainModes;
    UINT32 totalFailedMainModes;
    UINT32 totalResponderMainModes;
    UINT32 currentNewResponderMainModes;
    UINT32 currentActiveQuickModes;
    UINT32 totalQuickModesStarted;
    UINT32 totalSuccessfulQuickModes;
    UINT32 totalFailedQuickModes;
    UINT32 totalAcquires;
    UINT32 totalReinitAcquires;
    UINT32 currentActiveExtendedModes;
    UINT32 totalExtendedModesStarted;
    UINT32 totalSuccessfulExtendedModes;
    UINT32 totalFailedExtendedModes;
    UINT32 totalImpersonationExtendedModes;
    UINT32 totalImpersonationMainModes;
    } 	IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1_
    {
    UINT32 currentActiveMainModes;
    UINT32 totalMainModesStarted;
    UINT32 totalSuccessfulMainModes;
    UINT32 totalFailedMainModes;
    UINT32 totalResponderMainModes;
    UINT32 currentNewResponderMainModes;
    UINT32 currentActiveQuickModes;
    UINT32 totalQuickModesStarted;
    UINT32 totalSuccessfulQuickModes;
    UINT32 totalFailedQuickModes;
    UINT32 totalAcquires;
    UINT32 totalReinitAcquires;
    UINT32 currentActiveExtendedModes;
    UINT32 totalExtendedModesStarted;
    UINT32 totalSuccessfulExtendedModes;
    UINT32 totalFailedExtendedModes;
    UINT32 totalImpersonationExtendedModes;
    UINT32 totalImpersonationMainModes;
    } 	IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_KEYMODULE_STATISTICS0_
    {
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 v4Statistics;
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 v6Statistics;
    UINT32 errorFrequencyTable[ 97 ];
    UINT32 mainModeNegotiationTime;
    UINT32 quickModeNegotiationTime;
    UINT32 extendedModeNegotiationTime;
    } 	IKEEXT_KEYMODULE_STATISTICS0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_KEYMODULE_STATISTICS1_
    {
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 v4Statistics;
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 v6Statistics;
    UINT32 errorFrequencyTable[ 97 ];
    UINT32 mainModeNegotiationTime;
    UINT32 quickModeNegotiationTime;
    UINT32 extendedModeNegotiationTime;
    } 	IKEEXT_KEYMODULE_STATISTICS1;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0_
    {
    UINT32 totalSocketReceiveFailures;
    UINT32 totalSocketSendFailures;
    } 	IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1_
    {
    UINT32 totalSocketReceiveFailures;
    UINT32 totalSocketSendFailures;
    } 	IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_COMMON_STATISTICS0_
    {
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 v4Statistics;
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 v6Statistics;
    UINT32 totalPacketsReceived;
    UINT32 totalInvalidPacketsReceived;
    UINT32 currentQueuedWorkitems;
    } 	IKEEXT_COMMON_STATISTICS0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_COMMON_STATISTICS1_
    {
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 v4Statistics;
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 v6Statistics;
    UINT32 totalPacketsReceived;
    UINT32 totalInvalidPacketsReceived;
    UINT32 currentQueuedWorkitems;
    } 	IKEEXT_COMMON_STATISTICS1;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_STATISTICS0_
    {
    IKEEXT_KEYMODULE_STATISTICS0 ikeStatistics;
    IKEEXT_KEYMODULE_STATISTICS0 authipStatistics;
    IKEEXT_COMMON_STATISTICS0 commonStatistics;
    } 	IKEEXT_STATISTICS0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_STATISTICS1_
    {
    IKEEXT_KEYMODULE_STATISTICS1 ikeStatistics;
    IKEEXT_KEYMODULE_STATISTICS1 authipStatistics;
    IKEEXT_KEYMODULE_STATISTICS1 ikeV2Statistics;
    IKEEXT_COMMON_STATISTICS1 commonStatistics;
    } 	IKEEXT_STATISTICS1;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_TRAFFIC0_
    {
    FWP_IP_VERSION ipVersion;
    union 
        {
        UINT32 localV4Address;
        UINT8 localV6Address[ 16 ];
        } 	;
    union 
        {
        UINT32 remoteV4Address;
        UINT8 remoteV6Address[ 16 ];
        } 	;
    UINT64 authIpFilterId;
    } 	IKEEXT_TRAFFIC0;

typedef UINT64 IKEEXT_COOKIE;

typedef struct IKEEXT_COOKIE_PAIR0_
    {
    IKEEXT_COOKIE initiator;
    IKEEXT_COOKIE responder;
    } 	IKEEXT_COOKIE_PAIR0;

#define IKEEXT_CERT_CREDENTIAL_FLAG_NAP_CERT     (0x00000001)
typedef struct IKEEXT_CERTIFICATE_CREDENTIAL0_
    {
    FWP_BYTE_BLOB subjectName;
    FWP_BYTE_BLOB certHash;
    UINT32 flags;
    } 	IKEEXT_CERTIFICATE_CREDENTIAL0;

typedef struct IKEEXT_NAME_CREDENTIAL0_
    {
    wchar_t *principalName;
    } 	IKEEXT_NAME_CREDENTIAL0;

typedef struct IKEEXT_CREDENTIAL0_
    {
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE impersonationType;
    union 
        {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION0 *presharedKey;
        IKEEXT_CERTIFICATE_CREDENTIAL0 *certificate;
        IKEEXT_NAME_CREDENTIAL0 *name;
         /* Empty union arm */ 
        } 	;
    } 	IKEEXT_CREDENTIAL0;

typedef struct IKEEXT_CREDENTIAL_PAIR0_
    {
    IKEEXT_CREDENTIAL0 localCredentials;
    IKEEXT_CREDENTIAL0 peerCredentials;
    } 	IKEEXT_CREDENTIAL_PAIR0;

typedef struct IKEEXT_CREDENTIALS0_
    {
    UINT32 numCredentials;
    IKEEXT_CREDENTIAL_PAIR0 *credentials;
    } 	IKEEXT_CREDENTIALS0;

typedef struct IKEEXT_SA_DETAILS0_
    {
    UINT64 saId;
    IKEEXT_KEY_MODULE_TYPE keyModuleType;
    FWP_IP_VERSION ipVersion;
    union 
        {
        IPSEC_V4_UDP_ENCAPSULATION0 *v4UdpEncapsulation;
         /* Empty union arm */ 
        } 	;
    IKEEXT_TRAFFIC0 ikeTraffic;
    IKEEXT_PROPOSAL0 ikeProposal;
    IKEEXT_COOKIE_PAIR0 cookiePair;
    IKEEXT_CREDENTIALS0 ikeCredentials;
    GUID ikePolicyKey;
    UINT64 virtualIfTunnelId;
    } 	IKEEXT_SA_DETAILS0;

#if (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_CERTIFICATE_CREDENTIAL1_
    {
    FWP_BYTE_BLOB subjectName;
    FWP_BYTE_BLOB certHash;
    UINT32 flags;
    FWP_BYTE_BLOB certificate;
    } 	IKEEXT_CERTIFICATE_CREDENTIAL1;

typedef struct IKEEXT_CREDENTIAL1_
    {
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE impersonationType;
    union 
        {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION1 *presharedKey;
        IKEEXT_CERTIFICATE_CREDENTIAL1 *certificate;
        IKEEXT_NAME_CREDENTIAL0 *name;
         /* Empty union arm */ 
        } 	;
    } 	IKEEXT_CREDENTIAL1;

typedef struct IKEEXT_CREDENTIAL_PAIR1_
    {
    IKEEXT_CREDENTIAL1 localCredentials;
    IKEEXT_CREDENTIAL1 peerCredentials;
    } 	IKEEXT_CREDENTIAL_PAIR1;

typedef struct IKEEXT_CREDENTIALS1_
    {
    UINT32 numCredentials;
    IKEEXT_CREDENTIAL_PAIR1 *credentials;
    } 	IKEEXT_CREDENTIALS1;

typedef struct IKEEXT_SA_DETAILS1_
    {
    UINT64 saId;
    IKEEXT_KEY_MODULE_TYPE keyModuleType;
    FWP_IP_VERSION ipVersion;
    union 
        {
        IPSEC_V4_UDP_ENCAPSULATION0 *v4UdpEncapsulation;
         /* Empty union arm */ 
        } 	;
    IKEEXT_TRAFFIC0 ikeTraffic;
    IKEEXT_PROPOSAL0 ikeProposal;
    IKEEXT_COOKIE_PAIR0 cookiePair;
    IKEEXT_CREDENTIALS1 ikeCredentials;
    GUID ikePolicyKey;
    UINT64 virtualIfTunnelId;
    FWP_BYTE_BLOB correlationKey;
    } 	IKEEXT_SA_DETAILS1;

#endif // (NTDDI_VERSION >= NTDDI_WIN7)
typedef struct IKEEXT_SA_ENUM_TEMPLATE0_
    {
    FWP_CONDITION_VALUE0 localSubNet;
    FWP_CONDITION_VALUE0 remoteSubNet;
    FWP_BYTE_BLOB localMainModeCertHash;
    } 	IKEEXT_SA_ENUM_TEMPLATE0;

typedef /* [v1_enum] */ 
enum IKEEXT_MM_SA_STATE_
    {	IKEEXT_MM_SA_STATE_NONE	= 0,
	IKEEXT_MM_SA_STATE_SA_SENT	= ( IKEEXT_MM_SA_STATE_NONE + 1 ) ,
	IKEEXT_MM_SA_STATE_SSPI_SENT	= ( IKEEXT_MM_SA_STATE_SA_SENT + 1 ) ,
	IKEEXT_MM_SA_STATE_FINAL	= ( IKEEXT_MM_SA_STATE_SSPI_SENT + 1 ) ,
	IKEEXT_MM_SA_STATE_FINAL_SENT	= ( IKEEXT_MM_SA_STATE_FINAL + 1 ) ,
	IKEEXT_MM_SA_STATE_COMPLETE	= ( IKEEXT_MM_SA_STATE_FINAL_SENT + 1 ) ,
	IKEEXT_MM_SA_STATE_MAX	= ( IKEEXT_MM_SA_STATE_COMPLETE + 1 ) 
    } 	IKEEXT_MM_SA_STATE;

typedef /* [v1_enum] */ 
enum IKEEXT_QM_SA_STATE_
    {	IKEEXT_QM_SA_STATE_NONE	= 0,
	IKEEXT_QM_SA_STATE_INITIAL	= ( IKEEXT_QM_SA_STATE_NONE + 1 ) ,
	IKEEXT_QM_SA_STATE_FINAL	= ( IKEEXT_QM_SA_STATE_INITIAL + 1 ) ,
	IKEEXT_QM_SA_STATE_COMPLETE	= ( IKEEXT_QM_SA_STATE_FINAL + 1 ) ,
	IKEEXT_QM_SA_STATE_MAX	= ( IKEEXT_QM_SA_STATE_COMPLETE + 1 ) 
    } 	IKEEXT_QM_SA_STATE;

typedef /* [v1_enum] */ 
enum IKEEXT_EM_SA_STATE_
    {	IKEEXT_EM_SA_STATE_NONE	= 0,
	IKEEXT_EM_SA_STATE_SENT_ATTS	= ( IKEEXT_EM_SA_STATE_NONE + 1 ) ,
	IKEEXT_EM_SA_STATE_SSPI_SENT	= ( IKEEXT_EM_SA_STATE_SENT_ATTS + 1 ) ,
	IKEEXT_EM_SA_STATE_AUTH_COMPLETE	= ( IKEEXT_EM_SA_STATE_SSPI_SENT + 1 ) ,
	IKEEXT_EM_SA_STATE_FINAL	= ( IKEEXT_EM_SA_STATE_AUTH_COMPLETE + 1 ) ,
	IKEEXT_EM_SA_STATE_COMPLETE	= ( IKEEXT_EM_SA_STATE_FINAL + 1 ) ,
	IKEEXT_EM_SA_STATE_MAX	= ( IKEEXT_EM_SA_STATE_COMPLETE + 1 ) 
    } 	IKEEXT_EM_SA_STATE;

typedef /* [v1_enum] */ 
enum IKEEXT_SA_ROLE_
    {	IKEEXT_SA_ROLE_INITIATOR	= 0,
	IKEEXT_SA_ROLE_RESPONDER	= ( IKEEXT_SA_ROLE_INITIATOR + 1 ) ,
	IKEEXT_SA_ROLE_MAX	= ( IKEEXT_SA_ROLE_RESPONDER + 1 ) 
    } 	IKEEXT_SA_ROLE;

#if _MSC_VER >=  800
#if _MSC_VER >= 1200
#pragma warning(pop)
#else
#pragma warning(default:4201)
#endif
#endif


extern RPC_IF_HANDLE __MIDL_itf_iketypes_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_iketypes_0000_0000_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\IIScnfg.h ===
/*++



   Copyright (c) 1997-1999 Microsoft Corporation

   Module  Name :

       iiscnfg.h

   Abstract:

        Contains public Metadata IDs used by IIS.

   Environment:

      Win32 User Mode

--*/

#ifndef _IISCNFG_H_
#define _IISCNFG_H_


//
// Paths
//

#define IIS_MD_LOCAL_MACHINE_PATH       "LM"

//
// Name of the default publishing root under an instance
//

#define IIS_MD_INSTANCE_ROOT            "Root"

//
//  ISAPI Filters are kept in a list under the instances and the service (for
//  global filters) in the following format:
//
//  LM/W3Svc/<Instance>/Filters
//      MD_FILTER_LOAD_ORDER  "Filter1, Filter2, Filter3"
//
//  LM/W3Svc/<Instance>/Filters/Filter1
//      MD_FILTER_IMAGE_PATH  "d:\inetsrv\myfilter.dll"
//
//  LM/W3Svc/<Instance>/Filters/Filter2
//      MD_FILTER_IMAGE_PATH  "d:\inetsrv\otherfilter.dll"
//

#define IIS_MD_ISAPI_FILTERS            "/Filters"

//
// Path below each service to the key that publishes service information
//

#define IIS_MD_SVC_INFO_PATH            "Info"

//
// ADSI schema properties path
//

#define IIS_MD_ADSI_SCHEMA_PATH_A       "/Schema"
#define IIS_MD_ADSI_SCHEMA_PATH_W       L"/Schema"
#define IIS_MD_ADSI_METAID_BEGIN        130000

//
// user types
//
// There are two user types:
//
//   Server configuration - All the properties for configuring the server that
//      are not applicable to files and directories - such as Port, Host name,
//      Server comment, Connection timeout etc.
//
//  File/Dir configuration - All the properties that can be configured down to
//      the files and directories - such as Access permissions (Read, Write etc),
//      Extension mapping, IP Security etc.
//

#define IIS_MD_UT_SERVER                1   // Server configuration parameters
#define IIS_MD_UT_FILE                  2   // File/Dir inheritable properties
#define IIS_MD_UT_WAM                 100   // Web Application configuration parameters
#define ASP_MD_UT_APP                 101   // ASP application configuration parameters
#define IIS_MD_UT_END_RESERVED       2000   // All user types below this are
                                            // reserved for IIS services


//
//  Metabase property IDs must be unique.  This table defines reserved ranges
//

#define IIS_MD_ID_BEGIN_RESERVED    0x00000001      // IIS reserved range
#define IIS_MD_ID_END_RESERVED      0x00007fff
#define ASP_MD_ID_BEGIN_RESERVED    0x00007000      // ASP reserved range, subrange of IIS.
#define ASP_MD_ID_END_RESERVED      0x000074ff
#define WAM_MD_ID_BEGIN_RESERVED    0x00007500      // ASP reserved range, subrange of IIS.
#define WAM_MD_ID_END_RESERVED      0x00007fff
#define FP_MD_ID_BEGIN_RESERVED     0x00008000      // Front page reserved range
#define FP_MD_ID_END_RESERVED       0x00008fff
#define SMTP_MD_ID_BEGIN_RESERVED   0x00009000
#define SMTP_MD_ID_END_RESERVED     0x00009fff
#define POP3_MD_ID_BEGIN_RESERVED   0x0000a000
#define POP3_MD_ID_END_RESERVED     0x0000afff
#define NNTP_MD_ID_BEGIN_RESERVED   0x0000b000
#define NNTP_MD_ID_END_RESERVED     0x0000bfff
#define IMAP_MD_ID_BEGIN_RESERVED   0x0000c000
#define IMAP_MD_ID_END_RESERVED     0x0000cfff
#define MSCS_MD_ID_BEGIN_RESERVED   0x0000d000
#define MSCS_MD_ID_END_RESERVED     0x0000dfff
#define APPCTR_MD_ID_BEGIN_RESERVED 0x0000e000
#define APPCTR_MD_ID_END_RESERVED   0x0000efff

#define USER_MD_ID_BASE_RESERVED    0x0000ffff

//
//  General server related attributes - these should be added in the metabase
//  with a user type of IIS_MD_UT_SERVER
//

#define IIS_MD_SERVER_BASE              1000

//
//  These are global to all services and should only be set at
//  the IIS root
//

#define MD_MAX_BANDWIDTH                (IIS_MD_SERVER_BASE+0  )
#define MD_KEY_TYPE                     (IIS_MD_SERVER_BASE+2  )
#define MD_MAX_BANDWIDTH_BLOCKED        (IIS_MD_SERVER_BASE+3  )
#define MD_SCHEMA_METAID                (IIS_MD_SERVER_BASE+4  )

//
//  These properties are applicable to both HTTP and FTP virtual
//  servers
//

#define MD_SERVER_COMMAND               (IIS_MD_SERVER_BASE+12 )
#define MD_CONNECTION_TIMEOUT           (IIS_MD_SERVER_BASE+13 )
#define MD_MAX_CONNECTIONS              (IIS_MD_SERVER_BASE+14 )
#define MD_SERVER_COMMENT               (IIS_MD_SERVER_BASE+15 )
#define MD_SERVER_STATE                 (IIS_MD_SERVER_BASE+16 )
#define MD_SERVER_AUTOSTART             (IIS_MD_SERVER_BASE+17 )
#define MD_SERVER_SIZE                  (IIS_MD_SERVER_BASE+18 )
#define MD_SERVER_LISTEN_BACKLOG        (IIS_MD_SERVER_BASE+19 )
#define MD_SERVER_LISTEN_TIMEOUT        (IIS_MD_SERVER_BASE+20 )
#define MD_DOWNLEVEL_ADMIN_INSTANCE     (IIS_MD_SERVER_BASE+21 )
#define MD_LEVELS_TO_SCAN               (IIS_MD_SERVER_BASE+22 )
#define MD_SERVER_BINDINGS              (IIS_MD_SERVER_BASE+23 )
#define MD_MAX_ENDPOINT_CONNECTIONS     (IIS_MD_SERVER_BASE+24 )
#define MD_SERVER_CONFIGURATION_INFO    (IIS_MD_SERVER_BASE+27 )
#define MD_IISADMIN_EXTENSIONS          (IIS_MD_SERVER_BASE+28 )
#define MD_DISABLE_SOCKET_POOLING       (IIS_MD_SERVER_BASE+29 )
#define MD_METADATA_ID_REGISTRATION     (IIS_MD_SERVER_BASE+30 )


//
//  These properties are specific to HTTP and belong to the website
//

#define IIS_MD_HTTP_BASE                2000

#define MD_SECURE_BINDINGS              (IIS_MD_HTTP_BASE+21 )

#define MD_BINDINGS                     (IIS_MD_HTTP_BASE+22 )
#define MD_ENABLEDPROTOCOLS             (IIS_MD_HTTP_BASE+23 )


#define MD_FILTER_LOAD_ORDER            (IIS_MD_HTTP_BASE+40 )
#define MD_FILTER_IMAGE_PATH            (IIS_MD_HTTP_BASE+41 )
#define MD_FILTER_STATE                 (IIS_MD_HTTP_BASE+42 )
#define MD_FILTER_ENABLED               (IIS_MD_HTTP_BASE+43 )
#define MD_FILTER_FLAGS                 (IIS_MD_HTTP_BASE+44 )
#define MD_FILTER_DESCRIPTION           (IIS_MD_HTTP_BASE+45 )
#define MD_FILTER_ENABLE_CACHE          (IIS_MD_HTTP_BASE+46 )

#define MD_ADV_NOTIFY_PWD_EXP_IN_DAYS   (IIS_MD_HTTP_BASE+63 )
#define MD_ADV_CACHE_TTL                (IIS_MD_HTTP_BASE+64 )
#define MD_NET_LOGON_WKS                (IIS_MD_HTTP_BASE+65 )
#define MD_USE_HOST_NAME                (IIS_MD_HTTP_BASE+66 )

#define MD_AUTH_CHANGE_FLAGS            (IIS_MD_HTTP_BASE+68 )

#define MD_PROCESS_NTCR_IF_LOGGED_ON    (IIS_MD_HTTP_BASE+70 )

#define MD_FRONTPAGE_WEB                (IIS_MD_HTTP_BASE+72 )
#define MD_IN_PROCESS_ISAPI_APPS        (IIS_MD_HTTP_BASE+73 )


#define MD_AUTH_CHANGE_URL              (IIS_MD_HTTP_BASE+60 )
#define MD_AUTH_EXPIRED_URL             (IIS_MD_HTTP_BASE+61 )
#define MD_AUTH_EXPIRED_UNSECUREURL     (IIS_MD_HTTP_BASE+67 )

#define MD_ALLOW_PATH_INFO_FOR_SCRIPT_MAPPINGS  ( IIS_MD_HTTP_BASE+95)

#define MD_APP_FRIENDLY_NAME            (IIS_MD_HTTP_BASE+102)
#define MD_APP_ROOT                     (IIS_MD_HTTP_BASE+103)
#define MD_APP_ISOLATED                 (IIS_MD_HTTP_BASE+104)
#define MD_APP_WAM_CLSID                (IIS_MD_HTTP_BASE+105)
#define MD_APP_PACKAGE_ID               (IIS_MD_HTTP_BASE+106)
#define MD_APP_PACKAGE_NAME             (IIS_MD_HTTP_BASE+107)
#define MD_APP_OOP_RECOVER_LIMIT        (IIS_MD_HTTP_BASE+110)
#define MD_APP_PERIODIC_RESTART_TIME    (IIS_MD_HTTP_BASE+111)
#define MD_APP_PERIODIC_RESTART_REQUESTS  (IIS_MD_HTTP_BASE+112)
#define MD_APP_PERIODIC_RESTART_SCHEDULE  (IIS_MD_HTTP_BASE+113)
#define MD_APP_SHUTDOWN_TIME_LIMIT      (IIS_MD_HTTP_BASE+114)


#define MD_ADMIN_INSTANCE               (IIS_MD_HTTP_BASE+115)
// This is only used by setup & UI
#define MD_NOT_DELETABLE                (IIS_MD_HTTP_BASE+116)


#define MD_APP_TRACE_URL_LIST           (IIS_MD_HTTP_BASE+118)
#define MD_CENTRAL_W3C_LOGGING_ENABLED  (IIS_MD_HTTP_BASE+119)


#define MD_CUSTOM_ERROR_DESC            (IIS_MD_HTTP_BASE+120)

//
//  Client Access License parameters
//
#define MD_CAL_VC_PER_CONNECT           (IIS_MD_HTTP_BASE+130)
#define MD_CAL_AUTH_RESERVE_TIMEOUT     (IIS_MD_HTTP_BASE+131)
#define MD_CAL_SSL_RESERVE_TIMEOUT      (IIS_MD_HTTP_BASE+132)
#define MD_CAL_W3_ERROR                 (IIS_MD_HTTP_BASE+133)

//
// CPU Accounting and Throttling Properties
//

//
// The enabled flags are per Application or CGI
//

#define MD_CPU_CGI_ENABLED              (IIS_MD_HTTP_BASE+140)
#define MD_CPU_APP_ENABLED              (IIS_MD_HTTP_BASE+141)
#define MD_CPU_LIMITS_ENABLED           (IIS_MD_HTTP_BASE+143)

#define MD_CPU_RESET_INTERVAL           (IIS_MD_HTTP_BASE+144)

#define MD_CPU_LOGGING_INTERVAL         (IIS_MD_HTTP_BASE+145)
#define MD_CPU_LOGGING_OPTIONS          (IIS_MD_HTTP_BASE+146)
#define MD_CPU_CGI_LIMIT                (IIS_MD_HTTP_BASE+148)
#define MD_CPU_LIMIT_LOGEVENT           (IIS_MD_HTTP_BASE+149)
#define MD_CPU_LIMIT_PRIORITY           (IIS_MD_HTTP_BASE+150)
#define MD_CPU_LIMIT_PROCSTOP           (IIS_MD_HTTP_BASE+151)
#define MD_CPU_LIMIT_PAUSE              (IIS_MD_HTTP_BASE+152)


#define MD_SET_HOST_NAME                (IIS_MD_HTTP_BASE+154)

//
// Valid values for CPU Accounting's MD_CPU_LOGGING_OPTIONS field
//

#define MD_CPU_DISABLE_ALL_LOGGING      0x0
#define MD_CPU_ENABLE_ALL_PROC_LOGGING  0x1
#define MD_CPU_ENABLE_CGI_LOGGING       0x2
#define MD_CPU_ENABLE_APP_LOGGING       0x4

//
// Valid values for CPU Accounting's MD_CPU_LOGGING_MASK field
// This defines which fields will be logged
//

#define MD_CPU_ENABLE_EVENT             0x01
#define MD_CPU_ENABLE_PROC_TYPE         0x02
#define MD_CPU_ENABLE_USER_TIME         0x04
#define MD_CPU_ENABLE_KERNEL_TIME       0x08
#define MD_CPU_ENABLE_PAGE_FAULTS       0x10
#define MD_CPU_ENABLE_TOTAL_PROCS       0x20
#define MD_CPU_ENABLE_ACTIVE_PROCS      0x40
#define MD_CPU_ENABLE_TERMINATED_PROCS  0x80

#define MD_CPU_ENABLE_LOGGING           0x80000000


//
//  Site Server properties
//


//
// Properties to disable/restrict request handlers.
//

#define MD_ISAPI_RESTRICTION_LIST           (IIS_MD_HTTP_BASE+163)
#define MD_CGI_RESTRICTION_LIST             (IIS_MD_HTTP_BASE+164)
#define MD_RESTRICTION_LIST_CUSTOM_DESC     (IIS_MD_HTTP_BASE+165)
#define MD_SECURITY_SETUP_REQUIRED          (IIS_MD_HTTP_BASE+166)
#define MD_APP_DEPENDENCIES                 (IIS_MD_HTTP_BASE+167)
#define MD_WEB_SVC_EXT_RESTRICTION_LIST     (IIS_MD_HTTP_BASE+168)

#define MD_MD_SERVER_SS_AUTH_MAPPING        (IIS_MD_HTTP_BASE+200)

//
// valid values for MD_CERT_CHECK_MODE
//

#define MD_CERT_NO_REVOC_CHECK                   0x00000001
#define MD_CERT_CACHE_RETRIEVAL_ONLY             0x00000002
#define MD_CERT_CHECK_REVOCATION_FRESHNESS_TIME  0x00000004
#define MD_CERT_NO_USAGE_CHECK                   0x00010000

//
// HTTP Compression properties.  All are global and unheritable.
//

#define MD_HC_COMPRESSION_DIRECTORY             (IIS_MD_HTTP_BASE+210)
#define MD_HC_CACHE_CONTROL_HEADER              (IIS_MD_HTTP_BASE+211)
#define MD_HC_EXPIRES_HEADER                    (IIS_MD_HTTP_BASE+212)
#define MD_HC_DO_DYNAMIC_COMPRESSION            (IIS_MD_HTTP_BASE+213)
#define MD_HC_DO_STATIC_COMPRESSION             (IIS_MD_HTTP_BASE+214)
#define MD_HC_DO_ON_DEMAND_COMPRESSION          (IIS_MD_HTTP_BASE+215)
#define MD_HC_DO_DISK_SPACE_LIMITING            (IIS_MD_HTTP_BASE+216)
#define MD_HC_NO_COMPRESSION_FOR_HTTP_10        (IIS_MD_HTTP_BASE+217)
#define MD_HC_NO_COMPRESSION_FOR_PROXIES        (IIS_MD_HTTP_BASE+218)
#define MD_HC_NO_COMPRESSION_FOR_RANGE          (IIS_MD_HTTP_BASE+219)
#define MD_HC_SEND_CACHE_HEADERS                (IIS_MD_HTTP_BASE+220)
#define MD_HC_MAX_DISK_SPACE_USAGE              (IIS_MD_HTTP_BASE+221)
#define MD_HC_IO_BUFFER_SIZE                    (IIS_MD_HTTP_BASE+222)
#define MD_HC_COMPRESSION_BUFFER_SIZE           (IIS_MD_HTTP_BASE+223)
#define MD_HC_MAX_QUEUE_LENGTH                  (IIS_MD_HTTP_BASE+224)
#define MD_HC_FILES_DELETED_PER_DISK_FREE       (IIS_MD_HTTP_BASE+225)
#define MD_HC_MIN_FILE_SIZE_FOR_COMP            (IIS_MD_HTTP_BASE+226)
#define MD_HC_COMPRESSION_DLL                   (IIS_MD_HTTP_BASE+237)
#define MD_HC_FILE_EXTENSIONS                   (IIS_MD_HTTP_BASE+238)
#define MD_HC_MIME_TYPE                         (IIS_MD_HTTP_BASE+239)
#define MD_HC_PRIORITY                          (IIS_MD_HTTP_BASE+240)
#define MD_HC_DYNAMIC_COMPRESSION_LEVEL         (IIS_MD_HTTP_BASE+241)
#define MD_HC_ON_DEMAND_COMP_LEVEL              (IIS_MD_HTTP_BASE+242)
#define MD_HC_CREATE_FLAGS                      (IIS_MD_HTTP_BASE+243)
#define MD_HC_SCRIPT_FILE_EXTENSIONS            (IIS_MD_HTTP_BASE+244)

#define MD_HC_DO_NAMESPACE_DYNAMIC_COMPRESSION  (IIS_MD_HTTP_BASE+255)
#define MD_HC_DO_NAMESPACE_STATIC_COMPRESSION   (IIS_MD_HTTP_BASE+256)

//
// Generic property indicating a failure status code - Can be used under
// any component that can fail (virtual directory, filters, applications etc)
//

#define MD_WIN32_ERROR                          (IIS_MD_SERVER_BASE+99 )

//
// Virtual root properties - note MD_ACCESS_PERM is also generally set at
// the virtual directory.  These are used for both HTTP and FTP
//

#define IIS_MD_VR_BASE                  3000

#define MD_VR_PATH                      (IIS_MD_VR_BASE+1 )
#define MD_VR_USERNAME                  (IIS_MD_VR_BASE+2 )
#define MD_VR_PASSWORD                  (IIS_MD_VR_BASE+3 )
#define MD_VR_PASSTHROUGH               (IIS_MD_VR_BASE+6 )
#define MD_VR_NO_CACHE                  (IIS_MD_VR_BASE+7 )
#define MD_VR_IGNORE_TRANSLATE          (IIS_MD_VR_BASE+8 )


//
//  Logging related attributes
//

#define IIS_MD_LOG_BASE                     4000

#define MD_LOG_TYPE                         (IIS_MD_LOG_BASE+0  )
#define MD_LOGFILE_DIRECTORY                (IIS_MD_LOG_BASE+1  )
#define MD_LOG_UNUSED1                      (IIS_MD_LOG_BASE+2  )
#define MD_LOGFILE_PERIOD                   (IIS_MD_LOG_BASE+3  )
#define MD_LOGFILE_TRUNCATE_SIZE            (IIS_MD_LOG_BASE+4  )
#define MD_LOG_PLUGIN_MOD_ID                (IIS_MD_LOG_BASE+5  )
#define MD_LOG_PLUGIN_UI_ID                 (IIS_MD_LOG_BASE+6  )
#define MD_LOGSQL_DATA_SOURCES              (IIS_MD_LOG_BASE+7  )
#define MD_LOGSQL_TABLE_NAME                (IIS_MD_LOG_BASE+8  )
#define MD_LOGSQL_USER_NAME                 (IIS_MD_LOG_BASE+9  )
#define MD_LOGSQL_PASSWORD                  (IIS_MD_LOG_BASE+10 )
#define MD_LOG_PLUGIN_ORDER                 (IIS_MD_LOG_BASE+11 )
#define MD_LOG_PLUGINS_AVAILABLE            (IIS_MD_LOG_BASE+12 )
#define MD_LOGEXT_FIELD_MASK                (IIS_MD_LOG_BASE+13 )
#define MD_LOGEXT_FIELD_MASK2               (IIS_MD_LOG_BASE+14 )

//
// Allow W3C logging file naming and rollover based on Local Time
//

#define MD_LOGFILE_LOCALTIME_ROLLOVER       (IIS_MD_LOG_BASE+15 )

#define IIS_MD_LOG_LAST                     MD_LOGFILE_LOCALTIME_ROLLOVER

//
// Global Flag to denote that IIS will generate one centralized
// binary log file rather than a separate file per web site
//
#define MD_GLOBAL_BINARY_LOGGING_ENABLED    (IIS_MD_LOG_BASE+16 )

//
// Log type
//

#define MD_LOG_TYPE_DISABLED            0
#define MD_LOG_TYPE_ENABLED             1

//
// LOGGING values
//

#define MD_LOGFILE_PERIOD_NONE          0
#define MD_LOGFILE_PERIOD_MAXSIZE       0
#define MD_LOGFILE_PERIOD_DAILY         1
#define MD_LOGFILE_PERIOD_WEEKLY        2
#define MD_LOGFILE_PERIOD_MONTHLY       3
#define MD_LOGFILE_PERIOD_HOURLY        4

//
// Field masks for extended logging
// Fields are logged in order of increasing mask value
//

#define MD_EXTLOG_DATE                  0x00000001
#define MD_EXTLOG_TIME                  0x00000002
#define MD_EXTLOG_CLIENT_IP             0x00000004
#define MD_EXTLOG_USERNAME              0x00000008
#define MD_EXTLOG_SITE_NAME             0x00000010
#define MD_EXTLOG_COMPUTER_NAME         0x00000020
#define MD_EXTLOG_SERVER_IP             0x00000040
#define MD_EXTLOG_METHOD                0x00000080
#define MD_EXTLOG_URI_STEM              0x00000100
#define MD_EXTLOG_URI_QUERY             0x00000200
#define MD_EXTLOG_HTTP_STATUS           0x00000400
#define MD_EXTLOG_WIN32_STATUS          0x00000800
#define MD_EXTLOG_BYTES_SENT            0x00001000
#define MD_EXTLOG_BYTES_RECV            0x00002000
#define MD_EXTLOG_TIME_TAKEN            0x00004000
#define MD_EXTLOG_SERVER_PORT           0x00008000
#define MD_EXTLOG_USER_AGENT            0x00010000
#define MD_EXTLOG_COOKIE                0x00020000
#define MD_EXTLOG_REFERER               0x00040000
#define MD_EXTLOG_PROTOCOL_VERSION      0x00080000
#define MD_EXTLOG_HOST                  0x00100000
#define MD_EXTLOG_HTTP_SUB_STATUS       0x00200000


#define MD_DEFAULT_EXTLOG_FIELDS        (MD_EXTLOG_CLIENT_IP | \
                                         MD_EXTLOG_TIME      | \
                                         MD_EXTLOG_METHOD    | \
                                         MD_EXTLOG_URI_STEM  | \
                                         MD_EXTLOG_HTTP_STATUS | \
                                         MD_EXTLOG_HTTP_SUB_STATUS )

//
// Custom Logging related attributes
//

#define IIS_MD_LOGCUSTOM_BASE           4500

//
// Custom Logging configuration attributes
//

#define MD_LOGCUSTOM_PROPERTY_NAME      (IIS_MD_LOGCUSTOM_BASE+1 )
#define MD_LOGCUSTOM_PROPERTY_HEADER    (IIS_MD_LOGCUSTOM_BASE+2 )
#define MD_LOGCUSTOM_PROPERTY_ID        (IIS_MD_LOGCUSTOM_BASE+3 )
#define MD_LOGCUSTOM_PROPERTY_MASK      (IIS_MD_LOGCUSTOM_BASE+4 )
#define MD_LOGCUSTOM_PROPERTY_DATATYPE  (IIS_MD_LOGCUSTOM_BASE+5 )
#define MD_LOGCUSTOM_SERVICES_STRING    (IIS_MD_LOGCUSTOM_BASE+6 )      // MultiSZ List of services that the property is applicable to.

#define MD_CPU_LOGGING_MASK             (IIS_MD_LOGCUSTOM_BASE+7 )

#define MD_LOGCUSTOM_PROPERTY_NODE_ID   (IIS_MD_LOGCUSTOM_BASE+8 )


#define IIS_MD_LOGCUSTOM_LAST           MD_LOGCUSTOM_PROPERTY_NODE_ID

//
// Valid values for Custom Logging's MD_LOGCUSTOM_PROPERTY_DATATYPE field
//

#define MD_LOGCUSTOM_DATATYPE_INT       0
#define MD_LOGCUSTOM_DATATYPE_UINT      1
#define MD_LOGCUSTOM_DATATYPE_LONG      2
#define MD_LOGCUSTOM_DATATYPE_ULONG     3
#define MD_LOGCUSTOM_DATATYPE_FLOAT     4
#define MD_LOGCUSTOM_DATATYPE_DOUBLE    5
#define MD_LOGCUSTOM_DATATYPE_LPSTR     6
#define MD_LOGCUSTOM_DATATYPE_LPWSTR    7


//
//  ISAPI Filter Notification Flags
//

#define MD_NOTIFY_SECURE_PORT           0x00000001
#define MD_NOTIFY_NONSECURE_PORT        0x00000002

#define MD_NOTIFY_READ_RAW_DATA         0x00008000
#define MD_NOTIFY_PREPROC_HEADERS       0x00004000
#define MD_NOTIFY_AUTHENTICATION        0x00002000
#define MD_NOTIFY_URL_MAP               0x00001000
#define MD_NOTIFY_ACCESS_DENIED         0x00000800
#define MD_NOTIFY_SEND_RESPONSE         0x00000040
#define MD_NOTIFY_SEND_RAW_DATA         0x00000400
#define MD_NOTIFY_LOG                   0x00000200
#define MD_NOTIFY_END_OF_REQUEST        0x00000080
#define MD_NOTIFY_END_OF_NET_SESSION    0x00000100
#define MD_NOTIFY_AUTH_COMPLETE         0x04000000
//
//  ISAPI Filter ordering flags
//

#define MD_NOTIFY_ORDER_HIGH            0x00080000
#define MD_NOTIFY_ORDER_MEDIUM          0x00040000
#define MD_NOTIFY_ORDER_LOW             0x00020000
#define MD_NOTIFY_ORDER_DEFAULT         MD_NOTIFY_ORDER_LOW

#define MD_NOTIFY_ORDER_MASK            (MD_NOTIFY_ORDER_HIGH   |    \
                                         MD_NOTIFY_ORDER_MEDIUM |    \
                                         MD_NOTIFY_ORDER_LOW)


//
//  These are FTP specific properties
//

#define IIS_MD_FTP_BASE                 5000

#define MD_EXIT_MESSAGE                 (IIS_MD_FTP_BASE+1  )
#define MD_GREETING_MESSAGE             (IIS_MD_FTP_BASE+2  )
#define MD_MAX_CLIENTS_MESSAGE          (IIS_MD_FTP_BASE+3  )
#define MD_MSDOS_DIR_OUTPUT             (IIS_MD_FTP_BASE+4  )
#define MD_ALLOW_ANONYMOUS              (IIS_MD_FTP_BASE+5  )
#define MD_ANONYMOUS_ONLY               (IIS_MD_FTP_BASE+6  )
#define MD_LOG_ANONYMOUS                (IIS_MD_FTP_BASE+7  )
#define MD_LOG_NONANONYMOUS             (IIS_MD_FTP_BASE+8  )
#define MD_ALLOW_REPLACE_ON_RENAME      (IIS_MD_FTP_BASE+9  )
#define MD_SHOW_4_DIGIT_YEAR            (IIS_MD_FTP_BASE+10 )
#define MD_BANNER_MESSAGE               (IIS_MD_FTP_BASE+11 )
#define MD_USER_ISOLATION               (IIS_MD_FTP_BASE+12 )
#define MD_FTP_LOG_IN_UTF_8             (IIS_MD_FTP_BASE+13 )
#define MD_AD_CONNECTIONS_USERNAME      (IIS_MD_FTP_BASE+14 )
#define MD_AD_CONNECTIONS_PASSWORD      (IIS_MD_FTP_BASE+15 )
#define MD_PASSIVE_PORT_RANGE           (IIS_MD_FTP_BASE+16 )
#define MD_SUPPRESS_DEFAULT_BANNER      (IIS_MD_FTP_BASE+17 )
#define MD_FTP_PASV_RESPONSE_IP         (IIS_MD_FTP_BASE+18 )
#define MD_FTP_KEEP_PARTIAL_UPLOADS     (IIS_MD_FTP_BASE+19 )
#define MD_FTP_UTF8_FILE_NAMES          (IIS_MD_FTP_BASE+20 )

//
//  FTPS properties.
//

#define MD_FTPS_SECURE_CONTROL_CHANNEL  (IIS_MD_FTP_BASE+50 )
#define MD_FTPS_SECURE_DATA_CHANNEL     (IIS_MD_FTP_BASE+51 )
#define MD_FTPS_SECURE_ANONYMOUS        (IIS_MD_FTP_BASE+52 )
#define MD_FTPS_128_BITS                (IIS_MD_FTP_BASE+53 )
#define MD_FTPS_ALLOW_CCC               (IIS_MD_FTP_BASE+54 )


//
//  These are SSL specific properties
//

#define IIS_MD_SSL_BASE                 5500

#define MD_SSL_PUBLIC_KEY               ( IIS_MD_SSL_BASE+0 )
#define MD_SSL_PRIVATE_KEY              ( IIS_MD_SSL_BASE+1 )
#define MD_SSL_KEY_PASSWORD             ( IIS_MD_SSL_BASE+2 )
#define MD_SSL_KEY_REQUEST              ( IIS_MD_SSL_BASE+3 )

//
// These are server certificate properties
//
//
// These are Certificate Trust List properties
//

//
// Metabase property that defines whether to use DS mapper or not
//
#define MD_SSL_USE_DS_MAPPER            ( IIS_MD_SSL_BASE+19 )


#define MD_SSL_ALWAYS_NEGO_CLIENT_CERT  ( IIS_MD_SSL_BASE+21 )

//
// Metabase properties that are used by the CertWiz ActiveX control, that
// is used for the Certificate/CTL UI management tool
//

//
// Metabase properties used for Fortezza certificates
//

//
// Metabase properties that are used by the CertWiz ActiveX control to keep
// track of the user's entry history, and whether DEBUG is enabled.  We keep
// these private properties on a per VS basis.
//

//  File and Directory related properties - these should be added in the
//  metabase with a user type of IIS_MD_UT_FILE
//

#define IIS_MD_FILE_PROP_BASE           6000

#define MD_AUTHORIZATION                (IIS_MD_FILE_PROP_BASE )
#define MD_REALM                        (IIS_MD_FILE_PROP_BASE+1 )
#define MD_HTTP_EXPIRES                 (IIS_MD_FILE_PROP_BASE+2 )
#define MD_HTTP_PICS                    (IIS_MD_FILE_PROP_BASE+3 )
#define MD_HTTP_CUSTOM                  (IIS_MD_FILE_PROP_BASE+4 )
#define MD_DIRECTORY_BROWSING           (IIS_MD_FILE_PROP_BASE+5 )
#define MD_DEFAULT_LOAD_FILE            (IIS_MD_FILE_PROP_BASE+6 )
#define MD_CUSTOM_ERROR                 (IIS_MD_FILE_PROP_BASE+8 )
#define MD_FOOTER_DOCUMENT              (IIS_MD_FILE_PROP_BASE+9 )
#define MD_FOOTER_ENABLED               (IIS_MD_FILE_PROP_BASE+10 )
#define MD_HTTP_REDIRECT                (IIS_MD_FILE_PROP_BASE+11 )
#define MD_DEFAULT_LOGON_DOMAIN         (IIS_MD_FILE_PROP_BASE+12 )
#define MD_LOGON_METHOD                 (IIS_MD_FILE_PROP_BASE+13 )
#define MD_SCRIPT_MAPS                  (IIS_MD_FILE_PROP_BASE+14 )
#define MD_MIME_MAP                     (IIS_MD_FILE_PROP_BASE+15 )
#define MD_ACCESS_PERM                  (IIS_MD_FILE_PROP_BASE+16 )
#define MD_IP_SEC                       (IIS_MD_FILE_PROP_BASE+19 )
#define MD_ANONYMOUS_USER_NAME          (IIS_MD_FILE_PROP_BASE+20 )
#define MD_ANONYMOUS_PWD                (IIS_MD_FILE_PROP_BASE+21 )
#define MD_ANONYMOUS_USE_SUBAUTH        (IIS_MD_FILE_PROP_BASE+22 )
#define MD_DONT_LOG                     (IIS_MD_FILE_PROP_BASE+23 )
#define MD_ADMIN_ACL                    (IIS_MD_FILE_PROP_BASE+27 )
#define MD_SSI_EXEC_DISABLED            (IIS_MD_FILE_PROP_BASE+28 )
#define MD_DO_REVERSE_DNS               (IIS_MD_FILE_PROP_BASE+29 )
#define MD_SSL_ACCESS_PERM              (IIS_MD_FILE_PROP_BASE+30 )
#define MD_AUTHORIZATION_PERSISTENCE    (IIS_MD_FILE_PROP_BASE+31 )
#define MD_NTAUTHENTICATION_PROVIDERS   (IIS_MD_FILE_PROP_BASE+32 )
#define MD_SCRIPT_TIMEOUT               (IIS_MD_FILE_PROP_BASE+33 )
#define MD_CACHE_EXTENSIONS             (IIS_MD_FILE_PROP_BASE+34 )
#define MD_CREATE_PROCESS_AS_USER       (IIS_MD_FILE_PROP_BASE+35 )
#define MD_CREATE_PROC_NEW_CONSOLE      (IIS_MD_FILE_PROP_BASE+36 )
#define MD_POOL_IDC_TIMEOUT             (IIS_MD_FILE_PROP_BASE+37 )
#define MD_ALLOW_KEEPALIVES             (IIS_MD_FILE_PROP_BASE+38 )
#define MD_IS_CONTENT_INDEXED           (IIS_MD_FILE_PROP_BASE+39 )
#define MD_CC_NO_CACHE                  (IIS_MD_FILE_PROP_BASE+41 )
#define MD_CC_MAX_AGE                   (IIS_MD_FILE_PROP_BASE+42 )
#define MD_CC_OTHER                     (IIS_MD_FILE_PROP_BASE+43 )
#define MD_REDIRECT_HEADERS             (IIS_MD_FILE_PROP_BASE+44 )
#define MD_UPLOAD_READAHEAD_SIZE        (IIS_MD_FILE_PROP_BASE+45 )
#define MD_PUT_READ_SIZE                (IIS_MD_FILE_PROP_BASE+46 )
#define MD_USE_DIGEST_SSP               (IIS_MD_FILE_PROP_BASE+47 )
#define MD_ENABLE_URL_AUTHORIZATION     (IIS_MD_FILE_PROP_BASE+48 )
#define MD_URL_AUTHORIZATION_STORE_NAME (IIS_MD_FILE_PROP_BASE+49 )
#define MD_URL_AUTHORIZATION_SCOPE_NAME (IIS_MD_FILE_PROP_BASE+50 )
#define MD_MAX_REQUEST_ENTITY_ALLOWED   (IIS_MD_FILE_PROP_BASE+51 )
#define MD_PASSPORT_REQUIRE_AD_MAPPING  (IIS_MD_FILE_PROP_BASE+52 )
#define MD_URL_AUTHORIZATION_IMPERSONATION_LEVEL    (IIS_MD_FILE_PROP_BASE+53 )
#define MD_HTTP_FORWARDER_CUSTOM        (IIS_MD_FILE_PROP_BASE+54 )
#define MD_CUSTOM_DEPLOYMENT_DATA       (IIS_MD_FILE_PROP_BASE+55 )
#define MD_HTTPERRORS_EXISTING_RESPONSE (IIS_MD_FILE_PROP_BASE+56 )


#define ASP_MD_SERVER_BASE                  7000

#define MD_ASP_BUFFERINGON                  (ASP_MD_SERVER_BASE + 0)
#define MD_ASP_LOGERRORREQUESTS             (ASP_MD_SERVER_BASE + 1)
#define MD_ASP_SCRIPTERRORSSENTTOBROWSER    (ASP_MD_SERVER_BASE + 2)
#define MD_ASP_SCRIPTERRORMESSAGE           (ASP_MD_SERVER_BASE + 3)
#define MD_ASP_SCRIPTFILECACHESIZE          (ASP_MD_SERVER_BASE + 4)
#define MD_ASP_SCRIPTENGINECACHEMAX         (ASP_MD_SERVER_BASE + 5)
#define MD_ASP_SCRIPTTIMEOUT                (ASP_MD_SERVER_BASE + 6)
#define MD_ASP_SESSIONTIMEOUT               (ASP_MD_SERVER_BASE + 7)
#define MD_ASP_ENABLEPARENTPATHS            (ASP_MD_SERVER_BASE + 8)
#define MD_ASP_MEMFREEFACTOR                (ASP_MD_SERVER_BASE + 9)    // OBSOLETE
#define MD_ASP_MINUSEDBLOCKS                (ASP_MD_SERVER_BASE + 10)   // OBSOLETE
#define MD_ASP_ALLOWSESSIONSTATE            (ASP_MD_SERVER_BASE + 11)
#define MD_ASP_SCRIPTLANGUAGE               (ASP_MD_SERVER_BASE + 12)
#define MD_ASP_QUEUETIMEOUT                 (ASP_MD_SERVER_BASE + 13)
#define MD_ASP_ALLOWOUTOFPROCCOMPONENTS     (ASP_MD_SERVER_BASE + 14)
#define MD_ASP_ALLOWOUTOFPROCCMPNTS         (MD_ASP_ALLOWOUTOFPROCCOMPONENTS)   // Deprecated.  Use MD_ASP_ALLOWOUTOFPROCCMPNTS
#define MD_ASP_EXCEPTIONCATCHENABLE         (ASP_MD_SERVER_BASE + 15)
#define MD_ASP_CODEPAGE                     (ASP_MD_SERVER_BASE + 16)
#define MD_ASP_SCRIPTLANGUAGELIST           (ASP_MD_SERVER_BASE + 17)
#define MD_ASP_ENABLESERVERDEBUG            (ASP_MD_SERVER_BASE + 18)
#define MD_ASP_ENABLECLIENTDEBUG            (ASP_MD_SERVER_BASE + 19)
#define MD_ASP_TRACKTHREADINGMODEL          (ASP_MD_SERVER_BASE + 20)
// added for IIS 5.0
#define MD_ASP_ENABLEASPHTMLFALLBACK        (ASP_MD_SERVER_BASE + 21)
#define MD_ASP_ENABLECHUNKEDENCODING        (ASP_MD_SERVER_BASE + 22)
#define MD_ASP_ENABLETYPELIBCACHE           (ASP_MD_SERVER_BASE + 23)
#define MD_ASP_ERRORSTONTLOG                (ASP_MD_SERVER_BASE + 24)
#define MD_ASP_PROCESSORTHREADMAX           (ASP_MD_SERVER_BASE + 25)
#define MD_ASP_REQEUSTQUEUEMAX              (ASP_MD_SERVER_BASE + 26)
#define MD_ASP_ENABLEAPPLICATIONRESTART     (ASP_MD_SERVER_BASE + 27)
#define MD_ASP_QUEUECONNECTIONTESTTIME      (ASP_MD_SERVER_BASE + 28)
#define MD_ASP_SESSIONMAX                   (ASP_MD_SERVER_BASE + 29)

// thread gate
#define MD_ASP_THREADGATEENABLED            (ASP_MD_SERVER_BASE + 30)
#define MD_ASP_THREADGATETIMESLICE          (ASP_MD_SERVER_BASE + 31)
#define MD_ASP_THREADGATESLEEPDELAY         (ASP_MD_SERVER_BASE + 32)
#define MD_ASP_THREADGATESLEEPMAX           (ASP_MD_SERVER_BASE + 33)
#define MD_ASP_THREADGATELOADLOW            (ASP_MD_SERVER_BASE + 34)
#define MD_ASP_THREADGATELOADHIGH           (ASP_MD_SERVER_BASE + 35)

// added IIS5.1

// persist template cache
#define MD_ASP_DISKTEMPLATECACHEDIRECTORY   (ASP_MD_SERVER_BASE + 36)
#define MD_ASP_MAXDISKTEMPLATECACHEFILES    (ASP_MD_SERVER_BASE + 40)
#define MD_ASP_EXECUTEINMTA                 (ASP_MD_SERVER_BASE + 41)
#define MD_ASP_LCID                         (ASP_MD_SERVER_BASE + 42)
#define MD_ASP_KEEPSESSIONIDSECURE          (ASP_MD_SERVER_BASE + 43)

// added IIS6.0

// Services without components integration
#define MD_ASP_SERVICE_FLAGS                (ASP_MD_SERVER_BASE + 44)
#define MD_ASP_SERVICE_FLAG_TRACKER         (ASP_MD_SERVER_BASE + 45)
#define MD_ASP_SERVICE_FLAG_FUSION          (ASP_MD_SERVER_BASE + 46)
#define MD_ASP_SERVICE_FLAG_PARTITIONS      (ASP_MD_SERVER_BASE + 47)
#define MD_ASP_SERVICE_PARTITION_ID         (ASP_MD_SERVER_BASE + 48)
#define MD_ASP_SERVICE_SXS_NAME             (ASP_MD_SERVER_BASE + 49)

// Valid flags for MD_ASP_SERVICE_FLAGS property
#define MD_ASP_SERVICE_ENABLE_TRACKER       1
#define MD_ASP_SERVICE_ENABLE_SXS           2
#define MD_ASP_SERVICE_USE_PARTITION        4

// Line number calculation flag.
#define MD_ASP_CALCLINENUMBER               (ASP_MD_SERVER_BASE + 50)

#define MD_ASP_RUN_ONEND_ANON               (ASP_MD_SERVER_BASE + 51)

#define MD_ASP_BUFFER_LIMIT                 (ASP_MD_SERVER_BASE + 52)

#define MD_ASP_MAX_REQUEST_ENTITY_ALLOWED   (ASP_MD_SERVER_BASE + 53)
#define MD_ASP_MAXREQUESTENTITY             MD_ASP_MAX_REQUEST_ENTITY_ALLOWED

#define MD_ASP_ID_LAST                      (ASP_MD_SERVER_BASE + 53)

//
//  Valid values for WAM
//
#define WAM_MD_SERVER_BASE                  7500

#define MD_WAM_USER_NAME                    (WAM_MD_SERVER_BASE+1)
#define MD_WAM_PWD                          (WAM_MD_SERVER_BASE+2)

//
//  Valid values for WEBDAV
//
#define WEBDAV_MD_SERVER_BASE               8500

#define MD_WEBDAV_MAX_ATTRIBUTES_PER_ELEMENT   (WEBDAV_MD_SERVER_BASE+1)

// added IIS6

//
//  Valid values for APP POOL
//

#define IIS_MD_APPPOOL_BASE 9000

#define MD_APPPOOL_PERIODIC_RESTART_TIME              (IIS_MD_APPPOOL_BASE + 1)
#define MD_APPPOOL_PERIODIC_RESTART_REQUEST_COUNT     (IIS_MD_APPPOOL_BASE + 2)
#define MD_APPPOOL_MAX_PROCESS_COUNT                  (IIS_MD_APPPOOL_BASE + 3)
#define MD_APPPOOL_PINGING_ENABLED                    (IIS_MD_APPPOOL_BASE + 4)
#define MD_APPPOOL_IDLE_TIMEOUT                       (IIS_MD_APPPOOL_BASE + 5)
#define MD_APPPOOL_RAPID_FAIL_PROTECTION_ENABLED      (IIS_MD_APPPOOL_BASE + 6)
#define MD_APPPOOL_SMP_AFFINITIZED                    (IIS_MD_APPPOOL_BASE + 7)
#define MD_APPPOOL_SMP_AFFINITIZED_PROCESSOR_MASK     (IIS_MD_APPPOOL_BASE + 8)
#define MD_APPPOOL_ORPHAN_PROCESSES_FOR_DEBUGGING     (IIS_MD_APPPOOL_BASE + 9)
#define MD_APPPOOL_STARTUP_TIMELIMIT                  (IIS_MD_APPPOOL_BASE + 11)
#define MD_APPPOOL_SHUTDOWN_TIMELIMIT                 (IIS_MD_APPPOOL_BASE + 12)
#define MD_APPPOOL_PING_INTERVAL                      (IIS_MD_APPPOOL_BASE + 13)
#define MD_APPPOOL_PING_RESPONSE_TIMELIMIT            (IIS_MD_APPPOOL_BASE + 14)
#define MD_APPPOOL_DISALLOW_OVERLAPPING_ROTATION      (IIS_MD_APPPOOL_BASE + 15)
#define MD_APPPOOL_UL_APPPOOL_QUEUE_LENGTH            (IIS_MD_APPPOOL_BASE + 17)
#define MD_APPPOOL_DISALLOW_ROTATION_ON_CONFIG_CHANGE (IIS_MD_APPPOOL_BASE + 18)
#define MD_APPPOOL_PERIODIC_RESTART_SCHEDULE          (IIS_MD_APPPOOL_BASE + 20)
#define MD_APPPOOL_IDENTITY_TYPE                      (IIS_MD_APPPOOL_BASE + 21)
#define MD_CPU_ACTION                                 (IIS_MD_APPPOOL_BASE + 22)
#define MD_CPU_LIMIT                                  (IIS_MD_APPPOOL_BASE + 23)
#define MD_APPPOOL_PERIODIC_RESTART_MEMORY            (IIS_MD_APPPOOL_BASE + 24)
#define MD_APPPOOL_COMMAND                            (IIS_MD_APPPOOL_BASE + 26)
#define MD_APPPOOL_STATE                              (IIS_MD_APPPOOL_BASE + 27)
#define MD_APPPOOL_AUTO_START                         (IIS_MD_APPPOOL_BASE + 28)
#define MD_RAPID_FAIL_PROTECTION_INTERVAL             (IIS_MD_APPPOOL_BASE + 29)
#define MD_RAPID_FAIL_PROTECTION_MAX_CRASHES          (IIS_MD_APPPOOL_BASE + 30)
#define MD_APPPOOL_ORPHAN_ACTION_EXE                  (IIS_MD_APPPOOL_BASE + 31)
#define MD_APPPOOL_ORPHAN_ACTION_PARAMS               (IIS_MD_APPPOOL_BASE + 32)
#define MB_DONT_IMPERSONATE                           (IIS_MD_APPPOOL_BASE + 33)

//
// Load balancer properties
//
#define MD_LOAD_BALANCER_CAPABILITIES                 (IIS_MD_APPPOOL_BASE + 34)

//
//  Valid values for APP POOL
//
#define MD_APPPOOL_AUTO_SHUTDOWN_EXE                  (IIS_MD_APPPOOL_BASE + 35)
#define MD_APPPOOL_AUTO_SHUTDOWN_PARAMS               (IIS_MD_APPPOOL_BASE + 36)
#define MD_APP_POOL_LOG_EVENT_ON_RECYCLE              (IIS_MD_APPPOOL_BASE + 37)
#define MD_APPPOOL_PERIODIC_RESTART_PRIVATE_MEMORY    (IIS_MD_APPPOOL_BASE + 38)
#define MD_APPPOOL_MANAGED_RUNTIME_VERSION            (IIS_MD_APPPOOL_BASE + 39)
#define MD_APPPOOL_32_BIT_APP_ON_WIN64                (IIS_MD_APPPOOL_BASE + 40)
#define MD_APPPOOL_MANAGED_PIPELINE_MODE              (IIS_MD_APPPOOL_BASE + 41)

//
// Valid values for MD_APP_POOL_LOG_EVENT_ON_RECYCLE
//
#define MD_APP_POOL_RECYCLE_TIME                      1
#define MD_APP_POOL_RECYCLE_REQUESTS                  2
#define MD_APP_POOL_RECYCLE_SCHEDULE                  4
#define MD_APP_POOL_RECYCLE_MEMORY                    8
#define MD_APP_POOL_RECYCLE_ISAPI_UNHEALTHY           16
#define MD_APP_POOL_RECYCLE_ON_DEMAND                 32
#define MD_APP_POOL_RECYCLE_CONFIG_CHANGE             64
#define MD_APP_POOL_RECYCLE_PRIVATE_MEMORY            128


//
// Valid values for MD_CPU_ACTION
//

#define MD_CPU_NO_ACTION                              0
#define MD_CPU_KILL_W3WP                              1
#define MD_CPU_TRACE                                  2
#define MD_CPU_THROTTLE                               3

//
// Valid values for MD_APPPOOL_COMMAND
//

#define MD_APPPOOL_COMMAND_START                      1
#define MD_APPPOOL_COMMAND_STOP                       2

//
// Valid values for MD_APPPOOL_STATE
//

#define MD_APPPOOL_STATE_STARTING                     1
#define MD_APPPOOL_STATE_STARTED                      2
#define MD_APPPOOL_STATE_STOPPING                     3
#define MD_APPPOOL_STATE_STOPPED                      4

//
// Valid values for MD_APPPOOL_IDENTITY_TYPE
//
#define MD_APPPOOL_IDENTITY_TYPE_LOCALSYSTEM          0
#define MD_APPPOOL_IDENTITY_TYPE_LOCALSERVICE         1
#define MD_APPPOOL_IDENTITY_TYPE_NETWORKSERVICE       2
#define MD_APPPOOL_IDENTITY_TYPE_SPECIFICUSER         3

//
// Valid values for MD_LOAD_BALANCER_CAPABILITIES
//
#define MD_LOAD_BALANCER_CAPABILITIES_BASIC           1
#define MD_LOAD_BALANCER_CAPABILITIES_SOPHISTICATED   2

#define IIS_MD_APP_BASE                               9100
#define MD_APP_APPPOOL_ID                             (IIS_MD_APP_BASE+1)
#define MD_APP_ALLOW_TRANSIENT_REGISTRATION           (IIS_MD_APP_BASE+2)
#define MD_APP_AUTO_START                             (IIS_MD_APP_BASE+3)
#define MD_APPPOOL_PERIODIC_RESTART_CONNECTIONS       (IIS_MD_APP_BASE+4)

//
// TODO: These are duplicate definitions. Remove them if no one is using it.
//

#define MD_APPPOOL_APPPOOL_ID                         (IIS_MD_APP_BASE + 101)
#define MD_APPPOOL_ALLOW_TRANSIENT_REGISTRATION       (IIS_MD_APP_BASE + 102)
// commented out so we can build
//#define MD_APPPOOL_AUTO_START                         (IIS_MD_APP_BASE + 103)


#define IIS_MD_GLOBAL_BASE                              9200
#define MD_MAX_GLOBAL_BANDWIDTH                         (IIS_MD_GLOBAL_BASE+1)
#define MD_MAX_GLOBAL_CONNECTIONS                       (IIS_MD_GLOBAL_BASE+2)
#define MD_GLOBAL_STANDARD_APP_MODE_ENABLED             (IIS_MD_GLOBAL_BASE+3)
#define MD_HEADER_WAIT_TIMEOUT                          (IIS_MD_GLOBAL_BASE+4)
#define MD_MIN_FILE_BYTES_PER_SEC                       (IIS_MD_GLOBAL_BASE+5)
#define MD_GLOBAL_LOG_IN_UTF_8                          (IIS_MD_GLOBAL_BASE+6)
#define MD_DEMAND_START_THRESHOLD                       (IIS_MD_GLOBAL_BASE+7)

#define MD_GLOBAL_SESSIONKEY                                 9999
#define MD_ROOT_ENABLE_EDIT_WHILE_RUNNING                    9998
#define MD_GLOBAL_CHANGE_NUMBER                              9997
#define MD_ROOT_ENABLE_HISTORY                               9996
#define MD_ROOT_MAX_HISTORY_FILES                            9995
#define MD_GLOBAL_EDIT_WHILE_RUNNING_MAJOR_VERSION_NUMBER    9994
#define MD_GLOBAL_EDIT_WHILE_RUNNING_MINOR_VERSION_NUMBER    9993
#define MD_GLOBAL_XMLSCHEMATIMESTAMP                         9992
#define MD_GLOBAL_BINSCHEMATIMESTAMP                         9991
#define MD_COMMENTS                                          9990
#define MD_LOCATION                                          9989
#define MD_MAX_ERROR_FILES                                   9988
#define MD_STOP_LISTENING                                    9987

//
//  Valid values for MD_AUTHORIZATION
//

#define MD_AUTH_ANONYMOUS               0x00000001
#define MD_AUTH_BASIC                   0x00000002
#define MD_AUTH_NT                      0x00000004    // Use NT auth provider (like NTLM)
#define MD_AUTH_MD5                     0x00000010
#define MD_AUTH_PASSPORT                0x00000040

//
//  Valid values for MD_AUTHORIZATION_PERSISTENCE
//


#define MD_AUTH_SINGLEREQUEST                   0x00000040
#define MD_AUTH_SINGLEREQUESTIFPROXY            0x00000080
#define MD_AUTH_SINGLEREQUESTALWAYSIFPROXY      0x00000100

//
//  Valid values for MD_ACCESS_PERM
//

#define MD_ACCESS_READ                  0x00000001    // Allow for Read
#define MD_ACCESS_WRITE                 0x00000002    // Allow for Write
#define MD_ACCESS_EXECUTE               0x00000004    // Allow for Execute
#define MD_ACCESS_SOURCE                0x00000010    // Apply access mask to source
#define MD_ACCESS_SCRIPT                0x00000200    // Allow for Script execution
#define MD_ACCESS_NO_REMOTE_WRITE       0x00000400    // Local host access only
#define MD_ACCESS_NO_REMOTE_READ        0x00001000    // Local host access only
#define MD_ACCESS_NO_REMOTE_EXECUTE     0x00002000    // Local host access only
#define MD_ACCESS_NO_REMOTE_SCRIPT      0x00004000    // Local host access only
#define MD_ACCESS_NO_PHYSICAL_DIR       0x00008000    // VR maps to no physical path

#define MD_NONSSL_ACCESS_MASK           (MD_ACCESS_READ|                \
                                         MD_ACCESS_WRITE|               \
                                         MD_ACCESS_EXECUTE|             \
                                         MD_ACCESS_SOURCE|              \
                                         MD_ACCESS_SCRIPT|              \
                                         MD_ACCESS_NO_REMOTE_READ|      \
                                         MD_ACCESS_NO_REMOTE_WRITE|     \
                                         MD_ACCESS_NO_REMOTE_EXECUTE|   \
                                         MD_ACCESS_NO_REMOTE_SCRIPT|    \
                                         MD_ACCESS_NO_PHYSICAL_DIR      \
                                         )
//
//  Valid values for MD_SSL_ACCESS_PERM
//

#define MD_ACCESS_SSL                   0x00000008    // Require SSL
#define MD_ACCESS_NEGO_CERT             0x00000020    // Allow client SSL certs
#define MD_ACCESS_REQUIRE_CERT          0x00000040    // Require client SSL certs
#define MD_ACCESS_MAP_CERT              0x00000080    // Map SSL cert to NT account
#define MD_ACCESS_SSL128                0x00000100    // Require 128 bit SSL

#define MD_SSL_ACCESS_MASK              (MD_ACCESS_SSL|\
                                         MD_ACCESS_NEGO_CERT|\
                                         MD_ACCESS_REQUIRE_CERT|\
                                         MD_ACCESS_MAP_CERT|\
                                         MD_ACCESS_SSL128)

#define MD_ACCESS_MASK                  0x0000ffff

//
//  Valid values for MD_DIRECTORY_BROWSING
//

#define MD_DIRBROW_SHOW_DATE            0x00000002
#define MD_DIRBROW_SHOW_TIME            0x00000004
#define MD_DIRBROW_SHOW_SIZE            0x00000008
#define MD_DIRBROW_SHOW_EXTENSION       0x00000010
#define MD_DIRBROW_LONG_DATE            0x00000020

#define MD_DIRBROW_ENABLED              0x80000000  // Allow directory browsing
#define MD_DIRBROW_LOADDEFAULT          0x40000000  // Load default doc if exists

#define MD_DIRBROW_MASK                 (MD_DIRBROW_SHOW_DATE      |    \
                                         MD_DIRBROW_SHOW_TIME      |    \
                                         MD_DIRBROW_SHOW_SIZE      |    \
                                         MD_DIRBROW_SHOW_EXTENSION |    \
                                         MD_DIRBROW_LONG_DATE      |    \
                                         MD_DIRBROW_LOADDEFAULT    |    \
                                         MD_DIRBROW_ENABLED)



//
//  Valid values for MD_LOGON_METHOD
//

#define MD_LOGON_INTERACTIVE        0
#define MD_LOGON_BATCH              1
#define MD_LOGON_NETWORK            2
#define MD_LOGON_NETWORK_CLEARTEXT  3

//
//  Valid values for MD_PASSPORT_REQUIRE_AD_MAPPING
//

#define MD_PASSPORT_NO_MAPPING      0
#define MD_PASSPORT_TRY_MAPPING     1
#define MD_PASSPORT_NEED_MAPPING    2

//
// Valid values for MD_NOTIFY_EXAUTH
//

#define MD_NOTIFEXAUTH_NTLMSSL  1

//
//  Valid values for MD_FILTER_STATE
//

#define MD_FILTER_STATE_LOADED          1
#define MD_FILTER_STATE_UNLOADED        4

//
//  Valid values for MD_SERVER_STATE
//

#define MD_SERVER_STATE_STARTING        1
#define MD_SERVER_STATE_STARTED         2
#define MD_SERVER_STATE_STOPPING        3
#define MD_SERVER_STATE_STOPPED         4
#define MD_SERVER_STATE_PAUSING         5
#define MD_SERVER_STATE_PAUSED          6
#define MD_SERVER_STATE_CONTINUING      7

//
//  Valid values for MD_SERVER_COMMAND
//

#define MD_SERVER_COMMAND_START         1
#define MD_SERVER_COMMAND_STOP          2
#define MD_SERVER_COMMAND_PAUSE         3
#define MD_SERVER_COMMAND_CONTINUE      4

//
//  Valid values for MD_SERVER_SIZE
//

#define MD_SERVER_SIZE_SMALL            0
#define MD_SERVER_SIZE_MEDIUM           1
#define MD_SERVER_SIZE_LARGE            2

//
// Valid values for MD_SERVER_CONFIG_INFO
//

#define MD_SERVER_CONFIG_SSL_40         0x00000001
#define MD_SERVER_CONFIG_SSL_128        0x00000002
#define MD_SERVER_CONFIG_ALLOW_ENCRYPT  0x00000004
#define MD_SERVER_CONFIG_AUTO_PW_SYNC   0x00000008

#define MD_SERVER_CONFIGURATION_MASK   (MD_SERVER_CONFIG_SSL_40       | \
                                        MD_SERVER_CONFIG_SSL_128      | \
                                        MD_SERVER_CONFIG_ENCRYPT      | \
                                        MD_SERVER_CONFIG_AUTO_PW_SYNC)

//
// Valid values for MD_SCRIPT_MAPS flag field
//

#define MD_SCRIPTMAPFLAG_SCRIPT                     0x00000001
#define MD_SCRIPTMAPFLAG_CHECK_PATH_INFO            0x00000004

#ifdef REMOVE   // SteveBr
//
//  Bogus value - do not use
//
#define MD_SCRIPTMAPFLAG_ALLOWED_ON_READ_DIR        0x00000001
#endif // REMOVE


//
// Valid values for MD_AUTH_CHANGE_ENABLE
//

#define MD_AUTH_CHANGE_UNSECURE     0x00000001
#define MD_AUTH_CHANGE_DISABLE      0x00000002
#define MD_AUTH_ADVNOTIFY_DISABLE   0x00000004

//
// Valid values for MD_NET_LOGON_WKS
//

#define MD_NETLOGON_WKS_NONE        0
#define MD_NETLOGON_WKS_IP          1
#define MD_NETLOGON_WKS_DNS         2

//
//  Valide substatus errors for MD_CUSTOM_ERROR
//

#define MD_ERROR_SUB400_INVALID_DESTINATION     1
#define MD_ERROR_SUB400_INVALID_DEPTH           2
#define MD_ERROR_SUB400_INVALID_IF              3
#define MD_ERROR_SUB400_INVALID_OVERWRITE       4
#define MD_ERROR_SUB400_INVALID_TRANSLATE       5
#define MD_ERROR_SUB400_INVALID_REQUEST_BODY    6
#define MD_ERROR_SUB400_INVALID_CONTENT_LENGTH  7
#define MD_ERROR_SUB400_INVALID_TIMEOUT         8
#define MD_ERROR_SUB400_INVALID_LOCK_TOKEN      9

#define MD_ERROR_SUB401_LOGON                   1
#define MD_ERROR_SUB401_LOGON_CONFIG            2
#define MD_ERROR_SUB401_LOGON_ACL               3
#define MD_ERROR_SUB401_FILTER                  4
#define MD_ERROR_SUB401_APPLICATION             5
#define MD_ERROR_SUB401_URLAUTH_POLICY          7

#define MD_ERROR_SUB403_EXECUTE_ACCESS_DENIED   1
#define MD_ERROR_SUB403_READ_ACCESS_DENIED      2
#define MD_ERROR_SUB403_WRITE_ACCESS_DENIED     3
#define MD_ERROR_SUB403_SSL_REQUIRED            4
#define MD_ERROR_SUB403_SSL128_REQUIRED         5
#define MD_ERROR_SUB403_ADDR_REJECT             6
#define MD_ERROR_SUB403_CERT_REQUIRED           7
#define MD_ERROR_SUB403_SITE_ACCESS_DENIED      8
#define MD_ERROR_SUB403_TOO_MANY_USERS          9
#define MD_ERROR_SUB403_INVALID_CNFG           10
#define MD_ERROR_SUB403_PWD_CHANGE             11
#define MD_ERROR_SUB403_MAPPER_DENY_ACCESS     12
#define MD_ERROR_SUB403_CERT_REVOKED           13
#define MD_ERROR_SUB403_DIR_LIST_DENIED        14
#define MD_ERROR_SUB403_CAL_EXCEEDED           15
#define MD_ERROR_SUB403_CERT_BAD               16
#define MD_ERROR_SUB403_CERT_TIME_INVALID      17
#define MD_ERROR_SUB403_APPPOOL_DENIED         18
#define MD_ERROR_SUB403_INSUFFICIENT_PRIVILEGE_FOR_CGI  19
#define MD_ERROR_SUB403_PASSPORT_LOGIN_FAILURE 20
#define MD_ERROR_SUB403_SOURCE_ACCESS_DENIED   21
#define MD_ERROR_SUB403_INFINITE_DEPTH_DENIED  22
#define MD_ERROR_SUB403_LOCK_TOKEN_REQUIRED    23
#define MD_ERROR_SUB403_VALIDATION_FAILURE     24

#define MD_ERROR_SUB404_SITE_NOT_FOUND            1
#define MD_ERROR_SUB404_DENIED_BY_POLICY          2
#define MD_ERROR_SUB404_DENIED_BY_MIMEMAP         3
#define MD_ERROR_SUB404_NO_HANDLER                4
#define MD_ERROR_SUB404_URL_SEQUENCE_DENIED       5
#define MD_ERROR_SUB404_VERB_DENIED               6
#define MD_ERROR_SUB404_FILE_EXTENSION_DENIED     7
#define MD_ERROR_SUB404_HIDDEN_SEGMENT            8
#define MD_ERROR_SUB404_FILE_ATTRIBUTE_HIDDEN     9
#define MD_ERROR_SUB404_REQUEST_HEADER_TOO_LONG  10
#define MD_ERROR_SUB404_URL_DOUBLE_ESCAPED       11
#define MD_ERROR_SUB404_URL_HAS_HIGH_BIT_CHARS   12
#define MD_ERROR_SUB404_CONTENT_LENGTH_TOO_LARGE 13
#define MD_ERROR_SUB404_URL_TOO_LONG             14
#define MD_ERROR_SUB404_QUERY_STRING_TOO_LONG    15
#define MD_ERROR_SUB404_STATICFILE_DAV           16
#define MD_ERROR_SUB404_PRECONDITIONED_HANDLER   17
#define MD_ERROR_SUB404_QUERY_STRING_SEQUENCE_DENIED 18
#define MD_ERROR_SUB404_DENIED_BY_FILTERING_RULE 19

#define MD_ERROR_SUB423_LOCK_TOKEN_SUBMITTED    1
#define MD_ERROR_SUB423_NO_CONFLICTING_LOCK     2

#define MD_ERROR_SUB500_UNC_ACCESS             16
#define MD_ERROR_SUB500_URLAUTH_NO_STORE       17
#define MD_ERROR_SUB500_URLAUTH_STORE_ERROR    18
#define MD_ERROR_SUB500_BAD_METADATA           19
#define MD_ERROR_SUB500_URLAUTH_NO_SCOPE       20
#define MD_ERROR_SUB500_HANDLERS_MODULE        21
#define MD_ERROR_SUB500_ASPNET_MODULES         22
#define MD_ERROR_SUB500_ASPNET_HANDLERS        23
#define MD_ERROR_SUB500_ASPNET_IMPERSONATION   24

#define MD_ERROR_SUB502_TIMEOUT                 1
#define MD_ERROR_SUB502_PREMATURE_EXIT          2
#define MD_ERROR_SUB502_ARR_CONNECTION_ERROR    3
#define MD_ERROR_SUB502_ARR_NO_SERVER           4

#define MD_ERROR_SUB503_CPU_LIMIT               1
#define MD_ERROR_SUB503_APP_CONCURRENT          2
#define MD_ERROR_SUB503_ASPNET_QUEUE_FULL       3
#define MD_ERROR_SUB503_FASTCGI_QUEUE_FULL      4
#define MD_ERROR_SUB503_CONNECTION_LIMIT        5

//
// Valid access rights for ACE entries in MD_ADMIN_ACL
//

#define MD_ACR_READ                 0x00000001
#define MD_ACR_WRITE                0x00000002
#define MD_ACR_RESTRICTED_WRITE     0x00000020
#define MD_ACR_UNSECURE_PROPS_READ  0x00000080
#define MD_ACR_ENUM_KEYS            0x00000008
#define MD_ACR_WRITE_DAC            0x00040000

//
// Valid modes for MD_USER_ISOLATION
//

#define MD_USER_ISOLATION_NONE      0
#define MD_USER_ISOLATION_BASIC     1
#define MD_USER_ISOLATION_AD        2
#define MD_USER_ISOLATION_LAST      2

//
// MD_IP_SEC binary format description
//

/*

  This object is composed of 4 lists : 2 lists ( deny & grant ) of network addresses,
  the only allowed family is AF_INET.
  Each of this list is composed of sublists, one for each ( network address family,
  significant subnet mask ) combination. The significant subnet mask is stored as
  ( number of bytes all 1 ( 0xff ), bitmask in last byte ).
  This is followed by 2 lists ( deny & grant ) of DNS names. Each of these lists is
  composed of sublists, based on then number of components in the DNS name
  e.g. "microsoft.com" has 2 components, "www.msft.com" has 3.

Header:
    SELFREFINDEX    iDenyAddr;      // address deny list
                                    // points to ADDRESS_HEADER
    SELFREFINDEX    iGrantAddr;     // address grant list
                                    // points to ADDRESS_HEADER
    SELFREFINDEX    iDenyName;      // DNS name deny list
                                    // points to NAME_HEADER
    SELFREFINDEX    iGrantName;     // DNS name grant list
                                    // points to NAME_HEADER
    DWORD           dwFlags;
    DWORD           cRefSize;       // size of reference area ( in bytes )

ADDRESS_HEADER :
    DWORD               cEntries;   // # of Entries[]
    DWORD               cAddresses; // total # of addresses in all
                                    // ADDRESS_LIST_ENTRY
    ADDRESS_LIST_ENTRY  Entries[];

ADDRESS_LIST_ENTRY :
    DWORD           iFamily;
    DWORD           cAddresses;
    DWORD           cFullBytes;
    DWORD           LastByte;
    SELFREFINDEX    iFirstAddress;  // points to array of addresses

NAME_HEADER :
    DWORD           cEntries;
    DWORD           cNames;         // total # of names for all Entries[]
    NAME_LIST_ENTRY Entries[];

Name list entry :
    DWORD           cComponents;    // # of DNS components
    DWORD           cNames;
    SELFREFINDEX    iName[];        // array of references to DNS names

This is followed by address arrays & names pointed to by iFirstAddress & iName
Names are '\0' delimited

SELFREFINDEX is a DWORD offset from start of structure with high bit set to 1

*/

//
// Macros
//

#define MD_SET_DATA_RECORD(_pMDR, _id, _attr, _utype, _dtype, _dlen, _pData) \
            { \
            (_pMDR)->dwMDIdentifier=(_id);      \
            (_pMDR)->dwMDAttributes=(_attr);    \
            (_pMDR)->dwMDUserType=(_utype);     \
            (_pMDR)->dwMDDataType=(_dtype);     \
            (_pMDR)->dwMDDataLen=(_dlen);       \
            (_pMDR)->pbMDData=(LPBYTE)(_pData); \
            }

//
// IIS ADSI Admin Object class names
//

#define IIS_CLASS_COMPUTER             "IIsComputer"
#define IIS_CLASS_WEB_SERVICE          "IIsWebService"
#define IIS_CLASS_WEB_SERVER           "IIsWebServer"
#define IIS_CLASS_WEB_INFO             "IIsWebInfo"
#define IIS_CLASS_WEB_DIR              "IIsWebDirectory"
#define IIS_CLASS_WEB_VDIR             "IIsWebVirtualDir"
#define IIS_CLASS_WEB_FILE             "IIsWebFile"
#define IIS_CLASS_FTP_SERVICE          "IIsFtpService"
#define IIS_CLASS_FTP_SERVER           "IIsFtpServer"
#define IIS_CLASS_FTP_INFO             "IIsFtpInfo"
#define IIS_CLASS_FTP_VDIR             "IIsFtpVirtualDir"
#define IIS_CLASS_FILTERS              "IIsFilters"
#define IIS_CLASS_FILTER               "IIsFilter"
#define IIS_CLASS_LOG_MODULES          "IIsLogModules"
#define IIS_CLASS_LOG_MODULE           "IIsLogModule"
#define IIS_CLASS_MIMEMAP              "IIsMimeMap"
#define IIS_CLASS_CERTMAPPER           "IIsCertMapper"
#define IIS_CLASS_COMPRESS_SCHEMES     "IIsCompressionSchemes"
#define IIS_CLASS_COMPRESS_SCHEME      "IIsCompressionScheme"

#define IIS_CLASS_COMPUTER_W           L"IIsComputer"
#define IIS_CLASS_WEB_SERVICE_W        L"IIsWebService"
#define IIS_CLASS_WEB_SERVER_W         L"IIsWebServer"
#define IIS_CLASS_WEB_INFO_W           L"IIsWebInfo"
#define IIS_CLASS_WEB_DIR_W            L"IIsWebDirectory"
#define IIS_CLASS_WEB_VDIR_W           L"IIsWebVirtualDir"
#define IIS_CLASS_WEB_FILE_W           L"IIsWebFile"
#define IIS_CLASS_FTP_SERVICE_W        L"IIsFtpService"
#define IIS_CLASS_FTP_SERVER_W         L"IIsFtpServer"
#define IIS_CLASS_FTP_INFO_W           L"IIsFtpInfo"
#define IIS_CLASS_FTP_VDIR_W           L"IIsFtpVirtualDir"
#define IIS_CLASS_FILTERS_W            L"IIsFilters"
#define IIS_CLASS_FILTER_W             L"IIsFilter"
#define IIS_CLASS_LOG_MODULES_W        L"IIsLogModules"
#define IIS_CLASS_LOG_MODULE_W         L"IIsLogModule"
#define IIS_CLASS_MIMEMAP_W            L"IIsMimeMap"
#define IIS_CLASS_CERTMAPPER_W         L"IIsCertMapper"
#define IIS_CLASS_COMPRESS_SCHEMES_W   L"IIsCompressionSchemes"
#define IIS_CLASS_COMPRESS_SCHEME_W    L"IIsCompressionScheme"

#endif // _IISCNFG_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\ImageHlp.h ===
/*++ BUILD Version: 0000     Increment this if a change has global effects

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    imagehlp.h

Abstract:

    This module defines the prototypes and constants required for the image
    help routines.

Revision History:

--*/

#ifndef _IMAGEHLP_
#define _IMAGEHLP_

#if _MSC_VER > 1020
#pragma once
#endif


// As a general principal always call the 64 bit version
// of every API, if a choice exists.  The 64 bit version
// works great on 32 bit platforms, and is forward
// compatible to 64 bit platforms.

#ifdef _WIN64
#ifndef _IMAGEHLP64
#define _IMAGEHLP64
#endif
#endif

#include <pshpack8.h>

// For those without specstrings.h
// Since there are different versions of this header, I need to
// individually test each item and define it if it is not around.

#ifndef __in
 #define __in
#endif
#ifndef __out
 #define __out
#endif
#ifndef __inout
 #define __inout
#endif
#ifndef __in_opt
 #define __in_opt
#endif
#ifndef __out_opt
 #define __out_opt
#endif
#ifndef __inout_opt
 #define __inout_opt
#endif
#ifndef __in_ecount
 #define __in_ecount(x)
#endif
#ifndef __out_ecount
 #define __out_ecount(x)
#endif
#ifndef __inout_ecount
 #define __inout_ecount(x)
#endif
#ifndef __in_bcount
 #define __in_bcount(x)
#endif
#ifndef __out_bcount
 #define __out_bcount(x)
#endif
#ifndef __inout_bcount
 #define __inout_bcount(x)
#endif
#ifndef __out_xcount
 #define __out_xcount(x)
#endif
#ifndef __deref_opt_out
 #define __deref_opt_out
#endif
#ifndef __deref_out
 #define __deref_out
#endif
#ifndef __out_ecount_opt
 #define __out_ecount_opt(x)
#endif
#ifndef __in_bcount_opt
 #define __in_bcount_opt(x)
#endif
#ifndef __out_bcount_opt
 #define __out_bcount_opt(x)
#endif
#ifndef __deref_out_opt
 #define __deref_out_opt
#endif


#ifndef WINTRUST_H
#include <wintrust.h>
#endif


#ifdef __cplusplus
extern "C" {
#endif

#ifdef _IMAGEHLP_SOURCE_
 #define IMAGEAPI __stdcall
 #define DBHLP_DEPRECIATED
#else
 #define IMAGEAPI DECLSPEC_IMPORT __stdcall
 #if (_MSC_VER >= 1300) && !defined(MIDL_PASS)
  #define DBHLP_DEPRECIATED   __declspec(deprecated)
 #else
  #define DBHLP_DEPRECIATED
 #endif
#endif

#define DBHLPAPI IMAGEAPI

#define IMAGE_SEPARATION (64*1024)

// Observant readers may notice that 2 new fields,
// 'fReadOnly' and 'Version' have been added to
// the LOADED_IMAGE structure after 'fDOSImage'.
// This does not change the size of the structure 
// from previous headers.  That is because while 
// 'fDOSImage' is a byte, it is padded by the 
// compiler to 4 bytes.  So the 2 new fields are 
// slipped into the extra space.

typedef struct _LOADED_IMAGE {
    PSTR                  ModuleName;
    HANDLE                hFile;
    PUCHAR                MappedAddress;
#ifdef _IMAGEHLP64
    PIMAGE_NT_HEADERS64   FileHeader;
#else
    PIMAGE_NT_HEADERS32   FileHeader;
#endif
    PIMAGE_SECTION_HEADER LastRvaSection;
    ULONG                 NumberOfSections;
    PIMAGE_SECTION_HEADER Sections;
    ULONG                 Characteristics;
    BOOLEAN               fSystemImage;
    BOOLEAN               fDOSImage;
    BOOLEAN               fReadOnly;
    UCHAR                 Version;
    LIST_ENTRY            Links;
    ULONG                 SizeOfImage;
} LOADED_IMAGE, *PLOADED_IMAGE;

#define MAX_SYM_NAME            2000


BOOL
IMAGEAPI
BindImage(
    __in PCSTR ImageName,
    __in PCSTR DllPath,
    __in PCSTR SymbolPath
    );

typedef enum _IMAGEHLP_STATUS_REASON {
    BindOutOfMemory,
    BindRvaToVaFailed,
    BindNoRoomInImage,
    BindImportModuleFailed,
    BindImportProcedureFailed,
    BindImportModule,
    BindImportProcedure,
    BindForwarder,
    BindForwarderNOT,
    BindImageModified,
    BindExpandFileHeaders,
    BindImageComplete,
    BindMismatchedSymbols,
    BindSymbolsNotUpdated,
    BindImportProcedure32,
    BindImportProcedure64,
    BindForwarder32,
    BindForwarder64,
    BindForwarderNOT32,
    BindForwarderNOT64
} IMAGEHLP_STATUS_REASON;

typedef
BOOL
(__stdcall *PIMAGEHLP_STATUS_ROUTINE)(
    __in IMAGEHLP_STATUS_REASON Reason,
    __in PCSTR ImageName,
    __in PCSTR DllName,
    __in ULONG_PTR Va,
    __in ULONG_PTR Parameter
    );

typedef
BOOL
(__stdcall *PIMAGEHLP_STATUS_ROUTINE32)(
    __in IMAGEHLP_STATUS_REASON Reason,
    __in PCSTR ImageName,
    __in PCSTR DllName,
    __in ULONG Va,
    __in ULONG_PTR Parameter
    );

typedef
BOOL
(__stdcall *PIMAGEHLP_STATUS_ROUTINE64)(
    __in IMAGEHLP_STATUS_REASON Reason,
    __in PCSTR ImageName,
    __in PCSTR DllName,
    __in ULONG64 Va,
    __in ULONG_PTR Parameter
    );


BOOL
IMAGEAPI
BindImageEx(
    __in DWORD Flags,
    __in PCSTR ImageName,
    __in PCSTR DllPath,
    __in PCSTR SymbolPath,
    __in_opt PIMAGEHLP_STATUS_ROUTINE StatusRoutine
    );

#define BIND_NO_BOUND_IMPORTS  0x00000001
#define BIND_NO_UPDATE         0x00000002
#define BIND_ALL_IMAGES        0x00000004
#define BIND_CACHE_IMPORT_DLLS 0x00000008       // Cache dll's across
                                                //  calls to BindImageEx
                                                //  (same as NT 3.1->NT 4.0)
#define BIND_REPORT_64BIT_VA   0x00000010

BOOL
IMAGEAPI
ReBaseImage(
    __in PCSTR CurrentImageName,
    __in PCSTR SymbolPath,
    __in BOOL  fReBase,              // TRUE if actually rebasing, false if only summing
    __in BOOL  fRebaseSysfileOk,     // TRUE is system images s/b rebased
    __in BOOL  fGoingDown,           // TRUE if the image s/b rebased below the given base
    __in ULONG CheckImageSize,       // Max size allowed  (0 if don't care)
    __out ULONG *OldImageSize,       // Returned from the header
    __out ULONG_PTR *OldImageBase,   // Returned from the header
    __out ULONG *NewImageSize,       // Image size rounded to next separation boundary
    __inout ULONG_PTR *NewImageBase, // (in) Desired new address.
                                     // (out) Next address (actual if going down)
    __in ULONG TimeStamp             // new timestamp for image, if non-zero
    );

BOOL
IMAGEAPI
ReBaseImage64(
    __in PCSTR CurrentImageName,
    __in PCSTR SymbolPath,
    __in BOOL  fReBase,             // TRUE if actually rebasing, false if only summing
    __in BOOL  fRebaseSysfileOk,    // TRUE is system images s/b rebased
    __in BOOL  fGoingDown,          // TRUE if the image s/b rebased below the given base
    __in ULONG CheckImageSize,      // Max size allowed  (0 if don't care)
    __out ULONG *OldImageSize,      // Returned from the header
    __out ULONG64 *OldImageBase,    // Returned from the header
    __out ULONG *NewImageSize,      // Image size rounded to next separation boundary
    __inout ULONG64 *NewImageBase,  // (in) Desired new address.
                                    // (out) Next address (actual if going down)
    __in ULONG TimeStamp            // new timestamp for image, if non-zero
    );

//
// Define checksum return codes.
//

#define CHECKSUM_SUCCESS            0
#define CHECKSUM_OPEN_FAILURE       1
#define CHECKSUM_MAP_FAILURE        2
#define CHECKSUM_MAPVIEW_FAILURE    3
#define CHECKSUM_UNICODE_FAILURE    4

// Define Splitsym flags.

#define SPLITSYM_REMOVE_PRIVATE     0x00000001      // Remove CV types/symbols and Fixup debug
                                                    //  Used for creating .dbg files that ship
                                                    //  as part of the product.

#define SPLITSYM_EXTRACT_ALL        0x00000002      // Extract all debug info from image.
                                                    //  Normally, FPO is left in the image
                                                    //  to allow stack traces through the code.
                                                    //  Using this switch is similar to linking
                                                    //  with -debug:none except the .dbg file
                                                    //  exists...

#define SPLITSYM_SYMBOLPATH_IS_SRC  0x00000004      // The SymbolFilePath contains an alternate
                                                    //  path to locate the pdb.


//
// Define checksum function prototypes.
//

PIMAGE_NT_HEADERS
IMAGEAPI
CheckSumMappedFile (
    __in PVOID BaseAddress,
    __in DWORD FileLength,
    __out PDWORD HeaderSum,
    __out PDWORD CheckSum
    );

DWORD
IMAGEAPI
MapFileAndCheckSumA (
    __in PCSTR Filename,
    __out PDWORD HeaderSum,
    __out PDWORD CheckSum
    );

DWORD
IMAGEAPI
MapFileAndCheckSumW (
    __in PCWSTR Filename,
    __out PDWORD HeaderSum,
    __out PDWORD CheckSum
    );

#ifdef UNICODE
#define MapFileAndCheckSum  MapFileAndCheckSumW
#else
#define MapFileAndCheckSum  MapFileAndCheckSumA
#endif // !UNICODE

BOOL
IMAGEAPI
GetImageConfigInformation(
    __in PLOADED_IMAGE LoadedImage,
    __out PIMAGE_LOAD_CONFIG_DIRECTORY ImageConfigInformation
    );

DWORD
IMAGEAPI
GetImageUnusedHeaderBytes(
    __in PLOADED_IMAGE LoadedImage,
    __out PDWORD SizeUnusedHeaderBytes
    );

BOOL
IMAGEAPI
SetImageConfigInformation(
    __inout PLOADED_IMAGE LoadedImage,
    __in PIMAGE_LOAD_CONFIG_DIRECTORY ImageConfigInformation
    );

// Image Integrity API's

#define CERT_PE_IMAGE_DIGEST_DEBUG_INFO         0x01
#define CERT_PE_IMAGE_DIGEST_RESOURCES          0x02
#define CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO    0x04
#define CERT_PE_IMAGE_DIGEST_NON_PE_INFO        0x08      // include data outside the PE image

#define CERT_SECTION_TYPE_ANY                   0xFF      // Any Certificate type

typedef PVOID DIGEST_HANDLE;

typedef BOOL (WINAPI *DIGEST_FUNCTION) (DIGEST_HANDLE refdata, PBYTE pData, DWORD dwLength);

BOOL
IMAGEAPI
ImageGetDigestStream(
    __in HANDLE FileHandle,
    __in DWORD DigestLevel,
    __in DIGEST_FUNCTION DigestFunction,
    __in DIGEST_HANDLE DigestHandle
    );

BOOL
IMAGEAPI
ImageAddCertificate(
    __in HANDLE FileHandle,
    __in LPWIN_CERTIFICATE Certificate,
    __out PDWORD Index
    );

BOOL
IMAGEAPI
ImageRemoveCertificate(
    __in HANDLE FileHandle,
    __in DWORD Index
    );

BOOL
IMAGEAPI
ImageEnumerateCertificates(
    __in HANDLE FileHandle,
    __in WORD TypeFilter,
    __out PDWORD CertificateCount,
    __inout_ecount_opt(IndexCount) PDWORD Indices,
    __in_opt DWORD IndexCount
    );

BOOL
IMAGEAPI
ImageGetCertificateData(
    __in HANDLE FileHandle,
    __in DWORD CertificateIndex,
    __out LPWIN_CERTIFICATE Certificate,
    __inout PDWORD RequiredLength
    );

BOOL
IMAGEAPI
ImageGetCertificateHeader(
    __in HANDLE FileHandle,
    __in DWORD CertificateIndex,
    __inout LPWIN_CERTIFICATE Certificateheader
    );

PLOADED_IMAGE
IMAGEAPI
ImageLoad(
    __in PCSTR DllName,
    __in_opt PCSTR DllPath
    );

BOOL
IMAGEAPI
ImageUnload(
    __inout PLOADED_IMAGE LoadedImage
    );

BOOL
IMAGEAPI
MapAndLoad(
    __in PCSTR ImageName,
    __in_opt PCSTR DllPath,
    __out PLOADED_IMAGE LoadedImage,
    __in BOOL DotDll,
    __in BOOL ReadOnly
    );

BOOL
IMAGEAPI
UnMapAndLoad(
    __inout PLOADED_IMAGE LoadedImage
    );

BOOL
IMAGEAPI
TouchFileTimes (
    __in HANDLE FileHandle,
    __in_opt PSYSTEMTIME pSystemTime
    );

BOOL
IMAGEAPI
SplitSymbols (
    __inout PSTR ImageName,
    __in PCSTR SymbolsPath,
    __inout PSTR SymbolFilePath,
    __in ULONG Flags
    );

BOOL
IMAGEAPI
UpdateDebugInfoFile(
    __in PCSTR ImageFileName,
    __in PCSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PSTR DebugFilePath,
    __in PIMAGE_NT_HEADERS32 NtHeaders
    );

BOOL
IMAGEAPI
UpdateDebugInfoFileEx(
    __in PCSTR ImageFileName,
    __in PCSTR SymbolPath,
    __out_ecount(MAX_PATH+1) PSTR DebugFilePath,
    __in PIMAGE_NT_HEADERS32 NtHeaders,
    __in DWORD OldCheckSum
    );


// Error codes set by dbghelp functions.  Call GetLastError
// to see them.
// Dbghelp also sets error codes found in winerror.h

#define ERROR_IMAGE_NOT_STRIPPED    0x8800  // the image is not stripped.  No dbg file available.
#define ERROR_NO_DBG_POINTER        0x8801  // image is stripped but there is no pointer to a dbg file
#define ERROR_NO_PDB_POINTER        0x8802  // image does not point to a pdb file

typedef BOOL
(CALLBACK *PFIND_DEBUG_FILE_CALLBACK)(
    __in HANDLE FileHandle,
    __in PCSTR FileName,
    __in PVOID CallerData
    );

HANDLE
IMAGEAPI
SymFindDebugInfoFile(
    __in HANDLE hProcess,
    __in PCSTR FileName,
    __out_ecount(MAX_PATH + 1) PSTR DebugFilePath,
    __in_opt PFIND_DEBUG_FILE_CALLBACK Callback,
    __in_opt PVOID CallerData
    );

typedef BOOL
(CALLBACK *PFIND_DEBUG_FILE_CALLBACKW)(
    __in HANDLE FileHandle,
    __in PCWSTR FileName,
    __in PVOID  CallerData
    );

HANDLE
IMAGEAPI
SymFindDebugInfoFileW(
    __in HANDLE hProcess,
    __in PCWSTR FileName,
    __out_ecount(MAX_PATH + 1) PWSTR DebugFilePath,
    __in_opt PFIND_DEBUG_FILE_CALLBACKW Callback,
    __in_opt PVOID CallerData
    );

HANDLE
IMAGEAPI
FindDebugInfoFile (
    __in PCSTR FileName,
    __in PCSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PSTR DebugFilePath
    );

HANDLE
IMAGEAPI
FindDebugInfoFileEx (
    __in PCSTR FileName,
    __in PCSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PSTR  DebugFilePath,
    __in_opt PFIND_DEBUG_FILE_CALLBACK Callback,
    __in_opt PVOID CallerData
    );

HANDLE
IMAGEAPI
FindDebugInfoFileExW (
    __in PCWSTR FileName,
    __in PCWSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PWSTR DebugFilePath,
    __in_opt PFIND_DEBUG_FILE_CALLBACKW Callback,
    __in_opt PVOID CallerData
    );

typedef BOOL
(CALLBACK *PFINDFILEINPATHCALLBACK)(
    __in PCSTR filename,
    __in PVOID context
    );

BOOL
IMAGEAPI
SymFindFileInPath(
    __in HANDLE hprocess,
    __in_opt PCSTR SearchPath,
    __in PCSTR FileName,
    __in_opt PVOID id,
    __in DWORD two,
    __in DWORD three,
    __in DWORD flags,
    __out_ecount(MAX_PATH + 1) PSTR FoundFile,
    __in_opt PFINDFILEINPATHCALLBACK callback,
    __in_opt PVOID context
    );

typedef BOOL
(CALLBACK *PFINDFILEINPATHCALLBACKW)(
    __in PCWSTR filename,
    __in PVOID context
    );

BOOL
IMAGEAPI
SymFindFileInPathW(
    __in HANDLE hprocess,
    __in_opt PCWSTR SearchPath,
    __in PCWSTR FileName,
    __in_opt PVOID id,
    __in DWORD two,
    __in DWORD three,
    __in DWORD flags,
    __out_ecount(MAX_PATH + 1) PWSTR FoundFile,
    __in_opt PFINDFILEINPATHCALLBACKW callback,
    __in_opt PVOID context
    );

typedef BOOL
(CALLBACK *PFIND_EXE_FILE_CALLBACK)(
    __in HANDLE FileHandle,
    __in PCSTR FileName,
    __in_opt PVOID CallerData
    );

HANDLE
IMAGEAPI
SymFindExecutableImage(
    __in HANDLE hProcess,
    __in PCSTR FileName,
    __out_ecount(MAX_PATH + 1) PSTR ImageFilePath,
    __in PFIND_EXE_FILE_CALLBACK Callback,
    __in PVOID CallerData
    );

typedef BOOL
(CALLBACK *PFIND_EXE_FILE_CALLBACKW)(
    __in HANDLE FileHandle,
    __in PCWSTR FileName,
    __in_opt PVOID CallerData
    );

HANDLE
IMAGEAPI
SymFindExecutableImageW(
    __in HANDLE hProcess,
    __in PCWSTR FileName,
    __out_ecount(MAX_PATH + 1) PWSTR ImageFilePath,
    __in PFIND_EXE_FILE_CALLBACKW Callback,
    __in PVOID CallerData
    );

HANDLE
IMAGEAPI
FindExecutableImage(
    __in PCSTR FileName,
    __in PCSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PSTR ImageFilePath
    );

HANDLE
IMAGEAPI
FindExecutableImageEx(
    __in PCSTR FileName,
    __in PCSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PSTR ImageFilePath,
    __in_opt PFIND_EXE_FILE_CALLBACK Callback,
    __in_opt PVOID CallerData
    );

HANDLE
IMAGEAPI
FindExecutableImageExW(
    __in PCWSTR FileName,
    __in PCWSTR SymbolPath,
    __out_ecount(MAX_PATH + 1) PWSTR ImageFilePath,
    __in_opt PFIND_EXE_FILE_CALLBACKW Callback,
    __in PVOID CallerData
    );

PIMAGE_NT_HEADERS
IMAGEAPI
ImageNtHeader (
    __in PVOID Base
    );

PVOID
IMAGEAPI
ImageDirectoryEntryToDataEx (
    __in PVOID Base,
    __in BOOLEAN MappedAsImage,
    __in USHORT DirectoryEntry,
    __out PULONG Size,
    __out_opt PIMAGE_SECTION_HEADER *FoundHeader
    );

PVOID
IMAGEAPI
ImageDirectoryEntryToData (
    __in PVOID Base,
    __in BOOLEAN MappedAsImage,
    __in USHORT DirectoryEntry,
    __out PULONG Size
    );

PIMAGE_SECTION_HEADER
IMAGEAPI
ImageRvaToSection(
    __in PIMAGE_NT_HEADERS NtHeaders,
    __in PVOID Base,
    __in ULONG Rva
    );

PVOID
IMAGEAPI
ImageRvaToVa(
    __in PIMAGE_NT_HEADERS NtHeaders,
    __in PVOID Base,
    __in ULONG Rva,
    __in_opt OUT PIMAGE_SECTION_HEADER *LastRvaSection
    );

#ifndef _WIN64
// This api won't be ported to Win64 - Fix your code.

typedef struct _IMAGE_DEBUG_INFORMATION {
    LIST_ENTRY List;
    DWORD ReservedSize;
    PVOID ReservedMappedBase;
    USHORT ReservedMachine;
    USHORT ReservedCharacteristics;
    DWORD ReservedCheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;

    DWORD ReservedNumberOfSections;
    PIMAGE_SECTION_HEADER ReservedSections;

    DWORD ReservedExportedNamesSize;
    PSTR ReservedExportedNames;

    DWORD ReservedNumberOfFunctionTableEntries;
    PIMAGE_FUNCTION_ENTRY ReservedFunctionTableEntries;
    DWORD ReservedLowestFunctionStartingAddress;
    DWORD ReservedHighestFunctionEndingAddress;

    DWORD ReservedNumberOfFpoTableEntries;
    PFPO_DATA ReservedFpoTableEntries;

    DWORD SizeOfCoffSymbols;
    PIMAGE_COFF_SYMBOLS_HEADER CoffSymbols;

    DWORD ReservedSizeOfCodeViewSymbols;
    PVOID ReservedCodeViewSymbols;

    PSTR ImageFilePath;
    PSTR ImageFileName;
    PSTR ReservedDebugFilePath;

    DWORD ReservedTimeDateStamp;

    BOOL  ReservedRomImage;
    PIMAGE_DEBUG_DIRECTORY ReservedDebugDirectory;
    DWORD ReservedNumberOfDebugDirectories;

    DWORD ReservedOriginalFunctionTableBaseAddress;

    DWORD Reserved[ 2 ];

} IMAGE_DEBUG_INFORMATION, *PIMAGE_DEBUG_INFORMATION;


PIMAGE_DEBUG_INFORMATION
IMAGEAPI
MapDebugInformation(
    __in_opt HANDLE FileHandle,
    __in PCSTR FileName,
    __in_opt PCSTR SymbolPath,
    __in ULONG ImageBase
    );

BOOL
IMAGEAPI
UnmapDebugInformation(
    __out_xcount(unknown) PIMAGE_DEBUG_INFORMATION DebugInfo
    );

#endif

BOOL
IMAGEAPI
SearchTreeForFile(
    __in PCSTR RootPath,
    __in PCSTR InputPathName,
    __out_ecount(MAX_PATH + 1) PSTR OutputPathBuffer
    );

BOOL
IMAGEAPI
SearchTreeForFileW(
    __in PCWSTR RootPath,
    __in PCWSTR InputPathName,
    __out_ecount(MAX_PATH + 1) PWSTR OutputPathBuffer
    );

typedef BOOL
(CALLBACK *PENUMDIRTREE_CALLBACK)(
    __in PCSTR FilePath,
    __in_opt PVOID CallerData
    );

BOOL
IMAGEAPI
EnumDirTree(
    __in_opt HANDLE hProcess,
    __in PCSTR RootPath,
    __in PCSTR InputPathName,
    __out_ecount_opt(MAX_PATH + 1) PSTR OutputPathBuffer,
    __in_opt PENUMDIRTREE_CALLBACK cb,
    __in_opt PVOID data
    );

typedef BOOL
(CALLBACK *PENUMDIRTREE_CALLBACKW)(
    __in PCWSTR FilePath,
    __in_opt PVOID CallerData
    );

BOOL
IMAGEAPI
EnumDirTreeW(
    __in_opt HANDLE hProcess,
    __in PCWSTR RootPath,
    __in PCWSTR InputPathName,
    __out_ecount_opt(MAX_PATH + 1) PWSTR OutputPathBuffer,
    __in_opt PENUMDIRTREE_CALLBACKW cb,
    __in_opt PVOID data
    );

BOOL
IMAGEAPI
MakeSureDirectoryPathExists(
    __in PCSTR DirPath
    );

//
// UnDecorateSymbolName Flags
//

#define UNDNAME_COMPLETE                 (0x0000)  // Enable full undecoration
#define UNDNAME_NO_LEADING_UNDERSCORES   (0x0001)  // Remove leading underscores from MS extended keywords
#define UNDNAME_NO_MS_KEYWORDS           (0x0002)  // Disable expansion of MS extended keywords
#define UNDNAME_NO_FUNCTION_RETURNS      (0x0004)  // Disable expansion of return type for primary declaration
#define UNDNAME_NO_ALLOCATION_MODEL      (0x0008)  // Disable expansion of the declaration model
#define UNDNAME_NO_ALLOCATION_LANGUAGE   (0x0010)  // Disable expansion of the declaration language specifier
#define UNDNAME_NO_MS_THISTYPE           (0x0020)  // NYI Disable expansion of MS keywords on the 'this' type for primary declaration
#define UNDNAME_NO_CV_THISTYPE           (0x0040)  // NYI Disable expansion of CV modifiers on the 'this' type for primary declaration
#define UNDNAME_NO_THISTYPE              (0x0060)  // Disable all modifiers on the 'this' type
#define UNDNAME_NO_ACCESS_SPECIFIERS     (0x0080)  // Disable expansion of access specifiers for members
#define UNDNAME_NO_THROW_SIGNATURES      (0x0100)  // Disable expansion of 'throw-signatures' for functions and pointers to functions
#define UNDNAME_NO_MEMBER_TYPE           (0x0200)  // Disable expansion of 'static' or 'virtual'ness of members
#define UNDNAME_NO_RETURN_UDT_MODEL      (0x0400)  // Disable expansion of MS model for UDT returns
#define UNDNAME_32_BIT_DECODE            (0x0800)  // Undecorate 32-bit decorated names
#define UNDNAME_NAME_ONLY                (0x1000)  // Crack only the name for primary declaration;
                                                                                                   //  return just [scope::]name.  Does expand template params
#define UNDNAME_NO_ARGUMENTS             (0x2000)  // Don't undecorate arguments to function
#define UNDNAME_NO_SPECIAL_SYMS          (0x4000)  // Don't undecorate special names (v-table, vcall, vector xxx, metatype, etc)

DWORD
IMAGEAPI
WINAPI
UnDecorateSymbolName(
    __in PCSTR name,
    __out_ecount(maxStringLength) PSTR outputString,
    __in DWORD maxStringLength,
    __in DWORD flags
    );

DWORD
IMAGEAPI
WINAPI
UnDecorateSymbolNameW(
    __in PCWSTR name,
    __out_ecount(maxStringLength) PWSTR outputString,
    __in DWORD maxStringLength,
    __in DWORD flags
    );

//
// these values are used for synthesized file types
// that can be passed in as image headers instead of
// the standard ones from ntimage.h
//

#define DBHHEADER_DEBUGDIRS     0x1
#define DBHHEADER_CVMISC        0x2
#define DBHHEADER_PDBGUID       0x3
typedef struct _MODLOAD_DATA {
    DWORD   ssize;                  // size of this struct
    DWORD   ssig;                   // signature identifying the passed data
    PVOID   data;                   // pointer to passed data
    DWORD   size;                   // size of passed data
    DWORD   flags;                  // options
} MODLOAD_DATA, *PMODLOAD_DATA;

typedef struct _MODLOAD_CVMISC {
    DWORD   oCV;                    // ofset to the codeview record
    size_t  cCV;                    // size of the codeview record
    DWORD   oMisc;                  // offset to the misc record
    size_t  cMisc;                  // size of the misc record
    DWORD   dtImage;                // datetime stamp of the image
    DWORD   cImage;                 // size of the image
} MODLOAD_CVMISC, *PMODLOAD_CVMISC;

typedef struct _MODLOAD_PDBGUID_PDBAGE {
    GUID    PdbGuid;                // Pdb Guid 
    DWORD   PdbAge;                 // Pdb Age 
} MODLOAD_PDBGUID_PDBAGE, *PMODLOAD_PDBGUID_PDBAGE;

//
// StackWalking API
//

typedef enum {
    AddrMode1616,
    AddrMode1632,
    AddrModeReal,
    AddrModeFlat
} ADDRESS_MODE;

typedef struct _tagADDRESS64 {
    DWORD64       Offset;
    WORD          Segment;
    ADDRESS_MODE  Mode;
} ADDRESS64, *LPADDRESS64;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define ADDRESS ADDRESS64
#define LPADDRESS LPADDRESS64
#else
typedef struct _tagADDRESS {
    DWORD         Offset;
    WORD          Segment;
    ADDRESS_MODE  Mode;
} ADDRESS, *LPADDRESS;

__inline
void
Address32To64(
    __in LPADDRESS a32,
    __out LPADDRESS64 a64
    )
{
    a64->Offset = (ULONG64)(LONG64)(LONG)a32->Offset;
    a64->Segment = a32->Segment;
    a64->Mode = a32->Mode;
}

__inline
void
Address64To32(
    __in LPADDRESS64 a64,
    __out LPADDRESS a32
    )
{
    a32->Offset = (ULONG)a64->Offset;
    a32->Segment = a64->Segment;
    a32->Mode = a64->Mode;
}
#endif

//
// This structure is included in the STACKFRAME structure,
// and is used to trace through usermode callbacks in a thread's
// kernel stack.  The values must be copied by the kernel debugger
// from the DBGKD_GET_VERSION and WAIT_STATE_CHANGE packets.
//

//
// New KDHELP structure for 64 bit system support.
// This structure is preferred in new code.
//
typedef struct _KDHELP64 {

    //
    // address of kernel thread object, as provided in the
    // WAIT_STATE_CHANGE packet.
    //
    DWORD64   Thread;

    //
    // offset in thread object to pointer to the current callback frame
    // in kernel stack.
    //
    DWORD   ThCallbackStack;

    //
    // offset in thread object to pointer to the current callback backing
    // store frame in kernel stack.
    //
    DWORD   ThCallbackBStore;

    //
    // offsets to values in frame:
    //
    // address of next callback frame
    DWORD   NextCallback;

    // address of saved frame pointer (if applicable)
    DWORD   FramePointer;


    //
    // Address of the kernel function that calls out to user mode
    //
    DWORD64   KiCallUserMode;

    //
    // Address of the user mode dispatcher function
    //
    DWORD64   KeUserCallbackDispatcher;

    //
    // Lowest kernel mode address
    //
    DWORD64   SystemRangeStart;

    //
    // Address of the user mode exception dispatcher function.
    // Added in API version 10.
    //
    DWORD64   KiUserExceptionDispatcher;

    //
    // Stack bounds, added in API version 11.
    //
    DWORD64   StackBase;
    DWORD64   StackLimit;

    DWORD64   Reserved[5];

} KDHELP64, *PKDHELP64;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define KDHELP KDHELP64
#define PKDHELP PKDHELP64
#else
typedef struct _KDHELP {

    //
    // address of kernel thread object, as provided in the
    // WAIT_STATE_CHANGE packet.
    //
    DWORD   Thread;

    //
    // offset in thread object to pointer to the current callback frame
    // in kernel stack.
    //
    DWORD   ThCallbackStack;

    //
    // offsets to values in frame:
    //
    // address of next callback frame
    DWORD   NextCallback;

    // address of saved frame pointer (if applicable)
    DWORD   FramePointer;

    //
    // Address of the kernel function that calls out to user mode
    //
    DWORD   KiCallUserMode;

    //
    // Address of the user mode dispatcher function
    //
    DWORD   KeUserCallbackDispatcher;

    //
    // Lowest kernel mode address
    //
    DWORD   SystemRangeStart;

    //
    // offset in thread object to pointer to the current callback backing
    // store frame in kernel stack.
    //
    DWORD   ThCallbackBStore;

    //
    // Address of the user mode exception dispatcher function.
    // Added in API version 10.
    //
    DWORD   KiUserExceptionDispatcher;

    //
    // Stack bounds, added in API version 11.
    //
    DWORD   StackBase;
    DWORD   StackLimit;

    DWORD   Reserved[5];

} KDHELP, *PKDHELP;

__inline
void
KdHelp32To64(
    __in PKDHELP p32,
    __out PKDHELP64 p64
    )
{
    p64->Thread = p32->Thread;
    p64->ThCallbackStack = p32->ThCallbackStack;
    p64->NextCallback = p32->NextCallback;
    p64->FramePointer = p32->FramePointer;
    p64->KiCallUserMode = p32->KiCallUserMode;
    p64->KeUserCallbackDispatcher = p32->KeUserCallbackDispatcher;
    p64->SystemRangeStart = p32->SystemRangeStart;
    p64->KiUserExceptionDispatcher = p32->KiUserExceptionDispatcher;
    p64->StackBase = p32->StackBase;
    p64->StackLimit = p32->StackLimit;
}
#endif

typedef struct _tagSTACKFRAME64 {
    ADDRESS64   AddrPC;               // program counter
    ADDRESS64   AddrReturn;           // return address
    ADDRESS64   AddrFrame;            // frame pointer
    ADDRESS64   AddrStack;            // stack pointer
    ADDRESS64   AddrBStore;           // backing store pointer
    PVOID       FuncTableEntry;       // pointer to pdata/fpo or NULL
    DWORD64     Params[4];            // possible arguments to the function
    BOOL        Far;                  // WOW far call
    BOOL        Virtual;              // is this a virtual frame?
    DWORD64     Reserved[3];
    KDHELP64    KdHelp;
} STACKFRAME64, *LPSTACKFRAME64;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define STACKFRAME STACKFRAME64
#define LPSTACKFRAME LPSTACKFRAME64
#else
typedef struct _tagSTACKFRAME {
    ADDRESS     AddrPC;               // program counter
    ADDRESS     AddrReturn;           // return address
    ADDRESS     AddrFrame;            // frame pointer
    ADDRESS     AddrStack;            // stack pointer
    PVOID       FuncTableEntry;       // pointer to pdata/fpo or NULL
    DWORD       Params[4];            // possible arguments to the function
    BOOL        Far;                  // WOW far call
    BOOL        Virtual;              // is this a virtual frame?
    DWORD       Reserved[3];
    KDHELP      KdHelp;
    ADDRESS     AddrBStore;           // backing store pointer
} STACKFRAME, *LPSTACKFRAME;
#endif


typedef
BOOL
(__stdcall *PREAD_PROCESS_MEMORY_ROUTINE64)(
    __in HANDLE hProcess,
    __in DWORD64 qwBaseAddress,
    __out_bcount(nSize) PVOID lpBuffer,
    __in DWORD nSize,
    __out LPDWORD lpNumberOfBytesRead
    );

typedef
PVOID
(__stdcall *PFUNCTION_TABLE_ACCESS_ROUTINE64)(
    __in HANDLE ahProcess,
    __in DWORD64 AddrBase
    );

typedef
DWORD64
(__stdcall *PGET_MODULE_BASE_ROUTINE64)(
    __in HANDLE hProcess,
    __in DWORD64 Address
    );

typedef
DWORD64
(__stdcall *PTRANSLATE_ADDRESS_ROUTINE64)(
    __in HANDLE hProcess,
    __in HANDLE hThread,
    __in LPADDRESS64 lpaddr
    );

BOOL
IMAGEAPI
StackWalk64(
    __in DWORD MachineType,
    __in HANDLE hProcess,
    __in HANDLE hThread,
    __inout LPSTACKFRAME64 StackFrame,
    __inout PVOID ContextRecord,
    __in_opt PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine,
    __in_opt PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine,
    __in_opt PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine,
    __in_opt PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)

#define PREAD_PROCESS_MEMORY_ROUTINE PREAD_PROCESS_MEMORY_ROUTINE64
#define PFUNCTION_TABLE_ACCESS_ROUTINE PFUNCTION_TABLE_ACCESS_ROUTINE64
#define PGET_MODULE_BASE_ROUTINE PGET_MODULE_BASE_ROUTINE64
#define PTRANSLATE_ADDRESS_ROUTINE PTRANSLATE_ADDRESS_ROUTINE64

#define StackWalk StackWalk64

#else

typedef
BOOL
(__stdcall *PREAD_PROCESS_MEMORY_ROUTINE)(
    __in HANDLE hProcess,
    __in DWORD lpBaseAddress,
    __out_bcount(nSize) PVOID lpBuffer,
    __in DWORD nSize,
    __out PDWORD lpNumberOfBytesRead
    );

typedef
PVOID
(__stdcall *PFUNCTION_TABLE_ACCESS_ROUTINE)(
    __in HANDLE hProcess,
    __in DWORD AddrBase
    );

typedef
DWORD
(__stdcall *PGET_MODULE_BASE_ROUTINE)(
    __in HANDLE hProcess,
    __in DWORD Address
    );

typedef
DWORD
(__stdcall *PTRANSLATE_ADDRESS_ROUTINE)(
    __in HANDLE hProcess,
    __in HANDLE hThread,
    __out LPADDRESS lpaddr
    );

BOOL
IMAGEAPI
StackWalk(
    DWORD MachineType,
    __in HANDLE hProcess,
    __in HANDLE hThread,
    __inout LPSTACKFRAME StackFrame,
    __inout PVOID ContextRecord,
    __in_opt PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine,
    __in_opt PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine,
    __in_opt PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine,
    __in_opt PTRANSLATE_ADDRESS_ROUTINE TranslateAddress
    );

#endif


#define API_VERSION_NUMBER 11

typedef struct API_VERSION {
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    USHORT  Revision;
    USHORT  Reserved;
} API_VERSION, *LPAPI_VERSION;

LPAPI_VERSION
IMAGEAPI
ImagehlpApiVersion(
    VOID
    );

LPAPI_VERSION
IMAGEAPI
ImagehlpApiVersionEx(
    __in LPAPI_VERSION AppVersion
    );

DWORD
IMAGEAPI
GetTimestampForLoadedLibrary(
    __in HMODULE Module
    );

//
// typedefs for function pointers
//
typedef BOOL
(CALLBACK *PSYM_ENUMMODULES_CALLBACK64)(
    __in PCSTR ModuleName,
    __in DWORD64 BaseOfDll,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PSYM_ENUMMODULES_CALLBACKW64)(
    __in PCWSTR ModuleName,
    __in DWORD64 BaseOfDll,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PENUMLOADED_MODULES_CALLBACK64)(
    __in PCSTR ModuleName,
    __in DWORD64 ModuleBase,
    __in ULONG ModuleSize,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PENUMLOADED_MODULES_CALLBACKW64)(
    __in PCWSTR ModuleName,
    __in DWORD64 ModuleBase,
    __in ULONG ModuleSize,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PSYM_ENUMSYMBOLS_CALLBACK64)(
    __in PCSTR SymbolName,
    __in DWORD64 SymbolAddress,
    __in ULONG SymbolSize,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PSYM_ENUMSYMBOLS_CALLBACK64W)(
    __in PCWSTR SymbolName,
    __in DWORD64 SymbolAddress,
    __in ULONG SymbolSize,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PSYMBOL_REGISTERED_CALLBACK64)(
    __in HANDLE hProcess,
    __in ULONG ActionCode,
    __in_opt ULONG64 CallbackData,
    __in_opt ULONG64 UserContext
    );

typedef
PVOID
(CALLBACK *PSYMBOL_FUNCENTRY_CALLBACK)(
    __in HANDLE hProcess,
    __in DWORD AddrBase,
    __in_opt PVOID UserContext
    );

typedef
PVOID
(CALLBACK *PSYMBOL_FUNCENTRY_CALLBACK64)(
    __in HANDLE hProcess,
    __in ULONG64 AddrBase,
    __in ULONG64 UserContext
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)

#define PSYM_ENUMMODULES_CALLBACK PSYM_ENUMMODULES_CALLBACK64
#define PSYM_ENUMSYMBOLS_CALLBACK PSYM_ENUMSYMBOLS_CALLBACK64
#define PSYM_ENUMSYMBOLS_CALLBACKW PSYM_ENUMSYMBOLS_CALLBACK64W
#define PENUMLOADED_MODULES_CALLBACK PENUMLOADED_MODULES_CALLBACK64
#define PSYMBOL_REGISTERED_CALLBACK PSYMBOL_REGISTERED_CALLBACK64
#define PSYMBOL_FUNCENTRY_CALLBACK PSYMBOL_FUNCENTRY_CALLBACK64

#else

typedef BOOL
(CALLBACK *PSYM_ENUMMODULES_CALLBACK)(
    __in PCSTR ModuleName,
    __in ULONG BaseOfDll,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PSYM_ENUMSYMBOLS_CALLBACK)(
    __in PCSTR SymbolName,
    __in ULONG SymbolAddress,
    __in ULONG SymbolSize,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PSYM_ENUMSYMBOLS_CALLBACKW)(
    __in PCWSTR SymbolName,
    __in ULONG SymbolAddress,
    __in ULONG SymbolSize,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PENUMLOADED_MODULES_CALLBACK)(
    __in PCSTR ModuleName,
    __in ULONG ModuleBase,
    __in ULONG ModuleSize,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PSYMBOL_REGISTERED_CALLBACK)(
    __in HANDLE hProcess,
    __in ULONG ActionCode,
    __in_opt PVOID CallbackData,
    __in_opt PVOID UserContext
    );

#endif


// values found in SYMBOL_INFO.Tag
//
// This was taken from cvconst.h and should
// not override any values found there.
//
// #define _NO_CVCONST_H_ if you don't
// have access to that file...

#ifdef _NO_CVCONST_H

// DIA enums

enum SymTagEnum
{
    SymTagNull,
    SymTagExe,
    SymTagCompiland,
    SymTagCompilandDetails,
    SymTagCompilandEnv,
    SymTagFunction,
    SymTagBlock,
    SymTagData,
    SymTagAnnotation,
    SymTagLabel,
    SymTagPublicSymbol,
    SymTagUDT,
    SymTagEnum,
    SymTagFunctionType,
    SymTagPointerType,
    SymTagArrayType,
    SymTagBaseType,
    SymTagTypedef,
    SymTagBaseClass,
    SymTagFriend,
    SymTagFunctionArgType,
    SymTagFuncDebugStart,
    SymTagFuncDebugEnd,
    SymTagUsingNamespace,
    SymTagVTableShape,
    SymTagVTable,
    SymTagCustom,
    SymTagThunk,
    SymTagCustomType,
    SymTagManagedType,
    SymTagDimension,
    SymTagMax
};

#endif

//
// flags found in SYMBOL_INFO.Flags
//

#define SYMFLAG_VALUEPRESENT     0x00000001
#define SYMFLAG_REGISTER         0x00000008
#define SYMFLAG_REGREL           0x00000010
#define SYMFLAG_FRAMEREL         0x00000020
#define SYMFLAG_PARAMETER        0x00000040
#define SYMFLAG_LOCAL            0x00000080
#define SYMFLAG_CONSTANT         0x00000100
#define SYMFLAG_EXPORT           0x00000200
#define SYMFLAG_FORWARDER        0x00000400
#define SYMFLAG_FUNCTION         0x00000800
#define SYMFLAG_VIRTUAL          0x00001000
#define SYMFLAG_THUNK            0x00002000
#define SYMFLAG_TLSREL           0x00004000
#define SYMFLAG_SLOT             0x00008000
#define SYMFLAG_ILREL            0x00010000
#define SYMFLAG_METADATA         0x00020000
#define SYMFLAG_CLR_TOKEN        0x00040000

// this resets SymNext/Prev to the beginning
// of the module passed in the address field

#define SYMFLAG_RESET            0x80000000

//
// symbol type enumeration
//
typedef enum {
    SymNone = 0,
    SymCoff,
    SymCv,
    SymPdb,
    SymExport,
    SymDeferred,
    SymSym,       // .sym file
    SymDia,
    SymVirtual,
    NumSymTypes
} SYM_TYPE;

//
// symbol data structure
//

typedef struct _IMAGEHLP_SYMBOL64 {
    DWORD   SizeOfStruct;           // set to sizeof(IMAGEHLP_SYMBOL64)
    DWORD64 Address;                // virtual address including dll base address
    DWORD   Size;                   // estimated size of symbol, can be zero
    DWORD   Flags;                  // info about the symbols, see the SYMF defines
    DWORD   MaxNameLength;          // maximum size of symbol name in 'Name'
    CHAR    Name[1];                // symbol name (null terminated string)
} IMAGEHLP_SYMBOL64, *PIMAGEHLP_SYMBOL64;

typedef struct _IMAGEHLP_SYMBOL64_PACKAGE {
    IMAGEHLP_SYMBOL64 sym;
    CHAR              name[MAX_SYM_NAME + 1];
} IMAGEHLP_SYMBOL64_PACKAGE, *PIMAGEHLP_SYMBOL64_PACKAGE;

typedef struct _IMAGEHLP_SYMBOLW64 {
    DWORD   SizeOfStruct;           // set to sizeof(IMAGEHLP_SYMBOLW64)
    DWORD64 Address;                // virtual address including dll base address
    DWORD   Size;                   // estimated size of symbol, can be zero
    DWORD   Flags;                  // info about the symbols, see the SYMF defines
    DWORD   MaxNameLength;          // maximum size of symbol name in 'Name'
    WCHAR   Name[1];                // symbol name (null terminated string)
} IMAGEHLP_SYMBOLW64, *PIMAGEHLP_SYMBOLW64;

typedef struct _IMAGEHLP_SYMBOLW64_PACKAGE {
    IMAGEHLP_SYMBOLW64 sym;
    WCHAR              name[MAX_SYM_NAME + 1];
} IMAGEHLP_SYMBOLW64_PACKAGE, *PIMAGEHLP_SYMBOLW64_PACKAGE;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)

 #define IMAGEHLP_SYMBOL IMAGEHLP_SYMBOL64
 #define PIMAGEHLP_SYMBOL PIMAGEHLP_SYMBOL64
 #define IMAGEHLP_SYMBOL_PACKAGE IMAGEHLP_SYMBOL64_PACKAGE
 #define PIMAGEHLP_SYMBOL_PACKAGE PIMAGEHLP_SYMBOL64_PACKAGE
 #define IMAGEHLP_SYMBOLW IMAGEHLP_SYMBOLW64
 #define PIMAGEHLP_SYMBOLW PIMAGEHLP_SYMBOLW64
 #define IMAGEHLP_SYMBOLW_PACKAGE IMAGEHLP_SYMBOLW64_PACKAGE
 #define PIMAGEHLP_SYMBOLW_PACKAGE PIMAGEHLP_SYMBOLW64_PACKAGE

#else

 typedef struct _IMAGEHLP_SYMBOL {
     DWORD SizeOfStruct;           // set to sizeof(IMAGEHLP_SYMBOL)
     DWORD Address;                // virtual address including dll base address
     DWORD Size;                   // estimated size of symbol, can be zero
     DWORD Flags;                  // info about the symbols, see the SYMF defines
     DWORD                       MaxNameLength;          // maximum size of symbol name in 'Name'
     CHAR                        Name[1];                // symbol name (null terminated string)
 } IMAGEHLP_SYMBOL, *PIMAGEHLP_SYMBOL;

 typedef struct _IMAGEHLP_SYMBOL_PACKAGE {
     IMAGEHLP_SYMBOL sym;
     CHAR            name[MAX_SYM_NAME + 1];
 } IMAGEHLP_SYMBOL_PACKAGE, *PIMAGEHLP_SYMBOL_PACKAGE;

 typedef struct _IMAGEHLP_SYMBOLW {
     DWORD SizeOfStruct;           // set to sizeof(IMAGEHLP_SYMBOLW)
     DWORD Address;                // virtual address including dll base address
     DWORD Size;                   // estimated size of symbol, can be zero
     DWORD Flags;                  // info about the symbols, see the SYMF defines
     DWORD                       MaxNameLength;          // maximum size of symbol name in 'Name'
     WCHAR                       Name[1];                // symbol name (null terminated string)
 } IMAGEHLP_SYMBOLW, *PIMAGEHLP_SYMBOLW;

 typedef struct _IMAGEHLP_SYMBOLW_PACKAGE {
     IMAGEHLP_SYMBOLW sym;
     WCHAR            name[MAX_SYM_NAME + 1];
 } IMAGEHLP_SYMBOLW_PACKAGE, *PIMAGEHLP_SYMBOLW_PACKAGE;

#endif

//
// module data structure
//

typedef struct _IMAGEHLP_MODULE64 {
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_MODULE64)
    DWORD64  BaseOfImage;            // base load address of module
    DWORD    ImageSize;              // virtual size of the loaded module
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    NumSyms;                // number of symbols in the symbol table
    SYM_TYPE SymType;                // type of symbols loaded
    CHAR     ModuleName[32];         // module name
    CHAR     ImageName[256];         // image name
    CHAR     LoadedImageName[256];   // symbol file name
    // new elements: 07-Jun-2002
    CHAR     LoadedPdbName[256];     // pdb file name
    DWORD    CVSig;                  // Signature of the CV record in the debug directories
    CHAR     CVData[MAX_PATH * 3];   // Contents of the CV record
    DWORD    PdbSig;                 // Signature of PDB
    GUID     PdbSig70;               // Signature of PDB (VC 7 and up)
    DWORD    PdbAge;                 // DBI age of pdb
    BOOL     PdbUnmatched;           // loaded an unmatched pdb
    BOOL     DbgUnmatched;           // loaded an unmatched dbg
    BOOL     LineNumbers;            // we have line number information
    BOOL     GlobalSymbols;          // we have internal symbol information
    BOOL     TypeInfo;               // we have type information
    // new elements: 17-Dec-2003
    BOOL     SourceIndexed;          // pdb supports source server
    BOOL     Publics;                // contains public symbols
} IMAGEHLP_MODULE64, *PIMAGEHLP_MODULE64;

typedef struct _IMAGEHLP_MODULEW64 {
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_MODULE64)
    DWORD64  BaseOfImage;            // base load address of module
    DWORD    ImageSize;              // virtual size of the loaded module
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    NumSyms;                // number of symbols in the symbol table
    SYM_TYPE SymType;                // type of symbols loaded
    WCHAR    ModuleName[32];         // module name
    WCHAR    ImageName[256];         // image name
    // new elements: 07-Jun-2002
    WCHAR    LoadedImageName[256];   // symbol file name
    WCHAR    LoadedPdbName[256];     // pdb file name
    DWORD    CVSig;                  // Signature of the CV record in the debug directories
    WCHAR        CVData[MAX_PATH * 3];   // Contents of the CV record
    DWORD    PdbSig;                 // Signature of PDB
    GUID     PdbSig70;               // Signature of PDB (VC 7 and up)
    DWORD    PdbAge;                 // DBI age of pdb
    BOOL     PdbUnmatched;           // loaded an unmatched pdb
    BOOL     DbgUnmatched;           // loaded an unmatched dbg
    BOOL     LineNumbers;            // we have line number information
    BOOL     GlobalSymbols;          // we have internal symbol information
    BOOL     TypeInfo;               // we have type information
    // new elements: 17-Dec-2003
    BOOL     SourceIndexed;          // pdb supports source server
    BOOL     Publics;                // contains public symbols
} IMAGEHLP_MODULEW64, *PIMAGEHLP_MODULEW64;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define IMAGEHLP_MODULE IMAGEHLP_MODULE64
#define PIMAGEHLP_MODULE PIMAGEHLP_MODULE64
#define IMAGEHLP_MODULEW IMAGEHLP_MODULEW64
#define PIMAGEHLP_MODULEW PIMAGEHLP_MODULEW64
#else
typedef struct _IMAGEHLP_MODULE {
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_MODULE)
    DWORD    BaseOfImage;            // base load address of module
    DWORD    ImageSize;              // virtual size of the loaded module
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    NumSyms;                // number of symbols in the symbol table
    SYM_TYPE SymType;                // type of symbols loaded
    CHAR     ModuleName[32];         // module name
    CHAR     ImageName[256];         // image name
    CHAR     LoadedImageName[256];   // symbol file name
} IMAGEHLP_MODULE, *PIMAGEHLP_MODULE;

typedef struct _IMAGEHLP_MODULEW {
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_MODULE)
    DWORD    BaseOfImage;            // base load address of module
    DWORD    ImageSize;              // virtual size of the loaded module
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    NumSyms;                // number of symbols in the symbol table
    SYM_TYPE SymType;                // type of symbols loaded
    WCHAR    ModuleName[32];         // module name
    WCHAR    ImageName[256];         // image name
    WCHAR    LoadedImageName[256];   // symbol file name
} IMAGEHLP_MODULEW, *PIMAGEHLP_MODULEW;
#endif

//
// source file line data structure
//

typedef struct _IMAGEHLP_LINE64 {
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_LINE64)
    PVOID    Key;                    // internal
    DWORD    LineNumber;             // line number in file
    PCHAR    FileName;               // full filename
    DWORD64  Address;                // first instruction of line
} IMAGEHLP_LINE64, *PIMAGEHLP_LINE64;

typedef struct _IMAGEHLP_LINEW64 {
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_LINE64)
    PVOID    Key;                    // internal
    DWORD    LineNumber;             // line number in file
    PWSTR    FileName;               // full filename
    DWORD64  Address;                // first instruction of line
} IMAGEHLP_LINEW64, *PIMAGEHLP_LINEW64;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define IMAGEHLP_LINE IMAGEHLP_LINE64
#define PIMAGEHLP_LINE PIMAGEHLP_LINE64
#else
typedef struct _IMAGEHLP_LINE {
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_LINE)
    PVOID    Key;                    // internal
    DWORD    LineNumber;             // line number in file
    PCHAR    FileName;               // full filename
    DWORD    Address;                // first instruction of line
} IMAGEHLP_LINE, *PIMAGEHLP_LINE;

typedef struct _IMAGEHLP_LINEW {
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_LINE64)
    PVOID    Key;                    // internal
    DWORD    LineNumber;             // line number in file
    PCHAR    FileName;               // full filename
    DWORD64  Address;                // first instruction of line
} IMAGEHLP_LINEW, *PIMAGEHLP_LINEW;
#endif

//
// source file structure
//

typedef struct _SOURCEFILE {
    DWORD64  ModBase;                // base address of loaded module
    PCHAR    FileName;               // full filename of source
} SOURCEFILE, *PSOURCEFILE;

typedef struct _SOURCEFILEW {
    DWORD64  ModBase;                // base address of loaded module
    PWSTR    FileName;               // full filename of source
} SOURCEFILEW, *PSOURCEFILEW;

//
// data structures used for registered symbol callbacks
//

#define CBA_DEFERRED_SYMBOL_LOAD_START          0x00000001
#define CBA_DEFERRED_SYMBOL_LOAD_COMPLETE       0x00000002
#define CBA_DEFERRED_SYMBOL_LOAD_FAILURE        0x00000003
#define CBA_SYMBOLS_UNLOADED                    0x00000004
#define CBA_DUPLICATE_SYMBOL                    0x00000005
#define CBA_READ_MEMORY                         0x00000006
#define CBA_DEFERRED_SYMBOL_LOAD_CANCEL         0x00000007
#define CBA_SET_OPTIONS                         0x00000008
#define CBA_EVENT                               0x00000010
#define CBA_DEFERRED_SYMBOL_LOAD_PARTIAL        0x00000020
#define CBA_DEBUG_INFO                          0x10000000
#define CBA_SRCSRV_INFO                         0x20000000
#define CBA_SRCSRV_EVENT                        0x40000000

typedef struct _IMAGEHLP_CBA_READ_MEMORY {
    DWORD64   addr;                                     // address to read from
    PVOID     buf;                                      // buffer to read to
    DWORD     bytes;                                    // amount of bytes to read
    DWORD    *bytesread;                                // pointer to store amount of bytes read
} IMAGEHLP_CBA_READ_MEMORY, *PIMAGEHLP_CBA_READ_MEMORY;

enum {
    sevInfo = 0,
    sevProblem,
    sevAttn,
    sevFatal,
    sevMax  // unused
};

#define EVENT_SRCSPEW_START 100
#define EVENT_SRCSPEW       100
#define EVENT_SRCSPEW_END   199

typedef struct _IMAGEHLP_CBA_EVENT {
    DWORD severity;                                     // values from sevInfo to sevFatal
    DWORD code;                                         // numerical code IDs the error
    PCHAR desc;                                         // may contain a text description of the error
    PVOID object;                                       // value dependant upon the error code
} IMAGEHLP_CBA_EVENT, *PIMAGEHLP_CBA_EVENT;

typedef struct _IMAGEHLP_CBA_EVENTW {
    DWORD  severity;                                     // values from sevInfo to sevFatal
    DWORD  code;                                         // numerical code IDs the error
    PCWSTR desc;                                         // may contain a text description of the error
    PVOID  object;                                       // value dependant upon the error code
} IMAGEHLP_CBA_EVENTW, *PIMAGEHLP_CBA_EVENTW;

typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD64 {
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_DEFERRED_SYMBOL_LOAD64)
    DWORD64  BaseOfImage;            // base load address of module
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    CHAR     FileName[MAX_PATH];     // symbols file or image name
    BOOLEAN  Reparse;                // load failure reparse
    HANDLE   hFile;                  // file handle, if passed
    DWORD    Flags;                     //
} IMAGEHLP_DEFERRED_SYMBOL_LOAD64, *PIMAGEHLP_DEFERRED_SYMBOL_LOAD64;

typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOADW64 {
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_DEFERRED_SYMBOL_LOADW64)
    DWORD64  BaseOfImage;            // base load address of module
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    WCHAR    FileName[MAX_PATH + 1]; // symbols file or image name
    BOOLEAN  Reparse;                // load failure reparse
    HANDLE   hFile;                  // file handle, if passed
    DWORD    Flags;         //
} IMAGEHLP_DEFERRED_SYMBOL_LOADW64, *PIMAGEHLP_DEFERRED_SYMBOL_LOADW64;

#define DSLFLAG_MISMATCHED_PDB  0x1
#define DSLFLAG_MISMATCHED_DBG  0x2

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define IMAGEHLP_DEFERRED_SYMBOL_LOAD IMAGEHLP_DEFERRED_SYMBOL_LOAD64
#define PIMAGEHLP_DEFERRED_SYMBOL_LOAD PIMAGEHLP_DEFERRED_SYMBOL_LOAD64
#else
typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD {
    DWORD    SizeOfStruct;           // set to sizeof(IMAGEHLP_DEFERRED_SYMBOL_LOAD)
    DWORD    BaseOfImage;            // base load address of module
    DWORD    CheckSum;               // checksum from the pe header
    DWORD    TimeDateStamp;          // date/time stamp from pe header
    CHAR     FileName[MAX_PATH];     // symbols file or image name
    BOOLEAN  Reparse;                // load failure reparse
    HANDLE   hFile;                  // file handle, if passed
} IMAGEHLP_DEFERRED_SYMBOL_LOAD, *PIMAGEHLP_DEFERRED_SYMBOL_LOAD;
#endif

typedef struct _IMAGEHLP_DUPLICATE_SYMBOL64 {
    DWORD              SizeOfStruct;           // set to sizeof(IMAGEHLP_DUPLICATE_SYMBOL64)
    DWORD              NumberOfDups;           // number of duplicates in the Symbol array
    PIMAGEHLP_SYMBOL64 Symbol;                 // array of duplicate symbols
    DWORD              SelectedSymbol;         // symbol selected (-1 to start)
} IMAGEHLP_DUPLICATE_SYMBOL64, *PIMAGEHLP_DUPLICATE_SYMBOL64;

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define IMAGEHLP_DUPLICATE_SYMBOL IMAGEHLP_DUPLICATE_SYMBOL64
#define PIMAGEHLP_DUPLICATE_SYMBOL PIMAGEHLP_DUPLICATE_SYMBOL64
#else
typedef struct _IMAGEHLP_DUPLICATE_SYMBOL {
    DWORD            SizeOfStruct;           // set to sizeof(IMAGEHLP_DUPLICATE_SYMBOL)
    DWORD            NumberOfDups;           // number of duplicates in the Symbol array
    PIMAGEHLP_SYMBOL Symbol;                 // array of duplicate symbols
    DWORD            SelectedSymbol;         // symbol selected (-1 to start)
} IMAGEHLP_DUPLICATE_SYMBOL, *PIMAGEHLP_DUPLICATE_SYMBOL;
#endif

// If dbghelp ever needs to display graphical UI, it will use this as the parent window.

BOOL
IMAGEAPI
SymSetParentWindow(
    __in HWND hwnd
    );

PCHAR
IMAGEAPI
SymSetHomeDirectory(
    __in_opt HANDLE hProcess,
    __in_opt PCSTR dir
    );

PWSTR
IMAGEAPI
SymSetHomeDirectoryW(
    __in_opt HANDLE hProcess,
    __in_opt PCWSTR dir
    );

PCHAR
IMAGEAPI
SymGetHomeDirectory(
    __in DWORD type,
    __out_ecount(size) PSTR dir,
    __in size_t size
    );

PWSTR
IMAGEAPI
SymGetHomeDirectoryW(
    __in DWORD type,
    __out_ecount(size) PWSTR dir,
    __in size_t size
    );

typedef enum {
    hdBase = 0, // root directory for dbghelp
    hdSym,      // where symbols are stored
    hdSrc,      // where source is stored
    hdMax       // end marker
};

typedef struct _OMAP {
    ULONG  rva;
    ULONG  rvaTo;
} OMAP, *POMAP;

BOOL
IMAGEAPI
SymGetOmaps(
    __in HANDLE hProcess,
    __in DWORD64 BaseOfDll,
    __out POMAP *OmapTo,
    __out PDWORD64 cOmapTo,
    __out POMAP *OmapFrom,
    __out PDWORD64 cOmapFrom
    );

//
// options that are set/returned by SymSetOptions() & SymGetOptions()
// these are used as a mask
//
#define SYMOPT_CASE_INSENSITIVE          0x00000001
#define SYMOPT_UNDNAME                   0x00000002
#define SYMOPT_DEFERRED_LOADS            0x00000004
#define SYMOPT_NO_CPP                    0x00000008
#define SYMOPT_LOAD_LINES                0x00000010
#define SYMOPT_OMAP_FIND_NEAREST         0x00000020
#define SYMOPT_LOAD_ANYTHING             0x00000040
#define SYMOPT_IGNORE_CVREC              0x00000080
#define SYMOPT_NO_UNQUALIFIED_LOADS      0x00000100
#define SYMOPT_FAIL_CRITICAL_ERRORS      0x00000200
#define SYMOPT_EXACT_SYMBOLS             0x00000400
#define SYMOPT_ALLOW_ABSOLUTE_SYMBOLS    0x00000800
#define SYMOPT_IGNORE_NT_SYMPATH         0x00001000
#define SYMOPT_INCLUDE_32BIT_MODULES     0x00002000
#define SYMOPT_PUBLICS_ONLY              0x00004000
#define SYMOPT_NO_PUBLICS                0x00008000
#define SYMOPT_AUTO_PUBLICS              0x00010000
#define SYMOPT_NO_IMAGE_SEARCH           0x00020000
#define SYMOPT_SECURE                    0x00040000
#define SYMOPT_NO_PROMPTS                0x00080000
#define SYMOPT_OVERWRITE                 0x00100000
#define SYMOPT_IGNORE_IMAGEDIR           0x00200000
#define SYMOPT_FLAT_DIRECTORY            0x00400000
#define SYMOPT_FAVOR_COMPRESSED          0x00800000
#define SYMOPT_ALLOW_ZERO_ADDRESS        0x01000000
#define SYMOPT_DISABLE_SYMSRV_AUTODETECT 0x02000000

#define SYMOPT_DEBUG                     0x80000000

DWORD
IMAGEAPI
SymSetOptions(
    __in DWORD   SymOptions
    );

DWORD
IMAGEAPI
SymGetOptions(
    VOID
    );

BOOL
IMAGEAPI
SymCleanup(
    __in HANDLE hProcess
    );

BOOL
IMAGEAPI
SymMatchString(
    __in PCSTR string,
    __in PCSTR expression,
    __in BOOL fCase
    );

BOOL
IMAGEAPI
SymMatchStringA(
    __in PCSTR string,
    __in PCSTR expression,
    __in BOOL fCase
    );

BOOL
IMAGEAPI
SymMatchStringW(
    __in PCWSTR string,
    __in PCWSTR expression,
    __in BOOL fCase
    );

typedef BOOL
(CALLBACK *PSYM_ENUMSOURCEFILES_CALLBACK)(
    __in PSOURCEFILE pSourceFile,
    __in_opt PVOID UserContext
    );

// for backwards compatibility - don't use this
#define PSYM_ENUMSOURCFILES_CALLBACK PSYM_ENUMSOURCEFILES_CALLBACK

BOOL
IMAGEAPI
SymEnumSourceFiles(
    __in HANDLE hProcess,
    __in ULONG64 ModBase,
    __in_opt PCSTR Mask,
    __in PSYM_ENUMSOURCEFILES_CALLBACK cbSrcFiles,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PSYM_ENUMSOURCEFILES_CALLBACKW)(
    __in PSOURCEFILEW pSourceFile,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumSourceFilesW(
    __in HANDLE hProcess,
    __in ULONG64 ModBase,
    __in_opt PCWSTR Mask,
    __in PSYM_ENUMSOURCEFILES_CALLBACKW cbSrcFiles,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateModules64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK64 EnumModulesCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateModulesW64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,
    __in_opt PVOID UserContext
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymEnumerateModules SymEnumerateModules64
#else
BOOL
IMAGEAPI
SymEnumerateModules(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,
    __in_opt PVOID UserContext
    );
#endif

BOOL
IMAGEAPI
EnumerateLoadedModulesEx(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );
    
BOOL
IMAGEAPI
EnumerateLoadedModulesExW(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
EnumerateLoadedModules64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
EnumerateLoadedModulesW64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define EnumerateLoadedModules EnumerateLoadedModules64
#else
BOOL
IMAGEAPI
EnumerateLoadedModules(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );
#endif

PVOID
IMAGEAPI
SymFunctionTableAccess64(
    __in HANDLE hProcess,
    __in DWORD64 AddrBase
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymFunctionTableAccess SymFunctionTableAccess64
#else
PVOID
IMAGEAPI
SymFunctionTableAccess(
    __in HANDLE hProcess,
    __in DWORD AddrBase
    );
#endif

BOOL
IMAGEAPI
SymGetUnwindInfo(
    __in HANDLE hProcess,
    __in DWORD64 Address,
    __out_bcount_opt(*Size) PVOID Buffer,
    __inout PULONG Size
    );

BOOL
IMAGEAPI
SymGetModuleInfo64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULE64 ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif

DWORD64
IMAGEAPI
SymGetModuleBase64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetModuleBase SymGetModuleBase64
#else
DWORD
IMAGEAPI
SymGetModuleBase(
    __in HANDLE hProcess,
    __in DWORD dwAddr
    );
#endif

typedef struct _SRCCODEINFO {
    DWORD   SizeOfStruct;           // set to sizeof(SRCCODEINFO)
    PVOID   Key;                    // not used
    DWORD64 ModBase;                // base address of module this applies to
    CHAR    Obj[MAX_PATH + 1];      // the object file within the module
    CHAR    FileName[MAX_PATH + 1]; // full filename
    DWORD   LineNumber;             // line number in file
    DWORD64 Address;                // first instruction of line
} SRCCODEINFO, *PSRCCODEINFO;

typedef struct _SRCCODEINFOW {
    DWORD   SizeOfStruct;           // set to sizeof(SRCCODEINFO)
    PVOID   Key;                    // not used
    DWORD64 ModBase;                // base address of module this applies to
    WCHAR   Obj[MAX_PATH + 1];      // the object file within the module
    WCHAR   FileName[MAX_PATH + 1]; // full filename
    DWORD   LineNumber;             // line number in file
    DWORD64 Address;                // first instruction of line
} SRCCODEINFOW, *PSRCCODEINFOW;

typedef BOOL
(CALLBACK *PSYM_ENUMLINES_CALLBACK)(
    __in PSRCCODEINFO LineInfo,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumLines(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCSTR Obj,
    __in_opt PCSTR File,
    __in PSYM_ENUMLINES_CALLBACK EnumLinesCallback,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PSYM_ENUMLINES_CALLBACKW)(
    __in PSRCCODEINFOW LineInfo,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumLinesW(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCWSTR Obj,
    __in_opt PCWSTR File,
    __in PSYM_ENUMLINES_CALLBACKW EnumLinesCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymGetLineFromAddr64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PDWORD pdwDisplacement,
    __out PIMAGEHLP_LINE64 Line64
    );

BOOL
IMAGEAPI
SymGetLineFromAddrW64(
    __in HANDLE hProcess,
    __in DWORD64 dwAddr,
    __out PDWORD pdwDisplacement,
    __out PIMAGEHLP_LINEW64 Line
    );

BOOL
IMAGEAPI
SymEnumSourceLines(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCSTR Obj,
    __in_opt PCSTR File,
    __in_opt DWORD Line,
    __in DWORD Flags,
    __in PSYM_ENUMLINES_CALLBACK EnumLinesCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumSourceLinesW(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCWSTR Obj,
    __in_opt PCWSTR File,
    __in_opt DWORD Line,
    __in DWORD Flags,
    __in PSYM_ENUMLINES_CALLBACKW EnumLinesCallback,
    __in_opt PVOID UserContext
    );

// flags for SymEnumSourceLines

#define ESLFLAG_FULLPATH        0x1
#define ESLFLAG_NEAREST         0x2
#define ESLFLAG_PREV            0x4
#define ESLFLAG_NEXT            0x8

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetLineFromAddr SymGetLineFromAddr64
#define SymGetLineFromAddrW SymGetLineFromAddrW64
#else
BOOL
IMAGEAPI
SymGetLineFromAddr(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PDWORD pdwDisplacement,
    __out PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineFromAddrW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PDWORD pdwDisplacement,
    __out PIMAGEHLP_LINEW Line
    );
#endif

BOOL
IMAGEAPI
SymGetLineFromName64(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE64 Line
    );

BOOL
IMAGEAPI
SymGetLineFromNameW64(
    __in HANDLE hProcess,
    __in_opt PCWSTR ModuleName,
    __in_opt PCWSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINEW64 Line
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetLineFromName SymGetLineFromName64
#else
BOOL
IMAGEAPI
SymGetLineFromName(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE Line
    );
#endif

BOOL
IMAGEAPI
SymGetLineNext64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE64 Line
    );

BOOL
IMAGEAPI
SymGetLineNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetLineNext SymGetLineNext64
#else
BOOL
IMAGEAPI
SymGetLineNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif

BOOL
IMAGEAPI
SymGetLinePrev64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE64 Line
    );

BOOL
IMAGEAPI
SymGetLinePrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetLinePrev SymGetLinePrev64
#else
BOOL
IMAGEAPI
SymGetLinePrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLinePrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif

ULONG
IMAGEAPI
SymGetFileLineOffsets64(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in PCSTR FileName,
    __out_ecount(BufferLines) PDWORD64 Buffer,
    __in ULONG BufferLines
    );

BOOL
IMAGEAPI
SymMatchFileName(
    __in PCSTR FileName,
    __in PCSTR Match,
    __deref_opt_out PSTR *FileNameStop,
    __deref_opt_out PSTR *MatchStop
    );

BOOL
IMAGEAPI
SymMatchFileNameW(
    __in PCWSTR FileName,
    __in PCWSTR Match,
    __deref_opt_out PWSTR *FileNameStop,
    __deref_opt_out PWSTR *MatchStop
    );

BOOL
IMAGEAPI
SymGetSourceFile(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCSTR Params,
    __in PCSTR FileSpec,
    __out_ecount(Size) PSTR FilePath,
    __in DWORD Size
    );

BOOL
IMAGEAPI
SymGetSourceFileW(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCWSTR Params,
    __in PCWSTR FileSpec,
    __out_ecount(Size) PWSTR FilePath,
    __in DWORD Size
    );

BOOL
IMAGEAPI
SymGetSourceFileToken(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in PCSTR FileSpec,
    __deref_out PVOID *Token,
    __out DWORD *Size
    );

BOOL
IMAGEAPI
SymGetSourceFileTokenW(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in PCWSTR FileSpec,
    __deref_out PVOID *Token,
    __out DWORD *Size
    );

BOOL
IMAGEAPI
SymGetSourceFileFromToken(
    __in HANDLE hProcess,
    __in PVOID Token,
    __in_opt PCSTR Params,
    __out_ecount(Size) PSTR FilePath,
    __in DWORD Size
    );

BOOL
IMAGEAPI
SymGetSourceFileFromTokenW(
    __in HANDLE hProcess,
    __in PVOID Token,
    __in_opt PCWSTR Params,
    __out_ecount(Size) PWSTR FilePath,
    __in DWORD Size
    );

BOOL
IMAGEAPI
SymGetSourceVarFromToken(
    __in HANDLE hProcess,
    __in PVOID Token,
    __in_opt PCSTR Params,
    __in PCSTR VarName,
    __out_ecount(Size) PSTR Value,
    __in DWORD Size
    );

BOOL
IMAGEAPI
SymGetSourceVarFromTokenW(
    __in HANDLE hProcess,
    __in PVOID Token,
    __in_opt PCWSTR Params,
    __in PCWSTR VarName,
    __out_ecount(Size) PWSTR Value,
    __in DWORD Size
    );

typedef BOOL (CALLBACK *PENUMSOURCEFILETOKENSCALLBACK)(__in PVOID token,  __in size_t size);

BOOL
IMAGEAPI
SymEnumSourceFileTokens(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in PENUMSOURCEFILETOKENSCALLBACK Callback
    );

BOOL
IMAGEAPI
SymInitialize(
    __in HANDLE hProcess,
    __in_opt PCSTR UserSearchPath,
    __in BOOL fInvadeProcess
    );

BOOL
IMAGEAPI
SymInitializeW(
    __in HANDLE hProcess,
    __in_opt PCWSTR UserSearchPath,
    __in BOOL fInvadeProcess
    );

BOOL
IMAGEAPI
SymGetSearchPath(
    __in HANDLE hProcess,
    __out_ecount(SearchPathLength) PSTR SearchPath,
    __in DWORD SearchPathLength
    );

BOOL
IMAGEAPI
SymGetSearchPathW(
    __in HANDLE hProcess,
    __out_ecount(SearchPathLength) PWSTR SearchPath,
    __in DWORD SearchPathLength
    );

BOOL
IMAGEAPI
SymSetSearchPath(
    __in HANDLE hProcess,
    __in_opt PCSTR SearchPath
    );

BOOL
IMAGEAPI
SymSetSearchPathW(
    __in HANDLE hProcess,
    __in_opt PCWSTR SearchPath
    );

#define SLMFLAG_VIRTUAL     0x1
#define SLMFLAG_ALT_INDEX   0x2
#define SLMFLAG_NO_SYMBOLS  0x4

DWORD64
IMAGEAPI
SymLoadModuleEx(
    __in HANDLE hProcess,
    __in_opt HANDLE hFile,
    __in_opt PCSTR ImageName,
    __in_opt PCSTR ModuleName,
    __in DWORD64 BaseOfDll,
    __in DWORD DllSize,
    __in_opt PMODLOAD_DATA Data,
    __in_opt DWORD Flags
    );

DWORD64
IMAGEAPI
SymLoadModuleExW(
    __in HANDLE hProcess,
    __in_opt HANDLE hFile,
    __in_opt PCWSTR ImageName,
    __in_opt PCWSTR ModuleName,
    __in DWORD64 BaseOfDll,
    __in DWORD DllSize,
    __in_opt PMODLOAD_DATA Data,
    __in_opt DWORD Flags
    );

BOOL
IMAGEAPI
SymUnloadModule64(
    __in HANDLE hProcess,
    __in DWORD64 BaseOfDll
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymUnloadModule SymUnloadModule64
#else
BOOL
IMAGEAPI
SymUnloadModule(
    __in HANDLE hProcess,
    __in DWORD BaseOfDll
    );
#endif

BOOL
IMAGEAPI
SymUnDName64(
    __in PIMAGEHLP_SYMBOL64 sym,            // Symbol to undecorate
    __out_ecount(UnDecNameLength) PSTR UnDecName,   // Buffer to store undecorated name in
    __in DWORD UnDecNameLength              // Size of the buffer
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymUnDName SymUnDName64
#else
BOOL
IMAGEAPI
SymUnDName(
    __in PIMAGEHLP_SYMBOL sym,              // Symbol to undecorate
    __out_ecount(UnDecNameLength) PSTR UnDecName,   // Buffer to store undecorated name in
    __in DWORD UnDecNameLength              // Size of the buffer
    );
#endif

BOOL
IMAGEAPI
SymRegisterCallback64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
    );

BOOL
IMAGEAPI
SymRegisterCallbackW64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
    );

BOOL
IMAGEAPI
SymRegisterFunctionEntryCallback64(
    __in HANDLE hProcess,
    __in PSYMBOL_FUNCENTRY_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymRegisterCallback SymRegisterCallback64
#define SymRegisterFunctionEntryCallback SymRegisterFunctionEntryCallback64
#else
BOOL
IMAGEAPI
SymRegisterCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymRegisterFunctionEntryCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif


typedef struct _IMAGEHLP_SYMBOL_SRC {
    DWORD sizeofstruct;
    DWORD type;
    char  file[MAX_PATH];
} IMAGEHLP_SYMBOL_SRC, *PIMAGEHLP_SYMBOL_SRC;

typedef struct _MODULE_TYPE_INFO { // AKA TYPTYP
    USHORT      dataLength;
    USHORT      leaf;
    BYTE        data[1];
} MODULE_TYPE_INFO, *PMODULE_TYPE_INFO;

typedef struct _SYMBOL_INFO {
    ULONG       SizeOfStruct;
    ULONG       TypeIndex;        // Type Index of symbol
    ULONG64     Reserved[2];
    ULONG       Index;
    ULONG       Size;
    ULONG64     ModBase;          // Base Address of module comtaining this symbol
    ULONG       Flags;
    ULONG64     Value;            // Value of symbol, ValuePresent should be 1
    ULONG64     Address;          // Address of symbol including base address of module
    ULONG       Register;         // register holding value or pointer to value
    ULONG       Scope;            // scope of the symbol
    ULONG       Tag;              // pdb classification
    ULONG       NameLen;          // Actual length of name
    ULONG       MaxNameLen;
    CHAR        Name[1];          // Name of symbol
} SYMBOL_INFO, *PSYMBOL_INFO;

typedef struct _SYMBOL_INFO_PACKAGE {
    SYMBOL_INFO si;
    CHAR        name[MAX_SYM_NAME + 1];
} SYMBOL_INFO_PACKAGE, *PSYMBOL_INFO_PACKAGE;

typedef struct _SYMBOL_INFOW {
    ULONG       SizeOfStruct;
    ULONG       TypeIndex;        // Type Index of symbol
    ULONG64     Reserved[2];
    ULONG       Index;
    ULONG       Size;
    ULONG64     ModBase;          // Base Address of module comtaining this symbol
    ULONG       Flags;
    ULONG64     Value;            // Value of symbol, ValuePresent should be 1
    ULONG64     Address;          // Address of symbol including base address of module
    ULONG       Register;         // register holding value or pointer to value
    ULONG       Scope;            // scope of the symbol
    ULONG       Tag;              // pdb classification
    ULONG       NameLen;          // Actual length of name
    ULONG       MaxNameLen;
    WCHAR       Name[1];          // Name of symbol
} SYMBOL_INFOW, *PSYMBOL_INFOW;

typedef struct _SYMBOL_INFO_PACKAGEW {
    SYMBOL_INFOW si;
    WCHAR        name[MAX_SYM_NAME + 1];
} SYMBOL_INFO_PACKAGEW, *PSYMBOL_INFO_PACKAGEW;

typedef struct _IMAGEHLP_STACK_FRAME
{
    ULONG64 InstructionOffset;
    ULONG64 ReturnOffset;
    ULONG64 FrameOffset;
    ULONG64 StackOffset;
    ULONG64 BackingStoreOffset;
    ULONG64 FuncTableEntry;
    ULONG64 Params[4];
    ULONG64 Reserved[5];
    BOOL    Virtual;
    ULONG   Reserved2;
} IMAGEHLP_STACK_FRAME, *PIMAGEHLP_STACK_FRAME;

typedef VOID IMAGEHLP_CONTEXT, *PIMAGEHLP_CONTEXT;


BOOL
IMAGEAPI
SymSetContext(
    __in HANDLE hProcess,
    __in PIMAGEHLP_STACK_FRAME StackFrame,
    __in_opt PIMAGEHLP_CONTEXT Context
    );

BOOL
IMAGEAPI
SymSetScopeFromAddr(
    __in HANDLE hProcess,
    __in ULONG64 Address
    );

BOOL
IMAGEAPI
SymSetScopeFromIndex(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in DWORD Index
    );

typedef BOOL
(CALLBACK *PSYM_ENUMPROCESSES_CALLBACK)(
    __in HANDLE hProcess,
    __in PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumProcesses(
    __in PSYM_ENUMPROCESSES_CALLBACK EnumProcessesCallback,
    __in PVOID UserContext
    );

BOOL
IMAGEAPI
SymFromAddr(
    __in HANDLE hProcess,
    __in DWORD64 Address,
    __out_opt PDWORD64 Displacement,
    __inout PSYMBOL_INFO Symbol
    );

BOOL
IMAGEAPI
SymFromAddrW(
    __in HANDLE hProcess,
    __in DWORD64 Address,
    __out_opt PDWORD64 Displacement,
    __inout PSYMBOL_INFOW Symbol
    );

BOOL
IMAGEAPI
SymFromToken(
    __in HANDLE hProcess,
    __in DWORD64 Base,
    __in DWORD Token,
    __inout PSYMBOL_INFO Symbol
    );

BOOL
IMAGEAPI
SymFromTokenW(
    __in HANDLE hProcess,
    __in DWORD64 Base,
    __in DWORD Token,
    __inout PSYMBOL_INFOW Symbol
    );

BOOL
IMAGEAPI
SymNext(
    __in HANDLE hProcess,
    __inout PSYMBOL_INFO si
    );

BOOL
IMAGEAPI
SymNextW(
    __in HANDLE hProcess,
    __inout PSYMBOL_INFOW siw
    );

BOOL
IMAGEAPI
SymPrev(
    __in HANDLE hProcess,
    __inout PSYMBOL_INFO si
    );

BOOL
IMAGEAPI
SymPrevW(
    __in HANDLE hProcess,
    __inout PSYMBOL_INFOW siw
    );

// While SymFromName will provide a symbol from a name,
// SymEnumSymbols can provide the same matching information
// for ALL symbols with a matching name, even regular
// expressions.  That way you can search across modules
// and differentiate between identically named symbols.

BOOL
IMAGEAPI
SymFromName(
    __in HANDLE hProcess,
    __in PCSTR Name,
    __inout PSYMBOL_INFO Symbol
    );

BOOL
IMAGEAPI
SymFromNameW(
    __in HANDLE hProcess,
    __in PCWSTR Name,
    __inout PSYMBOL_INFOW Symbol
    );

typedef BOOL
(CALLBACK *PSYM_ENUMERATESYMBOLS_CALLBACK)(
    __in PSYMBOL_INFO pSymInfo,
    __in ULONG SymbolSize,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumSymbols(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt PCSTR Mask,
    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

typedef BOOL
(CALLBACK *PSYM_ENUMERATESYMBOLS_CALLBACKW)(
    __in PSYMBOL_INFOW pSymInfo,
    __in ULONG SymbolSize,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumSymbolsW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt PCWSTR Mask,
    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumSymbolsForAddr(
    __in HANDLE hProcess,
    __in DWORD64 Address,
    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumSymbolsForAddrW(
    __in HANDLE hProcess,
    __in DWORD64 Address,
    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

#define SYMSEARCH_MASKOBJS      0x01    // used internally to implement other APIs
#define SYMSEARCH_RECURSE       0X02    // recurse scopes
#define SYMSEARCH_GLOBALSONLY   0X04    // search only for global symbols
#define SYMSEARCH_ALLITEMS      0X08    // search for everything in the pdb, not just normal scoped symbols

BOOL
IMAGEAPI
SymSearch(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt DWORD Index,
    __in_opt DWORD SymTag,
    __in_opt PCSTR Mask,
    __in_opt DWORD64 Address,
    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext,
    __in DWORD Options
    );

BOOL
IMAGEAPI
SymSearchW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt DWORD Index,
    __in_opt DWORD SymTag,
    __in_opt PCWSTR Mask,
    __in_opt DWORD64 Address,
    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext,
    __in DWORD Options
    );

BOOL
IMAGEAPI
SymGetScope(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in DWORD Index,
    __inout PSYMBOL_INFO Symbol
    );

BOOL
IMAGEAPI
SymGetScopeW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in DWORD Index,
    __inout PSYMBOL_INFOW Symbol
    );

BOOL
IMAGEAPI
SymFromIndex(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in DWORD Index,
    __inout PSYMBOL_INFO Symbol
    );

BOOL
IMAGEAPI
SymFromIndexW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in DWORD Index,
    __inout PSYMBOL_INFOW Symbol
    );

typedef enum _IMAGEHLP_SYMBOL_TYPE_INFO {
    TI_GET_SYMTAG,
    TI_GET_SYMNAME,
    TI_GET_LENGTH,
    TI_GET_TYPE,
    TI_GET_TYPEID,
    TI_GET_BASETYPE,
    TI_GET_ARRAYINDEXTYPEID,
    TI_FINDCHILDREN,
    TI_GET_DATAKIND,
    TI_GET_ADDRESSOFFSET,
    TI_GET_OFFSET,
    TI_GET_VALUE,
    TI_GET_COUNT,
    TI_GET_CHILDRENCOUNT,
    TI_GET_BITPOSITION,
    TI_GET_VIRTUALBASECLASS,
    TI_GET_VIRTUALTABLESHAPEID,
    TI_GET_VIRTUALBASEPOINTEROFFSET,
    TI_GET_CLASSPARENTID,
    TI_GET_NESTED,
    TI_GET_SYMINDEX,
    TI_GET_LEXICALPARENT,
    TI_GET_ADDRESS,
    TI_GET_THISADJUST,
    TI_GET_UDTKIND,
    TI_IS_EQUIV_TO,
    TI_GET_CALLING_CONVENTION,
    TI_IS_CLOSE_EQUIV_TO,
    TI_GTIEX_REQS_VALID,
    TI_GET_VIRTUALBASEOFFSET,
    TI_GET_VIRTUALBASEDISPINDEX,
    TI_GET_IS_REFERENCE,
    TI_GET_INDIRECTVIRTUALBASECLASS,
    IMAGEHLP_SYMBOL_TYPE_INFO_MAX,
} IMAGEHLP_SYMBOL_TYPE_INFO;

typedef struct _TI_FINDCHILDREN_PARAMS {
    ULONG Count;
    ULONG Start;
    ULONG ChildId[1];
} TI_FINDCHILDREN_PARAMS;

BOOL
IMAGEAPI
SymGetTypeInfo(
    __in HANDLE hProcess,
    __in DWORD64 ModBase,
    __in ULONG TypeId,
    __in IMAGEHLP_SYMBOL_TYPE_INFO GetType,
    __out PVOID pInfo
    );

#define IMAGEHLP_GET_TYPE_INFO_UNCACHED 0x00000001
#define IMAGEHLP_GET_TYPE_INFO_CHILDREN 0x00000002

typedef struct _IMAGEHLP_GET_TYPE_INFO_PARAMS {
    IN  ULONG    SizeOfStruct;
    IN  ULONG    Flags;
    IN  ULONG    NumIds;
    IN  PULONG   TypeIds;
    IN  ULONG64  TagFilter;
    IN  ULONG    NumReqs;
    IN  IMAGEHLP_SYMBOL_TYPE_INFO* ReqKinds;
    IN  PULONG_PTR ReqOffsets;
    IN  PULONG   ReqSizes;
    IN  ULONG_PTR ReqStride;
    IN  ULONG_PTR BufferSize;
    OUT PVOID    Buffer;
    OUT ULONG    EntriesMatched;
    OUT ULONG    EntriesFilled;
    OUT ULONG64  TagsFound;
    OUT ULONG64  AllReqsValid;
    IN  ULONG    NumReqsValid;
    OUT PULONG64 ReqsValid OPTIONAL;
} IMAGEHLP_GET_TYPE_INFO_PARAMS, *PIMAGEHLP_GET_TYPE_INFO_PARAMS;

BOOL
IMAGEAPI
SymGetTypeInfoEx(
    __in HANDLE hProcess,
    __in DWORD64 ModBase,
    __inout PIMAGEHLP_GET_TYPE_INFO_PARAMS Params
    );

BOOL
IMAGEAPI
SymEnumTypes(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumTypesW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumTypesByName(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt PCSTR mask,
    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumTypesByNameW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt PCWSTR mask,
    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymGetTypeFromName(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PCSTR Name,
    __inout PSYMBOL_INFO Symbol
    );

BOOL
IMAGEAPI
SymGetTypeFromNameW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PCWSTR Name,
    __inout PSYMBOL_INFOW Symbol
    );

BOOL
IMAGEAPI
SymAddSymbol(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PCSTR Name,
    __in DWORD64 Address,
    __in DWORD Size,
    __in DWORD Flags
    );

BOOL
IMAGEAPI
SymAddSymbolW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PCWSTR Name,
    __in DWORD64 Address,
    __in DWORD Size,
    __in DWORD Flags
    );

BOOL
IMAGEAPI
SymDeleteSymbol(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt PCSTR Name,
    __in DWORD64 Address,
    __in DWORD Flags
    );

BOOL
IMAGEAPI
SymDeleteSymbolW(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in_opt PCWSTR Name,
    __in DWORD64 Address,
    __in DWORD Flags
    );

BOOL
IMAGEAPI
SymRefreshModuleList(
    __in HANDLE hProcess
    );

BOOL
IMAGEAPI
SymAddSourceStream(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCSTR StreamFile,
    __in_bcount_opt(Size) PBYTE Buffer,
    __in size_t Size
    );

typedef BOOL (WINAPI *SYMADDSOURCESTREAM)(HANDLE, ULONG64, PCSTR, PBYTE, size_t);

BOOL
IMAGEAPI
SymAddSourceStreamA(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCSTR StreamFile,
    __in_bcount_opt(Size) PBYTE Buffer,
    __in size_t Size
    );

typedef BOOL (WINAPI *SYMADDSOURCESTREAMA)(HANDLE, ULONG64, PCSTR, PBYTE, size_t);

BOOL
IMAGEAPI
SymAddSourceStreamW(
    __in HANDLE hProcess,
    __in ULONG64 Base,
    __in_opt PCWSTR FileSpec,
    __in_bcount_opt(Size) PBYTE Buffer,
    __in size_t Size
    );

BOOL
IMAGEAPI
SymSrvIsStoreW(
    __in_opt HANDLE hProcess,
    __in PCWSTR path
    );

BOOL
IMAGEAPI
SymSrvIsStore(
    __in_opt HANDLE hProcess,
    __in PCSTR path
    );

PCSTR
IMAGEAPI
SymSrvDeltaName(
    __in HANDLE hProcess,
    __in_opt PCSTR SymPath,
    __in PCSTR Type,
    __in PCSTR File1,
    __in PCSTR File2
    );

PCWSTR
IMAGEAPI
SymSrvDeltaNameW(
    __in HANDLE hProcess,
    __in_opt PCWSTR SymPath,
    __in PCWSTR Type,
    __in PCWSTR File1,
    __in PCWSTR File2
    );

PCSTR
IMAGEAPI
SymSrvGetSupplement(
    __in HANDLE hProcess,
    __in_opt PCSTR SymPath,
    __in PCSTR Node,
    __in PCSTR File
    );

PCWSTR
IMAGEAPI
SymSrvGetSupplementW(
    __in HANDLE hProcess,
    __in_opt PCWSTR SymPath,
    __in PCWSTR Node,
    __in PCWSTR File
    );

BOOL
IMAGEAPI
SymSrvGetFileIndexes(
    __in PCSTR File,
    __out GUID *Id,
    __out PDWORD Val1,
    __out_opt PDWORD Val2,
    __in DWORD Flags
    );

BOOL
IMAGEAPI
SymSrvGetFileIndexesW(
    __in PCWSTR File,
    __out GUID *Id,
    __out PDWORD Val1,
    __out_opt PDWORD Val2,
    __in DWORD Flags
    );

BOOL
IMAGEAPI
SymSrvGetFileIndexStringW(
    __in HANDLE hProcess,
    __in_opt PCWSTR SrvPath,
    __in PCWSTR File,
    __out_ecount(Size) PWSTR Index,
    __in size_t Size,
    __in DWORD Flags
    );

BOOL
IMAGEAPI
SymSrvGetFileIndexString(
    __in HANDLE hProcess,
    __in_opt PCSTR SrvPath,
    __in PCSTR File,
    __out_ecount(Size) PSTR Index,
    __in size_t Size,
    __in DWORD Flags
    );

typedef struct {
    DWORD sizeofstruct;
    char file[MAX_PATH +1];
    BOOL  stripped;
    DWORD timestamp;
    DWORD size;
    char dbgfile[MAX_PATH +1];
    char pdbfile[MAX_PATH + 1];
    GUID  guid;
    DWORD sig;
    DWORD age;
} SYMSRV_INDEX_INFO, *PSYMSRV_INDEX_INFO;

typedef struct {
    DWORD sizeofstruct;
    WCHAR file[MAX_PATH +1];
    BOOL  stripped;
    DWORD timestamp;
    DWORD size;
    WCHAR dbgfile[MAX_PATH +1];
    WCHAR pdbfile[MAX_PATH + 1];
    GUID  guid;
    DWORD sig;
    DWORD age;
} SYMSRV_INDEX_INFOW, *PSYMSRV_INDEX_INFOW;

BOOL
IMAGEAPI
SymSrvGetFileIndexInfo(
    __in PCSTR File,
    __out PSYMSRV_INDEX_INFO Info,
    __in DWORD Flags
    );

BOOL
IMAGEAPI
SymSrvGetFileIndexInfoW(
    __in PCWSTR File,
    __out PSYMSRV_INDEX_INFOW Info,
    __in DWORD Flags
    );

PCSTR
IMAGEAPI
SymSrvStoreSupplement(
    __in HANDLE hProcess,
    __in_opt PCSTR SrvPath,
    __in PCSTR Node,
    __in PCSTR File,
    __in DWORD Flags
    );

PCWSTR
IMAGEAPI
SymSrvStoreSupplementW(
    __in HANDLE hProcess,
    __in_opt PCWSTR SymPath,
    __in PCWSTR Node,
    __in PCWSTR File,
    __in DWORD Flags
    );

PCSTR
IMAGEAPI
SymSrvStoreFile(
    __in HANDLE hProcess,
    __in_opt PCSTR SrvPath,
    __in PCSTR File,
    __in DWORD Flags
    );

PCWSTR
IMAGEAPI
SymSrvStoreFileW(
    __in HANDLE hProcess,
    __in_opt PCWSTR SrvPath,
    __in PCWSTR File,
    __in DWORD Flags
    );

// used by SymGetSymbolFile's "Type" parameter

typedef enum {
    sfImage = 0,
    sfDbg,
    sfPdb,
    sfMpd,
    sfMax
};

BOOL
IMAGEAPI
SymGetSymbolFile(
    __in_opt HANDLE hProcess,
    __in_opt PCSTR SymPath,
    __in PCSTR ImageFile,
    __in DWORD Type,
    __out_ecount(cSymbolFile) PSTR SymbolFile,
    __in size_t cSymbolFile,
    __out_ecount(cDbgFile) PSTR DbgFile,
    __in size_t cDbgFile
    );

BOOL
IMAGEAPI
SymGetSymbolFileW(
    __in_opt HANDLE hProcess,
    __in_opt PCWSTR SymPath,
    __in PCWSTR ImageFile,
    __in DWORD Type,
    __out_ecount(cSymbolFile) PWSTR SymbolFile,
    __in size_t cSymbolFile,
    __out_ecount(cDbgFile) PWSTR DbgFile,
    __in size_t cDbgFile
    );

//
// Full user-mode dump creation.
//

typedef BOOL (WINAPI *PDBGHELP_CREATE_USER_DUMP_CALLBACK)(
    __in DWORD DataType,
    __in PVOID* Data,
    __out LPDWORD DataLength,
    __in_opt PVOID UserData
    );

BOOL
WINAPI
DbgHelpCreateUserDump(
    __in_opt LPCSTR FileName,
    __in PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback,
    __in_opt PVOID UserData
    );

BOOL
WINAPI
DbgHelpCreateUserDumpW(
    __in_opt LPCWSTR FileName,
    __in PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback,
    __in_opt PVOID UserData
    );

// -----------------------------------------------------------------
// The following 4 legacy APIs are fully supported, but newer
// ones are recommended.  SymFromName and SymFromAddr provide
// much more detailed info on the returned symbol.

BOOL
IMAGEAPI
SymGetSymFromAddr64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out_opt PDWORD64 pdwDisplacement,
    __inout PIMAGEHLP_SYMBOL64  Symbol
    );


#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetSymFromAddr SymGetSymFromAddr64
#else
BOOL
IMAGEAPI
SymGetSymFromAddr(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out_opt PDWORD pdwDisplacement,
    __inout PIMAGEHLP_SYMBOL Symbol
    );
#endif

// While following two APIs will provide a symbol from a name,
// SymEnumSymbols can provide the same matching information
// for ALL symbols with a matching name, even regular
// expressions.  That way you can search across modules
// and differentiate between identically named symbols.

BOOL
IMAGEAPI
SymGetSymFromName64(
    __in HANDLE hProcess,
    __in PCSTR Name,
    __inout PIMAGEHLP_SYMBOL64 Symbol
    );

#if !defined(_IMAGEHLP_SOURCE_) && defined(_IMAGEHLP64)
#define SymGetSymFromName SymGetSymFromName64
#else
BOOL
IMAGEAPI
SymGetSymFromName(
    __in HANDLE hProcess,
    __in PCSTR Name,
    __inout PIMAGEHLP_SYMBOL Symbol
    );
#endif


// Symbol server exports

typedef BOOL (WINAPI *PSYMBOLSERVERPROC)(PCSTR, PCSTR, PVOID, DWORD, DWORD, PSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERPROCA)(PCSTR, PCSTR, PVOID, DWORD, DWORD, PSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERPROCW)(PCWSTR, PCWSTR, PVOID, DWORD, DWORD, PWSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERBYINDEXPROC)(PCSTR, PCSTR, PCSTR, PSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERBYINDEXPROCA)(PCSTR, PCSTR, PCSTR, PSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERBYINDEXPROCW)(PCWSTR, PCWSTR, PCWSTR, PWSTR);
typedef BOOL (WINAPI *PSYMBOLSERVEROPENPROC)(VOID);
typedef BOOL (WINAPI *PSYMBOLSERVERCLOSEPROC)(VOID);
typedef BOOL (WINAPI *PSYMBOLSERVERSETOPTIONSPROC)(UINT_PTR, ULONG64);
typedef BOOL (WINAPI *PSYMBOLSERVERSETOPTIONSWPROC)(UINT_PTR, ULONG64);
typedef BOOL (CALLBACK WINAPI *PSYMBOLSERVERCALLBACKPROC)(UINT_PTR action, ULONG64 data, ULONG64 context);
typedef UINT_PTR (WINAPI *PSYMBOLSERVERGETOPTIONSPROC)();
typedef BOOL (WINAPI *PSYMBOLSERVERPINGPROC)(PCSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERPINGPROCA)(PCSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERPINGPROCW)(PCWSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERGETVERSION)(LPAPI_VERSION);
typedef BOOL (WINAPI *PSYMBOLSERVERDELTANAME)(PCSTR, PVOID, DWORD, DWORD, PVOID, DWORD, DWORD, PSTR, size_t);
typedef BOOL (WINAPI *PSYMBOLSERVERDELTANAMEW)(PCWSTR, PVOID, DWORD, DWORD, PVOID, DWORD, DWORD, PWSTR, size_t);
typedef BOOL (WINAPI *PSYMBOLSERVERGETSUPPLEMENT)(PCSTR, PCSTR, PCSTR, PSTR, size_t);
typedef BOOL (WINAPI *PSYMBOLSERVERGETSUPPLEMENTW)(PCWSTR, PCWSTR, PCWSTR, PWSTR, size_t);
typedef BOOL (WINAPI *PSYMBOLSERVERSTORESUPPLEMENT)(PCSTR, PCSTR, PCSTR, PSTR, size_t, DWORD);
typedef BOOL (WINAPI *PSYMBOLSERVERSTORESUPPLEMENTW)(PCWSTR, PCWSTR, PCWSTR, PWSTR, size_t, DWORD);
typedef BOOL (WINAPI *PSYMBOLSERVERGETINDEXSTRING)(PVOID, DWORD, DWORD, PSTR, size_t);
typedef BOOL (WINAPI *PSYMBOLSERVERGETINDEXSTRINGW)(PVOID, DWORD, DWORD, PWSTR, size_t);
typedef BOOL (WINAPI *PSYMBOLSERVERSTOREFILE)(PCSTR, PCSTR, PVOID, DWORD, DWORD, PSTR, size_t, DWORD);
typedef BOOL (WINAPI *PSYMBOLSERVERSTOREFILEW)(PCWSTR, PCWSTR, PVOID, DWORD, DWORD, PWSTR, size_t, DWORD);
typedef BOOL (WINAPI *PSYMBOLSERVERISSTORE)(PCSTR);
typedef BOOL (WINAPI *PSYMBOLSERVERISSTOREW)(PCWSTR);
typedef DWORD (WINAPI *PSYMBOLSERVERVERSION)();
typedef BOOL (CALLBACK WINAPI *PSYMBOLSERVERMESSAGEPROC)(UINT_PTR action, ULONG64 data, ULONG64 context);

#define SYMSRV_VERSION              2

#define SSRVOPT_CALLBACK            0x00000001
#define SSRVOPT_DWORD               0x00000002
#define SSRVOPT_DWORDPTR            0x00000004
#define SSRVOPT_GUIDPTR             0x00000008
#define SSRVOPT_OLDGUIDPTR          0x00000010
#define SSRVOPT_UNATTENDED          0x00000020
#define SSRVOPT_NOCOPY              0x00000040
#define SSRVOPT_GETPATH             0x00000040
#define SSRVOPT_PARENTWIN           0x00000080
#define SSRVOPT_PARAMTYPE           0x00000100
#define SSRVOPT_SECURE              0x00000200
#define SSRVOPT_TRACE               0x00000400
#define SSRVOPT_SETCONTEXT          0x00000800
#define SSRVOPT_PROXY               0x00001000
#define SSRVOPT_DOWNSTREAM_STORE    0x00002000
#define SSRVOPT_OVERWRITE           0x00004000
#define SSRVOPT_RESETTOU            0x00008000
#define SSRVOPT_CALLBACKW           0x00010000
#define SSRVOPT_FLAT_DEFAULT_STORE  0x00020000
#define SSRVOPT_PROXYW              0x00040000
#define SSRVOPT_MESSAGE             0x00080000
#define SSRVOPT_SERVICE             0x00100000   // deprecated
#define SSRVOPT_FAVOR_COMPRESSED    0x00200000
#define SSRVOPT_STRING              0x004